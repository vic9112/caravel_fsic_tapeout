-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
-- Version: 2022.1
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity userdma_streamtoparallelwithburst_Pipeline_VITIS_LOOP_25_2 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    inbuf_dout : IN STD_LOGIC_VECTOR (32 downto 0);
    inbuf_num_data_valid : IN STD_LOGIC_VECTOR (10 downto 0);
    inbuf_fifo_cap : IN STD_LOGIC_VECTOR (10 downto 0);
    inbuf_empty_n : IN STD_LOGIC;
    inbuf_read : OUT STD_LOGIC;
    m_axi_gmem0_AWVALID : OUT STD_LOGIC;
    m_axi_gmem0_AWREADY : IN STD_LOGIC;
    m_axi_gmem0_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem0_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem0_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem0_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem0_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem0_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem0_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem0_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem0_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem0_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem0_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem0_WVALID : OUT STD_LOGIC;
    m_axi_gmem0_WREADY : IN STD_LOGIC;
    m_axi_gmem0_WDATA : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem0_WSTRB : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem0_WLAST : OUT STD_LOGIC;
    m_axi_gmem0_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem0_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem0_ARVALID : OUT STD_LOGIC;
    m_axi_gmem0_ARREADY : IN STD_LOGIC;
    m_axi_gmem0_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem0_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem0_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem0_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem0_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem0_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem0_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem0_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem0_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem0_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem0_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem0_RVALID : IN STD_LOGIC;
    m_axi_gmem0_RREADY : OUT STD_LOGIC;
    m_axi_gmem0_RDATA : IN STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem0_RLAST : IN STD_LOGIC;
    m_axi_gmem0_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem0_RFIFONUM : IN STD_LOGIC_VECTOR (8 downto 0);
    m_axi_gmem0_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem0_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem0_BVALID : IN STD_LOGIC;
    m_axi_gmem0_BREADY : OUT STD_LOGIC;
    m_axi_gmem0_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem0_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem0_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    tmp_1 : IN STD_LOGIC_VECTOR (31 downto 0);
    even : IN STD_LOGIC_VECTOR (0 downto 0);
    out_memory_assign : IN STD_LOGIC_VECTOR (63 downto 0);
    zext_ln30_1 : IN STD_LOGIC_VECTOR (5 downto 0);
    shl_ln30_1 : IN STD_LOGIC_VECTOR (7 downto 0);
    zext_ln32_2 : IN STD_LOGIC_VECTOR (5 downto 0);
    shl_ln32_1 : IN STD_LOGIC_VECTOR (7 downto 0) );
end;


architecture behav of userdma_streamtoparallelwithburst_Pipeline_VITIS_LOOP_25_2 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv31_1 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000001";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_FFFFFFFF : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111111";
    constant ap_const_lv35_4 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000000000000000100";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal high_reg_172 : STD_LOGIC_VECTOR (0 downto 0);
    signal high_reg_172_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state3_io : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal high_reg_172_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state4_io : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter7 : BOOLEAN;
    signal high_reg_172_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state9_pp0_stage0_iter8 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln25_fu_208_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal gmem0_blk_n_AW : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal gmem0_blk_n_W : STD_LOGIC;
    signal gmem0_blk_n_B : STD_LOGIC;
    signal inbuf_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal high_reg_172_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal high_reg_172_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal high_reg_172_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal high_reg_172_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln32_2_cast_fu_183_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln32_2_cast_reg_409 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln30_1_cast_fu_187_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln30_1_cast_reg_414 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln25_reg_419 : STD_LOGIC_VECTOR (0 downto 0);
    signal high_1_fu_226_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal high_1_reg_423 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln145_fu_239_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln145_reg_429 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln3_reg_434 : STD_LOGIC_VECTOR (60 downto 0);
    signal trunc_ln30_1_reg_439 : STD_LOGIC_VECTOR (60 downto 0);
    signal shl_ln32_fu_343_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal shl_ln32_reg_444 : STD_LOGIC_VECTOR (63 downto 0);
    signal shl_ln30_fu_358_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal shl_ln30_reg_455 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_phi_mux_high_phi_fu_175_p4 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal sext_ln32_1_fu_348_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln30_1_fu_363_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal a_fu_86 : STD_LOGIC_VECTOR (31 downto 0);
    signal a_1_fu_328_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_fu_90 : STD_LOGIC_VECTOR (30 downto 0);
    signal add_ln25_fu_214_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_sig_allocacmp_i_load : STD_LOGIC_VECTOR (30 downto 0);
    signal zext_ln25_fu_204_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln33_fu_220_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal shl_ln2_fu_246_p3 : STD_LOGIC_VECTOR (34 downto 0);
    signal sext_ln32_fu_254_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln32_fu_258_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln30_fu_273_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln1_fu_279_p3 : STD_LOGIC_VECTOR (34 downto 0);
    signal or_ln30_fu_287_p2 : STD_LOGIC_VECTOR (34 downto 0);
    signal sext_ln30_fu_293_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln30_1_fu_297_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln35_fu_315_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln35_fu_321_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln32_fu_340_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter4_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter5_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter6_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter7_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_condition_468 : BOOLEAN;
    signal ap_condition_472 : BOOLEAN;
    signal ap_ce_reg : STD_LOGIC;

    component userdma_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    flow_control_loop_pipe_sequential_init_U : component userdma_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready_pp0_iter7_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    a_fu_86_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    a_fu_86 <= ap_const_lv32_0;
                elsif (((icmp_ln25_reg_419 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    a_fu_86 <= a_1_fu_328_p3;
                end if;
            end if; 
        end if;
    end process;

    high_reg_172_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then
                if ((ap_const_boolean_1 = ap_condition_472)) then 
                    high_reg_172 <= high_1_reg_423;
                elsif (((ap_loop_init = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    high_reg_172 <= ap_const_lv1_0;
                end if;
            end if; 
        end if;
    end process;

    i_fu_90_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln25_fu_208_p2 = ap_const_lv1_1))) then 
                    i_fu_90 <= add_ln25_fu_214_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    i_fu_90 <= ap_const_lv31_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
                high_reg_172_pp0_iter1_reg <= high_reg_172;
                icmp_ln25_reg_419 <= icmp_ln25_fu_208_p2;
                trunc_ln145_reg_429 <= trunc_ln145_fu_239_p1;
                    zext_ln30_1_cast_reg_414(5 downto 0) <= zext_ln30_1_cast_fu_187_p1(5 downto 0);
                    zext_ln32_2_cast_reg_409(5 downto 0) <= zext_ln32_2_cast_fu_183_p1(5 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
                ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
                ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
                ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
                ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
                high_reg_172_pp0_iter2_reg <= high_reg_172_pp0_iter1_reg;
                high_reg_172_pp0_iter3_reg <= high_reg_172_pp0_iter2_reg;
                high_reg_172_pp0_iter4_reg <= high_reg_172_pp0_iter3_reg;
                high_reg_172_pp0_iter5_reg <= high_reg_172_pp0_iter4_reg;
                high_reg_172_pp0_iter6_reg <= high_reg_172_pp0_iter5_reg;
                high_reg_172_pp0_iter7_reg <= high_reg_172_pp0_iter6_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln25_fu_208_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                high_1_reg_423 <= high_1_fu_226_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (high_reg_172_pp0_iter1_reg = ap_const_lv1_1))) then
                shl_ln30_reg_455 <= shl_ln30_fu_358_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (high_reg_172_pp0_iter1_reg = ap_const_lv1_0))) then
                shl_ln32_reg_444 <= shl_ln32_fu_343_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (high_reg_172 = ap_const_lv1_1))) then
                trunc_ln30_1_reg_439 <= add_ln30_1_fu_297_p2(63 downto 3);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (high_reg_172 = ap_const_lv1_0))) then
                trunc_ln3_reg_434 <= add_ln32_fu_258_p2(63 downto 3);
            end if;
        end if;
    end process;
    zext_ln32_2_cast_reg_409(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";
    zext_ln30_1_cast_reg_414(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    a_1_fu_328_p3 <= 
        select_ln35_fu_321_p3 when (even(0) = '1') else 
        add_ln35_fu_315_p2;
    add_ln25_fu_214_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_i_load) + unsigned(ap_const_lv31_1));
    add_ln30_1_fu_297_p2 <= std_logic_vector(signed(sext_ln30_fu_293_p1) + signed(out_memory_assign));
    add_ln30_fu_273_p2 <= std_logic_vector(unsigned(a_fu_86) + unsigned(ap_const_lv32_FFFFFFFF));
    add_ln32_fu_258_p2 <= std_logic_vector(unsigned(out_memory_assign) + unsigned(sext_ln32_fu_254_p1));
    add_ln35_fu_315_p2 <= std_logic_vector(unsigned(a_fu_86) + unsigned(ap_const_lv32_1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter8, inbuf_empty_n, m_axi_gmem0_BVALID, high_reg_172_pp0_iter7_reg)
    begin
                ap_block_pp0_stage0_01001 <= (((inbuf_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter8 = ap_const_logic_1) and (((high_reg_172_pp0_iter7_reg = ap_const_lv1_1) and (m_axi_gmem0_BVALID = ap_const_logic_0)) or ((high_reg_172_pp0_iter7_reg = ap_const_lv1_0) and (m_axi_gmem0_BVALID = ap_const_logic_0)))));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter8, inbuf_empty_n, m_axi_gmem0_BVALID, ap_block_state3_io, ap_block_state4_io, high_reg_172_pp0_iter7_reg)
    begin
                ap_block_pp0_stage0_11001 <= (((inbuf_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter8 = ap_const_logic_1) and (((high_reg_172_pp0_iter7_reg = ap_const_lv1_1) and (m_axi_gmem0_BVALID = ap_const_logic_0)) or ((high_reg_172_pp0_iter7_reg = ap_const_lv1_0) and (m_axi_gmem0_BVALID = ap_const_logic_0)))) or ((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state4_io)) or ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state3_io)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter8, inbuf_empty_n, m_axi_gmem0_BVALID, ap_block_state3_io, ap_block_state4_io, high_reg_172_pp0_iter7_reg)
    begin
                ap_block_pp0_stage0_subdone <= (((inbuf_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter8 = ap_const_logic_1) and (((high_reg_172_pp0_iter7_reg = ap_const_lv1_1) and (m_axi_gmem0_BVALID = ap_const_logic_0)) or ((high_reg_172_pp0_iter7_reg = ap_const_lv1_0) and (m_axi_gmem0_BVALID = ap_const_logic_0)))) or ((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state4_io)) or ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state3_io)));
    end process;

        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state2_pp0_stage0_iter1_assign_proc : process(inbuf_empty_n)
    begin
                ap_block_state2_pp0_stage0_iter1 <= (inbuf_empty_n = ap_const_logic_0);
    end process;


    ap_block_state3_io_assign_proc : process(m_axi_gmem0_AWREADY, high_reg_172_pp0_iter1_reg)
    begin
                ap_block_state3_io <= (((m_axi_gmem0_AWREADY = ap_const_logic_0) and (high_reg_172_pp0_iter1_reg = ap_const_lv1_1)) or ((m_axi_gmem0_AWREADY = ap_const_logic_0) and (high_reg_172_pp0_iter1_reg = ap_const_lv1_0)));
    end process;

        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state4_io_assign_proc : process(m_axi_gmem0_WREADY, high_reg_172_pp0_iter2_reg)
    begin
                ap_block_state4_io <= (((m_axi_gmem0_WREADY = ap_const_logic_0) and (high_reg_172_pp0_iter2_reg = ap_const_lv1_1)) or ((m_axi_gmem0_WREADY = ap_const_logic_0) and (high_reg_172_pp0_iter2_reg = ap_const_lv1_0)));
    end process;

        ap_block_state4_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state9_pp0_stage0_iter8_assign_proc : process(m_axi_gmem0_BVALID, high_reg_172_pp0_iter7_reg)
    begin
                ap_block_state9_pp0_stage0_iter8 <= (((high_reg_172_pp0_iter7_reg = ap_const_lv1_1) and (m_axi_gmem0_BVALID = ap_const_logic_0)) or ((high_reg_172_pp0_iter7_reg = ap_const_lv1_0) and (m_axi_gmem0_BVALID = ap_const_logic_0)));
    end process;


    ap_condition_468_assign_proc : process(ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, icmp_ln25_reg_419)
    begin
                ap_condition_468 <= ((icmp_ln25_reg_419 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0));
    end process;


    ap_condition_472_assign_proc : process(ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001, icmp_ln25_reg_419)
    begin
                ap_condition_472 <= ((icmp_ln25_reg_419 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001));
    end process;


    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln25_fu_208_p2)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln25_fu_208_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter7_reg)
    begin
        if (((ap_loop_exit_ready_pp0_iter7_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_idle_pp0 = ap_const_logic_1) and (ap_start_int = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8)
    begin
        if (((ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_phi_mux_high_phi_fu_175_p4_assign_proc : process(ap_CS_fsm_pp0_stage0, high_1_reg_423, ap_loop_init, ap_condition_468)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then
            if ((ap_const_boolean_1 = ap_condition_468)) then 
                ap_phi_mux_high_phi_fu_175_p4 <= high_1_reg_423;
            elsif ((ap_loop_init = ap_const_logic_1)) then 
                ap_phi_mux_high_phi_fu_175_p4 <= ap_const_lv1_0;
            else 
                ap_phi_mux_high_phi_fu_175_p4 <= high_1_reg_423;
            end if;
        else 
            ap_phi_mux_high_phi_fu_175_p4 <= high_1_reg_423;
        end if; 
    end process;


    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_i_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, i_fu_90)
    begin
        if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_sig_allocacmp_i_load <= ap_const_lv31_0;
        else 
            ap_sig_allocacmp_i_load <= i_fu_90;
        end if; 
    end process;


    gmem0_blk_n_AW_assign_proc : process(ap_enable_reg_pp0_iter2, m_axi_gmem0_AWREADY, high_reg_172_pp0_iter1_reg, ap_block_pp0_stage0)
    begin
        if ((((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (high_reg_172_pp0_iter1_reg = ap_const_lv1_1)) or ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (high_reg_172_pp0_iter1_reg = ap_const_lv1_0)))) then 
            gmem0_blk_n_AW <= m_axi_gmem0_AWREADY;
        else 
            gmem0_blk_n_AW <= ap_const_logic_1;
        end if; 
    end process;


    gmem0_blk_n_B_assign_proc : process(ap_enable_reg_pp0_iter8, m_axi_gmem0_BVALID, high_reg_172_pp0_iter7_reg, ap_block_pp0_stage0)
    begin
        if ((((ap_enable_reg_pp0_iter8 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (high_reg_172_pp0_iter7_reg = ap_const_lv1_1)) or ((ap_enable_reg_pp0_iter8 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (high_reg_172_pp0_iter7_reg = ap_const_lv1_0)))) then 
            gmem0_blk_n_B <= m_axi_gmem0_BVALID;
        else 
            gmem0_blk_n_B <= ap_const_logic_1;
        end if; 
    end process;


    gmem0_blk_n_W_assign_proc : process(ap_enable_reg_pp0_iter3, m_axi_gmem0_WREADY, high_reg_172_pp0_iter2_reg, ap_block_pp0_stage0)
    begin
        if ((((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (high_reg_172_pp0_iter2_reg = ap_const_lv1_1)) or ((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (high_reg_172_pp0_iter2_reg = ap_const_lv1_0)))) then 
            gmem0_blk_n_W <= m_axi_gmem0_WREADY;
        else 
            gmem0_blk_n_W <= ap_const_logic_1;
        end if; 
    end process;

    high_1_fu_226_p3 <= 
        xor_ln33_fu_220_p2 when (even(0) = '1') else 
        ap_phi_mux_high_phi_fu_175_p4;
    icmp_ln25_fu_208_p2 <= "1" when (signed(zext_ln25_fu_204_p1) < signed(tmp_1)) else "0";

    inbuf_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, inbuf_empty_n, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            inbuf_blk_n <= inbuf_empty_n;
        else 
            inbuf_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    inbuf_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            inbuf_read <= ap_const_logic_1;
        else 
            inbuf_read <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_gmem0_ARADDR <= ap_const_lv64_0;
    m_axi_gmem0_ARBURST <= ap_const_lv2_0;
    m_axi_gmem0_ARCACHE <= ap_const_lv4_0;
    m_axi_gmem0_ARID <= ap_const_lv1_0;
    m_axi_gmem0_ARLEN <= ap_const_lv32_0;
    m_axi_gmem0_ARLOCK <= ap_const_lv2_0;
    m_axi_gmem0_ARPROT <= ap_const_lv3_0;
    m_axi_gmem0_ARQOS <= ap_const_lv4_0;
    m_axi_gmem0_ARREGION <= ap_const_lv4_0;
    m_axi_gmem0_ARSIZE <= ap_const_lv3_0;
    m_axi_gmem0_ARUSER <= ap_const_lv1_0;
    m_axi_gmem0_ARVALID <= ap_const_logic_0;

    m_axi_gmem0_AWADDR_assign_proc : process(ap_enable_reg_pp0_iter2, high_reg_172_pp0_iter1_reg, ap_block_pp0_stage0_11001, sext_ln32_1_fu_348_p1, sext_ln30_1_fu_363_p1)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
            if ((high_reg_172_pp0_iter1_reg = ap_const_lv1_1)) then 
                m_axi_gmem0_AWADDR <= sext_ln30_1_fu_363_p1;
            elsif ((high_reg_172_pp0_iter1_reg = ap_const_lv1_0)) then 
                m_axi_gmem0_AWADDR <= sext_ln32_1_fu_348_p1;
            else 
                m_axi_gmem0_AWADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            m_axi_gmem0_AWADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    m_axi_gmem0_AWBURST <= ap_const_lv2_0;
    m_axi_gmem0_AWCACHE <= ap_const_lv4_0;
    m_axi_gmem0_AWID <= ap_const_lv1_0;
    m_axi_gmem0_AWLEN <= ap_const_lv32_1;
    m_axi_gmem0_AWLOCK <= ap_const_lv2_0;
    m_axi_gmem0_AWPROT <= ap_const_lv3_0;
    m_axi_gmem0_AWQOS <= ap_const_lv4_0;
    m_axi_gmem0_AWREGION <= ap_const_lv4_0;
    m_axi_gmem0_AWSIZE <= ap_const_lv3_0;
    m_axi_gmem0_AWUSER <= ap_const_lv1_0;

    m_axi_gmem0_AWVALID_assign_proc : process(ap_enable_reg_pp0_iter2, high_reg_172_pp0_iter1_reg, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (high_reg_172_pp0_iter1_reg = ap_const_lv1_1)) or ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (high_reg_172_pp0_iter1_reg = ap_const_lv1_0)))) then 
            m_axi_gmem0_AWVALID <= ap_const_logic_1;
        else 
            m_axi_gmem0_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    m_axi_gmem0_BREADY_assign_proc : process(ap_enable_reg_pp0_iter8, high_reg_172_pp0_iter7_reg, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_enable_reg_pp0_iter8 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (high_reg_172_pp0_iter7_reg = ap_const_lv1_1)) or ((ap_enable_reg_pp0_iter8 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (high_reg_172_pp0_iter7_reg = ap_const_lv1_0)))) then 
            m_axi_gmem0_BREADY <= ap_const_logic_1;
        else 
            m_axi_gmem0_BREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_gmem0_RREADY <= ap_const_logic_0;

    m_axi_gmem0_WDATA_assign_proc : process(ap_enable_reg_pp0_iter3, high_reg_172_pp0_iter2_reg, shl_ln32_reg_444, shl_ln30_reg_455, ap_block_pp0_stage0_01001)
    begin
        if (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_01001))) then
            if ((high_reg_172_pp0_iter2_reg = ap_const_lv1_1)) then 
                m_axi_gmem0_WDATA <= shl_ln30_reg_455;
            elsif ((high_reg_172_pp0_iter2_reg = ap_const_lv1_0)) then 
                m_axi_gmem0_WDATA <= shl_ln32_reg_444;
            else 
                m_axi_gmem0_WDATA <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            m_axi_gmem0_WDATA <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    m_axi_gmem0_WID <= ap_const_lv1_0;
    m_axi_gmem0_WLAST <= ap_const_logic_0;

    m_axi_gmem0_WSTRB_assign_proc : process(ap_enable_reg_pp0_iter3, high_reg_172_pp0_iter2_reg, shl_ln30_1, shl_ln32_1, ap_block_pp0_stage0_01001)
    begin
        if (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_01001))) then
            if ((high_reg_172_pp0_iter2_reg = ap_const_lv1_1)) then 
                m_axi_gmem0_WSTRB <= shl_ln30_1;
            elsif ((high_reg_172_pp0_iter2_reg = ap_const_lv1_0)) then 
                m_axi_gmem0_WSTRB <= shl_ln32_1;
            else 
                m_axi_gmem0_WSTRB <= "XXXXXXXX";
            end if;
        else 
            m_axi_gmem0_WSTRB <= "XXXXXXXX";
        end if; 
    end process;

    m_axi_gmem0_WUSER <= ap_const_lv1_0;

    m_axi_gmem0_WVALID_assign_proc : process(ap_enable_reg_pp0_iter3, high_reg_172_pp0_iter2_reg, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (high_reg_172_pp0_iter2_reg = ap_const_lv1_1)) or ((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (high_reg_172_pp0_iter2_reg = ap_const_lv1_0)))) then 
            m_axi_gmem0_WVALID <= ap_const_logic_1;
        else 
            m_axi_gmem0_WVALID <= ap_const_logic_0;
        end if; 
    end process;

    or_ln30_fu_287_p2 <= (shl_ln1_fu_279_p3 or ap_const_lv35_4);
    select_ln35_fu_321_p3 <= 
        add_ln35_fu_315_p2 when (high_1_reg_423(0) = '1') else 
        a_fu_86;
        sext_ln30_1_fu_363_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln30_1_reg_439),64));

        sext_ln30_fu_293_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(or_ln30_fu_287_p2),64));

        sext_ln32_1_fu_348_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln3_reg_434),64));

        sext_ln32_fu_254_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln2_fu_246_p3),64));

    shl_ln1_fu_279_p3 <= (add_ln30_fu_273_p2 & ap_const_lv3_0);
    shl_ln2_fu_246_p3 <= (a_fu_86 & ap_const_lv3_0);
    shl_ln30_fu_358_p2 <= std_logic_vector(shift_left(unsigned(zext_ln32_fu_340_p1),to_integer(unsigned('0' & zext_ln30_1_cast_reg_414(31-1 downto 0)))));
    shl_ln32_fu_343_p2 <= std_logic_vector(shift_left(unsigned(zext_ln32_fu_340_p1),to_integer(unsigned('0' & zext_ln32_2_cast_reg_409(31-1 downto 0)))));
    trunc_ln145_fu_239_p1 <= inbuf_dout(32 - 1 downto 0);
    xor_ln33_fu_220_p2 <= (ap_phi_mux_high_phi_fu_175_p4 xor ap_const_lv1_1);
    zext_ln25_fu_204_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_sig_allocacmp_i_load),32));
    zext_ln30_1_cast_fu_187_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln30_1),64));
    zext_ln32_2_cast_fu_183_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln32_2),64));
    zext_ln32_fu_340_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln145_reg_429),64));
end behav;
