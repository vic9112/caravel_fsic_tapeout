//****************************************************************************//
// Verilog models generated by SiliconSmart M-2017.03-SP3 build date: Aug 22, 2017 15:59:14. (SMSC-2) //
// Siliconsmart Path: /global/apps/siliconsmart_2017.03-SP3/linux64/bin/siliconsmart //
// Host Name: am04dwamd076.internal.synopsys.com, User Name: lenag, PID: 20340  //
// Directory: /slowfs/am04dwt2p082/meruzha/char_io/wb/processes/tt0p8v25c_1p8v/siliconsmart/simulation_fc //
//                                                                            //
// File generated on Sun Dec 17 18:58:27 AMT 2017. (SMSC-3)                   //
//****************************************************************************//


`timescale 1ns/1ps



`celldefine
module A1825_EW( CORE, PADIO );
inout CORE, PADIO;

`ifdef FUNCTIONAL  //  functional //
   A1825_EW_func A1825_EW_behav_inst(.CORE(CORE),.PADIO(PADIO));
`else
   A1825_EW_func A1825_EW_inst(.CORE(CORE),.PADIO(PADIO));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module A1825_NS( CORE, PADIO );
inout CORE, PADIO;

`ifdef FUNCTIONAL  //  functional //
   A1825_NS_func A1825_NS_behav_inst(.CORE(CORE),.PADIO(PADIO));
`else
   A1825_NS_func A1825_NS_inst(.CORE(CORE),.PADIO(PADIO));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module AR1825_EW( CORE, PADIO );
inout CORE, PADIO;

`ifdef FUNCTIONAL  //  functional //
   AR1825_EW_func AR1825_EW_behav_inst(.CORE(CORE),.PADIO(PADIO));
`else
   AR1825_EW_func AR1825_EW_inst(.CORE(CORE),.PADIO(PADIO));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module AR1825_NS( CORE, PADIO );
inout CORE, PADIO;

`ifdef FUNCTIONAL  //  functional //
   AR1825_NS_func AR1825_NS_behav_inst(.CORE(CORE),.PADIO(PADIO));
`else
   AR1825_NS_func AR1825_NS_inst(.CORE(CORE),.PADIO(PADIO));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module AVDD_EW(  );

`ifdef FUNCTIONAL  //  functional //
   AVDD_EW_func AVDD_EW_behav_inst();
`else
   AVDD_EW_func AVDD_EW_inst();
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module AVDD_NS(  );

`ifdef FUNCTIONAL  //  functional //
   AVDD_NS_func AVDD_NS_behav_inst();
`else
   AVDD_NS_func AVDD_NS_inst();
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module AVSS_EW(  );

`ifdef FUNCTIONAL  //  functional //
   AVSS_EW_func AVSS_EW_behav_inst();
`else
   AVSS_EW_func AVSS_EW_inst();
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module AVSS_NS(  );

`ifdef FUNCTIONAL  //  functional //
   AVSS_NS_func AVSS_NS_behav_inst();
`else
   AVSS_NS_func AVSS_NS_inst();
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module B12I1025_EW( DIN, DOUT, EN, PADIO, PULL_DOWN, PULL_UP, R_EN );
input DIN, EN, PULL_DOWN, PULL_UP, R_EN;
inout PADIO;
output DOUT;

`ifdef FUNCTIONAL  //  functional //
   B12I1025_EW_func B12I1025_EW_behav_inst(.DIN(DIN),.DOUT(DOUT),.EN(EN),.PADIO(PADIO),.PULL_DOWN(PULL_DOWN),.PULL_UP(PULL_UP),.R_EN(R_EN));
`else
   B12I1025_EW_func B12I1025_EW_inst(.DIN(DIN),.DOUT(DOUT),.EN(EN),.PADIO(PADIO),.PULL_DOWN(PULL_DOWN),.PULL_UP(PULL_UP),.R_EN(R_EN));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc PADIO --> DOUT
      (PADIO => DOUT) = (1.0,1.0);
      
      // comb arc R_EN --> DOUT
      (R_EN => DOUT) = (1.0,1.0);
      
      // comb arc DIN --> PADIO
      (DIN => PADIO) = (1.0,1.0);
      
      // comb arc EN --> PADIO
      (EN => PADIO) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module B12I1025_NS( DIN, DOUT, EN, PADIO, PULL_DOWN, PULL_UP, R_EN );
input DIN, EN, PULL_DOWN, PULL_UP, R_EN;
inout PADIO;
output DOUT;

`ifdef FUNCTIONAL  //  functional //
   B12I1025_NS_func B12I1025_NS_behav_inst(.DIN(DIN),.DOUT(DOUT),.EN(EN),.PADIO(PADIO),.PULL_DOWN(PULL_DOWN),.PULL_UP(PULL_UP),.R_EN(R_EN));
`else
   B12I1025_NS_func B12I1025_NS_inst(.DIN(DIN),.DOUT(DOUT),.EN(EN),.PADIO(PADIO),.PULL_DOWN(PULL_DOWN),.PULL_UP(PULL_UP),.R_EN(R_EN));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc PADIO --> DOUT
      (PADIO => DOUT) = (1.0,1.0);
      
      // comb arc R_EN --> DOUT
      (R_EN => DOUT) = (1.0,1.0);
      
      // comb arc DIN --> PADIO
      (DIN => PADIO) = (1.0,1.0);
      
      // comb arc EN --> PADIO
      (EN => PADIO) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module B12ISH1025_EW( DIN, DOUT, EN, PADIO, PULL_DOWN, PULL_UP, R_EN );
input DIN, EN, PULL_DOWN, PULL_UP, R_EN;
inout PADIO;
output DOUT;

`ifdef FUNCTIONAL  //  functional //
   B12ISH1025_EW_func B12ISH1025_EW_behav_inst(.DIN(DIN),.DOUT(DOUT),.EN(EN),.PADIO(PADIO),.PULL_DOWN(PULL_DOWN),.PULL_UP(PULL_UP),.R_EN(R_EN));
`else
   B12ISH1025_EW_func B12ISH1025_EW_inst(.DIN(DIN),.DOUT(DOUT),.EN(EN),.PADIO(PADIO),.PULL_DOWN(PULL_DOWN),.PULL_UP(PULL_UP),.R_EN(R_EN));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc PADIO --> DOUT
      (PADIO => DOUT) = (1.0,1.0);
      
      // comb arc R_EN --> DOUT
      (R_EN => DOUT) = (1.0,1.0);
      
      // comb arc DIN --> PADIO
      (DIN => PADIO) = (1.0,1.0);
      
      // comb arc EN --> PADIO
      (EN => PADIO) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module B12ISH1025_NS( DIN, DOUT, EN, PADIO, PULL_DOWN, PULL_UP, R_EN );
input DIN, EN, PULL_DOWN, PULL_UP, R_EN;
inout PADIO;
output DOUT;

`ifdef FUNCTIONAL  //  functional //
   B12ISH1025_NS_func B12ISH1025_NS_behav_inst(.DIN(DIN),.DOUT(DOUT),.EN(EN),.PADIO(PADIO),.PULL_DOWN(PULL_DOWN),.PULL_UP(PULL_UP),.R_EN(R_EN));
`else
   B12ISH1025_NS_func B12ISH1025_NS_inst(.DIN(DIN),.DOUT(DOUT),.EN(EN),.PADIO(PADIO),.PULL_DOWN(PULL_DOWN),.PULL_UP(PULL_UP),.R_EN(R_EN));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc PADIO --> DOUT
      (PADIO => DOUT) = (1.0,1.0);
      
      // comb arc R_EN --> DOUT
      (R_EN => DOUT) = (1.0,1.0);
      
      // comb arc DIN --> PADIO
      (DIN => PADIO) = (1.0,1.0);
      
      // comb arc EN --> PADIO
      (EN => PADIO) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module B16I1025_EW( DIN, DOUT, EN, PADIO, PULL_DOWN, PULL_UP, R_EN );
input DIN, EN, PULL_DOWN, PULL_UP, R_EN;
inout PADIO;
output DOUT;

`ifdef FUNCTIONAL  //  functional //
   B16I1025_EW_func B16I1025_EW_behav_inst(.DIN(DIN),.DOUT(DOUT),.EN(EN),.PADIO(PADIO),.PULL_DOWN(PULL_DOWN),.PULL_UP(PULL_UP),.R_EN(R_EN));
`else
   B16I1025_EW_func B16I1025_EW_inst(.DIN(DIN),.DOUT(DOUT),.EN(EN),.PADIO(PADIO),.PULL_DOWN(PULL_DOWN),.PULL_UP(PULL_UP),.R_EN(R_EN));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc PADIO --> DOUT
      (PADIO => DOUT) = (1.0,1.0);
      
      // comb arc R_EN --> DOUT
      (R_EN => DOUT) = (1.0,1.0);
      
      // comb arc DIN --> PADIO
      (DIN => PADIO) = (1.0,1.0);
      
      // comb arc EN --> PADIO
      (EN => PADIO) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module B16I1025_NS( DIN, DOUT, EN, PADIO, PULL_DOWN, PULL_UP, R_EN );
input DIN, EN, PULL_DOWN, PULL_UP, R_EN;
inout PADIO;
output DOUT;

`ifdef FUNCTIONAL  //  functional //
   B16I1025_NS_func B16I1025_NS_behav_inst(.DIN(DIN),.DOUT(DOUT),.EN(EN),.PADIO(PADIO),.PULL_DOWN(PULL_DOWN),.PULL_UP(PULL_UP),.R_EN(R_EN));
`else
   B16I1025_NS_func B16I1025_NS_inst(.DIN(DIN),.DOUT(DOUT),.EN(EN),.PADIO(PADIO),.PULL_DOWN(PULL_DOWN),.PULL_UP(PULL_UP),.R_EN(R_EN));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc PADIO --> DOUT
      (PADIO => DOUT) = (1.0,1.0);
      
      // comb arc R_EN --> DOUT
      (R_EN => DOUT) = (1.0,1.0);
      
      // comb arc DIN --> PADIO
      (DIN => PADIO) = (1.0,1.0);
      
      // comb arc EN --> PADIO
      (EN => PADIO) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module B16ISH1025_EW( DIN, DOUT, EN, PADIO, PULL_DOWN, PULL_UP, R_EN );
input DIN, EN, PULL_DOWN, PULL_UP, R_EN;
inout PADIO;
output DOUT;

`ifdef FUNCTIONAL  //  functional //
   B16ISH1025_EW_func B16ISH1025_EW_behav_inst(.DIN(DIN),.DOUT(DOUT),.EN(EN),.PADIO(PADIO),.PULL_DOWN(PULL_DOWN),.PULL_UP(PULL_UP),.R_EN(R_EN));
`else
   B16ISH1025_EW_func B16ISH1025_EW_inst(.DIN(DIN),.DOUT(DOUT),.EN(EN),.PADIO(PADIO),.PULL_DOWN(PULL_DOWN),.PULL_UP(PULL_UP),.R_EN(R_EN));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc PADIO --> DOUT
      (PADIO => DOUT) = (1.0,1.0);
      
      // comb arc R_EN --> DOUT
      (R_EN => DOUT) = (1.0,1.0);
      
      // comb arc DIN --> PADIO
      (DIN => PADIO) = (1.0,1.0);
      
      // comb arc EN --> PADIO
      (EN => PADIO) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module B16ISH1025_NS( DIN, DOUT, EN, PADIO, PULL_DOWN, PULL_UP, R_EN );
input DIN, EN, PULL_DOWN, PULL_UP, R_EN;
inout PADIO;
output DOUT;

`ifdef FUNCTIONAL  //  functional //
   B16ISH1025_NS_func B16ISH1025_NS_behav_inst(.DIN(DIN),.DOUT(DOUT),.EN(EN),.PADIO(PADIO),.PULL_DOWN(PULL_DOWN),.PULL_UP(PULL_UP),.R_EN(R_EN));
`else
   B16ISH1025_NS_func B16ISH1025_NS_inst(.DIN(DIN),.DOUT(DOUT),.EN(EN),.PADIO(PADIO),.PULL_DOWN(PULL_DOWN),.PULL_UP(PULL_UP),.R_EN(R_EN));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc PADIO --> DOUT
      (PADIO => DOUT) = (1.0,1.0);
      
      // comb arc R_EN --> DOUT
      (R_EN => DOUT) = (1.0,1.0);
      
      // comb arc DIN --> PADIO
      (DIN => PADIO) = (1.0,1.0);
      
      // comb arc EN --> PADIO
      (EN => PADIO) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module B4I1025_EW( DIN, DOUT, EN, PADIO, PULL_DOWN, PULL_UP, R_EN );
input DIN, EN, PULL_DOWN, PULL_UP, R_EN;
inout PADIO;
output DOUT;

`ifdef FUNCTIONAL  //  functional //
   B4I1025_EW_func B4I1025_EW_behav_inst(.DIN(DIN),.DOUT(DOUT),.EN(EN),.PADIO(PADIO),.PULL_DOWN(PULL_DOWN),.PULL_UP(PULL_UP),.R_EN(R_EN));
`else
   B4I1025_EW_func B4I1025_EW_inst(.DIN(DIN),.DOUT(DOUT),.EN(EN),.PADIO(PADIO),.PULL_DOWN(PULL_DOWN),.PULL_UP(PULL_UP),.R_EN(R_EN));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc PADIO --> DOUT
      (PADIO => DOUT) = (1.0,1.0);
      
      // comb arc R_EN --> DOUT
      (R_EN => DOUT) = (1.0,1.0);
      
      // comb arc DIN --> PADIO
      (DIN => PADIO) = (1.0,1.0);
      
      // comb arc EN --> PADIO
      (EN => PADIO) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module B4I1025_NS( DIN, DOUT, EN, PADIO, PULL_DOWN, PULL_UP, R_EN );
input DIN, EN, PULL_DOWN, PULL_UP, R_EN;
inout PADIO;
output DOUT;

`ifdef FUNCTIONAL  //  functional //
   B4I1025_NS_func B4I1025_NS_behav_inst(.DIN(DIN),.DOUT(DOUT),.EN(EN),.PADIO(PADIO),.PULL_DOWN(PULL_DOWN),.PULL_UP(PULL_UP),.R_EN(R_EN));
`else
   B4I1025_NS_func B4I1025_NS_inst(.DIN(DIN),.DOUT(DOUT),.EN(EN),.PADIO(PADIO),.PULL_DOWN(PULL_DOWN),.PULL_UP(PULL_UP),.R_EN(R_EN));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc PADIO --> DOUT
      (PADIO => DOUT) = (1.0,1.0);
      
      // comb arc R_EN --> DOUT
      (R_EN => DOUT) = (1.0,1.0);
      
      // comb arc DIN --> PADIO
      (DIN => PADIO) = (1.0,1.0);
      
      // comb arc EN --> PADIO
      (EN => PADIO) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module B4ISH1025_EW( DIN, DOUT, EN, PADIO, PULL_DOWN, PULL_UP, R_EN );
input DIN, EN, PULL_DOWN, PULL_UP, R_EN;
inout PADIO;
output DOUT;

`ifdef FUNCTIONAL  //  functional //
   B4ISH1025_EW_func B4ISH1025_EW_behav_inst(.DIN(DIN),.DOUT(DOUT),.EN(EN),.PADIO(PADIO),.PULL_DOWN(PULL_DOWN),.PULL_UP(PULL_UP),.R_EN(R_EN));
`else
   B4ISH1025_EW_func B4ISH1025_EW_inst(.DIN(DIN),.DOUT(DOUT),.EN(EN),.PADIO(PADIO),.PULL_DOWN(PULL_DOWN),.PULL_UP(PULL_UP),.R_EN(R_EN));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc PADIO --> DOUT
      (PADIO => DOUT) = (1.0,1.0);
      
      // comb arc R_EN --> DOUT
      (R_EN => DOUT) = (1.0,1.0);
      
      // comb arc DIN --> PADIO
      (DIN => PADIO) = (1.0,1.0);
      
      // comb arc EN --> PADIO
      (EN => PADIO) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module B4ISH1025_NS( DIN, DOUT, EN, PADIO, PULL_DOWN, PULL_UP, R_EN );
input DIN, EN, PULL_DOWN, PULL_UP, R_EN;
inout PADIO;
output DOUT;

`ifdef FUNCTIONAL  //  functional //
   B4ISH1025_NS_func B4ISH1025_NS_behav_inst(.DIN(DIN),.DOUT(DOUT),.EN(EN),.PADIO(PADIO),.PULL_DOWN(PULL_DOWN),.PULL_UP(PULL_UP),.R_EN(R_EN));
`else
   B4ISH1025_NS_func B4ISH1025_NS_inst(.DIN(DIN),.DOUT(DOUT),.EN(EN),.PADIO(PADIO),.PULL_DOWN(PULL_DOWN),.PULL_UP(PULL_UP),.R_EN(R_EN));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc PADIO --> DOUT
      (PADIO => DOUT) = (1.0,1.0);
      
      // comb arc R_EN --> DOUT
      (R_EN => DOUT) = (1.0,1.0);
      
      // comb arc DIN --> PADIO
      (DIN => PADIO) = (1.0,1.0);
      
      // comb arc EN --> PADIO
      (EN => PADIO) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module B8I1025_EW( DIN, DOUT, EN, PADIO, PULL_DOWN, PULL_UP, R_EN );
input DIN, EN, PULL_DOWN, PULL_UP, R_EN;
inout PADIO;
output DOUT;

`ifdef FUNCTIONAL  //  functional //
   B8I1025_EW_func B8I1025_EW_behav_inst(.DIN(DIN),.DOUT(DOUT),.EN(EN),.PADIO(PADIO),.PULL_DOWN(PULL_DOWN),.PULL_UP(PULL_UP),.R_EN(R_EN));
`else
   B8I1025_EW_func B8I1025_EW_inst(.DIN(DIN),.DOUT(DOUT),.EN(EN),.PADIO(PADIO),.PULL_DOWN(PULL_DOWN),.PULL_UP(PULL_UP),.R_EN(R_EN));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc PADIO --> DOUT
      (PADIO => DOUT) = (1.0,1.0);
      
      // comb arc R_EN --> DOUT
      (R_EN => DOUT) = (1.0,1.0);
      
      // comb arc DIN --> PADIO
      (DIN => PADIO) = (1.0,1.0);
      
      // comb arc EN --> PADIO
      (EN => PADIO) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module B8I1025_NS( DIN, DOUT, EN, PADIO, PULL_DOWN, PULL_UP, R_EN );
input DIN, EN, PULL_DOWN, PULL_UP, R_EN;
inout PADIO;
output DOUT;

`ifdef FUNCTIONAL  //  functional //
   B8I1025_NS_func B8I1025_NS_behav_inst(.DIN(DIN),.DOUT(DOUT),.EN(EN),.PADIO(PADIO),.PULL_DOWN(PULL_DOWN),.PULL_UP(PULL_UP),.R_EN(R_EN));
`else
   B8I1025_NS_func B8I1025_NS_inst(.DIN(DIN),.DOUT(DOUT),.EN(EN),.PADIO(PADIO),.PULL_DOWN(PULL_DOWN),.PULL_UP(PULL_UP),.R_EN(R_EN));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc PADIO --> DOUT
      (PADIO => DOUT) = (1.0,1.0);
      
      // comb arc R_EN --> DOUT
      (R_EN => DOUT) = (1.0,1.0);
      
      // comb arc DIN --> PADIO
      (DIN => PADIO) = (1.0,1.0);
      
      // comb arc EN --> PADIO
      (EN => PADIO) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module B8ISH1025_EW( DIN, DOUT, EN, PADIO, PULL_DOWN, PULL_UP, R_EN );
input DIN, EN, PULL_DOWN, PULL_UP, R_EN;
inout PADIO;
output DOUT;

`ifdef FUNCTIONAL  //  functional //
   B8ISH1025_EW_func B8ISH1025_EW_behav_inst(.DIN(DIN),.DOUT(DOUT),.EN(EN),.PADIO(PADIO),.PULL_DOWN(PULL_DOWN),.PULL_UP(PULL_UP),.R_EN(R_EN));
`else
   B8ISH1025_EW_func B8ISH1025_EW_inst(.DIN(DIN),.DOUT(DOUT),.EN(EN),.PADIO(PADIO),.PULL_DOWN(PULL_DOWN),.PULL_UP(PULL_UP),.R_EN(R_EN));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc PADIO --> DOUT
      (PADIO => DOUT) = (1.0,1.0);
      
      // comb arc R_EN --> DOUT
      (R_EN => DOUT) = (1.0,1.0);
      
      // comb arc DIN --> PADIO
      (DIN => PADIO) = (1.0,1.0);
      
      // comb arc EN --> PADIO
      (EN => PADIO) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module B8ISH1025_NS( DIN, DOUT, EN, PADIO, PULL_DOWN, PULL_UP, R_EN );
input DIN, EN, PULL_DOWN, PULL_UP, R_EN;
inout PADIO;
output DOUT;

`ifdef FUNCTIONAL  //  functional //
   B8ISH1025_NS_func B8ISH1025_NS_behav_inst(.DIN(DIN),.DOUT(DOUT),.EN(EN),.PADIO(PADIO),.PULL_DOWN(PULL_DOWN),.PULL_UP(PULL_UP),.R_EN(R_EN));
`else
   B8ISH1025_NS_func B8ISH1025_NS_inst(.DIN(DIN),.DOUT(DOUT),.EN(EN),.PADIO(PADIO),.PULL_DOWN(PULL_DOWN),.PULL_UP(PULL_UP),.R_EN(R_EN));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc PADIO --> DOUT
      (PADIO => DOUT) = (1.0,1.0);
      
      // comb arc R_EN --> DOUT
      (R_EN => DOUT) = (1.0,1.0);
      
      // comb arc DIN --> PADIO
      (DIN => PADIO) = (1.0,1.0);
      
      // comb arc EN --> PADIO
      (EN => PADIO) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module D12I1025_EW( DIN, EN, PADIO );
input DIN, EN;
inout PADIO;

`ifdef FUNCTIONAL  //  functional //
   D12I1025_EW_func D12I1025_EW_behav_inst(.DIN(DIN),.EN(EN),.PADIO(PADIO));
`else
   D12I1025_EW_func D12I1025_EW_inst(.DIN(DIN),.EN(EN),.PADIO(PADIO));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc DIN --> PADIO
      (DIN => PADIO) = (1.0,1.0);
      
      // comb arc EN --> PADIO
      (EN => PADIO) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module D12I1025_NS( DIN, EN, PADIO );
input DIN, EN;
inout PADIO;

`ifdef FUNCTIONAL  //  functional //
   D12I1025_NS_func D12I1025_NS_behav_inst(.DIN(DIN),.EN(EN),.PADIO(PADIO));
`else
   D12I1025_NS_func D12I1025_NS_inst(.DIN(DIN),.EN(EN),.PADIO(PADIO));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc DIN --> PADIO
      (DIN => PADIO) = (1.0,1.0);
      
      // comb arc EN --> PADIO
      (EN => PADIO) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module D16I1025_EW( DIN, EN, PADIO );
input DIN, EN;
inout PADIO;

`ifdef FUNCTIONAL  //  functional //
   D16I1025_EW_func D16I1025_EW_behav_inst(.DIN(DIN),.EN(EN),.PADIO(PADIO));
`else
   D16I1025_EW_func D16I1025_EW_inst(.DIN(DIN),.EN(EN),.PADIO(PADIO));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc DIN --> PADIO
      (DIN => PADIO) = (1.0,1.0);
      
      // comb arc EN --> PADIO
      (EN => PADIO) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module D16I1025_NS( DIN, EN, PADIO );
input DIN, EN;
inout PADIO;

`ifdef FUNCTIONAL  //  functional //
   D16I1025_NS_func D16I1025_NS_behav_inst(.DIN(DIN),.EN(EN),.PADIO(PADIO));
`else
   D16I1025_NS_func D16I1025_NS_inst(.DIN(DIN),.EN(EN),.PADIO(PADIO));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc DIN --> PADIO
      (DIN => PADIO) = (1.0,1.0);
      
      // comb arc EN --> PADIO
      (EN => PADIO) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module D4I1025_EW( PADIO, DIN, EN );
input DIN, EN;
inout PADIO;

`ifdef FUNCTIONAL  //  functional //
   D4I1025_EW_func D4I1025_EW_behav_inst(.PADIO(PADIO),.DIN(DIN),.EN(EN));
`else
   D4I1025_EW_func D4I1025_EW_inst(.PADIO(PADIO),.DIN(DIN),.EN(EN));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc DIN --> PADIO
      (DIN => PADIO) = (1.0,1.0);
      
      // comb arc EN --> PADIO
      (EN => PADIO) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module D4I1025_NS( DIN, EN, PADIO );
input DIN, EN;
inout PADIO;

`ifdef FUNCTIONAL  //  functional //
   D4I1025_NS_func D4I1025_NS_behav_inst(.DIN(DIN),.EN(EN),.PADIO(PADIO));
`else
   D4I1025_NS_func D4I1025_NS_inst(.DIN(DIN),.EN(EN),.PADIO(PADIO));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc DIN --> PADIO
      (DIN => PADIO) = (1.0,1.0);
      
      // comb arc EN --> PADIO
      (EN => PADIO) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module D8I1025_EW( DIN, EN, PADIO );
input DIN, EN;
inout PADIO;

`ifdef FUNCTIONAL  //  functional //
   D8I1025_EW_func D8I1025_EW_behav_inst(.DIN(DIN),.EN(EN),.PADIO(PADIO));
`else
   D8I1025_EW_func D8I1025_EW_inst(.DIN(DIN),.EN(EN),.PADIO(PADIO));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc DIN --> PADIO
      (DIN => PADIO) = (1.0,1.0);
      
      // comb arc EN --> PADIO
      (EN => PADIO) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module D8I1025_NS( DIN, EN, PADIO );
input DIN, EN;
inout PADIO;

`ifdef FUNCTIONAL  //  functional //
   D8I1025_NS_func D8I1025_NS_behav_inst(.DIN(DIN),.EN(EN),.PADIO(PADIO));
`else
   D8I1025_NS_func D8I1025_NS_inst(.DIN(DIN),.EN(EN),.PADIO(PADIO));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc DIN --> PADIO
      (DIN => PADIO) = (1.0,1.0);
      
      // comb arc EN --> PADIO
      (EN => PADIO) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module I1025_EW( DOUT, PADIO, R_EN );
input PADIO, R_EN;
output DOUT;

`ifdef FUNCTIONAL  //  functional //
   I1025_EW_func I1025_EW_behav_inst(.DOUT(DOUT),.PADIO(PADIO),.R_EN(R_EN));
`else
   I1025_EW_func I1025_EW_inst(.DOUT(DOUT),.PADIO(PADIO),.R_EN(R_EN));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc PADIO --> DOUT
      (PADIO => DOUT) = (1.0,1.0);
      
      // comb arc R_EN --> DOUT
      (R_EN => DOUT) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module I1025_NS( DOUT, PADIO, R_EN );
input PADIO, R_EN;
output DOUT;

`ifdef FUNCTIONAL  //  functional //
   I1025_NS_func I1025_NS_behav_inst(.DOUT(DOUT),.PADIO(PADIO),.R_EN(R_EN));
`else
   I1025_NS_func I1025_NS_inst(.DOUT(DOUT),.PADIO(PADIO),.R_EN(R_EN));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc PADIO --> DOUT
      (PADIO => DOUT) = (1.0,1.0);
      
      // comb arc R_EN --> DOUT
      (R_EN => DOUT) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module IOVDD_EW(  );

`ifdef FUNCTIONAL  //  functional //
   IOVDD_EW_func IOVDD_EW_behav_inst();
`else
   IOVDD_EW_func IOVDD_EW_inst();
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module IOVDD_NS(  );

`ifdef FUNCTIONAL  //  functional //
   IOVDD_NS_func IOVDD_NS_behav_inst();
`else
   IOVDD_NS_func IOVDD_NS_inst();
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module IOVSS_EW(  );

`ifdef FUNCTIONAL  //  functional //
   IOVSS_EW_func IOVSS_EW_behav_inst();
`else
   IOVSS_EW_func IOVSS_EW_inst();
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module IOVSS_NS(  );

`ifdef FUNCTIONAL  //  functional //
   IOVSS_NS_func IOVSS_NS_behav_inst();
`else
   IOVSS_NS_func IOVSS_NS_inst();
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module ISH1025_EW( DOUT, PADIO, R_EN );
input PADIO, R_EN;
output DOUT;

`ifdef FUNCTIONAL  //  functional //
   ISH1025_EW_func ISH1025_EW_behav_inst(.DOUT(DOUT),.PADIO(PADIO),.R_EN(R_EN));
`else
   ISH1025_EW_func ISH1025_EW_inst(.DOUT(DOUT),.PADIO(PADIO),.R_EN(R_EN));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc PADIO --> DOUT
      (PADIO => DOUT) = (1.0,1.0);
      
      // comb arc R_EN --> DOUT
      (R_EN => DOUT) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module ISH1025_NS( DOUT, PADIO, R_EN );
input PADIO, R_EN;
output DOUT;

`ifdef FUNCTIONAL  //  functional //
   ISH1025_NS_func ISH1025_NS_behav_inst(.DOUT(DOUT),.PADIO(PADIO),.R_EN(R_EN));
`else
   ISH1025_NS_func ISH1025_NS_inst(.DOUT(DOUT),.PADIO(PADIO),.R_EN(R_EN));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc PADIO --> DOUT
      (PADIO => DOUT) = (1.0,1.0);
      
      // comb arc R_EN --> DOUT
      (R_EN => DOUT) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module VDD_EW(  );

`ifdef FUNCTIONAL  //  functional //
   VDD_EW_func VDD_EW_behav_inst();
`else
   VDD_EW_func VDD_EW_inst();
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module VDD_NS(  );

`ifdef FUNCTIONAL  //  functional //
   VDD_NS_func VDD_NS_behav_inst();
`else
   VDD_NS_func VDD_NS_inst();
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module VSS_EW(  );

`ifdef FUNCTIONAL  //  functional //
   VSS_EW_func VSS_EW_behav_inst();
`else
   VSS_EW_func VSS_EW_inst();
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module VSS_NS(  );

`ifdef FUNCTIONAL  //  functional //
   VSS_NS_func VSS_NS_behav_inst();
`else
   VSS_NS_func VSS_NS_inst();
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine
