

`timescale 1ns/1ps

//****************************************************************************//
// Verilog models generated by SiliconSmart M-2017.03-SP3 build date: Aug 22, 2017 15:59:14. (SMSC-2) //
// Siliconsmart Path: /global/apps/siliconsmart_2017.03-SP3/linux64/bin/siliconsmart //
// Host Name: am04dwamd079.internal.synopsys.com, User Name: meruzha, PID: 3424  //
// Directory: /remote/saed/meruzha/CHAR/rvt/processes_std/tt0p8v25c/siliconsmart/simulation //
//                                                                            //
// File generated on Tue Oct 31 02:23:47 AMT 2017. (SMSC-3)                   //
//****************************************************************************//

//`timescale 1ns/1ps
 

`celldefine
module SAEDRVT14_ADDF_V1_0P5_func( S, CO, A, B, CI );
   input A, B, CI;
   output CO, S;
   wire CO_row1;
   and MGM_BG_0( CO_row1, A, B );
   wire CO_row2;
   and MGM_BG_1( CO_row2, A, CI );
   wire CO_row3;
   and MGM_BG_2( CO_row3, B, CI );
   or MGM_BG_3( CO, CO_row1, CO_row2, CO_row3 );
   wire S_row1;
   and MGM_BG_4( S_row1, A, B, CI );
   wire B_inv_for_SAEDRVT14_ADDF_V1_0P5;
   not MGM_BG_5( B_inv_for_SAEDRVT14_ADDF_V1_0P5, B );
   wire CI_inv_for_SAEDRVT14_ADDF_V1_0P5;
   not MGM_BG_6( CI_inv_for_SAEDRVT14_ADDF_V1_0P5, CI );
   wire S_row2;
   and MGM_BG_7( S_row2, B_inv_for_SAEDRVT14_ADDF_V1_0P5, CI_inv_for_SAEDRVT14_ADDF_V1_0P5, A );
   wire A_inv_for_SAEDRVT14_ADDF_V1_0P5;
   not MGM_BG_8( A_inv_for_SAEDRVT14_ADDF_V1_0P5, A );
   wire S_row3;
   and MGM_BG_9( S_row3, A_inv_for_SAEDRVT14_ADDF_V1_0P5, CI_inv_for_SAEDRVT14_ADDF_V1_0P5, B );
   wire S_row4;
   and MGM_BG_10( S_row4, A_inv_for_SAEDRVT14_ADDF_V1_0P5, B_inv_for_SAEDRVT14_ADDF_V1_0P5, CI );
   or MGM_BG_11( S, S_row1, S_row2, S_row3, S_row4 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_ADDF_V1_1_func( S, CO, A, B, CI );
   input A, B, CI;
   output CO, S;
   wire CO_row1;
   and MGM_BG_0( CO_row1, A, B );
   wire CO_row2;
   and MGM_BG_1( CO_row2, A, CI );
   wire CO_row3;
   and MGM_BG_2( CO_row3, B, CI );
   or MGM_BG_3( CO, CO_row1, CO_row2, CO_row3 );
   wire S_row1;
   and MGM_BG_4( S_row1, A, B, CI );
   wire B_inv_for_SAEDRVT14_ADDF_V1_1;
   not MGM_BG_5( B_inv_for_SAEDRVT14_ADDF_V1_1, B );
   wire CI_inv_for_SAEDRVT14_ADDF_V1_1;
   not MGM_BG_6( CI_inv_for_SAEDRVT14_ADDF_V1_1, CI );
   wire S_row2;
   and MGM_BG_7( S_row2, B_inv_for_SAEDRVT14_ADDF_V1_1, CI_inv_for_SAEDRVT14_ADDF_V1_1, A );
   wire A_inv_for_SAEDRVT14_ADDF_V1_1;
   not MGM_BG_8( A_inv_for_SAEDRVT14_ADDF_V1_1, A );
   wire S_row3;
   and MGM_BG_9( S_row3, A_inv_for_SAEDRVT14_ADDF_V1_1, CI_inv_for_SAEDRVT14_ADDF_V1_1, B );
   wire S_row4;
   and MGM_BG_10( S_row4, A_inv_for_SAEDRVT14_ADDF_V1_1, B_inv_for_SAEDRVT14_ADDF_V1_1, CI );
   or MGM_BG_11( S, S_row1, S_row2, S_row3, S_row4 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_ADDF_V1_2_func( S, CO, A, B, CI );
   input A, B, CI;
   output CO, S;
   wire CO_row1;
   and MGM_BG_0( CO_row1, A, B );
   wire CO_row2;
   and MGM_BG_1( CO_row2, A, CI );
   wire CO_row3;
   and MGM_BG_2( CO_row3, B, CI );
   or MGM_BG_3( CO, CO_row1, CO_row2, CO_row3 );
   wire S_row1;
   and MGM_BG_4( S_row1, A, B, CI );
   wire B_inv_for_SAEDRVT14_ADDF_V1_2;
   not MGM_BG_5( B_inv_for_SAEDRVT14_ADDF_V1_2, B );
   wire CI_inv_for_SAEDRVT14_ADDF_V1_2;
   not MGM_BG_6( CI_inv_for_SAEDRVT14_ADDF_V1_2, CI );
   wire S_row2;
   and MGM_BG_7( S_row2, B_inv_for_SAEDRVT14_ADDF_V1_2, CI_inv_for_SAEDRVT14_ADDF_V1_2, A );
   wire A_inv_for_SAEDRVT14_ADDF_V1_2;
   not MGM_BG_8( A_inv_for_SAEDRVT14_ADDF_V1_2, A );
   wire S_row3;
   and MGM_BG_9( S_row3, A_inv_for_SAEDRVT14_ADDF_V1_2, CI_inv_for_SAEDRVT14_ADDF_V1_2, B );
   wire S_row4;
   and MGM_BG_10( S_row4, A_inv_for_SAEDRVT14_ADDF_V1_2, B_inv_for_SAEDRVT14_ADDF_V1_2, CI );
   or MGM_BG_11( S, S_row1, S_row2, S_row3, S_row4 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_ADDF_V2_0P5_func( S, CO, A, B, CI );
   input A, B, CI;
   output CO, S;
   wire CO_row1;
   and MGM_BG_0( CO_row1, A, B );
   wire CO_row2;
   and MGM_BG_1( CO_row2, A, CI );
   wire CO_row3;
   and MGM_BG_2( CO_row3, B, CI );
   or MGM_BG_3( CO, CO_row1, CO_row2, CO_row3 );
   wire S_row1;
   and MGM_BG_4( S_row1, A, B, CI );
   wire B_inv_for_SAEDRVT14_ADDF_V2_0P5;
   not MGM_BG_5( B_inv_for_SAEDRVT14_ADDF_V2_0P5, B );
   wire CI_inv_for_SAEDRVT14_ADDF_V2_0P5;
   not MGM_BG_6( CI_inv_for_SAEDRVT14_ADDF_V2_0P5, CI );
   wire S_row2;
   and MGM_BG_7( S_row2, B_inv_for_SAEDRVT14_ADDF_V2_0P5, CI_inv_for_SAEDRVT14_ADDF_V2_0P5, A );
   wire A_inv_for_SAEDRVT14_ADDF_V2_0P5;
   not MGM_BG_8( A_inv_for_SAEDRVT14_ADDF_V2_0P5, A );
   wire S_row3;
   and MGM_BG_9( S_row3, A_inv_for_SAEDRVT14_ADDF_V2_0P5, CI_inv_for_SAEDRVT14_ADDF_V2_0P5, B );
   wire S_row4;
   and MGM_BG_10( S_row4, A_inv_for_SAEDRVT14_ADDF_V2_0P5, B_inv_for_SAEDRVT14_ADDF_V2_0P5, CI );
   or MGM_BG_11( S, S_row1, S_row2, S_row3, S_row4 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_ADDF_V2_1_func( S, CO, A, B, CI );
   input A, B, CI;
   output CO, S;
   wire CO_row1;
   and MGM_BG_0( CO_row1, A, B );
   wire CO_row2;
   and MGM_BG_1( CO_row2, A, CI );
   wire CO_row3;
   and MGM_BG_2( CO_row3, B, CI );
   or MGM_BG_3( CO, CO_row1, CO_row2, CO_row3 );
   wire S_row1;
   and MGM_BG_4( S_row1, A, B, CI );
   wire B_inv_for_SAEDRVT14_ADDF_V2_1;
   not MGM_BG_5( B_inv_for_SAEDRVT14_ADDF_V2_1, B );
   wire CI_inv_for_SAEDRVT14_ADDF_V2_1;
   not MGM_BG_6( CI_inv_for_SAEDRVT14_ADDF_V2_1, CI );
   wire S_row2;
   and MGM_BG_7( S_row2, B_inv_for_SAEDRVT14_ADDF_V2_1, CI_inv_for_SAEDRVT14_ADDF_V2_1, A );
   wire A_inv_for_SAEDRVT14_ADDF_V2_1;
   not MGM_BG_8( A_inv_for_SAEDRVT14_ADDF_V2_1, A );
   wire S_row3;
   and MGM_BG_9( S_row3, A_inv_for_SAEDRVT14_ADDF_V2_1, CI_inv_for_SAEDRVT14_ADDF_V2_1, B );
   wire S_row4;
   and MGM_BG_10( S_row4, A_inv_for_SAEDRVT14_ADDF_V2_1, B_inv_for_SAEDRVT14_ADDF_V2_1, CI );
   or MGM_BG_11( S, S_row1, S_row2, S_row3, S_row4 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_ADDF_V2_2_func( S, CO, A, B, CI );
   input A, B, CI;
   output CO, S;
   wire CO_row1;
   and MGM_BG_0( CO_row1, A, B );
   wire CO_row2;
   and MGM_BG_1( CO_row2, A, CI );
   wire CO_row3;
   and MGM_BG_2( CO_row3, B, CI );
   or MGM_BG_3( CO, CO_row1, CO_row2, CO_row3 );
   wire S_row1;
   and MGM_BG_4( S_row1, A, B, CI );
   wire B_inv_for_SAEDRVT14_ADDF_V2_2;
   not MGM_BG_5( B_inv_for_SAEDRVT14_ADDF_V2_2, B );
   wire CI_inv_for_SAEDRVT14_ADDF_V2_2;
   not MGM_BG_6( CI_inv_for_SAEDRVT14_ADDF_V2_2, CI );
   wire S_row2;
   and MGM_BG_7( S_row2, B_inv_for_SAEDRVT14_ADDF_V2_2, CI_inv_for_SAEDRVT14_ADDF_V2_2, A );
   wire A_inv_for_SAEDRVT14_ADDF_V2_2;
   not MGM_BG_8( A_inv_for_SAEDRVT14_ADDF_V2_2, A );
   wire S_row3;
   and MGM_BG_9( S_row3, A_inv_for_SAEDRVT14_ADDF_V2_2, CI_inv_for_SAEDRVT14_ADDF_V2_2, B );
   wire S_row4;
   and MGM_BG_10( S_row4, A_inv_for_SAEDRVT14_ADDF_V2_2, B_inv_for_SAEDRVT14_ADDF_V2_2, CI );
   or MGM_BG_11( S, S_row1, S_row2, S_row3, S_row4 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_ADDH_0P5_func( S, CO, A, B );
   input A, B;
   output CO, S;
   and MGM_BG_0( CO, A, B );
   wire B_inv_for_SAEDRVT14_ADDH_0P5;
   not MGM_BG_1( B_inv_for_SAEDRVT14_ADDH_0P5, B );
   wire S_row1;
   and MGM_BG_2( S_row1, B_inv_for_SAEDRVT14_ADDH_0P5, A );
   wire A_inv_for_SAEDRVT14_ADDH_0P5;
   not MGM_BG_3( A_inv_for_SAEDRVT14_ADDH_0P5, A );
   wire S_row2;
   and MGM_BG_4( S_row2, A_inv_for_SAEDRVT14_ADDH_0P5, B );
   or MGM_BG_5( S, S_row1, S_row2 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_ADDH_1_func( S, CO, A, B );
   input A, B;
   output CO, S;
   and MGM_BG_0( CO, A, B );
   wire B_inv_for_SAEDRVT14_ADDH_1;
   not MGM_BG_1( B_inv_for_SAEDRVT14_ADDH_1, B );
   wire S_row1;
   and MGM_BG_2( S_row1, B_inv_for_SAEDRVT14_ADDH_1, A );
   wire A_inv_for_SAEDRVT14_ADDH_1;
   not MGM_BG_3( A_inv_for_SAEDRVT14_ADDH_1, A );
   wire S_row2;
   and MGM_BG_4( S_row2, A_inv_for_SAEDRVT14_ADDH_1, B );
   or MGM_BG_5( S, S_row1, S_row2 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_ADDH_2_func( S, CO, A, B );
   input A, B;
   output CO, S;
   and MGM_BG_0( CO, A, B );
   wire B_inv_for_SAEDRVT14_ADDH_2;
   not MGM_BG_1( B_inv_for_SAEDRVT14_ADDH_2, B );
   wire S_row1;
   and MGM_BG_2( S_row1, B_inv_for_SAEDRVT14_ADDH_2, A );
   wire A_inv_for_SAEDRVT14_ADDH_2;
   not MGM_BG_3( A_inv_for_SAEDRVT14_ADDH_2, A );
   wire S_row2;
   and MGM_BG_4( S_row2, A_inv_for_SAEDRVT14_ADDH_2, B );
   or MGM_BG_5( S, S_row1, S_row2 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_ADDH_4_func( A, B, CO, S );
   input A, B;
   output CO, S;
   and MGM_BG_0( CO, A, B );
   wire B_inv_for_SAEDRVT14_ADDH_4;
   not MGM_BG_1( B_inv_for_SAEDRVT14_ADDH_4, B );
   wire S_row1;
   and MGM_BG_2( S_row1, B_inv_for_SAEDRVT14_ADDH_4, A );
   wire A_inv_for_SAEDRVT14_ADDH_4;
   not MGM_BG_3( A_inv_for_SAEDRVT14_ADDH_4, A );
   wire S_row2;
   and MGM_BG_4( S_row2, A_inv_for_SAEDRVT14_ADDH_4, B );
   or MGM_BG_5( S, S_row1, S_row2 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_AN2B_MM_1_func( A, B, X );
   input A, B;
   output X;
   wire A_inv_for_SAEDRVT14_AN2B_MM_1;
   not MGM_BG_0( A_inv_for_SAEDRVT14_AN2B_MM_1, A );
   and MGM_BG_1( X, A_inv_for_SAEDRVT14_AN2B_MM_1, B );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_AN2B_MM_12_func( A, B, X );
   input A, B;
   output X;
   wire A_inv_for_SAEDRVT14_AN2B_MM_12;
   not MGM_BG_0( A_inv_for_SAEDRVT14_AN2B_MM_12, A );
   and MGM_BG_1( X, A_inv_for_SAEDRVT14_AN2B_MM_12, B );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_AN2B_MM_16_func( A, B, X );
   input A, B;
   output X;
   wire A_inv_for_SAEDRVT14_AN2B_MM_16;
   not MGM_BG_0( A_inv_for_SAEDRVT14_AN2B_MM_16, A );
   and MGM_BG_1( X, A_inv_for_SAEDRVT14_AN2B_MM_16, B );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_AN2B_MM_2_func( A, B, X );
   input A, B;
   output X;
   wire A_inv_for_SAEDRVT14_AN2B_MM_2;
   not MGM_BG_0( A_inv_for_SAEDRVT14_AN2B_MM_2, A );
   and MGM_BG_1( X, A_inv_for_SAEDRVT14_AN2B_MM_2, B );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_AN2B_MM_20_func( A, B, X );
   input A, B;
   output X;
   wire A_inv_for_SAEDRVT14_AN2B_MM_20;
   not MGM_BG_0( A_inv_for_SAEDRVT14_AN2B_MM_20, A );
   and MGM_BG_1( X, A_inv_for_SAEDRVT14_AN2B_MM_20, B );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_AN2B_MM_4_func( A, B, X );
   input A, B;
   output X;
   wire A_inv_for_SAEDRVT14_AN2B_MM_4;
   not MGM_BG_0( A_inv_for_SAEDRVT14_AN2B_MM_4, A );
   and MGM_BG_1( X, A_inv_for_SAEDRVT14_AN2B_MM_4, B );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_AN2B_MM_6_func( A, B, X );
   input A, B;
   output X;
   wire A_inv_for_SAEDRVT14_AN2B_MM_6;
   not MGM_BG_0( A_inv_for_SAEDRVT14_AN2B_MM_6, A );
   and MGM_BG_1( X, A_inv_for_SAEDRVT14_AN2B_MM_6, B );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_AN2B_MM_8_func( A, B, X );
   input A, B;
   output X;
   wire A_inv_for_SAEDRVT14_AN2B_MM_8;
   not MGM_BG_0( A_inv_for_SAEDRVT14_AN2B_MM_8, A );
   and MGM_BG_1( X, A_inv_for_SAEDRVT14_AN2B_MM_8, B );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_AN2_0P5_func( X, A1, A2 );
   input A1, A2;
   output X;
   and MGM_BG_0( X, A1, A2 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_AN2_0P75_func( X, A1, A2 );
   input A1, A2;
   output X;
   and MGM_BG_0( X, A1, A2 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_AN2_1_func( X, A1, A2 );
   input A1, A2;
   output X;
   and MGM_BG_0( X, A1, A2 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_AN2_2_func( X, A1, A2 );
   input A1, A2;
   output X;
   and MGM_BG_0( X, A1, A2 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_AN2_4_func( X, A1, A2 );
   input A1, A2;
   output X;
   and MGM_BG_0( X, A1, A2 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_AN2_8_func( X, A1, A2 );
   input A1, A2;
   output X;
   and MGM_BG_0( X, A1, A2 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_AN2_ECO_2_func( X, A1, A2 );
   input A1, A2;
   output X;
   and MGM_BG_0( X, A1, A2 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_AN2_MM_0P5_func( X, A1, A2 );
   input A1, A2;
   output X;
   and MGM_BG_0( X, A1, A2 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_AN2_MM_1_func( X, A1, A2 );
   input A1, A2;
   output X;
   and MGM_BG_0( X, A1, A2 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_AN2_MM_12_func( X, A1, A2 );
   input A1, A2;
   output X;
   and MGM_BG_0( X, A1, A2 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_AN2_MM_16_func( X, A1, A2 );
   input A1, A2;
   output X;
   and MGM_BG_0( X, A1, A2 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_AN2_MM_2_func( X, A1, A2 );
   input A1, A2;
   output X;
   and MGM_BG_0( X, A1, A2 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_AN2_MM_20_func( X, A1, A2 );
   input A1, A2;
   output X;
   and MGM_BG_0( X, A1, A2 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_AN2_MM_3_func( X, A1, A2 );
   input A1, A2;
   output X;
   and MGM_BG_0( X, A1, A2 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_AN2_MM_4_func( X, A1, A2 );
   input A1, A2;
   output X;
   and MGM_BG_0( X, A1, A2 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_AN2_MM_6_func( X, A1, A2 );
   input A1, A2;
   output X;
   and MGM_BG_0( X, A1, A2 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_AN2_MM_8_func( X, A1, A2 );
   input A1, A2;
   output X;
   and MGM_BG_0( X, A1, A2 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_AN3_0P5_func( X, A1, A2, A3 );
   input A1, A2, A3;
   output X;
   and MGM_BG_0( X, A1, A2, A3 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_AN3_0P75_func( X, A1, A2, A3 );
   input A1, A2, A3;
   output X;
   and MGM_BG_0( X, A1, A2, A3 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_AN3_1_func( X, A1, A2, A3 );
   input A1, A2, A3;
   output X;
   and MGM_BG_0( X, A1, A2, A3 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_AN3_2_func( X, A1, A2, A3 );
   input A1, A2, A3;
   output X;
   and MGM_BG_0( X, A1, A2, A3 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_AN3_4_func( X, A1, A2, A3 );
   input A1, A2, A3;
   output X;
   and MGM_BG_0( X, A1, A2, A3 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_AN3_8_func( X, A1, A2, A3 );
   input A1, A2, A3;
   output X;
   and MGM_BG_0( X, A1, A2, A3 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_AN3_ECO_1_func( X, A1, A2, A3 );
   input A1, A2, A3;
   output X;
   and MGM_BG_0( X, A1, A2, A3 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_AN4_0P5_func( X, A1, A2, A3, A4 );
   input A1, A2, A3, A4;
   output X;
   and MGM_BG_0( X, A1, A2, A3, A4 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_AN4_0P75_func( X, A1, A2, A3, A4 );
   input A1, A2, A3, A4;
   output X;
   and MGM_BG_0( X, A1, A2, A3, A4 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_AN4_1_func( X, A1, A2, A3, A4 );
   input A1, A2, A3, A4;
   output X;
   and MGM_BG_0( X, A1, A2, A3, A4 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_AN4_2_func( X, A1, A2, A3, A4 );
   input A1, A2, A3, A4;
   output X;
   and MGM_BG_0( X, A1, A2, A3, A4 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_AN4_4_func( X, A1, A2, A3, A4 );
   input A1, A2, A3, A4;
   output X;
   and MGM_BG_0( X, A1, A2, A3, A4 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_AN4_8_func( X, A1, A2, A3, A4 );
   input A1, A2, A3, A4;
   output X;
   and MGM_BG_0( X, A1, A2, A3, A4 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_AN4_ECO_2_func( X, A1, A2, A3, A4 );
   input A1, A2, A3, A4;
   output X;
   and MGM_BG_0( X, A1, A2, A3, A4 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_AO211_1_func( X, A1, A2, B1, B2 );
   input A1, A2, B1, B2;
   output X;
   wire X_row1;
   and MGM_BG_0( X_row1, A1, A2 );
   or MGM_BG_1( X, X_row1, B1, B2 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_AO211_2_func( X, A1, A2, B1, B2 );
   input A1, A2, B1, B2;
   output X;
   wire X_row1;
   and MGM_BG_0( X_row1, A1, A2 );
   or MGM_BG_1( X, X_row1, B1, B2 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_AO211_4_func( X, A1, A2, B1, B2 );
   input A1, A2, B1, B2;
   output X;
   wire X_row1;
   and MGM_BG_0( X_row1, A1, A2 );
   or MGM_BG_1( X, X_row1, B1, B2 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_AO211_U_0P5_func( X, A1, A2, B1, B2 );
   input A1, A2, B1, B2;
   output X;
   wire X_row1;
   and MGM_BG_0( X_row1, A1, A2 );
   or MGM_BG_1( X, X_row1, B1, B2 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_AO21B_0P5_func( X, A1, A2, B );
   input A1, A2, B;
   output X;
   wire X_row1;
   and MGM_BG_0( X_row1, A1, A2 );
   wire B_inv_for_SAEDRVT14_AO21B_0P5;
   not MGM_BG_1( B_inv_for_SAEDRVT14_AO21B_0P5, B );
   or MGM_BG_2( X, X_row1, B_inv_for_SAEDRVT14_AO21B_0P5 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_AO21B_1_func( X, A1, A2, B );
   input A1, A2, B;
   output X;
   wire X_row1;
   and MGM_BG_0( X_row1, A1, A2 );
   wire B_inv_for_SAEDRVT14_AO21B_1;
   not MGM_BG_1( B_inv_for_SAEDRVT14_AO21B_1, B );
   or MGM_BG_2( X, X_row1, B_inv_for_SAEDRVT14_AO21B_1 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_AO21B_2_func( X, A1, A2, B );
   input A1, A2, B;
   output X;
   wire X_row1;
   and MGM_BG_0( X_row1, A1, A2 );
   wire B_inv_for_SAEDRVT14_AO21B_2;
   not MGM_BG_1( B_inv_for_SAEDRVT14_AO21B_2, B );
   or MGM_BG_2( X, X_row1, B_inv_for_SAEDRVT14_AO21B_2 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_AO21B_4_func( X, A1, A2, B );
   input A1, A2, B;
   output X;
   wire X_row1;
   and MGM_BG_0( X_row1, A1, A2 );
   wire B_inv_for_SAEDRVT14_AO21B_4;
   not MGM_BG_1( B_inv_for_SAEDRVT14_AO21B_4, B );
   or MGM_BG_2( X, X_row1, B_inv_for_SAEDRVT14_AO21B_4 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_AO21_1_func( X, A1, A2, B );
   input A1, A2, B;
   output X;
   wire X_row1;
   and MGM_BG_0( X_row1, A1, A2 );
   or MGM_BG_1( X, X_row1, B );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_AO21_2_func( X, A1, A2, B );
   input A1, A2, B;
   output X;
   wire X_row1;
   and MGM_BG_0( X_row1, A1, A2 );
   or MGM_BG_1( X, X_row1, B );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_AO21_4_func( X, A1, A2, B );
   input A1, A2, B;
   output X;
   wire X_row1;
   and MGM_BG_0( X_row1, A1, A2 );
   or MGM_BG_1( X, X_row1, B );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_AO21_ECO_1_func( X, A1, A2, B );
   input A1, A2, B;
   output X;
   wire X_row1;
   and MGM_BG_0( X_row1, A1, A2 );
   or MGM_BG_1( X, X_row1, B );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_AO21_U_0P5_func( X, A1, A2, B );
   input A1, A2, B;
   output X;
   wire X_row1;
   and MGM_BG_0( X_row1, A1, A2 );
   or MGM_BG_1( X, X_row1, B );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_AO221_0P5_func( X, A1, A2, B1, B2, C );
   input A1, A2, B1, B2, C;
   output X;
   wire X_row1;
   and MGM_BG_0( X_row1, A1, A2 );
   wire X_row2;
   and MGM_BG_1( X_row2, B1, B2 );
   or MGM_BG_2( X, X_row1, X_row2, C );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_AO221_1_func( X, A1, A2, B1, B2, C );
   input A1, A2, B1, B2, C;
   output X;
   wire X_row1;
   and MGM_BG_0( X_row1, A1, A2 );
   wire X_row2;
   and MGM_BG_1( X_row2, B1, B2 );
   or MGM_BG_2( X, X_row1, X_row2, C );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_AO221_2_func( X, A1, A2, B1, B2, C );
   input A1, A2, B1, B2, C;
   output X;
   wire X_row1;
   and MGM_BG_0( X_row1, A1, A2 );
   wire X_row2;
   and MGM_BG_1( X_row2, B1, B2 );
   or MGM_BG_2( X, X_row1, X_row2, C );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_AO221_4_func( X, A1, A2, B1, B2, C );
   input A1, A2, B1, B2, C;
   output X;
   wire X_row1;
   and MGM_BG_0( X_row1, A1, A2 );
   wire X_row2;
   and MGM_BG_1( X_row2, B1, B2 );
   or MGM_BG_2( X, X_row1, X_row2, C );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_AO222_1_func( X, A1, A2, B1, B2, C1, C2 );
   input A1, A2, B1, B2, C1, C2;
   output X;
   wire X_row1;
   and MGM_BG_0( X_row1, A1, A2 );
   wire X_row2;
   and MGM_BG_1( X_row2, B1, B2 );
   wire X_row3;
   and MGM_BG_2( X_row3, C1, C2 );
   or MGM_BG_3( X, X_row1, X_row2, X_row3 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_AO222_2_func( X, A1, A2, B1, B2, C1, C2 );
   input A1, A2, B1, B2, C1, C2;
   output X;
   wire X_row1;
   and MGM_BG_0( X_row1, A1, A2 );
   wire X_row2;
   and MGM_BG_1( X_row2, B1, B2 );
   wire X_row3;
   and MGM_BG_2( X_row3, C1, C2 );
   or MGM_BG_3( X, X_row1, X_row2, X_row3 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_AO222_4_func( X, A1, A2, B1, B2, C1, C2 );
   input A1, A2, B1, B2, C1, C2;
   output X;
   wire X_row1;
   and MGM_BG_0( X_row1, A1, A2 );
   wire X_row2;
   and MGM_BG_1( X_row2, B1, B2 );
   wire X_row3;
   and MGM_BG_2( X_row3, C1, C2 );
   or MGM_BG_3( X, X_row1, X_row2, X_row3 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_AO222_U_0P5_func( X, A1, A2, B1, B2, C1, C2 );
   input A1, A2, B1, B2, C1, C2;
   output X;
   wire X_row1;
   and MGM_BG_0( X_row1, A1, A2 );
   wire X_row2;
   and MGM_BG_1( X_row2, B1, B2 );
   wire X_row3;
   and MGM_BG_2( X_row3, C1, C2 );
   or MGM_BG_3( X, X_row1, X_row2, X_row3 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_AO22_0P5_func( X, A1, A2, B1, B2 );
   input A1, A2, B1, B2;
   output X;
   wire X_row1;
   and MGM_BG_0( X_row1, A1, A2 );
   wire X_row2;
   and MGM_BG_1( X_row2, B1, B2 );
   or MGM_BG_2( X, X_row1, X_row2 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_AO22_0P75_func( X, A1, A2, B1, B2 );
   input A1, A2, B1, B2;
   output X;
   wire X_row1;
   and MGM_BG_0( X_row1, A1, A2 );
   wire X_row2;
   and MGM_BG_1( X_row2, B1, B2 );
   or MGM_BG_2( X, X_row1, X_row2 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_AO22_1_func( X, A1, A2, B1, B2 );
   input A1, A2, B1, B2;
   output X;
   wire X_row1;
   and MGM_BG_0( X_row1, A1, A2 );
   wire X_row2;
   and MGM_BG_1( X_row2, B1, B2 );
   or MGM_BG_2( X, X_row1, X_row2 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_AO22_2_func( X, A1, A2, B1, B2 );
   input A1, A2, B1, B2;
   output X;
   wire X_row1;
   and MGM_BG_0( X_row1, A1, A2 );
   wire X_row2;
   and MGM_BG_1( X_row2, B1, B2 );
   or MGM_BG_2( X, X_row1, X_row2 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_AO22_4_func( X, A1, A2, B1, B2 );
   input A1, A2, B1, B2;
   output X;
   wire X_row1;
   and MGM_BG_0( X_row1, A1, A2 );
   wire X_row2;
   and MGM_BG_1( X_row2, B1, B2 );
   or MGM_BG_2( X, X_row1, X_row2 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_AO2BB2_0P5_func( X, A1, A2, B1, B2 );
   input A1, A2, B1, B2;
   output X;
   wire A1_inv_for_SAEDRVT14_AO2BB2_0P5;
   not MGM_BG_0( A1_inv_for_SAEDRVT14_AO2BB2_0P5, A1 );
   wire A2_inv_for_SAEDRVT14_AO2BB2_0P5;
   not MGM_BG_1( A2_inv_for_SAEDRVT14_AO2BB2_0P5, A2 );
   wire X_row1;
   and MGM_BG_2( X_row1, A1_inv_for_SAEDRVT14_AO2BB2_0P5, A2_inv_for_SAEDRVT14_AO2BB2_0P5 );
   wire X_row2;
   and MGM_BG_3( X_row2, B1, B2 );
   or MGM_BG_4( X, X_row1, X_row2 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_AO2BB2_1_func( X, A1, A2, B1, B2 );
   input A1, A2, B1, B2;
   output X;
   wire A1_inv_for_SAEDRVT14_AO2BB2_1;
   not MGM_BG_0( A1_inv_for_SAEDRVT14_AO2BB2_1, A1 );
   wire A2_inv_for_SAEDRVT14_AO2BB2_1;
   not MGM_BG_1( A2_inv_for_SAEDRVT14_AO2BB2_1, A2 );
   wire X_row1;
   and MGM_BG_2( X_row1, A1_inv_for_SAEDRVT14_AO2BB2_1, A2_inv_for_SAEDRVT14_AO2BB2_1 );
   wire X_row2;
   and MGM_BG_3( X_row2, B1, B2 );
   or MGM_BG_4( X, X_row1, X_row2 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_AO2BB2_2_func( X, A1, A2, B1, B2 );
   input A1, A2, B1, B2;
   output X;
   wire A1_inv_for_SAEDRVT14_AO2BB2_2;
   not MGM_BG_0( A1_inv_for_SAEDRVT14_AO2BB2_2, A1 );
   wire A2_inv_for_SAEDRVT14_AO2BB2_2;
   not MGM_BG_1( A2_inv_for_SAEDRVT14_AO2BB2_2, A2 );
   wire X_row1;
   and MGM_BG_2( X_row1, A1_inv_for_SAEDRVT14_AO2BB2_2, A2_inv_for_SAEDRVT14_AO2BB2_2 );
   wire X_row2;
   and MGM_BG_3( X_row2, B1, B2 );
   or MGM_BG_4( X, X_row1, X_row2 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_AO2BB2_4_func( X, A1, A2, B1, B2 );
   input A1, A2, B1, B2;
   output X;
   wire A1_inv_for_SAEDRVT14_AO2BB2_4;
   not MGM_BG_0( A1_inv_for_SAEDRVT14_AO2BB2_4, A1 );
   wire A2_inv_for_SAEDRVT14_AO2BB2_4;
   not MGM_BG_1( A2_inv_for_SAEDRVT14_AO2BB2_4, A2 );
   wire X_row1;
   and MGM_BG_2( X_row1, A1_inv_for_SAEDRVT14_AO2BB2_4, A2_inv_for_SAEDRVT14_AO2BB2_4 );
   wire X_row2;
   and MGM_BG_3( X_row2, B1, B2 );
   or MGM_BG_4( X, X_row1, X_row2 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_AO2BB2_V1_0P5_func( X, A1, A2, B1, B2 );
   input A1, A2, B1, B2;
   output X;
   wire A1_inv_for_SAEDRVT14_AO2BB2_V1_0P5;
   not MGM_BG_0( A1_inv_for_SAEDRVT14_AO2BB2_V1_0P5, A1 );
   wire A2_inv_for_SAEDRVT14_AO2BB2_V1_0P5;
   not MGM_BG_1( A2_inv_for_SAEDRVT14_AO2BB2_V1_0P5, A2 );
   wire X_row1;
   and MGM_BG_2( X_row1, A1_inv_for_SAEDRVT14_AO2BB2_V1_0P5, A2_inv_for_SAEDRVT14_AO2BB2_V1_0P5 );
   wire X_row2;
   and MGM_BG_3( X_row2, B1, B2 );
   or MGM_BG_4( X, X_row1, X_row2 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_AO2BB2_V1_0P75_func( X, A1, A2, B1, B2 );
   input A1, A2, B1, B2;
   output X;
   wire A1_inv_for_SAEDRVT14_AO2BB2_V1_0P75;
   not MGM_BG_0( A1_inv_for_SAEDRVT14_AO2BB2_V1_0P75, A1 );
   wire A2_inv_for_SAEDRVT14_AO2BB2_V1_0P75;
   not MGM_BG_1( A2_inv_for_SAEDRVT14_AO2BB2_V1_0P75, A2 );
   wire X_row1;
   and MGM_BG_2( X_row1, A1_inv_for_SAEDRVT14_AO2BB2_V1_0P75, A2_inv_for_SAEDRVT14_AO2BB2_V1_0P75 );
   wire X_row2;
   and MGM_BG_3( X_row2, B1, B2 );
   or MGM_BG_4( X, X_row1, X_row2 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_AO2BB2_V1_1_func( X, A1, A2, B1, B2 );
   input A1, A2, B1, B2;
   output X;
   wire A1_inv_for_SAEDRVT14_AO2BB2_V1_1;
   not MGM_BG_0( A1_inv_for_SAEDRVT14_AO2BB2_V1_1, A1 );
   wire A2_inv_for_SAEDRVT14_AO2BB2_V1_1;
   not MGM_BG_1( A2_inv_for_SAEDRVT14_AO2BB2_V1_1, A2 );
   wire X_row1;
   and MGM_BG_2( X_row1, A1_inv_for_SAEDRVT14_AO2BB2_V1_1, A2_inv_for_SAEDRVT14_AO2BB2_V1_1 );
   wire X_row2;
   and MGM_BG_3( X_row2, B1, B2 );
   or MGM_BG_4( X, X_row1, X_row2 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_AO2BB2_V1_2_func( X, A1, A2, B1, B2 );
   input A1, A2, B1, B2;
   output X;
   wire A1_inv_for_SAEDRVT14_AO2BB2_V1_2;
   not MGM_BG_0( A1_inv_for_SAEDRVT14_AO2BB2_V1_2, A1 );
   wire A2_inv_for_SAEDRVT14_AO2BB2_V1_2;
   not MGM_BG_1( A2_inv_for_SAEDRVT14_AO2BB2_V1_2, A2 );
   wire X_row1;
   and MGM_BG_2( X_row1, A1_inv_for_SAEDRVT14_AO2BB2_V1_2, A2_inv_for_SAEDRVT14_AO2BB2_V1_2 );
   wire X_row2;
   and MGM_BG_3( X_row2, B1, B2 );
   or MGM_BG_4( X, X_row1, X_row2 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_AO2BB2_V1_4_func( X, A1, A2, B1, B2 );
   input A1, A2, B1, B2;
   output X;
   wire A1_inv_for_SAEDRVT14_AO2BB2_V1_4;
   not MGM_BG_0( A1_inv_for_SAEDRVT14_AO2BB2_V1_4, A1 );
   wire A2_inv_for_SAEDRVT14_AO2BB2_V1_4;
   not MGM_BG_1( A2_inv_for_SAEDRVT14_AO2BB2_V1_4, A2 );
   wire X_row1;
   and MGM_BG_2( X_row1, A1_inv_for_SAEDRVT14_AO2BB2_V1_4, A2_inv_for_SAEDRVT14_AO2BB2_V1_4 );
   wire X_row2;
   and MGM_BG_3( X_row2, B1, B2 );
   or MGM_BG_4( X, X_row1, X_row2 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_AO31_1_func( X, A1, A2, A3, B );
   input A1, A2, A3, B;
   output X;
   wire X_row1;
   and MGM_BG_0( X_row1, A1, A2, A3 );
   or MGM_BG_1( X, X_row1, B );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_AO31_2_func( X, A1, A2, A3, B );
   input A1, A2, A3, B;
   output X;
   wire X_row1;
   and MGM_BG_0( X_row1, A1, A2, A3 );
   or MGM_BG_1( X, X_row1, B );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_AO31_4_func( X, A1, A2, A3, B );
   input A1, A2, A3, B;
   output X;
   wire X_row1;
   and MGM_BG_0( X_row1, A1, A2, A3 );
   or MGM_BG_1( X, X_row1, B );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_AO31_U_0P5_func( X, A1, A2, A3, B );
   input A1, A2, A3, B;
   output X;
   wire X_row1;
   and MGM_BG_0( X_row1, A1, A2, A3 );
   or MGM_BG_1( X, X_row1, B );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_AO32_1_func( X, A1, A2, A3, B1, B2 );
   input A1, A2, A3, B1, B2;
   output X;
   wire X_row1;
   and MGM_BG_0( X_row1, A1, A2, A3 );
   wire X_row2;
   and MGM_BG_1( X_row2, B1, B2 );
   or MGM_BG_2( X, X_row1, X_row2 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_AO32_2_func( X, A1, A2, A3, B1, B2 );
   input A1, A2, A3, B1, B2;
   output X;
   wire X_row1;
   and MGM_BG_0( X_row1, A1, A2, A3 );
   wire X_row2;
   and MGM_BG_1( X_row2, B1, B2 );
   or MGM_BG_2( X, X_row1, X_row2 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_AO32_4_func( X, A1, A2, A3, B1, B2 );
   input A1, A2, A3, B1, B2;
   output X;
   wire X_row1;
   and MGM_BG_0( X_row1, A1, A2, A3 );
   wire X_row2;
   and MGM_BG_1( X_row2, B1, B2 );
   or MGM_BG_2( X, X_row1, X_row2 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_AO32_U_0P5_func( X, A1, A2, A3, B1, B2 );
   input A1, A2, A3, B1, B2;
   output X;
   wire X_row1;
   and MGM_BG_0( X_row1, A1, A2, A3 );
   wire X_row2;
   and MGM_BG_1( X_row2, B1, B2 );
   or MGM_BG_2( X, X_row1, X_row2 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_AO33_1_func( X, A1, A2, A3, B1, B2, B3 );
   input A1, A2, A3, B1, B2, B3;
   output X;
   wire X_row1;
   and MGM_BG_0( X_row1, A1, A2, A3 );
   wire X_row2;
   and MGM_BG_1( X_row2, B1, B2, B3 );
   or MGM_BG_2( X, X_row1, X_row2 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_AO33_2_func( X, A1, A2, A3, B1, B2, B3 );
   input A1, A2, A3, B1, B2, B3;
   output X;
   wire X_row1;
   and MGM_BG_0( X_row1, A1, A2, A3 );
   wire X_row2;
   and MGM_BG_1( X_row2, B1, B2, B3 );
   or MGM_BG_2( X, X_row1, X_row2 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_AO33_4_func( X, A1, A2, A3, B1, B2, B3 );
   input A1, A2, A3, B1, B2, B3;
   output X;
   wire X_row1;
   and MGM_BG_0( X_row1, A1, A2, A3 );
   wire X_row2;
   and MGM_BG_1( X_row2, B1, B2, B3 );
   or MGM_BG_2( X, X_row1, X_row2 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_AO33_U_0P5_func( X, A1, A2, A3, B1, B2, B3 );
   input A1, A2, A3, B1, B2, B3;
   output X;
   wire X_row1;
   and MGM_BG_0( X_row1, A1, A2, A3 );
   wire X_row2;
   and MGM_BG_1( X_row2, B1, B2, B3 );
   or MGM_BG_2( X, X_row1, X_row2 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_AOI211_0P5_func( X, A1, A2, B1, B2 );
   input A1, A2, B1, B2;
   output X;
   wire A1_inv_for_SAEDRVT14_AOI211_0P5;
   not MGM_BG_0( A1_inv_for_SAEDRVT14_AOI211_0P5, A1 );
   wire B1_inv_for_SAEDRVT14_AOI211_0P5;
   not MGM_BG_1( B1_inv_for_SAEDRVT14_AOI211_0P5, B1 );
   wire B2_inv_for_SAEDRVT14_AOI211_0P5;
   not MGM_BG_2( B2_inv_for_SAEDRVT14_AOI211_0P5, B2 );
   wire X_row1;
   and MGM_BG_3( X_row1, A1_inv_for_SAEDRVT14_AOI211_0P5, B1_inv_for_SAEDRVT14_AOI211_0P5, B2_inv_for_SAEDRVT14_AOI211_0P5 );
   wire A2_inv_for_SAEDRVT14_AOI211_0P5;
   not MGM_BG_4( A2_inv_for_SAEDRVT14_AOI211_0P5, A2 );
   wire X_row2;
   and MGM_BG_5( X_row2, A2_inv_for_SAEDRVT14_AOI211_0P5, B1_inv_for_SAEDRVT14_AOI211_0P5, B2_inv_for_SAEDRVT14_AOI211_0P5 );
   or MGM_BG_6( X, X_row1, X_row2 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_AOI211_1_func( X, A1, A2, B1, B2 );
   input A1, A2, B1, B2;
   output X;
   wire A1_inv_for_SAEDRVT14_AOI211_1;
   not MGM_BG_0( A1_inv_for_SAEDRVT14_AOI211_1, A1 );
   wire B1_inv_for_SAEDRVT14_AOI211_1;
   not MGM_BG_1( B1_inv_for_SAEDRVT14_AOI211_1, B1 );
   wire B2_inv_for_SAEDRVT14_AOI211_1;
   not MGM_BG_2( B2_inv_for_SAEDRVT14_AOI211_1, B2 );
   wire X_row1;
   and MGM_BG_3( X_row1, A1_inv_for_SAEDRVT14_AOI211_1, B1_inv_for_SAEDRVT14_AOI211_1, B2_inv_for_SAEDRVT14_AOI211_1 );
   wire A2_inv_for_SAEDRVT14_AOI211_1;
   not MGM_BG_4( A2_inv_for_SAEDRVT14_AOI211_1, A2 );
   wire X_row2;
   and MGM_BG_5( X_row2, A2_inv_for_SAEDRVT14_AOI211_1, B1_inv_for_SAEDRVT14_AOI211_1, B2_inv_for_SAEDRVT14_AOI211_1 );
   or MGM_BG_6( X, X_row1, X_row2 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_AOI211_2_func( X, A1, A2, B1, B2 );
   input A1, A2, B1, B2;
   output X;
   wire A1_inv_for_SAEDRVT14_AOI211_2;
   not MGM_BG_0( A1_inv_for_SAEDRVT14_AOI211_2, A1 );
   wire B1_inv_for_SAEDRVT14_AOI211_2;
   not MGM_BG_1( B1_inv_for_SAEDRVT14_AOI211_2, B1 );
   wire B2_inv_for_SAEDRVT14_AOI211_2;
   not MGM_BG_2( B2_inv_for_SAEDRVT14_AOI211_2, B2 );
   wire X_row1;
   and MGM_BG_3( X_row1, A1_inv_for_SAEDRVT14_AOI211_2, B1_inv_for_SAEDRVT14_AOI211_2, B2_inv_for_SAEDRVT14_AOI211_2 );
   wire A2_inv_for_SAEDRVT14_AOI211_2;
   not MGM_BG_4( A2_inv_for_SAEDRVT14_AOI211_2, A2 );
   wire X_row2;
   and MGM_BG_5( X_row2, A2_inv_for_SAEDRVT14_AOI211_2, B1_inv_for_SAEDRVT14_AOI211_2, B2_inv_for_SAEDRVT14_AOI211_2 );
   or MGM_BG_6( X, X_row1, X_row2 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_AOI211_4_func( X, A1, A2, B1, B2 );
   input A1, A2, B1, B2;
   output X;
   wire A1_inv_for_SAEDRVT14_AOI211_4;
   not MGM_BG_0( A1_inv_for_SAEDRVT14_AOI211_4, A1 );
   wire B1_inv_for_SAEDRVT14_AOI211_4;
   not MGM_BG_1( B1_inv_for_SAEDRVT14_AOI211_4, B1 );
   wire B2_inv_for_SAEDRVT14_AOI211_4;
   not MGM_BG_2( B2_inv_for_SAEDRVT14_AOI211_4, B2 );
   wire X_row1;
   and MGM_BG_3( X_row1, A1_inv_for_SAEDRVT14_AOI211_4, B1_inv_for_SAEDRVT14_AOI211_4, B2_inv_for_SAEDRVT14_AOI211_4 );
   wire A2_inv_for_SAEDRVT14_AOI211_4;
   not MGM_BG_4( A2_inv_for_SAEDRVT14_AOI211_4, A2 );
   wire X_row2;
   and MGM_BG_5( X_row2, A2_inv_for_SAEDRVT14_AOI211_4, B1_inv_for_SAEDRVT14_AOI211_4, B2_inv_for_SAEDRVT14_AOI211_4 );
   or MGM_BG_6( X, X_row1, X_row2 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_AOI21_0P5_func( X, A1, A2, B );
   input A1, A2, B;
   output X;
   wire A1_inv_for_SAEDRVT14_AOI21_0P5;
   not MGM_BG_0( A1_inv_for_SAEDRVT14_AOI21_0P5, A1 );
   wire B_inv_for_SAEDRVT14_AOI21_0P5;
   not MGM_BG_1( B_inv_for_SAEDRVT14_AOI21_0P5, B );
   wire X_row1;
   and MGM_BG_2( X_row1, A1_inv_for_SAEDRVT14_AOI21_0P5, B_inv_for_SAEDRVT14_AOI21_0P5 );
   wire A2_inv_for_SAEDRVT14_AOI21_0P5;
   not MGM_BG_3( A2_inv_for_SAEDRVT14_AOI21_0P5, A2 );
   wire X_row2;
   and MGM_BG_4( X_row2, A2_inv_for_SAEDRVT14_AOI21_0P5, B_inv_for_SAEDRVT14_AOI21_0P5 );
   or MGM_BG_5( X, X_row1, X_row2 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_AOI21_0P75_func( X, A1, A2, B );
   input A1, A2, B;
   output X;
   wire A1_inv_for_SAEDRVT14_AOI21_0P75;
   not MGM_BG_0( A1_inv_for_SAEDRVT14_AOI21_0P75, A1 );
   wire B_inv_for_SAEDRVT14_AOI21_0P75;
   not MGM_BG_1( B_inv_for_SAEDRVT14_AOI21_0P75, B );
   wire X_row1;
   and MGM_BG_2( X_row1, A1_inv_for_SAEDRVT14_AOI21_0P75, B_inv_for_SAEDRVT14_AOI21_0P75 );
   wire A2_inv_for_SAEDRVT14_AOI21_0P75;
   not MGM_BG_3( A2_inv_for_SAEDRVT14_AOI21_0P75, A2 );
   wire X_row2;
   and MGM_BG_4( X_row2, A2_inv_for_SAEDRVT14_AOI21_0P75, B_inv_for_SAEDRVT14_AOI21_0P75 );
   or MGM_BG_5( X, X_row1, X_row2 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_AOI21_1_func( X, A1, A2, B );
   input A1, A2, B;
   output X;
   wire A1_inv_for_SAEDRVT14_AOI21_1;
   not MGM_BG_0( A1_inv_for_SAEDRVT14_AOI21_1, A1 );
   wire B_inv_for_SAEDRVT14_AOI21_1;
   not MGM_BG_1( B_inv_for_SAEDRVT14_AOI21_1, B );
   wire X_row1;
   and MGM_BG_2( X_row1, A1_inv_for_SAEDRVT14_AOI21_1, B_inv_for_SAEDRVT14_AOI21_1 );
   wire A2_inv_for_SAEDRVT14_AOI21_1;
   not MGM_BG_3( A2_inv_for_SAEDRVT14_AOI21_1, A2 );
   wire X_row2;
   and MGM_BG_4( X_row2, A2_inv_for_SAEDRVT14_AOI21_1, B_inv_for_SAEDRVT14_AOI21_1 );
   or MGM_BG_5( X, X_row1, X_row2 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_AOI21_1P5_func( X, A1, A2, B );
   input A1, A2, B;
   output X;
   wire A1_inv_for_SAEDRVT14_AOI21_1P5;
   not MGM_BG_0( A1_inv_for_SAEDRVT14_AOI21_1P5, A1 );
   wire B_inv_for_SAEDRVT14_AOI21_1P5;
   not MGM_BG_1( B_inv_for_SAEDRVT14_AOI21_1P5, B );
   wire X_row1;
   and MGM_BG_2( X_row1, A1_inv_for_SAEDRVT14_AOI21_1P5, B_inv_for_SAEDRVT14_AOI21_1P5 );
   wire A2_inv_for_SAEDRVT14_AOI21_1P5;
   not MGM_BG_3( A2_inv_for_SAEDRVT14_AOI21_1P5, A2 );
   wire X_row2;
   and MGM_BG_4( X_row2, A2_inv_for_SAEDRVT14_AOI21_1P5, B_inv_for_SAEDRVT14_AOI21_1P5 );
   or MGM_BG_5( X, X_row1, X_row2 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_AOI21_2_func( X, A1, A2, B );
   input A1, A2, B;
   output X;
   wire A1_inv_for_SAEDRVT14_AOI21_2;
   not MGM_BG_0( A1_inv_for_SAEDRVT14_AOI21_2, A1 );
   wire B_inv_for_SAEDRVT14_AOI21_2;
   not MGM_BG_1( B_inv_for_SAEDRVT14_AOI21_2, B );
   wire X_row1;
   and MGM_BG_2( X_row1, A1_inv_for_SAEDRVT14_AOI21_2, B_inv_for_SAEDRVT14_AOI21_2 );
   wire A2_inv_for_SAEDRVT14_AOI21_2;
   not MGM_BG_3( A2_inv_for_SAEDRVT14_AOI21_2, A2 );
   wire X_row2;
   and MGM_BG_4( X_row2, A2_inv_for_SAEDRVT14_AOI21_2, B_inv_for_SAEDRVT14_AOI21_2 );
   or MGM_BG_5( X, X_row1, X_row2 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_AOI21_3_func( X, A1, A2, B );
   input A1, A2, B;
   output X;
   wire A1_inv_for_SAEDRVT14_AOI21_3;
   not MGM_BG_0( A1_inv_for_SAEDRVT14_AOI21_3, A1 );
   wire B_inv_for_SAEDRVT14_AOI21_3;
   not MGM_BG_1( B_inv_for_SAEDRVT14_AOI21_3, B );
   wire X_row1;
   and MGM_BG_2( X_row1, A1_inv_for_SAEDRVT14_AOI21_3, B_inv_for_SAEDRVT14_AOI21_3 );
   wire A2_inv_for_SAEDRVT14_AOI21_3;
   not MGM_BG_3( A2_inv_for_SAEDRVT14_AOI21_3, A2 );
   wire X_row2;
   and MGM_BG_4( X_row2, A2_inv_for_SAEDRVT14_AOI21_3, B_inv_for_SAEDRVT14_AOI21_3 );
   or MGM_BG_5( X, X_row1, X_row2 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_AOI21_4_func( X, A1, A2, B );
   input A1, A2, B;
   output X;
   wire A1_inv_for_SAEDRVT14_AOI21_4;
   not MGM_BG_0( A1_inv_for_SAEDRVT14_AOI21_4, A1 );
   wire B_inv_for_SAEDRVT14_AOI21_4;
   not MGM_BG_1( B_inv_for_SAEDRVT14_AOI21_4, B );
   wire X_row1;
   and MGM_BG_2( X_row1, A1_inv_for_SAEDRVT14_AOI21_4, B_inv_for_SAEDRVT14_AOI21_4 );
   wire A2_inv_for_SAEDRVT14_AOI21_4;
   not MGM_BG_3( A2_inv_for_SAEDRVT14_AOI21_4, A2 );
   wire X_row2;
   and MGM_BG_4( X_row2, A2_inv_for_SAEDRVT14_AOI21_4, B_inv_for_SAEDRVT14_AOI21_4 );
   or MGM_BG_5( X, X_row1, X_row2 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_AOI21_6_func( X, A1, A2, B );
   input A1, A2, B;
   output X;
   wire A1_inv_for_SAEDRVT14_AOI21_6;
   not MGM_BG_0( A1_inv_for_SAEDRVT14_AOI21_6, A1 );
   wire B_inv_for_SAEDRVT14_AOI21_6;
   not MGM_BG_1( B_inv_for_SAEDRVT14_AOI21_6, B );
   wire X_row1;
   and MGM_BG_2( X_row1, A1_inv_for_SAEDRVT14_AOI21_6, B_inv_for_SAEDRVT14_AOI21_6 );
   wire A2_inv_for_SAEDRVT14_AOI21_6;
   not MGM_BG_3( A2_inv_for_SAEDRVT14_AOI21_6, A2 );
   wire X_row2;
   and MGM_BG_4( X_row2, A2_inv_for_SAEDRVT14_AOI21_6, B_inv_for_SAEDRVT14_AOI21_6 );
   or MGM_BG_5( X, X_row1, X_row2 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_AOI21_8_func( X, A1, A2, B );
   input A1, A2, B;
   output X;
   wire A1_inv_for_SAEDRVT14_AOI21_8;
   not MGM_BG_0( A1_inv_for_SAEDRVT14_AOI21_8, A1 );
   wire B_inv_for_SAEDRVT14_AOI21_8;
   not MGM_BG_1( B_inv_for_SAEDRVT14_AOI21_8, B );
   wire X_row1;
   and MGM_BG_2( X_row1, A1_inv_for_SAEDRVT14_AOI21_8, B_inv_for_SAEDRVT14_AOI21_8 );
   wire A2_inv_for_SAEDRVT14_AOI21_8;
   not MGM_BG_3( A2_inv_for_SAEDRVT14_AOI21_8, A2 );
   wire X_row2;
   and MGM_BG_4( X_row2, A2_inv_for_SAEDRVT14_AOI21_8, B_inv_for_SAEDRVT14_AOI21_8 );
   or MGM_BG_5( X, X_row1, X_row2 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_AOI21_ECO_1_func( X, A1, A2, B );
   input A1, A2, B;
   output X;
   wire A1_inv_for_SAEDRVT14_AOI21_ECO_1;
   not MGM_BG_0( A1_inv_for_SAEDRVT14_AOI21_ECO_1, A1 );
   wire B_inv_for_SAEDRVT14_AOI21_ECO_1;
   not MGM_BG_1( B_inv_for_SAEDRVT14_AOI21_ECO_1, B );
   wire X_row1;
   and MGM_BG_2( X_row1, A1_inv_for_SAEDRVT14_AOI21_ECO_1, B_inv_for_SAEDRVT14_AOI21_ECO_1 );
   wire A2_inv_for_SAEDRVT14_AOI21_ECO_1;
   not MGM_BG_3( A2_inv_for_SAEDRVT14_AOI21_ECO_1, A2 );
   wire X_row2;
   and MGM_BG_4( X_row2, A2_inv_for_SAEDRVT14_AOI21_ECO_1, B_inv_for_SAEDRVT14_AOI21_ECO_1 );
   or MGM_BG_5( X, X_row1, X_row2 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_AOI21_V1_4_func( X, A1, A2, B );
   input A1, A2, B;
   output X;
   wire A1_inv_for_SAEDRVT14_AOI21_V1_4;
   not MGM_BG_0( A1_inv_for_SAEDRVT14_AOI21_V1_4, A1 );
   wire B_inv_for_SAEDRVT14_AOI21_V1_4;
   not MGM_BG_1( B_inv_for_SAEDRVT14_AOI21_V1_4, B );
   wire X_row1;
   and MGM_BG_2( X_row1, A1_inv_for_SAEDRVT14_AOI21_V1_4, B_inv_for_SAEDRVT14_AOI21_V1_4 );
   wire A2_inv_for_SAEDRVT14_AOI21_V1_4;
   not MGM_BG_3( A2_inv_for_SAEDRVT14_AOI21_V1_4, A2 );
   wire X_row2;
   and MGM_BG_4( X_row2, A2_inv_for_SAEDRVT14_AOI21_V1_4, B_inv_for_SAEDRVT14_AOI21_V1_4 );
   or MGM_BG_5( X, X_row1, X_row2 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_AOI21_V1_6_func( X, A1, A2, B );
   input A1, A2, B;
   output X;
   wire A1_inv_for_SAEDRVT14_AOI21_V1_6;
   not MGM_BG_0( A1_inv_for_SAEDRVT14_AOI21_V1_6, A1 );
   wire B_inv_for_SAEDRVT14_AOI21_V1_6;
   not MGM_BG_1( B_inv_for_SAEDRVT14_AOI21_V1_6, B );
   wire X_row1;
   and MGM_BG_2( X_row1, A1_inv_for_SAEDRVT14_AOI21_V1_6, B_inv_for_SAEDRVT14_AOI21_V1_6 );
   wire A2_inv_for_SAEDRVT14_AOI21_V1_6;
   not MGM_BG_3( A2_inv_for_SAEDRVT14_AOI21_V1_6, A2 );
   wire X_row2;
   and MGM_BG_4( X_row2, A2_inv_for_SAEDRVT14_AOI21_V1_6, B_inv_for_SAEDRVT14_AOI21_V1_6 );
   or MGM_BG_5( X, X_row1, X_row2 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_AOI21_V1_8_func( X, A1, A2, B );
   input A1, A2, B;
   output X;
   wire A1_inv_for_SAEDRVT14_AOI21_V1_8;
   not MGM_BG_0( A1_inv_for_SAEDRVT14_AOI21_V1_8, A1 );
   wire B_inv_for_SAEDRVT14_AOI21_V1_8;
   not MGM_BG_1( B_inv_for_SAEDRVT14_AOI21_V1_8, B );
   wire X_row1;
   and MGM_BG_2( X_row1, A1_inv_for_SAEDRVT14_AOI21_V1_8, B_inv_for_SAEDRVT14_AOI21_V1_8 );
   wire A2_inv_for_SAEDRVT14_AOI21_V1_8;
   not MGM_BG_3( A2_inv_for_SAEDRVT14_AOI21_V1_8, A2 );
   wire X_row2;
   and MGM_BG_4( X_row2, A2_inv_for_SAEDRVT14_AOI21_V1_8, B_inv_for_SAEDRVT14_AOI21_V1_8 );
   or MGM_BG_5( X, X_row1, X_row2 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_AOI221_0P5_func( X, A1, A2, B1, B2, C );
   input A1, A2, B1, B2, C;
   output X;
   wire A1_inv_for_SAEDRVT14_AOI221_0P5;
   not MGM_BG_0( A1_inv_for_SAEDRVT14_AOI221_0P5, A1 );
   wire B1_inv_for_SAEDRVT14_AOI221_0P5;
   not MGM_BG_1( B1_inv_for_SAEDRVT14_AOI221_0P5, B1 );
   wire C_inv_for_SAEDRVT14_AOI221_0P5;
   not MGM_BG_2( C_inv_for_SAEDRVT14_AOI221_0P5, C );
   wire X_row1;
   and MGM_BG_3( X_row1, A1_inv_for_SAEDRVT14_AOI221_0P5, B1_inv_for_SAEDRVT14_AOI221_0P5, C_inv_for_SAEDRVT14_AOI221_0P5 );
   wire B2_inv_for_SAEDRVT14_AOI221_0P5;
   not MGM_BG_4( B2_inv_for_SAEDRVT14_AOI221_0P5, B2 );
   wire X_row2;
   and MGM_BG_5( X_row2, A1_inv_for_SAEDRVT14_AOI221_0P5, B2_inv_for_SAEDRVT14_AOI221_0P5, C_inv_for_SAEDRVT14_AOI221_0P5 );
   wire A2_inv_for_SAEDRVT14_AOI221_0P5;
   not MGM_BG_6( A2_inv_for_SAEDRVT14_AOI221_0P5, A2 );
   wire X_row3;
   and MGM_BG_7( X_row3, A2_inv_for_SAEDRVT14_AOI221_0P5, B1_inv_for_SAEDRVT14_AOI221_0P5, C_inv_for_SAEDRVT14_AOI221_0P5 );
   wire X_row4;
   and MGM_BG_8( X_row4, A2_inv_for_SAEDRVT14_AOI221_0P5, B2_inv_for_SAEDRVT14_AOI221_0P5, C_inv_for_SAEDRVT14_AOI221_0P5 );
   or MGM_BG_9( X, X_row1, X_row2, X_row3, X_row4 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_AOI221_1_func( X, A1, A2, B1, B2, C );
   input A1, A2, B1, B2, C;
   output X;
   wire A1_inv_for_SAEDRVT14_AOI221_1;
   not MGM_BG_0( A1_inv_for_SAEDRVT14_AOI221_1, A1 );
   wire B1_inv_for_SAEDRVT14_AOI221_1;
   not MGM_BG_1( B1_inv_for_SAEDRVT14_AOI221_1, B1 );
   wire C_inv_for_SAEDRVT14_AOI221_1;
   not MGM_BG_2( C_inv_for_SAEDRVT14_AOI221_1, C );
   wire X_row1;
   and MGM_BG_3( X_row1, A1_inv_for_SAEDRVT14_AOI221_1, B1_inv_for_SAEDRVT14_AOI221_1, C_inv_for_SAEDRVT14_AOI221_1 );
   wire B2_inv_for_SAEDRVT14_AOI221_1;
   not MGM_BG_4( B2_inv_for_SAEDRVT14_AOI221_1, B2 );
   wire X_row2;
   and MGM_BG_5( X_row2, A1_inv_for_SAEDRVT14_AOI221_1, B2_inv_for_SAEDRVT14_AOI221_1, C_inv_for_SAEDRVT14_AOI221_1 );
   wire A2_inv_for_SAEDRVT14_AOI221_1;
   not MGM_BG_6( A2_inv_for_SAEDRVT14_AOI221_1, A2 );
   wire X_row3;
   and MGM_BG_7( X_row3, A2_inv_for_SAEDRVT14_AOI221_1, B1_inv_for_SAEDRVT14_AOI221_1, C_inv_for_SAEDRVT14_AOI221_1 );
   wire X_row4;
   and MGM_BG_8( X_row4, A2_inv_for_SAEDRVT14_AOI221_1, B2_inv_for_SAEDRVT14_AOI221_1, C_inv_for_SAEDRVT14_AOI221_1 );
   or MGM_BG_9( X, X_row1, X_row2, X_row3, X_row4 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_AOI221_2_func( X, A1, A2, B1, B2, C );
   input A1, A2, B1, B2, C;
   output X;
   wire A1_inv_for_SAEDRVT14_AOI221_2;
   not MGM_BG_0( A1_inv_for_SAEDRVT14_AOI221_2, A1 );
   wire B1_inv_for_SAEDRVT14_AOI221_2;
   not MGM_BG_1( B1_inv_for_SAEDRVT14_AOI221_2, B1 );
   wire C_inv_for_SAEDRVT14_AOI221_2;
   not MGM_BG_2( C_inv_for_SAEDRVT14_AOI221_2, C );
   wire X_row1;
   and MGM_BG_3( X_row1, A1_inv_for_SAEDRVT14_AOI221_2, B1_inv_for_SAEDRVT14_AOI221_2, C_inv_for_SAEDRVT14_AOI221_2 );
   wire B2_inv_for_SAEDRVT14_AOI221_2;
   not MGM_BG_4( B2_inv_for_SAEDRVT14_AOI221_2, B2 );
   wire X_row2;
   and MGM_BG_5( X_row2, A1_inv_for_SAEDRVT14_AOI221_2, B2_inv_for_SAEDRVT14_AOI221_2, C_inv_for_SAEDRVT14_AOI221_2 );
   wire A2_inv_for_SAEDRVT14_AOI221_2;
   not MGM_BG_6( A2_inv_for_SAEDRVT14_AOI221_2, A2 );
   wire X_row3;
   and MGM_BG_7( X_row3, A2_inv_for_SAEDRVT14_AOI221_2, B1_inv_for_SAEDRVT14_AOI221_2, C_inv_for_SAEDRVT14_AOI221_2 );
   wire X_row4;
   and MGM_BG_8( X_row4, A2_inv_for_SAEDRVT14_AOI221_2, B2_inv_for_SAEDRVT14_AOI221_2, C_inv_for_SAEDRVT14_AOI221_2 );
   or MGM_BG_9( X, X_row1, X_row2, X_row3, X_row4 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_AOI221_4_func( X, A1, A2, B1, B2, C );
   input A1, A2, B1, B2, C;
   output X;
   wire A1_inv_for_SAEDRVT14_AOI221_4;
   not MGM_BG_0( A1_inv_for_SAEDRVT14_AOI221_4, A1 );
   wire B1_inv_for_SAEDRVT14_AOI221_4;
   not MGM_BG_1( B1_inv_for_SAEDRVT14_AOI221_4, B1 );
   wire C_inv_for_SAEDRVT14_AOI221_4;
   not MGM_BG_2( C_inv_for_SAEDRVT14_AOI221_4, C );
   wire X_row1;
   and MGM_BG_3( X_row1, A1_inv_for_SAEDRVT14_AOI221_4, B1_inv_for_SAEDRVT14_AOI221_4, C_inv_for_SAEDRVT14_AOI221_4 );
   wire B2_inv_for_SAEDRVT14_AOI221_4;
   not MGM_BG_4( B2_inv_for_SAEDRVT14_AOI221_4, B2 );
   wire X_row2;
   and MGM_BG_5( X_row2, A1_inv_for_SAEDRVT14_AOI221_4, B2_inv_for_SAEDRVT14_AOI221_4, C_inv_for_SAEDRVT14_AOI221_4 );
   wire A2_inv_for_SAEDRVT14_AOI221_4;
   not MGM_BG_6( A2_inv_for_SAEDRVT14_AOI221_4, A2 );
   wire X_row3;
   and MGM_BG_7( X_row3, A2_inv_for_SAEDRVT14_AOI221_4, B1_inv_for_SAEDRVT14_AOI221_4, C_inv_for_SAEDRVT14_AOI221_4 );
   wire X_row4;
   and MGM_BG_8( X_row4, A2_inv_for_SAEDRVT14_AOI221_4, B2_inv_for_SAEDRVT14_AOI221_4, C_inv_for_SAEDRVT14_AOI221_4 );
   or MGM_BG_9( X, X_row1, X_row2, X_row3, X_row4 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_AOI222_0P5_func( X, A1, A2, B1, B2, C1, C2 );
   input A1, A2, B1, B2, C1, C2;
   output X;
   wire A1_inv_for_SAEDRVT14_AOI222_0P5;
   not MGM_BG_0( A1_inv_for_SAEDRVT14_AOI222_0P5, A1 );
   wire B1_inv_for_SAEDRVT14_AOI222_0P5;
   not MGM_BG_1( B1_inv_for_SAEDRVT14_AOI222_0P5, B1 );
   wire C1_inv_for_SAEDRVT14_AOI222_0P5;
   not MGM_BG_2( C1_inv_for_SAEDRVT14_AOI222_0P5, C1 );
   wire X_row1;
   and MGM_BG_3( X_row1, A1_inv_for_SAEDRVT14_AOI222_0P5, B1_inv_for_SAEDRVT14_AOI222_0P5, C1_inv_for_SAEDRVT14_AOI222_0P5 );
   wire C2_inv_for_SAEDRVT14_AOI222_0P5;
   not MGM_BG_4( C2_inv_for_SAEDRVT14_AOI222_0P5, C2 );
   wire X_row2;
   and MGM_BG_5( X_row2, A1_inv_for_SAEDRVT14_AOI222_0P5, B1_inv_for_SAEDRVT14_AOI222_0P5, C2_inv_for_SAEDRVT14_AOI222_0P5 );
   wire B2_inv_for_SAEDRVT14_AOI222_0P5;
   not MGM_BG_6( B2_inv_for_SAEDRVT14_AOI222_0P5, B2 );
   wire X_row3;
   and MGM_BG_7( X_row3, A1_inv_for_SAEDRVT14_AOI222_0P5, B2_inv_for_SAEDRVT14_AOI222_0P5, C1_inv_for_SAEDRVT14_AOI222_0P5 );
   wire X_row4;
   and MGM_BG_8( X_row4, A1_inv_for_SAEDRVT14_AOI222_0P5, B2_inv_for_SAEDRVT14_AOI222_0P5, C2_inv_for_SAEDRVT14_AOI222_0P5 );
   wire A2_inv_for_SAEDRVT14_AOI222_0P5;
   not MGM_BG_9( A2_inv_for_SAEDRVT14_AOI222_0P5, A2 );
   wire X_row5;
   and MGM_BG_10( X_row5, A2_inv_for_SAEDRVT14_AOI222_0P5, B1_inv_for_SAEDRVT14_AOI222_0P5, C1_inv_for_SAEDRVT14_AOI222_0P5 );
   wire X_row6;
   and MGM_BG_11( X_row6, A2_inv_for_SAEDRVT14_AOI222_0P5, B1_inv_for_SAEDRVT14_AOI222_0P5, C2_inv_for_SAEDRVT14_AOI222_0P5 );
   wire X_row7;
   and MGM_BG_12( X_row7, A2_inv_for_SAEDRVT14_AOI222_0P5, B2_inv_for_SAEDRVT14_AOI222_0P5, C1_inv_for_SAEDRVT14_AOI222_0P5 );
   wire X_row8;
   and MGM_BG_13( X_row8, A2_inv_for_SAEDRVT14_AOI222_0P5, B2_inv_for_SAEDRVT14_AOI222_0P5, C2_inv_for_SAEDRVT14_AOI222_0P5 );
   or MGM_BG_14( X, X_row1, X_row2, X_row3, X_row4, X_row5, X_row6, X_row7, X_row8 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_AOI222_1_func( X, A1, A2, B1, B2, C1, C2 );
   input A1, A2, B1, B2, C1, C2;
   output X;
   wire A1_inv_for_SAEDRVT14_AOI222_1;
   not MGM_BG_0( A1_inv_for_SAEDRVT14_AOI222_1, A1 );
   wire B1_inv_for_SAEDRVT14_AOI222_1;
   not MGM_BG_1( B1_inv_for_SAEDRVT14_AOI222_1, B1 );
   wire C1_inv_for_SAEDRVT14_AOI222_1;
   not MGM_BG_2( C1_inv_for_SAEDRVT14_AOI222_1, C1 );
   wire X_row1;
   and MGM_BG_3( X_row1, A1_inv_for_SAEDRVT14_AOI222_1, B1_inv_for_SAEDRVT14_AOI222_1, C1_inv_for_SAEDRVT14_AOI222_1 );
   wire C2_inv_for_SAEDRVT14_AOI222_1;
   not MGM_BG_4( C2_inv_for_SAEDRVT14_AOI222_1, C2 );
   wire X_row2;
   and MGM_BG_5( X_row2, A1_inv_for_SAEDRVT14_AOI222_1, B1_inv_for_SAEDRVT14_AOI222_1, C2_inv_for_SAEDRVT14_AOI222_1 );
   wire B2_inv_for_SAEDRVT14_AOI222_1;
   not MGM_BG_6( B2_inv_for_SAEDRVT14_AOI222_1, B2 );
   wire X_row3;
   and MGM_BG_7( X_row3, A1_inv_for_SAEDRVT14_AOI222_1, B2_inv_for_SAEDRVT14_AOI222_1, C1_inv_for_SAEDRVT14_AOI222_1 );
   wire X_row4;
   and MGM_BG_8( X_row4, A1_inv_for_SAEDRVT14_AOI222_1, B2_inv_for_SAEDRVT14_AOI222_1, C2_inv_for_SAEDRVT14_AOI222_1 );
   wire A2_inv_for_SAEDRVT14_AOI222_1;
   not MGM_BG_9( A2_inv_for_SAEDRVT14_AOI222_1, A2 );
   wire X_row5;
   and MGM_BG_10( X_row5, A2_inv_for_SAEDRVT14_AOI222_1, B1_inv_for_SAEDRVT14_AOI222_1, C1_inv_for_SAEDRVT14_AOI222_1 );
   wire X_row6;
   and MGM_BG_11( X_row6, A2_inv_for_SAEDRVT14_AOI222_1, B1_inv_for_SAEDRVT14_AOI222_1, C2_inv_for_SAEDRVT14_AOI222_1 );
   wire X_row7;
   and MGM_BG_12( X_row7, A2_inv_for_SAEDRVT14_AOI222_1, B2_inv_for_SAEDRVT14_AOI222_1, C1_inv_for_SAEDRVT14_AOI222_1 );
   wire X_row8;
   and MGM_BG_13( X_row8, A2_inv_for_SAEDRVT14_AOI222_1, B2_inv_for_SAEDRVT14_AOI222_1, C2_inv_for_SAEDRVT14_AOI222_1 );
   or MGM_BG_14( X, X_row1, X_row2, X_row3, X_row4, X_row5, X_row6, X_row7, X_row8 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_AOI222_2_func( X, A1, A2, B1, B2, C1, C2 );
   input A1, A2, B1, B2, C1, C2;
   output X;
   wire A1_inv_for_SAEDRVT14_AOI222_2;
   not MGM_BG_0( A1_inv_for_SAEDRVT14_AOI222_2, A1 );
   wire B1_inv_for_SAEDRVT14_AOI222_2;
   not MGM_BG_1( B1_inv_for_SAEDRVT14_AOI222_2, B1 );
   wire C1_inv_for_SAEDRVT14_AOI222_2;
   not MGM_BG_2( C1_inv_for_SAEDRVT14_AOI222_2, C1 );
   wire X_row1;
   and MGM_BG_3( X_row1, A1_inv_for_SAEDRVT14_AOI222_2, B1_inv_for_SAEDRVT14_AOI222_2, C1_inv_for_SAEDRVT14_AOI222_2 );
   wire C2_inv_for_SAEDRVT14_AOI222_2;
   not MGM_BG_4( C2_inv_for_SAEDRVT14_AOI222_2, C2 );
   wire X_row2;
   and MGM_BG_5( X_row2, A1_inv_for_SAEDRVT14_AOI222_2, B1_inv_for_SAEDRVT14_AOI222_2, C2_inv_for_SAEDRVT14_AOI222_2 );
   wire B2_inv_for_SAEDRVT14_AOI222_2;
   not MGM_BG_6( B2_inv_for_SAEDRVT14_AOI222_2, B2 );
   wire X_row3;
   and MGM_BG_7( X_row3, A1_inv_for_SAEDRVT14_AOI222_2, B2_inv_for_SAEDRVT14_AOI222_2, C1_inv_for_SAEDRVT14_AOI222_2 );
   wire X_row4;
   and MGM_BG_8( X_row4, A1_inv_for_SAEDRVT14_AOI222_2, B2_inv_for_SAEDRVT14_AOI222_2, C2_inv_for_SAEDRVT14_AOI222_2 );
   wire A2_inv_for_SAEDRVT14_AOI222_2;
   not MGM_BG_9( A2_inv_for_SAEDRVT14_AOI222_2, A2 );
   wire X_row5;
   and MGM_BG_10( X_row5, A2_inv_for_SAEDRVT14_AOI222_2, B1_inv_for_SAEDRVT14_AOI222_2, C1_inv_for_SAEDRVT14_AOI222_2 );
   wire X_row6;
   and MGM_BG_11( X_row6, A2_inv_for_SAEDRVT14_AOI222_2, B1_inv_for_SAEDRVT14_AOI222_2, C2_inv_for_SAEDRVT14_AOI222_2 );
   wire X_row7;
   and MGM_BG_12( X_row7, A2_inv_for_SAEDRVT14_AOI222_2, B2_inv_for_SAEDRVT14_AOI222_2, C1_inv_for_SAEDRVT14_AOI222_2 );
   wire X_row8;
   and MGM_BG_13( X_row8, A2_inv_for_SAEDRVT14_AOI222_2, B2_inv_for_SAEDRVT14_AOI222_2, C2_inv_for_SAEDRVT14_AOI222_2 );
   or MGM_BG_14( X, X_row1, X_row2, X_row3, X_row4, X_row5, X_row6, X_row7, X_row8 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_AOI222_4_func( X, A1, A2, B1, B2, C1, C2 );
   input A1, A2, B1, B2, C1, C2;
   output X;
   wire A1_inv_for_SAEDRVT14_AOI222_4;
   not MGM_BG_0( A1_inv_for_SAEDRVT14_AOI222_4, A1 );
   wire B1_inv_for_SAEDRVT14_AOI222_4;
   not MGM_BG_1( B1_inv_for_SAEDRVT14_AOI222_4, B1 );
   wire C1_inv_for_SAEDRVT14_AOI222_4;
   not MGM_BG_2( C1_inv_for_SAEDRVT14_AOI222_4, C1 );
   wire X_row1;
   and MGM_BG_3( X_row1, A1_inv_for_SAEDRVT14_AOI222_4, B1_inv_for_SAEDRVT14_AOI222_4, C1_inv_for_SAEDRVT14_AOI222_4 );
   wire C2_inv_for_SAEDRVT14_AOI222_4;
   not MGM_BG_4( C2_inv_for_SAEDRVT14_AOI222_4, C2 );
   wire X_row2;
   and MGM_BG_5( X_row2, A1_inv_for_SAEDRVT14_AOI222_4, B1_inv_for_SAEDRVT14_AOI222_4, C2_inv_for_SAEDRVT14_AOI222_4 );
   wire B2_inv_for_SAEDRVT14_AOI222_4;
   not MGM_BG_6( B2_inv_for_SAEDRVT14_AOI222_4, B2 );
   wire X_row3;
   and MGM_BG_7( X_row3, A1_inv_for_SAEDRVT14_AOI222_4, B2_inv_for_SAEDRVT14_AOI222_4, C1_inv_for_SAEDRVT14_AOI222_4 );
   wire X_row4;
   and MGM_BG_8( X_row4, A1_inv_for_SAEDRVT14_AOI222_4, B2_inv_for_SAEDRVT14_AOI222_4, C2_inv_for_SAEDRVT14_AOI222_4 );
   wire A2_inv_for_SAEDRVT14_AOI222_4;
   not MGM_BG_9( A2_inv_for_SAEDRVT14_AOI222_4, A2 );
   wire X_row5;
   and MGM_BG_10( X_row5, A2_inv_for_SAEDRVT14_AOI222_4, B1_inv_for_SAEDRVT14_AOI222_4, C1_inv_for_SAEDRVT14_AOI222_4 );
   wire X_row6;
   and MGM_BG_11( X_row6, A2_inv_for_SAEDRVT14_AOI222_4, B1_inv_for_SAEDRVT14_AOI222_4, C2_inv_for_SAEDRVT14_AOI222_4 );
   wire X_row7;
   and MGM_BG_12( X_row7, A2_inv_for_SAEDRVT14_AOI222_4, B2_inv_for_SAEDRVT14_AOI222_4, C1_inv_for_SAEDRVT14_AOI222_4 );
   wire X_row8;
   and MGM_BG_13( X_row8, A2_inv_for_SAEDRVT14_AOI222_4, B2_inv_for_SAEDRVT14_AOI222_4, C2_inv_for_SAEDRVT14_AOI222_4 );
   or MGM_BG_14( X, X_row1, X_row2, X_row3, X_row4, X_row5, X_row6, X_row7, X_row8 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_AOI22_0P5_func( X, A1, A2, B1, B2 );
   input A1, A2, B1, B2;
   output X;
   wire A1_inv_for_SAEDRVT14_AOI22_0P5;
   not MGM_BG_0( A1_inv_for_SAEDRVT14_AOI22_0P5, A1 );
   wire B1_inv_for_SAEDRVT14_AOI22_0P5;
   not MGM_BG_1( B1_inv_for_SAEDRVT14_AOI22_0P5, B1 );
   wire X_row1;
   and MGM_BG_2( X_row1, A1_inv_for_SAEDRVT14_AOI22_0P5, B1_inv_for_SAEDRVT14_AOI22_0P5 );
   wire B2_inv_for_SAEDRVT14_AOI22_0P5;
   not MGM_BG_3( B2_inv_for_SAEDRVT14_AOI22_0P5, B2 );
   wire X_row2;
   and MGM_BG_4( X_row2, A1_inv_for_SAEDRVT14_AOI22_0P5, B2_inv_for_SAEDRVT14_AOI22_0P5 );
   wire A2_inv_for_SAEDRVT14_AOI22_0P5;
   not MGM_BG_5( A2_inv_for_SAEDRVT14_AOI22_0P5, A2 );
   wire X_row3;
   and MGM_BG_6( X_row3, A2_inv_for_SAEDRVT14_AOI22_0P5, B1_inv_for_SAEDRVT14_AOI22_0P5 );
   wire X_row4;
   and MGM_BG_7( X_row4, A2_inv_for_SAEDRVT14_AOI22_0P5, B2_inv_for_SAEDRVT14_AOI22_0P5 );
   or MGM_BG_8( X, X_row1, X_row2, X_row3, X_row4 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_AOI22_0P75_func( X, A1, A2, B1, B2 );
   input A1, A2, B1, B2;
   output X;
   wire A1_inv_for_SAEDRVT14_AOI22_0P75;
   not MGM_BG_0( A1_inv_for_SAEDRVT14_AOI22_0P75, A1 );
   wire B1_inv_for_SAEDRVT14_AOI22_0P75;
   not MGM_BG_1( B1_inv_for_SAEDRVT14_AOI22_0P75, B1 );
   wire X_row1;
   and MGM_BG_2( X_row1, A1_inv_for_SAEDRVT14_AOI22_0P75, B1_inv_for_SAEDRVT14_AOI22_0P75 );
   wire B2_inv_for_SAEDRVT14_AOI22_0P75;
   not MGM_BG_3( B2_inv_for_SAEDRVT14_AOI22_0P75, B2 );
   wire X_row2;
   and MGM_BG_4( X_row2, A1_inv_for_SAEDRVT14_AOI22_0P75, B2_inv_for_SAEDRVT14_AOI22_0P75 );
   wire A2_inv_for_SAEDRVT14_AOI22_0P75;
   not MGM_BG_5( A2_inv_for_SAEDRVT14_AOI22_0P75, A2 );
   wire X_row3;
   and MGM_BG_6( X_row3, A2_inv_for_SAEDRVT14_AOI22_0P75, B1_inv_for_SAEDRVT14_AOI22_0P75 );
   wire X_row4;
   and MGM_BG_7( X_row4, A2_inv_for_SAEDRVT14_AOI22_0P75, B2_inv_for_SAEDRVT14_AOI22_0P75 );
   or MGM_BG_8( X, X_row1, X_row2, X_row3, X_row4 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_AOI22_1_func( X, A1, A2, B1, B2 );
   input A1, A2, B1, B2;
   output X;
   wire A1_inv_for_SAEDRVT14_AOI22_1;
   not MGM_BG_0( A1_inv_for_SAEDRVT14_AOI22_1, A1 );
   wire B1_inv_for_SAEDRVT14_AOI22_1;
   not MGM_BG_1( B1_inv_for_SAEDRVT14_AOI22_1, B1 );
   wire X_row1;
   and MGM_BG_2( X_row1, A1_inv_for_SAEDRVT14_AOI22_1, B1_inv_for_SAEDRVT14_AOI22_1 );
   wire B2_inv_for_SAEDRVT14_AOI22_1;
   not MGM_BG_3( B2_inv_for_SAEDRVT14_AOI22_1, B2 );
   wire X_row2;
   and MGM_BG_4( X_row2, A1_inv_for_SAEDRVT14_AOI22_1, B2_inv_for_SAEDRVT14_AOI22_1 );
   wire A2_inv_for_SAEDRVT14_AOI22_1;
   not MGM_BG_5( A2_inv_for_SAEDRVT14_AOI22_1, A2 );
   wire X_row3;
   and MGM_BG_6( X_row3, A2_inv_for_SAEDRVT14_AOI22_1, B1_inv_for_SAEDRVT14_AOI22_1 );
   wire X_row4;
   and MGM_BG_7( X_row4, A2_inv_for_SAEDRVT14_AOI22_1, B2_inv_for_SAEDRVT14_AOI22_1 );
   or MGM_BG_8( X, X_row1, X_row2, X_row3, X_row4 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_AOI22_1P5_func( X, A1, A2, B1, B2 );
   input A1, A2, B1, B2;
   output X;
   wire A1_inv_for_SAEDRVT14_AOI22_1P5;
   not MGM_BG_0( A1_inv_for_SAEDRVT14_AOI22_1P5, A1 );
   wire B1_inv_for_SAEDRVT14_AOI22_1P5;
   not MGM_BG_1( B1_inv_for_SAEDRVT14_AOI22_1P5, B1 );
   wire X_row1;
   and MGM_BG_2( X_row1, A1_inv_for_SAEDRVT14_AOI22_1P5, B1_inv_for_SAEDRVT14_AOI22_1P5 );
   wire B2_inv_for_SAEDRVT14_AOI22_1P5;
   not MGM_BG_3( B2_inv_for_SAEDRVT14_AOI22_1P5, B2 );
   wire X_row2;
   and MGM_BG_4( X_row2, A1_inv_for_SAEDRVT14_AOI22_1P5, B2_inv_for_SAEDRVT14_AOI22_1P5 );
   wire A2_inv_for_SAEDRVT14_AOI22_1P5;
   not MGM_BG_5( A2_inv_for_SAEDRVT14_AOI22_1P5, A2 );
   wire X_row3;
   and MGM_BG_6( X_row3, A2_inv_for_SAEDRVT14_AOI22_1P5, B1_inv_for_SAEDRVT14_AOI22_1P5 );
   wire X_row4;
   and MGM_BG_7( X_row4, A2_inv_for_SAEDRVT14_AOI22_1P5, B2_inv_for_SAEDRVT14_AOI22_1P5 );
   or MGM_BG_8( X, X_row1, X_row2, X_row3, X_row4 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_AOI22_2_func( X, A1, A2, B1, B2 );
   input A1, A2, B1, B2;
   output X;
   wire A1_inv_for_SAEDRVT14_AOI22_2;
   not MGM_BG_0( A1_inv_for_SAEDRVT14_AOI22_2, A1 );
   wire B1_inv_for_SAEDRVT14_AOI22_2;
   not MGM_BG_1( B1_inv_for_SAEDRVT14_AOI22_2, B1 );
   wire X_row1;
   and MGM_BG_2( X_row1, A1_inv_for_SAEDRVT14_AOI22_2, B1_inv_for_SAEDRVT14_AOI22_2 );
   wire B2_inv_for_SAEDRVT14_AOI22_2;
   not MGM_BG_3( B2_inv_for_SAEDRVT14_AOI22_2, B2 );
   wire X_row2;
   and MGM_BG_4( X_row2, A1_inv_for_SAEDRVT14_AOI22_2, B2_inv_for_SAEDRVT14_AOI22_2 );
   wire A2_inv_for_SAEDRVT14_AOI22_2;
   not MGM_BG_5( A2_inv_for_SAEDRVT14_AOI22_2, A2 );
   wire X_row3;
   and MGM_BG_6( X_row3, A2_inv_for_SAEDRVT14_AOI22_2, B1_inv_for_SAEDRVT14_AOI22_2 );
   wire X_row4;
   and MGM_BG_7( X_row4, A2_inv_for_SAEDRVT14_AOI22_2, B2_inv_for_SAEDRVT14_AOI22_2 );
   or MGM_BG_8( X, X_row1, X_row2, X_row3, X_row4 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_AOI22_3_func( X, A1, A2, B1, B2 );
   input A1, A2, B1, B2;
   output X;
   wire A1_inv_for_SAEDRVT14_AOI22_3;
   not MGM_BG_0( A1_inv_for_SAEDRVT14_AOI22_3, A1 );
   wire B1_inv_for_SAEDRVT14_AOI22_3;
   not MGM_BG_1( B1_inv_for_SAEDRVT14_AOI22_3, B1 );
   wire X_row1;
   and MGM_BG_2( X_row1, A1_inv_for_SAEDRVT14_AOI22_3, B1_inv_for_SAEDRVT14_AOI22_3 );
   wire B2_inv_for_SAEDRVT14_AOI22_3;
   not MGM_BG_3( B2_inv_for_SAEDRVT14_AOI22_3, B2 );
   wire X_row2;
   and MGM_BG_4( X_row2, A1_inv_for_SAEDRVT14_AOI22_3, B2_inv_for_SAEDRVT14_AOI22_3 );
   wire A2_inv_for_SAEDRVT14_AOI22_3;
   not MGM_BG_5( A2_inv_for_SAEDRVT14_AOI22_3, A2 );
   wire X_row3;
   and MGM_BG_6( X_row3, A2_inv_for_SAEDRVT14_AOI22_3, B1_inv_for_SAEDRVT14_AOI22_3 );
   wire X_row4;
   and MGM_BG_7( X_row4, A2_inv_for_SAEDRVT14_AOI22_3, B2_inv_for_SAEDRVT14_AOI22_3 );
   or MGM_BG_8( X, X_row1, X_row2, X_row3, X_row4 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_AOI22_4_func( X, A1, A2, B1, B2 );
   input A1, A2, B1, B2;
   output X;
   wire A1_inv_for_SAEDRVT14_AOI22_4;
   not MGM_BG_0( A1_inv_for_SAEDRVT14_AOI22_4, A1 );
   wire B1_inv_for_SAEDRVT14_AOI22_4;
   not MGM_BG_1( B1_inv_for_SAEDRVT14_AOI22_4, B1 );
   wire X_row1;
   and MGM_BG_2( X_row1, A1_inv_for_SAEDRVT14_AOI22_4, B1_inv_for_SAEDRVT14_AOI22_4 );
   wire B2_inv_for_SAEDRVT14_AOI22_4;
   not MGM_BG_3( B2_inv_for_SAEDRVT14_AOI22_4, B2 );
   wire X_row2;
   and MGM_BG_4( X_row2, A1_inv_for_SAEDRVT14_AOI22_4, B2_inv_for_SAEDRVT14_AOI22_4 );
   wire A2_inv_for_SAEDRVT14_AOI22_4;
   not MGM_BG_5( A2_inv_for_SAEDRVT14_AOI22_4, A2 );
   wire X_row3;
   and MGM_BG_6( X_row3, A2_inv_for_SAEDRVT14_AOI22_4, B1_inv_for_SAEDRVT14_AOI22_4 );
   wire X_row4;
   and MGM_BG_7( X_row4, A2_inv_for_SAEDRVT14_AOI22_4, B2_inv_for_SAEDRVT14_AOI22_4 );
   or MGM_BG_8( X, X_row1, X_row2, X_row3, X_row4 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_AOI22_6_func( X, A1, A2, B1, B2 );
   input A1, A2, B1, B2;
   output X;
   wire A1_inv_for_SAEDRVT14_AOI22_6;
   not MGM_BG_0( A1_inv_for_SAEDRVT14_AOI22_6, A1 );
   wire B1_inv_for_SAEDRVT14_AOI22_6;
   not MGM_BG_1( B1_inv_for_SAEDRVT14_AOI22_6, B1 );
   wire X_row1;
   and MGM_BG_2( X_row1, A1_inv_for_SAEDRVT14_AOI22_6, B1_inv_for_SAEDRVT14_AOI22_6 );
   wire B2_inv_for_SAEDRVT14_AOI22_6;
   not MGM_BG_3( B2_inv_for_SAEDRVT14_AOI22_6, B2 );
   wire X_row2;
   and MGM_BG_4( X_row2, A1_inv_for_SAEDRVT14_AOI22_6, B2_inv_for_SAEDRVT14_AOI22_6 );
   wire A2_inv_for_SAEDRVT14_AOI22_6;
   not MGM_BG_5( A2_inv_for_SAEDRVT14_AOI22_6, A2 );
   wire X_row3;
   and MGM_BG_6( X_row3, A2_inv_for_SAEDRVT14_AOI22_6, B1_inv_for_SAEDRVT14_AOI22_6 );
   wire X_row4;
   and MGM_BG_7( X_row4, A2_inv_for_SAEDRVT14_AOI22_6, B2_inv_for_SAEDRVT14_AOI22_6 );
   or MGM_BG_8( X, X_row1, X_row2, X_row3, X_row4 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_AOI22_ECO_1_func( X, A1, A2, B1, B2 );
   input A1, A2, B1, B2;
   output X;
   wire A1_inv_for_SAEDRVT14_AOI22_ECO_1;
   not MGM_BG_0( A1_inv_for_SAEDRVT14_AOI22_ECO_1, A1 );
   wire B1_inv_for_SAEDRVT14_AOI22_ECO_1;
   not MGM_BG_1( B1_inv_for_SAEDRVT14_AOI22_ECO_1, B1 );
   wire X_row1;
   and MGM_BG_2( X_row1, A1_inv_for_SAEDRVT14_AOI22_ECO_1, B1_inv_for_SAEDRVT14_AOI22_ECO_1 );
   wire B2_inv_for_SAEDRVT14_AOI22_ECO_1;
   not MGM_BG_3( B2_inv_for_SAEDRVT14_AOI22_ECO_1, B2 );
   wire X_row2;
   and MGM_BG_4( X_row2, A1_inv_for_SAEDRVT14_AOI22_ECO_1, B2_inv_for_SAEDRVT14_AOI22_ECO_1 );
   wire A2_inv_for_SAEDRVT14_AOI22_ECO_1;
   not MGM_BG_5( A2_inv_for_SAEDRVT14_AOI22_ECO_1, A2 );
   wire X_row3;
   and MGM_BG_6( X_row3, A2_inv_for_SAEDRVT14_AOI22_ECO_1, B1_inv_for_SAEDRVT14_AOI22_ECO_1 );
   wire X_row4;
   and MGM_BG_7( X_row4, A2_inv_for_SAEDRVT14_AOI22_ECO_1, B2_inv_for_SAEDRVT14_AOI22_ECO_1 );
   or MGM_BG_8( X, X_row1, X_row2, X_row3, X_row4 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_AOI311_0P5_func( X, A1, A2, A3, B1, B2 );
   input A1, A2, A3, B1, B2;
   output X;
   wire A1_inv_for_SAEDRVT14_AOI311_0P5;
   not MGM_BG_0( A1_inv_for_SAEDRVT14_AOI311_0P5, A1 );
   wire B1_inv_for_SAEDRVT14_AOI311_0P5;
   not MGM_BG_1( B1_inv_for_SAEDRVT14_AOI311_0P5, B1 );
   wire B2_inv_for_SAEDRVT14_AOI311_0P5;
   not MGM_BG_2( B2_inv_for_SAEDRVT14_AOI311_0P5, B2 );
   wire X_row1;
   and MGM_BG_3( X_row1, A1_inv_for_SAEDRVT14_AOI311_0P5, B1_inv_for_SAEDRVT14_AOI311_0P5, B2_inv_for_SAEDRVT14_AOI311_0P5 );
   wire A2_inv_for_SAEDRVT14_AOI311_0P5;
   not MGM_BG_4( A2_inv_for_SAEDRVT14_AOI311_0P5, A2 );
   wire X_row2;
   and MGM_BG_5( X_row2, A2_inv_for_SAEDRVT14_AOI311_0P5, B1_inv_for_SAEDRVT14_AOI311_0P5, B2_inv_for_SAEDRVT14_AOI311_0P5 );
   wire A3_inv_for_SAEDRVT14_AOI311_0P5;
   not MGM_BG_6( A3_inv_for_SAEDRVT14_AOI311_0P5, A3 );
   wire X_row3;
   and MGM_BG_7( X_row3, A3_inv_for_SAEDRVT14_AOI311_0P5, B1_inv_for_SAEDRVT14_AOI311_0P5, B2_inv_for_SAEDRVT14_AOI311_0P5 );
   or MGM_BG_8( X, X_row1, X_row2, X_row3 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_AOI311_0P75_func( X, A1, A2, A3, B1, B2 );
   input A1, A2, A3, B1, B2;
   output X;
   wire A1_inv_for_SAEDRVT14_AOI311_0P75;
   not MGM_BG_0( A1_inv_for_SAEDRVT14_AOI311_0P75, A1 );
   wire B1_inv_for_SAEDRVT14_AOI311_0P75;
   not MGM_BG_1( B1_inv_for_SAEDRVT14_AOI311_0P75, B1 );
   wire B2_inv_for_SAEDRVT14_AOI311_0P75;
   not MGM_BG_2( B2_inv_for_SAEDRVT14_AOI311_0P75, B2 );
   wire X_row1;
   and MGM_BG_3( X_row1, A1_inv_for_SAEDRVT14_AOI311_0P75, B1_inv_for_SAEDRVT14_AOI311_0P75, B2_inv_for_SAEDRVT14_AOI311_0P75 );
   wire A2_inv_for_SAEDRVT14_AOI311_0P75;
   not MGM_BG_4( A2_inv_for_SAEDRVT14_AOI311_0P75, A2 );
   wire X_row2;
   and MGM_BG_5( X_row2, A2_inv_for_SAEDRVT14_AOI311_0P75, B1_inv_for_SAEDRVT14_AOI311_0P75, B2_inv_for_SAEDRVT14_AOI311_0P75 );
   wire A3_inv_for_SAEDRVT14_AOI311_0P75;
   not MGM_BG_6( A3_inv_for_SAEDRVT14_AOI311_0P75, A3 );
   wire X_row3;
   and MGM_BG_7( X_row3, A3_inv_for_SAEDRVT14_AOI311_0P75, B1_inv_for_SAEDRVT14_AOI311_0P75, B2_inv_for_SAEDRVT14_AOI311_0P75 );
   or MGM_BG_8( X, X_row1, X_row2, X_row3 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_AOI311_1_func( X, A1, A2, A3, B1, B2 );
   input A1, A2, A3, B1, B2;
   output X;
   wire A1_inv_for_SAEDRVT14_AOI311_1;
   not MGM_BG_0( A1_inv_for_SAEDRVT14_AOI311_1, A1 );
   wire B1_inv_for_SAEDRVT14_AOI311_1;
   not MGM_BG_1( B1_inv_for_SAEDRVT14_AOI311_1, B1 );
   wire B2_inv_for_SAEDRVT14_AOI311_1;
   not MGM_BG_2( B2_inv_for_SAEDRVT14_AOI311_1, B2 );
   wire X_row1;
   and MGM_BG_3( X_row1, A1_inv_for_SAEDRVT14_AOI311_1, B1_inv_for_SAEDRVT14_AOI311_1, B2_inv_for_SAEDRVT14_AOI311_1 );
   wire A2_inv_for_SAEDRVT14_AOI311_1;
   not MGM_BG_4( A2_inv_for_SAEDRVT14_AOI311_1, A2 );
   wire X_row2;
   and MGM_BG_5( X_row2, A2_inv_for_SAEDRVT14_AOI311_1, B1_inv_for_SAEDRVT14_AOI311_1, B2_inv_for_SAEDRVT14_AOI311_1 );
   wire A3_inv_for_SAEDRVT14_AOI311_1;
   not MGM_BG_6( A3_inv_for_SAEDRVT14_AOI311_1, A3 );
   wire X_row3;
   and MGM_BG_7( X_row3, A3_inv_for_SAEDRVT14_AOI311_1, B1_inv_for_SAEDRVT14_AOI311_1, B2_inv_for_SAEDRVT14_AOI311_1 );
   or MGM_BG_8( X, X_row1, X_row2, X_row3 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_AOI311_2_func( X, A1, A2, A3, B1, B2 );
   input A1, A2, A3, B1, B2;
   output X;
   wire A1_inv_for_SAEDRVT14_AOI311_2;
   not MGM_BG_0( A1_inv_for_SAEDRVT14_AOI311_2, A1 );
   wire B1_inv_for_SAEDRVT14_AOI311_2;
   not MGM_BG_1( B1_inv_for_SAEDRVT14_AOI311_2, B1 );
   wire B2_inv_for_SAEDRVT14_AOI311_2;
   not MGM_BG_2( B2_inv_for_SAEDRVT14_AOI311_2, B2 );
   wire X_row1;
   and MGM_BG_3( X_row1, A1_inv_for_SAEDRVT14_AOI311_2, B1_inv_for_SAEDRVT14_AOI311_2, B2_inv_for_SAEDRVT14_AOI311_2 );
   wire A2_inv_for_SAEDRVT14_AOI311_2;
   not MGM_BG_4( A2_inv_for_SAEDRVT14_AOI311_2, A2 );
   wire X_row2;
   and MGM_BG_5( X_row2, A2_inv_for_SAEDRVT14_AOI311_2, B1_inv_for_SAEDRVT14_AOI311_2, B2_inv_for_SAEDRVT14_AOI311_2 );
   wire A3_inv_for_SAEDRVT14_AOI311_2;
   not MGM_BG_6( A3_inv_for_SAEDRVT14_AOI311_2, A3 );
   wire X_row3;
   and MGM_BG_7( X_row3, A3_inv_for_SAEDRVT14_AOI311_2, B1_inv_for_SAEDRVT14_AOI311_2, B2_inv_for_SAEDRVT14_AOI311_2 );
   or MGM_BG_8( X, X_row1, X_row2, X_row3 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_AOI311_4_func( X, A1, A2, A3, B1, B2 );
   input A1, A2, A3, B1, B2;
   output X;
   wire A1_inv_for_SAEDRVT14_AOI311_4;
   not MGM_BG_0( A1_inv_for_SAEDRVT14_AOI311_4, A1 );
   wire B1_inv_for_SAEDRVT14_AOI311_4;
   not MGM_BG_1( B1_inv_for_SAEDRVT14_AOI311_4, B1 );
   wire B2_inv_for_SAEDRVT14_AOI311_4;
   not MGM_BG_2( B2_inv_for_SAEDRVT14_AOI311_4, B2 );
   wire X_row1;
   and MGM_BG_3( X_row1, A1_inv_for_SAEDRVT14_AOI311_4, B1_inv_for_SAEDRVT14_AOI311_4, B2_inv_for_SAEDRVT14_AOI311_4 );
   wire A2_inv_for_SAEDRVT14_AOI311_4;
   not MGM_BG_4( A2_inv_for_SAEDRVT14_AOI311_4, A2 );
   wire X_row2;
   and MGM_BG_5( X_row2, A2_inv_for_SAEDRVT14_AOI311_4, B1_inv_for_SAEDRVT14_AOI311_4, B2_inv_for_SAEDRVT14_AOI311_4 );
   wire A3_inv_for_SAEDRVT14_AOI311_4;
   not MGM_BG_6( A3_inv_for_SAEDRVT14_AOI311_4, A3 );
   wire X_row3;
   and MGM_BG_7( X_row3, A3_inv_for_SAEDRVT14_AOI311_4, B1_inv_for_SAEDRVT14_AOI311_4, B2_inv_for_SAEDRVT14_AOI311_4 );
   or MGM_BG_8( X, X_row1, X_row2, X_row3 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_AOI31_0P5_func( X, A1, A2, A3, B );
   input A1, A2, A3, B;
   output X;
   wire A1_inv_for_SAEDRVT14_AOI31_0P5;
   not MGM_BG_0( A1_inv_for_SAEDRVT14_AOI31_0P5, A1 );
   wire B_inv_for_SAEDRVT14_AOI31_0P5;
   not MGM_BG_1( B_inv_for_SAEDRVT14_AOI31_0P5, B );
   wire X_row1;
   and MGM_BG_2( X_row1, A1_inv_for_SAEDRVT14_AOI31_0P5, B_inv_for_SAEDRVT14_AOI31_0P5 );
   wire A2_inv_for_SAEDRVT14_AOI31_0P5;
   not MGM_BG_3( A2_inv_for_SAEDRVT14_AOI31_0P5, A2 );
   wire X_row2;
   and MGM_BG_4( X_row2, A2_inv_for_SAEDRVT14_AOI31_0P5, B_inv_for_SAEDRVT14_AOI31_0P5 );
   wire A3_inv_for_SAEDRVT14_AOI31_0P5;
   not MGM_BG_5( A3_inv_for_SAEDRVT14_AOI31_0P5, A3 );
   wire X_row3;
   and MGM_BG_6( X_row3, A3_inv_for_SAEDRVT14_AOI31_0P5, B_inv_for_SAEDRVT14_AOI31_0P5 );
   or MGM_BG_7( X, X_row1, X_row2, X_row3 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_AOI31_0P75_func( X, A1, A2, A3, B );
   input A1, A2, A3, B;
   output X;
   wire A1_inv_for_SAEDRVT14_AOI31_0P75;
   not MGM_BG_0( A1_inv_for_SAEDRVT14_AOI31_0P75, A1 );
   wire B_inv_for_SAEDRVT14_AOI31_0P75;
   not MGM_BG_1( B_inv_for_SAEDRVT14_AOI31_0P75, B );
   wire X_row1;
   and MGM_BG_2( X_row1, A1_inv_for_SAEDRVT14_AOI31_0P75, B_inv_for_SAEDRVT14_AOI31_0P75 );
   wire A2_inv_for_SAEDRVT14_AOI31_0P75;
   not MGM_BG_3( A2_inv_for_SAEDRVT14_AOI31_0P75, A2 );
   wire X_row2;
   and MGM_BG_4( X_row2, A2_inv_for_SAEDRVT14_AOI31_0P75, B_inv_for_SAEDRVT14_AOI31_0P75 );
   wire A3_inv_for_SAEDRVT14_AOI31_0P75;
   not MGM_BG_5( A3_inv_for_SAEDRVT14_AOI31_0P75, A3 );
   wire X_row3;
   and MGM_BG_6( X_row3, A3_inv_for_SAEDRVT14_AOI31_0P75, B_inv_for_SAEDRVT14_AOI31_0P75 );
   or MGM_BG_7( X, X_row1, X_row2, X_row3 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_AOI31_1_func( X, A1, A2, A3, B );
   input A1, A2, A3, B;
   output X;
   wire A1_inv_for_SAEDRVT14_AOI31_1;
   not MGM_BG_0( A1_inv_for_SAEDRVT14_AOI31_1, A1 );
   wire B_inv_for_SAEDRVT14_AOI31_1;
   not MGM_BG_1( B_inv_for_SAEDRVT14_AOI31_1, B );
   wire X_row1;
   and MGM_BG_2( X_row1, A1_inv_for_SAEDRVT14_AOI31_1, B_inv_for_SAEDRVT14_AOI31_1 );
   wire A2_inv_for_SAEDRVT14_AOI31_1;
   not MGM_BG_3( A2_inv_for_SAEDRVT14_AOI31_1, A2 );
   wire X_row2;
   and MGM_BG_4( X_row2, A2_inv_for_SAEDRVT14_AOI31_1, B_inv_for_SAEDRVT14_AOI31_1 );
   wire A3_inv_for_SAEDRVT14_AOI31_1;
   not MGM_BG_5( A3_inv_for_SAEDRVT14_AOI31_1, A3 );
   wire X_row3;
   and MGM_BG_6( X_row3, A3_inv_for_SAEDRVT14_AOI31_1, B_inv_for_SAEDRVT14_AOI31_1 );
   or MGM_BG_7( X, X_row1, X_row2, X_row3 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_AOI31_2_func( X, A1, A2, A3, B );
   input A1, A2, A3, B;
   output X;
   wire A1_inv_for_SAEDRVT14_AOI31_2;
   not MGM_BG_0( A1_inv_for_SAEDRVT14_AOI31_2, A1 );
   wire B_inv_for_SAEDRVT14_AOI31_2;
   not MGM_BG_1( B_inv_for_SAEDRVT14_AOI31_2, B );
   wire X_row1;
   and MGM_BG_2( X_row1, A1_inv_for_SAEDRVT14_AOI31_2, B_inv_for_SAEDRVT14_AOI31_2 );
   wire A2_inv_for_SAEDRVT14_AOI31_2;
   not MGM_BG_3( A2_inv_for_SAEDRVT14_AOI31_2, A2 );
   wire X_row2;
   and MGM_BG_4( X_row2, A2_inv_for_SAEDRVT14_AOI31_2, B_inv_for_SAEDRVT14_AOI31_2 );
   wire A3_inv_for_SAEDRVT14_AOI31_2;
   not MGM_BG_5( A3_inv_for_SAEDRVT14_AOI31_2, A3 );
   wire X_row3;
   and MGM_BG_6( X_row3, A3_inv_for_SAEDRVT14_AOI31_2, B_inv_for_SAEDRVT14_AOI31_2 );
   or MGM_BG_7( X, X_row1, X_row2, X_row3 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_AOI31_4_func( X, A1, A2, A3, B );
   input A1, A2, A3, B;
   output X;
   wire A1_inv_for_SAEDRVT14_AOI31_4;
   not MGM_BG_0( A1_inv_for_SAEDRVT14_AOI31_4, A1 );
   wire B_inv_for_SAEDRVT14_AOI31_4;
   not MGM_BG_1( B_inv_for_SAEDRVT14_AOI31_4, B );
   wire X_row1;
   and MGM_BG_2( X_row1, A1_inv_for_SAEDRVT14_AOI31_4, B_inv_for_SAEDRVT14_AOI31_4 );
   wire A2_inv_for_SAEDRVT14_AOI31_4;
   not MGM_BG_3( A2_inv_for_SAEDRVT14_AOI31_4, A2 );
   wire X_row2;
   and MGM_BG_4( X_row2, A2_inv_for_SAEDRVT14_AOI31_4, B_inv_for_SAEDRVT14_AOI31_4 );
   wire A3_inv_for_SAEDRVT14_AOI31_4;
   not MGM_BG_5( A3_inv_for_SAEDRVT14_AOI31_4, A3 );
   wire X_row3;
   and MGM_BG_6( X_row3, A3_inv_for_SAEDRVT14_AOI31_4, B_inv_for_SAEDRVT14_AOI31_4 );
   or MGM_BG_7( X, X_row1, X_row2, X_row3 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_AOI31_ECO_1_func( X, A1, A2, A3, B );
   input A1, A2, A3, B;
   output X;
   wire A1_inv_for_SAEDRVT14_AOI31_ECO_1;
   not MGM_BG_0( A1_inv_for_SAEDRVT14_AOI31_ECO_1, A1 );
   wire B_inv_for_SAEDRVT14_AOI31_ECO_1;
   not MGM_BG_1( B_inv_for_SAEDRVT14_AOI31_ECO_1, B );
   wire X_row1;
   and MGM_BG_2( X_row1, A1_inv_for_SAEDRVT14_AOI31_ECO_1, B_inv_for_SAEDRVT14_AOI31_ECO_1 );
   wire A2_inv_for_SAEDRVT14_AOI31_ECO_1;
   not MGM_BG_3( A2_inv_for_SAEDRVT14_AOI31_ECO_1, A2 );
   wire X_row2;
   and MGM_BG_4( X_row2, A2_inv_for_SAEDRVT14_AOI31_ECO_1, B_inv_for_SAEDRVT14_AOI31_ECO_1 );
   wire A3_inv_for_SAEDRVT14_AOI31_ECO_1;
   not MGM_BG_5( A3_inv_for_SAEDRVT14_AOI31_ECO_1, A3 );
   wire X_row3;
   and MGM_BG_6( X_row3, A3_inv_for_SAEDRVT14_AOI31_ECO_1, B_inv_for_SAEDRVT14_AOI31_ECO_1 );
   or MGM_BG_7( X, X_row1, X_row2, X_row3 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_AOI32_0P5_func( X, A1, A2, A3, B1, B2 );
   input A1, A2, A3, B1, B2;
   output X;
   wire A1_inv_for_SAEDRVT14_AOI32_0P5;
   not MGM_BG_0( A1_inv_for_SAEDRVT14_AOI32_0P5, A1 );
   wire B1_inv_for_SAEDRVT14_AOI32_0P5;
   not MGM_BG_1( B1_inv_for_SAEDRVT14_AOI32_0P5, B1 );
   wire X_row1;
   and MGM_BG_2( X_row1, A1_inv_for_SAEDRVT14_AOI32_0P5, B1_inv_for_SAEDRVT14_AOI32_0P5 );
   wire B2_inv_for_SAEDRVT14_AOI32_0P5;
   not MGM_BG_3( B2_inv_for_SAEDRVT14_AOI32_0P5, B2 );
   wire X_row2;
   and MGM_BG_4( X_row2, A1_inv_for_SAEDRVT14_AOI32_0P5, B2_inv_for_SAEDRVT14_AOI32_0P5 );
   wire A2_inv_for_SAEDRVT14_AOI32_0P5;
   not MGM_BG_5( A2_inv_for_SAEDRVT14_AOI32_0P5, A2 );
   wire X_row3;
   and MGM_BG_6( X_row3, A2_inv_for_SAEDRVT14_AOI32_0P5, B1_inv_for_SAEDRVT14_AOI32_0P5 );
   wire X_row4;
   and MGM_BG_7( X_row4, A2_inv_for_SAEDRVT14_AOI32_0P5, B2_inv_for_SAEDRVT14_AOI32_0P5 );
   wire A3_inv_for_SAEDRVT14_AOI32_0P5;
   not MGM_BG_8( A3_inv_for_SAEDRVT14_AOI32_0P5, A3 );
   wire X_row5;
   and MGM_BG_9( X_row5, A3_inv_for_SAEDRVT14_AOI32_0P5, B1_inv_for_SAEDRVT14_AOI32_0P5 );
   wire X_row6;
   and MGM_BG_10( X_row6, A3_inv_for_SAEDRVT14_AOI32_0P5, B2_inv_for_SAEDRVT14_AOI32_0P5 );
   or MGM_BG_11( X, X_row1, X_row2, X_row3, X_row4, X_row5, X_row6 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_AOI32_0P75_func( X, A1, A2, A3, B1, B2 );
   input A1, A2, A3, B1, B2;
   output X;
   wire A1_inv_for_SAEDRVT14_AOI32_0P75;
   not MGM_BG_0( A1_inv_for_SAEDRVT14_AOI32_0P75, A1 );
   wire B1_inv_for_SAEDRVT14_AOI32_0P75;
   not MGM_BG_1( B1_inv_for_SAEDRVT14_AOI32_0P75, B1 );
   wire X_row1;
   and MGM_BG_2( X_row1, A1_inv_for_SAEDRVT14_AOI32_0P75, B1_inv_for_SAEDRVT14_AOI32_0P75 );
   wire B2_inv_for_SAEDRVT14_AOI32_0P75;
   not MGM_BG_3( B2_inv_for_SAEDRVT14_AOI32_0P75, B2 );
   wire X_row2;
   and MGM_BG_4( X_row2, A1_inv_for_SAEDRVT14_AOI32_0P75, B2_inv_for_SAEDRVT14_AOI32_0P75 );
   wire A2_inv_for_SAEDRVT14_AOI32_0P75;
   not MGM_BG_5( A2_inv_for_SAEDRVT14_AOI32_0P75, A2 );
   wire X_row3;
   and MGM_BG_6( X_row3, A2_inv_for_SAEDRVT14_AOI32_0P75, B1_inv_for_SAEDRVT14_AOI32_0P75 );
   wire X_row4;
   and MGM_BG_7( X_row4, A2_inv_for_SAEDRVT14_AOI32_0P75, B2_inv_for_SAEDRVT14_AOI32_0P75 );
   wire A3_inv_for_SAEDRVT14_AOI32_0P75;
   not MGM_BG_8( A3_inv_for_SAEDRVT14_AOI32_0P75, A3 );
   wire X_row5;
   and MGM_BG_9( X_row5, A3_inv_for_SAEDRVT14_AOI32_0P75, B1_inv_for_SAEDRVT14_AOI32_0P75 );
   wire X_row6;
   and MGM_BG_10( X_row6, A3_inv_for_SAEDRVT14_AOI32_0P75, B2_inv_for_SAEDRVT14_AOI32_0P75 );
   or MGM_BG_11( X, X_row1, X_row2, X_row3, X_row4, X_row5, X_row6 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_AOI32_1_func( X, A1, A2, A3, B1, B2 );
   input A1, A2, A3, B1, B2;
   output X;
   wire A1_inv_for_SAEDRVT14_AOI32_1;
   not MGM_BG_0( A1_inv_for_SAEDRVT14_AOI32_1, A1 );
   wire B1_inv_for_SAEDRVT14_AOI32_1;
   not MGM_BG_1( B1_inv_for_SAEDRVT14_AOI32_1, B1 );
   wire X_row1;
   and MGM_BG_2( X_row1, A1_inv_for_SAEDRVT14_AOI32_1, B1_inv_for_SAEDRVT14_AOI32_1 );
   wire B2_inv_for_SAEDRVT14_AOI32_1;
   not MGM_BG_3( B2_inv_for_SAEDRVT14_AOI32_1, B2 );
   wire X_row2;
   and MGM_BG_4( X_row2, A1_inv_for_SAEDRVT14_AOI32_1, B2_inv_for_SAEDRVT14_AOI32_1 );
   wire A2_inv_for_SAEDRVT14_AOI32_1;
   not MGM_BG_5( A2_inv_for_SAEDRVT14_AOI32_1, A2 );
   wire X_row3;
   and MGM_BG_6( X_row3, A2_inv_for_SAEDRVT14_AOI32_1, B1_inv_for_SAEDRVT14_AOI32_1 );
   wire X_row4;
   and MGM_BG_7( X_row4, A2_inv_for_SAEDRVT14_AOI32_1, B2_inv_for_SAEDRVT14_AOI32_1 );
   wire A3_inv_for_SAEDRVT14_AOI32_1;
   not MGM_BG_8( A3_inv_for_SAEDRVT14_AOI32_1, A3 );
   wire X_row5;
   and MGM_BG_9( X_row5, A3_inv_for_SAEDRVT14_AOI32_1, B1_inv_for_SAEDRVT14_AOI32_1 );
   wire X_row6;
   and MGM_BG_10( X_row6, A3_inv_for_SAEDRVT14_AOI32_1, B2_inv_for_SAEDRVT14_AOI32_1 );
   or MGM_BG_11( X, X_row1, X_row2, X_row3, X_row4, X_row5, X_row6 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_AOI32_2_func( X, A1, A2, A3, B1, B2 );
   input A1, A2, A3, B1, B2;
   output X;
   wire A1_inv_for_SAEDRVT14_AOI32_2;
   not MGM_BG_0( A1_inv_for_SAEDRVT14_AOI32_2, A1 );
   wire B1_inv_for_SAEDRVT14_AOI32_2;
   not MGM_BG_1( B1_inv_for_SAEDRVT14_AOI32_2, B1 );
   wire X_row1;
   and MGM_BG_2( X_row1, A1_inv_for_SAEDRVT14_AOI32_2, B1_inv_for_SAEDRVT14_AOI32_2 );
   wire B2_inv_for_SAEDRVT14_AOI32_2;
   not MGM_BG_3( B2_inv_for_SAEDRVT14_AOI32_2, B2 );
   wire X_row2;
   and MGM_BG_4( X_row2, A1_inv_for_SAEDRVT14_AOI32_2, B2_inv_for_SAEDRVT14_AOI32_2 );
   wire A2_inv_for_SAEDRVT14_AOI32_2;
   not MGM_BG_5( A2_inv_for_SAEDRVT14_AOI32_2, A2 );
   wire X_row3;
   and MGM_BG_6( X_row3, A2_inv_for_SAEDRVT14_AOI32_2, B1_inv_for_SAEDRVT14_AOI32_2 );
   wire X_row4;
   and MGM_BG_7( X_row4, A2_inv_for_SAEDRVT14_AOI32_2, B2_inv_for_SAEDRVT14_AOI32_2 );
   wire A3_inv_for_SAEDRVT14_AOI32_2;
   not MGM_BG_8( A3_inv_for_SAEDRVT14_AOI32_2, A3 );
   wire X_row5;
   and MGM_BG_9( X_row5, A3_inv_for_SAEDRVT14_AOI32_2, B1_inv_for_SAEDRVT14_AOI32_2 );
   wire X_row6;
   and MGM_BG_10( X_row6, A3_inv_for_SAEDRVT14_AOI32_2, B2_inv_for_SAEDRVT14_AOI32_2 );
   or MGM_BG_11( X, X_row1, X_row2, X_row3, X_row4, X_row5, X_row6 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_AOI32_4_func( X, A1, A2, A3, B1, B2 );
   input A1, A2, A3, B1, B2;
   output X;
   wire A1_inv_for_SAEDRVT14_AOI32_4;
   not MGM_BG_0( A1_inv_for_SAEDRVT14_AOI32_4, A1 );
   wire B1_inv_for_SAEDRVT14_AOI32_4;
   not MGM_BG_1( B1_inv_for_SAEDRVT14_AOI32_4, B1 );
   wire X_row1;
   and MGM_BG_2( X_row1, A1_inv_for_SAEDRVT14_AOI32_4, B1_inv_for_SAEDRVT14_AOI32_4 );
   wire B2_inv_for_SAEDRVT14_AOI32_4;
   not MGM_BG_3( B2_inv_for_SAEDRVT14_AOI32_4, B2 );
   wire X_row2;
   and MGM_BG_4( X_row2, A1_inv_for_SAEDRVT14_AOI32_4, B2_inv_for_SAEDRVT14_AOI32_4 );
   wire A2_inv_for_SAEDRVT14_AOI32_4;
   not MGM_BG_5( A2_inv_for_SAEDRVT14_AOI32_4, A2 );
   wire X_row3;
   and MGM_BG_6( X_row3, A2_inv_for_SAEDRVT14_AOI32_4, B1_inv_for_SAEDRVT14_AOI32_4 );
   wire X_row4;
   and MGM_BG_7( X_row4, A2_inv_for_SAEDRVT14_AOI32_4, B2_inv_for_SAEDRVT14_AOI32_4 );
   wire A3_inv_for_SAEDRVT14_AOI32_4;
   not MGM_BG_8( A3_inv_for_SAEDRVT14_AOI32_4, A3 );
   wire X_row5;
   and MGM_BG_9( X_row5, A3_inv_for_SAEDRVT14_AOI32_4, B1_inv_for_SAEDRVT14_AOI32_4 );
   wire X_row6;
   and MGM_BG_10( X_row6, A3_inv_for_SAEDRVT14_AOI32_4, B2_inv_for_SAEDRVT14_AOI32_4 );
   or MGM_BG_11( X, X_row1, X_row2, X_row3, X_row4, X_row5, X_row6 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_AOI33_0P5_func( X, A1, A2, A3, B1, B2, B3 );
   input A1, A2, A3, B1, B2, B3;
   output X;
   wire A1_inv_for_SAEDRVT14_AOI33_0P5;
   not MGM_BG_0( A1_inv_for_SAEDRVT14_AOI33_0P5, A1 );
   wire B1_inv_for_SAEDRVT14_AOI33_0P5;
   not MGM_BG_1( B1_inv_for_SAEDRVT14_AOI33_0P5, B1 );
   wire X_row1;
   and MGM_BG_2( X_row1, A1_inv_for_SAEDRVT14_AOI33_0P5, B1_inv_for_SAEDRVT14_AOI33_0P5 );
   wire B2_inv_for_SAEDRVT14_AOI33_0P5;
   not MGM_BG_3( B2_inv_for_SAEDRVT14_AOI33_0P5, B2 );
   wire X_row2;
   and MGM_BG_4( X_row2, A1_inv_for_SAEDRVT14_AOI33_0P5, B2_inv_for_SAEDRVT14_AOI33_0P5 );
   wire B3_inv_for_SAEDRVT14_AOI33_0P5;
   not MGM_BG_5( B3_inv_for_SAEDRVT14_AOI33_0P5, B3 );
   wire X_row3;
   and MGM_BG_6( X_row3, A1_inv_for_SAEDRVT14_AOI33_0P5, B3_inv_for_SAEDRVT14_AOI33_0P5 );
   wire A2_inv_for_SAEDRVT14_AOI33_0P5;
   not MGM_BG_7( A2_inv_for_SAEDRVT14_AOI33_0P5, A2 );
   wire X_row4;
   and MGM_BG_8( X_row4, A2_inv_for_SAEDRVT14_AOI33_0P5, B1_inv_for_SAEDRVT14_AOI33_0P5 );
   wire X_row5;
   and MGM_BG_9( X_row5, A2_inv_for_SAEDRVT14_AOI33_0P5, B2_inv_for_SAEDRVT14_AOI33_0P5 );
   wire X_row6;
   and MGM_BG_10( X_row6, A2_inv_for_SAEDRVT14_AOI33_0P5, B3_inv_for_SAEDRVT14_AOI33_0P5 );
   wire A3_inv_for_SAEDRVT14_AOI33_0P5;
   not MGM_BG_11( A3_inv_for_SAEDRVT14_AOI33_0P5, A3 );
   wire X_row7;
   and MGM_BG_12( X_row7, A3_inv_for_SAEDRVT14_AOI33_0P5, B1_inv_for_SAEDRVT14_AOI33_0P5 );
   wire X_row8;
   and MGM_BG_13( X_row8, A3_inv_for_SAEDRVT14_AOI33_0P5, B2_inv_for_SAEDRVT14_AOI33_0P5 );
   wire X_row9;
   and MGM_BG_14( X_row9, A3_inv_for_SAEDRVT14_AOI33_0P5, B3_inv_for_SAEDRVT14_AOI33_0P5 );
   or MGM_BG_15( X, X_row1, X_row2, X_row3, X_row4, X_row5, X_row6, X_row7, X_row8, X_row9 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_AOI33_0P75_func( X, A1, A2, A3, B1, B2, B3 );
   input A1, A2, A3, B1, B2, B3;
   output X;
   wire A1_inv_for_SAEDRVT14_AOI33_0P75;
   not MGM_BG_0( A1_inv_for_SAEDRVT14_AOI33_0P75, A1 );
   wire B1_inv_for_SAEDRVT14_AOI33_0P75;
   not MGM_BG_1( B1_inv_for_SAEDRVT14_AOI33_0P75, B1 );
   wire X_row1;
   and MGM_BG_2( X_row1, A1_inv_for_SAEDRVT14_AOI33_0P75, B1_inv_for_SAEDRVT14_AOI33_0P75 );
   wire B2_inv_for_SAEDRVT14_AOI33_0P75;
   not MGM_BG_3( B2_inv_for_SAEDRVT14_AOI33_0P75, B2 );
   wire X_row2;
   and MGM_BG_4( X_row2, A1_inv_for_SAEDRVT14_AOI33_0P75, B2_inv_for_SAEDRVT14_AOI33_0P75 );
   wire B3_inv_for_SAEDRVT14_AOI33_0P75;
   not MGM_BG_5( B3_inv_for_SAEDRVT14_AOI33_0P75, B3 );
   wire X_row3;
   and MGM_BG_6( X_row3, A1_inv_for_SAEDRVT14_AOI33_0P75, B3_inv_for_SAEDRVT14_AOI33_0P75 );
   wire A2_inv_for_SAEDRVT14_AOI33_0P75;
   not MGM_BG_7( A2_inv_for_SAEDRVT14_AOI33_0P75, A2 );
   wire X_row4;
   and MGM_BG_8( X_row4, A2_inv_for_SAEDRVT14_AOI33_0P75, B1_inv_for_SAEDRVT14_AOI33_0P75 );
   wire X_row5;
   and MGM_BG_9( X_row5, A2_inv_for_SAEDRVT14_AOI33_0P75, B2_inv_for_SAEDRVT14_AOI33_0P75 );
   wire X_row6;
   and MGM_BG_10( X_row6, A2_inv_for_SAEDRVT14_AOI33_0P75, B3_inv_for_SAEDRVT14_AOI33_0P75 );
   wire A3_inv_for_SAEDRVT14_AOI33_0P75;
   not MGM_BG_11( A3_inv_for_SAEDRVT14_AOI33_0P75, A3 );
   wire X_row7;
   and MGM_BG_12( X_row7, A3_inv_for_SAEDRVT14_AOI33_0P75, B1_inv_for_SAEDRVT14_AOI33_0P75 );
   wire X_row8;
   and MGM_BG_13( X_row8, A3_inv_for_SAEDRVT14_AOI33_0P75, B2_inv_for_SAEDRVT14_AOI33_0P75 );
   wire X_row9;
   and MGM_BG_14( X_row9, A3_inv_for_SAEDRVT14_AOI33_0P75, B3_inv_for_SAEDRVT14_AOI33_0P75 );
   or MGM_BG_15( X, X_row1, X_row2, X_row3, X_row4, X_row5, X_row6, X_row7, X_row8, X_row9 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_AOI33_1_func( X, A1, A2, A3, B1, B2, B3 );
   input A1, A2, A3, B1, B2, B3;
   output X;
   wire A1_inv_for_SAEDRVT14_AOI33_1;
   not MGM_BG_0( A1_inv_for_SAEDRVT14_AOI33_1, A1 );
   wire B1_inv_for_SAEDRVT14_AOI33_1;
   not MGM_BG_1( B1_inv_for_SAEDRVT14_AOI33_1, B1 );
   wire X_row1;
   and MGM_BG_2( X_row1, A1_inv_for_SAEDRVT14_AOI33_1, B1_inv_for_SAEDRVT14_AOI33_1 );
   wire B2_inv_for_SAEDRVT14_AOI33_1;
   not MGM_BG_3( B2_inv_for_SAEDRVT14_AOI33_1, B2 );
   wire X_row2;
   and MGM_BG_4( X_row2, A1_inv_for_SAEDRVT14_AOI33_1, B2_inv_for_SAEDRVT14_AOI33_1 );
   wire B3_inv_for_SAEDRVT14_AOI33_1;
   not MGM_BG_5( B3_inv_for_SAEDRVT14_AOI33_1, B3 );
   wire X_row3;
   and MGM_BG_6( X_row3, A1_inv_for_SAEDRVT14_AOI33_1, B3_inv_for_SAEDRVT14_AOI33_1 );
   wire A2_inv_for_SAEDRVT14_AOI33_1;
   not MGM_BG_7( A2_inv_for_SAEDRVT14_AOI33_1, A2 );
   wire X_row4;
   and MGM_BG_8( X_row4, A2_inv_for_SAEDRVT14_AOI33_1, B1_inv_for_SAEDRVT14_AOI33_1 );
   wire X_row5;
   and MGM_BG_9( X_row5, A2_inv_for_SAEDRVT14_AOI33_1, B2_inv_for_SAEDRVT14_AOI33_1 );
   wire X_row6;
   and MGM_BG_10( X_row6, A2_inv_for_SAEDRVT14_AOI33_1, B3_inv_for_SAEDRVT14_AOI33_1 );
   wire A3_inv_for_SAEDRVT14_AOI33_1;
   not MGM_BG_11( A3_inv_for_SAEDRVT14_AOI33_1, A3 );
   wire X_row7;
   and MGM_BG_12( X_row7, A3_inv_for_SAEDRVT14_AOI33_1, B1_inv_for_SAEDRVT14_AOI33_1 );
   wire X_row8;
   and MGM_BG_13( X_row8, A3_inv_for_SAEDRVT14_AOI33_1, B2_inv_for_SAEDRVT14_AOI33_1 );
   wire X_row9;
   and MGM_BG_14( X_row9, A3_inv_for_SAEDRVT14_AOI33_1, B3_inv_for_SAEDRVT14_AOI33_1 );
   or MGM_BG_15( X, X_row1, X_row2, X_row3, X_row4, X_row5, X_row6, X_row7, X_row8, X_row9 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_AOI33_2_func( X, A1, A2, A3, B1, B2, B3 );
   input A1, A2, A3, B1, B2, B3;
   output X;
   wire A1_inv_for_SAEDRVT14_AOI33_2;
   not MGM_BG_0( A1_inv_for_SAEDRVT14_AOI33_2, A1 );
   wire B1_inv_for_SAEDRVT14_AOI33_2;
   not MGM_BG_1( B1_inv_for_SAEDRVT14_AOI33_2, B1 );
   wire X_row1;
   and MGM_BG_2( X_row1, A1_inv_for_SAEDRVT14_AOI33_2, B1_inv_for_SAEDRVT14_AOI33_2 );
   wire B2_inv_for_SAEDRVT14_AOI33_2;
   not MGM_BG_3( B2_inv_for_SAEDRVT14_AOI33_2, B2 );
   wire X_row2;
   and MGM_BG_4( X_row2, A1_inv_for_SAEDRVT14_AOI33_2, B2_inv_for_SAEDRVT14_AOI33_2 );
   wire B3_inv_for_SAEDRVT14_AOI33_2;
   not MGM_BG_5( B3_inv_for_SAEDRVT14_AOI33_2, B3 );
   wire X_row3;
   and MGM_BG_6( X_row3, A1_inv_for_SAEDRVT14_AOI33_2, B3_inv_for_SAEDRVT14_AOI33_2 );
   wire A2_inv_for_SAEDRVT14_AOI33_2;
   not MGM_BG_7( A2_inv_for_SAEDRVT14_AOI33_2, A2 );
   wire X_row4;
   and MGM_BG_8( X_row4, A2_inv_for_SAEDRVT14_AOI33_2, B1_inv_for_SAEDRVT14_AOI33_2 );
   wire X_row5;
   and MGM_BG_9( X_row5, A2_inv_for_SAEDRVT14_AOI33_2, B2_inv_for_SAEDRVT14_AOI33_2 );
   wire X_row6;
   and MGM_BG_10( X_row6, A2_inv_for_SAEDRVT14_AOI33_2, B3_inv_for_SAEDRVT14_AOI33_2 );
   wire A3_inv_for_SAEDRVT14_AOI33_2;
   not MGM_BG_11( A3_inv_for_SAEDRVT14_AOI33_2, A3 );
   wire X_row7;
   and MGM_BG_12( X_row7, A3_inv_for_SAEDRVT14_AOI33_2, B1_inv_for_SAEDRVT14_AOI33_2 );
   wire X_row8;
   and MGM_BG_13( X_row8, A3_inv_for_SAEDRVT14_AOI33_2, B2_inv_for_SAEDRVT14_AOI33_2 );
   wire X_row9;
   and MGM_BG_14( X_row9, A3_inv_for_SAEDRVT14_AOI33_2, B3_inv_for_SAEDRVT14_AOI33_2 );
   or MGM_BG_15( X, X_row1, X_row2, X_row3, X_row4, X_row5, X_row6, X_row7, X_row8, X_row9 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_AOI33_4_func( X, A1, A2, A3, B1, B2, B3 );
   input A1, A2, A3, B1, B2, B3;
   output X;
   wire A1_inv_for_SAEDRVT14_AOI33_4;
   not MGM_BG_0( A1_inv_for_SAEDRVT14_AOI33_4, A1 );
   wire B1_inv_for_SAEDRVT14_AOI33_4;
   not MGM_BG_1( B1_inv_for_SAEDRVT14_AOI33_4, B1 );
   wire X_row1;
   and MGM_BG_2( X_row1, A1_inv_for_SAEDRVT14_AOI33_4, B1_inv_for_SAEDRVT14_AOI33_4 );
   wire B2_inv_for_SAEDRVT14_AOI33_4;
   not MGM_BG_3( B2_inv_for_SAEDRVT14_AOI33_4, B2 );
   wire X_row2;
   and MGM_BG_4( X_row2, A1_inv_for_SAEDRVT14_AOI33_4, B2_inv_for_SAEDRVT14_AOI33_4 );
   wire B3_inv_for_SAEDRVT14_AOI33_4;
   not MGM_BG_5( B3_inv_for_SAEDRVT14_AOI33_4, B3 );
   wire X_row3;
   and MGM_BG_6( X_row3, A1_inv_for_SAEDRVT14_AOI33_4, B3_inv_for_SAEDRVT14_AOI33_4 );
   wire A2_inv_for_SAEDRVT14_AOI33_4;
   not MGM_BG_7( A2_inv_for_SAEDRVT14_AOI33_4, A2 );
   wire X_row4;
   and MGM_BG_8( X_row4, A2_inv_for_SAEDRVT14_AOI33_4, B1_inv_for_SAEDRVT14_AOI33_4 );
   wire X_row5;
   and MGM_BG_9( X_row5, A2_inv_for_SAEDRVT14_AOI33_4, B2_inv_for_SAEDRVT14_AOI33_4 );
   wire X_row6;
   and MGM_BG_10( X_row6, A2_inv_for_SAEDRVT14_AOI33_4, B3_inv_for_SAEDRVT14_AOI33_4 );
   wire A3_inv_for_SAEDRVT14_AOI33_4;
   not MGM_BG_11( A3_inv_for_SAEDRVT14_AOI33_4, A3 );
   wire X_row7;
   and MGM_BG_12( X_row7, A3_inv_for_SAEDRVT14_AOI33_4, B1_inv_for_SAEDRVT14_AOI33_4 );
   wire X_row8;
   and MGM_BG_13( X_row8, A3_inv_for_SAEDRVT14_AOI33_4, B2_inv_for_SAEDRVT14_AOI33_4 );
   wire X_row9;
   and MGM_BG_14( X_row9, A3_inv_for_SAEDRVT14_AOI33_4, B3_inv_for_SAEDRVT14_AOI33_4 );
   or MGM_BG_15( X, X_row1, X_row2, X_row3, X_row4, X_row5, X_row6, X_row7, X_row8, X_row9 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_BUF_1_func( X, A );
   input A;
   output X;
   buf MGM_BG_0( X, A );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_BUF_10_func( X, A );
   input A;
   output X;
   buf MGM_BG_0( X, A );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_BUF_12_func( X, A );
   input A;
   output X;
   buf MGM_BG_0( X, A );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_BUF_16_func( X, A );
   input A;
   output X;
   buf MGM_BG_0( X, A );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_BUF_1P5_func( X, A );
   input A;
   output X;
   buf MGM_BG_0( X, A );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_BUF_2_func( X, A );
   input A;
   output X;
   buf MGM_BG_0( X, A );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_BUF_20_func( X, A );
   input A;
   output X;
   buf MGM_BG_0( X, A );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_BUF_3_func( X, A );
   input A;
   output X;
   buf MGM_BG_0( X, A );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_BUF_4_func( X, A );
   input A;
   output X;
   buf MGM_BG_0( X, A );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_BUF_6_func( X, A );
   input A;
   output X;
   buf MGM_BG_0( X, A );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_BUF_8_func( X, A );
   input A;
   output X;
   buf MGM_BG_0( X, A );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_BUF_CDC_2_func( X, A );
   input A;
   output X;
   buf MGM_BG_0( X, A );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_BUF_CDC_4_func( X, A );
   input A;
   output X;
   buf MGM_BG_0( X, A );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_BUF_ECO_1_func( X, A );
   input A;
   output X;
   buf MGM_BG_0( X, A );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_BUF_ECO_2_func( X, A );
   input A;
   output X;
   buf MGM_BG_0( X, A );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_BUF_ECO_3_func( X, A );
   input A;
   output X;
   buf MGM_BG_0( X, A );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_BUF_ECO_4_func( X, A );
   input A;
   output X;
   buf MGM_BG_0( X, A );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_BUF_ECO_6_func( X, A );
   input A;
   output X;
   buf MGM_BG_0( X, A );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_BUF_ECO_7_func( X, A );
   input A;
   output X;
   buf MGM_BG_0( X, A );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_BUF_ECO_8_func( X, A );
   input A;
   output X;
   buf MGM_BG_0( X, A );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_BUF_S_0P5_func( X, A );
   input A;
   output X;
   buf MGM_BG_0( X, A );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_BUF_S_0P75_func( X, A );
   input A;
   output X;
   buf MGM_BG_0( X, A );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_BUF_S_1_func( X, A );
   input A;
   output X;
   buf MGM_BG_0( X, A );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_BUF_S_10_func( X, A );
   input A;
   output X;
   buf MGM_BG_0( X, A );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_BUF_S_12_func( X, A );
   input A;
   output X;
   buf MGM_BG_0( X, A );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_BUF_S_16_func( X, A );
   input A;
   output X;
   buf MGM_BG_0( X, A );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_BUF_S_1P5_func( X, A );
   input A;
   output X;
   buf MGM_BG_0( X, A );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_BUF_S_2_func( X, A );
   input A;
   output X;
   buf MGM_BG_0( X, A );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_BUF_S_20_func( X, A );
   input A;
   output X;
   buf MGM_BG_0( X, A );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_BUF_S_3_func( X, A );
   input A;
   output X;
   buf MGM_BG_0( X, A );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_BUF_S_4_func( X, A );
   input A;
   output X;
   buf MGM_BG_0( X, A );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_BUF_S_6_func( X, A );
   input A;
   output X;
   buf MGM_BG_0( X, A );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_BUF_S_8_func( X, A );
   input A;
   output X;
   buf MGM_BG_0( X, A );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_BUF_UCDC_0P5_func( X, A );
   input A;
   output X;
   buf MGM_BG_0( X, A );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_BUF_UCDC_1_func( X, A );
   input A;
   output X;
   buf MGM_BG_0( X, A );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_BUF_U_0P5_func( X, A );
   input A;
   output X;
   buf MGM_BG_0( X, A );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_BUF_U_0P75_func( X, A );
   input A;
   output X;
   buf MGM_BG_0( X, A );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_DCAP_ECO_12_func(  );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_DCAP_ECO_15_func(  );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_DCAP_ECO_18_func(  );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_DCAP_ECO_6_func(  );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_DCAP_ECO_9_func(  );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_DCAP_V4_16_func(  );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_DCAP_V4_32_func(  );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_DCAP_V4_5_func(  );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_DCAP_V4_64_func(  );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_DCAP_V4_8_func(  );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_DELPROGS4_12_func( X, A, S0, S1, S2, S3 );
   input A, S0, S1, S2, S3;
   output X;
   buf MGM_BG_0( X, A );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_DELPROGS4_16_func( X, A, S0, S1, S2, S3 );
   input A, S0, S1, S2, S3;
   output X;
   buf MGM_BG_0( X, A );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_DELPROGS4_4_func( X, A, S0, S1, S2, S3 );
   input A, S0, S1, S2, S3;
   output X;
   buf MGM_BG_0( X, A );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_DELPROGS4_6_func( X, A, S0, S1, S2, S3 );
   input A, S0, S1, S2, S3;
   output X;
   buf MGM_BG_0( X, A );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_DELPROGS4_8_func( X, A, S0, S1, S2, S3 );
   input A, S0, S1, S2, S3;
   output X;
   buf MGM_BG_0( X, A );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_DELPROGS4_Y2_24_func( X, A, S0, S1, S2, S3 );
   input A, S0, S1, S2, S3;
   output X;
   buf MGM_BG_0( X, A );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_DELPROGS9_V1_4_func( X, A, S0, S1, S2, S3, S4, S5, S6, S7, S8 );
   input A, S0, S1, S2, S3, S4, S5, S6, S7, S8;
   output X;
   buf MGM_BG_0( X, A );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_DELPROGS9_V2_4_func( X, A, S0, S1, S2, S3, S4, S5, S6, S7, S8 );
   input A, S0, S1, S2, S3, S4, S5, S6, S7, S8;
   output X;
   buf MGM_BG_0( X, A );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_DEL_L4D100_1_func( X, A );
   input A;
   output X;
   buf MGM_BG_0( X, A );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_DEL_L4D100_2_func( X, A );
   input A;
   output X;
   buf MGM_BG_0( X, A );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_DEL_R2V1_1_func( X, A );
   input A;
   output X;
   buf MGM_BG_0( X, A );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_DEL_R2V1_2_func( X, A );
   input A;
   output X;
   buf MGM_BG_0( X, A );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_DEL_R2V2_1_func( X, A );
   input A;
   output X;
   buf MGM_BG_0( X, A );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_DEL_R2V2_2_func( X, A );
   input A;
   output X;
   buf MGM_BG_0( X, A );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_DEL_R2V3_1_func( X, A );
   input A;
   output X;
   buf MGM_BG_0( X, A );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_DEL_R2V3_2_func( X, A );
   input A;
   output X;
   buf MGM_BG_0( X, A );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_EN2_0P5_func( X, A1, A2 );
   input A1, A2;
   output X;
   wire X_row1;
   and MGM_BG_0( X_row1, A1, A2 );
   wire A1_inv_for_SAEDRVT14_EN2_0P5;
   not MGM_BG_1( A1_inv_for_SAEDRVT14_EN2_0P5, A1 );
   wire A2_inv_for_SAEDRVT14_EN2_0P5;
   not MGM_BG_2( A2_inv_for_SAEDRVT14_EN2_0P5, A2 );
   wire X_row2;
   and MGM_BG_3( X_row2, A1_inv_for_SAEDRVT14_EN2_0P5, A2_inv_for_SAEDRVT14_EN2_0P5 );
   or MGM_BG_4( X, X_row1, X_row2 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_EN2_1_func( X, A1, A2 );
   input A1, A2;
   output X;
   wire X_row1;
   and MGM_BG_0( X_row1, A1, A2 );
   wire A1_inv_for_SAEDRVT14_EN2_1;
   not MGM_BG_1( A1_inv_for_SAEDRVT14_EN2_1, A1 );
   wire A2_inv_for_SAEDRVT14_EN2_1;
   not MGM_BG_2( A2_inv_for_SAEDRVT14_EN2_1, A2 );
   wire X_row2;
   and MGM_BG_3( X_row2, A1_inv_for_SAEDRVT14_EN2_1, A2_inv_for_SAEDRVT14_EN2_1 );
   or MGM_BG_4( X, X_row1, X_row2 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_EN2_1P5_func( X, A1, A2 );
   input A1, A2;
   output X;
   wire X_row1;
   and MGM_BG_0( X_row1, A1, A2 );
   wire A1_inv_for_SAEDRVT14_EN2_1P5;
   not MGM_BG_1( A1_inv_for_SAEDRVT14_EN2_1P5, A1 );
   wire A2_inv_for_SAEDRVT14_EN2_1P5;
   not MGM_BG_2( A2_inv_for_SAEDRVT14_EN2_1P5, A2 );
   wire X_row2;
   and MGM_BG_3( X_row2, A1_inv_for_SAEDRVT14_EN2_1P5, A2_inv_for_SAEDRVT14_EN2_1P5 );
   or MGM_BG_4( X, X_row1, X_row2 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_EN2_2_func( X, A1, A2 );
   input A1, A2;
   output X;
   wire X_row1;
   and MGM_BG_0( X_row1, A1, A2 );
   wire A1_inv_for_SAEDRVT14_EN2_2;
   not MGM_BG_1( A1_inv_for_SAEDRVT14_EN2_2, A1 );
   wire A2_inv_for_SAEDRVT14_EN2_2;
   not MGM_BG_2( A2_inv_for_SAEDRVT14_EN2_2, A2 );
   wire X_row2;
   and MGM_BG_3( X_row2, A1_inv_for_SAEDRVT14_EN2_2, A2_inv_for_SAEDRVT14_EN2_2 );
   or MGM_BG_4( X, X_row1, X_row2 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_EN2_3_func( X, A1, A2 );
   input A1, A2;
   output X;
   wire X_row1;
   and MGM_BG_0( X_row1, A1, A2 );
   wire A1_inv_for_SAEDRVT14_EN2_3;
   not MGM_BG_1( A1_inv_for_SAEDRVT14_EN2_3, A1 );
   wire A2_inv_for_SAEDRVT14_EN2_3;
   not MGM_BG_2( A2_inv_for_SAEDRVT14_EN2_3, A2 );
   wire X_row2;
   and MGM_BG_3( X_row2, A1_inv_for_SAEDRVT14_EN2_3, A2_inv_for_SAEDRVT14_EN2_3 );
   or MGM_BG_4( X, X_row1, X_row2 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_EN2_4_func( X, A1, A2 );
   input A1, A2;
   output X;
   wire X_row1;
   and MGM_BG_0( X_row1, A1, A2 );
   wire A1_inv_for_SAEDRVT14_EN2_4;
   not MGM_BG_1( A1_inv_for_SAEDRVT14_EN2_4, A1 );
   wire A2_inv_for_SAEDRVT14_EN2_4;
   not MGM_BG_2( A2_inv_for_SAEDRVT14_EN2_4, A2 );
   wire X_row2;
   and MGM_BG_3( X_row2, A1_inv_for_SAEDRVT14_EN2_4, A2_inv_for_SAEDRVT14_EN2_4 );
   or MGM_BG_4( X, X_row1, X_row2 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_EN2_ECO_1_func( X, A1, A2 );
   input A1, A2;
   output X;
   wire X_row1;
   and MGM_BG_0( X_row1, A1, A2 );
   wire A1_inv_for_SAEDRVT14_EN2_ECO_1;
   not MGM_BG_1( A1_inv_for_SAEDRVT14_EN2_ECO_1, A1 );
   wire A2_inv_for_SAEDRVT14_EN2_ECO_1;
   not MGM_BG_2( A2_inv_for_SAEDRVT14_EN2_ECO_1, A2 );
   wire X_row2;
   and MGM_BG_3( X_row2, A1_inv_for_SAEDRVT14_EN2_ECO_1, A2_inv_for_SAEDRVT14_EN2_ECO_1 );
   or MGM_BG_4( X, X_row1, X_row2 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_EN2_V1_0P75_func( X, A1, A2 );
   input A1, A2;
   output X;
   wire X_row1;
   and MGM_BG_0( X_row1, A1, A2 );
   wire A1_inv_for_SAEDRVT14_EN2_V1_0P75;
   not MGM_BG_1( A1_inv_for_SAEDRVT14_EN2_V1_0P75, A1 );
   wire A2_inv_for_SAEDRVT14_EN2_V1_0P75;
   not MGM_BG_2( A2_inv_for_SAEDRVT14_EN2_V1_0P75, A2 );
   wire X_row2;
   and MGM_BG_3( X_row2, A1_inv_for_SAEDRVT14_EN2_V1_0P75, A2_inv_for_SAEDRVT14_EN2_V1_0P75 );
   or MGM_BG_4( X, X_row1, X_row2 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_EN2_V1_1P5_func( X, A1, A2 );
   input A1, A2;
   output X;
   wire X_row1;
   and MGM_BG_0( X_row1, A1, A2 );
   wire A1_inv_for_SAEDRVT14_EN2_V1_1P5;
   not MGM_BG_1( A1_inv_for_SAEDRVT14_EN2_V1_1P5, A1 );
   wire A2_inv_for_SAEDRVT14_EN2_V1_1P5;
   not MGM_BG_2( A2_inv_for_SAEDRVT14_EN2_V1_1P5, A2 );
   wire X_row2;
   and MGM_BG_3( X_row2, A1_inv_for_SAEDRVT14_EN2_V1_1P5, A2_inv_for_SAEDRVT14_EN2_V1_1P5 );
   or MGM_BG_4( X, X_row1, X_row2 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_EN3_1_func( X, A1, A2, A3 );
   input A1, A2, A3;
   output X;
   wire A3_inv_for_SAEDRVT14_EN3_1;
   not MGM_BG_0( A3_inv_for_SAEDRVT14_EN3_1, A3 );
   wire X_row1;
   and MGM_BG_1( X_row1, A3_inv_for_SAEDRVT14_EN3_1, A1, A2 );
   wire A2_inv_for_SAEDRVT14_EN3_1;
   not MGM_BG_2( A2_inv_for_SAEDRVT14_EN3_1, A2 );
   wire X_row2;
   and MGM_BG_3( X_row2, A2_inv_for_SAEDRVT14_EN3_1, A1, A3 );
   wire A1_inv_for_SAEDRVT14_EN3_1;
   not MGM_BG_4( A1_inv_for_SAEDRVT14_EN3_1, A1 );
   wire X_row3;
   and MGM_BG_5( X_row3, A1_inv_for_SAEDRVT14_EN3_1, A2, A3 );
   wire X_row4;
   and MGM_BG_6( X_row4, A1_inv_for_SAEDRVT14_EN3_1, A2_inv_for_SAEDRVT14_EN3_1, A3_inv_for_SAEDRVT14_EN3_1 );
   or MGM_BG_7( X, X_row1, X_row2, X_row3, X_row4 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_EN3_2_func( X, A1, A2, A3 );
   input A1, A2, A3;
   output X;
   wire A3_inv_for_SAEDRVT14_EN3_2;
   not MGM_BG_0( A3_inv_for_SAEDRVT14_EN3_2, A3 );
   wire X_row1;
   and MGM_BG_1( X_row1, A3_inv_for_SAEDRVT14_EN3_2, A1, A2 );
   wire A2_inv_for_SAEDRVT14_EN3_2;
   not MGM_BG_2( A2_inv_for_SAEDRVT14_EN3_2, A2 );
   wire X_row2;
   and MGM_BG_3( X_row2, A2_inv_for_SAEDRVT14_EN3_2, A1, A3 );
   wire A1_inv_for_SAEDRVT14_EN3_2;
   not MGM_BG_4( A1_inv_for_SAEDRVT14_EN3_2, A1 );
   wire X_row3;
   and MGM_BG_5( X_row3, A1_inv_for_SAEDRVT14_EN3_2, A2, A3 );
   wire X_row4;
   and MGM_BG_6( X_row4, A1_inv_for_SAEDRVT14_EN3_2, A2_inv_for_SAEDRVT14_EN3_2, A3_inv_for_SAEDRVT14_EN3_2 );
   or MGM_BG_7( X, X_row1, X_row2, X_row3, X_row4 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_EN3_3_func( X, A1, A2, A3 );
   input A1, A2, A3;
   output X;
   wire A3_inv_for_SAEDRVT14_EN3_3;
   not MGM_BG_0( A3_inv_for_SAEDRVT14_EN3_3, A3 );
   wire X_row1;
   and MGM_BG_1( X_row1, A3_inv_for_SAEDRVT14_EN3_3, A1, A2 );
   wire A2_inv_for_SAEDRVT14_EN3_3;
   not MGM_BG_2( A2_inv_for_SAEDRVT14_EN3_3, A2 );
   wire X_row2;
   and MGM_BG_3( X_row2, A2_inv_for_SAEDRVT14_EN3_3, A1, A3 );
   wire A1_inv_for_SAEDRVT14_EN3_3;
   not MGM_BG_4( A1_inv_for_SAEDRVT14_EN3_3, A1 );
   wire X_row3;
   and MGM_BG_5( X_row3, A1_inv_for_SAEDRVT14_EN3_3, A2, A3 );
   wire X_row4;
   and MGM_BG_6( X_row4, A1_inv_for_SAEDRVT14_EN3_3, A2_inv_for_SAEDRVT14_EN3_3, A3_inv_for_SAEDRVT14_EN3_3 );
   or MGM_BG_7( X, X_row1, X_row2, X_row3, X_row4 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_EN3_U_0P5_func( X, A1, A2, A3 );
   input A1, A2, A3;
   output X;
   wire A3_inv_for_SAEDRVT14_EN3_U_0P5;
   not MGM_BG_0( A3_inv_for_SAEDRVT14_EN3_U_0P5, A3 );
   wire X_row1;
   and MGM_BG_1( X_row1, A3_inv_for_SAEDRVT14_EN3_U_0P5, A1, A2 );
   wire A2_inv_for_SAEDRVT14_EN3_U_0P5;
   not MGM_BG_2( A2_inv_for_SAEDRVT14_EN3_U_0P5, A2 );
   wire X_row2;
   and MGM_BG_3( X_row2, A2_inv_for_SAEDRVT14_EN3_U_0P5, A1, A3 );
   wire A1_inv_for_SAEDRVT14_EN3_U_0P5;
   not MGM_BG_4( A1_inv_for_SAEDRVT14_EN3_U_0P5, A1 );
   wire X_row3;
   and MGM_BG_5( X_row3, A1_inv_for_SAEDRVT14_EN3_U_0P5, A2, A3 );
   wire X_row4;
   and MGM_BG_6( X_row4, A1_inv_for_SAEDRVT14_EN3_U_0P5, A2_inv_for_SAEDRVT14_EN3_U_0P5, A3_inv_for_SAEDRVT14_EN3_U_0P5 );
   or MGM_BG_7( X, X_row1, X_row2, X_row3, X_row4 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_EN4_2_func( X, A1, A2, A3, A4 );
   input A1, A2, A3, A4;
   output X;
   wire X_row1;
   and MGM_BG_0( X_row1, A1, A2, A3, A4 );
   wire A3_inv_for_SAEDRVT14_EN4_2;
   not MGM_BG_1( A3_inv_for_SAEDRVT14_EN4_2, A3 );
   wire A4_inv_for_SAEDRVT14_EN4_2;
   not MGM_BG_2( A4_inv_for_SAEDRVT14_EN4_2, A4 );
   wire X_row2;
   and MGM_BG_3( X_row2, A3_inv_for_SAEDRVT14_EN4_2, A4_inv_for_SAEDRVT14_EN4_2, A1, A2 );
   wire A2_inv_for_SAEDRVT14_EN4_2;
   not MGM_BG_4( A2_inv_for_SAEDRVT14_EN4_2, A2 );
   wire X_row3;
   and MGM_BG_5( X_row3, A2_inv_for_SAEDRVT14_EN4_2, A4_inv_for_SAEDRVT14_EN4_2, A1, A3 );
   wire X_row4;
   and MGM_BG_6( X_row4, A2_inv_for_SAEDRVT14_EN4_2, A3_inv_for_SAEDRVT14_EN4_2, A1, A4 );
   wire A1_inv_for_SAEDRVT14_EN4_2;
   not MGM_BG_7( A1_inv_for_SAEDRVT14_EN4_2, A1 );
   wire X_row5;
   and MGM_BG_8( X_row5, A1_inv_for_SAEDRVT14_EN4_2, A4_inv_for_SAEDRVT14_EN4_2, A2, A3 );
   wire X_row6;
   and MGM_BG_9( X_row6, A1_inv_for_SAEDRVT14_EN4_2, A3_inv_for_SAEDRVT14_EN4_2, A2, A4 );
   wire X_row7;
   and MGM_BG_10( X_row7, A1_inv_for_SAEDRVT14_EN4_2, A2_inv_for_SAEDRVT14_EN4_2, A3, A4 );
   wire X_row8;
   and MGM_BG_11( X_row8, A1_inv_for_SAEDRVT14_EN4_2, A2_inv_for_SAEDRVT14_EN4_2, A3_inv_for_SAEDRVT14_EN4_2, A4_inv_for_SAEDRVT14_EN4_2 );
   or MGM_BG_12( X, X_row1, X_row2, X_row3, X_row4, X_row5, X_row6, X_row7, X_row8 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_EN4_4_func( X, A1, A2, A3, A4 );
   input A1, A2, A3, A4;
   output X;
   wire X_row1;
   and MGM_BG_0( X_row1, A1, A2, A3, A4 );
   wire A3_inv_for_SAEDRVT14_EN4_4;
   not MGM_BG_1( A3_inv_for_SAEDRVT14_EN4_4, A3 );
   wire A4_inv_for_SAEDRVT14_EN4_4;
   not MGM_BG_2( A4_inv_for_SAEDRVT14_EN4_4, A4 );
   wire X_row2;
   and MGM_BG_3( X_row2, A3_inv_for_SAEDRVT14_EN4_4, A4_inv_for_SAEDRVT14_EN4_4, A1, A2 );
   wire A2_inv_for_SAEDRVT14_EN4_4;
   not MGM_BG_4( A2_inv_for_SAEDRVT14_EN4_4, A2 );
   wire X_row3;
   and MGM_BG_5( X_row3, A2_inv_for_SAEDRVT14_EN4_4, A4_inv_for_SAEDRVT14_EN4_4, A1, A3 );
   wire X_row4;
   and MGM_BG_6( X_row4, A2_inv_for_SAEDRVT14_EN4_4, A3_inv_for_SAEDRVT14_EN4_4, A1, A4 );
   wire A1_inv_for_SAEDRVT14_EN4_4;
   not MGM_BG_7( A1_inv_for_SAEDRVT14_EN4_4, A1 );
   wire X_row5;
   and MGM_BG_8( X_row5, A1_inv_for_SAEDRVT14_EN4_4, A4_inv_for_SAEDRVT14_EN4_4, A2, A3 );
   wire X_row6;
   and MGM_BG_9( X_row6, A1_inv_for_SAEDRVT14_EN4_4, A3_inv_for_SAEDRVT14_EN4_4, A2, A4 );
   wire X_row7;
   and MGM_BG_10( X_row7, A1_inv_for_SAEDRVT14_EN4_4, A2_inv_for_SAEDRVT14_EN4_4, A3, A4 );
   wire X_row8;
   and MGM_BG_11( X_row8, A1_inv_for_SAEDRVT14_EN4_4, A2_inv_for_SAEDRVT14_EN4_4, A3_inv_for_SAEDRVT14_EN4_4, A4_inv_for_SAEDRVT14_EN4_4 );
   or MGM_BG_12( X, X_row1, X_row2, X_row3, X_row4, X_row5, X_row6, X_row7, X_row8 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_EN4_M_1_func( X, A1, A2, A3, A4 );
   input A1, A2, A3, A4;
   output X;
   wire X_row1;
   and MGM_BG_0( X_row1, A1, A2, A3, A4 );
   wire A3_inv_for_SAEDRVT14_EN4_M_1;
   not MGM_BG_1( A3_inv_for_SAEDRVT14_EN4_M_1, A3 );
   wire A4_inv_for_SAEDRVT14_EN4_M_1;
   not MGM_BG_2( A4_inv_for_SAEDRVT14_EN4_M_1, A4 );
   wire X_row2;
   and MGM_BG_3( X_row2, A3_inv_for_SAEDRVT14_EN4_M_1, A4_inv_for_SAEDRVT14_EN4_M_1, A1, A2 );
   wire A2_inv_for_SAEDRVT14_EN4_M_1;
   not MGM_BG_4( A2_inv_for_SAEDRVT14_EN4_M_1, A2 );
   wire X_row3;
   and MGM_BG_5( X_row3, A2_inv_for_SAEDRVT14_EN4_M_1, A4_inv_for_SAEDRVT14_EN4_M_1, A1, A3 );
   wire X_row4;
   and MGM_BG_6( X_row4, A2_inv_for_SAEDRVT14_EN4_M_1, A3_inv_for_SAEDRVT14_EN4_M_1, A1, A4 );
   wire A1_inv_for_SAEDRVT14_EN4_M_1;
   not MGM_BG_7( A1_inv_for_SAEDRVT14_EN4_M_1, A1 );
   wire X_row5;
   and MGM_BG_8( X_row5, A1_inv_for_SAEDRVT14_EN4_M_1, A4_inv_for_SAEDRVT14_EN4_M_1, A2, A3 );
   wire X_row6;
   and MGM_BG_9( X_row6, A1_inv_for_SAEDRVT14_EN4_M_1, A3_inv_for_SAEDRVT14_EN4_M_1, A2, A4 );
   wire X_row7;
   and MGM_BG_10( X_row7, A1_inv_for_SAEDRVT14_EN4_M_1, A2_inv_for_SAEDRVT14_EN4_M_1, A3, A4 );
   wire X_row8;
   and MGM_BG_11( X_row8, A1_inv_for_SAEDRVT14_EN4_M_1, A2_inv_for_SAEDRVT14_EN4_M_1, A3_inv_for_SAEDRVT14_EN4_M_1, A4_inv_for_SAEDRVT14_EN4_M_1 );
   or MGM_BG_12( X, X_row1, X_row2, X_row3, X_row4, X_row5, X_row6, X_row7, X_row8 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_EN4_U_0P5_func( X, A1, A2, A3, A4 );
   input A1, A2, A3, A4;
   output X;
   wire X_row1;
   and MGM_BG_0( X_row1, A1, A2, A3, A4 );
   wire A3_inv_for_SAEDRVT14_EN4_U_0P5;
   not MGM_BG_1( A3_inv_for_SAEDRVT14_EN4_U_0P5, A3 );
   wire A4_inv_for_SAEDRVT14_EN4_U_0P5;
   not MGM_BG_2( A4_inv_for_SAEDRVT14_EN4_U_0P5, A4 );
   wire X_row2;
   and MGM_BG_3( X_row2, A3_inv_for_SAEDRVT14_EN4_U_0P5, A4_inv_for_SAEDRVT14_EN4_U_0P5, A1, A2 );
   wire A2_inv_for_SAEDRVT14_EN4_U_0P5;
   not MGM_BG_4( A2_inv_for_SAEDRVT14_EN4_U_0P5, A2 );
   wire X_row3;
   and MGM_BG_5( X_row3, A2_inv_for_SAEDRVT14_EN4_U_0P5, A4_inv_for_SAEDRVT14_EN4_U_0P5, A1, A3 );
   wire X_row4;
   and MGM_BG_6( X_row4, A2_inv_for_SAEDRVT14_EN4_U_0P5, A3_inv_for_SAEDRVT14_EN4_U_0P5, A1, A4 );
   wire A1_inv_for_SAEDRVT14_EN4_U_0P5;
   not MGM_BG_7( A1_inv_for_SAEDRVT14_EN4_U_0P5, A1 );
   wire X_row5;
   and MGM_BG_8( X_row5, A1_inv_for_SAEDRVT14_EN4_U_0P5, A4_inv_for_SAEDRVT14_EN4_U_0P5, A2, A3 );
   wire X_row6;
   and MGM_BG_9( X_row6, A1_inv_for_SAEDRVT14_EN4_U_0P5, A3_inv_for_SAEDRVT14_EN4_U_0P5, A2, A4 );
   wire X_row7;
   and MGM_BG_10( X_row7, A1_inv_for_SAEDRVT14_EN4_U_0P5, A2_inv_for_SAEDRVT14_EN4_U_0P5, A3, A4 );
   wire X_row8;
   and MGM_BG_11( X_row8, A1_inv_for_SAEDRVT14_EN4_U_0P5, A2_inv_for_SAEDRVT14_EN4_U_0P5, A3_inv_for_SAEDRVT14_EN4_U_0P5, A4_inv_for_SAEDRVT14_EN4_U_0P5 );
   or MGM_BG_12( X, X_row1, X_row2, X_row3, X_row4, X_row5, X_row6, X_row7, X_row8 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_EO2_0P5_func( X, A1, A2 );
   input A1, A2;
   output X;
   wire A2_inv_for_SAEDRVT14_EO2_0P5;
   not MGM_BG_0( A2_inv_for_SAEDRVT14_EO2_0P5, A2 );
   wire X_row1;
   and MGM_BG_1( X_row1, A2_inv_for_SAEDRVT14_EO2_0P5, A1 );
   wire A1_inv_for_SAEDRVT14_EO2_0P5;
   not MGM_BG_2( A1_inv_for_SAEDRVT14_EO2_0P5, A1 );
   wire X_row2;
   and MGM_BG_3( X_row2, A1_inv_for_SAEDRVT14_EO2_0P5, A2 );
   or MGM_BG_4( X, X_row1, X_row2 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_EO2_1_func( X, A1, A2 );
   input A1, A2;
   output X;
   wire A2_inv_for_SAEDRVT14_EO2_1;
   not MGM_BG_0( A2_inv_for_SAEDRVT14_EO2_1, A2 );
   wire X_row1;
   and MGM_BG_1( X_row1, A2_inv_for_SAEDRVT14_EO2_1, A1 );
   wire A1_inv_for_SAEDRVT14_EO2_1;
   not MGM_BG_2( A1_inv_for_SAEDRVT14_EO2_1, A1 );
   wire X_row2;
   and MGM_BG_3( X_row2, A1_inv_for_SAEDRVT14_EO2_1, A2 );
   or MGM_BG_4( X, X_row1, X_row2 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_EO2_1P5_func( X, A1, A2 );
   input A1, A2;
   output X;
   wire A2_inv_for_SAEDRVT14_EO2_1P5;
   not MGM_BG_0( A2_inv_for_SAEDRVT14_EO2_1P5, A2 );
   wire X_row1;
   and MGM_BG_1( X_row1, A2_inv_for_SAEDRVT14_EO2_1P5, A1 );
   wire A1_inv_for_SAEDRVT14_EO2_1P5;
   not MGM_BG_2( A1_inv_for_SAEDRVT14_EO2_1P5, A1 );
   wire X_row2;
   and MGM_BG_3( X_row2, A1_inv_for_SAEDRVT14_EO2_1P5, A2 );
   or MGM_BG_4( X, X_row1, X_row2 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_EO2_2_func( X, A1, A2 );
   input A1, A2;
   output X;
   wire A2_inv_for_SAEDRVT14_EO2_2;
   not MGM_BG_0( A2_inv_for_SAEDRVT14_EO2_2, A2 );
   wire X_row1;
   and MGM_BG_1( X_row1, A2_inv_for_SAEDRVT14_EO2_2, A1 );
   wire A1_inv_for_SAEDRVT14_EO2_2;
   not MGM_BG_2( A1_inv_for_SAEDRVT14_EO2_2, A1 );
   wire X_row2;
   and MGM_BG_3( X_row2, A1_inv_for_SAEDRVT14_EO2_2, A2 );
   or MGM_BG_4( X, X_row1, X_row2 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_EO2_3_func( X, A1, A2 );
   input A1, A2;
   output X;
   wire A2_inv_for_SAEDRVT14_EO2_3;
   not MGM_BG_0( A2_inv_for_SAEDRVT14_EO2_3, A2 );
   wire X_row1;
   and MGM_BG_1( X_row1, A2_inv_for_SAEDRVT14_EO2_3, A1 );
   wire A1_inv_for_SAEDRVT14_EO2_3;
   not MGM_BG_2( A1_inv_for_SAEDRVT14_EO2_3, A1 );
   wire X_row2;
   and MGM_BG_3( X_row2, A1_inv_for_SAEDRVT14_EO2_3, A2 );
   or MGM_BG_4( X, X_row1, X_row2 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_EO2_4_func( X, A1, A2 );
   input A1, A2;
   output X;
   wire A2_inv_for_SAEDRVT14_EO2_4;
   not MGM_BG_0( A2_inv_for_SAEDRVT14_EO2_4, A2 );
   wire X_row1;
   and MGM_BG_1( X_row1, A2_inv_for_SAEDRVT14_EO2_4, A1 );
   wire A1_inv_for_SAEDRVT14_EO2_4;
   not MGM_BG_2( A1_inv_for_SAEDRVT14_EO2_4, A1 );
   wire X_row2;
   and MGM_BG_3( X_row2, A1_inv_for_SAEDRVT14_EO2_4, A2 );
   or MGM_BG_4( X, X_row1, X_row2 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_EO2_ECO_1_func( X, A1, A2 );
   input A1, A2;
   output X;
   wire A2_inv_for_SAEDRVT14_EO2_ECO_1;
   not MGM_BG_0( A2_inv_for_SAEDRVT14_EO2_ECO_1, A2 );
   wire X_row1;
   and MGM_BG_1( X_row1, A2_inv_for_SAEDRVT14_EO2_ECO_1, A1 );
   wire A1_inv_for_SAEDRVT14_EO2_ECO_1;
   not MGM_BG_2( A1_inv_for_SAEDRVT14_EO2_ECO_1, A1 );
   wire X_row2;
   and MGM_BG_3( X_row2, A1_inv_for_SAEDRVT14_EO2_ECO_1, A2 );
   or MGM_BG_4( X, X_row1, X_row2 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_EO2_MM_0P5_func( X, A1, A2 );
   input A1, A2;
   output X;
   wire A2_inv_for_SAEDRVT14_EO2_MM_0P5;
   not MGM_BG_0( A2_inv_for_SAEDRVT14_EO2_MM_0P5, A2 );
   wire X_row1;
   and MGM_BG_1( X_row1, A2_inv_for_SAEDRVT14_EO2_MM_0P5, A1 );
   wire A1_inv_for_SAEDRVT14_EO2_MM_0P5;
   not MGM_BG_2( A1_inv_for_SAEDRVT14_EO2_MM_0P5, A1 );
   wire X_row2;
   and MGM_BG_3( X_row2, A1_inv_for_SAEDRVT14_EO2_MM_0P5, A2 );
   or MGM_BG_4( X, X_row1, X_row2 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_EO2_MM_1_func( X, A1, A2 );
   input A1, A2;
   output X;
   wire A2_inv_for_SAEDRVT14_EO2_MM_1;
   not MGM_BG_0( A2_inv_for_SAEDRVT14_EO2_MM_1, A2 );
   wire X_row1;
   and MGM_BG_1( X_row1, A2_inv_for_SAEDRVT14_EO2_MM_1, A1 );
   wire A1_inv_for_SAEDRVT14_EO2_MM_1;
   not MGM_BG_2( A1_inv_for_SAEDRVT14_EO2_MM_1, A1 );
   wire X_row2;
   and MGM_BG_3( X_row2, A1_inv_for_SAEDRVT14_EO2_MM_1, A2 );
   or MGM_BG_4( X, X_row1, X_row2 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_EO2_MM_2_func( X, A1, A2 );
   input A1, A2;
   output X;
   wire A2_inv_for_SAEDRVT14_EO2_MM_2;
   not MGM_BG_0( A2_inv_for_SAEDRVT14_EO2_MM_2, A2 );
   wire X_row1;
   and MGM_BG_1( X_row1, A2_inv_for_SAEDRVT14_EO2_MM_2, A1 );
   wire A1_inv_for_SAEDRVT14_EO2_MM_2;
   not MGM_BG_2( A1_inv_for_SAEDRVT14_EO2_MM_2, A1 );
   wire X_row2;
   and MGM_BG_3( X_row2, A1_inv_for_SAEDRVT14_EO2_MM_2, A2 );
   or MGM_BG_4( X, X_row1, X_row2 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_EO2_MM_4_func( X, A1, A2 );
   input A1, A2;
   output X;
   wire A2_inv_for_SAEDRVT14_EO2_MM_4;
   not MGM_BG_0( A2_inv_for_SAEDRVT14_EO2_MM_4, A2 );
   wire X_row1;
   and MGM_BG_1( X_row1, A2_inv_for_SAEDRVT14_EO2_MM_4, A1 );
   wire A1_inv_for_SAEDRVT14_EO2_MM_4;
   not MGM_BG_2( A1_inv_for_SAEDRVT14_EO2_MM_4, A1 );
   wire X_row2;
   and MGM_BG_3( X_row2, A1_inv_for_SAEDRVT14_EO2_MM_4, A2 );
   or MGM_BG_4( X, X_row1, X_row2 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_EO2_V1_0P75_func( X, A1, A2 );
   input A1, A2;
   output X;
   wire A2_inv_for_SAEDRVT14_EO2_V1_0P75;
   not MGM_BG_0( A2_inv_for_SAEDRVT14_EO2_V1_0P75, A2 );
   wire X_row1;
   and MGM_BG_1( X_row1, A2_inv_for_SAEDRVT14_EO2_V1_0P75, A1 );
   wire A1_inv_for_SAEDRVT14_EO2_V1_0P75;
   not MGM_BG_2( A1_inv_for_SAEDRVT14_EO2_V1_0P75, A1 );
   wire X_row2;
   and MGM_BG_3( X_row2, A1_inv_for_SAEDRVT14_EO2_V1_0P75, A2 );
   or MGM_BG_4( X, X_row1, X_row2 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_EO2_V1_1P5_func( X, A1, A2 );
   input A1, A2;
   output X;
   wire A2_inv_for_SAEDRVT14_EO2_V1_1P5;
   not MGM_BG_0( A2_inv_for_SAEDRVT14_EO2_V1_1P5, A2 );
   wire X_row1;
   and MGM_BG_1( X_row1, A2_inv_for_SAEDRVT14_EO2_V1_1P5, A1 );
   wire A1_inv_for_SAEDRVT14_EO2_V1_1P5;
   not MGM_BG_2( A1_inv_for_SAEDRVT14_EO2_V1_1P5, A1 );
   wire X_row2;
   and MGM_BG_3( X_row2, A1_inv_for_SAEDRVT14_EO2_V1_1P5, A2 );
   or MGM_BG_4( X, X_row1, X_row2 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_EO3_0P5_func( X, A1, A2, A3 );
   input A1, A2, A3;
   output X;
   wire X_row1;
   and MGM_BG_0( X_row1, A1, A2, A3 );
   wire A2_inv_for_SAEDRVT14_EO3_0P5;
   not MGM_BG_1( A2_inv_for_SAEDRVT14_EO3_0P5, A2 );
   wire A3_inv_for_SAEDRVT14_EO3_0P5;
   not MGM_BG_2( A3_inv_for_SAEDRVT14_EO3_0P5, A3 );
   wire X_row2;
   and MGM_BG_3( X_row2, A2_inv_for_SAEDRVT14_EO3_0P5, A3_inv_for_SAEDRVT14_EO3_0P5, A1 );
   wire A1_inv_for_SAEDRVT14_EO3_0P5;
   not MGM_BG_4( A1_inv_for_SAEDRVT14_EO3_0P5, A1 );
   wire X_row3;
   and MGM_BG_5( X_row3, A1_inv_for_SAEDRVT14_EO3_0P5, A3_inv_for_SAEDRVT14_EO3_0P5, A2 );
   wire X_row4;
   and MGM_BG_6( X_row4, A1_inv_for_SAEDRVT14_EO3_0P5, A2_inv_for_SAEDRVT14_EO3_0P5, A3 );
   or MGM_BG_7( X, X_row1, X_row2, X_row3, X_row4 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_EO3_1_func( X, A1, A2, A3 );
   input A1, A2, A3;
   output X;
   wire X_row1;
   and MGM_BG_0( X_row1, A1, A2, A3 );
   wire A2_inv_for_SAEDRVT14_EO3_1;
   not MGM_BG_1( A2_inv_for_SAEDRVT14_EO3_1, A2 );
   wire A3_inv_for_SAEDRVT14_EO3_1;
   not MGM_BG_2( A3_inv_for_SAEDRVT14_EO3_1, A3 );
   wire X_row2;
   and MGM_BG_3( X_row2, A2_inv_for_SAEDRVT14_EO3_1, A3_inv_for_SAEDRVT14_EO3_1, A1 );
   wire A1_inv_for_SAEDRVT14_EO3_1;
   not MGM_BG_4( A1_inv_for_SAEDRVT14_EO3_1, A1 );
   wire X_row3;
   and MGM_BG_5( X_row3, A1_inv_for_SAEDRVT14_EO3_1, A3_inv_for_SAEDRVT14_EO3_1, A2 );
   wire X_row4;
   and MGM_BG_6( X_row4, A1_inv_for_SAEDRVT14_EO3_1, A2_inv_for_SAEDRVT14_EO3_1, A3 );
   or MGM_BG_7( X, X_row1, X_row2, X_row3, X_row4 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_EO3_2_func( X, A1, A2, A3 );
   input A1, A2, A3;
   output X;
   wire X_row1;
   and MGM_BG_0( X_row1, A1, A2, A3 );
   wire A2_inv_for_SAEDRVT14_EO3_2;
   not MGM_BG_1( A2_inv_for_SAEDRVT14_EO3_2, A2 );
   wire A3_inv_for_SAEDRVT14_EO3_2;
   not MGM_BG_2( A3_inv_for_SAEDRVT14_EO3_2, A3 );
   wire X_row2;
   and MGM_BG_3( X_row2, A2_inv_for_SAEDRVT14_EO3_2, A3_inv_for_SAEDRVT14_EO3_2, A1 );
   wire A1_inv_for_SAEDRVT14_EO3_2;
   not MGM_BG_4( A1_inv_for_SAEDRVT14_EO3_2, A1 );
   wire X_row3;
   and MGM_BG_5( X_row3, A1_inv_for_SAEDRVT14_EO3_2, A3_inv_for_SAEDRVT14_EO3_2, A2 );
   wire X_row4;
   and MGM_BG_6( X_row4, A1_inv_for_SAEDRVT14_EO3_2, A2_inv_for_SAEDRVT14_EO3_2, A3 );
   or MGM_BG_7( X, X_row1, X_row2, X_row3, X_row4 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_EO3_4_func( X, A1, A2, A3 );
   input A1, A2, A3;
   output X;
   wire X_row1;
   and MGM_BG_0( X_row1, A1, A2, A3 );
   wire A2_inv_for_SAEDRVT14_EO3_4;
   not MGM_BG_1( A2_inv_for_SAEDRVT14_EO3_4, A2 );
   wire A3_inv_for_SAEDRVT14_EO3_4;
   not MGM_BG_2( A3_inv_for_SAEDRVT14_EO3_4, A3 );
   wire X_row2;
   and MGM_BG_3( X_row2, A2_inv_for_SAEDRVT14_EO3_4, A3_inv_for_SAEDRVT14_EO3_4, A1 );
   wire A1_inv_for_SAEDRVT14_EO3_4;
   not MGM_BG_4( A1_inv_for_SAEDRVT14_EO3_4, A1 );
   wire X_row3;
   and MGM_BG_5( X_row3, A1_inv_for_SAEDRVT14_EO3_4, A3_inv_for_SAEDRVT14_EO3_4, A2 );
   wire X_row4;
   and MGM_BG_6( X_row4, A1_inv_for_SAEDRVT14_EO3_4, A2_inv_for_SAEDRVT14_EO3_4, A3 );
   or MGM_BG_7( X, X_row1, X_row2, X_row3, X_row4 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_EO4_1_func( X, A1, A2, A3, A4 );
   input A1, A2, A3, A4;
   output X;
   wire A4_inv_for_SAEDRVT14_EO4_1;
   not MGM_BG_0( A4_inv_for_SAEDRVT14_EO4_1, A4 );
   wire X_row1;
   and MGM_BG_1( X_row1, A4_inv_for_SAEDRVT14_EO4_1, A1, A2, A3 );
   wire A3_inv_for_SAEDRVT14_EO4_1;
   not MGM_BG_2( A3_inv_for_SAEDRVT14_EO4_1, A3 );
   wire X_row2;
   and MGM_BG_3( X_row2, A3_inv_for_SAEDRVT14_EO4_1, A1, A2, A4 );
   wire A2_inv_for_SAEDRVT14_EO4_1;
   not MGM_BG_4( A2_inv_for_SAEDRVT14_EO4_1, A2 );
   wire X_row3;
   and MGM_BG_5( X_row3, A2_inv_for_SAEDRVT14_EO4_1, A1, A3, A4 );
   wire X_row4;
   and MGM_BG_6( X_row4, A2_inv_for_SAEDRVT14_EO4_1, A3_inv_for_SAEDRVT14_EO4_1, A4_inv_for_SAEDRVT14_EO4_1, A1 );
   wire A1_inv_for_SAEDRVT14_EO4_1;
   not MGM_BG_7( A1_inv_for_SAEDRVT14_EO4_1, A1 );
   wire X_row5;
   and MGM_BG_8( X_row5, A1_inv_for_SAEDRVT14_EO4_1, A2, A3, A4 );
   wire X_row6;
   and MGM_BG_9( X_row6, A1_inv_for_SAEDRVT14_EO4_1, A3_inv_for_SAEDRVT14_EO4_1, A4_inv_for_SAEDRVT14_EO4_1, A2 );
   wire X_row7;
   and MGM_BG_10( X_row7, A1_inv_for_SAEDRVT14_EO4_1, A2_inv_for_SAEDRVT14_EO4_1, A4_inv_for_SAEDRVT14_EO4_1, A3 );
   wire X_row8;
   and MGM_BG_11( X_row8, A1_inv_for_SAEDRVT14_EO4_1, A2_inv_for_SAEDRVT14_EO4_1, A3_inv_for_SAEDRVT14_EO4_1, A4 );
   or MGM_BG_12( X, X_row1, X_row2, X_row3, X_row4, X_row5, X_row6, X_row7, X_row8 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_EO4_2_func( X, A1, A2, A3, A4 );
   input A1, A2, A3, A4;
   output X;
   wire A4_inv_for_SAEDRVT14_EO4_2;
   not MGM_BG_0( A4_inv_for_SAEDRVT14_EO4_2, A4 );
   wire X_row1;
   and MGM_BG_1( X_row1, A4_inv_for_SAEDRVT14_EO4_2, A1, A2, A3 );
   wire A3_inv_for_SAEDRVT14_EO4_2;
   not MGM_BG_2( A3_inv_for_SAEDRVT14_EO4_2, A3 );
   wire X_row2;
   and MGM_BG_3( X_row2, A3_inv_for_SAEDRVT14_EO4_2, A1, A2, A4 );
   wire A2_inv_for_SAEDRVT14_EO4_2;
   not MGM_BG_4( A2_inv_for_SAEDRVT14_EO4_2, A2 );
   wire X_row3;
   and MGM_BG_5( X_row3, A2_inv_for_SAEDRVT14_EO4_2, A1, A3, A4 );
   wire X_row4;
   and MGM_BG_6( X_row4, A2_inv_for_SAEDRVT14_EO4_2, A3_inv_for_SAEDRVT14_EO4_2, A4_inv_for_SAEDRVT14_EO4_2, A1 );
   wire A1_inv_for_SAEDRVT14_EO4_2;
   not MGM_BG_7( A1_inv_for_SAEDRVT14_EO4_2, A1 );
   wire X_row5;
   and MGM_BG_8( X_row5, A1_inv_for_SAEDRVT14_EO4_2, A2, A3, A4 );
   wire X_row6;
   and MGM_BG_9( X_row6, A1_inv_for_SAEDRVT14_EO4_2, A3_inv_for_SAEDRVT14_EO4_2, A4_inv_for_SAEDRVT14_EO4_2, A2 );
   wire X_row7;
   and MGM_BG_10( X_row7, A1_inv_for_SAEDRVT14_EO4_2, A2_inv_for_SAEDRVT14_EO4_2, A4_inv_for_SAEDRVT14_EO4_2, A3 );
   wire X_row8;
   and MGM_BG_11( X_row8, A1_inv_for_SAEDRVT14_EO4_2, A2_inv_for_SAEDRVT14_EO4_2, A3_inv_for_SAEDRVT14_EO4_2, A4 );
   or MGM_BG_12( X, X_row1, X_row2, X_row3, X_row4, X_row5, X_row6, X_row7, X_row8 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_EO4_4_func( X, A1, A2, A3, A4 );
   input A1, A2, A3, A4;
   output X;
   wire A4_inv_for_SAEDRVT14_EO4_4;
   not MGM_BG_0( A4_inv_for_SAEDRVT14_EO4_4, A4 );
   wire X_row1;
   and MGM_BG_1( X_row1, A4_inv_for_SAEDRVT14_EO4_4, A1, A2, A3 );
   wire A3_inv_for_SAEDRVT14_EO4_4;
   not MGM_BG_2( A3_inv_for_SAEDRVT14_EO4_4, A3 );
   wire X_row2;
   and MGM_BG_3( X_row2, A3_inv_for_SAEDRVT14_EO4_4, A1, A2, A4 );
   wire A2_inv_for_SAEDRVT14_EO4_4;
   not MGM_BG_4( A2_inv_for_SAEDRVT14_EO4_4, A2 );
   wire X_row3;
   and MGM_BG_5( X_row3, A2_inv_for_SAEDRVT14_EO4_4, A1, A3, A4 );
   wire X_row4;
   and MGM_BG_6( X_row4, A2_inv_for_SAEDRVT14_EO4_4, A3_inv_for_SAEDRVT14_EO4_4, A4_inv_for_SAEDRVT14_EO4_4, A1 );
   wire A1_inv_for_SAEDRVT14_EO4_4;
   not MGM_BG_7( A1_inv_for_SAEDRVT14_EO4_4, A1 );
   wire X_row5;
   and MGM_BG_8( X_row5, A1_inv_for_SAEDRVT14_EO4_4, A2, A3, A4 );
   wire X_row6;
   and MGM_BG_9( X_row6, A1_inv_for_SAEDRVT14_EO4_4, A3_inv_for_SAEDRVT14_EO4_4, A4_inv_for_SAEDRVT14_EO4_4, A2 );
   wire X_row7;
   and MGM_BG_10( X_row7, A1_inv_for_SAEDRVT14_EO4_4, A2_inv_for_SAEDRVT14_EO4_4, A4_inv_for_SAEDRVT14_EO4_4, A3 );
   wire X_row8;
   and MGM_BG_11( X_row8, A1_inv_for_SAEDRVT14_EO4_4, A2_inv_for_SAEDRVT14_EO4_4, A3_inv_for_SAEDRVT14_EO4_4, A4 );
   or MGM_BG_12( X, X_row1, X_row2, X_row3, X_row4, X_row5, X_row6, X_row7, X_row8 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_EO4_U_0P5_func( X, A1, A2, A3, A4 );
   input A1, A2, A3, A4;
   output X;
   wire A4_inv_for_SAEDRVT14_EO4_U_0P5;
   not MGM_BG_0( A4_inv_for_SAEDRVT14_EO4_U_0P5, A4 );
   wire X_row1;
   and MGM_BG_1( X_row1, A4_inv_for_SAEDRVT14_EO4_U_0P5, A1, A2, A3 );
   wire A3_inv_for_SAEDRVT14_EO4_U_0P5;
   not MGM_BG_2( A3_inv_for_SAEDRVT14_EO4_U_0P5, A3 );
   wire X_row2;
   and MGM_BG_3( X_row2, A3_inv_for_SAEDRVT14_EO4_U_0P5, A1, A2, A4 );
   wire A2_inv_for_SAEDRVT14_EO4_U_0P5;
   not MGM_BG_4( A2_inv_for_SAEDRVT14_EO4_U_0P5, A2 );
   wire X_row3;
   and MGM_BG_5( X_row3, A2_inv_for_SAEDRVT14_EO4_U_0P5, A1, A3, A4 );
   wire X_row4;
   and MGM_BG_6( X_row4, A2_inv_for_SAEDRVT14_EO4_U_0P5, A3_inv_for_SAEDRVT14_EO4_U_0P5, A4_inv_for_SAEDRVT14_EO4_U_0P5, A1 );
   wire A1_inv_for_SAEDRVT14_EO4_U_0P5;
   not MGM_BG_7( A1_inv_for_SAEDRVT14_EO4_U_0P5, A1 );
   wire X_row5;
   and MGM_BG_8( X_row5, A1_inv_for_SAEDRVT14_EO4_U_0P5, A2, A3, A4 );
   wire X_row6;
   and MGM_BG_9( X_row6, A1_inv_for_SAEDRVT14_EO4_U_0P5, A3_inv_for_SAEDRVT14_EO4_U_0P5, A4_inv_for_SAEDRVT14_EO4_U_0P5, A2 );
   wire X_row7;
   and MGM_BG_10( X_row7, A1_inv_for_SAEDRVT14_EO4_U_0P5, A2_inv_for_SAEDRVT14_EO4_U_0P5, A4_inv_for_SAEDRVT14_EO4_U_0P5, A3 );
   wire X_row8;
   and MGM_BG_11( X_row8, A1_inv_for_SAEDRVT14_EO4_U_0P5, A2_inv_for_SAEDRVT14_EO4_U_0P5, A3_inv_for_SAEDRVT14_EO4_U_0P5, A4 );
   or MGM_BG_12( X, X_row1, X_row2, X_row3, X_row4, X_row5, X_row6, X_row7, X_row8 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_INV_0P5_func( X, A );
   input A;
   output X;
   not MGM_BG_0( X, A );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_INV_0P75_func( X, A );
   input A;
   output X;
   not MGM_BG_0( X, A );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_INV_1_func( X, A );
   input A;
   output X;
   not MGM_BG_0( X, A );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_INV_10_func( X, A );
   input A;
   output X;
   not MGM_BG_0( X, A );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_INV_12_func( X, A );
   input A;
   output X;
   not MGM_BG_0( X, A );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_INV_16_func( X, A );
   input A;
   output X;
   not MGM_BG_0( X, A );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_INV_1P5_func( X, A );
   input A;
   output X;
   not MGM_BG_0( X, A );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_INV_2_func( X, A );
   input A;
   output X;
   not MGM_BG_0( X, A );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_INV_20_func( X, A );
   input A;
   output X;
   not MGM_BG_0( X, A );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_INV_3_func( X, A );
   input A;
   output X;
   not MGM_BG_0( X, A );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_INV_4_func( X, A );
   input A;
   output X;
   not MGM_BG_0( X, A );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_INV_6_func( X, A );
   input A;
   output X;
   not MGM_BG_0( X, A );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_INV_8_func( X, A );
   input A;
   output X;
   not MGM_BG_0( X, A );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_INV_ECO_1_func( X, A );
   input A;
   output X;
   not MGM_BG_0( X, A );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_INV_ECO_2_func( X, A );
   input A;
   output X;
   not MGM_BG_0( X, A );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_INV_ECO_3_func( X, A );
   input A;
   output X;
   not MGM_BG_0( X, A );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_INV_ECO_4_func( X, A );
   input A;
   output X;
   not MGM_BG_0( X, A );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_INV_ECO_6_func( X, A );
   input A;
   output X;
   not MGM_BG_0( X, A );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_INV_ECO_8_func( X, A );
   input A;
   output X;
   not MGM_BG_0( X, A );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_INV_S_0P5_func( X, A );
   input A;
   output X;
   not MGM_BG_0( X, A );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_INV_S_0P75_func( X, A );
   input A;
   output X;
   not MGM_BG_0( X, A );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_INV_S_1_func( X, A );
   input A;
   output X;
   not MGM_BG_0( X, A );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_INV_S_10_func( X, A );
   input A;
   output X;
   not MGM_BG_0( X, A );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_INV_S_12_func( X, A );
   input A;
   output X;
   not MGM_BG_0( X, A );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_INV_S_16_func( X, A );
   input A;
   output X;
   not MGM_BG_0( X, A );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_INV_S_1P5_func( X, A );
   input A;
   output X;
   not MGM_BG_0( X, A );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_INV_S_2_func( X, A );
   input A;
   output X;
   not MGM_BG_0( X, A );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_INV_S_20_func( X, A );
   input A;
   output X;
   not MGM_BG_0( X, A );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_INV_S_3_func( X, A );
   input A;
   output X;
   not MGM_BG_0( X, A );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_INV_S_4_func( X, A );
   input A;
   output X;
   not MGM_BG_0( X, A );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_INV_S_5_func( X, A );
   input A;
   output X;
   not MGM_BG_0( X, A );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_INV_S_6_func( X, A );
   input A;
   output X;
   not MGM_BG_0( X, A );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_INV_S_7_func( X, A );
   input A;
   output X;
   not MGM_BG_0( X, A );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_INV_S_8_func( X, A );
   input A;
   output X;
   not MGM_BG_0( X, A );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_INV_S_9_func( X, A );
   input A;
   output X;
   not MGM_BG_0( X, A );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_MUX2_1_func( X, D0, D1, S );
   input D0, D1, S;
   output X;
   wire X_row1;
   and MGM_BG_0( X_row1, D0, D1 );
   wire S_inv_for_SAEDRVT14_MUX2_1;
   not MGM_BG_1( S_inv_for_SAEDRVT14_MUX2_1, S );
   wire X_row2;
   and MGM_BG_2( X_row2, S_inv_for_SAEDRVT14_MUX2_1, D0 );
   wire X_row3;
   and MGM_BG_3( X_row3, D1, S );
   or MGM_BG_4( X, X_row1, X_row2, X_row3 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_MUX2_1P5_func( X, D0, D1, S );
   input D0, D1, S;
   output X;
   wire X_row1;
   and MGM_BG_0( X_row1, D0, D1 );
   wire S_inv_for_SAEDRVT14_MUX2_1P5;
   not MGM_BG_1( S_inv_for_SAEDRVT14_MUX2_1P5, S );
   wire X_row2;
   and MGM_BG_2( X_row2, S_inv_for_SAEDRVT14_MUX2_1P5, D0 );
   wire X_row3;
   and MGM_BG_3( X_row3, D1, S );
   or MGM_BG_4( X, X_row1, X_row2, X_row3 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_MUX2_2_func( X, D0, D1, S );
   input D0, D1, S;
   output X;
   wire X_row1;
   and MGM_BG_0( X_row1, D0, D1 );
   wire S_inv_for_SAEDRVT14_MUX2_2;
   not MGM_BG_1( S_inv_for_SAEDRVT14_MUX2_2, S );
   wire X_row2;
   and MGM_BG_2( X_row2, S_inv_for_SAEDRVT14_MUX2_2, D0 );
   wire X_row3;
   and MGM_BG_3( X_row3, D1, S );
   or MGM_BG_4( X, X_row1, X_row2, X_row3 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_MUX2_4_func( X, D0, D1, S );
   input D0, D1, S;
   output X;
   wire X_row1;
   and MGM_BG_0( X_row1, D0, D1 );
   wire S_inv_for_SAEDRVT14_MUX2_4;
   not MGM_BG_1( S_inv_for_SAEDRVT14_MUX2_4, S );
   wire X_row2;
   and MGM_BG_2( X_row2, S_inv_for_SAEDRVT14_MUX2_4, D0 );
   wire X_row3;
   and MGM_BG_3( X_row3, D1, S );
   or MGM_BG_4( X, X_row1, X_row2, X_row3 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_MUX2_ECO_1_func( X, D0, D1, S );
   input D0, D1, S;
   output X;
   wire X_row1;
   and MGM_BG_0( X_row1, D0, D1 );
   wire S_inv_for_SAEDRVT14_MUX2_ECO_1;
   not MGM_BG_1( S_inv_for_SAEDRVT14_MUX2_ECO_1, S );
   wire X_row2;
   and MGM_BG_2( X_row2, S_inv_for_SAEDRVT14_MUX2_ECO_1, D0 );
   wire X_row3;
   and MGM_BG_3( X_row3, D1, S );
   or MGM_BG_4( X, X_row1, X_row2, X_row3 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_MUX2_ECO_2_func( X, D0, D1, S );
   input D0, D1, S;
   output X;
   wire X_row1;
   and MGM_BG_0( X_row1, D0, D1 );
   wire S_inv_for_SAEDRVT14_MUX2_ECO_2;
   not MGM_BG_1( S_inv_for_SAEDRVT14_MUX2_ECO_2, S );
   wire X_row2;
   and MGM_BG_2( X_row2, S_inv_for_SAEDRVT14_MUX2_ECO_2, D0 );
   wire X_row3;
   and MGM_BG_3( X_row3, D1, S );
   or MGM_BG_4( X, X_row1, X_row2, X_row3 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_MUX2_MM_0P5_func( X, D0, D1, S );
   input D0, D1, S;
   output X;
   wire X_row1;
   and MGM_BG_0( X_row1, D0, D1 );
   wire S_inv_for_SAEDRVT14_MUX2_MM_0P5;
   not MGM_BG_1( S_inv_for_SAEDRVT14_MUX2_MM_0P5, S );
   wire X_row2;
   and MGM_BG_2( X_row2, S_inv_for_SAEDRVT14_MUX2_MM_0P5, D0 );
   wire X_row3;
   and MGM_BG_3( X_row3, D1, S );
   or MGM_BG_4( X, X_row1, X_row2, X_row3 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_MUX2_MM_1_func( X, D0, D1, S );
   input D0, D1, S;
   output X;
   wire X_row1;
   and MGM_BG_0( X_row1, D0, D1 );
   wire S_inv_for_SAEDRVT14_MUX2_MM_1;
   not MGM_BG_1( S_inv_for_SAEDRVT14_MUX2_MM_1, S );
   wire X_row2;
   and MGM_BG_2( X_row2, S_inv_for_SAEDRVT14_MUX2_MM_1, D0 );
   wire X_row3;
   and MGM_BG_3( X_row3, D1, S );
   or MGM_BG_4( X, X_row1, X_row2, X_row3 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_MUX2_MM_2_func( X, D0, D1, S );
   input D0, D1, S;
   output X;
   wire X_row1;
   and MGM_BG_0( X_row1, D0, D1 );
   wire S_inv_for_SAEDRVT14_MUX2_MM_2;
   not MGM_BG_1( S_inv_for_SAEDRVT14_MUX2_MM_2, S );
   wire X_row2;
   and MGM_BG_2( X_row2, S_inv_for_SAEDRVT14_MUX2_MM_2, D0 );
   wire X_row3;
   and MGM_BG_3( X_row3, D1, S );
   or MGM_BG_4( X, X_row1, X_row2, X_row3 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_MUX2_MM_4_func( X, D0, D1, S );
   input D0, D1, S;
   output X;
   wire X_row1;
   and MGM_BG_0( X_row1, D0, D1 );
   wire S_inv_for_SAEDRVT14_MUX2_MM_4;
   not MGM_BG_1( S_inv_for_SAEDRVT14_MUX2_MM_4, S );
   wire X_row2;
   and MGM_BG_2( X_row2, S_inv_for_SAEDRVT14_MUX2_MM_4, D0 );
   wire X_row3;
   and MGM_BG_3( X_row3, D1, S );
   or MGM_BG_4( X, X_row1, X_row2, X_row3 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_MUX2_U_0P5_func( X, D0, D1, S );
   input D0, D1, S;
   output X;
   wire X_row1;
   and MGM_BG_0( X_row1, D0, D1 );
   wire S_inv_for_SAEDRVT14_MUX2_U_0P5;
   not MGM_BG_1( S_inv_for_SAEDRVT14_MUX2_U_0P5, S );
   wire X_row2;
   and MGM_BG_2( X_row2, S_inv_for_SAEDRVT14_MUX2_U_0P5, D0 );
   wire X_row3;
   and MGM_BG_3( X_row3, D1, S );
   or MGM_BG_4( X, X_row1, X_row2, X_row3 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_MUX3_V1M_0P5_func( X, D0, D1, D2, S0, S1 );
   input D0, D1, D2, S0, S1;
   output X;
   wire S0_inv_for_SAEDRVT14_MUX3_V1M_0P5;
   not MGM_BG_0( S0_inv_for_SAEDRVT14_MUX3_V1M_0P5, S0 );
   wire S1_inv_for_SAEDRVT14_MUX3_V1M_0P5;
   not MGM_BG_1( S1_inv_for_SAEDRVT14_MUX3_V1M_0P5, S1 );
   wire X_row1;
   and MGM_BG_2( X_row1, S0_inv_for_SAEDRVT14_MUX3_V1M_0P5, S1_inv_for_SAEDRVT14_MUX3_V1M_0P5, D0 );
   wire X_row2;
   and MGM_BG_3( X_row2, S1_inv_for_SAEDRVT14_MUX3_V1M_0P5, D1, S0 );
   wire X_row3;
   and MGM_BG_4( X_row3, D2, S1 );
   or MGM_BG_5( X, X_row1, X_row2, X_row3 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_MUX3_V1M_1_func( X, D0, D1, D2, S0, S1 );
   input D0, D1, D2, S0, S1;
   output X;
   wire S0_inv_for_SAEDRVT14_MUX3_V1M_1;
   not MGM_BG_0( S0_inv_for_SAEDRVT14_MUX3_V1M_1, S0 );
   wire S1_inv_for_SAEDRVT14_MUX3_V1M_1;
   not MGM_BG_1( S1_inv_for_SAEDRVT14_MUX3_V1M_1, S1 );
   wire X_row1;
   and MGM_BG_2( X_row1, S0_inv_for_SAEDRVT14_MUX3_V1M_1, S1_inv_for_SAEDRVT14_MUX3_V1M_1, D0 );
   wire X_row2;
   and MGM_BG_3( X_row2, S1_inv_for_SAEDRVT14_MUX3_V1M_1, D1, S0 );
   wire X_row3;
   and MGM_BG_4( X_row3, D2, S1 );
   or MGM_BG_5( X, X_row1, X_row2, X_row3 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_MUX3_V1M_2_func( X, D0, D1, D2, S0, S1 );
   input D0, D1, D2, S0, S1;
   output X;
   wire S0_inv_for_SAEDRVT14_MUX3_V1M_2;
   not MGM_BG_0( S0_inv_for_SAEDRVT14_MUX3_V1M_2, S0 );
   wire S1_inv_for_SAEDRVT14_MUX3_V1M_2;
   not MGM_BG_1( S1_inv_for_SAEDRVT14_MUX3_V1M_2, S1 );
   wire X_row1;
   and MGM_BG_2( X_row1, S0_inv_for_SAEDRVT14_MUX3_V1M_2, S1_inv_for_SAEDRVT14_MUX3_V1M_2, D0 );
   wire X_row2;
   and MGM_BG_3( X_row2, S1_inv_for_SAEDRVT14_MUX3_V1M_2, D1, S0 );
   wire X_row3;
   and MGM_BG_4( X_row3, D2, S1 );
   or MGM_BG_5( X, X_row1, X_row2, X_row3 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_MUX3_V1M_4_func( X, D0, D1, D2, S0, S1 );
   input D0, D1, D2, S0, S1;
   output X;
   wire S0_inv_for_SAEDRVT14_MUX3_V1M_4;
   not MGM_BG_0( S0_inv_for_SAEDRVT14_MUX3_V1M_4, S0 );
   wire S1_inv_for_SAEDRVT14_MUX3_V1M_4;
   not MGM_BG_1( S1_inv_for_SAEDRVT14_MUX3_V1M_4, S1 );
   wire X_row1;
   and MGM_BG_2( X_row1, S0_inv_for_SAEDRVT14_MUX3_V1M_4, S1_inv_for_SAEDRVT14_MUX3_V1M_4, D0 );
   wire X_row2;
   and MGM_BG_3( X_row2, S1_inv_for_SAEDRVT14_MUX3_V1M_4, D1, S0 );
   wire X_row3;
   and MGM_BG_4( X_row3, D2, S1 );
   or MGM_BG_5( X, X_row1, X_row2, X_row3 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_MUX4_V1M_1_func( S1, D1, D0, D2, S0, D3, X );
   input D0, D1, D2, D3, S0, S1;
   output X;
   wire S0_inv_for_SAEDRVT14_MUX4_V1M_1;
   not MGM_BG_0( S0_inv_for_SAEDRVT14_MUX4_V1M_1, S0 );
   wire S1_inv_for_SAEDRVT14_MUX4_V1M_1;
   not MGM_BG_1( S1_inv_for_SAEDRVT14_MUX4_V1M_1, S1 );
   wire X_row1;
   and MGM_BG_2( X_row1, S0_inv_for_SAEDRVT14_MUX4_V1M_1, S1_inv_for_SAEDRVT14_MUX4_V1M_1, D0 );
   wire X_row2;
   and MGM_BG_3( X_row2, S1_inv_for_SAEDRVT14_MUX4_V1M_1, D1, S0 );
   wire X_row3;
   and MGM_BG_4( X_row3, S0_inv_for_SAEDRVT14_MUX4_V1M_1, D2, S1 );
   wire X_row4;
   and MGM_BG_5( X_row4, D3, S0, S1 );
   or MGM_BG_6( X, X_row1, X_row2, X_row3, X_row4 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_MUX4_V1M_2_func( X, D0, D1, D2, D3, S0, S1 );
   input D0, D1, D2, D3, S0, S1;
   output X;
   wire S0_inv_for_SAEDRVT14_MUX4_V1M_2;
   not MGM_BG_0( S0_inv_for_SAEDRVT14_MUX4_V1M_2, S0 );
   wire S1_inv_for_SAEDRVT14_MUX4_V1M_2;
   not MGM_BG_1( S1_inv_for_SAEDRVT14_MUX4_V1M_2, S1 );
   wire X_row1;
   and MGM_BG_2( X_row1, S0_inv_for_SAEDRVT14_MUX4_V1M_2, S1_inv_for_SAEDRVT14_MUX4_V1M_2, D0 );
   wire X_row2;
   and MGM_BG_3( X_row2, S1_inv_for_SAEDRVT14_MUX4_V1M_2, D1, S0 );
   wire X_row3;
   and MGM_BG_4( X_row3, S0_inv_for_SAEDRVT14_MUX4_V1M_2, D2, S1 );
   wire X_row4;
   and MGM_BG_5( X_row4, D3, S0, S1 );
   or MGM_BG_6( X, X_row1, X_row2, X_row3, X_row4 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_MUX4_V1M_4_func( X, D0, D1, D2, D3, S0, S1 );
   input D0, D1, D2, D3, S0, S1;
   output X;
   wire S0_inv_for_SAEDRVT14_MUX4_V1M_4;
   not MGM_BG_0( S0_inv_for_SAEDRVT14_MUX4_V1M_4, S0 );
   wire S1_inv_for_SAEDRVT14_MUX4_V1M_4;
   not MGM_BG_1( S1_inv_for_SAEDRVT14_MUX4_V1M_4, S1 );
   wire X_row1;
   and MGM_BG_2( X_row1, S0_inv_for_SAEDRVT14_MUX4_V1M_4, S1_inv_for_SAEDRVT14_MUX4_V1M_4, D0 );
   wire X_row2;
   and MGM_BG_3( X_row2, S1_inv_for_SAEDRVT14_MUX4_V1M_4, D1, S0 );
   wire X_row3;
   and MGM_BG_4( X_row3, S0_inv_for_SAEDRVT14_MUX4_V1M_4, D2, S1 );
   wire X_row4;
   and MGM_BG_5( X_row4, D3, S0, S1 );
   or MGM_BG_6( X, X_row1, X_row2, X_row3, X_row4 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_MUX4_V1U_0P5_func( X, D0, D1, D2, D3, S0, S1 );
   input D0, D1, D2, D3, S0, S1;
   output X;
   wire S0_inv_for_SAEDRVT14_MUX4_V1U_0P5;
   not MGM_BG_0( S0_inv_for_SAEDRVT14_MUX4_V1U_0P5, S0 );
   wire S1_inv_for_SAEDRVT14_MUX4_V1U_0P5;
   not MGM_BG_1( S1_inv_for_SAEDRVT14_MUX4_V1U_0P5, S1 );
   wire X_row1;
   and MGM_BG_2( X_row1, S0_inv_for_SAEDRVT14_MUX4_V1U_0P5, S1_inv_for_SAEDRVT14_MUX4_V1U_0P5, D0 );
   wire X_row2;
   and MGM_BG_3( X_row2, S1_inv_for_SAEDRVT14_MUX4_V1U_0P5, D1, S0 );
   wire X_row3;
   and MGM_BG_4( X_row3, S0_inv_for_SAEDRVT14_MUX4_V1U_0P5, D2, S1 );
   wire X_row4;
   and MGM_BG_5( X_row4, D3, S0, S1 );
   or MGM_BG_6( X, X_row1, X_row2, X_row3, X_row4 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_MUXI2_0P5_func( X, D0, D1, S );
   input D0, D1, S;
   output X;
   wire D0_inv_for_SAEDRVT14_MUXI2_0P5;
   not MGM_BG_0( D0_inv_for_SAEDRVT14_MUXI2_0P5, D0 );
   wire D1_inv_for_SAEDRVT14_MUXI2_0P5;
   not MGM_BG_1( D1_inv_for_SAEDRVT14_MUXI2_0P5, D1 );
   wire X_row1;
   and MGM_BG_2( X_row1, D0_inv_for_SAEDRVT14_MUXI2_0P5, D1_inv_for_SAEDRVT14_MUXI2_0P5 );
   wire S_inv_for_SAEDRVT14_MUXI2_0P5;
   not MGM_BG_3( S_inv_for_SAEDRVT14_MUXI2_0P5, S );
   wire X_row2;
   and MGM_BG_4( X_row2, D0_inv_for_SAEDRVT14_MUXI2_0P5, S_inv_for_SAEDRVT14_MUXI2_0P5 );
   wire X_row3;
   and MGM_BG_5( X_row3, D1_inv_for_SAEDRVT14_MUXI2_0P5, S );
   or MGM_BG_6( X, X_row1, X_row2, X_row3 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_MUXI2_1_func( X, D0, D1, S );
   input D0, D1, S;
   output X;
   wire D0_inv_for_SAEDRVT14_MUXI2_1;
   not MGM_BG_0( D0_inv_for_SAEDRVT14_MUXI2_1, D0 );
   wire D1_inv_for_SAEDRVT14_MUXI2_1;
   not MGM_BG_1( D1_inv_for_SAEDRVT14_MUXI2_1, D1 );
   wire X_row1;
   and MGM_BG_2( X_row1, D0_inv_for_SAEDRVT14_MUXI2_1, D1_inv_for_SAEDRVT14_MUXI2_1 );
   wire S_inv_for_SAEDRVT14_MUXI2_1;
   not MGM_BG_3( S_inv_for_SAEDRVT14_MUXI2_1, S );
   wire X_row2;
   and MGM_BG_4( X_row2, D0_inv_for_SAEDRVT14_MUXI2_1, S_inv_for_SAEDRVT14_MUXI2_1 );
   wire X_row3;
   and MGM_BG_5( X_row3, D1_inv_for_SAEDRVT14_MUXI2_1, S );
   or MGM_BG_6( X, X_row1, X_row2, X_row3 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_MUXI2_2_func( X, D0, D1, S );
   input D0, D1, S;
   output X;
   wire D0_inv_for_SAEDRVT14_MUXI2_2;
   not MGM_BG_0( D0_inv_for_SAEDRVT14_MUXI2_2, D0 );
   wire D1_inv_for_SAEDRVT14_MUXI2_2;
   not MGM_BG_1( D1_inv_for_SAEDRVT14_MUXI2_2, D1 );
   wire X_row1;
   and MGM_BG_2( X_row1, D0_inv_for_SAEDRVT14_MUXI2_2, D1_inv_for_SAEDRVT14_MUXI2_2 );
   wire S_inv_for_SAEDRVT14_MUXI2_2;
   not MGM_BG_3( S_inv_for_SAEDRVT14_MUXI2_2, S );
   wire X_row2;
   and MGM_BG_4( X_row2, D0_inv_for_SAEDRVT14_MUXI2_2, S_inv_for_SAEDRVT14_MUXI2_2 );
   wire X_row3;
   and MGM_BG_5( X_row3, D1_inv_for_SAEDRVT14_MUXI2_2, S );
   or MGM_BG_6( X, X_row1, X_row2, X_row3 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_MUXI2_4_func( X, D0, D1, S );
   input D0, D1, S;
   output X;
   wire D0_inv_for_SAEDRVT14_MUXI2_4;
   not MGM_BG_0( D0_inv_for_SAEDRVT14_MUXI2_4, D0 );
   wire D1_inv_for_SAEDRVT14_MUXI2_4;
   not MGM_BG_1( D1_inv_for_SAEDRVT14_MUXI2_4, D1 );
   wire X_row1;
   and MGM_BG_2( X_row1, D0_inv_for_SAEDRVT14_MUXI2_4, D1_inv_for_SAEDRVT14_MUXI2_4 );
   wire S_inv_for_SAEDRVT14_MUXI2_4;
   not MGM_BG_3( S_inv_for_SAEDRVT14_MUXI2_4, S );
   wire X_row2;
   and MGM_BG_4( X_row2, D0_inv_for_SAEDRVT14_MUXI2_4, S_inv_for_SAEDRVT14_MUXI2_4 );
   wire X_row3;
   and MGM_BG_5( X_row3, D1_inv_for_SAEDRVT14_MUXI2_4, S );
   or MGM_BG_6( X, X_row1, X_row2, X_row3 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_MUXI2_B_1_func( X, D0, D1, S );
   input D0, D1, S;
   output X;
   wire D0_inv_for_SAEDRVT14_MUXI2_B_1;
   not MGM_BG_0( D0_inv_for_SAEDRVT14_MUXI2_B_1, D0 );
   wire D1_inv_for_SAEDRVT14_MUXI2_B_1;
   not MGM_BG_1( D1_inv_for_SAEDRVT14_MUXI2_B_1, D1 );
   wire X_row1;
   and MGM_BG_2( X_row1, D0_inv_for_SAEDRVT14_MUXI2_B_1, D1_inv_for_SAEDRVT14_MUXI2_B_1 );
   wire S_inv_for_SAEDRVT14_MUXI2_B_1;
   not MGM_BG_3( S_inv_for_SAEDRVT14_MUXI2_B_1, S );
   wire X_row2;
   and MGM_BG_4( X_row2, D0_inv_for_SAEDRVT14_MUXI2_B_1, S_inv_for_SAEDRVT14_MUXI2_B_1 );
   wire X_row3;
   and MGM_BG_5( X_row3, D1_inv_for_SAEDRVT14_MUXI2_B_1, S );
   or MGM_BG_6( X, X_row1, X_row2, X_row3 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_MUXI2_ECO_1_func( X, D0, D1, S );
   input D0, D1, S;
   output X;
   wire D0_inv_for_SAEDRVT14_MUXI2_ECO_1;
   not MGM_BG_0( D0_inv_for_SAEDRVT14_MUXI2_ECO_1, D0 );
   wire D1_inv_for_SAEDRVT14_MUXI2_ECO_1;
   not MGM_BG_1( D1_inv_for_SAEDRVT14_MUXI2_ECO_1, D1 );
   wire X_row1;
   and MGM_BG_2( X_row1, D0_inv_for_SAEDRVT14_MUXI2_ECO_1, D1_inv_for_SAEDRVT14_MUXI2_ECO_1 );
   wire S_inv_for_SAEDRVT14_MUXI2_ECO_1;
   not MGM_BG_3( S_inv_for_SAEDRVT14_MUXI2_ECO_1, S );
   wire X_row2;
   and MGM_BG_4( X_row2, D0_inv_for_SAEDRVT14_MUXI2_ECO_1, S_inv_for_SAEDRVT14_MUXI2_ECO_1 );
   wire X_row3;
   and MGM_BG_5( X_row3, D1_inv_for_SAEDRVT14_MUXI2_ECO_1, S );
   or MGM_BG_6( X, X_row1, X_row2, X_row3 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_MUXI2_ECO_2_func( X, D0, D1, S );
   input D0, D1, S;
   output X;
   wire D0_inv_for_SAEDRVT14_MUXI2_ECO_2;
   not MGM_BG_0( D0_inv_for_SAEDRVT14_MUXI2_ECO_2, D0 );
   wire D1_inv_for_SAEDRVT14_MUXI2_ECO_2;
   not MGM_BG_1( D1_inv_for_SAEDRVT14_MUXI2_ECO_2, D1 );
   wire X_row1;
   and MGM_BG_2( X_row1, D0_inv_for_SAEDRVT14_MUXI2_ECO_2, D1_inv_for_SAEDRVT14_MUXI2_ECO_2 );
   wire S_inv_for_SAEDRVT14_MUXI2_ECO_2;
   not MGM_BG_3( S_inv_for_SAEDRVT14_MUXI2_ECO_2, S );
   wire X_row2;
   and MGM_BG_4( X_row2, D0_inv_for_SAEDRVT14_MUXI2_ECO_2, S_inv_for_SAEDRVT14_MUXI2_ECO_2 );
   wire X_row3;
   and MGM_BG_5( X_row3, D1_inv_for_SAEDRVT14_MUXI2_ECO_2, S );
   or MGM_BG_6( X, X_row1, X_row2, X_row3 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_MUXI2_U_0P5_func( X, D0, D1, S );
   input D0, D1, S;
   output X;
   wire D0_inv_for_SAEDRVT14_MUXI2_U_0P5;
   not MGM_BG_0( D0_inv_for_SAEDRVT14_MUXI2_U_0P5, D0 );
   wire D1_inv_for_SAEDRVT14_MUXI2_U_0P5;
   not MGM_BG_1( D1_inv_for_SAEDRVT14_MUXI2_U_0P5, D1 );
   wire X_row1;
   and MGM_BG_2( X_row1, D0_inv_for_SAEDRVT14_MUXI2_U_0P5, D1_inv_for_SAEDRVT14_MUXI2_U_0P5 );
   wire S_inv_for_SAEDRVT14_MUXI2_U_0P5;
   not MGM_BG_3( S_inv_for_SAEDRVT14_MUXI2_U_0P5, S );
   wire X_row2;
   and MGM_BG_4( X_row2, D0_inv_for_SAEDRVT14_MUXI2_U_0P5, S_inv_for_SAEDRVT14_MUXI2_U_0P5 );
   wire X_row3;
   and MGM_BG_5( X_row3, D1_inv_for_SAEDRVT14_MUXI2_U_0P5, S );
   or MGM_BG_6( X, X_row1, X_row2, X_row3 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_MUXI3_0P5_func( X, D0, D1, D2, S0, S1 );
   input D0, D1, D2, S0, S1;
   output X;
   wire D0_inv_for_SAEDRVT14_MUXI3_0P5;
   not MGM_BG_0( D0_inv_for_SAEDRVT14_MUXI3_0P5, D0 );
   wire S0_inv_for_SAEDRVT14_MUXI3_0P5;
   not MGM_BG_1( S0_inv_for_SAEDRVT14_MUXI3_0P5, S0 );
   wire S1_inv_for_SAEDRVT14_MUXI3_0P5;
   not MGM_BG_2( S1_inv_for_SAEDRVT14_MUXI3_0P5, S1 );
   wire X_row1;
   and MGM_BG_3( X_row1, D0_inv_for_SAEDRVT14_MUXI3_0P5, S0_inv_for_SAEDRVT14_MUXI3_0P5, S1_inv_for_SAEDRVT14_MUXI3_0P5 );
   wire D1_inv_for_SAEDRVT14_MUXI3_0P5;
   not MGM_BG_4( D1_inv_for_SAEDRVT14_MUXI3_0P5, D1 );
   wire X_row2;
   and MGM_BG_5( X_row2, D1_inv_for_SAEDRVT14_MUXI3_0P5, S1_inv_for_SAEDRVT14_MUXI3_0P5, S0 );
   wire D2_inv_for_SAEDRVT14_MUXI3_0P5;
   not MGM_BG_6( D2_inv_for_SAEDRVT14_MUXI3_0P5, D2 );
   wire X_row3;
   and MGM_BG_7( X_row3, D2_inv_for_SAEDRVT14_MUXI3_0P5, S1 );
   or MGM_BG_8( X, X_row1, X_row2, X_row3 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_MUXI3_1_func( X, D0, D1, D2, S0, S1 );
   input D0, D1, D2, S0, S1;
   output X;
   wire D0_inv_for_SAEDRVT14_MUXI3_1;
   not MGM_BG_0( D0_inv_for_SAEDRVT14_MUXI3_1, D0 );
   wire S0_inv_for_SAEDRVT14_MUXI3_1;
   not MGM_BG_1( S0_inv_for_SAEDRVT14_MUXI3_1, S0 );
   wire S1_inv_for_SAEDRVT14_MUXI3_1;
   not MGM_BG_2( S1_inv_for_SAEDRVT14_MUXI3_1, S1 );
   wire X_row1;
   and MGM_BG_3( X_row1, D0_inv_for_SAEDRVT14_MUXI3_1, S0_inv_for_SAEDRVT14_MUXI3_1, S1_inv_for_SAEDRVT14_MUXI3_1 );
   wire D1_inv_for_SAEDRVT14_MUXI3_1;
   not MGM_BG_4( D1_inv_for_SAEDRVT14_MUXI3_1, D1 );
   wire X_row2;
   and MGM_BG_5( X_row2, D1_inv_for_SAEDRVT14_MUXI3_1, S1_inv_for_SAEDRVT14_MUXI3_1, S0 );
   wire D2_inv_for_SAEDRVT14_MUXI3_1;
   not MGM_BG_6( D2_inv_for_SAEDRVT14_MUXI3_1, D2 );
   wire X_row3;
   and MGM_BG_7( X_row3, D2_inv_for_SAEDRVT14_MUXI3_1, S1 );
   or MGM_BG_8( X, X_row1, X_row2, X_row3 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_MUXI3_2_func( X, D0, D1, D2, S0, S1 );
   input D0, D1, D2, S0, S1;
   output X;
   wire D0_inv_for_SAEDRVT14_MUXI3_2;
   not MGM_BG_0( D0_inv_for_SAEDRVT14_MUXI3_2, D0 );
   wire S0_inv_for_SAEDRVT14_MUXI3_2;
   not MGM_BG_1( S0_inv_for_SAEDRVT14_MUXI3_2, S0 );
   wire S1_inv_for_SAEDRVT14_MUXI3_2;
   not MGM_BG_2( S1_inv_for_SAEDRVT14_MUXI3_2, S1 );
   wire X_row1;
   and MGM_BG_3( X_row1, D0_inv_for_SAEDRVT14_MUXI3_2, S0_inv_for_SAEDRVT14_MUXI3_2, S1_inv_for_SAEDRVT14_MUXI3_2 );
   wire D1_inv_for_SAEDRVT14_MUXI3_2;
   not MGM_BG_4( D1_inv_for_SAEDRVT14_MUXI3_2, D1 );
   wire X_row2;
   and MGM_BG_5( X_row2, D1_inv_for_SAEDRVT14_MUXI3_2, S1_inv_for_SAEDRVT14_MUXI3_2, S0 );
   wire D2_inv_for_SAEDRVT14_MUXI3_2;
   not MGM_BG_6( D2_inv_for_SAEDRVT14_MUXI3_2, D2 );
   wire X_row3;
   and MGM_BG_7( X_row3, D2_inv_for_SAEDRVT14_MUXI3_2, S1 );
   or MGM_BG_8( X, X_row1, X_row2, X_row3 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_MUXI3_4_func( X, D0, D1, D2, S0, S1 );
   input D0, D1, D2, S0, S1;
   output X;
   wire D0_inv_for_SAEDRVT14_MUXI3_4;
   not MGM_BG_0( D0_inv_for_SAEDRVT14_MUXI3_4, D0 );
   wire S0_inv_for_SAEDRVT14_MUXI3_4;
   not MGM_BG_1( S0_inv_for_SAEDRVT14_MUXI3_4, S0 );
   wire S1_inv_for_SAEDRVT14_MUXI3_4;
   not MGM_BG_2( S1_inv_for_SAEDRVT14_MUXI3_4, S1 );
   wire X_row1;
   and MGM_BG_3( X_row1, D0_inv_for_SAEDRVT14_MUXI3_4, S0_inv_for_SAEDRVT14_MUXI3_4, S1_inv_for_SAEDRVT14_MUXI3_4 );
   wire D1_inv_for_SAEDRVT14_MUXI3_4;
   not MGM_BG_4( D1_inv_for_SAEDRVT14_MUXI3_4, D1 );
   wire X_row2;
   and MGM_BG_5( X_row2, D1_inv_for_SAEDRVT14_MUXI3_4, S1_inv_for_SAEDRVT14_MUXI3_4, S0 );
   wire D2_inv_for_SAEDRVT14_MUXI3_4;
   not MGM_BG_6( D2_inv_for_SAEDRVT14_MUXI3_4, D2 );
   wire X_row3;
   and MGM_BG_7( X_row3, D2_inv_for_SAEDRVT14_MUXI3_4, S1 );
   or MGM_BG_8( X, X_row1, X_row2, X_row3 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_MUXI4_2_func( S1, D3, D2, D1, S0, D0, X );
   input D0, D1, D2, D3, S0, S1;
   output X;
   wire D0_inv_for_SAEDRVT14_MUXI4_2;
   not MGM_BG_0( D0_inv_for_SAEDRVT14_MUXI4_2, D0 );
   wire S0_inv_for_SAEDRVT14_MUXI4_2;
   not MGM_BG_1( S0_inv_for_SAEDRVT14_MUXI4_2, S0 );
   wire S1_inv_for_SAEDRVT14_MUXI4_2;
   not MGM_BG_2( S1_inv_for_SAEDRVT14_MUXI4_2, S1 );
   wire X_row1;
   and MGM_BG_3( X_row1, D0_inv_for_SAEDRVT14_MUXI4_2, S0_inv_for_SAEDRVT14_MUXI4_2, S1_inv_for_SAEDRVT14_MUXI4_2 );
   wire D1_inv_for_SAEDRVT14_MUXI4_2;
   not MGM_BG_4( D1_inv_for_SAEDRVT14_MUXI4_2, D1 );
   wire X_row2;
   and MGM_BG_5( X_row2, D1_inv_for_SAEDRVT14_MUXI4_2, S1_inv_for_SAEDRVT14_MUXI4_2, S0 );
   wire D2_inv_for_SAEDRVT14_MUXI4_2;
   not MGM_BG_6( D2_inv_for_SAEDRVT14_MUXI4_2, D2 );
   wire X_row3;
   and MGM_BG_7( X_row3, D2_inv_for_SAEDRVT14_MUXI4_2, S0_inv_for_SAEDRVT14_MUXI4_2, S1 );
   wire D3_inv_for_SAEDRVT14_MUXI4_2;
   not MGM_BG_8( D3_inv_for_SAEDRVT14_MUXI4_2, D3 );
   wire X_row4;
   and MGM_BG_9( X_row4, D3_inv_for_SAEDRVT14_MUXI4_2, S0, S1 );
   or MGM_BG_10( X, X_row1, X_row2, X_row3, X_row4 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_MUXI4_4_func( X, D0, D1, D2, D3, S0, S1 );
   input D0, D1, D2, D3, S0, S1;
   output X;
   wire D0_inv_for_SAEDRVT14_MUXI4_4;
   not MGM_BG_0( D0_inv_for_SAEDRVT14_MUXI4_4, D0 );
   wire S0_inv_for_SAEDRVT14_MUXI4_4;
   not MGM_BG_1( S0_inv_for_SAEDRVT14_MUXI4_4, S0 );
   wire S1_inv_for_SAEDRVT14_MUXI4_4;
   not MGM_BG_2( S1_inv_for_SAEDRVT14_MUXI4_4, S1 );
   wire X_row1;
   and MGM_BG_3( X_row1, D0_inv_for_SAEDRVT14_MUXI4_4, S0_inv_for_SAEDRVT14_MUXI4_4, S1_inv_for_SAEDRVT14_MUXI4_4 );
   wire D1_inv_for_SAEDRVT14_MUXI4_4;
   not MGM_BG_4( D1_inv_for_SAEDRVT14_MUXI4_4, D1 );
   wire X_row2;
   and MGM_BG_5( X_row2, D1_inv_for_SAEDRVT14_MUXI4_4, S1_inv_for_SAEDRVT14_MUXI4_4, S0 );
   wire D2_inv_for_SAEDRVT14_MUXI4_4;
   not MGM_BG_6( D2_inv_for_SAEDRVT14_MUXI4_4, D2 );
   wire X_row3;
   and MGM_BG_7( X_row3, D2_inv_for_SAEDRVT14_MUXI4_4, S0_inv_for_SAEDRVT14_MUXI4_4, S1 );
   wire D3_inv_for_SAEDRVT14_MUXI4_4;
   not MGM_BG_8( D3_inv_for_SAEDRVT14_MUXI4_4, D3 );
   wire X_row4;
   and MGM_BG_9( X_row4, D3_inv_for_SAEDRVT14_MUXI4_4, S0, S1 );
   or MGM_BG_10( X, X_row1, X_row2, X_row3, X_row4 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_MUXI4_U_0P5_func( X, D0, D1, D2, D3, S0, S1 );
   input D0, D1, D2, D3, S0, S1;
   output X;
   wire D0_inv_for_SAEDRVT14_MUXI4_U_0P5;
   not MGM_BG_0( D0_inv_for_SAEDRVT14_MUXI4_U_0P5, D0 );
   wire S0_inv_for_SAEDRVT14_MUXI4_U_0P5;
   not MGM_BG_1( S0_inv_for_SAEDRVT14_MUXI4_U_0P5, S0 );
   wire S1_inv_for_SAEDRVT14_MUXI4_U_0P5;
   not MGM_BG_2( S1_inv_for_SAEDRVT14_MUXI4_U_0P5, S1 );
   wire X_row1;
   and MGM_BG_3( X_row1, D0_inv_for_SAEDRVT14_MUXI4_U_0P5, S0_inv_for_SAEDRVT14_MUXI4_U_0P5, S1_inv_for_SAEDRVT14_MUXI4_U_0P5 );
   wire D1_inv_for_SAEDRVT14_MUXI4_U_0P5;
   not MGM_BG_4( D1_inv_for_SAEDRVT14_MUXI4_U_0P5, D1 );
   wire X_row2;
   and MGM_BG_5( X_row2, D1_inv_for_SAEDRVT14_MUXI4_U_0P5, S1_inv_for_SAEDRVT14_MUXI4_U_0P5, S0 );
   wire D2_inv_for_SAEDRVT14_MUXI4_U_0P5;
   not MGM_BG_6( D2_inv_for_SAEDRVT14_MUXI4_U_0P5, D2 );
   wire X_row3;
   and MGM_BG_7( X_row3, D2_inv_for_SAEDRVT14_MUXI4_U_0P5, S0_inv_for_SAEDRVT14_MUXI4_U_0P5, S1 );
   wire D3_inv_for_SAEDRVT14_MUXI4_U_0P5;
   not MGM_BG_8( D3_inv_for_SAEDRVT14_MUXI4_U_0P5, D3 );
   wire X_row4;
   and MGM_BG_9( X_row4, D3_inv_for_SAEDRVT14_MUXI4_U_0P5, S0, S1 );
   or MGM_BG_10( X, X_row1, X_row2, X_row3, X_row4 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_ND2B_0P75_func( X, A, B );
   input A, B;
   output X;
   wire B_inv_for_SAEDRVT14_ND2B_0P75;
   not MGM_BG_0( B_inv_for_SAEDRVT14_ND2B_0P75, B );
   or MGM_BG_1( X, A, B_inv_for_SAEDRVT14_ND2B_0P75 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_ND2B_1_func( X, A, B );
   input A, B;
   output X;
   wire B_inv_for_SAEDRVT14_ND2B_1;
   not MGM_BG_0( B_inv_for_SAEDRVT14_ND2B_1, B );
   or MGM_BG_1( X, A, B_inv_for_SAEDRVT14_ND2B_1 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_ND2B_1P5_func( X, A, B );
   input A, B;
   output X;
   wire B_inv_for_SAEDRVT14_ND2B_1P5;
   not MGM_BG_0( B_inv_for_SAEDRVT14_ND2B_1P5, B );
   or MGM_BG_1( X, A, B_inv_for_SAEDRVT14_ND2B_1P5 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_ND2B_2_func( X, A, B );
   input A, B;
   output X;
   wire B_inv_for_SAEDRVT14_ND2B_2;
   not MGM_BG_0( B_inv_for_SAEDRVT14_ND2B_2, B );
   or MGM_BG_1( X, A, B_inv_for_SAEDRVT14_ND2B_2 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_ND2B_4_func( X, A, B );
   input A, B;
   output X;
   wire B_inv_for_SAEDRVT14_ND2B_4;
   not MGM_BG_0( B_inv_for_SAEDRVT14_ND2B_4, B );
   or MGM_BG_1( X, A, B_inv_for_SAEDRVT14_ND2B_4 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_ND2B_U_0P5_func( X, A, B );
   input A, B;
   output X;
   wire B_inv_for_SAEDRVT14_ND2B_U_0P5;
   not MGM_BG_0( B_inv_for_SAEDRVT14_ND2B_U_0P5, B );
   or MGM_BG_1( X, A, B_inv_for_SAEDRVT14_ND2B_U_0P5 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_ND2_0P5_func( X, A1, A2 );
   input A1, A2;
   output X;
   wire A1_inv_for_SAEDRVT14_ND2_0P5;
   not MGM_BG_0( A1_inv_for_SAEDRVT14_ND2_0P5, A1 );
   wire A2_inv_for_SAEDRVT14_ND2_0P5;
   not MGM_BG_1( A2_inv_for_SAEDRVT14_ND2_0P5, A2 );
   or MGM_BG_2( X, A1_inv_for_SAEDRVT14_ND2_0P5, A2_inv_for_SAEDRVT14_ND2_0P5 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_ND2_1_func( X, A1, A2 );
   input A1, A2;
   output X;
   wire A1_inv_for_SAEDRVT14_ND2_1;
   not MGM_BG_0( A1_inv_for_SAEDRVT14_ND2_1, A1 );
   wire A2_inv_for_SAEDRVT14_ND2_1;
   not MGM_BG_1( A2_inv_for_SAEDRVT14_ND2_1, A2 );
   or MGM_BG_2( X, A1_inv_for_SAEDRVT14_ND2_1, A2_inv_for_SAEDRVT14_ND2_1 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_ND2_16_func( X, A1, A2 );
   input A1, A2;
   output X;
   wire A1_inv_for_SAEDRVT14_ND2_16;
   not MGM_BG_0( A1_inv_for_SAEDRVT14_ND2_16, A1 );
   wire A2_inv_for_SAEDRVT14_ND2_16;
   not MGM_BG_1( A2_inv_for_SAEDRVT14_ND2_16, A2 );
   or MGM_BG_2( X, A1_inv_for_SAEDRVT14_ND2_16, A2_inv_for_SAEDRVT14_ND2_16 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_ND2_1P5_func( X, A1, A2 );
   input A1, A2;
   output X;
   wire A1_inv_for_SAEDRVT14_ND2_1P5;
   not MGM_BG_0( A1_inv_for_SAEDRVT14_ND2_1P5, A1 );
   wire A2_inv_for_SAEDRVT14_ND2_1P5;
   not MGM_BG_1( A2_inv_for_SAEDRVT14_ND2_1P5, A2 );
   or MGM_BG_2( X, A1_inv_for_SAEDRVT14_ND2_1P5, A2_inv_for_SAEDRVT14_ND2_1P5 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_ND2_2_func( X, A1, A2 );
   input A1, A2;
   output X;
   wire A1_inv_for_SAEDRVT14_ND2_2;
   not MGM_BG_0( A1_inv_for_SAEDRVT14_ND2_2, A1 );
   wire A2_inv_for_SAEDRVT14_ND2_2;
   not MGM_BG_1( A2_inv_for_SAEDRVT14_ND2_2, A2 );
   or MGM_BG_2( X, A1_inv_for_SAEDRVT14_ND2_2, A2_inv_for_SAEDRVT14_ND2_2 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_ND2_3_func( X, A1, A2 );
   input A1, A2;
   output X;
   wire A1_inv_for_SAEDRVT14_ND2_3;
   not MGM_BG_0( A1_inv_for_SAEDRVT14_ND2_3, A1 );
   wire A2_inv_for_SAEDRVT14_ND2_3;
   not MGM_BG_1( A2_inv_for_SAEDRVT14_ND2_3, A2 );
   or MGM_BG_2( X, A1_inv_for_SAEDRVT14_ND2_3, A2_inv_for_SAEDRVT14_ND2_3 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_ND2_4_func( X, A1, A2 );
   input A1, A2;
   output X;
   wire A1_inv_for_SAEDRVT14_ND2_4;
   not MGM_BG_0( A1_inv_for_SAEDRVT14_ND2_4, A1 );
   wire A2_inv_for_SAEDRVT14_ND2_4;
   not MGM_BG_1( A2_inv_for_SAEDRVT14_ND2_4, A2 );
   or MGM_BG_2( X, A1_inv_for_SAEDRVT14_ND2_4, A2_inv_for_SAEDRVT14_ND2_4 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_ND2_5_func( X, A1, A2 );
   input A1, A2;
   output X;
   wire A1_inv_for_SAEDRVT14_ND2_5;
   not MGM_BG_0( A1_inv_for_SAEDRVT14_ND2_5, A1 );
   wire A2_inv_for_SAEDRVT14_ND2_5;
   not MGM_BG_1( A2_inv_for_SAEDRVT14_ND2_5, A2 );
   or MGM_BG_2( X, A1_inv_for_SAEDRVT14_ND2_5, A2_inv_for_SAEDRVT14_ND2_5 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_ND2_6_func( X, A1, A2 );
   input A1, A2;
   output X;
   wire A1_inv_for_SAEDRVT14_ND2_6;
   not MGM_BG_0( A1_inv_for_SAEDRVT14_ND2_6, A1 );
   wire A2_inv_for_SAEDRVT14_ND2_6;
   not MGM_BG_1( A2_inv_for_SAEDRVT14_ND2_6, A2 );
   or MGM_BG_2( X, A1_inv_for_SAEDRVT14_ND2_6, A2_inv_for_SAEDRVT14_ND2_6 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_ND2_8_func( X, A1, A2 );
   input A1, A2;
   output X;
   wire A1_inv_for_SAEDRVT14_ND2_8;
   not MGM_BG_0( A1_inv_for_SAEDRVT14_ND2_8, A1 );
   wire A2_inv_for_SAEDRVT14_ND2_8;
   not MGM_BG_1( A2_inv_for_SAEDRVT14_ND2_8, A2 );
   or MGM_BG_2( X, A1_inv_for_SAEDRVT14_ND2_8, A2_inv_for_SAEDRVT14_ND2_8 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_ND2_CDC_0P5_func( X, A1, A2 );
   input A1, A2;
   output X;
   wire A1_inv_for_SAEDRVT14_ND2_CDC_0P5;
   not MGM_BG_0( A1_inv_for_SAEDRVT14_ND2_CDC_0P5, A1 );
   wire A2_inv_for_SAEDRVT14_ND2_CDC_0P5;
   not MGM_BG_1( A2_inv_for_SAEDRVT14_ND2_CDC_0P5, A2 );
   or MGM_BG_2( X, A1_inv_for_SAEDRVT14_ND2_CDC_0P5, A2_inv_for_SAEDRVT14_ND2_CDC_0P5 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_ND2_CDC_1_func( X, A1, A2 );
   input A1, A2;
   output X;
   wire A1_inv_for_SAEDRVT14_ND2_CDC_1;
   not MGM_BG_0( A1_inv_for_SAEDRVT14_ND2_CDC_1, A1 );
   wire A2_inv_for_SAEDRVT14_ND2_CDC_1;
   not MGM_BG_1( A2_inv_for_SAEDRVT14_ND2_CDC_1, A2 );
   or MGM_BG_2( X, A1_inv_for_SAEDRVT14_ND2_CDC_1, A2_inv_for_SAEDRVT14_ND2_CDC_1 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_ND2_CDC_2_func( X, A1, A2 );
   input A1, A2;
   output X;
   wire A1_inv_for_SAEDRVT14_ND2_CDC_2;
   not MGM_BG_0( A1_inv_for_SAEDRVT14_ND2_CDC_2, A1 );
   wire A2_inv_for_SAEDRVT14_ND2_CDC_2;
   not MGM_BG_1( A2_inv_for_SAEDRVT14_ND2_CDC_2, A2 );
   or MGM_BG_2( X, A1_inv_for_SAEDRVT14_ND2_CDC_2, A2_inv_for_SAEDRVT14_ND2_CDC_2 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_ND2_CDC_4_func( X, A1, A2 );
   input A1, A2;
   output X;
   wire A1_inv_for_SAEDRVT14_ND2_CDC_4;
   not MGM_BG_0( A1_inv_for_SAEDRVT14_ND2_CDC_4, A1 );
   wire A2_inv_for_SAEDRVT14_ND2_CDC_4;
   not MGM_BG_1( A2_inv_for_SAEDRVT14_ND2_CDC_4, A2 );
   or MGM_BG_2( X, A1_inv_for_SAEDRVT14_ND2_CDC_4, A2_inv_for_SAEDRVT14_ND2_CDC_4 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_ND2_ECO_1_func( X, A1, A2 );
   input A1, A2;
   output X;
   wire A1_inv_for_SAEDRVT14_ND2_ECO_1;
   not MGM_BG_0( A1_inv_for_SAEDRVT14_ND2_ECO_1, A1 );
   wire A2_inv_for_SAEDRVT14_ND2_ECO_1;
   not MGM_BG_1( A2_inv_for_SAEDRVT14_ND2_ECO_1, A2 );
   or MGM_BG_2( X, A1_inv_for_SAEDRVT14_ND2_ECO_1, A2_inv_for_SAEDRVT14_ND2_ECO_1 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_ND2_ECO_2_func( X, A1, A2 );
   input A1, A2;
   output X;
   wire A1_inv_for_SAEDRVT14_ND2_ECO_2;
   not MGM_BG_0( A1_inv_for_SAEDRVT14_ND2_ECO_2, A1 );
   wire A2_inv_for_SAEDRVT14_ND2_ECO_2;
   not MGM_BG_1( A2_inv_for_SAEDRVT14_ND2_ECO_2, A2 );
   or MGM_BG_2( X, A1_inv_for_SAEDRVT14_ND2_ECO_2, A2_inv_for_SAEDRVT14_ND2_ECO_2 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_ND2_MM_0P5_func( X, A1, A2 );
   input A1, A2;
   output X;
   wire A1_inv_for_SAEDRVT14_ND2_MM_0P5;
   not MGM_BG_0( A1_inv_for_SAEDRVT14_ND2_MM_0P5, A1 );
   wire A2_inv_for_SAEDRVT14_ND2_MM_0P5;
   not MGM_BG_1( A2_inv_for_SAEDRVT14_ND2_MM_0P5, A2 );
   or MGM_BG_2( X, A1_inv_for_SAEDRVT14_ND2_MM_0P5, A2_inv_for_SAEDRVT14_ND2_MM_0P5 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_ND2_MM_1_func( X, A1, A2 );
   input A1, A2;
   output X;
   wire A1_inv_for_SAEDRVT14_ND2_MM_1;
   not MGM_BG_0( A1_inv_for_SAEDRVT14_ND2_MM_1, A1 );
   wire A2_inv_for_SAEDRVT14_ND2_MM_1;
   not MGM_BG_1( A2_inv_for_SAEDRVT14_ND2_MM_1, A2 );
   or MGM_BG_2( X, A1_inv_for_SAEDRVT14_ND2_MM_1, A2_inv_for_SAEDRVT14_ND2_MM_1 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_ND2_MM_10_func( X, A1, A2 );
   input A1, A2;
   output X;
   wire A1_inv_for_SAEDRVT14_ND2_MM_10;
   not MGM_BG_0( A1_inv_for_SAEDRVT14_ND2_MM_10, A1 );
   wire A2_inv_for_SAEDRVT14_ND2_MM_10;
   not MGM_BG_1( A2_inv_for_SAEDRVT14_ND2_MM_10, A2 );
   or MGM_BG_2( X, A1_inv_for_SAEDRVT14_ND2_MM_10, A2_inv_for_SAEDRVT14_ND2_MM_10 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_ND2_MM_12_func( X, A1, A2 );
   input A1, A2;
   output X;
   wire A1_inv_for_SAEDRVT14_ND2_MM_12;
   not MGM_BG_0( A1_inv_for_SAEDRVT14_ND2_MM_12, A1 );
   wire A2_inv_for_SAEDRVT14_ND2_MM_12;
   not MGM_BG_1( A2_inv_for_SAEDRVT14_ND2_MM_12, A2 );
   or MGM_BG_2( X, A1_inv_for_SAEDRVT14_ND2_MM_12, A2_inv_for_SAEDRVT14_ND2_MM_12 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_ND2_MM_16_func( X, A1, A2 );
   input A1, A2;
   output X;
   wire A1_inv_for_SAEDRVT14_ND2_MM_16;
   not MGM_BG_0( A1_inv_for_SAEDRVT14_ND2_MM_16, A1 );
   wire A2_inv_for_SAEDRVT14_ND2_MM_16;
   not MGM_BG_1( A2_inv_for_SAEDRVT14_ND2_MM_16, A2 );
   or MGM_BG_2( X, A1_inv_for_SAEDRVT14_ND2_MM_16, A2_inv_for_SAEDRVT14_ND2_MM_16 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_ND2_MM_2_func( X, A1, A2 );
   input A1, A2;
   output X;
   wire A1_inv_for_SAEDRVT14_ND2_MM_2;
   not MGM_BG_0( A1_inv_for_SAEDRVT14_ND2_MM_2, A1 );
   wire A2_inv_for_SAEDRVT14_ND2_MM_2;
   not MGM_BG_1( A2_inv_for_SAEDRVT14_ND2_MM_2, A2 );
   or MGM_BG_2( X, A1_inv_for_SAEDRVT14_ND2_MM_2, A2_inv_for_SAEDRVT14_ND2_MM_2 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_ND2_MM_3_func( X, A1, A2 );
   input A1, A2;
   output X;
   wire A1_inv_for_SAEDRVT14_ND2_MM_3;
   not MGM_BG_0( A1_inv_for_SAEDRVT14_ND2_MM_3, A1 );
   wire A2_inv_for_SAEDRVT14_ND2_MM_3;
   not MGM_BG_1( A2_inv_for_SAEDRVT14_ND2_MM_3, A2 );
   or MGM_BG_2( X, A1_inv_for_SAEDRVT14_ND2_MM_3, A2_inv_for_SAEDRVT14_ND2_MM_3 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_ND2_MM_4_func( X, A1, A2 );
   input A1, A2;
   output X;
   wire A1_inv_for_SAEDRVT14_ND2_MM_4;
   not MGM_BG_0( A1_inv_for_SAEDRVT14_ND2_MM_4, A1 );
   wire A2_inv_for_SAEDRVT14_ND2_MM_4;
   not MGM_BG_1( A2_inv_for_SAEDRVT14_ND2_MM_4, A2 );
   or MGM_BG_2( X, A1_inv_for_SAEDRVT14_ND2_MM_4, A2_inv_for_SAEDRVT14_ND2_MM_4 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_ND2_MM_6_func( X, A1, A2 );
   input A1, A2;
   output X;
   wire A1_inv_for_SAEDRVT14_ND2_MM_6;
   not MGM_BG_0( A1_inv_for_SAEDRVT14_ND2_MM_6, A1 );
   wire A2_inv_for_SAEDRVT14_ND2_MM_6;
   not MGM_BG_1( A2_inv_for_SAEDRVT14_ND2_MM_6, A2 );
   or MGM_BG_2( X, A1_inv_for_SAEDRVT14_ND2_MM_6, A2_inv_for_SAEDRVT14_ND2_MM_6 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_ND2_MM_8_func( X, A1, A2 );
   input A1, A2;
   output X;
   wire A1_inv_for_SAEDRVT14_ND2_MM_8;
   not MGM_BG_0( A1_inv_for_SAEDRVT14_ND2_MM_8, A1 );
   wire A2_inv_for_SAEDRVT14_ND2_MM_8;
   not MGM_BG_1( A2_inv_for_SAEDRVT14_ND2_MM_8, A2 );
   or MGM_BG_2( X, A1_inv_for_SAEDRVT14_ND2_MM_8, A2_inv_for_SAEDRVT14_ND2_MM_8 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_ND3B_0P5_func( X, A, B1, B2 );
   input A, B1, B2;
   output X;
   wire B1_inv_for_SAEDRVT14_ND3B_0P5;
   not MGM_BG_0( B1_inv_for_SAEDRVT14_ND3B_0P5, B1 );
   wire B2_inv_for_SAEDRVT14_ND3B_0P5;
   not MGM_BG_1( B2_inv_for_SAEDRVT14_ND3B_0P5, B2 );
   or MGM_BG_2( X, A, B1_inv_for_SAEDRVT14_ND3B_0P5, B2_inv_for_SAEDRVT14_ND3B_0P5 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_ND3B_0P75_func( X, A, B1, B2 );
   input A, B1, B2;
   output X;
   wire B1_inv_for_SAEDRVT14_ND3B_0P75;
   not MGM_BG_0( B1_inv_for_SAEDRVT14_ND3B_0P75, B1 );
   wire B2_inv_for_SAEDRVT14_ND3B_0P75;
   not MGM_BG_1( B2_inv_for_SAEDRVT14_ND3B_0P75, B2 );
   or MGM_BG_2( X, A, B1_inv_for_SAEDRVT14_ND3B_0P75, B2_inv_for_SAEDRVT14_ND3B_0P75 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_ND3B_1_func( X, A, B1, B2 );
   input A, B1, B2;
   output X;
   wire B1_inv_for_SAEDRVT14_ND3B_1;
   not MGM_BG_0( B1_inv_for_SAEDRVT14_ND3B_1, B1 );
   wire B2_inv_for_SAEDRVT14_ND3B_1;
   not MGM_BG_1( B2_inv_for_SAEDRVT14_ND3B_1, B2 );
   or MGM_BG_2( X, A, B1_inv_for_SAEDRVT14_ND3B_1, B2_inv_for_SAEDRVT14_ND3B_1 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_ND3B_2_func( X, A, B1, B2 );
   input A, B1, B2;
   output X;
   wire B1_inv_for_SAEDRVT14_ND3B_2;
   not MGM_BG_0( B1_inv_for_SAEDRVT14_ND3B_2, B1 );
   wire B2_inv_for_SAEDRVT14_ND3B_2;
   not MGM_BG_1( B2_inv_for_SAEDRVT14_ND3B_2, B2 );
   or MGM_BG_2( X, A, B1_inv_for_SAEDRVT14_ND3B_2, B2_inv_for_SAEDRVT14_ND3B_2 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_ND3B_4_func( X, A, B1, B2 );
   input A, B1, B2;
   output X;
   wire B1_inv_for_SAEDRVT14_ND3B_4;
   not MGM_BG_0( B1_inv_for_SAEDRVT14_ND3B_4, B1 );
   wire B2_inv_for_SAEDRVT14_ND3B_4;
   not MGM_BG_1( B2_inv_for_SAEDRVT14_ND3B_4, B2 );
   or MGM_BG_2( X, A, B1_inv_for_SAEDRVT14_ND3B_4, B2_inv_for_SAEDRVT14_ND3B_4 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_ND3_0P5_func( X, A1, A2, A3 );
   input A1, A2, A3;
   output X;
   wire A1_inv_for_SAEDRVT14_ND3_0P5;
   not MGM_BG_0( A1_inv_for_SAEDRVT14_ND3_0P5, A1 );
   wire A2_inv_for_SAEDRVT14_ND3_0P5;
   not MGM_BG_1( A2_inv_for_SAEDRVT14_ND3_0P5, A2 );
   wire A3_inv_for_SAEDRVT14_ND3_0P5;
   not MGM_BG_2( A3_inv_for_SAEDRVT14_ND3_0P5, A3 );
   or MGM_BG_3( X, A1_inv_for_SAEDRVT14_ND3_0P5, A2_inv_for_SAEDRVT14_ND3_0P5, A3_inv_for_SAEDRVT14_ND3_0P5 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_ND3_0P75_func( X, A1, A2, A3 );
   input A1, A2, A3;
   output X;
   wire A1_inv_for_SAEDRVT14_ND3_0P75;
   not MGM_BG_0( A1_inv_for_SAEDRVT14_ND3_0P75, A1 );
   wire A2_inv_for_SAEDRVT14_ND3_0P75;
   not MGM_BG_1( A2_inv_for_SAEDRVT14_ND3_0P75, A2 );
   wire A3_inv_for_SAEDRVT14_ND3_0P75;
   not MGM_BG_2( A3_inv_for_SAEDRVT14_ND3_0P75, A3 );
   or MGM_BG_3( X, A1_inv_for_SAEDRVT14_ND3_0P75, A2_inv_for_SAEDRVT14_ND3_0P75, A3_inv_for_SAEDRVT14_ND3_0P75 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_ND3_1_func( X, A1, A2, A3 );
   input A1, A2, A3;
   output X;
   wire A1_inv_for_SAEDRVT14_ND3_1;
   not MGM_BG_0( A1_inv_for_SAEDRVT14_ND3_1, A1 );
   wire A2_inv_for_SAEDRVT14_ND3_1;
   not MGM_BG_1( A2_inv_for_SAEDRVT14_ND3_1, A2 );
   wire A3_inv_for_SAEDRVT14_ND3_1;
   not MGM_BG_2( A3_inv_for_SAEDRVT14_ND3_1, A3 );
   or MGM_BG_3( X, A1_inv_for_SAEDRVT14_ND3_1, A2_inv_for_SAEDRVT14_ND3_1, A3_inv_for_SAEDRVT14_ND3_1 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_ND3_2_func( X, A1, A2, A3 );
   input A1, A2, A3;
   output X;
   wire A1_inv_for_SAEDRVT14_ND3_2;
   not MGM_BG_0( A1_inv_for_SAEDRVT14_ND3_2, A1 );
   wire A2_inv_for_SAEDRVT14_ND3_2;
   not MGM_BG_1( A2_inv_for_SAEDRVT14_ND3_2, A2 );
   wire A3_inv_for_SAEDRVT14_ND3_2;
   not MGM_BG_2( A3_inv_for_SAEDRVT14_ND3_2, A3 );
   or MGM_BG_3( X, A1_inv_for_SAEDRVT14_ND3_2, A2_inv_for_SAEDRVT14_ND3_2, A3_inv_for_SAEDRVT14_ND3_2 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_ND3_3_func( X, A1, A2, A3 );
   input A1, A2, A3;
   output X;
   wire A1_inv_for_SAEDRVT14_ND3_3;
   not MGM_BG_0( A1_inv_for_SAEDRVT14_ND3_3, A1 );
   wire A2_inv_for_SAEDRVT14_ND3_3;
   not MGM_BG_1( A2_inv_for_SAEDRVT14_ND3_3, A2 );
   wire A3_inv_for_SAEDRVT14_ND3_3;
   not MGM_BG_2( A3_inv_for_SAEDRVT14_ND3_3, A3 );
   or MGM_BG_3( X, A1_inv_for_SAEDRVT14_ND3_3, A2_inv_for_SAEDRVT14_ND3_3, A3_inv_for_SAEDRVT14_ND3_3 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_ND3_4_func( X, A1, A2, A3 );
   input A1, A2, A3;
   output X;
   wire A1_inv_for_SAEDRVT14_ND3_4;
   not MGM_BG_0( A1_inv_for_SAEDRVT14_ND3_4, A1 );
   wire A2_inv_for_SAEDRVT14_ND3_4;
   not MGM_BG_1( A2_inv_for_SAEDRVT14_ND3_4, A2 );
   wire A3_inv_for_SAEDRVT14_ND3_4;
   not MGM_BG_2( A3_inv_for_SAEDRVT14_ND3_4, A3 );
   or MGM_BG_3( X, A1_inv_for_SAEDRVT14_ND3_4, A2_inv_for_SAEDRVT14_ND3_4, A3_inv_for_SAEDRVT14_ND3_4 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_ND3_8_func( X, A1, A2, A3 );
   input A1, A2, A3;
   output X;
   wire A1_inv_for_SAEDRVT14_ND3_8;
   not MGM_BG_0( A1_inv_for_SAEDRVT14_ND3_8, A1 );
   wire A2_inv_for_SAEDRVT14_ND3_8;
   not MGM_BG_1( A2_inv_for_SAEDRVT14_ND3_8, A2 );
   wire A3_inv_for_SAEDRVT14_ND3_8;
   not MGM_BG_2( A3_inv_for_SAEDRVT14_ND3_8, A3 );
   or MGM_BG_3( X, A1_inv_for_SAEDRVT14_ND3_8, A2_inv_for_SAEDRVT14_ND3_8, A3_inv_for_SAEDRVT14_ND3_8 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_ND3_ECO_1_func( X, A1, A2, A3 );
   input A1, A2, A3;
   output X;
   wire A1_inv_for_SAEDRVT14_ND3_ECO_1;
   not MGM_BG_0( A1_inv_for_SAEDRVT14_ND3_ECO_1, A1 );
   wire A2_inv_for_SAEDRVT14_ND3_ECO_1;
   not MGM_BG_1( A2_inv_for_SAEDRVT14_ND3_ECO_1, A2 );
   wire A3_inv_for_SAEDRVT14_ND3_ECO_1;
   not MGM_BG_2( A3_inv_for_SAEDRVT14_ND3_ECO_1, A3 );
   or MGM_BG_3( X, A1_inv_for_SAEDRVT14_ND3_ECO_1, A2_inv_for_SAEDRVT14_ND3_ECO_1, A3_inv_for_SAEDRVT14_ND3_ECO_1 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_ND4_0P5_func( X, A1, A2, A3, A4 );
   input A1, A2, A3, A4;
   output X;
   wire A1_inv_for_SAEDRVT14_ND4_0P5;
   not MGM_BG_0( A1_inv_for_SAEDRVT14_ND4_0P5, A1 );
   wire A2_inv_for_SAEDRVT14_ND4_0P5;
   not MGM_BG_1( A2_inv_for_SAEDRVT14_ND4_0P5, A2 );
   wire A3_inv_for_SAEDRVT14_ND4_0P5;
   not MGM_BG_2( A3_inv_for_SAEDRVT14_ND4_0P5, A3 );
   wire A4_inv_for_SAEDRVT14_ND4_0P5;
   not MGM_BG_3( A4_inv_for_SAEDRVT14_ND4_0P5, A4 );
   or MGM_BG_4( X, A1_inv_for_SAEDRVT14_ND4_0P5, A2_inv_for_SAEDRVT14_ND4_0P5, A3_inv_for_SAEDRVT14_ND4_0P5, A4_inv_for_SAEDRVT14_ND4_0P5 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_ND4_0P75_func( X, A1, A2, A3, A4 );
   input A1, A2, A3, A4;
   output X;
   wire A1_inv_for_SAEDRVT14_ND4_0P75;
   not MGM_BG_0( A1_inv_for_SAEDRVT14_ND4_0P75, A1 );
   wire A2_inv_for_SAEDRVT14_ND4_0P75;
   not MGM_BG_1( A2_inv_for_SAEDRVT14_ND4_0P75, A2 );
   wire A3_inv_for_SAEDRVT14_ND4_0P75;
   not MGM_BG_2( A3_inv_for_SAEDRVT14_ND4_0P75, A3 );
   wire A4_inv_for_SAEDRVT14_ND4_0P75;
   not MGM_BG_3( A4_inv_for_SAEDRVT14_ND4_0P75, A4 );
   or MGM_BG_4( X, A1_inv_for_SAEDRVT14_ND4_0P75, A2_inv_for_SAEDRVT14_ND4_0P75, A3_inv_for_SAEDRVT14_ND4_0P75, A4_inv_for_SAEDRVT14_ND4_0P75 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_ND4_1_func( X, A1, A2, A3, A4 );
   input A1, A2, A3, A4;
   output X;
   wire A1_inv_for_SAEDRVT14_ND4_1;
   not MGM_BG_0( A1_inv_for_SAEDRVT14_ND4_1, A1 );
   wire A2_inv_for_SAEDRVT14_ND4_1;
   not MGM_BG_1( A2_inv_for_SAEDRVT14_ND4_1, A2 );
   wire A3_inv_for_SAEDRVT14_ND4_1;
   not MGM_BG_2( A3_inv_for_SAEDRVT14_ND4_1, A3 );
   wire A4_inv_for_SAEDRVT14_ND4_1;
   not MGM_BG_3( A4_inv_for_SAEDRVT14_ND4_1, A4 );
   or MGM_BG_4( X, A1_inv_for_SAEDRVT14_ND4_1, A2_inv_for_SAEDRVT14_ND4_1, A3_inv_for_SAEDRVT14_ND4_1, A4_inv_for_SAEDRVT14_ND4_1 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_ND4_2_func( X, A1, A2, A3, A4 );
   input A1, A2, A3, A4;
   output X;
   wire A1_inv_for_SAEDRVT14_ND4_2;
   not MGM_BG_0( A1_inv_for_SAEDRVT14_ND4_2, A1 );
   wire A2_inv_for_SAEDRVT14_ND4_2;
   not MGM_BG_1( A2_inv_for_SAEDRVT14_ND4_2, A2 );
   wire A3_inv_for_SAEDRVT14_ND4_2;
   not MGM_BG_2( A3_inv_for_SAEDRVT14_ND4_2, A3 );
   wire A4_inv_for_SAEDRVT14_ND4_2;
   not MGM_BG_3( A4_inv_for_SAEDRVT14_ND4_2, A4 );
   or MGM_BG_4( X, A1_inv_for_SAEDRVT14_ND4_2, A2_inv_for_SAEDRVT14_ND4_2, A3_inv_for_SAEDRVT14_ND4_2, A4_inv_for_SAEDRVT14_ND4_2 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_ND4_3_func( X, A1, A2, A3, A4 );
   input A1, A2, A3, A4;
   output X;
   wire A1_inv_for_SAEDRVT14_ND4_3;
   not MGM_BG_0( A1_inv_for_SAEDRVT14_ND4_3, A1 );
   wire A2_inv_for_SAEDRVT14_ND4_3;
   not MGM_BG_1( A2_inv_for_SAEDRVT14_ND4_3, A2 );
   wire A3_inv_for_SAEDRVT14_ND4_3;
   not MGM_BG_2( A3_inv_for_SAEDRVT14_ND4_3, A3 );
   wire A4_inv_for_SAEDRVT14_ND4_3;
   not MGM_BG_3( A4_inv_for_SAEDRVT14_ND4_3, A4 );
   or MGM_BG_4( X, A1_inv_for_SAEDRVT14_ND4_3, A2_inv_for_SAEDRVT14_ND4_3, A3_inv_for_SAEDRVT14_ND4_3, A4_inv_for_SAEDRVT14_ND4_3 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_ND4_4_func( X, A1, A2, A3, A4 );
   input A1, A2, A3, A4;
   output X;
   wire A1_inv_for_SAEDRVT14_ND4_4;
   not MGM_BG_0( A1_inv_for_SAEDRVT14_ND4_4, A1 );
   wire A2_inv_for_SAEDRVT14_ND4_4;
   not MGM_BG_1( A2_inv_for_SAEDRVT14_ND4_4, A2 );
   wire A3_inv_for_SAEDRVT14_ND4_4;
   not MGM_BG_2( A3_inv_for_SAEDRVT14_ND4_4, A3 );
   wire A4_inv_for_SAEDRVT14_ND4_4;
   not MGM_BG_3( A4_inv_for_SAEDRVT14_ND4_4, A4 );
   or MGM_BG_4( X, A1_inv_for_SAEDRVT14_ND4_4, A2_inv_for_SAEDRVT14_ND4_4, A3_inv_for_SAEDRVT14_ND4_4, A4_inv_for_SAEDRVT14_ND4_4 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_ND4_8_func( X, A1, A2, A3, A4 );
   input A1, A2, A3, A4;
   output X;
   wire A1_inv_for_SAEDRVT14_ND4_8;
   not MGM_BG_0( A1_inv_for_SAEDRVT14_ND4_8, A1 );
   wire A2_inv_for_SAEDRVT14_ND4_8;
   not MGM_BG_1( A2_inv_for_SAEDRVT14_ND4_8, A2 );
   wire A3_inv_for_SAEDRVT14_ND4_8;
   not MGM_BG_2( A3_inv_for_SAEDRVT14_ND4_8, A3 );
   wire A4_inv_for_SAEDRVT14_ND4_8;
   not MGM_BG_3( A4_inv_for_SAEDRVT14_ND4_8, A4 );
   or MGM_BG_4( X, A1_inv_for_SAEDRVT14_ND4_8, A2_inv_for_SAEDRVT14_ND4_8, A3_inv_for_SAEDRVT14_ND4_8, A4_inv_for_SAEDRVT14_ND4_8 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_NR2B_0P75_func( X, A, B );
   input A, B;
   output X;
   wire B_inv_for_SAEDRVT14_NR2B_0P75;
   not MGM_BG_0( B_inv_for_SAEDRVT14_NR2B_0P75, B );
   and MGM_BG_1( X, B_inv_for_SAEDRVT14_NR2B_0P75, A );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_NR2B_1_func( X, A, B );
   input A, B;
   output X;
   wire B_inv_for_SAEDRVT14_NR2B_1;
   not MGM_BG_0( B_inv_for_SAEDRVT14_NR2B_1, B );
   and MGM_BG_1( X, B_inv_for_SAEDRVT14_NR2B_1, A );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_NR2B_1P5_func( X, A, B );
   input A, B;
   output X;
   wire B_inv_for_SAEDRVT14_NR2B_1P5;
   not MGM_BG_0( B_inv_for_SAEDRVT14_NR2B_1P5, B );
   and MGM_BG_1( X, B_inv_for_SAEDRVT14_NR2B_1P5, A );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_NR2B_2_func( X, A, B );
   input A, B;
   output X;
   wire B_inv_for_SAEDRVT14_NR2B_2;
   not MGM_BG_0( B_inv_for_SAEDRVT14_NR2B_2, B );
   and MGM_BG_1( X, B_inv_for_SAEDRVT14_NR2B_2, A );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_NR2B_4_func( X, A, B );
   input A, B;
   output X;
   wire B_inv_for_SAEDRVT14_NR2B_4;
   not MGM_BG_0( B_inv_for_SAEDRVT14_NR2B_4, B );
   and MGM_BG_1( X, B_inv_for_SAEDRVT14_NR2B_4, A );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_NR2B_U_0P5_func( X, A, B );
   input A, B;
   output X;
   wire B_inv_for_SAEDRVT14_NR2B_U_0P5;
   not MGM_BG_0( B_inv_for_SAEDRVT14_NR2B_U_0P5, B );
   and MGM_BG_1( X, B_inv_for_SAEDRVT14_NR2B_U_0P5, A );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_NR2_0P5_func( X, A1, A2 );
   input A1, A2;
   output X;
   wire A1_inv_for_SAEDRVT14_NR2_0P5;
   not MGM_BG_0( A1_inv_for_SAEDRVT14_NR2_0P5, A1 );
   wire A2_inv_for_SAEDRVT14_NR2_0P5;
   not MGM_BG_1( A2_inv_for_SAEDRVT14_NR2_0P5, A2 );
   and MGM_BG_2( X, A1_inv_for_SAEDRVT14_NR2_0P5, A2_inv_for_SAEDRVT14_NR2_0P5 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_NR2_1_func( X, A1, A2 );
   input A1, A2;
   output X;
   wire A1_inv_for_SAEDRVT14_NR2_1;
   not MGM_BG_0( A1_inv_for_SAEDRVT14_NR2_1, A1 );
   wire A2_inv_for_SAEDRVT14_NR2_1;
   not MGM_BG_1( A2_inv_for_SAEDRVT14_NR2_1, A2 );
   and MGM_BG_2( X, A1_inv_for_SAEDRVT14_NR2_1, A2_inv_for_SAEDRVT14_NR2_1 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_NR2_16_func( X, A1, A2 );
   input A1, A2;
   output X;
   wire A1_inv_for_SAEDRVT14_NR2_16;
   not MGM_BG_0( A1_inv_for_SAEDRVT14_NR2_16, A1 );
   wire A2_inv_for_SAEDRVT14_NR2_16;
   not MGM_BG_1( A2_inv_for_SAEDRVT14_NR2_16, A2 );
   and MGM_BG_2( X, A1_inv_for_SAEDRVT14_NR2_16, A2_inv_for_SAEDRVT14_NR2_16 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_NR2_1P5_func( X, A1, A2 );
   input A1, A2;
   output X;
   wire A1_inv_for_SAEDRVT14_NR2_1P5;
   not MGM_BG_0( A1_inv_for_SAEDRVT14_NR2_1P5, A1 );
   wire A2_inv_for_SAEDRVT14_NR2_1P5;
   not MGM_BG_1( A2_inv_for_SAEDRVT14_NR2_1P5, A2 );
   and MGM_BG_2( X, A1_inv_for_SAEDRVT14_NR2_1P5, A2_inv_for_SAEDRVT14_NR2_1P5 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_NR2_2_func( X, A1, A2 );
   input A1, A2;
   output X;
   wire A1_inv_for_SAEDRVT14_NR2_2;
   not MGM_BG_0( A1_inv_for_SAEDRVT14_NR2_2, A1 );
   wire A2_inv_for_SAEDRVT14_NR2_2;
   not MGM_BG_1( A2_inv_for_SAEDRVT14_NR2_2, A2 );
   and MGM_BG_2( X, A1_inv_for_SAEDRVT14_NR2_2, A2_inv_for_SAEDRVT14_NR2_2 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_NR2_3_func( X, A1, A2 );
   input A1, A2;
   output X;
   wire A1_inv_for_SAEDRVT14_NR2_3;
   not MGM_BG_0( A1_inv_for_SAEDRVT14_NR2_3, A1 );
   wire A2_inv_for_SAEDRVT14_NR2_3;
   not MGM_BG_1( A2_inv_for_SAEDRVT14_NR2_3, A2 );
   and MGM_BG_2( X, A1_inv_for_SAEDRVT14_NR2_3, A2_inv_for_SAEDRVT14_NR2_3 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_NR2_4_func( X, A1, A2 );
   input A1, A2;
   output X;
   wire A1_inv_for_SAEDRVT14_NR2_4;
   not MGM_BG_0( A1_inv_for_SAEDRVT14_NR2_4, A1 );
   wire A2_inv_for_SAEDRVT14_NR2_4;
   not MGM_BG_1( A2_inv_for_SAEDRVT14_NR2_4, A2 );
   and MGM_BG_2( X, A1_inv_for_SAEDRVT14_NR2_4, A2_inv_for_SAEDRVT14_NR2_4 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_NR2_5_func( X, A1, A2 );
   input A1, A2;
   output X;
   wire A1_inv_for_SAEDRVT14_NR2_5;
   not MGM_BG_0( A1_inv_for_SAEDRVT14_NR2_5, A1 );
   wire A2_inv_for_SAEDRVT14_NR2_5;
   not MGM_BG_1( A2_inv_for_SAEDRVT14_NR2_5, A2 );
   and MGM_BG_2( X, A1_inv_for_SAEDRVT14_NR2_5, A2_inv_for_SAEDRVT14_NR2_5 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_NR2_6_func( X, A1, A2 );
   input A1, A2;
   output X;
   wire A1_inv_for_SAEDRVT14_NR2_6;
   not MGM_BG_0( A1_inv_for_SAEDRVT14_NR2_6, A1 );
   wire A2_inv_for_SAEDRVT14_NR2_6;
   not MGM_BG_1( A2_inv_for_SAEDRVT14_NR2_6, A2 );
   and MGM_BG_2( X, A1_inv_for_SAEDRVT14_NR2_6, A2_inv_for_SAEDRVT14_NR2_6 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_NR2_8_func( X, A1, A2 );
   input A1, A2;
   output X;
   wire A1_inv_for_SAEDRVT14_NR2_8;
   not MGM_BG_0( A1_inv_for_SAEDRVT14_NR2_8, A1 );
   wire A2_inv_for_SAEDRVT14_NR2_8;
   not MGM_BG_1( A2_inv_for_SAEDRVT14_NR2_8, A2 );
   and MGM_BG_2( X, A1_inv_for_SAEDRVT14_NR2_8, A2_inv_for_SAEDRVT14_NR2_8 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_NR2_ECO_1_func( X, A1, A2 );
   input A1, A2;
   output X;
   wire A1_inv_for_SAEDRVT14_NR2_ECO_1;
   not MGM_BG_0( A1_inv_for_SAEDRVT14_NR2_ECO_1, A1 );
   wire A2_inv_for_SAEDRVT14_NR2_ECO_1;
   not MGM_BG_1( A2_inv_for_SAEDRVT14_NR2_ECO_1, A2 );
   and MGM_BG_2( X, A1_inv_for_SAEDRVT14_NR2_ECO_1, A2_inv_for_SAEDRVT14_NR2_ECO_1 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_NR2_ECO_2_func( X, A1, A2 );
   input A1, A2;
   output X;
   wire A1_inv_for_SAEDRVT14_NR2_ECO_2;
   not MGM_BG_0( A1_inv_for_SAEDRVT14_NR2_ECO_2, A1 );
   wire A2_inv_for_SAEDRVT14_NR2_ECO_2;
   not MGM_BG_1( A2_inv_for_SAEDRVT14_NR2_ECO_2, A2 );
   and MGM_BG_2( X, A1_inv_for_SAEDRVT14_NR2_ECO_2, A2_inv_for_SAEDRVT14_NR2_ECO_2 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_NR2_MM_0P5_func( X, A1, A2 );
   input A1, A2;
   output X;
   wire A1_inv_for_SAEDRVT14_NR2_MM_0P5;
   not MGM_BG_0( A1_inv_for_SAEDRVT14_NR2_MM_0P5, A1 );
   wire A2_inv_for_SAEDRVT14_NR2_MM_0P5;
   not MGM_BG_1( A2_inv_for_SAEDRVT14_NR2_MM_0P5, A2 );
   and MGM_BG_2( X, A1_inv_for_SAEDRVT14_NR2_MM_0P5, A2_inv_for_SAEDRVT14_NR2_MM_0P5 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_NR2_MM_1_func( X, A1, A2 );
   input A1, A2;
   output X;
   wire A1_inv_for_SAEDRVT14_NR2_MM_1;
   not MGM_BG_0( A1_inv_for_SAEDRVT14_NR2_MM_1, A1 );
   wire A2_inv_for_SAEDRVT14_NR2_MM_1;
   not MGM_BG_1( A2_inv_for_SAEDRVT14_NR2_MM_1, A2 );
   and MGM_BG_2( X, A1_inv_for_SAEDRVT14_NR2_MM_1, A2_inv_for_SAEDRVT14_NR2_MM_1 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_NR2_MM_10_func( X, A1, A2 );
   input A1, A2;
   output X;
   wire A1_inv_for_SAEDRVT14_NR2_MM_10;
   not MGM_BG_0( A1_inv_for_SAEDRVT14_NR2_MM_10, A1 );
   wire A2_inv_for_SAEDRVT14_NR2_MM_10;
   not MGM_BG_1( A2_inv_for_SAEDRVT14_NR2_MM_10, A2 );
   and MGM_BG_2( X, A1_inv_for_SAEDRVT14_NR2_MM_10, A2_inv_for_SAEDRVT14_NR2_MM_10 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_NR2_MM_12_func( X, A1, A2 );
   input A1, A2;
   output X;
   wire A1_inv_for_SAEDRVT14_NR2_MM_12;
   not MGM_BG_0( A1_inv_for_SAEDRVT14_NR2_MM_12, A1 );
   wire A2_inv_for_SAEDRVT14_NR2_MM_12;
   not MGM_BG_1( A2_inv_for_SAEDRVT14_NR2_MM_12, A2 );
   and MGM_BG_2( X, A1_inv_for_SAEDRVT14_NR2_MM_12, A2_inv_for_SAEDRVT14_NR2_MM_12 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_NR2_MM_16_func( X, A1, A2 );
   input A1, A2;
   output X;
   wire A1_inv_for_SAEDRVT14_NR2_MM_16;
   not MGM_BG_0( A1_inv_for_SAEDRVT14_NR2_MM_16, A1 );
   wire A2_inv_for_SAEDRVT14_NR2_MM_16;
   not MGM_BG_1( A2_inv_for_SAEDRVT14_NR2_MM_16, A2 );
   and MGM_BG_2( X, A1_inv_for_SAEDRVT14_NR2_MM_16, A2_inv_for_SAEDRVT14_NR2_MM_16 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_NR2_MM_2_func( X, A1, A2 );
   input A1, A2;
   output X;
   wire A1_inv_for_SAEDRVT14_NR2_MM_2;
   not MGM_BG_0( A1_inv_for_SAEDRVT14_NR2_MM_2, A1 );
   wire A2_inv_for_SAEDRVT14_NR2_MM_2;
   not MGM_BG_1( A2_inv_for_SAEDRVT14_NR2_MM_2, A2 );
   and MGM_BG_2( X, A1_inv_for_SAEDRVT14_NR2_MM_2, A2_inv_for_SAEDRVT14_NR2_MM_2 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_NR2_MM_3_func( X, A1, A2 );
   input A1, A2;
   output X;
   wire A1_inv_for_SAEDRVT14_NR2_MM_3;
   not MGM_BG_0( A1_inv_for_SAEDRVT14_NR2_MM_3, A1 );
   wire A2_inv_for_SAEDRVT14_NR2_MM_3;
   not MGM_BG_1( A2_inv_for_SAEDRVT14_NR2_MM_3, A2 );
   and MGM_BG_2( X, A1_inv_for_SAEDRVT14_NR2_MM_3, A2_inv_for_SAEDRVT14_NR2_MM_3 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_NR2_MM_4_func( X, A1, A2 );
   input A1, A2;
   output X;
   wire A1_inv_for_SAEDRVT14_NR2_MM_4;
   not MGM_BG_0( A1_inv_for_SAEDRVT14_NR2_MM_4, A1 );
   wire A2_inv_for_SAEDRVT14_NR2_MM_4;
   not MGM_BG_1( A2_inv_for_SAEDRVT14_NR2_MM_4, A2 );
   and MGM_BG_2( X, A1_inv_for_SAEDRVT14_NR2_MM_4, A2_inv_for_SAEDRVT14_NR2_MM_4 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_NR2_MM_6_func( X, A1, A2 );
   input A1, A2;
   output X;
   wire A1_inv_for_SAEDRVT14_NR2_MM_6;
   not MGM_BG_0( A1_inv_for_SAEDRVT14_NR2_MM_6, A1 );
   wire A2_inv_for_SAEDRVT14_NR2_MM_6;
   not MGM_BG_1( A2_inv_for_SAEDRVT14_NR2_MM_6, A2 );
   and MGM_BG_2( X, A1_inv_for_SAEDRVT14_NR2_MM_6, A2_inv_for_SAEDRVT14_NR2_MM_6 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_NR2_MM_8_func( X, A1, A2 );
   input A1, A2;
   output X;
   wire A1_inv_for_SAEDRVT14_NR2_MM_8;
   not MGM_BG_0( A1_inv_for_SAEDRVT14_NR2_MM_8, A1 );
   wire A2_inv_for_SAEDRVT14_NR2_MM_8;
   not MGM_BG_1( A2_inv_for_SAEDRVT14_NR2_MM_8, A2 );
   and MGM_BG_2( X, A1_inv_for_SAEDRVT14_NR2_MM_8, A2_inv_for_SAEDRVT14_NR2_MM_8 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_NR3B_0P75_func( X, A, B1, B2 );
   input A, B1, B2;
   output X;
   wire B1_inv_for_SAEDRVT14_NR3B_0P75;
   not MGM_BG_0( B1_inv_for_SAEDRVT14_NR3B_0P75, B1 );
   wire B2_inv_for_SAEDRVT14_NR3B_0P75;
   not MGM_BG_1( B2_inv_for_SAEDRVT14_NR3B_0P75, B2 );
   and MGM_BG_2( X, B1_inv_for_SAEDRVT14_NR3B_0P75, B2_inv_for_SAEDRVT14_NR3B_0P75, A );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_NR3B_1_func( X, A, B1, B2 );
   input A, B1, B2;
   output X;
   wire B1_inv_for_SAEDRVT14_NR3B_1;
   not MGM_BG_0( B1_inv_for_SAEDRVT14_NR3B_1, B1 );
   wire B2_inv_for_SAEDRVT14_NR3B_1;
   not MGM_BG_1( B2_inv_for_SAEDRVT14_NR3B_1, B2 );
   and MGM_BG_2( X, B1_inv_for_SAEDRVT14_NR3B_1, B2_inv_for_SAEDRVT14_NR3B_1, A );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_NR3B_1P5_func( X, A, B1, B2 );
   input A, B1, B2;
   output X;
   wire B1_inv_for_SAEDRVT14_NR3B_1P5;
   not MGM_BG_0( B1_inv_for_SAEDRVT14_NR3B_1P5, B1 );
   wire B2_inv_for_SAEDRVT14_NR3B_1P5;
   not MGM_BG_1( B2_inv_for_SAEDRVT14_NR3B_1P5, B2 );
   and MGM_BG_2( X, B1_inv_for_SAEDRVT14_NR3B_1P5, B2_inv_for_SAEDRVT14_NR3B_1P5, A );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_NR3B_2_func( X, A, B1, B2 );
   input A, B1, B2;
   output X;
   wire B1_inv_for_SAEDRVT14_NR3B_2;
   not MGM_BG_0( B1_inv_for_SAEDRVT14_NR3B_2, B1 );
   wire B2_inv_for_SAEDRVT14_NR3B_2;
   not MGM_BG_1( B2_inv_for_SAEDRVT14_NR3B_2, B2 );
   and MGM_BG_2( X, B1_inv_for_SAEDRVT14_NR3B_2, B2_inv_for_SAEDRVT14_NR3B_2, A );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_NR3B_4_func( X, A, B1, B2 );
   input A, B1, B2;
   output X;
   wire B1_inv_for_SAEDRVT14_NR3B_4;
   not MGM_BG_0( B1_inv_for_SAEDRVT14_NR3B_4, B1 );
   wire B2_inv_for_SAEDRVT14_NR3B_4;
   not MGM_BG_1( B2_inv_for_SAEDRVT14_NR3B_4, B2 );
   and MGM_BG_2( X, B1_inv_for_SAEDRVT14_NR3B_4, B2_inv_for_SAEDRVT14_NR3B_4, A );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_NR3B_U_0P5_func( X, A, B1, B2 );
   input A, B1, B2;
   output X;
   wire B1_inv_for_SAEDRVT14_NR3B_U_0P5;
   not MGM_BG_0( B1_inv_for_SAEDRVT14_NR3B_U_0P5, B1 );
   wire B2_inv_for_SAEDRVT14_NR3B_U_0P5;
   not MGM_BG_1( B2_inv_for_SAEDRVT14_NR3B_U_0P5, B2 );
   and MGM_BG_2( X, B1_inv_for_SAEDRVT14_NR3B_U_0P5, B2_inv_for_SAEDRVT14_NR3B_U_0P5, A );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_NR3_0P5_func( X, A1, A2, A3 );
   input A1, A2, A3;
   output X;
   wire A1_inv_for_SAEDRVT14_NR3_0P5;
   not MGM_BG_0( A1_inv_for_SAEDRVT14_NR3_0P5, A1 );
   wire A2_inv_for_SAEDRVT14_NR3_0P5;
   not MGM_BG_1( A2_inv_for_SAEDRVT14_NR3_0P5, A2 );
   wire A3_inv_for_SAEDRVT14_NR3_0P5;
   not MGM_BG_2( A3_inv_for_SAEDRVT14_NR3_0P5, A3 );
   and MGM_BG_3( X, A1_inv_for_SAEDRVT14_NR3_0P5, A2_inv_for_SAEDRVT14_NR3_0P5, A3_inv_for_SAEDRVT14_NR3_0P5 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_NR3_0P75_func( X, A1, A2, A3 );
   input A1, A2, A3;
   output X;
   wire A1_inv_for_SAEDRVT14_NR3_0P75;
   not MGM_BG_0( A1_inv_for_SAEDRVT14_NR3_0P75, A1 );
   wire A2_inv_for_SAEDRVT14_NR3_0P75;
   not MGM_BG_1( A2_inv_for_SAEDRVT14_NR3_0P75, A2 );
   wire A3_inv_for_SAEDRVT14_NR3_0P75;
   not MGM_BG_2( A3_inv_for_SAEDRVT14_NR3_0P75, A3 );
   and MGM_BG_3( X, A1_inv_for_SAEDRVT14_NR3_0P75, A2_inv_for_SAEDRVT14_NR3_0P75, A3_inv_for_SAEDRVT14_NR3_0P75 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_NR3_1_func( X, A1, A2, A3 );
   input A1, A2, A3;
   output X;
   wire A1_inv_for_SAEDRVT14_NR3_1;
   not MGM_BG_0( A1_inv_for_SAEDRVT14_NR3_1, A1 );
   wire A2_inv_for_SAEDRVT14_NR3_1;
   not MGM_BG_1( A2_inv_for_SAEDRVT14_NR3_1, A2 );
   wire A3_inv_for_SAEDRVT14_NR3_1;
   not MGM_BG_2( A3_inv_for_SAEDRVT14_NR3_1, A3 );
   and MGM_BG_3( X, A1_inv_for_SAEDRVT14_NR3_1, A2_inv_for_SAEDRVT14_NR3_1, A3_inv_for_SAEDRVT14_NR3_1 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_NR3_2_func( X, A1, A2, A3 );
   input A1, A2, A3;
   output X;
   wire A1_inv_for_SAEDRVT14_NR3_2;
   not MGM_BG_0( A1_inv_for_SAEDRVT14_NR3_2, A1 );
   wire A2_inv_for_SAEDRVT14_NR3_2;
   not MGM_BG_1( A2_inv_for_SAEDRVT14_NR3_2, A2 );
   wire A3_inv_for_SAEDRVT14_NR3_2;
   not MGM_BG_2( A3_inv_for_SAEDRVT14_NR3_2, A3 );
   and MGM_BG_3( X, A1_inv_for_SAEDRVT14_NR3_2, A2_inv_for_SAEDRVT14_NR3_2, A3_inv_for_SAEDRVT14_NR3_2 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_NR3_3_func( X, A1, A2, A3 );
   input A1, A2, A3;
   output X;
   wire A1_inv_for_SAEDRVT14_NR3_3;
   not MGM_BG_0( A1_inv_for_SAEDRVT14_NR3_3, A1 );
   wire A2_inv_for_SAEDRVT14_NR3_3;
   not MGM_BG_1( A2_inv_for_SAEDRVT14_NR3_3, A2 );
   wire A3_inv_for_SAEDRVT14_NR3_3;
   not MGM_BG_2( A3_inv_for_SAEDRVT14_NR3_3, A3 );
   and MGM_BG_3( X, A1_inv_for_SAEDRVT14_NR3_3, A2_inv_for_SAEDRVT14_NR3_3, A3_inv_for_SAEDRVT14_NR3_3 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_NR3_4_func( X, A1, A2, A3 );
   input A1, A2, A3;
   output X;
   wire A1_inv_for_SAEDRVT14_NR3_4;
   not MGM_BG_0( A1_inv_for_SAEDRVT14_NR3_4, A1 );
   wire A2_inv_for_SAEDRVT14_NR3_4;
   not MGM_BG_1( A2_inv_for_SAEDRVT14_NR3_4, A2 );
   wire A3_inv_for_SAEDRVT14_NR3_4;
   not MGM_BG_2( A3_inv_for_SAEDRVT14_NR3_4, A3 );
   and MGM_BG_3( X, A1_inv_for_SAEDRVT14_NR3_4, A2_inv_for_SAEDRVT14_NR3_4, A3_inv_for_SAEDRVT14_NR3_4 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_NR3_8_func( X, A1, A2, A3 );
   input A1, A2, A3;
   output X;
   wire A1_inv_for_SAEDRVT14_NR3_8;
   not MGM_BG_0( A1_inv_for_SAEDRVT14_NR3_8, A1 );
   wire A2_inv_for_SAEDRVT14_NR3_8;
   not MGM_BG_1( A2_inv_for_SAEDRVT14_NR3_8, A2 );
   wire A3_inv_for_SAEDRVT14_NR3_8;
   not MGM_BG_2( A3_inv_for_SAEDRVT14_NR3_8, A3 );
   and MGM_BG_3( X, A1_inv_for_SAEDRVT14_NR3_8, A2_inv_for_SAEDRVT14_NR3_8, A3_inv_for_SAEDRVT14_NR3_8 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_NR3_ECO_1_func( X, A1, A2, A3 );
   input A1, A2, A3;
   output X;
   wire A1_inv_for_SAEDRVT14_NR3_ECO_1;
   not MGM_BG_0( A1_inv_for_SAEDRVT14_NR3_ECO_1, A1 );
   wire A2_inv_for_SAEDRVT14_NR3_ECO_1;
   not MGM_BG_1( A2_inv_for_SAEDRVT14_NR3_ECO_1, A2 );
   wire A3_inv_for_SAEDRVT14_NR3_ECO_1;
   not MGM_BG_2( A3_inv_for_SAEDRVT14_NR3_ECO_1, A3 );
   and MGM_BG_3( X, A1_inv_for_SAEDRVT14_NR3_ECO_1, A2_inv_for_SAEDRVT14_NR3_ECO_1, A3_inv_for_SAEDRVT14_NR3_ECO_1 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_NR4_0P75_func( X, A1, A2, A3, A4 );
   input A1, A2, A3, A4;
   output X;
   wire A1_inv_for_SAEDRVT14_NR4_0P75;
   not MGM_BG_0( A1_inv_for_SAEDRVT14_NR4_0P75, A1 );
   wire A2_inv_for_SAEDRVT14_NR4_0P75;
   not MGM_BG_1( A2_inv_for_SAEDRVT14_NR4_0P75, A2 );
   wire A3_inv_for_SAEDRVT14_NR4_0P75;
   not MGM_BG_2( A3_inv_for_SAEDRVT14_NR4_0P75, A3 );
   wire A4_inv_for_SAEDRVT14_NR4_0P75;
   not MGM_BG_3( A4_inv_for_SAEDRVT14_NR4_0P75, A4 );
   and MGM_BG_4( X, A1_inv_for_SAEDRVT14_NR4_0P75, A2_inv_for_SAEDRVT14_NR4_0P75, A3_inv_for_SAEDRVT14_NR4_0P75, A4_inv_for_SAEDRVT14_NR4_0P75 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_NR4_2_func( X, A1, A2, A3, A4 );
   input A1, A2, A3, A4;
   output X;
   wire A1_inv_for_SAEDRVT14_NR4_2;
   not MGM_BG_0( A1_inv_for_SAEDRVT14_NR4_2, A1 );
   wire A2_inv_for_SAEDRVT14_NR4_2;
   not MGM_BG_1( A2_inv_for_SAEDRVT14_NR4_2, A2 );
   wire A3_inv_for_SAEDRVT14_NR4_2;
   not MGM_BG_2( A3_inv_for_SAEDRVT14_NR4_2, A3 );
   wire A4_inv_for_SAEDRVT14_NR4_2;
   not MGM_BG_3( A4_inv_for_SAEDRVT14_NR4_2, A4 );
   and MGM_BG_4( X, A1_inv_for_SAEDRVT14_NR4_2, A2_inv_for_SAEDRVT14_NR4_2, A3_inv_for_SAEDRVT14_NR4_2, A4_inv_for_SAEDRVT14_NR4_2 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_OA211_1_func( X, A1, A2, B1, B2 );
   input A1, A2, B1, B2;
   output X;
   wire X_row1;
   and MGM_BG_0( X_row1, A1, B1, B2 );
   wire X_row2;
   and MGM_BG_1( X_row2, A2, B1, B2 );
   or MGM_BG_2( X, X_row1, X_row2 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_OA211_2_func( X, A1, A2, B1, B2 );
   input A1, A2, B1, B2;
   output X;
   wire X_row1;
   and MGM_BG_0( X_row1, A1, B1, B2 );
   wire X_row2;
   and MGM_BG_1( X_row2, A2, B1, B2 );
   or MGM_BG_2( X, X_row1, X_row2 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_OA211_4_func( X, A1, A2, B1, B2 );
   input A1, A2, B1, B2;
   output X;
   wire X_row1;
   and MGM_BG_0( X_row1, A1, B1, B2 );
   wire X_row2;
   and MGM_BG_1( X_row2, A2, B1, B2 );
   or MGM_BG_2( X, X_row1, X_row2 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_OA211_U_0P5_func( X, A1, A2, B1, B2 );
   input A1, A2, B1, B2;
   output X;
   wire X_row1;
   and MGM_BG_0( X_row1, A1, B1, B2 );
   wire X_row2;
   and MGM_BG_1( X_row2, A2, B1, B2 );
   or MGM_BG_2( X, X_row1, X_row2 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_OA21B_1_func( X, A1, A2, B );
   input A1, A2, B;
   output X;
   wire B_inv_for_SAEDRVT14_OA21B_1;
   not MGM_BG_0( B_inv_for_SAEDRVT14_OA21B_1, B );
   wire X_row1;
   and MGM_BG_1( X_row1, B_inv_for_SAEDRVT14_OA21B_1, A1 );
   wire X_row2;
   and MGM_BG_2( X_row2, B_inv_for_SAEDRVT14_OA21B_1, A2 );
   or MGM_BG_3( X, X_row1, X_row2 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_OA21B_2_func( X, A1, A2, B );
   input A1, A2, B;
   output X;
   wire B_inv_for_SAEDRVT14_OA21B_2;
   not MGM_BG_0( B_inv_for_SAEDRVT14_OA21B_2, B );
   wire X_row1;
   and MGM_BG_1( X_row1, B_inv_for_SAEDRVT14_OA21B_2, A1 );
   wire X_row2;
   and MGM_BG_2( X_row2, B_inv_for_SAEDRVT14_OA21B_2, A2 );
   or MGM_BG_3( X, X_row1, X_row2 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_OA21B_4_func( X, A1, A2, B );
   input A1, A2, B;
   output X;
   wire B_inv_for_SAEDRVT14_OA21B_4;
   not MGM_BG_0( B_inv_for_SAEDRVT14_OA21B_4, B );
   wire X_row1;
   and MGM_BG_1( X_row1, B_inv_for_SAEDRVT14_OA21B_4, A1 );
   wire X_row2;
   and MGM_BG_2( X_row2, B_inv_for_SAEDRVT14_OA21B_4, A2 );
   or MGM_BG_3( X, X_row1, X_row2 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_OA21B_U_0P5_func( X, A1, A2, B );
   input A1, A2, B;
   output X;
   wire B_inv_for_SAEDRVT14_OA21B_U_0P5;
   not MGM_BG_0( B_inv_for_SAEDRVT14_OA21B_U_0P5, B );
   wire X_row1;
   and MGM_BG_1( X_row1, B_inv_for_SAEDRVT14_OA21B_U_0P5, A1 );
   wire X_row2;
   and MGM_BG_2( X_row2, B_inv_for_SAEDRVT14_OA21B_U_0P5, A2 );
   or MGM_BG_3( X, X_row1, X_row2 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_OA21_1_func( X, A1, A2, B );
   input A1, A2, B;
   output X;
   wire X_row1;
   and MGM_BG_0( X_row1, A1, B );
   wire X_row2;
   and MGM_BG_1( X_row2, A2, B );
   or MGM_BG_2( X, X_row1, X_row2 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_OA21_2_func( X, A1, A2, B );
   input A1, A2, B;
   output X;
   wire X_row1;
   and MGM_BG_0( X_row1, A1, B );
   wire X_row2;
   and MGM_BG_1( X_row2, A2, B );
   or MGM_BG_2( X, X_row1, X_row2 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_OA21_4_func( X, A1, A2, B );
   input A1, A2, B;
   output X;
   wire X_row1;
   and MGM_BG_0( X_row1, A1, B );
   wire X_row2;
   and MGM_BG_1( X_row2, A2, B );
   or MGM_BG_2( X, X_row1, X_row2 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_OA21_MM_1_func( X, A1, A2, B );
   input A1, A2, B;
   output X;
   wire X_row1;
   and MGM_BG_0( X_row1, A1, B );
   wire X_row2;
   and MGM_BG_1( X_row2, A2, B );
   or MGM_BG_2( X, X_row1, X_row2 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_OA21_MM_2_func( A2, A1, B, X );
   input A1, A2, B;
   output X;
   wire X_row1;
   and MGM_BG_0( X_row1, A1, B );
   wire X_row2;
   and MGM_BG_1( X_row2, A2, B );
   or MGM_BG_2( X, X_row1, X_row2 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_OA21_MM_6_func( X, A1, A2, B );
   input A1, A2, B;
   output X;
   wire X_row1;
   and MGM_BG_0( X_row1, A1, B );
   wire X_row2;
   and MGM_BG_1( X_row2, A2, B );
   or MGM_BG_2( X, X_row1, X_row2 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_OA21_U_0P5_func( X, A1, A2, B );
   input A1, A2, B;
   output X;
   wire X_row1;
   and MGM_BG_0( X_row1, A1, B );
   wire X_row2;
   and MGM_BG_1( X_row2, A2, B );
   or MGM_BG_2( X, X_row1, X_row2 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_OA221_1_func( X, A1, A2, B1, B2, C );
   input A1, A2, B1, B2, C;
   output X;
   wire X_row1;
   and MGM_BG_0( X_row1, A1, B1, C );
   wire X_row2;
   and MGM_BG_1( X_row2, A1, B2, C );
   wire X_row3;
   and MGM_BG_2( X_row3, A2, B1, C );
   wire X_row4;
   and MGM_BG_3( X_row4, A2, B2, C );
   or MGM_BG_4( X, X_row1, X_row2, X_row3, X_row4 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_OA221_2_func( X, A1, A2, B1, B2, C );
   input A1, A2, B1, B2, C;
   output X;
   wire X_row1;
   and MGM_BG_0( X_row1, A1, B1, C );
   wire X_row2;
   and MGM_BG_1( X_row2, A1, B2, C );
   wire X_row3;
   and MGM_BG_2( X_row3, A2, B1, C );
   wire X_row4;
   and MGM_BG_3( X_row4, A2, B2, C );
   or MGM_BG_4( X, X_row1, X_row2, X_row3, X_row4 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_OA221_4_func( X, A1, A2, B1, B2, C );
   input A1, A2, B1, B2, C;
   output X;
   wire X_row1;
   and MGM_BG_0( X_row1, A1, B1, C );
   wire X_row2;
   and MGM_BG_1( X_row2, A1, B2, C );
   wire X_row3;
   and MGM_BG_2( X_row3, A2, B1, C );
   wire X_row4;
   and MGM_BG_3( X_row4, A2, B2, C );
   or MGM_BG_4( X, X_row1, X_row2, X_row3, X_row4 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_OA221_U_0P5_func( X, A1, A2, B1, B2, C );
   input A1, A2, B1, B2, C;
   output X;
   wire X_row1;
   and MGM_BG_0( X_row1, A1, B1, C );
   wire X_row2;
   and MGM_BG_1( X_row2, A1, B2, C );
   wire X_row3;
   and MGM_BG_2( X_row3, A2, B1, C );
   wire X_row4;
   and MGM_BG_3( X_row4, A2, B2, C );
   or MGM_BG_4( X, X_row1, X_row2, X_row3, X_row4 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_OA222_1_func( X, A1, A2, B1, B2, C1, C2 );
   input A1, A2, B1, B2, C1, C2;
   output X;
   wire X_row1;
   and MGM_BG_0( X_row1, A1, B1, C1 );
   wire X_row2;
   and MGM_BG_1( X_row2, A1, B1, C2 );
   wire X_row3;
   and MGM_BG_2( X_row3, A1, B2, C1 );
   wire X_row4;
   and MGM_BG_3( X_row4, A1, B2, C2 );
   wire X_row5;
   and MGM_BG_4( X_row5, A2, B1, C1 );
   wire X_row6;
   and MGM_BG_5( X_row6, A2, B1, C2 );
   wire X_row7;
   and MGM_BG_6( X_row7, A2, B2, C1 );
   wire X_row8;
   and MGM_BG_7( X_row8, A2, B2, C2 );
   or MGM_BG_8( X, X_row1, X_row2, X_row3, X_row4, X_row5, X_row6, X_row7, X_row8 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_OA222_2_func( X, A1, A2, B1, B2, C1, C2 );
   input A1, A2, B1, B2, C1, C2;
   output X;
   wire X_row1;
   and MGM_BG_0( X_row1, A1, B1, C1 );
   wire X_row2;
   and MGM_BG_1( X_row2, A1, B1, C2 );
   wire X_row3;
   and MGM_BG_2( X_row3, A1, B2, C1 );
   wire X_row4;
   and MGM_BG_3( X_row4, A1, B2, C2 );
   wire X_row5;
   and MGM_BG_4( X_row5, A2, B1, C1 );
   wire X_row6;
   and MGM_BG_5( X_row6, A2, B1, C2 );
   wire X_row7;
   and MGM_BG_6( X_row7, A2, B2, C1 );
   wire X_row8;
   and MGM_BG_7( X_row8, A2, B2, C2 );
   or MGM_BG_8( X, X_row1, X_row2, X_row3, X_row4, X_row5, X_row6, X_row7, X_row8 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_OA222_4_func( X, A1, A2, B1, B2, C1, C2 );
   input A1, A2, B1, B2, C1, C2;
   output X;
   wire X_row1;
   and MGM_BG_0( X_row1, A1, B1, C1 );
   wire X_row2;
   and MGM_BG_1( X_row2, A1, B1, C2 );
   wire X_row3;
   and MGM_BG_2( X_row3, A1, B2, C1 );
   wire X_row4;
   and MGM_BG_3( X_row4, A1, B2, C2 );
   wire X_row5;
   and MGM_BG_4( X_row5, A2, B1, C1 );
   wire X_row6;
   and MGM_BG_5( X_row6, A2, B1, C2 );
   wire X_row7;
   and MGM_BG_6( X_row7, A2, B2, C1 );
   wire X_row8;
   and MGM_BG_7( X_row8, A2, B2, C2 );
   or MGM_BG_8( X, X_row1, X_row2, X_row3, X_row4, X_row5, X_row6, X_row7, X_row8 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_OA222_U_0P5_func( X, A1, A2, B1, B2, C1, C2 );
   input A1, A2, B1, B2, C1, C2;
   output X;
   wire X_row1;
   and MGM_BG_0( X_row1, A1, B1, C1 );
   wire X_row2;
   and MGM_BG_1( X_row2, A1, B1, C2 );
   wire X_row3;
   and MGM_BG_2( X_row3, A1, B2, C1 );
   wire X_row4;
   and MGM_BG_3( X_row4, A1, B2, C2 );
   wire X_row5;
   and MGM_BG_4( X_row5, A2, B1, C1 );
   wire X_row6;
   and MGM_BG_5( X_row6, A2, B1, C2 );
   wire X_row7;
   and MGM_BG_6( X_row7, A2, B2, C1 );
   wire X_row8;
   and MGM_BG_7( X_row8, A2, B2, C2 );
   or MGM_BG_8( X, X_row1, X_row2, X_row3, X_row4, X_row5, X_row6, X_row7, X_row8 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_OA22_0P75_func( X, A1, A2, B1, B2 );
   input A1, A2, B1, B2;
   output X;
   wire X_row1;
   and MGM_BG_0( X_row1, A1, B1 );
   wire X_row2;
   and MGM_BG_1( X_row2, A1, B2 );
   wire X_row3;
   and MGM_BG_2( X_row3, A2, B1 );
   wire X_row4;
   and MGM_BG_3( X_row4, A2, B2 );
   or MGM_BG_4( X, X_row1, X_row2, X_row3, X_row4 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_OA22_1_func( X, A1, A2, B1, B2 );
   input A1, A2, B1, B2;
   output X;
   wire X_row1;
   and MGM_BG_0( X_row1, A1, B1 );
   wire X_row2;
   and MGM_BG_1( X_row2, A1, B2 );
   wire X_row3;
   and MGM_BG_2( X_row3, A2, B1 );
   wire X_row4;
   and MGM_BG_3( X_row4, A2, B2 );
   or MGM_BG_4( X, X_row1, X_row2, X_row3, X_row4 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_OA22_2_func( X, A1, A2, B1, B2 );
   input A1, A2, B1, B2;
   output X;
   wire X_row1;
   and MGM_BG_0( X_row1, A1, B1 );
   wire X_row2;
   and MGM_BG_1( X_row2, A1, B2 );
   wire X_row3;
   and MGM_BG_2( X_row3, A2, B1 );
   wire X_row4;
   and MGM_BG_3( X_row4, A2, B2 );
   or MGM_BG_4( X, X_row1, X_row2, X_row3, X_row4 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_OA22_4_func( X, A1, A2, B1, B2 );
   input A1, A2, B1, B2;
   output X;
   wire X_row1;
   and MGM_BG_0( X_row1, A1, B1 );
   wire X_row2;
   and MGM_BG_1( X_row2, A1, B2 );
   wire X_row3;
   and MGM_BG_2( X_row3, A2, B1 );
   wire X_row4;
   and MGM_BG_3( X_row4, A2, B2 );
   or MGM_BG_4( X, X_row1, X_row2, X_row3, X_row4 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_OA22_U_0P5_func( X, A1, A2, B1, B2 );
   input A1, A2, B1, B2;
   output X;
   wire X_row1;
   and MGM_BG_0( X_row1, A1, B1 );
   wire X_row2;
   and MGM_BG_1( X_row2, A1, B2 );
   wire X_row3;
   and MGM_BG_2( X_row3, A2, B1 );
   wire X_row4;
   and MGM_BG_3( X_row4, A2, B2 );
   or MGM_BG_4( X, X_row1, X_row2, X_row3, X_row4 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_OA2BB2_0P5_func( X, A1, A2, B1, B2 );
   input A1, A2, B1, B2;
   output X;
   wire A1_inv_for_SAEDRVT14_OA2BB2_0P5;
   not MGM_BG_0( A1_inv_for_SAEDRVT14_OA2BB2_0P5, A1 );
   wire X_row1;
   and MGM_BG_1( X_row1, A1_inv_for_SAEDRVT14_OA2BB2_0P5, B1 );
   wire X_row2;
   and MGM_BG_2( X_row2, A1_inv_for_SAEDRVT14_OA2BB2_0P5, B2 );
   wire A2_inv_for_SAEDRVT14_OA2BB2_0P5;
   not MGM_BG_3( A2_inv_for_SAEDRVT14_OA2BB2_0P5, A2 );
   wire X_row3;
   and MGM_BG_4( X_row3, A2_inv_for_SAEDRVT14_OA2BB2_0P5, B1 );
   wire X_row4;
   and MGM_BG_5( X_row4, A2_inv_for_SAEDRVT14_OA2BB2_0P5, B2 );
   or MGM_BG_6( X, X_row1, X_row2, X_row3, X_row4 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_OA2BB2_1_func( X, A1, A2, B1, B2 );
   input A1, A2, B1, B2;
   output X;
   wire A1_inv_for_SAEDRVT14_OA2BB2_1;
   not MGM_BG_0( A1_inv_for_SAEDRVT14_OA2BB2_1, A1 );
   wire X_row1;
   and MGM_BG_1( X_row1, A1_inv_for_SAEDRVT14_OA2BB2_1, B1 );
   wire X_row2;
   and MGM_BG_2( X_row2, A1_inv_for_SAEDRVT14_OA2BB2_1, B2 );
   wire A2_inv_for_SAEDRVT14_OA2BB2_1;
   not MGM_BG_3( A2_inv_for_SAEDRVT14_OA2BB2_1, A2 );
   wire X_row3;
   and MGM_BG_4( X_row3, A2_inv_for_SAEDRVT14_OA2BB2_1, B1 );
   wire X_row4;
   and MGM_BG_5( X_row4, A2_inv_for_SAEDRVT14_OA2BB2_1, B2 );
   or MGM_BG_6( X, X_row1, X_row2, X_row3, X_row4 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_OA2BB2_2_func( X, A1, A2, B1, B2 );
   input A1, A2, B1, B2;
   output X;
   wire A1_inv_for_SAEDRVT14_OA2BB2_2;
   not MGM_BG_0( A1_inv_for_SAEDRVT14_OA2BB2_2, A1 );
   wire X_row1;
   and MGM_BG_1( X_row1, A1_inv_for_SAEDRVT14_OA2BB2_2, B1 );
   wire X_row2;
   and MGM_BG_2( X_row2, A1_inv_for_SAEDRVT14_OA2BB2_2, B2 );
   wire A2_inv_for_SAEDRVT14_OA2BB2_2;
   not MGM_BG_3( A2_inv_for_SAEDRVT14_OA2BB2_2, A2 );
   wire X_row3;
   and MGM_BG_4( X_row3, A2_inv_for_SAEDRVT14_OA2BB2_2, B1 );
   wire X_row4;
   and MGM_BG_5( X_row4, A2_inv_for_SAEDRVT14_OA2BB2_2, B2 );
   or MGM_BG_6( X, X_row1, X_row2, X_row3, X_row4 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_OA2BB2_4_func( X, A1, A2, B1, B2 );
   input A1, A2, B1, B2;
   output X;
   wire A1_inv_for_SAEDRVT14_OA2BB2_4;
   not MGM_BG_0( A1_inv_for_SAEDRVT14_OA2BB2_4, A1 );
   wire X_row1;
   and MGM_BG_1( X_row1, A1_inv_for_SAEDRVT14_OA2BB2_4, B1 );
   wire X_row2;
   and MGM_BG_2( X_row2, A1_inv_for_SAEDRVT14_OA2BB2_4, B2 );
   wire A2_inv_for_SAEDRVT14_OA2BB2_4;
   not MGM_BG_3( A2_inv_for_SAEDRVT14_OA2BB2_4, A2 );
   wire X_row3;
   and MGM_BG_4( X_row3, A2_inv_for_SAEDRVT14_OA2BB2_4, B1 );
   wire X_row4;
   and MGM_BG_5( X_row4, A2_inv_for_SAEDRVT14_OA2BB2_4, B2 );
   or MGM_BG_6( X, X_row1, X_row2, X_row3, X_row4 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_OA2BB2_V1_0P5_func( X, A1, A2, B1, B2 );
   input A1, A2, B1, B2;
   output X;
   wire A1_inv_for_SAEDRVT14_OA2BB2_V1_0P5;
   not MGM_BG_0( A1_inv_for_SAEDRVT14_OA2BB2_V1_0P5, A1 );
   wire X_row1;
   and MGM_BG_1( X_row1, A1_inv_for_SAEDRVT14_OA2BB2_V1_0P5, B1 );
   wire X_row2;
   and MGM_BG_2( X_row2, A1_inv_for_SAEDRVT14_OA2BB2_V1_0P5, B2 );
   wire A2_inv_for_SAEDRVT14_OA2BB2_V1_0P5;
   not MGM_BG_3( A2_inv_for_SAEDRVT14_OA2BB2_V1_0P5, A2 );
   wire X_row3;
   and MGM_BG_4( X_row3, A2_inv_for_SAEDRVT14_OA2BB2_V1_0P5, B1 );
   wire X_row4;
   and MGM_BG_5( X_row4, A2_inv_for_SAEDRVT14_OA2BB2_V1_0P5, B2 );
   or MGM_BG_6( X, X_row1, X_row2, X_row3, X_row4 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_OA2BB2_V1_0P75_func( X, A1, A2, B1, B2 );
   input A1, A2, B1, B2;
   output X;
   wire A1_inv_for_SAEDRVT14_OA2BB2_V1_0P75;
   not MGM_BG_0( A1_inv_for_SAEDRVT14_OA2BB2_V1_0P75, A1 );
   wire X_row1;
   and MGM_BG_1( X_row1, A1_inv_for_SAEDRVT14_OA2BB2_V1_0P75, B1 );
   wire X_row2;
   and MGM_BG_2( X_row2, A1_inv_for_SAEDRVT14_OA2BB2_V1_0P75, B2 );
   wire A2_inv_for_SAEDRVT14_OA2BB2_V1_0P75;
   not MGM_BG_3( A2_inv_for_SAEDRVT14_OA2BB2_V1_0P75, A2 );
   wire X_row3;
   and MGM_BG_4( X_row3, A2_inv_for_SAEDRVT14_OA2BB2_V1_0P75, B1 );
   wire X_row4;
   and MGM_BG_5( X_row4, A2_inv_for_SAEDRVT14_OA2BB2_V1_0P75, B2 );
   or MGM_BG_6( X, X_row1, X_row2, X_row3, X_row4 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_OA2BB2_V1_1_func( X, A1, A2, B1, B2 );
   input A1, A2, B1, B2;
   output X;
   wire A1_inv_for_SAEDRVT14_OA2BB2_V1_1;
   not MGM_BG_0( A1_inv_for_SAEDRVT14_OA2BB2_V1_1, A1 );
   wire X_row1;
   and MGM_BG_1( X_row1, A1_inv_for_SAEDRVT14_OA2BB2_V1_1, B1 );
   wire X_row2;
   and MGM_BG_2( X_row2, A1_inv_for_SAEDRVT14_OA2BB2_V1_1, B2 );
   wire A2_inv_for_SAEDRVT14_OA2BB2_V1_1;
   not MGM_BG_3( A2_inv_for_SAEDRVT14_OA2BB2_V1_1, A2 );
   wire X_row3;
   and MGM_BG_4( X_row3, A2_inv_for_SAEDRVT14_OA2BB2_V1_1, B1 );
   wire X_row4;
   and MGM_BG_5( X_row4, A2_inv_for_SAEDRVT14_OA2BB2_V1_1, B2 );
   or MGM_BG_6( X, X_row1, X_row2, X_row3, X_row4 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_OA2BB2_V1_2_func( X, A1, A2, B1, B2 );
   input A1, A2, B1, B2;
   output X;
   wire A1_inv_for_SAEDRVT14_OA2BB2_V1_2;
   not MGM_BG_0( A1_inv_for_SAEDRVT14_OA2BB2_V1_2, A1 );
   wire X_row1;
   and MGM_BG_1( X_row1, A1_inv_for_SAEDRVT14_OA2BB2_V1_2, B1 );
   wire X_row2;
   and MGM_BG_2( X_row2, A1_inv_for_SAEDRVT14_OA2BB2_V1_2, B2 );
   wire A2_inv_for_SAEDRVT14_OA2BB2_V1_2;
   not MGM_BG_3( A2_inv_for_SAEDRVT14_OA2BB2_V1_2, A2 );
   wire X_row3;
   and MGM_BG_4( X_row3, A2_inv_for_SAEDRVT14_OA2BB2_V1_2, B1 );
   wire X_row4;
   and MGM_BG_5( X_row4, A2_inv_for_SAEDRVT14_OA2BB2_V1_2, B2 );
   or MGM_BG_6( X, X_row1, X_row2, X_row3, X_row4 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_OA2BB2_V1_4_func( X, A1, A2, B1, B2 );
   input A1, A2, B1, B2;
   output X;
   wire A1_inv_for_SAEDRVT14_OA2BB2_V1_4;
   not MGM_BG_0( A1_inv_for_SAEDRVT14_OA2BB2_V1_4, A1 );
   wire X_row1;
   and MGM_BG_1( X_row1, A1_inv_for_SAEDRVT14_OA2BB2_V1_4, B1 );
   wire X_row2;
   and MGM_BG_2( X_row2, A1_inv_for_SAEDRVT14_OA2BB2_V1_4, B2 );
   wire A2_inv_for_SAEDRVT14_OA2BB2_V1_4;
   not MGM_BG_3( A2_inv_for_SAEDRVT14_OA2BB2_V1_4, A2 );
   wire X_row3;
   and MGM_BG_4( X_row3, A2_inv_for_SAEDRVT14_OA2BB2_V1_4, B1 );
   wire X_row4;
   and MGM_BG_5( X_row4, A2_inv_for_SAEDRVT14_OA2BB2_V1_4, B2 );
   or MGM_BG_6( X, X_row1, X_row2, X_row3, X_row4 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_OA31_1_func( A3, A2, A1, B, X );
   input A1, A2, A3, B;
   output X;
   wire X_row1;
   and MGM_BG_0( X_row1, A1, B );
   wire X_row2;
   and MGM_BG_1( X_row2, A2, B );
   wire X_row3;
   and MGM_BG_2( X_row3, A3, B );
   or MGM_BG_3( X, X_row1, X_row2, X_row3 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_OA31_1P5_func( X, A1, A2, A3, B );
   input A1, A2, A3, B;
   output X;
   wire X_row1;
   and MGM_BG_0( X_row1, A1, B );
   wire X_row2;
   and MGM_BG_1( X_row2, A2, B );
   wire X_row3;
   and MGM_BG_2( X_row3, A3, B );
   or MGM_BG_3( X, X_row1, X_row2, X_row3 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_OA31_2_func( X, A1, A2, A3, B );
   input A1, A2, A3, B;
   output X;
   wire X_row1;
   and MGM_BG_0( X_row1, A1, B );
   wire X_row2;
   and MGM_BG_1( X_row2, A2, B );
   wire X_row3;
   and MGM_BG_2( X_row3, A3, B );
   or MGM_BG_3( X, X_row1, X_row2, X_row3 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_OA31_4_func( X, A1, A2, A3, B );
   input A1, A2, A3, B;
   output X;
   wire X_row1;
   and MGM_BG_0( X_row1, A1, B );
   wire X_row2;
   and MGM_BG_1( X_row2, A2, B );
   wire X_row3;
   and MGM_BG_2( X_row3, A3, B );
   or MGM_BG_3( X, X_row1, X_row2, X_row3 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_OA31_U_0P5_func( X, A1, A2, A3, B );
   input A1, A2, A3, B;
   output X;
   wire X_row1;
   and MGM_BG_0( X_row1, A1, B );
   wire X_row2;
   and MGM_BG_1( X_row2, A2, B );
   wire X_row3;
   and MGM_BG_2( X_row3, A3, B );
   or MGM_BG_3( X, X_row1, X_row2, X_row3 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_OA32_0P75_func( X, A1, A2, A3, B1, B2 );
   input A1, A2, A3, B1, B2;
   output X;
   wire X_row1;
   and MGM_BG_0( X_row1, A1, B1 );
   wire X_row2;
   and MGM_BG_1( X_row2, A1, B2 );
   wire X_row3;
   and MGM_BG_2( X_row3, A2, B1 );
   wire X_row4;
   and MGM_BG_3( X_row4, A2, B2 );
   wire X_row5;
   and MGM_BG_4( X_row5, A3, B1 );
   wire X_row6;
   and MGM_BG_5( X_row6, A3, B2 );
   or MGM_BG_6( X, X_row1, X_row2, X_row3, X_row4, X_row5, X_row6 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_OA32_1_func( X, A1, A2, A3, B1, B2 );
   input A1, A2, A3, B1, B2;
   output X;
   wire X_row1;
   and MGM_BG_0( X_row1, A1, B1 );
   wire X_row2;
   and MGM_BG_1( X_row2, A1, B2 );
   wire X_row3;
   and MGM_BG_2( X_row3, A2, B1 );
   wire X_row4;
   and MGM_BG_3( X_row4, A2, B2 );
   wire X_row5;
   and MGM_BG_4( X_row5, A3, B1 );
   wire X_row6;
   and MGM_BG_5( X_row6, A3, B2 );
   or MGM_BG_6( X, X_row1, X_row2, X_row3, X_row4, X_row5, X_row6 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_OA32_2_func( X, A1, A2, A3, B1, B2 );
   input A1, A2, A3, B1, B2;
   output X;
   wire X_row1;
   and MGM_BG_0( X_row1, A1, B1 );
   wire X_row2;
   and MGM_BG_1( X_row2, A1, B2 );
   wire X_row3;
   and MGM_BG_2( X_row3, A2, B1 );
   wire X_row4;
   and MGM_BG_3( X_row4, A2, B2 );
   wire X_row5;
   and MGM_BG_4( X_row5, A3, B1 );
   wire X_row6;
   and MGM_BG_5( X_row6, A3, B2 );
   or MGM_BG_6( X, X_row1, X_row2, X_row3, X_row4, X_row5, X_row6 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_OA32_4_func( X, A1, A2, A3, B1, B2 );
   input A1, A2, A3, B1, B2;
   output X;
   wire X_row1;
   and MGM_BG_0( X_row1, A1, B1 );
   wire X_row2;
   and MGM_BG_1( X_row2, A1, B2 );
   wire X_row3;
   and MGM_BG_2( X_row3, A2, B1 );
   wire X_row4;
   and MGM_BG_3( X_row4, A2, B2 );
   wire X_row5;
   and MGM_BG_4( X_row5, A3, B1 );
   wire X_row6;
   and MGM_BG_5( X_row6, A3, B2 );
   or MGM_BG_6( X, X_row1, X_row2, X_row3, X_row4, X_row5, X_row6 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_OA32_U_0P5_func( X, A1, A2, A3, B1, B2 );
   input A1, A2, A3, B1, B2;
   output X;
   wire X_row1;
   and MGM_BG_0( X_row1, A1, B1 );
   wire X_row2;
   and MGM_BG_1( X_row2, A1, B2 );
   wire X_row3;
   and MGM_BG_2( X_row3, A2, B1 );
   wire X_row4;
   and MGM_BG_3( X_row4, A2, B2 );
   wire X_row5;
   and MGM_BG_4( X_row5, A3, B1 );
   wire X_row6;
   and MGM_BG_5( X_row6, A3, B2 );
   or MGM_BG_6( X, X_row1, X_row2, X_row3, X_row4, X_row5, X_row6 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_OA33_1_func( X, A1, A2, A3, B1, B2, B3 );
   input A1, A2, A3, B1, B2, B3;
   output X;
   wire X_row1;
   and MGM_BG_0( X_row1, A1, B1 );
   wire X_row2;
   and MGM_BG_1( X_row2, A1, B2 );
   wire X_row3;
   and MGM_BG_2( X_row3, A1, B3 );
   wire X_row4;
   and MGM_BG_3( X_row4, A2, B1 );
   wire X_row5;
   and MGM_BG_4( X_row5, A2, B2 );
   wire X_row6;
   and MGM_BG_5( X_row6, A2, B3 );
   wire X_row7;
   and MGM_BG_6( X_row7, A3, B1 );
   wire X_row8;
   and MGM_BG_7( X_row8, A3, B2 );
   wire X_row9;
   and MGM_BG_8( X_row9, A3, B3 );
   or MGM_BG_9( X, X_row1, X_row2, X_row3, X_row4, X_row5, X_row6, X_row7, X_row8, X_row9 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_OA33_2_func( X, A1, A2, A3, B1, B2, B3 );
   input A1, A2, A3, B1, B2, B3;
   output X;
   wire X_row1;
   and MGM_BG_0( X_row1, A1, B1 );
   wire X_row2;
   and MGM_BG_1( X_row2, A1, B2 );
   wire X_row3;
   and MGM_BG_2( X_row3, A1, B3 );
   wire X_row4;
   and MGM_BG_3( X_row4, A2, B1 );
   wire X_row5;
   and MGM_BG_4( X_row5, A2, B2 );
   wire X_row6;
   and MGM_BG_5( X_row6, A2, B3 );
   wire X_row7;
   and MGM_BG_6( X_row7, A3, B1 );
   wire X_row8;
   and MGM_BG_7( X_row8, A3, B2 );
   wire X_row9;
   and MGM_BG_8( X_row9, A3, B3 );
   or MGM_BG_9( X, X_row1, X_row2, X_row3, X_row4, X_row5, X_row6, X_row7, X_row8, X_row9 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_OA33_4_func( X, A1, A2, A3, B1, B2, B3 );
   input A1, A2, A3, B1, B2, B3;
   output X;
   wire X_row1;
   and MGM_BG_0( X_row1, A1, B1 );
   wire X_row2;
   and MGM_BG_1( X_row2, A1, B2 );
   wire X_row3;
   and MGM_BG_2( X_row3, A1, B3 );
   wire X_row4;
   and MGM_BG_3( X_row4, A2, B1 );
   wire X_row5;
   and MGM_BG_4( X_row5, A2, B2 );
   wire X_row6;
   and MGM_BG_5( X_row6, A2, B3 );
   wire X_row7;
   and MGM_BG_6( X_row7, A3, B1 );
   wire X_row8;
   and MGM_BG_7( X_row8, A3, B2 );
   wire X_row9;
   and MGM_BG_8( X_row9, A3, B3 );
   or MGM_BG_9( X, X_row1, X_row2, X_row3, X_row4, X_row5, X_row6, X_row7, X_row8, X_row9 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_OA33_U_0P5_func( X, A1, A2, A3, B1, B2, B3 );
   input A1, A2, A3, B1, B2, B3;
   output X;
   wire X_row1;
   and MGM_BG_0( X_row1, A1, B1 );
   wire X_row2;
   and MGM_BG_1( X_row2, A1, B2 );
   wire X_row3;
   and MGM_BG_2( X_row3, A1, B3 );
   wire X_row4;
   and MGM_BG_3( X_row4, A2, B1 );
   wire X_row5;
   and MGM_BG_4( X_row5, A2, B2 );
   wire X_row6;
   and MGM_BG_5( X_row6, A2, B3 );
   wire X_row7;
   and MGM_BG_6( X_row7, A3, B1 );
   wire X_row8;
   and MGM_BG_7( X_row8, A3, B2 );
   wire X_row9;
   and MGM_BG_8( X_row9, A3, B3 );
   or MGM_BG_9( X, X_row1, X_row2, X_row3, X_row4, X_row5, X_row6, X_row7, X_row8, X_row9 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_OAI211_0P5_func( X, A1, A2, B1, B2 );
   input A1, A2, B1, B2;
   output X;
   wire A1_inv_for_SAEDRVT14_OAI211_0P5;
   not MGM_BG_0( A1_inv_for_SAEDRVT14_OAI211_0P5, A1 );
   wire A2_inv_for_SAEDRVT14_OAI211_0P5;
   not MGM_BG_1( A2_inv_for_SAEDRVT14_OAI211_0P5, A2 );
   wire X_row1;
   and MGM_BG_2( X_row1, A1_inv_for_SAEDRVT14_OAI211_0P5, A2_inv_for_SAEDRVT14_OAI211_0P5 );
   wire B1_inv_for_SAEDRVT14_OAI211_0P5;
   not MGM_BG_3( B1_inv_for_SAEDRVT14_OAI211_0P5, B1 );
   wire B2_inv_for_SAEDRVT14_OAI211_0P5;
   not MGM_BG_4( B2_inv_for_SAEDRVT14_OAI211_0P5, B2 );
   or MGM_BG_5( X, X_row1, B1_inv_for_SAEDRVT14_OAI211_0P5, B2_inv_for_SAEDRVT14_OAI211_0P5 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_OAI211_1_func( X, A1, A2, B1, B2 );
   input A1, A2, B1, B2;
   output X;
   wire A1_inv_for_SAEDRVT14_OAI211_1;
   not MGM_BG_0( A1_inv_for_SAEDRVT14_OAI211_1, A1 );
   wire A2_inv_for_SAEDRVT14_OAI211_1;
   not MGM_BG_1( A2_inv_for_SAEDRVT14_OAI211_1, A2 );
   wire X_row1;
   and MGM_BG_2( X_row1, A1_inv_for_SAEDRVT14_OAI211_1, A2_inv_for_SAEDRVT14_OAI211_1 );
   wire B1_inv_for_SAEDRVT14_OAI211_1;
   not MGM_BG_3( B1_inv_for_SAEDRVT14_OAI211_1, B1 );
   wire B2_inv_for_SAEDRVT14_OAI211_1;
   not MGM_BG_4( B2_inv_for_SAEDRVT14_OAI211_1, B2 );
   or MGM_BG_5( X, X_row1, B1_inv_for_SAEDRVT14_OAI211_1, B2_inv_for_SAEDRVT14_OAI211_1 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_OAI211_2_func( X, A1, A2, B1, B2 );
   input A1, A2, B1, B2;
   output X;
   wire A1_inv_for_SAEDRVT14_OAI211_2;
   not MGM_BG_0( A1_inv_for_SAEDRVT14_OAI211_2, A1 );
   wire A2_inv_for_SAEDRVT14_OAI211_2;
   not MGM_BG_1( A2_inv_for_SAEDRVT14_OAI211_2, A2 );
   wire X_row1;
   and MGM_BG_2( X_row1, A1_inv_for_SAEDRVT14_OAI211_2, A2_inv_for_SAEDRVT14_OAI211_2 );
   wire B1_inv_for_SAEDRVT14_OAI211_2;
   not MGM_BG_3( B1_inv_for_SAEDRVT14_OAI211_2, B1 );
   wire B2_inv_for_SAEDRVT14_OAI211_2;
   not MGM_BG_4( B2_inv_for_SAEDRVT14_OAI211_2, B2 );
   or MGM_BG_5( X, X_row1, B1_inv_for_SAEDRVT14_OAI211_2, B2_inv_for_SAEDRVT14_OAI211_2 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_OAI211_4_func( X, A1, A2, B1, B2 );
   input A1, A2, B1, B2;
   output X;
   wire A1_inv_for_SAEDRVT14_OAI211_4;
   not MGM_BG_0( A1_inv_for_SAEDRVT14_OAI211_4, A1 );
   wire A2_inv_for_SAEDRVT14_OAI211_4;
   not MGM_BG_1( A2_inv_for_SAEDRVT14_OAI211_4, A2 );
   wire X_row1;
   and MGM_BG_2( X_row1, A1_inv_for_SAEDRVT14_OAI211_4, A2_inv_for_SAEDRVT14_OAI211_4 );
   wire B1_inv_for_SAEDRVT14_OAI211_4;
   not MGM_BG_3( B1_inv_for_SAEDRVT14_OAI211_4, B1 );
   wire B2_inv_for_SAEDRVT14_OAI211_4;
   not MGM_BG_4( B2_inv_for_SAEDRVT14_OAI211_4, B2 );
   or MGM_BG_5( X, X_row1, B1_inv_for_SAEDRVT14_OAI211_4, B2_inv_for_SAEDRVT14_OAI211_4 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_OAI21_0P5_func( X, A1, A2, B );
   input A1, A2, B;
   output X;
   wire A1_inv_for_SAEDRVT14_OAI21_0P5;
   not MGM_BG_0( A1_inv_for_SAEDRVT14_OAI21_0P5, A1 );
   wire A2_inv_for_SAEDRVT14_OAI21_0P5;
   not MGM_BG_1( A2_inv_for_SAEDRVT14_OAI21_0P5, A2 );
   wire X_row1;
   and MGM_BG_2( X_row1, A1_inv_for_SAEDRVT14_OAI21_0P5, A2_inv_for_SAEDRVT14_OAI21_0P5 );
   wire B_inv_for_SAEDRVT14_OAI21_0P5;
   not MGM_BG_3( B_inv_for_SAEDRVT14_OAI21_0P5, B );
   or MGM_BG_4( X, X_row1, B_inv_for_SAEDRVT14_OAI21_0P5 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_OAI21_0P75_func( X, A1, A2, B );
   input A1, A2, B;
   output X;
   wire A1_inv_for_SAEDRVT14_OAI21_0P75;
   not MGM_BG_0( A1_inv_for_SAEDRVT14_OAI21_0P75, A1 );
   wire A2_inv_for_SAEDRVT14_OAI21_0P75;
   not MGM_BG_1( A2_inv_for_SAEDRVT14_OAI21_0P75, A2 );
   wire X_row1;
   and MGM_BG_2( X_row1, A1_inv_for_SAEDRVT14_OAI21_0P75, A2_inv_for_SAEDRVT14_OAI21_0P75 );
   wire B_inv_for_SAEDRVT14_OAI21_0P75;
   not MGM_BG_3( B_inv_for_SAEDRVT14_OAI21_0P75, B );
   or MGM_BG_4( X, X_row1, B_inv_for_SAEDRVT14_OAI21_0P75 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_OAI21_1_func( X, A1, A2, B );
   input A1, A2, B;
   output X;
   wire A1_inv_for_SAEDRVT14_OAI21_1;
   not MGM_BG_0( A1_inv_for_SAEDRVT14_OAI21_1, A1 );
   wire A2_inv_for_SAEDRVT14_OAI21_1;
   not MGM_BG_1( A2_inv_for_SAEDRVT14_OAI21_1, A2 );
   wire X_row1;
   and MGM_BG_2( X_row1, A1_inv_for_SAEDRVT14_OAI21_1, A2_inv_for_SAEDRVT14_OAI21_1 );
   wire B_inv_for_SAEDRVT14_OAI21_1;
   not MGM_BG_3( B_inv_for_SAEDRVT14_OAI21_1, B );
   or MGM_BG_4( X, X_row1, B_inv_for_SAEDRVT14_OAI21_1 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_OAI21_1P5_func( X, A1, A2, B );
   input A1, A2, B;
   output X;
   wire A1_inv_for_SAEDRVT14_OAI21_1P5;
   not MGM_BG_0( A1_inv_for_SAEDRVT14_OAI21_1P5, A1 );
   wire A2_inv_for_SAEDRVT14_OAI21_1P5;
   not MGM_BG_1( A2_inv_for_SAEDRVT14_OAI21_1P5, A2 );
   wire X_row1;
   and MGM_BG_2( X_row1, A1_inv_for_SAEDRVT14_OAI21_1P5, A2_inv_for_SAEDRVT14_OAI21_1P5 );
   wire B_inv_for_SAEDRVT14_OAI21_1P5;
   not MGM_BG_3( B_inv_for_SAEDRVT14_OAI21_1P5, B );
   or MGM_BG_4( X, X_row1, B_inv_for_SAEDRVT14_OAI21_1P5 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_OAI21_2_func( X, A1, A2, B );
   input A1, A2, B;
   output X;
   wire A1_inv_for_SAEDRVT14_OAI21_2;
   not MGM_BG_0( A1_inv_for_SAEDRVT14_OAI21_2, A1 );
   wire A2_inv_for_SAEDRVT14_OAI21_2;
   not MGM_BG_1( A2_inv_for_SAEDRVT14_OAI21_2, A2 );
   wire X_row1;
   and MGM_BG_2( X_row1, A1_inv_for_SAEDRVT14_OAI21_2, A2_inv_for_SAEDRVT14_OAI21_2 );
   wire B_inv_for_SAEDRVT14_OAI21_2;
   not MGM_BG_3( B_inv_for_SAEDRVT14_OAI21_2, B );
   or MGM_BG_4( X, X_row1, B_inv_for_SAEDRVT14_OAI21_2 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_OAI21_3_func( X, A1, A2, B );
   input A1, A2, B;
   output X;
   wire A1_inv_for_SAEDRVT14_OAI21_3;
   not MGM_BG_0( A1_inv_for_SAEDRVT14_OAI21_3, A1 );
   wire A2_inv_for_SAEDRVT14_OAI21_3;
   not MGM_BG_1( A2_inv_for_SAEDRVT14_OAI21_3, A2 );
   wire X_row1;
   and MGM_BG_2( X_row1, A1_inv_for_SAEDRVT14_OAI21_3, A2_inv_for_SAEDRVT14_OAI21_3 );
   wire B_inv_for_SAEDRVT14_OAI21_3;
   not MGM_BG_3( B_inv_for_SAEDRVT14_OAI21_3, B );
   or MGM_BG_4( X, X_row1, B_inv_for_SAEDRVT14_OAI21_3 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_OAI21_4_func( X, A1, A2, B );
   input A1, A2, B;
   output X;
   wire A1_inv_for_SAEDRVT14_OAI21_4;
   not MGM_BG_0( A1_inv_for_SAEDRVT14_OAI21_4, A1 );
   wire A2_inv_for_SAEDRVT14_OAI21_4;
   not MGM_BG_1( A2_inv_for_SAEDRVT14_OAI21_4, A2 );
   wire X_row1;
   and MGM_BG_2( X_row1, A1_inv_for_SAEDRVT14_OAI21_4, A2_inv_for_SAEDRVT14_OAI21_4 );
   wire B_inv_for_SAEDRVT14_OAI21_4;
   not MGM_BG_3( B_inv_for_SAEDRVT14_OAI21_4, B );
   or MGM_BG_4( X, X_row1, B_inv_for_SAEDRVT14_OAI21_4 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_OAI21_V1_4_func( X, A1, A2, B );
   input A1, A2, B;
   output X;
   wire A1_inv_for_SAEDRVT14_OAI21_V1_4;
   not MGM_BG_0( A1_inv_for_SAEDRVT14_OAI21_V1_4, A1 );
   wire A2_inv_for_SAEDRVT14_OAI21_V1_4;
   not MGM_BG_1( A2_inv_for_SAEDRVT14_OAI21_V1_4, A2 );
   wire X_row1;
   and MGM_BG_2( X_row1, A1_inv_for_SAEDRVT14_OAI21_V1_4, A2_inv_for_SAEDRVT14_OAI21_V1_4 );
   wire B_inv_for_SAEDRVT14_OAI21_V1_4;
   not MGM_BG_3( B_inv_for_SAEDRVT14_OAI21_V1_4, B );
   or MGM_BG_4( X, X_row1, B_inv_for_SAEDRVT14_OAI21_V1_4 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_OAI21_V1_6_func( X, A1, A2, B );
   input A1, A2, B;
   output X;
   wire A1_inv_for_SAEDRVT14_OAI21_V1_6;
   not MGM_BG_0( A1_inv_for_SAEDRVT14_OAI21_V1_6, A1 );
   wire A2_inv_for_SAEDRVT14_OAI21_V1_6;
   not MGM_BG_1( A2_inv_for_SAEDRVT14_OAI21_V1_6, A2 );
   wire X_row1;
   and MGM_BG_2( X_row1, A1_inv_for_SAEDRVT14_OAI21_V1_6, A2_inv_for_SAEDRVT14_OAI21_V1_6 );
   wire B_inv_for_SAEDRVT14_OAI21_V1_6;
   not MGM_BG_3( B_inv_for_SAEDRVT14_OAI21_V1_6, B );
   or MGM_BG_4( X, X_row1, B_inv_for_SAEDRVT14_OAI21_V1_6 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_OAI21_V1_8_func( X, A1, A2, B );
   input A1, A2, B;
   output X;
   wire A1_inv_for_SAEDRVT14_OAI21_V1_8;
   not MGM_BG_0( A1_inv_for_SAEDRVT14_OAI21_V1_8, A1 );
   wire A2_inv_for_SAEDRVT14_OAI21_V1_8;
   not MGM_BG_1( A2_inv_for_SAEDRVT14_OAI21_V1_8, A2 );
   wire X_row1;
   and MGM_BG_2( X_row1, A1_inv_for_SAEDRVT14_OAI21_V1_8, A2_inv_for_SAEDRVT14_OAI21_V1_8 );
   wire B_inv_for_SAEDRVT14_OAI21_V1_8;
   not MGM_BG_3( B_inv_for_SAEDRVT14_OAI21_V1_8, B );
   or MGM_BG_4( X, X_row1, B_inv_for_SAEDRVT14_OAI21_V1_8 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_OAI221_0P5_func( X, A1, A2, B1, B2, C );
   input A1, A2, B1, B2, C;
   output X;
   wire A1_inv_for_SAEDRVT14_OAI221_0P5;
   not MGM_BG_0( A1_inv_for_SAEDRVT14_OAI221_0P5, A1 );
   wire A2_inv_for_SAEDRVT14_OAI221_0P5;
   not MGM_BG_1( A2_inv_for_SAEDRVT14_OAI221_0P5, A2 );
   wire X_row1;
   and MGM_BG_2( X_row1, A1_inv_for_SAEDRVT14_OAI221_0P5, A2_inv_for_SAEDRVT14_OAI221_0P5 );
   wire B1_inv_for_SAEDRVT14_OAI221_0P5;
   not MGM_BG_3( B1_inv_for_SAEDRVT14_OAI221_0P5, B1 );
   wire B2_inv_for_SAEDRVT14_OAI221_0P5;
   not MGM_BG_4( B2_inv_for_SAEDRVT14_OAI221_0P5, B2 );
   wire X_row2;
   and MGM_BG_5( X_row2, B1_inv_for_SAEDRVT14_OAI221_0P5, B2_inv_for_SAEDRVT14_OAI221_0P5 );
   wire C_inv_for_SAEDRVT14_OAI221_0P5;
   not MGM_BG_6( C_inv_for_SAEDRVT14_OAI221_0P5, C );
   or MGM_BG_7( X, X_row1, X_row2, C_inv_for_SAEDRVT14_OAI221_0P5 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_OAI221_1_func( X, A1, A2, B1, B2, C );
   input A1, A2, B1, B2, C;
   output X;
   wire A1_inv_for_SAEDRVT14_OAI221_1;
   not MGM_BG_0( A1_inv_for_SAEDRVT14_OAI221_1, A1 );
   wire A2_inv_for_SAEDRVT14_OAI221_1;
   not MGM_BG_1( A2_inv_for_SAEDRVT14_OAI221_1, A2 );
   wire X_row1;
   and MGM_BG_2( X_row1, A1_inv_for_SAEDRVT14_OAI221_1, A2_inv_for_SAEDRVT14_OAI221_1 );
   wire B1_inv_for_SAEDRVT14_OAI221_1;
   not MGM_BG_3( B1_inv_for_SAEDRVT14_OAI221_1, B1 );
   wire B2_inv_for_SAEDRVT14_OAI221_1;
   not MGM_BG_4( B2_inv_for_SAEDRVT14_OAI221_1, B2 );
   wire X_row2;
   and MGM_BG_5( X_row2, B1_inv_for_SAEDRVT14_OAI221_1, B2_inv_for_SAEDRVT14_OAI221_1 );
   wire C_inv_for_SAEDRVT14_OAI221_1;
   not MGM_BG_6( C_inv_for_SAEDRVT14_OAI221_1, C );
   or MGM_BG_7( X, X_row1, X_row2, C_inv_for_SAEDRVT14_OAI221_1 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_OAI221_2_func( X, A1, A2, B1, B2, C );
   input A1, A2, B1, B2, C;
   output X;
   wire A1_inv_for_SAEDRVT14_OAI221_2;
   not MGM_BG_0( A1_inv_for_SAEDRVT14_OAI221_2, A1 );
   wire A2_inv_for_SAEDRVT14_OAI221_2;
   not MGM_BG_1( A2_inv_for_SAEDRVT14_OAI221_2, A2 );
   wire X_row1;
   and MGM_BG_2( X_row1, A1_inv_for_SAEDRVT14_OAI221_2, A2_inv_for_SAEDRVT14_OAI221_2 );
   wire B1_inv_for_SAEDRVT14_OAI221_2;
   not MGM_BG_3( B1_inv_for_SAEDRVT14_OAI221_2, B1 );
   wire B2_inv_for_SAEDRVT14_OAI221_2;
   not MGM_BG_4( B2_inv_for_SAEDRVT14_OAI221_2, B2 );
   wire X_row2;
   and MGM_BG_5( X_row2, B1_inv_for_SAEDRVT14_OAI221_2, B2_inv_for_SAEDRVT14_OAI221_2 );
   wire C_inv_for_SAEDRVT14_OAI221_2;
   not MGM_BG_6( C_inv_for_SAEDRVT14_OAI221_2, C );
   or MGM_BG_7( X, X_row1, X_row2, C_inv_for_SAEDRVT14_OAI221_2 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_OAI221_4_func( X, A1, A2, B1, B2, C );
   input A1, A2, B1, B2, C;
   output X;
   wire A1_inv_for_SAEDRVT14_OAI221_4;
   not MGM_BG_0( A1_inv_for_SAEDRVT14_OAI221_4, A1 );
   wire A2_inv_for_SAEDRVT14_OAI221_4;
   not MGM_BG_1( A2_inv_for_SAEDRVT14_OAI221_4, A2 );
   wire X_row1;
   and MGM_BG_2( X_row1, A1_inv_for_SAEDRVT14_OAI221_4, A2_inv_for_SAEDRVT14_OAI221_4 );
   wire B1_inv_for_SAEDRVT14_OAI221_4;
   not MGM_BG_3( B1_inv_for_SAEDRVT14_OAI221_4, B1 );
   wire B2_inv_for_SAEDRVT14_OAI221_4;
   not MGM_BG_4( B2_inv_for_SAEDRVT14_OAI221_4, B2 );
   wire X_row2;
   and MGM_BG_5( X_row2, B1_inv_for_SAEDRVT14_OAI221_4, B2_inv_for_SAEDRVT14_OAI221_4 );
   wire C_inv_for_SAEDRVT14_OAI221_4;
   not MGM_BG_6( C_inv_for_SAEDRVT14_OAI221_4, C );
   or MGM_BG_7( X, X_row1, X_row2, C_inv_for_SAEDRVT14_OAI221_4 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_OAI222_0P5_func( X, A1, A2, B1, B2, C1, C2 );
   input A1, A2, B1, B2, C1, C2;
   output X;
   wire A1_inv_for_SAEDRVT14_OAI222_0P5;
   not MGM_BG_0( A1_inv_for_SAEDRVT14_OAI222_0P5, A1 );
   wire A2_inv_for_SAEDRVT14_OAI222_0P5;
   not MGM_BG_1( A2_inv_for_SAEDRVT14_OAI222_0P5, A2 );
   wire X_row1;
   and MGM_BG_2( X_row1, A1_inv_for_SAEDRVT14_OAI222_0P5, A2_inv_for_SAEDRVT14_OAI222_0P5 );
   wire B1_inv_for_SAEDRVT14_OAI222_0P5;
   not MGM_BG_3( B1_inv_for_SAEDRVT14_OAI222_0P5, B1 );
   wire B2_inv_for_SAEDRVT14_OAI222_0P5;
   not MGM_BG_4( B2_inv_for_SAEDRVT14_OAI222_0P5, B2 );
   wire X_row2;
   and MGM_BG_5( X_row2, B1_inv_for_SAEDRVT14_OAI222_0P5, B2_inv_for_SAEDRVT14_OAI222_0P5 );
   wire C1_inv_for_SAEDRVT14_OAI222_0P5;
   not MGM_BG_6( C1_inv_for_SAEDRVT14_OAI222_0P5, C1 );
   wire C2_inv_for_SAEDRVT14_OAI222_0P5;
   not MGM_BG_7( C2_inv_for_SAEDRVT14_OAI222_0P5, C2 );
   wire X_row3;
   and MGM_BG_8( X_row3, C1_inv_for_SAEDRVT14_OAI222_0P5, C2_inv_for_SAEDRVT14_OAI222_0P5 );
   or MGM_BG_9( X, X_row1, X_row2, X_row3 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_OAI222_1_func( X, A1, A2, B1, B2, C1, C2 );
   input A1, A2, B1, B2, C1, C2;
   output X;
   wire A1_inv_for_SAEDRVT14_OAI222_1;
   not MGM_BG_0( A1_inv_for_SAEDRVT14_OAI222_1, A1 );
   wire A2_inv_for_SAEDRVT14_OAI222_1;
   not MGM_BG_1( A2_inv_for_SAEDRVT14_OAI222_1, A2 );
   wire X_row1;
   and MGM_BG_2( X_row1, A1_inv_for_SAEDRVT14_OAI222_1, A2_inv_for_SAEDRVT14_OAI222_1 );
   wire B1_inv_for_SAEDRVT14_OAI222_1;
   not MGM_BG_3( B1_inv_for_SAEDRVT14_OAI222_1, B1 );
   wire B2_inv_for_SAEDRVT14_OAI222_1;
   not MGM_BG_4( B2_inv_for_SAEDRVT14_OAI222_1, B2 );
   wire X_row2;
   and MGM_BG_5( X_row2, B1_inv_for_SAEDRVT14_OAI222_1, B2_inv_for_SAEDRVT14_OAI222_1 );
   wire C1_inv_for_SAEDRVT14_OAI222_1;
   not MGM_BG_6( C1_inv_for_SAEDRVT14_OAI222_1, C1 );
   wire C2_inv_for_SAEDRVT14_OAI222_1;
   not MGM_BG_7( C2_inv_for_SAEDRVT14_OAI222_1, C2 );
   wire X_row3;
   and MGM_BG_8( X_row3, C1_inv_for_SAEDRVT14_OAI222_1, C2_inv_for_SAEDRVT14_OAI222_1 );
   or MGM_BG_9( X, X_row1, X_row2, X_row3 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_OAI222_2_func( X, A1, A2, B1, B2, C1, C2 );
   input A1, A2, B1, B2, C1, C2;
   output X;
   wire A1_inv_for_SAEDRVT14_OAI222_2;
   not MGM_BG_0( A1_inv_for_SAEDRVT14_OAI222_2, A1 );
   wire A2_inv_for_SAEDRVT14_OAI222_2;
   not MGM_BG_1( A2_inv_for_SAEDRVT14_OAI222_2, A2 );
   wire X_row1;
   and MGM_BG_2( X_row1, A1_inv_for_SAEDRVT14_OAI222_2, A2_inv_for_SAEDRVT14_OAI222_2 );
   wire B1_inv_for_SAEDRVT14_OAI222_2;
   not MGM_BG_3( B1_inv_for_SAEDRVT14_OAI222_2, B1 );
   wire B2_inv_for_SAEDRVT14_OAI222_2;
   not MGM_BG_4( B2_inv_for_SAEDRVT14_OAI222_2, B2 );
   wire X_row2;
   and MGM_BG_5( X_row2, B1_inv_for_SAEDRVT14_OAI222_2, B2_inv_for_SAEDRVT14_OAI222_2 );
   wire C1_inv_for_SAEDRVT14_OAI222_2;
   not MGM_BG_6( C1_inv_for_SAEDRVT14_OAI222_2, C1 );
   wire C2_inv_for_SAEDRVT14_OAI222_2;
   not MGM_BG_7( C2_inv_for_SAEDRVT14_OAI222_2, C2 );
   wire X_row3;
   and MGM_BG_8( X_row3, C1_inv_for_SAEDRVT14_OAI222_2, C2_inv_for_SAEDRVT14_OAI222_2 );
   or MGM_BG_9( X, X_row1, X_row2, X_row3 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_OAI222_4_func( X, A1, A2, B1, B2, C1, C2 );
   input A1, A2, B1, B2, C1, C2;
   output X;
   wire A1_inv_for_SAEDRVT14_OAI222_4;
   not MGM_BG_0( A1_inv_for_SAEDRVT14_OAI222_4, A1 );
   wire A2_inv_for_SAEDRVT14_OAI222_4;
   not MGM_BG_1( A2_inv_for_SAEDRVT14_OAI222_4, A2 );
   wire X_row1;
   and MGM_BG_2( X_row1, A1_inv_for_SAEDRVT14_OAI222_4, A2_inv_for_SAEDRVT14_OAI222_4 );
   wire B1_inv_for_SAEDRVT14_OAI222_4;
   not MGM_BG_3( B1_inv_for_SAEDRVT14_OAI222_4, B1 );
   wire B2_inv_for_SAEDRVT14_OAI222_4;
   not MGM_BG_4( B2_inv_for_SAEDRVT14_OAI222_4, B2 );
   wire X_row2;
   and MGM_BG_5( X_row2, B1_inv_for_SAEDRVT14_OAI222_4, B2_inv_for_SAEDRVT14_OAI222_4 );
   wire C1_inv_for_SAEDRVT14_OAI222_4;
   not MGM_BG_6( C1_inv_for_SAEDRVT14_OAI222_4, C1 );
   wire C2_inv_for_SAEDRVT14_OAI222_4;
   not MGM_BG_7( C2_inv_for_SAEDRVT14_OAI222_4, C2 );
   wire X_row3;
   and MGM_BG_8( X_row3, C1_inv_for_SAEDRVT14_OAI222_4, C2_inv_for_SAEDRVT14_OAI222_4 );
   or MGM_BG_9( X, X_row1, X_row2, X_row3 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_OAI22_0P5_func( X, A1, A2, B1, B2 );
   input A1, A2, B1, B2;
   output X;
   wire A1_inv_for_SAEDRVT14_OAI22_0P5;
   not MGM_BG_0( A1_inv_for_SAEDRVT14_OAI22_0P5, A1 );
   wire A2_inv_for_SAEDRVT14_OAI22_0P5;
   not MGM_BG_1( A2_inv_for_SAEDRVT14_OAI22_0P5, A2 );
   wire X_row1;
   and MGM_BG_2( X_row1, A1_inv_for_SAEDRVT14_OAI22_0P5, A2_inv_for_SAEDRVT14_OAI22_0P5 );
   wire B1_inv_for_SAEDRVT14_OAI22_0P5;
   not MGM_BG_3( B1_inv_for_SAEDRVT14_OAI22_0P5, B1 );
   wire B2_inv_for_SAEDRVT14_OAI22_0P5;
   not MGM_BG_4( B2_inv_for_SAEDRVT14_OAI22_0P5, B2 );
   wire X_row2;
   and MGM_BG_5( X_row2, B1_inv_for_SAEDRVT14_OAI22_0P5, B2_inv_for_SAEDRVT14_OAI22_0P5 );
   or MGM_BG_6( X, X_row1, X_row2 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_OAI22_0P75_func( X, A1, A2, B1, B2 );
   input A1, A2, B1, B2;
   output X;
   wire A1_inv_for_SAEDRVT14_OAI22_0P75;
   not MGM_BG_0( A1_inv_for_SAEDRVT14_OAI22_0P75, A1 );
   wire A2_inv_for_SAEDRVT14_OAI22_0P75;
   not MGM_BG_1( A2_inv_for_SAEDRVT14_OAI22_0P75, A2 );
   wire X_row1;
   and MGM_BG_2( X_row1, A1_inv_for_SAEDRVT14_OAI22_0P75, A2_inv_for_SAEDRVT14_OAI22_0P75 );
   wire B1_inv_for_SAEDRVT14_OAI22_0P75;
   not MGM_BG_3( B1_inv_for_SAEDRVT14_OAI22_0P75, B1 );
   wire B2_inv_for_SAEDRVT14_OAI22_0P75;
   not MGM_BG_4( B2_inv_for_SAEDRVT14_OAI22_0P75, B2 );
   wire X_row2;
   and MGM_BG_5( X_row2, B1_inv_for_SAEDRVT14_OAI22_0P75, B2_inv_for_SAEDRVT14_OAI22_0P75 );
   or MGM_BG_6( X, X_row1, X_row2 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_OAI22_1_func( X, A1, A2, B1, B2 );
   input A1, A2, B1, B2;
   output X;
   wire A1_inv_for_SAEDRVT14_OAI22_1;
   not MGM_BG_0( A1_inv_for_SAEDRVT14_OAI22_1, A1 );
   wire A2_inv_for_SAEDRVT14_OAI22_1;
   not MGM_BG_1( A2_inv_for_SAEDRVT14_OAI22_1, A2 );
   wire X_row1;
   and MGM_BG_2( X_row1, A1_inv_for_SAEDRVT14_OAI22_1, A2_inv_for_SAEDRVT14_OAI22_1 );
   wire B1_inv_for_SAEDRVT14_OAI22_1;
   not MGM_BG_3( B1_inv_for_SAEDRVT14_OAI22_1, B1 );
   wire B2_inv_for_SAEDRVT14_OAI22_1;
   not MGM_BG_4( B2_inv_for_SAEDRVT14_OAI22_1, B2 );
   wire X_row2;
   and MGM_BG_5( X_row2, B1_inv_for_SAEDRVT14_OAI22_1, B2_inv_for_SAEDRVT14_OAI22_1 );
   or MGM_BG_6( X, X_row1, X_row2 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_OAI22_1P5_func( X, A1, A2, B1, B2 );
   input A1, A2, B1, B2;
   output X;
   wire A1_inv_for_SAEDRVT14_OAI22_1P5;
   not MGM_BG_0( A1_inv_for_SAEDRVT14_OAI22_1P5, A1 );
   wire A2_inv_for_SAEDRVT14_OAI22_1P5;
   not MGM_BG_1( A2_inv_for_SAEDRVT14_OAI22_1P5, A2 );
   wire X_row1;
   and MGM_BG_2( X_row1, A1_inv_for_SAEDRVT14_OAI22_1P5, A2_inv_for_SAEDRVT14_OAI22_1P5 );
   wire B1_inv_for_SAEDRVT14_OAI22_1P5;
   not MGM_BG_3( B1_inv_for_SAEDRVT14_OAI22_1P5, B1 );
   wire B2_inv_for_SAEDRVT14_OAI22_1P5;
   not MGM_BG_4( B2_inv_for_SAEDRVT14_OAI22_1P5, B2 );
   wire X_row2;
   and MGM_BG_5( X_row2, B1_inv_for_SAEDRVT14_OAI22_1P5, B2_inv_for_SAEDRVT14_OAI22_1P5 );
   or MGM_BG_6( X, X_row1, X_row2 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_OAI22_2_func( X, A1, A2, B1, B2 );
   input A1, A2, B1, B2;
   output X;
   wire A1_inv_for_SAEDRVT14_OAI22_2;
   not MGM_BG_0( A1_inv_for_SAEDRVT14_OAI22_2, A1 );
   wire A2_inv_for_SAEDRVT14_OAI22_2;
   not MGM_BG_1( A2_inv_for_SAEDRVT14_OAI22_2, A2 );
   wire X_row1;
   and MGM_BG_2( X_row1, A1_inv_for_SAEDRVT14_OAI22_2, A2_inv_for_SAEDRVT14_OAI22_2 );
   wire B1_inv_for_SAEDRVT14_OAI22_2;
   not MGM_BG_3( B1_inv_for_SAEDRVT14_OAI22_2, B1 );
   wire B2_inv_for_SAEDRVT14_OAI22_2;
   not MGM_BG_4( B2_inv_for_SAEDRVT14_OAI22_2, B2 );
   wire X_row2;
   and MGM_BG_5( X_row2, B1_inv_for_SAEDRVT14_OAI22_2, B2_inv_for_SAEDRVT14_OAI22_2 );
   or MGM_BG_6( X, X_row1, X_row2 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_OAI22_3_func( X, A1, A2, B1, B2 );
   input A1, A2, B1, B2;
   output X;
   wire A1_inv_for_SAEDRVT14_OAI22_3;
   not MGM_BG_0( A1_inv_for_SAEDRVT14_OAI22_3, A1 );
   wire A2_inv_for_SAEDRVT14_OAI22_3;
   not MGM_BG_1( A2_inv_for_SAEDRVT14_OAI22_3, A2 );
   wire X_row1;
   and MGM_BG_2( X_row1, A1_inv_for_SAEDRVT14_OAI22_3, A2_inv_for_SAEDRVT14_OAI22_3 );
   wire B1_inv_for_SAEDRVT14_OAI22_3;
   not MGM_BG_3( B1_inv_for_SAEDRVT14_OAI22_3, B1 );
   wire B2_inv_for_SAEDRVT14_OAI22_3;
   not MGM_BG_4( B2_inv_for_SAEDRVT14_OAI22_3, B2 );
   wire X_row2;
   and MGM_BG_5( X_row2, B1_inv_for_SAEDRVT14_OAI22_3, B2_inv_for_SAEDRVT14_OAI22_3 );
   or MGM_BG_6( X, X_row1, X_row2 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_OAI22_4_func( X, A1, A2, B1, B2 );
   input A1, A2, B1, B2;
   output X;
   wire A1_inv_for_SAEDRVT14_OAI22_4;
   not MGM_BG_0( A1_inv_for_SAEDRVT14_OAI22_4, A1 );
   wire A2_inv_for_SAEDRVT14_OAI22_4;
   not MGM_BG_1( A2_inv_for_SAEDRVT14_OAI22_4, A2 );
   wire X_row1;
   and MGM_BG_2( X_row1, A1_inv_for_SAEDRVT14_OAI22_4, A2_inv_for_SAEDRVT14_OAI22_4 );
   wire B1_inv_for_SAEDRVT14_OAI22_4;
   not MGM_BG_3( B1_inv_for_SAEDRVT14_OAI22_4, B1 );
   wire B2_inv_for_SAEDRVT14_OAI22_4;
   not MGM_BG_4( B2_inv_for_SAEDRVT14_OAI22_4, B2 );
   wire X_row2;
   and MGM_BG_5( X_row2, B1_inv_for_SAEDRVT14_OAI22_4, B2_inv_for_SAEDRVT14_OAI22_4 );
   or MGM_BG_6( X, X_row1, X_row2 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_OAI311_0P5_func( X, A1, A2, A3, B1, B2 );
   input A1, A2, A3, B1, B2;
   output X;
   wire A1_inv_for_SAEDRVT14_OAI311_0P5;
   not MGM_BG_0( A1_inv_for_SAEDRVT14_OAI311_0P5, A1 );
   wire A2_inv_for_SAEDRVT14_OAI311_0P5;
   not MGM_BG_1( A2_inv_for_SAEDRVT14_OAI311_0P5, A2 );
   wire A3_inv_for_SAEDRVT14_OAI311_0P5;
   not MGM_BG_2( A3_inv_for_SAEDRVT14_OAI311_0P5, A3 );
   wire X_row1;
   and MGM_BG_3( X_row1, A1_inv_for_SAEDRVT14_OAI311_0P5, A2_inv_for_SAEDRVT14_OAI311_0P5, A3_inv_for_SAEDRVT14_OAI311_0P5 );
   wire B1_inv_for_SAEDRVT14_OAI311_0P5;
   not MGM_BG_4( B1_inv_for_SAEDRVT14_OAI311_0P5, B1 );
   wire B2_inv_for_SAEDRVT14_OAI311_0P5;
   not MGM_BG_5( B2_inv_for_SAEDRVT14_OAI311_0P5, B2 );
   or MGM_BG_6( X, X_row1, B1_inv_for_SAEDRVT14_OAI311_0P5, B2_inv_for_SAEDRVT14_OAI311_0P5 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_OAI311_0P75_func( X, A1, A2, A3, B1, B2 );
   input A1, A2, A3, B1, B2;
   output X;
   wire A1_inv_for_SAEDRVT14_OAI311_0P75;
   not MGM_BG_0( A1_inv_for_SAEDRVT14_OAI311_0P75, A1 );
   wire A2_inv_for_SAEDRVT14_OAI311_0P75;
   not MGM_BG_1( A2_inv_for_SAEDRVT14_OAI311_0P75, A2 );
   wire A3_inv_for_SAEDRVT14_OAI311_0P75;
   not MGM_BG_2( A3_inv_for_SAEDRVT14_OAI311_0P75, A3 );
   wire X_row1;
   and MGM_BG_3( X_row1, A1_inv_for_SAEDRVT14_OAI311_0P75, A2_inv_for_SAEDRVT14_OAI311_0P75, A3_inv_for_SAEDRVT14_OAI311_0P75 );
   wire B1_inv_for_SAEDRVT14_OAI311_0P75;
   not MGM_BG_4( B1_inv_for_SAEDRVT14_OAI311_0P75, B1 );
   wire B2_inv_for_SAEDRVT14_OAI311_0P75;
   not MGM_BG_5( B2_inv_for_SAEDRVT14_OAI311_0P75, B2 );
   or MGM_BG_6( X, X_row1, B1_inv_for_SAEDRVT14_OAI311_0P75, B2_inv_for_SAEDRVT14_OAI311_0P75 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_OAI311_1_func( X, A1, A2, A3, B1, B2 );
   input A1, A2, A3, B1, B2;
   output X;
   wire A1_inv_for_SAEDRVT14_OAI311_1;
   not MGM_BG_0( A1_inv_for_SAEDRVT14_OAI311_1, A1 );
   wire A2_inv_for_SAEDRVT14_OAI311_1;
   not MGM_BG_1( A2_inv_for_SAEDRVT14_OAI311_1, A2 );
   wire A3_inv_for_SAEDRVT14_OAI311_1;
   not MGM_BG_2( A3_inv_for_SAEDRVT14_OAI311_1, A3 );
   wire X_row1;
   and MGM_BG_3( X_row1, A1_inv_for_SAEDRVT14_OAI311_1, A2_inv_for_SAEDRVT14_OAI311_1, A3_inv_for_SAEDRVT14_OAI311_1 );
   wire B1_inv_for_SAEDRVT14_OAI311_1;
   not MGM_BG_4( B1_inv_for_SAEDRVT14_OAI311_1, B1 );
   wire B2_inv_for_SAEDRVT14_OAI311_1;
   not MGM_BG_5( B2_inv_for_SAEDRVT14_OAI311_1, B2 );
   or MGM_BG_6( X, X_row1, B1_inv_for_SAEDRVT14_OAI311_1, B2_inv_for_SAEDRVT14_OAI311_1 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_OAI311_2_func( X, A1, A2, A3, B1, B2 );
   input A1, A2, A3, B1, B2;
   output X;
   wire A1_inv_for_SAEDRVT14_OAI311_2;
   not MGM_BG_0( A1_inv_for_SAEDRVT14_OAI311_2, A1 );
   wire A2_inv_for_SAEDRVT14_OAI311_2;
   not MGM_BG_1( A2_inv_for_SAEDRVT14_OAI311_2, A2 );
   wire A3_inv_for_SAEDRVT14_OAI311_2;
   not MGM_BG_2( A3_inv_for_SAEDRVT14_OAI311_2, A3 );
   wire X_row1;
   and MGM_BG_3( X_row1, A1_inv_for_SAEDRVT14_OAI311_2, A2_inv_for_SAEDRVT14_OAI311_2, A3_inv_for_SAEDRVT14_OAI311_2 );
   wire B1_inv_for_SAEDRVT14_OAI311_2;
   not MGM_BG_4( B1_inv_for_SAEDRVT14_OAI311_2, B1 );
   wire B2_inv_for_SAEDRVT14_OAI311_2;
   not MGM_BG_5( B2_inv_for_SAEDRVT14_OAI311_2, B2 );
   or MGM_BG_6( X, X_row1, B1_inv_for_SAEDRVT14_OAI311_2, B2_inv_for_SAEDRVT14_OAI311_2 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_OAI311_4_func( X, A1, A2, A3, B1, B2 );
   input A1, A2, A3, B1, B2;
   output X;
   wire A1_inv_for_SAEDRVT14_OAI311_4;
   not MGM_BG_0( A1_inv_for_SAEDRVT14_OAI311_4, A1 );
   wire A2_inv_for_SAEDRVT14_OAI311_4;
   not MGM_BG_1( A2_inv_for_SAEDRVT14_OAI311_4, A2 );
   wire A3_inv_for_SAEDRVT14_OAI311_4;
   not MGM_BG_2( A3_inv_for_SAEDRVT14_OAI311_4, A3 );
   wire X_row1;
   and MGM_BG_3( X_row1, A1_inv_for_SAEDRVT14_OAI311_4, A2_inv_for_SAEDRVT14_OAI311_4, A3_inv_for_SAEDRVT14_OAI311_4 );
   wire B1_inv_for_SAEDRVT14_OAI311_4;
   not MGM_BG_4( B1_inv_for_SAEDRVT14_OAI311_4, B1 );
   wire B2_inv_for_SAEDRVT14_OAI311_4;
   not MGM_BG_5( B2_inv_for_SAEDRVT14_OAI311_4, B2 );
   or MGM_BG_6( X, X_row1, B1_inv_for_SAEDRVT14_OAI311_4, B2_inv_for_SAEDRVT14_OAI311_4 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_OAI31_0P5_func( X, A1, A2, A3, B );
   input A1, A2, A3, B;
   output X;
   wire A1_inv_for_SAEDRVT14_OAI31_0P5;
   not MGM_BG_0( A1_inv_for_SAEDRVT14_OAI31_0P5, A1 );
   wire A2_inv_for_SAEDRVT14_OAI31_0P5;
   not MGM_BG_1( A2_inv_for_SAEDRVT14_OAI31_0P5, A2 );
   wire A3_inv_for_SAEDRVT14_OAI31_0P5;
   not MGM_BG_2( A3_inv_for_SAEDRVT14_OAI31_0P5, A3 );
   wire X_row1;
   and MGM_BG_3( X_row1, A1_inv_for_SAEDRVT14_OAI31_0P5, A2_inv_for_SAEDRVT14_OAI31_0P5, A3_inv_for_SAEDRVT14_OAI31_0P5 );
   wire B_inv_for_SAEDRVT14_OAI31_0P5;
   not MGM_BG_4( B_inv_for_SAEDRVT14_OAI31_0P5, B );
   or MGM_BG_5( X, X_row1, B_inv_for_SAEDRVT14_OAI31_0P5 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_OAI31_0P75_func( X, A1, A2, A3, B );
   input A1, A2, A3, B;
   output X;
   wire A1_inv_for_SAEDRVT14_OAI31_0P75;
   not MGM_BG_0( A1_inv_for_SAEDRVT14_OAI31_0P75, A1 );
   wire A2_inv_for_SAEDRVT14_OAI31_0P75;
   not MGM_BG_1( A2_inv_for_SAEDRVT14_OAI31_0P75, A2 );
   wire A3_inv_for_SAEDRVT14_OAI31_0P75;
   not MGM_BG_2( A3_inv_for_SAEDRVT14_OAI31_0P75, A3 );
   wire X_row1;
   and MGM_BG_3( X_row1, A1_inv_for_SAEDRVT14_OAI31_0P75, A2_inv_for_SAEDRVT14_OAI31_0P75, A3_inv_for_SAEDRVT14_OAI31_0P75 );
   wire B_inv_for_SAEDRVT14_OAI31_0P75;
   not MGM_BG_4( B_inv_for_SAEDRVT14_OAI31_0P75, B );
   or MGM_BG_5( X, X_row1, B_inv_for_SAEDRVT14_OAI31_0P75 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_OAI31_1_func( X, A1, A2, A3, B );
   input A1, A2, A3, B;
   output X;
   wire A1_inv_for_SAEDRVT14_OAI31_1;
   not MGM_BG_0( A1_inv_for_SAEDRVT14_OAI31_1, A1 );
   wire A2_inv_for_SAEDRVT14_OAI31_1;
   not MGM_BG_1( A2_inv_for_SAEDRVT14_OAI31_1, A2 );
   wire A3_inv_for_SAEDRVT14_OAI31_1;
   not MGM_BG_2( A3_inv_for_SAEDRVT14_OAI31_1, A3 );
   wire X_row1;
   and MGM_BG_3( X_row1, A1_inv_for_SAEDRVT14_OAI31_1, A2_inv_for_SAEDRVT14_OAI31_1, A3_inv_for_SAEDRVT14_OAI31_1 );
   wire B_inv_for_SAEDRVT14_OAI31_1;
   not MGM_BG_4( B_inv_for_SAEDRVT14_OAI31_1, B );
   or MGM_BG_5( X, X_row1, B_inv_for_SAEDRVT14_OAI31_1 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_OAI31_2_func( X, A1, A2, A3, B );
   input A1, A2, A3, B;
   output X;
   wire A1_inv_for_SAEDRVT14_OAI31_2;
   not MGM_BG_0( A1_inv_for_SAEDRVT14_OAI31_2, A1 );
   wire A2_inv_for_SAEDRVT14_OAI31_2;
   not MGM_BG_1( A2_inv_for_SAEDRVT14_OAI31_2, A2 );
   wire A3_inv_for_SAEDRVT14_OAI31_2;
   not MGM_BG_2( A3_inv_for_SAEDRVT14_OAI31_2, A3 );
   wire X_row1;
   and MGM_BG_3( X_row1, A1_inv_for_SAEDRVT14_OAI31_2, A2_inv_for_SAEDRVT14_OAI31_2, A3_inv_for_SAEDRVT14_OAI31_2 );
   wire B_inv_for_SAEDRVT14_OAI31_2;
   not MGM_BG_4( B_inv_for_SAEDRVT14_OAI31_2, B );
   or MGM_BG_5( X, X_row1, B_inv_for_SAEDRVT14_OAI31_2 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_OAI31_4_func( X, A1, A2, A3, B );
   input A1, A2, A3, B;
   output X;
   wire A1_inv_for_SAEDRVT14_OAI31_4;
   not MGM_BG_0( A1_inv_for_SAEDRVT14_OAI31_4, A1 );
   wire A2_inv_for_SAEDRVT14_OAI31_4;
   not MGM_BG_1( A2_inv_for_SAEDRVT14_OAI31_4, A2 );
   wire A3_inv_for_SAEDRVT14_OAI31_4;
   not MGM_BG_2( A3_inv_for_SAEDRVT14_OAI31_4, A3 );
   wire X_row1;
   and MGM_BG_3( X_row1, A1_inv_for_SAEDRVT14_OAI31_4, A2_inv_for_SAEDRVT14_OAI31_4, A3_inv_for_SAEDRVT14_OAI31_4 );
   wire B_inv_for_SAEDRVT14_OAI31_4;
   not MGM_BG_4( B_inv_for_SAEDRVT14_OAI31_4, B );
   or MGM_BG_5( X, X_row1, B_inv_for_SAEDRVT14_OAI31_4 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_OAI32_0P5_func( X, A1, A2, A3, B1, B2 );
   input A1, A2, A3, B1, B2;
   output X;
   wire A1_inv_for_SAEDRVT14_OAI32_0P5;
   not MGM_BG_0( A1_inv_for_SAEDRVT14_OAI32_0P5, A1 );
   wire A2_inv_for_SAEDRVT14_OAI32_0P5;
   not MGM_BG_1( A2_inv_for_SAEDRVT14_OAI32_0P5, A2 );
   wire A3_inv_for_SAEDRVT14_OAI32_0P5;
   not MGM_BG_2( A3_inv_for_SAEDRVT14_OAI32_0P5, A3 );
   wire X_row1;
   and MGM_BG_3( X_row1, A1_inv_for_SAEDRVT14_OAI32_0P5, A2_inv_for_SAEDRVT14_OAI32_0P5, A3_inv_for_SAEDRVT14_OAI32_0P5 );
   wire B1_inv_for_SAEDRVT14_OAI32_0P5;
   not MGM_BG_4( B1_inv_for_SAEDRVT14_OAI32_0P5, B1 );
   wire B2_inv_for_SAEDRVT14_OAI32_0P5;
   not MGM_BG_5( B2_inv_for_SAEDRVT14_OAI32_0P5, B2 );
   wire X_row2;
   and MGM_BG_6( X_row2, B1_inv_for_SAEDRVT14_OAI32_0P5, B2_inv_for_SAEDRVT14_OAI32_0P5 );
   or MGM_BG_7( X, X_row1, X_row2 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_OAI32_0P75_func( X, A1, A2, A3, B1, B2 );
   input A1, A2, A3, B1, B2;
   output X;
   wire A1_inv_for_SAEDRVT14_OAI32_0P75;
   not MGM_BG_0( A1_inv_for_SAEDRVT14_OAI32_0P75, A1 );
   wire A2_inv_for_SAEDRVT14_OAI32_0P75;
   not MGM_BG_1( A2_inv_for_SAEDRVT14_OAI32_0P75, A2 );
   wire A3_inv_for_SAEDRVT14_OAI32_0P75;
   not MGM_BG_2( A3_inv_for_SAEDRVT14_OAI32_0P75, A3 );
   wire X_row1;
   and MGM_BG_3( X_row1, A1_inv_for_SAEDRVT14_OAI32_0P75, A2_inv_for_SAEDRVT14_OAI32_0P75, A3_inv_for_SAEDRVT14_OAI32_0P75 );
   wire B1_inv_for_SAEDRVT14_OAI32_0P75;
   not MGM_BG_4( B1_inv_for_SAEDRVT14_OAI32_0P75, B1 );
   wire B2_inv_for_SAEDRVT14_OAI32_0P75;
   not MGM_BG_5( B2_inv_for_SAEDRVT14_OAI32_0P75, B2 );
   wire X_row2;
   and MGM_BG_6( X_row2, B1_inv_for_SAEDRVT14_OAI32_0P75, B2_inv_for_SAEDRVT14_OAI32_0P75 );
   or MGM_BG_7( X, X_row1, X_row2 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_OAI32_1_func( X, A1, A2, A3, B1, B2 );
   input A1, A2, A3, B1, B2;
   output X;
   wire A1_inv_for_SAEDRVT14_OAI32_1;
   not MGM_BG_0( A1_inv_for_SAEDRVT14_OAI32_1, A1 );
   wire A2_inv_for_SAEDRVT14_OAI32_1;
   not MGM_BG_1( A2_inv_for_SAEDRVT14_OAI32_1, A2 );
   wire A3_inv_for_SAEDRVT14_OAI32_1;
   not MGM_BG_2( A3_inv_for_SAEDRVT14_OAI32_1, A3 );
   wire X_row1;
   and MGM_BG_3( X_row1, A1_inv_for_SAEDRVT14_OAI32_1, A2_inv_for_SAEDRVT14_OAI32_1, A3_inv_for_SAEDRVT14_OAI32_1 );
   wire B1_inv_for_SAEDRVT14_OAI32_1;
   not MGM_BG_4( B1_inv_for_SAEDRVT14_OAI32_1, B1 );
   wire B2_inv_for_SAEDRVT14_OAI32_1;
   not MGM_BG_5( B2_inv_for_SAEDRVT14_OAI32_1, B2 );
   wire X_row2;
   and MGM_BG_6( X_row2, B1_inv_for_SAEDRVT14_OAI32_1, B2_inv_for_SAEDRVT14_OAI32_1 );
   or MGM_BG_7( X, X_row1, X_row2 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_OAI32_2_func( X, A1, A2, A3, B1, B2 );
   input A1, A2, A3, B1, B2;
   output X;
   wire A1_inv_for_SAEDRVT14_OAI32_2;
   not MGM_BG_0( A1_inv_for_SAEDRVT14_OAI32_2, A1 );
   wire A2_inv_for_SAEDRVT14_OAI32_2;
   not MGM_BG_1( A2_inv_for_SAEDRVT14_OAI32_2, A2 );
   wire A3_inv_for_SAEDRVT14_OAI32_2;
   not MGM_BG_2( A3_inv_for_SAEDRVT14_OAI32_2, A3 );
   wire X_row1;
   and MGM_BG_3( X_row1, A1_inv_for_SAEDRVT14_OAI32_2, A2_inv_for_SAEDRVT14_OAI32_2, A3_inv_for_SAEDRVT14_OAI32_2 );
   wire B1_inv_for_SAEDRVT14_OAI32_2;
   not MGM_BG_4( B1_inv_for_SAEDRVT14_OAI32_2, B1 );
   wire B2_inv_for_SAEDRVT14_OAI32_2;
   not MGM_BG_5( B2_inv_for_SAEDRVT14_OAI32_2, B2 );
   wire X_row2;
   and MGM_BG_6( X_row2, B1_inv_for_SAEDRVT14_OAI32_2, B2_inv_for_SAEDRVT14_OAI32_2 );
   or MGM_BG_7( X, X_row1, X_row2 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_OAI32_4_func( X, A1, A2, A3, B1, B2 );
   input A1, A2, A3, B1, B2;
   output X;
   wire A1_inv_for_SAEDRVT14_OAI32_4;
   not MGM_BG_0( A1_inv_for_SAEDRVT14_OAI32_4, A1 );
   wire A2_inv_for_SAEDRVT14_OAI32_4;
   not MGM_BG_1( A2_inv_for_SAEDRVT14_OAI32_4, A2 );
   wire A3_inv_for_SAEDRVT14_OAI32_4;
   not MGM_BG_2( A3_inv_for_SAEDRVT14_OAI32_4, A3 );
   wire X_row1;
   and MGM_BG_3( X_row1, A1_inv_for_SAEDRVT14_OAI32_4, A2_inv_for_SAEDRVT14_OAI32_4, A3_inv_for_SAEDRVT14_OAI32_4 );
   wire B1_inv_for_SAEDRVT14_OAI32_4;
   not MGM_BG_4( B1_inv_for_SAEDRVT14_OAI32_4, B1 );
   wire B2_inv_for_SAEDRVT14_OAI32_4;
   not MGM_BG_5( B2_inv_for_SAEDRVT14_OAI32_4, B2 );
   wire X_row2;
   and MGM_BG_6( X_row2, B1_inv_for_SAEDRVT14_OAI32_4, B2_inv_for_SAEDRVT14_OAI32_4 );
   or MGM_BG_7( X, X_row1, X_row2 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_OAI33_0P5_func( X, A1, A2, A3, B1, B2, B3 );
   input A1, A2, A3, B1, B2, B3;
   output X;
   wire A1_inv_for_SAEDRVT14_OAI33_0P5;
   not MGM_BG_0( A1_inv_for_SAEDRVT14_OAI33_0P5, A1 );
   wire A2_inv_for_SAEDRVT14_OAI33_0P5;
   not MGM_BG_1( A2_inv_for_SAEDRVT14_OAI33_0P5, A2 );
   wire A3_inv_for_SAEDRVT14_OAI33_0P5;
   not MGM_BG_2( A3_inv_for_SAEDRVT14_OAI33_0P5, A3 );
   wire X_row1;
   and MGM_BG_3( X_row1, A1_inv_for_SAEDRVT14_OAI33_0P5, A2_inv_for_SAEDRVT14_OAI33_0P5, A3_inv_for_SAEDRVT14_OAI33_0P5 );
   wire B1_inv_for_SAEDRVT14_OAI33_0P5;
   not MGM_BG_4( B1_inv_for_SAEDRVT14_OAI33_0P5, B1 );
   wire B2_inv_for_SAEDRVT14_OAI33_0P5;
   not MGM_BG_5( B2_inv_for_SAEDRVT14_OAI33_0P5, B2 );
   wire B3_inv_for_SAEDRVT14_OAI33_0P5;
   not MGM_BG_6( B3_inv_for_SAEDRVT14_OAI33_0P5, B3 );
   wire X_row2;
   and MGM_BG_7( X_row2, B1_inv_for_SAEDRVT14_OAI33_0P5, B2_inv_for_SAEDRVT14_OAI33_0P5, B3_inv_for_SAEDRVT14_OAI33_0P5 );
   or MGM_BG_8( X, X_row1, X_row2 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_OAI33_0P75_func( X, A1, A2, A3, B1, B2, B3 );
   input A1, A2, A3, B1, B2, B3;
   output X;
   wire A1_inv_for_SAEDRVT14_OAI33_0P75;
   not MGM_BG_0( A1_inv_for_SAEDRVT14_OAI33_0P75, A1 );
   wire A2_inv_for_SAEDRVT14_OAI33_0P75;
   not MGM_BG_1( A2_inv_for_SAEDRVT14_OAI33_0P75, A2 );
   wire A3_inv_for_SAEDRVT14_OAI33_0P75;
   not MGM_BG_2( A3_inv_for_SAEDRVT14_OAI33_0P75, A3 );
   wire X_row1;
   and MGM_BG_3( X_row1, A1_inv_for_SAEDRVT14_OAI33_0P75, A2_inv_for_SAEDRVT14_OAI33_0P75, A3_inv_for_SAEDRVT14_OAI33_0P75 );
   wire B1_inv_for_SAEDRVT14_OAI33_0P75;
   not MGM_BG_4( B1_inv_for_SAEDRVT14_OAI33_0P75, B1 );
   wire B2_inv_for_SAEDRVT14_OAI33_0P75;
   not MGM_BG_5( B2_inv_for_SAEDRVT14_OAI33_0P75, B2 );
   wire B3_inv_for_SAEDRVT14_OAI33_0P75;
   not MGM_BG_6( B3_inv_for_SAEDRVT14_OAI33_0P75, B3 );
   wire X_row2;
   and MGM_BG_7( X_row2, B1_inv_for_SAEDRVT14_OAI33_0P75, B2_inv_for_SAEDRVT14_OAI33_0P75, B3_inv_for_SAEDRVT14_OAI33_0P75 );
   or MGM_BG_8( X, X_row1, X_row2 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_OAI33_1_func( X, A1, A2, A3, B1, B2, B3 );
   input A1, A2, A3, B1, B2, B3;
   output X;
   wire A1_inv_for_SAEDRVT14_OAI33_1;
   not MGM_BG_0( A1_inv_for_SAEDRVT14_OAI33_1, A1 );
   wire A2_inv_for_SAEDRVT14_OAI33_1;
   not MGM_BG_1( A2_inv_for_SAEDRVT14_OAI33_1, A2 );
   wire A3_inv_for_SAEDRVT14_OAI33_1;
   not MGM_BG_2( A3_inv_for_SAEDRVT14_OAI33_1, A3 );
   wire X_row1;
   and MGM_BG_3( X_row1, A1_inv_for_SAEDRVT14_OAI33_1, A2_inv_for_SAEDRVT14_OAI33_1, A3_inv_for_SAEDRVT14_OAI33_1 );
   wire B1_inv_for_SAEDRVT14_OAI33_1;
   not MGM_BG_4( B1_inv_for_SAEDRVT14_OAI33_1, B1 );
   wire B2_inv_for_SAEDRVT14_OAI33_1;
   not MGM_BG_5( B2_inv_for_SAEDRVT14_OAI33_1, B2 );
   wire B3_inv_for_SAEDRVT14_OAI33_1;
   not MGM_BG_6( B3_inv_for_SAEDRVT14_OAI33_1, B3 );
   wire X_row2;
   and MGM_BG_7( X_row2, B1_inv_for_SAEDRVT14_OAI33_1, B2_inv_for_SAEDRVT14_OAI33_1, B3_inv_for_SAEDRVT14_OAI33_1 );
   or MGM_BG_8( X, X_row1, X_row2 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_OAI33_2_func( X, A1, A2, A3, B1, B2, B3 );
   input A1, A2, A3, B1, B2, B3;
   output X;
   wire A1_inv_for_SAEDRVT14_OAI33_2;
   not MGM_BG_0( A1_inv_for_SAEDRVT14_OAI33_2, A1 );
   wire A2_inv_for_SAEDRVT14_OAI33_2;
   not MGM_BG_1( A2_inv_for_SAEDRVT14_OAI33_2, A2 );
   wire A3_inv_for_SAEDRVT14_OAI33_2;
   not MGM_BG_2( A3_inv_for_SAEDRVT14_OAI33_2, A3 );
   wire X_row1;
   and MGM_BG_3( X_row1, A1_inv_for_SAEDRVT14_OAI33_2, A2_inv_for_SAEDRVT14_OAI33_2, A3_inv_for_SAEDRVT14_OAI33_2 );
   wire B1_inv_for_SAEDRVT14_OAI33_2;
   not MGM_BG_4( B1_inv_for_SAEDRVT14_OAI33_2, B1 );
   wire B2_inv_for_SAEDRVT14_OAI33_2;
   not MGM_BG_5( B2_inv_for_SAEDRVT14_OAI33_2, B2 );
   wire B3_inv_for_SAEDRVT14_OAI33_2;
   not MGM_BG_6( B3_inv_for_SAEDRVT14_OAI33_2, B3 );
   wire X_row2;
   and MGM_BG_7( X_row2, B1_inv_for_SAEDRVT14_OAI33_2, B2_inv_for_SAEDRVT14_OAI33_2, B3_inv_for_SAEDRVT14_OAI33_2 );
   or MGM_BG_8( X, X_row1, X_row2 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_OAI33_4_func( X, A1, A2, A3, B1, B2, B3 );
   input A1, A2, A3, B1, B2, B3;
   output X;
   wire A1_inv_for_SAEDRVT14_OAI33_4;
   not MGM_BG_0( A1_inv_for_SAEDRVT14_OAI33_4, A1 );
   wire A2_inv_for_SAEDRVT14_OAI33_4;
   not MGM_BG_1( A2_inv_for_SAEDRVT14_OAI33_4, A2 );
   wire A3_inv_for_SAEDRVT14_OAI33_4;
   not MGM_BG_2( A3_inv_for_SAEDRVT14_OAI33_4, A3 );
   wire X_row1;
   and MGM_BG_3( X_row1, A1_inv_for_SAEDRVT14_OAI33_4, A2_inv_for_SAEDRVT14_OAI33_4, A3_inv_for_SAEDRVT14_OAI33_4 );
   wire B1_inv_for_SAEDRVT14_OAI33_4;
   not MGM_BG_4( B1_inv_for_SAEDRVT14_OAI33_4, B1 );
   wire B2_inv_for_SAEDRVT14_OAI33_4;
   not MGM_BG_5( B2_inv_for_SAEDRVT14_OAI33_4, B2 );
   wire B3_inv_for_SAEDRVT14_OAI33_4;
   not MGM_BG_6( B3_inv_for_SAEDRVT14_OAI33_4, B3 );
   wire X_row2;
   and MGM_BG_7( X_row2, B1_inv_for_SAEDRVT14_OAI33_4, B2_inv_for_SAEDRVT14_OAI33_4, B3_inv_for_SAEDRVT14_OAI33_4 );
   or MGM_BG_8( X, X_row1, X_row2 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_OR2_0P5_func( X, A1, A2 );
   input A1, A2;
   output X;
   or MGM_BG_0( X, A1, A2 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_OR2_0P75_func( X, A1, A2 );
   input A1, A2;
   output X;
   or MGM_BG_0( X, A1, A2 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_OR2_1_func( X, A1, A2 );
   input A1, A2;
   output X;
   or MGM_BG_0( X, A1, A2 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_OR2_2_func( X, A1, A2 );
   input A1, A2;
   output X;
   or MGM_BG_0( X, A1, A2 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_OR2_4_func( X, A1, A2 );
   input A1, A2;
   output X;
   or MGM_BG_0( X, A1, A2 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_OR2_ECO_2_func( X, A1, A2 );
   input A1, A2;
   output X;
   or MGM_BG_0( X, A1, A2 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_OR2_ISO_1_func( X, CK, EN );
   input CK, EN;
   output X;
   or MGM_BG_0( X, CK, EN );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_OR2_ISO_4_func( X, CK, EN );
   input CK, EN;
   output X;
   or MGM_BG_0( X, CK, EN );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_OR2_MM_0P5_func( X, A1, A2 );
   input A1, A2;
   output X;
   or MGM_BG_0( X, A1, A2 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_OR2_MM_0P75_func( X, A1, A2 );
   input A1, A2;
   output X;
   or MGM_BG_0( X, A1, A2 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_OR2_MM_1_func( X, A1, A2 );
   input A1, A2;
   output X;
   or MGM_BG_0( X, A1, A2 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_OR2_MM_12_func( X, A1, A2 );
   input A1, A2;
   output X;
   or MGM_BG_0( X, A1, A2 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_OR2_MM_16_func( X, A1, A2 );
   input A1, A2;
   output X;
   or MGM_BG_0( X, A1, A2 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_OR2_MM_1P5_func( X, A1, A2 );
   input A1, A2;
   output X;
   or MGM_BG_0( X, A1, A2 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_OR2_MM_2_func( X, A1, A2 );
   input A1, A2;
   output X;
   or MGM_BG_0( X, A1, A2 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_OR2_MM_20_func( X, A1, A2 );
   input A1, A2;
   output X;
   or MGM_BG_0( X, A1, A2 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_OR2_MM_3_func( X, A1, A2 );
   input A1, A2;
   output X;
   or MGM_BG_0( X, A1, A2 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_OR2_MM_4_func( X, A1, A2 );
   input A1, A2;
   output X;
   or MGM_BG_0( X, A1, A2 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_OR2_MM_6_func( X, A1, A2 );
   input A1, A2;
   output X;
   or MGM_BG_0( X, A1, A2 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_OR2_MM_8_func( X, A1, A2 );
   input A1, A2;
   output X;
   or MGM_BG_0( X, A1, A2 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_OR3_0P5_func( X, A1, A2, A3 );
   input A1, A2, A3;
   output X;
   or MGM_BG_0( X, A1, A2, A3 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_OR3_0P75_func( X, A1, A2, A3 );
   input A1, A2, A3;
   output X;
   or MGM_BG_0( X, A1, A2, A3 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_OR3_1_func( X, A1, A2, A3 );
   input A1, A2, A3;
   output X;
   or MGM_BG_0( X, A1, A2, A3 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_OR3_2_func( X, A1, A2, A3 );
   input A1, A2, A3;
   output X;
   or MGM_BG_0( X, A1, A2, A3 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_OR3_4_func( X, A1, A2, A3 );
   input A1, A2, A3;
   output X;
   or MGM_BG_0( X, A1, A2, A3 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_OR4_1_func( X, A1, A2, A3, A4 );
   input A1, A2, A3, A4;
   output X;
   or MGM_BG_0( X, A1, A2, A3, A4 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_OR4_2_func( X, A1, A2, A3, A4 );
   input A1, A2, A3, A4;
   output X;
   or MGM_BG_0( X, A1, A2, A3, A4 );

endmodule
`endcelldefine

//****************************************************************************//
// Verilog models generated by SiliconSmart M-2017.03-SP3 build date: Aug 22, 2017 15:59:14. (SMSC-2) //
// Siliconsmart Path: /global/apps/siliconsmart_2017.03-SP3/linux64/bin/siliconsmart //
// Host Name: am04dwemt014.internal.synopsys.com, User Name: stepanya, PID: 25792  //
// Directory: /remote/saed/meruzha/CHAR/rvt/processes_std/tt0p8v25c/siliconsmart/simulation_additional //
//                                                                            //
// File generated on Mon Dec 11 10:41:51 AMT 2017. (SMSC-3)                   //
//****************************************************************************//


 



primitive UDP_saed14rvt_tt0p8v25c_MGM_IQ_FF_UDP( Q, C, P, CK, D );
output Q;
reg Q;
input C, P, CK, D; 
table 
//C  P CK  D   :  Q  :  Q 
  0  0  n  ?  :  ?  :  -;
  ?  0  r  0  :  ?  :  0;
  ?  0  p  0  :  0  :  0;
  1  0  ?  ?  :  ?  :  0;
  0  ?  r  1  :  ?  :  1;
  0  ?  p  1  :  1  :  1;
  0  1  ?  ?  :  ?  :  1;
  0  0  ?  *  :  ?  :  -;
  0  n  ?  ?  :  ?  :  -;
  n  0  ?  ?  :  ?  :  -;
  0  p  ?  ?  :  ?  :  -;

endtable
endprimitive


`celldefine
module SAEDRVT14_FDPCBQ_V3_4_func( Q, CK, D, RS );
   input CK, D, RS;
   output Q;
   and MGM_BG_0( MGM_D0, D, RS );
   UDP_saed14rvt_tt0p8v25c_MGM_IQ_FF_UDP( IQ, 1'b0, 1'b0, CK, MGM_D0 );
   buf MGM_BG_1( Q, IQ );

endmodule
`endcelldefine

//****************************************************************************//
// Verilog models generated by SiliconSmart M-2017.03-SP3 build date: Aug 22, 2017 15:59:14. (SMSC-2) //
// Siliconsmart Path: /global/apps/siliconsmart_2017.03-SP3/linux64/bin/siliconsmart //
// Host Name: am04dwemt015.internal.synopsys.com, User Name: rostomya, PID: 24608  //
// Directory: /remote/saed/meruzha/CHAR/lvl/dlvl/rvt/processes/tt0p8v25c_i0p8v/siliconsmart/simulation_ao_dlvl //
//                                                                            //
// File generated on Tue Jan 02 17:17:34 AMT 2018. (SMSC-3)                   //
//****************************************************************************//


 



`celldefine
module SAEDRVT14_ELVLDNOR_V2_1_func( A, EN, X );
   input A, EN;
   output X;
   wire EN_inv_for_SAEDRVT14_ELVLDNOR_V2_1;
   not MGM_BG_0( EN_inv_for_SAEDRVT14_ELVLDNOR_V2_1, EN );
   and MGM_BG_1( X, EN_inv_for_SAEDRVT14_ELVLDNOR_V2_1, A );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_ELVLDNOR_V2_10_func( A, EN, X );
   input A, EN;
   output X;
   wire EN_inv_for_SAEDRVT14_ELVLDNOR_V2_10;
   not MGM_BG_0( EN_inv_for_SAEDRVT14_ELVLDNOR_V2_10, EN );
   and MGM_BG_1( X, EN_inv_for_SAEDRVT14_ELVLDNOR_V2_10, A );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_ELVLDNOR_V2_12_func( A, EN, X );
   input A, EN;
   output X;
   wire EN_inv_for_SAEDRVT14_ELVLDNOR_V2_12;
   not MGM_BG_0( EN_inv_for_SAEDRVT14_ELVLDNOR_V2_12, EN );
   and MGM_BG_1( X, EN_inv_for_SAEDRVT14_ELVLDNOR_V2_12, A );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_ELVLDNOR_V2_2_func( A, EN, X );
   input A, EN;
   output X;
   wire EN_inv_for_SAEDRVT14_ELVLDNOR_V2_2;
   not MGM_BG_0( EN_inv_for_SAEDRVT14_ELVLDNOR_V2_2, EN );
   and MGM_BG_1( X, EN_inv_for_SAEDRVT14_ELVLDNOR_V2_2, A );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_ELVLDNOR_V2_3_func( A, EN, X );
   input A, EN;
   output X;
   wire EN_inv_for_SAEDRVT14_ELVLDNOR_V2_3;
   not MGM_BG_0( EN_inv_for_SAEDRVT14_ELVLDNOR_V2_3, EN );
   and MGM_BG_1( X, EN_inv_for_SAEDRVT14_ELVLDNOR_V2_3, A );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_ELVLDNOR_V2_4_func( A, EN, X );
   input A, EN;
   output X;
   wire EN_inv_for_SAEDRVT14_ELVLDNOR_V2_4;
   not MGM_BG_0( EN_inv_for_SAEDRVT14_ELVLDNOR_V2_4, EN );
   and MGM_BG_1( X, EN_inv_for_SAEDRVT14_ELVLDNOR_V2_4, A );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_ELVLDNOR_V2_6_func( A, EN, X );
   input A, EN;
   output X;
   wire EN_inv_for_SAEDRVT14_ELVLDNOR_V2_6;
   not MGM_BG_0( EN_inv_for_SAEDRVT14_ELVLDNOR_V2_6, EN );
   and MGM_BG_1( X, EN_inv_for_SAEDRVT14_ELVLDNOR_V2_6, A );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_ELVLDNOR_V2_8_func( A, EN, X );
   input A, EN;
   output X;
   wire EN_inv_for_SAEDRVT14_ELVLDNOR_V2_8;
   not MGM_BG_0( EN_inv_for_SAEDRVT14_ELVLDNOR_V2_8, EN );
   and MGM_BG_1( X, EN_inv_for_SAEDRVT14_ELVLDNOR_V2_8, A );

endmodule
`endcelldefine

//****************************************************************************//
// Verilog models generated by SiliconSmart M-2017.03-SP3 build date: Aug 22, 2017 15:59:14. (SMSC-2) //
// Siliconsmart Path: /global/apps/siliconsmart_2017.03-SP3/linux64/bin/siliconsmart //
// Host Name: am04dwamd078.internal.synopsys.com, User Name: saroyan, PID: 6136  //
// Directory: /remote/saed/meruzha/CHAR/lvl/ulvl/rvt/processes/tt0p8v25c_i0p8v/siliconsmart/simulation_ao_ulvl //
//                                                                            //
// File generated on Thu Jan 04 13:29:15 AMT 2018. (SMSC-3)                   //
//****************************************************************************//


 



`celldefine
module SAEDRVT14_AOLVLUBUFE0_IY2V1_1_func( X, A, EN );
   input A, EN;
   output X;
   and MGM_BG_0( X, A, EN );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_AOLVLUBUFE0_IY2V1_10_func( X, A, EN );
   input A, EN;
   output X;
   and MGM_BG_0( X, A, EN );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_AOLVLUBUFE0_IY2V1_12_func( X, A, EN );
   input A, EN;
   output X;
   and MGM_BG_0( X, A, EN );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_AOLVLUBUFE0_IY2V1_2_func( X, A, EN );
   input A, EN;
   output X;
   and MGM_BG_0( X, A, EN );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_AOLVLUBUFE0_IY2V1_3_func( X, A, EN );
   input A, EN;
   output X;
   and MGM_BG_0( X, A, EN );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_AOLVLUBUFE0_IY2V1_4_func( X, A, EN );
   input A, EN;
   output X;
   and MGM_BG_0( X, A, EN );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_AOLVLUBUFE0_IY2V1_6_func( X, A, EN );
   input A, EN;
   output X;
   and MGM_BG_0( X, A, EN );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_AOLVLUBUFE0_IY2V1_8_func( X, A, EN );
   input A, EN;
   output X;
   and MGM_BG_0( X, A, EN );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_AOLVLUBUFE1_IY2V1_1_func( X, A, EN );
   input A, EN;
   output X;
   wire EN_inv_for_SAEDRVT14_AOLVLUBUFE1_IY2V1_1;
   not MGM_BG_0( EN_inv_for_SAEDRVT14_AOLVLUBUFE1_IY2V1_1, EN );
   or MGM_BG_1( X, A, EN_inv_for_SAEDRVT14_AOLVLUBUFE1_IY2V1_1 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_AOLVLUBUFE1_IY2V1_10_func( X, A, EN );
   input A, EN;
   output X;
   wire EN_inv_for_SAEDRVT14_AOLVLUBUFE1_IY2V1_10;
   not MGM_BG_0( EN_inv_for_SAEDRVT14_AOLVLUBUFE1_IY2V1_10, EN );
   or MGM_BG_1( X, A, EN_inv_for_SAEDRVT14_AOLVLUBUFE1_IY2V1_10 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_AOLVLUBUFE1_IY2V1_12_func( X, A, EN );
   input A, EN;
   output X;
   wire EN_inv_for_SAEDRVT14_AOLVLUBUFE1_IY2V1_12;
   not MGM_BG_0( EN_inv_for_SAEDRVT14_AOLVLUBUFE1_IY2V1_12, EN );
   or MGM_BG_1( X, A, EN_inv_for_SAEDRVT14_AOLVLUBUFE1_IY2V1_12 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_AOLVLUBUFE1_IY2V1_2_func( X, A, EN );
   input A, EN;
   output X;
   wire EN_inv_for_SAEDRVT14_AOLVLUBUFE1_IY2V1_2;
   not MGM_BG_0( EN_inv_for_SAEDRVT14_AOLVLUBUFE1_IY2V1_2, EN );
   or MGM_BG_1( X, A, EN_inv_for_SAEDRVT14_AOLVLUBUFE1_IY2V1_2 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_AOLVLUBUFE1_IY2V1_3_func( X, A, EN );
   input A, EN;
   output X;
   wire EN_inv_for_SAEDRVT14_AOLVLUBUFE1_IY2V1_3;
   not MGM_BG_0( EN_inv_for_SAEDRVT14_AOLVLUBUFE1_IY2V1_3, EN );
   or MGM_BG_1( X, A, EN_inv_for_SAEDRVT14_AOLVLUBUFE1_IY2V1_3 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_AOLVLUBUFE1_IY2V1_4_func( X, A, EN );
   input A, EN;
   output X;
   wire EN_inv_for_SAEDRVT14_AOLVLUBUFE1_IY2V1_4;
   not MGM_BG_0( EN_inv_for_SAEDRVT14_AOLVLUBUFE1_IY2V1_4, EN );
   or MGM_BG_1( X, A, EN_inv_for_SAEDRVT14_AOLVLUBUFE1_IY2V1_4 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_AOLVLUBUFE1_IY2V1_6_func( X, A, EN );
   input A, EN;
   output X;
   wire EN_inv_for_SAEDRVT14_AOLVLUBUFE1_IY2V1_6;
   not MGM_BG_0( EN_inv_for_SAEDRVT14_AOLVLUBUFE1_IY2V1_6, EN );
   or MGM_BG_1( X, A, EN_inv_for_SAEDRVT14_AOLVLUBUFE1_IY2V1_6 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_AOLVLUBUFE1_IY2V1_8_func( X, A, EN );
   input A, EN;
   output X;
   wire EN_inv_for_SAEDRVT14_AOLVLUBUFE1_IY2V1_8;
   not MGM_BG_0( EN_inv_for_SAEDRVT14_AOLVLUBUFE1_IY2V1_8, EN );
   or MGM_BG_1( X, A, EN_inv_for_SAEDRVT14_AOLVLUBUFE1_IY2V1_8 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_AOLVLUBUF_IY2V1_1_func( X, A );
   input A;
   output X;
   buf MGM_BG_0( X, A );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_AOLVLUBUF_IY2V1_10_func( X, A );
   input A;
   output X;
   buf MGM_BG_0( X, A );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_AOLVLUBUF_IY2V1_12_func( X, A );
   input A;
   output X;
   buf MGM_BG_0( X, A );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_AOLVLUBUF_IY2V1_2_func( X, A );
   input A;
   output X;
   buf MGM_BG_0( X, A );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_AOLVLUBUF_IY2V1_3_func( X, A );
   input A;
   output X;
   buf MGM_BG_0( X, A );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_AOLVLUBUF_IY2V1_4_func( X, A );
   input A;
   output X;
   buf MGM_BG_0( X, A );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_AOLVLUBUF_IY2V1_6_func( X, A );
   input A;
   output X;
   buf MGM_BG_0( X, A );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_AOLVLUBUF_IY2V1_8_func( X, A );
   input A;
   output X;
   buf MGM_BG_0( X, A );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_ELVLUNOR_V2_1_func( A, EN, X );
   input A, EN;
   output X;
   wire EN_inv_for_SAEDRVT14_ELVLUNOR_V2_1;
   not MGM_BG_0( EN_inv_for_SAEDRVT14_ELVLUNOR_V2_1, EN );
   and MGM_BG_1( X, EN_inv_for_SAEDRVT14_ELVLUNOR_V2_1, A );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_ELVLUNOR_V2_10_func( A, EN, X );
   input A, EN;
   output X;
   wire EN_inv_for_SAEDRVT14_ELVLUNOR_V2_10;
   not MGM_BG_0( EN_inv_for_SAEDRVT14_ELVLUNOR_V2_10, EN );
   and MGM_BG_1( X, EN_inv_for_SAEDRVT14_ELVLUNOR_V2_10, A );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_ELVLUNOR_V2_12_func( A, EN, X );
   input A, EN;
   output X;
   wire EN_inv_for_SAEDRVT14_ELVLUNOR_V2_12;
   not MGM_BG_0( EN_inv_for_SAEDRVT14_ELVLUNOR_V2_12, EN );
   and MGM_BG_1( X, EN_inv_for_SAEDRVT14_ELVLUNOR_V2_12, A );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_ELVLUNOR_V2_2_func( A, EN, X );
   input A, EN;
   output X;
   wire EN_inv_for_SAEDRVT14_ELVLUNOR_V2_2;
   not MGM_BG_0( EN_inv_for_SAEDRVT14_ELVLUNOR_V2_2, EN );
   and MGM_BG_1( X, EN_inv_for_SAEDRVT14_ELVLUNOR_V2_2, A );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_ELVLUNOR_V2_3_func( A, EN, X );
   input A, EN;
   output X;
   wire EN_inv_for_SAEDRVT14_ELVLUNOR_V2_3;
   not MGM_BG_0( EN_inv_for_SAEDRVT14_ELVLUNOR_V2_3, EN );
   and MGM_BG_1( X, EN_inv_for_SAEDRVT14_ELVLUNOR_V2_3, A );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_ELVLUNOR_V2_4_func( A, EN, X );
   input A, EN;
   output X;
   wire EN_inv_for_SAEDRVT14_ELVLUNOR_V2_4;
   not MGM_BG_0( EN_inv_for_SAEDRVT14_ELVLUNOR_V2_4, EN );
   and MGM_BG_1( X, EN_inv_for_SAEDRVT14_ELVLUNOR_V2_4, A );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_ELVLUNOR_V2_6_func( A, EN, X );
   input A, EN;
   output X;
   wire EN_inv_for_SAEDRVT14_ELVLUNOR_V2_6;
   not MGM_BG_0( EN_inv_for_SAEDRVT14_ELVLUNOR_V2_6, EN );
   and MGM_BG_1( X, EN_inv_for_SAEDRVT14_ELVLUNOR_V2_6, A );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_ELVLUNOR_V2_8_func( A, EN, X );
   input A, EN;
   output X;
   wire EN_inv_for_SAEDRVT14_ELVLUNOR_V2_8;
   not MGM_BG_0( EN_inv_for_SAEDRVT14_ELVLUNOR_V2_8, EN );
   and MGM_BG_1( X, EN_inv_for_SAEDRVT14_ELVLUNOR_V2_8, A );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_LVLUBUF4E0_IY2_2_func( EN, A1, A2, A3, A4, X1, X2, X3, X4 );
   input A1, A2, A3, A4, EN;
   output X1, X2, X3, X4;
   and MGM_BG_0( X1, A1, EN );
   and MGM_BG_1( X2, A2, EN );
   and MGM_BG_2( X3, A3, EN );
   and MGM_BG_3( X4, A4, EN );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_LVLUBUF4E0_IY2_4_func( EN, A1, A2, A3, A4, X1, X2, X3, X4 );
   input A1, A2, A3, A4, EN;
   output X1, X2, X3, X4;
   and MGM_BG_0( X1, A1, EN );
   and MGM_BG_1( X2, A2, EN );
   and MGM_BG_2( X3, A3, EN );
   and MGM_BG_3( X4, A4, EN );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_LVLUBUF4E0_IY2_8_func( EN, A1, A2, A3, A4, X1, X2, X3, X4 );
   input A1, A2, A3, A4, EN;
   output X1, X2, X3, X4;
   and MGM_BG_0( X1, A1, EN );
   and MGM_BG_1( X2, A2, EN );
   and MGM_BG_2( X3, A3, EN );
   and MGM_BG_3( X4, A4, EN );

endmodule
`endcelldefine

//****************************************************************************//
// Verilog models generated by SiliconSmart M-2017.03-SP3 build date: Aug 22, 2017 15:59:14. (SMSC-2) //
// Siliconsmart Path: /global/apps/siliconsmart_2017.03-SP3/linux64/bin/siliconsmart //
// Host Name: am04dwemt015.internal.synopsys.com, User Name: lenag, PID: 26406  //
// Directory: /remote/saed/meruzha/CHAR/rvt/processes_std/tt0p8v25c/siliconsmart/simulation_dff_latch_scan_dff //
//                                                                            //
// File generated on Sat Oct 21 12:35:40 AMT 2017. (SMSC-3)                   //
//****************************************************************************//


 



primitive SAEDRVT14_CKGTNLT_V5_1_statetable_IQ(IQ, EN, SE, CK);
output IQ;
reg IQ;
input EN, SE, CK; 
table 
// EN, SE, CK : IQ : IQ
  ?  ?  0   : ?   : -;
  0  0  1   : ?   : 0;
  0  1  1   : ?   : 1;
  1  0  1   : ?   : 1;
  1  1  1   : ?   : 1;

endtable
endprimitive


`celldefine
module SAEDRVT14_CKGTNLT_V5_1_func( Q, CK, EN, SE );
   input CK, EN, SE;
   output Q;
SAEDRVT14_CKGTNLT_V5_1_statetable_IQ(IQ, EN, SE, CK);
   wire IQ_inv_for_SAEDRVT14_CKGTNLT_V5_1;
   not MGM_BG_0( IQ_inv_for_SAEDRVT14_CKGTNLT_V5_1, IQ );
   or MGM_BG_1( Q, CK, IQ_inv_for_SAEDRVT14_CKGTNLT_V5_1 );

endmodule
`endcelldefine


primitive SAEDRVT14_CKGTNLT_V5_12_statetable_IQ(IQ, EN, SE, CK);
output IQ;
reg IQ;
input EN, SE, CK; 
table 
// EN, SE, CK : IQ : IQ
  ?  ?  0   : ?   : -;
  0  0  1   : ?   : 0;
  0  1  1   : ?   : 1;
  1  0  1   : ?   : 1;
  1  1  1   : ?   : 1;

endtable
endprimitive


`celldefine
module SAEDRVT14_CKGTNLT_V5_12_func( Q, CK, EN, SE );
   input CK, EN, SE;
   output Q;
SAEDRVT14_CKGTNLT_V5_12_statetable_IQ(IQ, EN, SE, CK);
   wire IQ_inv_for_SAEDRVT14_CKGTNLT_V5_12;
   not MGM_BG_0( IQ_inv_for_SAEDRVT14_CKGTNLT_V5_12, IQ );
   or MGM_BG_1( Q, CK, IQ_inv_for_SAEDRVT14_CKGTNLT_V5_12 );

endmodule
`endcelldefine


primitive SAEDRVT14_CKGTNLT_V5_2_statetable_IQ(IQ, EN, SE, CK);
output IQ;
reg IQ;
input EN, SE, CK; 
table 
// EN, SE, CK : IQ : IQ
  ?  ?  0   : ?   : -;
  0  0  1   : ?   : 0;
  0  1  1   : ?   : 1;
  1  0  1   : ?   : 1;
  1  1  1   : ?   : 1;

endtable
endprimitive


`celldefine
module SAEDRVT14_CKGTNLT_V5_2_func( Q, CK, EN, SE );
   input CK, EN, SE;
   output Q;
SAEDRVT14_CKGTNLT_V5_2_statetable_IQ(IQ, EN, SE, CK);
   wire IQ_inv_for_SAEDRVT14_CKGTNLT_V5_2;
   not MGM_BG_0( IQ_inv_for_SAEDRVT14_CKGTNLT_V5_2, IQ );
   or MGM_BG_1( Q, CK, IQ_inv_for_SAEDRVT14_CKGTNLT_V5_2 );

endmodule
`endcelldefine


primitive SAEDRVT14_CKGTNLT_V5_3_statetable_IQ(IQ, EN, SE, CK);
output IQ;
reg IQ;
input EN, SE, CK; 
table 
// EN, SE, CK : IQ : IQ
  ?  ?  0   : ?   : -;
  0  0  1   : ?   : 0;
  0  1  1   : ?   : 1;
  1  0  1   : ?   : 1;
  1  1  1   : ?   : 1;

endtable
endprimitive


`celldefine
module SAEDRVT14_CKGTNLT_V5_3_func( Q, CK, EN, SE );
   input CK, EN, SE;
   output Q;
SAEDRVT14_CKGTNLT_V5_3_statetable_IQ(IQ, EN, SE, CK);
   wire IQ_inv_for_SAEDRVT14_CKGTNLT_V5_3;
   not MGM_BG_0( IQ_inv_for_SAEDRVT14_CKGTNLT_V5_3, IQ );
   or MGM_BG_1( Q, CK, IQ_inv_for_SAEDRVT14_CKGTNLT_V5_3 );

endmodule
`endcelldefine


primitive SAEDRVT14_CKGTNLT_V5_4_statetable_IQ(IQ, EN, SE, CK);
output IQ;
reg IQ;
input EN, SE, CK; 
table 
// EN, SE, CK : IQ : IQ
  ?  ?  0   : ?   : -;
  0  0  1   : ?   : 0;
  0  1  1   : ?   : 1;
  1  0  1   : ?   : 1;
  1  1  1   : ?   : 1;

endtable
endprimitive


`celldefine
module SAEDRVT14_CKGTNLT_V5_4_func( Q, CK, EN, SE );
   input CK, EN, SE;
   output Q;
SAEDRVT14_CKGTNLT_V5_4_statetable_IQ(IQ, EN, SE, CK);
   wire IQ_inv_for_SAEDRVT14_CKGTNLT_V5_4;
   not MGM_BG_0( IQ_inv_for_SAEDRVT14_CKGTNLT_V5_4, IQ );
   or MGM_BG_1( Q, CK, IQ_inv_for_SAEDRVT14_CKGTNLT_V5_4 );

endmodule
`endcelldefine


primitive SAEDRVT14_CKGTNLT_V5_5_statetable_IQ(IQ, EN, SE, CK);
output IQ;
reg IQ;
input EN, SE, CK; 
table 
// EN, SE, CK : IQ : IQ
  ?  ?  0   : ?   : -;
  0  0  1   : ?   : 0;
  0  1  1   : ?   : 1;
  1  0  1   : ?   : 1;
  1  1  1   : ?   : 1;

endtable
endprimitive


`celldefine
module SAEDRVT14_CKGTNLT_V5_5_func( Q, CK, EN, SE );
   input CK, EN, SE;
   output Q;
SAEDRVT14_CKGTNLT_V5_5_statetable_IQ(IQ, EN, SE, CK);
   wire IQ_inv_for_SAEDRVT14_CKGTNLT_V5_5;
   not MGM_BG_0( IQ_inv_for_SAEDRVT14_CKGTNLT_V5_5, IQ );
   or MGM_BG_1( Q, CK, IQ_inv_for_SAEDRVT14_CKGTNLT_V5_5 );

endmodule
`endcelldefine


primitive SAEDRVT14_CKGTNLT_V5_6_statetable_IQ(IQ, EN, SE, CK);
output IQ;
reg IQ;
input EN, SE, CK; 
table 
// EN, SE, CK : IQ : IQ
  ?  ?  0   : ?   : -;
  0  0  1   : ?   : 0;
  0  1  1   : ?   : 1;
  1  0  1   : ?   : 1;
  1  1  1   : ?   : 1;

endtable
endprimitive


`celldefine
module SAEDRVT14_CKGTNLT_V5_6_func( Q, CK, EN, SE );
   input CK, EN, SE;
   output Q;
SAEDRVT14_CKGTNLT_V5_6_statetable_IQ(IQ, EN, SE, CK);
   wire IQ_inv_for_SAEDRVT14_CKGTNLT_V5_6;
   not MGM_BG_0( IQ_inv_for_SAEDRVT14_CKGTNLT_V5_6, IQ );
   or MGM_BG_1( Q, CK, IQ_inv_for_SAEDRVT14_CKGTNLT_V5_6 );

endmodule
`endcelldefine


primitive SAEDRVT14_CKGTNLT_V5_8_statetable_IQ(IQ, EN, SE, CK);
output IQ;
reg IQ;
input EN, SE, CK; 
table 
// EN, SE, CK : IQ : IQ
  ?  ?  0   : ?   : -;
  0  0  1   : ?   : 0;
  0  1  1   : ?   : 1;
  1  0  1   : ?   : 1;
  1  1  1   : ?   : 1;

endtable
endprimitive


`celldefine
module SAEDRVT14_CKGTNLT_V5_8_func( Q, CK, EN, SE );
   input CK, EN, SE;
   output Q;
SAEDRVT14_CKGTNLT_V5_8_statetable_IQ(IQ, EN, SE, CK);
   wire IQ_inv_for_SAEDRVT14_CKGTNLT_V5_8;
   not MGM_BG_0( IQ_inv_for_SAEDRVT14_CKGTNLT_V5_8, IQ );
   or MGM_BG_1( Q, CK, IQ_inv_for_SAEDRVT14_CKGTNLT_V5_8 );

endmodule
`endcelldefine


primitive SAEDRVT14_CKGTPLT_V5_1_statetable_IQ(IQ, EN, SE, CK);
output IQ;
reg IQ;
input EN, SE, CK; 
table 
// EN, SE, CK : IQ : IQ
  ?  ?  1   : ?   : -;
  0  0  0   : ?   : 0;
  0  1  0   : ?   : 1;
  1  0  0   : ?   : 1;
  1  1  0   : ?   : 1;

endtable
endprimitive


`celldefine
module SAEDRVT14_CKGTPLT_V5_1_func( Q, CK, EN, SE );
   input CK, EN, SE;
   output Q;
SAEDRVT14_CKGTPLT_V5_1_statetable_IQ(IQ, EN, SE, CK);
   and MGM_BG_0( Q, CK, IQ );

endmodule
`endcelldefine


primitive SAEDRVT14_CKGTPLT_V5_12_statetable_IQ(IQ, EN, SE, CK);
output IQ;
reg IQ;
input EN, SE, CK; 
table 
// EN, SE, CK : IQ : IQ
  ?  ?  1   : ?   : -;
  0  0  0   : ?   : 0;
  0  1  0   : ?   : 1;
  1  0  0   : ?   : 1;
  1  1  0   : ?   : 1;

endtable
endprimitive


`celldefine
module SAEDRVT14_CKGTPLT_V5_12_func( Q, CK, EN, SE );
   input CK, EN, SE;
   output Q;
SAEDRVT14_CKGTPLT_V5_12_statetable_IQ(IQ, EN, SE, CK);
   and MGM_BG_0( Q, CK, IQ );

endmodule
`endcelldefine


primitive SAEDRVT14_CKGTPLT_V5_16_statetable_IQ(IQ, EN, SE, CK);
output IQ;
reg IQ;
input EN, SE, CK; 
table 
// EN, SE, CK : IQ : IQ
  ?  ?  1   : ?   : -;
  0  0  0   : ?   : 0;
  0  1  0   : ?   : 1;
  1  0  0   : ?   : 1;
  1  1  0   : ?   : 1;

endtable
endprimitive


`celldefine
module SAEDRVT14_CKGTPLT_V5_16_func( Q, CK, EN, SE );
   input CK, EN, SE;
   output Q;
SAEDRVT14_CKGTPLT_V5_16_statetable_IQ(IQ, EN, SE, CK);
   and MGM_BG_0( Q, CK, IQ );

endmodule
`endcelldefine


primitive SAEDRVT14_CKGTPLT_V5_2_statetable_IQ(IQ, EN, SE, CK);
output IQ;
reg IQ;
input EN, SE, CK; 
table 
// EN, SE, CK : IQ : IQ
  ?  ?  1   : ?   : -;
  0  0  0   : ?   : 0;
  0  1  0   : ?   : 1;
  1  0  0   : ?   : 1;
  1  1  0   : ?   : 1;

endtable
endprimitive


`celldefine
module SAEDRVT14_CKGTPLT_V5_2_func( Q, CK, EN, SE );
   input CK, EN, SE;
   output Q;
SAEDRVT14_CKGTPLT_V5_2_statetable_IQ(IQ, EN, SE, CK);
   and MGM_BG_0( Q, CK, IQ );

endmodule
`endcelldefine


primitive SAEDRVT14_CKGTPLT_V5_20_statetable_IQ(IQ, EN, SE, CK);
output IQ;
reg IQ;
input EN, SE, CK; 
table 
// EN, SE, CK : IQ : IQ
  ?  ?  1   : ?   : -;
  0  0  0   : ?   : 0;
  0  1  0   : ?   : 1;
  1  0  0   : ?   : 1;
  1  1  0   : ?   : 1;

endtable
endprimitive


`celldefine
module SAEDRVT14_CKGTPLT_V5_20_func( Q, CK, EN, SE );
   input CK, EN, SE;
   output Q;
SAEDRVT14_CKGTPLT_V5_20_statetable_IQ(IQ, EN, SE, CK);
   and MGM_BG_0( Q, CK, IQ );

endmodule
`endcelldefine


primitive SAEDRVT14_CKGTPLT_V5_24_statetable_IQ(IQ, EN, SE, CK);
output IQ;
reg IQ;
input EN, SE, CK; 
table 
// EN, SE, CK : IQ : IQ
  ?  ?  1   : ?   : -;
  0  0  0   : ?   : 0;
  0  1  0   : ?   : 1;
  1  0  0   : ?   : 1;
  1  1  0   : ?   : 1;

endtable
endprimitive


`celldefine
module SAEDRVT14_CKGTPLT_V5_24_func( Q, CK, EN, SE );
   input CK, EN, SE;
   output Q;
SAEDRVT14_CKGTPLT_V5_24_statetable_IQ(IQ, EN, SE, CK);
   and MGM_BG_0( Q, CK, IQ );

endmodule
`endcelldefine


primitive SAEDRVT14_CKGTPLT_V5_3_statetable_IQ(IQ, EN, SE, CK);
output IQ;
reg IQ;
input EN, SE, CK; 
table 
// EN, SE, CK : IQ : IQ
  ?  ?  1   : ?   : -;
  0  0  0   : ?   : 0;
  0  1  0   : ?   : 1;
  1  0  0   : ?   : 1;
  1  1  0   : ?   : 1;

endtable
endprimitive


`celldefine
module SAEDRVT14_CKGTPLT_V5_3_func( Q, CK, EN, SE );
   input CK, EN, SE;
   output Q;
SAEDRVT14_CKGTPLT_V5_3_statetable_IQ(IQ, EN, SE, CK);
   and MGM_BG_0( Q, CK, IQ );

endmodule
`endcelldefine


primitive SAEDRVT14_CKGTPLT_V5_4_statetable_IQ(IQ, EN, SE, CK);
output IQ;
reg IQ;
input EN, SE, CK; 
table 
// EN, SE, CK : IQ : IQ
  ?  ?  1   : ?   : -;
  0  0  0   : ?   : 0;
  0  1  0   : ?   : 1;
  1  0  0   : ?   : 1;
  1  1  0   : ?   : 1;

endtable
endprimitive


`celldefine
module SAEDRVT14_CKGTPLT_V5_4_func( Q, CK, EN, SE );
   input CK, EN, SE;
   output Q;
SAEDRVT14_CKGTPLT_V5_4_statetable_IQ(IQ, EN, SE, CK);
   and MGM_BG_0( Q, CK, IQ );

endmodule
`endcelldefine


primitive SAEDRVT14_CKGTPLT_V5_5_statetable_IQ(IQ, EN, SE, CK);
output IQ;
reg IQ;
input EN, SE, CK; 
table 
// EN, SE, CK : IQ : IQ
  ?  ?  1   : ?   : -;
  0  0  0   : ?   : 0;
  0  1  0   : ?   : 1;
  1  0  0   : ?   : 1;
  1  1  0   : ?   : 1;

endtable
endprimitive


`celldefine
module SAEDRVT14_CKGTPLT_V5_5_func( Q, CK, EN, SE );
   input CK, EN, SE;
   output Q;
SAEDRVT14_CKGTPLT_V5_5_statetable_IQ(IQ, EN, SE, CK);
   and MGM_BG_0( Q, CK, IQ );

endmodule
`endcelldefine


primitive SAEDRVT14_CKGTPLT_V5_6_statetable_IQ(IQ, EN, SE, CK);
output IQ;
reg IQ;
input EN, SE, CK; 
table 
// EN, SE, CK : IQ : IQ
  ?  ?  1   : ?   : -;
  0  0  0   : ?   : 0;
  0  1  0   : ?   : 1;
  1  0  0   : ?   : 1;
  1  1  0   : ?   : 1;

endtable
endprimitive


`celldefine
module SAEDRVT14_CKGTPLT_V5_6_func( Q, CK, EN, SE );
   input CK, EN, SE;
   output Q;
SAEDRVT14_CKGTPLT_V5_6_statetable_IQ(IQ, EN, SE, CK);
   and MGM_BG_0( Q, CK, IQ );

endmodule
`endcelldefine


primitive SAEDRVT14_CKGTPLT_V5_8_statetable_IQ(IQ, EN, SE, CK);
output IQ;
reg IQ;
input EN, SE, CK; 
table 
// EN, SE, CK : IQ : IQ
  ?  ?  1   : ?   : -;
  0  0  0   : ?   : 0;
  0  1  0   : ?   : 1;
  1  0  0   : ?   : 1;
  1  1  0   : ?   : 1;

endtable
endprimitive


`celldefine
module SAEDRVT14_CKGTPLT_V5_8_func( Q, CK, EN, SE );
   input CK, EN, SE;
   output Q;
SAEDRVT14_CKGTPLT_V5_8_statetable_IQ(IQ, EN, SE, CK);
   and MGM_BG_0( Q, CK, IQ );

endmodule
`endcelldefine


primitive SAEDRVT14_CKGTPL_V5_0P5_statetable_IQ(IQ, EN, CK);
output IQ;
reg IQ;
input EN, CK; 
table 
// EN, CK : IQ : IQ
  0  0   : ?   : 0;
  1  0   : ?   : 1;
  ?  1   : ?   : -;

endtable
endprimitive


`celldefine
module SAEDRVT14_CKGTPL_V5_0P5_func( Q, CK, EN );
   input CK, EN;
   output Q;
SAEDRVT14_CKGTPL_V5_0P5_statetable_IQ(IQ, EN, CK);
   and MGM_BG_0( Q, CK, IQ );

endmodule
`endcelldefine


primitive SAEDRVT14_CKGTPL_V5_1_statetable_IQ(IQ, EN, CK);
output IQ;
reg IQ;
input EN, CK; 
table 
// EN, CK : IQ : IQ
  0  0   : ?   : 0;
  1  0   : ?   : 1;
  ?  1   : ?   : -;

endtable
endprimitive


`celldefine
module SAEDRVT14_CKGTPL_V5_1_func( Q, CK, EN );
   input CK, EN;
   output Q;
SAEDRVT14_CKGTPL_V5_1_statetable_IQ(IQ, EN, CK);
   and MGM_BG_0( Q, CK, IQ );

endmodule
`endcelldefine


primitive SAEDRVT14_CKGTPL_V5_2_statetable_IQ(IQ, EN, CK);
output IQ;
reg IQ;
input EN, CK; 
table 
// EN, CK : IQ : IQ
  0  0   : ?   : 0;
  1  0   : ?   : 1;
  ?  1   : ?   : -;

endtable
endprimitive


`celldefine
module SAEDRVT14_CKGTPL_V5_2_func( Q, CK, EN );
   input CK, EN;
   output Q;
SAEDRVT14_CKGTPL_V5_2_statetable_IQ(IQ, EN, CK);
   and MGM_BG_0( Q, CK, IQ );

endmodule
`endcelldefine


primitive SAEDRVT14_CKGTPL_V5_4_statetable_IQ(IQ, EN, CK);
output IQ;
reg IQ;
input EN, CK; 
table 
// EN, CK : IQ : IQ
  0  0   : ?   : 0;
  1  0   : ?   : 1;
  ?  1   : ?   : -;

endtable
endprimitive


`celldefine
module SAEDRVT14_CKGTPL_V5_4_func( Q, CK, EN );
   input CK, EN;
   output Q;
SAEDRVT14_CKGTPL_V5_4_statetable_IQ(IQ, EN, CK);
   and MGM_BG_0( Q, CK, IQ );

endmodule
`endcelldefine


primitive UDP_saed14rvt_tt0p8v25c_MGM_IQ_LATCH_UDP( Q, C, P, CK, D );
output Q;
reg Q;
input C, P, CK, D; 
table 
//C  P CK  D   :  Q  :  Q 
  0  0  0  *  :  ?  :  -;
  0  0  (?0)  ?  :  ?  :  -;
  0  (?0)  0  ?  :  ?  :  -;
  (?0)  0  0  ?  :  ?  :  -;
  ?  0  1  0  :  ?  :  0;
  ?  0  ?  (?0)  :  0  :  0;
  ?  (?0)  ?  0  :  0  :  0;
  1  0  ?  ?  :  ?  :  0;
  0  ?  1  1  :  ?  :  1;
  0  ?  ?  (?1)  :  1  :  1;
  (?0)  ?  ?  1  :  1  :  1;
  0  1  ?  ?  :  ?  :  1;

endtable
endprimitive


`celldefine
module SAEDRVT14_CKINVGTPLT_V7_1_func( QB, CK, EN, SE );
   input CK, EN, SE;
   output QB;
   not MGM_BG_0( MGM_EN0, CK );
   or MGM_BG_1( MGM_D0, EN, SE );
   UDP_saed14rvt_tt0p8v25c_MGM_IQ_LATCH_UDP( IQ, 1'b0, 1'b0, MGM_EN0, MGM_D0 );
   wire CK_inv_for_SAEDRVT14_CKINVGTPLT_V7_1;
   not MGM_BG_2( CK_inv_for_SAEDRVT14_CKINVGTPLT_V7_1, CK );
   wire IQ_inv_for_SAEDRVT14_CKINVGTPLT_V7_1;
   not MGM_BG_3( IQ_inv_for_SAEDRVT14_CKINVGTPLT_V7_1, IQ );
   or MGM_BG_4( QB, CK_inv_for_SAEDRVT14_CKINVGTPLT_V7_1, IQ_inv_for_SAEDRVT14_CKINVGTPLT_V7_1 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_CKINVGTPLT_V7_2_func( QB, CK, EN, SE );
   input CK, EN, SE;
   output QB;
   not MGM_BG_0( MGM_EN0, CK );
   or MGM_BG_1( MGM_D0, EN, SE );
   UDP_saed14rvt_tt0p8v25c_MGM_IQ_LATCH_UDP( IQ, 1'b0, 1'b0, MGM_EN0, MGM_D0 );
   wire CK_inv_for_SAEDRVT14_CKINVGTPLT_V7_2;
   not MGM_BG_2( CK_inv_for_SAEDRVT14_CKINVGTPLT_V7_2, CK );
   wire IQ_inv_for_SAEDRVT14_CKINVGTPLT_V7_2;
   not MGM_BG_3( IQ_inv_for_SAEDRVT14_CKINVGTPLT_V7_2, IQ );
   or MGM_BG_4( QB, CK_inv_for_SAEDRVT14_CKINVGTPLT_V7_2, IQ_inv_for_SAEDRVT14_CKINVGTPLT_V7_2 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_CKINVGTPLT_V7_3_func( QB, CK, EN, SE );
   input CK, EN, SE;
   output QB;
   not MGM_BG_0( MGM_EN0, CK );
   or MGM_BG_1( MGM_D0, EN, SE );
   UDP_saed14rvt_tt0p8v25c_MGM_IQ_LATCH_UDP( IQ, 1'b0, 1'b0, MGM_EN0, MGM_D0 );
   wire CK_inv_for_SAEDRVT14_CKINVGTPLT_V7_3;
   not MGM_BG_2( CK_inv_for_SAEDRVT14_CKINVGTPLT_V7_3, CK );
   wire IQ_inv_for_SAEDRVT14_CKINVGTPLT_V7_3;
   not MGM_BG_3( IQ_inv_for_SAEDRVT14_CKINVGTPLT_V7_3, IQ );
   or MGM_BG_4( QB, CK_inv_for_SAEDRVT14_CKINVGTPLT_V7_3, IQ_inv_for_SAEDRVT14_CKINVGTPLT_V7_3 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_CKINVGTPLT_V7_4_func( QB, CK, EN, SE );
   input CK, EN, SE;
   output QB;
   not MGM_BG_0( MGM_EN0, CK );
   or MGM_BG_1( MGM_D0, EN, SE );
   UDP_saed14rvt_tt0p8v25c_MGM_IQ_LATCH_UDP( IQ, 1'b0, 1'b0, MGM_EN0, MGM_D0 );
   wire CK_inv_for_SAEDRVT14_CKINVGTPLT_V7_4;
   not MGM_BG_2( CK_inv_for_SAEDRVT14_CKINVGTPLT_V7_4, CK );
   wire IQ_inv_for_SAEDRVT14_CKINVGTPLT_V7_4;
   not MGM_BG_3( IQ_inv_for_SAEDRVT14_CKINVGTPLT_V7_4, IQ );
   or MGM_BG_4( QB, CK_inv_for_SAEDRVT14_CKINVGTPLT_V7_4, IQ_inv_for_SAEDRVT14_CKINVGTPLT_V7_4 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_CKINVGTPLT_V7_5_func( QB, CK, EN, SE );
   input CK, EN, SE;
   output QB;
   not MGM_BG_0( MGM_EN0, CK );
   or MGM_BG_1( MGM_D0, EN, SE );
   UDP_saed14rvt_tt0p8v25c_MGM_IQ_LATCH_UDP( IQ, 1'b0, 1'b0, MGM_EN0, MGM_D0 );
   wire CK_inv_for_SAEDRVT14_CKINVGTPLT_V7_5;
   not MGM_BG_2( CK_inv_for_SAEDRVT14_CKINVGTPLT_V7_5, CK );
   wire IQ_inv_for_SAEDRVT14_CKINVGTPLT_V7_5;
   not MGM_BG_3( IQ_inv_for_SAEDRVT14_CKINVGTPLT_V7_5, IQ );
   or MGM_BG_4( QB, CK_inv_for_SAEDRVT14_CKINVGTPLT_V7_5, IQ_inv_for_SAEDRVT14_CKINVGTPLT_V7_5 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_CKINVGTPLT_V7_6_func( QB, CK, EN, SE );
   input CK, EN, SE;
   output QB;
   not MGM_BG_0( MGM_EN0, CK );
   or MGM_BG_1( MGM_D0, EN, SE );
   UDP_saed14rvt_tt0p8v25c_MGM_IQ_LATCH_UDP( IQ, 1'b0, 1'b0, MGM_EN0, MGM_D0 );
   wire CK_inv_for_SAEDRVT14_CKINVGTPLT_V7_6;
   not MGM_BG_2( CK_inv_for_SAEDRVT14_CKINVGTPLT_V7_6, CK );
   wire IQ_inv_for_SAEDRVT14_CKINVGTPLT_V7_6;
   not MGM_BG_3( IQ_inv_for_SAEDRVT14_CKINVGTPLT_V7_6, IQ );
   or MGM_BG_4( QB, CK_inv_for_SAEDRVT14_CKINVGTPLT_V7_6, IQ_inv_for_SAEDRVT14_CKINVGTPLT_V7_6 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_CKINVGTPLT_V7_8_func( QB, CK, EN, SE );
   input CK, EN, SE;
   output QB;
   not MGM_BG_0( MGM_EN0, CK );
   or MGM_BG_1( MGM_D0, EN, SE );
   UDP_saed14rvt_tt0p8v25c_MGM_IQ_LATCH_UDP( IQ, 1'b0, 1'b0, MGM_EN0, MGM_D0 );
   wire CK_inv_for_SAEDRVT14_CKINVGTPLT_V7_8;
   not MGM_BG_2( CK_inv_for_SAEDRVT14_CKINVGTPLT_V7_8, CK );
   wire IQ_inv_for_SAEDRVT14_CKINVGTPLT_V7_8;
   not MGM_BG_3( IQ_inv_for_SAEDRVT14_CKINVGTPLT_V7_8, IQ );
   or MGM_BG_4( QB, CK_inv_for_SAEDRVT14_CKINVGTPLT_V7_8, IQ_inv_for_SAEDRVT14_CKINVGTPLT_V7_8 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_CLKSPLT_1_func( CKOUT, CKOUTB, CK );
   input CK;
   output CKOUT, CKOUTB;
   buf MGM_BG_0( CKOUT, CK );
   not MGM_BG_1( CKOUTB, CK );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_CLKSPLT_8_func( CKOUT, CKOUTB, CK );
   input CK;
   output CKOUT, CKOUTB;
   buf MGM_BG_0( CKOUT, CK );
   not MGM_BG_1( CKOUTB, CK );

endmodule
`endcelldefine


primitive UDP_saed14rvt_tt0p8v25c_MGM_IQ_FF_UDP( Q, C, P, CK, D );
output Q;
reg Q;
input C, P, CK, D; 
table 
//C  P CK  D   :  Q  :  Q 
  0  0  n  ?  :  ?  :  -;
  ?  0  r  0  :  ?  :  0;
  ?  0  p  0  :  0  :  0;
  1  0  ?  ?  :  ?  :  0;
  0  ?  r  1  :  ?  :  1;
  0  ?  p  1  :  1  :  1;
  0  1  ?  ?  :  ?  :  1;
  0  0  ?  *  :  ?  :  -;
  0  n  ?  ?  :  ?  :  -;
  n  0  ?  ?  :  ?  :  -;
  0  p  ?  ?  :  ?  :  -;

endtable
endprimitive


`celldefine
module SAEDRVT14_FDNQ_V2_8_func( Q, CK, D );
   input CK, D;
   output Q;
   not MGM_BG_0( MGM_CLK0, CK );
   UDP_saed14rvt_tt0p8v25c_MGM_IQ_FF_UDP( IQ, 1'b0, 1'b0, MGM_CLK0, D );
   buf MGM_BG_1( Q, IQ );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_FDNQ_V3_1_func( Q, CK, D );
   input CK, D;
   output Q;
   not MGM_BG_0( MGM_CLK0, CK );
   UDP_saed14rvt_tt0p8v25c_MGM_IQ_FF_UDP( IQ, 1'b0, 1'b0, MGM_CLK0, D );
   buf MGM_BG_1( Q, IQ );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_FDNQ_V3_2_func( Q, CK, D );
   input CK, D;
   output Q;
   not MGM_BG_0( MGM_CLK0, CK );
   UDP_saed14rvt_tt0p8v25c_MGM_IQ_FF_UDP( IQ, 1'b0, 1'b0, MGM_CLK0, D );
   buf MGM_BG_1( Q, IQ );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_FDNQ_V3_4_func( Q, CK, D );
   input CK, D;
   output Q;
   not MGM_BG_0( MGM_CLK0, CK );
   UDP_saed14rvt_tt0p8v25c_MGM_IQ_FF_UDP( IQ, 1'b0, 1'b0, MGM_CLK0, D );
   buf MGM_BG_1( Q, IQ );

endmodule
`endcelldefine


primitive UDP_saed14rvt_tt0p8v25c_MGM_L_IQ_FF_UDP( Q, C, P, CK, D );
output Q;
reg Q;
input C, P, CK, D; 
table 
//C  P CK  D   :  Q  :  Q 
  0  0  n  ?  :  ?  :  -;
  ?  0  r  0  :  ?  :  0;
  ?  0  p  0  :  0  :  0;
  1  ?  ?  ?  :  ?  :  0;
  0  ?  r  1  :  ?  :  1;
  0  ?  p  1  :  1  :  1;
  0  1  ?  ?  :  ?  :  1;
  0  0  ?  *  :  ?  :  -;
  0  n  ?  ?  :  ?  :  -;
  n  0  ?  ?  :  ?  :  -;
  0  p  ?  ?  :  ?  :  -;

endtable
endprimitive


`celldefine
module SAEDRVT14_FDNRBSBQ_V2_0P5_func( Q, CK, D, RD, SD );
   input CK, D, RD, SD;
   output Q;
   not MGM_BG_0( MGM_CLK0, CK );
   not MGM_BG_1( MGM_P0, SD );
   not MGM_BG_2( MGM_C0, RD );
   UDP_saed14rvt_tt0p8v25c_MGM_L_IQ_FF_UDP( IQ, MGM_C0, MGM_P0, MGM_CLK0, D );
   buf MGM_BG_3( Q, IQ );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_FDNRBSBQ_V2_1_func( Q, CK, D, RD, SD );
   input CK, D, RD, SD;
   output Q;
   not MGM_BG_0( MGM_CLK0, CK );
   not MGM_BG_1( MGM_P0, SD );
   not MGM_BG_2( MGM_C0, RD );
   UDP_saed14rvt_tt0p8v25c_MGM_L_IQ_FF_UDP( IQ, MGM_C0, MGM_P0, MGM_CLK0, D );
   buf MGM_BG_3( Q, IQ );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_FDNRBSBQ_V2_2_func( Q, CK, D, RD, SD );
   input CK, D, RD, SD;
   output Q;
   not MGM_BG_0( MGM_CLK0, CK );
   not MGM_BG_1( MGM_P0, SD );
   not MGM_BG_2( MGM_C0, RD );
   UDP_saed14rvt_tt0p8v25c_MGM_L_IQ_FF_UDP( IQ, MGM_C0, MGM_P0, MGM_CLK0, D );
   buf MGM_BG_3( Q, IQ );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_FDNRBSBQ_V2_4_func( Q, CK, D, RD, SD );
   input CK, D, RD, SD;
   output Q;
   not MGM_BG_0( MGM_CLK0, CK );
   not MGM_BG_1( MGM_P0, SD );
   not MGM_BG_2( MGM_C0, RD );
   UDP_saed14rvt_tt0p8v25c_MGM_L_IQ_FF_UDP( IQ, MGM_C0, MGM_P0, MGM_CLK0, D );
   buf MGM_BG_3( Q, IQ );

endmodule
`endcelldefine


primitive UDP_saed14rvt_tt0p8v25c_MGM_IQN_FF_UDP( Q, C, P, CK, D );
output Q;
reg Q;
input C, P, CK, D; 
table 
//C  P CK  D   :  Q  :  Q 
  0  0  n  ?  :  ?  :  -;
  ?  0  r  0  :  ?  :  1;
  ?  0  p  0  :  1  :  1;
  1  0  ?  ?  :  ?  :  1;
  0  ?  r  1  :  ?  :  0;
  0  ?  p  1  :  0  :  0;
  0  1  ?  ?  :  ?  :  0;
  0  0  ?  *  :  ?  :  -;
  0  n  ?  ?  :  ?  :  -;
  n  0  ?  ?  :  ?  :  -;
  0  p  ?  ?  :  ?  :  -;

endtable
endprimitive


`celldefine
module SAEDRVT14_FDN_V2_0P5_func( Q, QN, CK, D );
   input CK, D;
   output Q, QN;
   not MGM_BG_0( MGM_CLK0, CK );
   UDP_saed14rvt_tt0p8v25c_MGM_IQ_FF_UDP( IQ, 1'b0, 1'b0, MGM_CLK0, D );
   UDP_saed14rvt_tt0p8v25c_MGM_IQN_FF_UDP( IQN, 1'b0, 1'b0, MGM_CLK0, D );
   buf MGM_BG_1( Q, IQ );
   buf MGM_BG_2( QN, IQN );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_FDN_V2_1_func( Q, QN, CK, D );
   input CK, D;
   output Q, QN;
   not MGM_BG_0( MGM_CLK0, CK );
   UDP_saed14rvt_tt0p8v25c_MGM_IQ_FF_UDP( IQ, 1'b0, 1'b0, MGM_CLK0, D );
   UDP_saed14rvt_tt0p8v25c_MGM_IQN_FF_UDP( IQN, 1'b0, 1'b0, MGM_CLK0, D );
   buf MGM_BG_1( Q, IQ );
   buf MGM_BG_2( QN, IQN );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_FDN_V2_2_func( Q, QN, CK, D );
   input CK, D;
   output Q, QN;
   not MGM_BG_0( MGM_CLK0, CK );
   UDP_saed14rvt_tt0p8v25c_MGM_IQ_FF_UDP( IQ, 1'b0, 1'b0, MGM_CLK0, D );
   UDP_saed14rvt_tt0p8v25c_MGM_IQN_FF_UDP( IQN, 1'b0, 1'b0, MGM_CLK0, D );
   buf MGM_BG_1( Q, IQ );
   buf MGM_BG_2( QN, IQN );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_FDN_V2_4_func( Q, QN, CK, D );
   input CK, D;
   output Q, QN;
   not MGM_BG_0( MGM_CLK0, CK );
   UDP_saed14rvt_tt0p8v25c_MGM_IQ_FF_UDP( IQ, 1'b0, 1'b0, MGM_CLK0, D );
   UDP_saed14rvt_tt0p8v25c_MGM_IQN_FF_UDP( IQN, 1'b0, 1'b0, MGM_CLK0, D );
   buf MGM_BG_1( Q, IQ );
   buf MGM_BG_2( QN, IQN );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_FDPCBQ_V2LP_0P5_func( Q, CK, D, RS );
   input CK, D, RS;
   output Q;
   and MGM_BG_0( MGM_D0, D, RS );
   UDP_saed14rvt_tt0p8v25c_MGM_IQ_FF_UDP( IQ, 1'b0, 1'b0, CK, MGM_D0 );
   buf MGM_BG_1( Q, IQ );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_FDPCBQ_V2LP_1_func( Q, CK, D, RS );
   input CK, D, RS;
   output Q;
   and MGM_BG_0( MGM_D0, D, RS );
   UDP_saed14rvt_tt0p8v25c_MGM_IQ_FF_UDP( IQ, 1'b0, 1'b0, CK, MGM_D0 );
   buf MGM_BG_1( Q, IQ );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_FDPCBQ_V2LP_2_func( Q, CK, D, RS );
   input CK, D, RS;
   output Q;
   and MGM_BG_0( MGM_D0, D, RS );
   UDP_saed14rvt_tt0p8v25c_MGM_IQ_FF_UDP( IQ, 1'b0, 1'b0, CK, MGM_D0 );
   buf MGM_BG_1( Q, IQ );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_FDPCBQ_V2_0P5_func( Q, CK, D, RS );
   input CK, D, RS;
   output Q;
   and MGM_BG_0( MGM_D0, D, RS );
   UDP_saed14rvt_tt0p8v25c_MGM_IQ_FF_UDP( IQ, 1'b0, 1'b0, CK, MGM_D0 );
   buf MGM_BG_1( Q, IQ );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_FDPCBQ_V2_1_func( Q, CK, D, RS );
   input CK, D, RS;
   output Q;
   and MGM_BG_0( MGM_D0, D, RS );
   UDP_saed14rvt_tt0p8v25c_MGM_IQ_FF_UDP( IQ, 1'b0, 1'b0, CK, MGM_D0 );
   buf MGM_BG_1( Q, IQ );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_FDPCBQ_V2_2_func( Q, CK, D, RS );
   input CK, D, RS;
   output Q;
   and MGM_BG_0( MGM_D0, D, RS );
   UDP_saed14rvt_tt0p8v25c_MGM_IQ_FF_UDP( IQ, 1'b0, 1'b0, CK, MGM_D0 );
   buf MGM_BG_1( Q, IQ );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_FDPCBQ_V2_4_func( Q, CK, D, RS );
   input CK, D, RS;
   output Q;
   and MGM_BG_0( MGM_D0, D, RS );
   UDP_saed14rvt_tt0p8v25c_MGM_IQ_FF_UDP( IQ, 1'b0, 1'b0, CK, MGM_D0 );
   buf MGM_BG_1( Q, IQ );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_FDPCBQ_V3_1_func( Q, CK, D, RS );
   input CK, D, RS;
   output Q;
   and MGM_BG_0( MGM_D0, D, RS );
   UDP_saed14rvt_tt0p8v25c_MGM_IQ_FF_UDP( IQ, 1'b0, 1'b0, CK, MGM_D0 );
   buf MGM_BG_1( Q, IQ );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_FDPCBQ_V3_2_func( Q, CK, D, RS );
   input CK, D, RS;
   output Q;
   and MGM_BG_0( MGM_D0, D, RS );
   UDP_saed14rvt_tt0p8v25c_MGM_IQ_FF_UDP( IQ, 1'b0, 1'b0, CK, MGM_D0 );
   buf MGM_BG_1( Q, IQ );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_FDPMQ_0P5_func( Q, CK, D0, D1, S );
   input CK, D0, D1, S;
   output Q;
   wire MGM_D0_row1;
   and MGM_BG_0( MGM_D0_row1, D0, D1 );
   wire S_inv_for_SAEDRVT14_FDPMQ_0P5;
   not MGM_BG_1( S_inv_for_SAEDRVT14_FDPMQ_0P5, S );
   wire MGM_D0_row2;
   and MGM_BG_2( MGM_D0_row2, S_inv_for_SAEDRVT14_FDPMQ_0P5, D0 );
   wire MGM_D0_row3;
   and MGM_BG_3( MGM_D0_row3, D1, S );
   or MGM_BG_4( MGM_D0, MGM_D0_row1, MGM_D0_row2, MGM_D0_row3 );
   UDP_saed14rvt_tt0p8v25c_MGM_IQ_FF_UDP( IQ, 1'b0, 1'b0, CK, MGM_D0 );
   buf MGM_BG_5( Q, IQ );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_FDPMQ_1_func( Q, CK, D0, D1, S );
   input CK, D0, D1, S;
   output Q;
   wire MGM_D0_row1;
   and MGM_BG_0( MGM_D0_row1, D0, D1 );
   wire S_inv_for_SAEDRVT14_FDPMQ_1;
   not MGM_BG_1( S_inv_for_SAEDRVT14_FDPMQ_1, S );
   wire MGM_D0_row2;
   and MGM_BG_2( MGM_D0_row2, S_inv_for_SAEDRVT14_FDPMQ_1, D0 );
   wire MGM_D0_row3;
   and MGM_BG_3( MGM_D0_row3, D1, S );
   or MGM_BG_4( MGM_D0, MGM_D0_row1, MGM_D0_row2, MGM_D0_row3 );
   UDP_saed14rvt_tt0p8v25c_MGM_IQ_FF_UDP( IQ, 1'b0, 1'b0, CK, MGM_D0 );
   buf MGM_BG_5( Q, IQ );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_FDPMQ_2_func( Q, CK, D0, D1, S );
   input CK, D0, D1, S;
   output Q;
   wire MGM_D0_row1;
   and MGM_BG_0( MGM_D0_row1, D0, D1 );
   wire S_inv_for_SAEDRVT14_FDPMQ_2;
   not MGM_BG_1( S_inv_for_SAEDRVT14_FDPMQ_2, S );
   wire MGM_D0_row2;
   and MGM_BG_2( MGM_D0_row2, S_inv_for_SAEDRVT14_FDPMQ_2, D0 );
   wire MGM_D0_row3;
   and MGM_BG_3( MGM_D0_row3, D1, S );
   or MGM_BG_4( MGM_D0, MGM_D0_row1, MGM_D0_row2, MGM_D0_row3 );
   UDP_saed14rvt_tt0p8v25c_MGM_IQ_FF_UDP( IQ, 1'b0, 1'b0, CK, MGM_D0 );
   buf MGM_BG_5( Q, IQ );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_FDPMQ_4_func( Q, CK, D0, D1, S );
   input CK, D0, D1, S;
   output Q;
   wire MGM_D0_row1;
   and MGM_BG_0( MGM_D0_row1, D0, D1 );
   wire S_inv_for_SAEDRVT14_FDPMQ_4;
   not MGM_BG_1( S_inv_for_SAEDRVT14_FDPMQ_4, S );
   wire MGM_D0_row2;
   and MGM_BG_2( MGM_D0_row2, S_inv_for_SAEDRVT14_FDPMQ_4, D0 );
   wire MGM_D0_row3;
   and MGM_BG_3( MGM_D0_row3, D1, S );
   or MGM_BG_4( MGM_D0, MGM_D0_row1, MGM_D0_row2, MGM_D0_row3 );
   UDP_saed14rvt_tt0p8v25c_MGM_IQ_FF_UDP( IQ, 1'b0, 1'b0, CK, MGM_D0 );
   buf MGM_BG_5( Q, IQ );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_FDPQB_V2LP_0P5_func( QN, CK, D );
   input CK, D;
   output QN;
   UDP_saed14rvt_tt0p8v25c_MGM_IQN_FF_UDP( IQN, 1'b0, 1'b0, CK, D );
   buf MGM_BG_0( QN, IQN );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_FDPQB_V2LP_1_func( QN, CK, D );
   input CK, D;
   output QN;
   UDP_saed14rvt_tt0p8v25c_MGM_IQN_FF_UDP( IQN, 1'b0, 1'b0, CK, D );
   buf MGM_BG_0( QN, IQN );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_FDPQB_V2LP_2_func( QN, CK, D );
   input CK, D;
   output QN;
   UDP_saed14rvt_tt0p8v25c_MGM_IQN_FF_UDP( IQN, 1'b0, 1'b0, CK, D );
   buf MGM_BG_0( QN, IQN );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_FDPQB_V2_1_func( QN, CK, D );
   input CK, D;
   output QN;
   UDP_saed14rvt_tt0p8v25c_MGM_IQN_FF_UDP( IQN, 1'b0, 1'b0, CK, D );
   buf MGM_BG_0( QN, IQN );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_FDPQB_V2_2_func( QN, CK, D );
   input CK, D;
   output QN;
   UDP_saed14rvt_tt0p8v25c_MGM_IQN_FF_UDP( IQN, 1'b0, 1'b0, CK, D );
   buf MGM_BG_0( QN, IQN );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_FDPQB_V2_4_func( QN, CK, D );
   input CK, D;
   output QN;
   UDP_saed14rvt_tt0p8v25c_MGM_IQN_FF_UDP( IQN, 1'b0, 1'b0, CK, D );
   buf MGM_BG_0( QN, IQN );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_FDPQB_V2_8_func( QN, CK, D );
   input CK, D;
   output QN;
   UDP_saed14rvt_tt0p8v25c_MGM_IQN_FF_UDP( IQN, 1'b0, 1'b0, CK, D );
   buf MGM_BG_0( QN, IQN );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_FDPQB_V3_1_func( QN, CK, D );
   input CK, D;
   output QN;
   UDP_saed14rvt_tt0p8v25c_MGM_IQN_FF_UDP( IQN, 1'b0, 1'b0, CK, D );
   buf MGM_BG_0( QN, IQN );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_FDPQB_V3_2_func( QN, CK, D );
   input CK, D;
   output QN;
   UDP_saed14rvt_tt0p8v25c_MGM_IQN_FF_UDP( IQN, 1'b0, 1'b0, CK, D );
   buf MGM_BG_0( QN, IQN );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_FDPQB_V3_4_func( QN, CK, D );
   input CK, D;
   output QN;
   UDP_saed14rvt_tt0p8v25c_MGM_IQN_FF_UDP( IQN, 1'b0, 1'b0, CK, D );
   buf MGM_BG_0( QN, IQN );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_FDPQB_V3_8_func( QN, CK, D );
   input CK, D;
   output QN;
   UDP_saed14rvt_tt0p8v25c_MGM_IQN_FF_UDP( IQN, 1'b0, 1'b0, CK, D );
   buf MGM_BG_0( QN, IQN );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_FDPQ_V2ECO_1_func( Q, CK, D );
   input CK, D;
   output Q;
   UDP_saed14rvt_tt0p8v25c_MGM_IQ_FF_UDP( IQ, 1'b0, 1'b0, CK, D );
   buf MGM_BG_0( Q, IQ );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_FDPQ_V2_1_func( Q, CK, D );
   input CK, D;
   output Q;
   UDP_saed14rvt_tt0p8v25c_MGM_IQ_FF_UDP( IQ, 1'b0, 1'b0, CK, D );
   buf MGM_BG_0( Q, IQ );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_FDPQ_V2_6_func( Q, CK, D );
   input CK, D;
   output Q;
   UDP_saed14rvt_tt0p8v25c_MGM_IQ_FF_UDP( IQ, 1'b0, 1'b0, CK, D );
   buf MGM_BG_0( Q, IQ );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_FDPQ_V2_8_func( Q, CK, D );
   input CK, D;
   output Q;
   UDP_saed14rvt_tt0p8v25c_MGM_IQ_FF_UDP( IQ, 1'b0, 1'b0, CK, D );
   buf MGM_BG_0( Q, IQ );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_FDPQ_V3_1_func( Q, CK, D );
   input CK, D;
   output Q;
   UDP_saed14rvt_tt0p8v25c_MGM_IQ_FF_UDP( IQ, 1'b0, 1'b0, CK, D );
   buf MGM_BG_0( Q, IQ );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_FDPQ_V3_2_func( Q, CK, D );
   input CK, D;
   output Q;
   UDP_saed14rvt_tt0p8v25c_MGM_IQ_FF_UDP( IQ, 1'b0, 1'b0, CK, D );
   buf MGM_BG_0( Q, IQ );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_FDPQ_V3_4_func( Q, CK, D );
   input CK, D;
   output Q;
   UDP_saed14rvt_tt0p8v25c_MGM_IQ_FF_UDP( IQ, 1'b0, 1'b0, CK, D );
   buf MGM_BG_0( Q, IQ );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_FDPRBQ_V2LP_0P5_func( Q, CK, D, RD );
   input CK, D, RD;
   output Q;
   not MGM_BG_0( MGM_C0, RD );
   UDP_saed14rvt_tt0p8v25c_MGM_IQ_FF_UDP( IQ, MGM_C0, 1'b0, CK, D );
   buf MGM_BG_1( Q, IQ );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_FDPRBQ_V2LP_1_func( Q, CK, D, RD );
   input CK, D, RD;
   output Q;
   not MGM_BG_0( MGM_C0, RD );
   UDP_saed14rvt_tt0p8v25c_MGM_IQ_FF_UDP( IQ, MGM_C0, 1'b0, CK, D );
   buf MGM_BG_1( Q, IQ );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_FDPRBQ_V2LP_2_func( Q, CK, D, RD );
   input CK, D, RD;
   output Q;
   not MGM_BG_0( MGM_C0, RD );
   UDP_saed14rvt_tt0p8v25c_MGM_IQ_FF_UDP( IQ, MGM_C0, 1'b0, CK, D );
   buf MGM_BG_1( Q, IQ );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_FDPRBQ_V2_0P5_func( Q, CK, D, RD );
   input CK, D, RD;
   output Q;
   not MGM_BG_0( MGM_C0, RD );
   UDP_saed14rvt_tt0p8v25c_MGM_IQ_FF_UDP( IQ, MGM_C0, 1'b0, CK, D );
   buf MGM_BG_1( Q, IQ );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_FDPRBQ_V2_1_func( Q, CK, D, RD );
   input CK, D, RD;
   output Q;
   not MGM_BG_0( MGM_C0, RD );
   UDP_saed14rvt_tt0p8v25c_MGM_IQ_FF_UDP( IQ, MGM_C0, 1'b0, CK, D );
   buf MGM_BG_1( Q, IQ );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_FDPRBQ_V2_2_func( Q, CK, D, RD );
   input CK, D, RD;
   output Q;
   not MGM_BG_0( MGM_C0, RD );
   UDP_saed14rvt_tt0p8v25c_MGM_IQ_FF_UDP( IQ, MGM_C0, 1'b0, CK, D );
   buf MGM_BG_1( Q, IQ );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_FDPRBQ_V2_4_func( Q, CK, D, RD );
   input CK, D, RD;
   output Q;
   not MGM_BG_0( MGM_C0, RD );
   UDP_saed14rvt_tt0p8v25c_MGM_IQ_FF_UDP( IQ, MGM_C0, 1'b0, CK, D );
   buf MGM_BG_1( Q, IQ );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_FDPRBSBQ_V2_0P5_func( Q, CK, D, RD, SD );
   input CK, D, RD, SD;
   output Q;
   not MGM_BG_0( MGM_P0, SD );
   not MGM_BG_1( MGM_C0, RD );
   UDP_saed14rvt_tt0p8v25c_MGM_L_IQ_FF_UDP( IQ, MGM_C0, MGM_P0, CK, D );
   buf MGM_BG_2( Q, IQ );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_FDPRBSBQ_V2_1_func( Q, CK, D, RD, SD );
   input CK, D, RD, SD;
   output Q;
   not MGM_BG_0( MGM_P0, SD );
   not MGM_BG_1( MGM_C0, RD );
   UDP_saed14rvt_tt0p8v25c_MGM_L_IQ_FF_UDP( IQ, MGM_C0, MGM_P0, CK, D );
   buf MGM_BG_2( Q, IQ );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_FDPRBSBQ_V2_2_func( Q, CK, D, RD, SD );
   input CK, D, RD, SD;
   output Q;
   not MGM_BG_0( MGM_P0, SD );
   not MGM_BG_1( MGM_C0, RD );
   UDP_saed14rvt_tt0p8v25c_MGM_L_IQ_FF_UDP( IQ, MGM_C0, MGM_P0, CK, D );
   buf MGM_BG_2( Q, IQ );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_FDPRBSBQ_V2_4_func( Q, CK, D, RD, SD );
   input CK, D, RD, SD;
   output Q;
   not MGM_BG_0( MGM_P0, SD );
   not MGM_BG_1( MGM_C0, RD );
   UDP_saed14rvt_tt0p8v25c_MGM_L_IQ_FF_UDP( IQ, MGM_C0, MGM_P0, CK, D );
   buf MGM_BG_2( Q, IQ );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_FDPRB_V3_2_func( Q, QN, CK, D, RD );
   input CK, D, RD;
   output Q, QN;
   not MGM_BG_0( MGM_C0, RD );
   UDP_saed14rvt_tt0p8v25c_MGM_IQ_FF_UDP( IQ, MGM_C0, 1'b0, CK, D );
   UDP_saed14rvt_tt0p8v25c_MGM_IQN_FF_UDP( IQN, MGM_C0, 1'b0, CK, D );
   buf MGM_BG_1( Q, IQ );
   buf MGM_BG_2( QN, IQN );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_FDPSBQ_0P5_func( Q, CK, D, SD );
   input CK, D, SD;
   output Q;
   not MGM_BG_0( MGM_P0, SD );
   UDP_saed14rvt_tt0p8v25c_MGM_IQ_FF_UDP( IQ, 1'b0, MGM_P0, CK, D );
   buf MGM_BG_1( Q, IQ );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_FDPSBQ_1_func( Q, CK, D, SD );
   input CK, D, SD;
   output Q;
   not MGM_BG_0( MGM_P0, SD );
   UDP_saed14rvt_tt0p8v25c_MGM_IQ_FF_UDP( IQ, 1'b0, MGM_P0, CK, D );
   buf MGM_BG_1( Q, IQ );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_FDPSBQ_2_func( Q, CK, D, SD );
   input CK, D, SD;
   output Q;
   not MGM_BG_0( MGM_P0, SD );
   UDP_saed14rvt_tt0p8v25c_MGM_IQ_FF_UDP( IQ, 1'b0, MGM_P0, CK, D );
   buf MGM_BG_1( Q, IQ );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_FDPSBQ_4_func( Q, CK, D, SD );
   input CK, D, SD;
   output Q;
   not MGM_BG_0( MGM_P0, SD );
   UDP_saed14rvt_tt0p8v25c_MGM_IQ_FF_UDP( IQ, 1'b0, MGM_P0, CK, D );
   buf MGM_BG_1( Q, IQ );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_FDPSQB_2_func( QN, CK, D, SD );
   input CK, D, SD;
   output QN;
   UDP_saed14rvt_tt0p8v25c_MGM_IQN_FF_UDP( IQN, 1'b0, SD, CK, D );
   buf MGM_BG_0( QN, IQN );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_FDPSYNSBQ_V2_0P5_func( Q, CK, D, SD );
   input CK, D, SD;
   output Q;
   wire SD_inv_for_SAEDRVT14_FDPSYNSBQ_V2_0P5;
   not MGM_BG_0( SD_inv_for_SAEDRVT14_FDPSYNSBQ_V2_0P5, SD );
   or MGM_BG_1( MGM_D0, D, SD_inv_for_SAEDRVT14_FDPSYNSBQ_V2_0P5 );
   UDP_saed14rvt_tt0p8v25c_MGM_IQ_FF_UDP( IQ, 1'b0, 1'b0, CK, MGM_D0 );
   buf MGM_BG_2( Q, IQ );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_FDPSYNSBQ_V2_1_func( Q, CK, D, SD );
   input CK, D, SD;
   output Q;
   wire SD_inv_for_SAEDRVT14_FDPSYNSBQ_V2_1;
   not MGM_BG_0( SD_inv_for_SAEDRVT14_FDPSYNSBQ_V2_1, SD );
   or MGM_BG_1( MGM_D0, D, SD_inv_for_SAEDRVT14_FDPSYNSBQ_V2_1 );
   UDP_saed14rvt_tt0p8v25c_MGM_IQ_FF_UDP( IQ, 1'b0, 1'b0, CK, MGM_D0 );
   buf MGM_BG_2( Q, IQ );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_FDPSYNSBQ_V2_2_func( Q, CK, D, SD );
   input CK, D, SD;
   output Q;
   wire SD_inv_for_SAEDRVT14_FDPSYNSBQ_V2_2;
   not MGM_BG_0( SD_inv_for_SAEDRVT14_FDPSYNSBQ_V2_2, SD );
   or MGM_BG_1( MGM_D0, D, SD_inv_for_SAEDRVT14_FDPSYNSBQ_V2_2 );
   UDP_saed14rvt_tt0p8v25c_MGM_IQ_FF_UDP( IQ, 1'b0, 1'b0, CK, MGM_D0 );
   buf MGM_BG_2( Q, IQ );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_FDPSYNSBQ_V2_4_func( Q, CK, D, SD );
   input CK, D, SD;
   output Q;
   wire SD_inv_for_SAEDRVT14_FDPSYNSBQ_V2_4;
   not MGM_BG_0( SD_inv_for_SAEDRVT14_FDPSYNSBQ_V2_4, SD );
   or MGM_BG_1( MGM_D0, D, SD_inv_for_SAEDRVT14_FDPSYNSBQ_V2_4 );
   UDP_saed14rvt_tt0p8v25c_MGM_IQ_FF_UDP( IQ, 1'b0, 1'b0, CK, MGM_D0 );
   buf MGM_BG_2( Q, IQ );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_FDPS_V3_2_func( Q, QN, CK, D, S );
   input CK, D, S;
   output Q, QN;
   UDP_saed14rvt_tt0p8v25c_MGM_IQ_FF_UDP( IQ, 1'b0, S, CK, D );
   UDP_saed14rvt_tt0p8v25c_MGM_IQN_FF_UDP( IQN, 1'b0, S, CK, D );
   buf MGM_BG_0( Q, IQ );
   buf MGM_BG_1( QN, IQN );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_FDP_V2LP_0P5_func( CK, Q, QN, D );
   input CK, D;
   output Q, QN;
   UDP_saed14rvt_tt0p8v25c_MGM_IQ_FF_UDP( IQ, 1'b0, 1'b0, CK, D );
   UDP_saed14rvt_tt0p8v25c_MGM_IQN_FF_UDP( IQN, 1'b0, 1'b0, CK, D );
   buf MGM_BG_0( Q, IQ );
   buf MGM_BG_1( QN, IQN );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_FDP_V2LP_1_func( CK, Q, D, QN );
   input CK, D;
   output Q, QN;
   UDP_saed14rvt_tt0p8v25c_MGM_IQ_FF_UDP( IQ, 1'b0, 1'b0, CK, D );
   UDP_saed14rvt_tt0p8v25c_MGM_IQN_FF_UDP( IQN, 1'b0, 1'b0, CK, D );
   buf MGM_BG_0( Q, IQ );
   buf MGM_BG_1( QN, IQN );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_FDP_V2LP_2_func( Q, QN, CK, D );
   input CK, D;
   output Q, QN;
   UDP_saed14rvt_tt0p8v25c_MGM_IQ_FF_UDP( IQ, 1'b0, 1'b0, CK, D );
   UDP_saed14rvt_tt0p8v25c_MGM_IQN_FF_UDP( IQN, 1'b0, 1'b0, CK, D );
   buf MGM_BG_0( Q, IQ );
   buf MGM_BG_1( QN, IQN );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_FDP_V2_0P5_func( Q, QN, CK, D );
   input CK, D;
   output Q, QN;
   UDP_saed14rvt_tt0p8v25c_MGM_IQ_FF_UDP( IQ, 1'b0, 1'b0, CK, D );
   UDP_saed14rvt_tt0p8v25c_MGM_IQN_FF_UDP( IQN, 1'b0, 1'b0, CK, D );
   buf MGM_BG_0( Q, IQ );
   buf MGM_BG_1( QN, IQN );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_FDP_V2_1_func( Q, QN, CK, D );
   input CK, D;
   output Q, QN;
   UDP_saed14rvt_tt0p8v25c_MGM_IQ_FF_UDP( IQ, 1'b0, 1'b0, CK, D );
   UDP_saed14rvt_tt0p8v25c_MGM_IQN_FF_UDP( IQN, 1'b0, 1'b0, CK, D );
   buf MGM_BG_0( Q, IQ );
   buf MGM_BG_1( QN, IQN );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_FDP_V2_2_func( Q, QN, CK, D );
   input CK, D;
   output Q, QN;
   UDP_saed14rvt_tt0p8v25c_MGM_IQ_FF_UDP( IQ, 1'b0, 1'b0, CK, D );
   UDP_saed14rvt_tt0p8v25c_MGM_IQN_FF_UDP( IQN, 1'b0, 1'b0, CK, D );
   buf MGM_BG_0( Q, IQ );
   buf MGM_BG_1( QN, IQN );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_FDP_V2_4_func( Q, QN, CK, D );
   input CK, D;
   output Q, QN;
   UDP_saed14rvt_tt0p8v25c_MGM_IQ_FF_UDP( IQ, 1'b0, 1'b0, CK, D );
   UDP_saed14rvt_tt0p8v25c_MGM_IQN_FF_UDP( IQN, 1'b0, 1'b0, CK, D );
   buf MGM_BG_0( Q, IQ );
   buf MGM_BG_1( QN, IQN );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_FSDNQ_V3_1_func( Q, CK, D, SI, SE );
   input CK, D, SE, SI;
   output Q;
   not MGM_BG_0( MGM_CLK0, CK );
   wire SE_inv_for_SAEDRVT14_FSDNQ_V3_1;
   not MGM_BG_1( SE_inv_for_SAEDRVT14_FSDNQ_V3_1, SE );
   wire MGM_D0_row1;
   and MGM_BG_2( MGM_D0_row1, SE_inv_for_SAEDRVT14_FSDNQ_V3_1, D );
   wire MGM_D0_row2;
   and MGM_BG_3( MGM_D0_row2, D, SI );
   wire MGM_D0_row3;
   and MGM_BG_4( MGM_D0_row3, SE, SI );
   or MGM_BG_5( MGM_D0, MGM_D0_row1, MGM_D0_row2, MGM_D0_row3 );
   UDP_saed14rvt_tt0p8v25c_MGM_IQ_FF_UDP( IQ, 1'b0, 1'b0, MGM_CLK0, MGM_D0 );
   buf MGM_BG_6( Q, IQ );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_FSDNQ_V3_2_func( Q, CK, D, SI, SE );
   input CK, D, SE, SI;
   output Q;
   not MGM_BG_0( MGM_CLK0, CK );
   wire SE_inv_for_SAEDRVT14_FSDNQ_V3_2;
   not MGM_BG_1( SE_inv_for_SAEDRVT14_FSDNQ_V3_2, SE );
   wire MGM_D0_row1;
   and MGM_BG_2( MGM_D0_row1, SE_inv_for_SAEDRVT14_FSDNQ_V3_2, D );
   wire MGM_D0_row2;
   and MGM_BG_3( MGM_D0_row2, D, SI );
   wire MGM_D0_row3;
   and MGM_BG_4( MGM_D0_row3, SE, SI );
   or MGM_BG_5( MGM_D0, MGM_D0_row1, MGM_D0_row2, MGM_D0_row3 );
   UDP_saed14rvt_tt0p8v25c_MGM_IQ_FF_UDP( IQ, 1'b0, 1'b0, MGM_CLK0, MGM_D0 );
   buf MGM_BG_6( Q, IQ );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_FSDNQ_V3_4_func( Q, CK, D, SI, SE );
   input CK, D, SE, SI;
   output Q;
   not MGM_BG_0( MGM_CLK0, CK );
   wire SE_inv_for_SAEDRVT14_FSDNQ_V3_4;
   not MGM_BG_1( SE_inv_for_SAEDRVT14_FSDNQ_V3_4, SE );
   wire MGM_D0_row1;
   and MGM_BG_2( MGM_D0_row1, SE_inv_for_SAEDRVT14_FSDNQ_V3_4, D );
   wire MGM_D0_row2;
   and MGM_BG_3( MGM_D0_row2, D, SI );
   wire MGM_D0_row3;
   and MGM_BG_4( MGM_D0_row3, SE, SI );
   or MGM_BG_5( MGM_D0, MGM_D0_row1, MGM_D0_row2, MGM_D0_row3 );
   UDP_saed14rvt_tt0p8v25c_MGM_IQ_FF_UDP( IQ, 1'b0, 1'b0, MGM_CLK0, MGM_D0 );
   buf MGM_BG_6( Q, IQ );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_FSDN_V2_0P5_func( Q, QN, CK, D, SI, SE );
   input CK, D, SE, SI;
   output Q, QN;
   not MGM_BG_0( MGM_CLK0, CK );
   wire SE_inv_for_SAEDRVT14_FSDN_V2_0P5;
   not MGM_BG_1( SE_inv_for_SAEDRVT14_FSDN_V2_0P5, SE );
   wire MGM_D0_row1;
   and MGM_BG_2( MGM_D0_row1, SE_inv_for_SAEDRVT14_FSDN_V2_0P5, D );
   wire MGM_D0_row2;
   and MGM_BG_3( MGM_D0_row2, D, SI );
   wire MGM_D0_row3;
   and MGM_BG_4( MGM_D0_row3, SE, SI );
   or MGM_BG_5( MGM_D0, MGM_D0_row1, MGM_D0_row2, MGM_D0_row3 );
   UDP_saed14rvt_tt0p8v25c_MGM_IQ_FF_UDP( IQ, 1'b0, 1'b0, MGM_CLK0, MGM_D0 );
   UDP_saed14rvt_tt0p8v25c_MGM_IQN_FF_UDP( IQN, 1'b0, 1'b0, MGM_CLK0, MGM_D0 );
   buf MGM_BG_6( Q, IQ );
   buf MGM_BG_7( QN, IQN );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_FSDN_V2_1_func( Q, QN, CK, D, SI, SE );
   input CK, D, SE, SI;
   output Q, QN;
   not MGM_BG_0( MGM_CLK0, CK );
   wire SE_inv_for_SAEDRVT14_FSDN_V2_1;
   not MGM_BG_1( SE_inv_for_SAEDRVT14_FSDN_V2_1, SE );
   wire MGM_D0_row1;
   and MGM_BG_2( MGM_D0_row1, SE_inv_for_SAEDRVT14_FSDN_V2_1, D );
   wire MGM_D0_row2;
   and MGM_BG_3( MGM_D0_row2, D, SI );
   wire MGM_D0_row3;
   and MGM_BG_4( MGM_D0_row3, SE, SI );
   or MGM_BG_5( MGM_D0, MGM_D0_row1, MGM_D0_row2, MGM_D0_row3 );
   UDP_saed14rvt_tt0p8v25c_MGM_IQ_FF_UDP( IQ, 1'b0, 1'b0, MGM_CLK0, MGM_D0 );
   UDP_saed14rvt_tt0p8v25c_MGM_IQN_FF_UDP( IQN, 1'b0, 1'b0, MGM_CLK0, MGM_D0 );
   buf MGM_BG_6( Q, IQ );
   buf MGM_BG_7( QN, IQN );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_FSDN_V2_2_func( Q, QN, CK, D, SI, SE );
   input CK, D, SE, SI;
   output Q, QN;
   not MGM_BG_0( MGM_CLK0, CK );
   wire SE_inv_for_SAEDRVT14_FSDN_V2_2;
   not MGM_BG_1( SE_inv_for_SAEDRVT14_FSDN_V2_2, SE );
   wire MGM_D0_row1;
   and MGM_BG_2( MGM_D0_row1, SE_inv_for_SAEDRVT14_FSDN_V2_2, D );
   wire MGM_D0_row2;
   and MGM_BG_3( MGM_D0_row2, D, SI );
   wire MGM_D0_row3;
   and MGM_BG_4( MGM_D0_row3, SE, SI );
   or MGM_BG_5( MGM_D0, MGM_D0_row1, MGM_D0_row2, MGM_D0_row3 );
   UDP_saed14rvt_tt0p8v25c_MGM_IQ_FF_UDP( IQ, 1'b0, 1'b0, MGM_CLK0, MGM_D0 );
   UDP_saed14rvt_tt0p8v25c_MGM_IQN_FF_UDP( IQN, 1'b0, 1'b0, MGM_CLK0, MGM_D0 );
   buf MGM_BG_6( Q, IQ );
   buf MGM_BG_7( QN, IQN );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_FSDN_V2_4_func( Q, QN, CK, D, SI, SE );
   input CK, D, SE, SI;
   output Q, QN;
   not MGM_BG_0( MGM_CLK0, CK );
   wire SE_inv_for_SAEDRVT14_FSDN_V2_4;
   not MGM_BG_1( SE_inv_for_SAEDRVT14_FSDN_V2_4, SE );
   wire MGM_D0_row1;
   and MGM_BG_2( MGM_D0_row1, SE_inv_for_SAEDRVT14_FSDN_V2_4, D );
   wire MGM_D0_row2;
   and MGM_BG_3( MGM_D0_row2, D, SI );
   wire MGM_D0_row3;
   and MGM_BG_4( MGM_D0_row3, SE, SI );
   or MGM_BG_5( MGM_D0, MGM_D0_row1, MGM_D0_row2, MGM_D0_row3 );
   UDP_saed14rvt_tt0p8v25c_MGM_IQ_FF_UDP( IQ, 1'b0, 1'b0, MGM_CLK0, MGM_D0 );
   UDP_saed14rvt_tt0p8v25c_MGM_IQN_FF_UDP( IQN, 1'b0, 1'b0, MGM_CLK0, MGM_D0 );
   buf MGM_BG_6( Q, IQ );
   buf MGM_BG_7( QN, IQN );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_FSDPMQ_0P5_func( Q, CK, D0, D1, S, SI, SE );
   input CK, D0, D1, S, SE, SI;
   output Q;
   wire S_inv_for_SAEDRVT14_FSDPMQ_0P5;
   not MGM_BG_0( S_inv_for_SAEDRVT14_FSDPMQ_0P5, S );
   wire SE_inv_for_SAEDRVT14_FSDPMQ_0P5;
   not MGM_BG_1( SE_inv_for_SAEDRVT14_FSDPMQ_0P5, SE );
   wire MGM_D0_row1;
   and MGM_BG_2( MGM_D0_row1, S_inv_for_SAEDRVT14_FSDPMQ_0P5, SE_inv_for_SAEDRVT14_FSDPMQ_0P5, D0 );
   wire MGM_D0_row2;
   and MGM_BG_3( MGM_D0_row2, S_inv_for_SAEDRVT14_FSDPMQ_0P5, D0, SI );
   wire MGM_D0_row3;
   and MGM_BG_4( MGM_D0_row3, SE_inv_for_SAEDRVT14_FSDPMQ_0P5, D1, S );
   wire MGM_D0_row4;
   and MGM_BG_5( MGM_D0_row4, D1, S, SI );
   wire MGM_D0_row5;
   and MGM_BG_6( MGM_D0_row5, SE, SI );
   or MGM_BG_7( MGM_D0, MGM_D0_row1, MGM_D0_row2, MGM_D0_row3, MGM_D0_row4, MGM_D0_row5 );
   UDP_saed14rvt_tt0p8v25c_MGM_IQ_FF_UDP( IQ, 1'b0, 1'b0, CK, MGM_D0 );
   buf MGM_BG_8( Q, IQ );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_FSDPMQ_1_func( Q, CK, D0, D1, S, SI, SE );
   input CK, D0, D1, S, SE, SI;
   output Q;
   wire S_inv_for_SAEDRVT14_FSDPMQ_1;
   not MGM_BG_0( S_inv_for_SAEDRVT14_FSDPMQ_1, S );
   wire SE_inv_for_SAEDRVT14_FSDPMQ_1;
   not MGM_BG_1( SE_inv_for_SAEDRVT14_FSDPMQ_1, SE );
   wire MGM_D0_row1;
   and MGM_BG_2( MGM_D0_row1, S_inv_for_SAEDRVT14_FSDPMQ_1, SE_inv_for_SAEDRVT14_FSDPMQ_1, D0 );
   wire MGM_D0_row2;
   and MGM_BG_3( MGM_D0_row2, S_inv_for_SAEDRVT14_FSDPMQ_1, D0, SI );
   wire MGM_D0_row3;
   and MGM_BG_4( MGM_D0_row3, SE_inv_for_SAEDRVT14_FSDPMQ_1, D1, S );
   wire MGM_D0_row4;
   and MGM_BG_5( MGM_D0_row4, D1, S, SI );
   wire MGM_D0_row5;
   and MGM_BG_6( MGM_D0_row5, SE, SI );
   or MGM_BG_7( MGM_D0, MGM_D0_row1, MGM_D0_row2, MGM_D0_row3, MGM_D0_row4, MGM_D0_row5 );
   UDP_saed14rvt_tt0p8v25c_MGM_IQ_FF_UDP( IQ, 1'b0, 1'b0, CK, MGM_D0 );
   buf MGM_BG_8( Q, IQ );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_FSDPMQ_2_func( Q, CK, D0, D1, S, SI, SE );
   input CK, D0, D1, S, SE, SI;
   output Q;
   wire S_inv_for_SAEDRVT14_FSDPMQ_2;
   not MGM_BG_0( S_inv_for_SAEDRVT14_FSDPMQ_2, S );
   wire SE_inv_for_SAEDRVT14_FSDPMQ_2;
   not MGM_BG_1( SE_inv_for_SAEDRVT14_FSDPMQ_2, SE );
   wire MGM_D0_row1;
   and MGM_BG_2( MGM_D0_row1, S_inv_for_SAEDRVT14_FSDPMQ_2, SE_inv_for_SAEDRVT14_FSDPMQ_2, D0 );
   wire MGM_D0_row2;
   and MGM_BG_3( MGM_D0_row2, S_inv_for_SAEDRVT14_FSDPMQ_2, D0, SI );
   wire MGM_D0_row3;
   and MGM_BG_4( MGM_D0_row3, SE_inv_for_SAEDRVT14_FSDPMQ_2, D1, S );
   wire MGM_D0_row4;
   and MGM_BG_5( MGM_D0_row4, D1, S, SI );
   wire MGM_D0_row5;
   and MGM_BG_6( MGM_D0_row5, SE, SI );
   or MGM_BG_7( MGM_D0, MGM_D0_row1, MGM_D0_row2, MGM_D0_row3, MGM_D0_row4, MGM_D0_row5 );
   UDP_saed14rvt_tt0p8v25c_MGM_IQ_FF_UDP( IQ, 1'b0, 1'b0, CK, MGM_D0 );
   buf MGM_BG_8( Q, IQ );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_FSDPMQ_4_func( Q, CK, D0, D1, S, SI, SE );
   input CK, D0, D1, S, SE, SI;
   output Q;
   wire S_inv_for_SAEDRVT14_FSDPMQ_4;
   not MGM_BG_0( S_inv_for_SAEDRVT14_FSDPMQ_4, S );
   wire SE_inv_for_SAEDRVT14_FSDPMQ_4;
   not MGM_BG_1( SE_inv_for_SAEDRVT14_FSDPMQ_4, SE );
   wire MGM_D0_row1;
   and MGM_BG_2( MGM_D0_row1, S_inv_for_SAEDRVT14_FSDPMQ_4, SE_inv_for_SAEDRVT14_FSDPMQ_4, D0 );
   wire MGM_D0_row2;
   and MGM_BG_3( MGM_D0_row2, S_inv_for_SAEDRVT14_FSDPMQ_4, D0, SI );
   wire MGM_D0_row3;
   and MGM_BG_4( MGM_D0_row3, SE_inv_for_SAEDRVT14_FSDPMQ_4, D1, S );
   wire MGM_D0_row4;
   and MGM_BG_5( MGM_D0_row4, D1, S, SI );
   wire MGM_D0_row5;
   and MGM_BG_6( MGM_D0_row5, SE, SI );
   or MGM_BG_7( MGM_D0, MGM_D0_row1, MGM_D0_row2, MGM_D0_row3, MGM_D0_row4, MGM_D0_row5 );
   UDP_saed14rvt_tt0p8v25c_MGM_IQ_FF_UDP( IQ, 1'b0, 1'b0, CK, MGM_D0 );
   buf MGM_BG_8( Q, IQ );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_FSDPMQ_LP_0P5_func( Q, CK, D0, D1, S, SI, SE );
   input CK, D0, D1, S, SE, SI;
   output Q;
   wire S_inv_for_SAEDRVT14_FSDPMQ_LP_0P5;
   not MGM_BG_0( S_inv_for_SAEDRVT14_FSDPMQ_LP_0P5, S );
   wire SE_inv_for_SAEDRVT14_FSDPMQ_LP_0P5;
   not MGM_BG_1( SE_inv_for_SAEDRVT14_FSDPMQ_LP_0P5, SE );
   wire MGM_D0_row1;
   and MGM_BG_2( MGM_D0_row1, S_inv_for_SAEDRVT14_FSDPMQ_LP_0P5, SE_inv_for_SAEDRVT14_FSDPMQ_LP_0P5, D0 );
   wire MGM_D0_row2;
   and MGM_BG_3( MGM_D0_row2, S_inv_for_SAEDRVT14_FSDPMQ_LP_0P5, D0, SI );
   wire MGM_D0_row3;
   and MGM_BG_4( MGM_D0_row3, SE_inv_for_SAEDRVT14_FSDPMQ_LP_0P5, D1, S );
   wire MGM_D0_row4;
   and MGM_BG_5( MGM_D0_row4, D1, S, SI );
   wire MGM_D0_row5;
   and MGM_BG_6( MGM_D0_row5, SE, SI );
   or MGM_BG_7( MGM_D0, MGM_D0_row1, MGM_D0_row2, MGM_D0_row3, MGM_D0_row4, MGM_D0_row5 );
   UDP_saed14rvt_tt0p8v25c_MGM_IQ_FF_UDP( IQ, 1'b0, 1'b0, CK, MGM_D0 );
   buf MGM_BG_8( Q, IQ );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_FSDPMQ_LP_1_func( Q, CK, D0, D1, S, SI, SE );
   input CK, D0, D1, S, SE, SI;
   output Q;
   wire S_inv_for_SAEDRVT14_FSDPMQ_LP_1;
   not MGM_BG_0( S_inv_for_SAEDRVT14_FSDPMQ_LP_1, S );
   wire SE_inv_for_SAEDRVT14_FSDPMQ_LP_1;
   not MGM_BG_1( SE_inv_for_SAEDRVT14_FSDPMQ_LP_1, SE );
   wire MGM_D0_row1;
   and MGM_BG_2( MGM_D0_row1, S_inv_for_SAEDRVT14_FSDPMQ_LP_1, SE_inv_for_SAEDRVT14_FSDPMQ_LP_1, D0 );
   wire MGM_D0_row2;
   and MGM_BG_3( MGM_D0_row2, S_inv_for_SAEDRVT14_FSDPMQ_LP_1, D0, SI );
   wire MGM_D0_row3;
   and MGM_BG_4( MGM_D0_row3, SE_inv_for_SAEDRVT14_FSDPMQ_LP_1, D1, S );
   wire MGM_D0_row4;
   and MGM_BG_5( MGM_D0_row4, D1, S, SI );
   wire MGM_D0_row5;
   and MGM_BG_6( MGM_D0_row5, SE, SI );
   or MGM_BG_7( MGM_D0, MGM_D0_row1, MGM_D0_row2, MGM_D0_row3, MGM_D0_row4, MGM_D0_row5 );
   UDP_saed14rvt_tt0p8v25c_MGM_IQ_FF_UDP( IQ, 1'b0, 1'b0, CK, MGM_D0 );
   buf MGM_BG_8( Q, IQ );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_FSDPMQ_LP_2_func( Q, CK, D0, D1, S, SI, SE );
   input CK, D0, D1, S, SE, SI;
   output Q;
   wire S_inv_for_SAEDRVT14_FSDPMQ_LP_2;
   not MGM_BG_0( S_inv_for_SAEDRVT14_FSDPMQ_LP_2, S );
   wire SE_inv_for_SAEDRVT14_FSDPMQ_LP_2;
   not MGM_BG_1( SE_inv_for_SAEDRVT14_FSDPMQ_LP_2, SE );
   wire MGM_D0_row1;
   and MGM_BG_2( MGM_D0_row1, S_inv_for_SAEDRVT14_FSDPMQ_LP_2, SE_inv_for_SAEDRVT14_FSDPMQ_LP_2, D0 );
   wire MGM_D0_row2;
   and MGM_BG_3( MGM_D0_row2, S_inv_for_SAEDRVT14_FSDPMQ_LP_2, D0, SI );
   wire MGM_D0_row3;
   and MGM_BG_4( MGM_D0_row3, SE_inv_for_SAEDRVT14_FSDPMQ_LP_2, D1, S );
   wire MGM_D0_row4;
   and MGM_BG_5( MGM_D0_row4, D1, S, SI );
   wire MGM_D0_row5;
   and MGM_BG_6( MGM_D0_row5, SE, SI );
   or MGM_BG_7( MGM_D0, MGM_D0_row1, MGM_D0_row2, MGM_D0_row3, MGM_D0_row4, MGM_D0_row5 );
   UDP_saed14rvt_tt0p8v25c_MGM_IQ_FF_UDP( IQ, 1'b0, 1'b0, CK, MGM_D0 );
   buf MGM_BG_8( Q, IQ );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_FSDPQB_V2LP_0P5_func( QN, CK, D, SI, SE );
   input CK, D, SE, SI;
   output QN;
   wire SE_inv_for_SAEDRVT14_FSDPQB_V2LP_0P5;
   not MGM_BG_0( SE_inv_for_SAEDRVT14_FSDPQB_V2LP_0P5, SE );
   wire MGM_D0_row1;
   and MGM_BG_1( MGM_D0_row1, SE_inv_for_SAEDRVT14_FSDPQB_V2LP_0P5, D );
   wire MGM_D0_row2;
   and MGM_BG_2( MGM_D0_row2, D, SI );
   wire MGM_D0_row3;
   and MGM_BG_3( MGM_D0_row3, SE, SI );
   or MGM_BG_4( MGM_D0, MGM_D0_row1, MGM_D0_row2, MGM_D0_row3 );
   UDP_saed14rvt_tt0p8v25c_MGM_IQN_FF_UDP( IQN, 1'b0, 1'b0, CK, MGM_D0 );
   buf MGM_BG_5( QN, IQN );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_FSDPQB_V2LP_1_func( QN, CK, D, SI, SE );
   input CK, D, SE, SI;
   output QN;
   wire SE_inv_for_SAEDRVT14_FSDPQB_V2LP_1;
   not MGM_BG_0( SE_inv_for_SAEDRVT14_FSDPQB_V2LP_1, SE );
   wire MGM_D0_row1;
   and MGM_BG_1( MGM_D0_row1, SE_inv_for_SAEDRVT14_FSDPQB_V2LP_1, D );
   wire MGM_D0_row2;
   and MGM_BG_2( MGM_D0_row2, D, SI );
   wire MGM_D0_row3;
   and MGM_BG_3( MGM_D0_row3, SE, SI );
   or MGM_BG_4( MGM_D0, MGM_D0_row1, MGM_D0_row2, MGM_D0_row3 );
   UDP_saed14rvt_tt0p8v25c_MGM_IQN_FF_UDP( IQN, 1'b0, 1'b0, CK, MGM_D0 );
   buf MGM_BG_5( QN, IQN );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_FSDPQB_V2LP_2_func( QN, CK, D, SI, SE );
   input CK, D, SE, SI;
   output QN;
   wire SE_inv_for_SAEDRVT14_FSDPQB_V2LP_2;
   not MGM_BG_0( SE_inv_for_SAEDRVT14_FSDPQB_V2LP_2, SE );
   wire MGM_D0_row1;
   and MGM_BG_1( MGM_D0_row1, SE_inv_for_SAEDRVT14_FSDPQB_V2LP_2, D );
   wire MGM_D0_row2;
   and MGM_BG_2( MGM_D0_row2, D, SI );
   wire MGM_D0_row3;
   and MGM_BG_3( MGM_D0_row3, SE, SI );
   or MGM_BG_4( MGM_D0, MGM_D0_row1, MGM_D0_row2, MGM_D0_row3 );
   UDP_saed14rvt_tt0p8v25c_MGM_IQN_FF_UDP( IQN, 1'b0, 1'b0, CK, MGM_D0 );
   buf MGM_BG_5( QN, IQN );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_FSDPQB_V2_0P5_func( QN, CK, D, SI, SE );
   input CK, D, SE, SI;
   output QN;
   wire SE_inv_for_SAEDRVT14_FSDPQB_V2_0P5;
   not MGM_BG_0( SE_inv_for_SAEDRVT14_FSDPQB_V2_0P5, SE );
   wire MGM_D0_row1;
   and MGM_BG_1( MGM_D0_row1, SE_inv_for_SAEDRVT14_FSDPQB_V2_0P5, D );
   wire MGM_D0_row2;
   and MGM_BG_2( MGM_D0_row2, D, SI );
   wire MGM_D0_row3;
   and MGM_BG_3( MGM_D0_row3, SE, SI );
   or MGM_BG_4( MGM_D0, MGM_D0_row1, MGM_D0_row2, MGM_D0_row3 );
   UDP_saed14rvt_tt0p8v25c_MGM_IQN_FF_UDP( IQN, 1'b0, 1'b0, CK, MGM_D0 );
   buf MGM_BG_5( QN, IQN );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_FSDPQB_V2_1_func( QN, CK, D, SI, SE );
   input CK, D, SE, SI;
   output QN;
   wire SE_inv_for_SAEDRVT14_FSDPQB_V2_1;
   not MGM_BG_0( SE_inv_for_SAEDRVT14_FSDPQB_V2_1, SE );
   wire MGM_D0_row1;
   and MGM_BG_1( MGM_D0_row1, SE_inv_for_SAEDRVT14_FSDPQB_V2_1, D );
   wire MGM_D0_row2;
   and MGM_BG_2( MGM_D0_row2, D, SI );
   wire MGM_D0_row3;
   and MGM_BG_3( MGM_D0_row3, SE, SI );
   or MGM_BG_4( MGM_D0, MGM_D0_row1, MGM_D0_row2, MGM_D0_row3 );
   UDP_saed14rvt_tt0p8v25c_MGM_IQN_FF_UDP( IQN, 1'b0, 1'b0, CK, MGM_D0 );
   buf MGM_BG_5( QN, IQN );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_FSDPQB_V2_2_func( QN, CK, D, SI, SE );
   input CK, D, SE, SI;
   output QN;
   wire SE_inv_for_SAEDRVT14_FSDPQB_V2_2;
   not MGM_BG_0( SE_inv_for_SAEDRVT14_FSDPQB_V2_2, SE );
   wire MGM_D0_row1;
   and MGM_BG_1( MGM_D0_row1, SE_inv_for_SAEDRVT14_FSDPQB_V2_2, D );
   wire MGM_D0_row2;
   and MGM_BG_2( MGM_D0_row2, D, SI );
   wire MGM_D0_row3;
   and MGM_BG_3( MGM_D0_row3, SE, SI );
   or MGM_BG_4( MGM_D0, MGM_D0_row1, MGM_D0_row2, MGM_D0_row3 );
   UDP_saed14rvt_tt0p8v25c_MGM_IQN_FF_UDP( IQN, 1'b0, 1'b0, CK, MGM_D0 );
   buf MGM_BG_5( QN, IQN );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_FSDPQB_V2_4_func( QN, CK, D, SI, SE );
   input CK, D, SE, SI;
   output QN;
   wire SE_inv_for_SAEDRVT14_FSDPQB_V2_4;
   not MGM_BG_0( SE_inv_for_SAEDRVT14_FSDPQB_V2_4, SE );
   wire MGM_D0_row1;
   and MGM_BG_1( MGM_D0_row1, SE_inv_for_SAEDRVT14_FSDPQB_V2_4, D );
   wire MGM_D0_row2;
   and MGM_BG_2( MGM_D0_row2, D, SI );
   wire MGM_D0_row3;
   and MGM_BG_3( MGM_D0_row3, SE, SI );
   or MGM_BG_4( MGM_D0, MGM_D0_row1, MGM_D0_row2, MGM_D0_row3 );
   UDP_saed14rvt_tt0p8v25c_MGM_IQN_FF_UDP( IQN, 1'b0, 1'b0, CK, MGM_D0 );
   buf MGM_BG_5( QN, IQN );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_FSDPQB_V2_8_func( QN, CK, D, SI, SE );
   input CK, D, SE, SI;
   output QN;
   wire SE_inv_for_SAEDRVT14_FSDPQB_V2_8;
   not MGM_BG_0( SE_inv_for_SAEDRVT14_FSDPQB_V2_8, SE );
   wire MGM_D0_row1;
   and MGM_BG_1( MGM_D0_row1, SE_inv_for_SAEDRVT14_FSDPQB_V2_8, D );
   wire MGM_D0_row2;
   and MGM_BG_2( MGM_D0_row2, D, SI );
   wire MGM_D0_row3;
   and MGM_BG_3( MGM_D0_row3, SE, SI );
   or MGM_BG_4( MGM_D0, MGM_D0_row1, MGM_D0_row2, MGM_D0_row3 );
   UDP_saed14rvt_tt0p8v25c_MGM_IQN_FF_UDP( IQN, 1'b0, 1'b0, CK, MGM_D0 );
   buf MGM_BG_5( QN, IQN );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_FSDPQB_V3_1_func( QN, CK, D, SI, SE );
   input CK, D, SE, SI;
   output QN;
   wire SE_inv_for_SAEDRVT14_FSDPQB_V3_1;
   not MGM_BG_0( SE_inv_for_SAEDRVT14_FSDPQB_V3_1, SE );
   wire MGM_D0_row1;
   and MGM_BG_1( MGM_D0_row1, SE_inv_for_SAEDRVT14_FSDPQB_V3_1, D );
   wire MGM_D0_row2;
   and MGM_BG_2( MGM_D0_row2, D, SI );
   wire MGM_D0_row3;
   and MGM_BG_3( MGM_D0_row3, SE, SI );
   or MGM_BG_4( MGM_D0, MGM_D0_row1, MGM_D0_row2, MGM_D0_row3 );
   UDP_saed14rvt_tt0p8v25c_MGM_IQN_FF_UDP( IQN, 1'b0, 1'b0, CK, MGM_D0 );
   buf MGM_BG_5( QN, IQN );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_FSDPQB_V3_2_func( QN, CK, D, SI, SE );
   input CK, D, SE, SI;
   output QN;
   wire SE_inv_for_SAEDRVT14_FSDPQB_V3_2;
   not MGM_BG_0( SE_inv_for_SAEDRVT14_FSDPQB_V3_2, SE );
   wire MGM_D0_row1;
   and MGM_BG_1( MGM_D0_row1, SE_inv_for_SAEDRVT14_FSDPQB_V3_2, D );
   wire MGM_D0_row2;
   and MGM_BG_2( MGM_D0_row2, D, SI );
   wire MGM_D0_row3;
   and MGM_BG_3( MGM_D0_row3, SE, SI );
   or MGM_BG_4( MGM_D0, MGM_D0_row1, MGM_D0_row2, MGM_D0_row3 );
   UDP_saed14rvt_tt0p8v25c_MGM_IQN_FF_UDP( IQN, 1'b0, 1'b0, CK, MGM_D0 );
   buf MGM_BG_5( QN, IQN );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_FSDPQB_V3_4_func( QN, CK, D, SI, SE );
   input CK, D, SE, SI;
   output QN;
   wire SE_inv_for_SAEDRVT14_FSDPQB_V3_4;
   not MGM_BG_0( SE_inv_for_SAEDRVT14_FSDPQB_V3_4, SE );
   wire MGM_D0_row1;
   and MGM_BG_1( MGM_D0_row1, SE_inv_for_SAEDRVT14_FSDPQB_V3_4, D );
   wire MGM_D0_row2;
   and MGM_BG_2( MGM_D0_row2, D, SI );
   wire MGM_D0_row3;
   and MGM_BG_3( MGM_D0_row3, SE, SI );
   or MGM_BG_4( MGM_D0, MGM_D0_row1, MGM_D0_row2, MGM_D0_row3 );
   UDP_saed14rvt_tt0p8v25c_MGM_IQN_FF_UDP( IQN, 1'b0, 1'b0, CK, MGM_D0 );
   buf MGM_BG_5( QN, IQN );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_FSDPQB_V3_8_func( QN, CK, D, SI, SE );
   input CK, D, SE, SI;
   output QN;
   wire SE_inv_for_SAEDRVT14_FSDPQB_V3_8;
   not MGM_BG_0( SE_inv_for_SAEDRVT14_FSDPQB_V3_8, SE );
   wire MGM_D0_row1;
   and MGM_BG_1( MGM_D0_row1, SE_inv_for_SAEDRVT14_FSDPQB_V3_8, D );
   wire MGM_D0_row2;
   and MGM_BG_2( MGM_D0_row2, D, SI );
   wire MGM_D0_row3;
   and MGM_BG_3( MGM_D0_row3, SE, SI );
   or MGM_BG_4( MGM_D0, MGM_D0_row1, MGM_D0_row2, MGM_D0_row3 );
   UDP_saed14rvt_tt0p8v25c_MGM_IQN_FF_UDP( IQN, 1'b0, 1'b0, CK, MGM_D0 );
   buf MGM_BG_5( QN, IQN );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_FSDPQ_V2LP_0P5_func( Q, CK, D, SI, SE );
   input CK, D, SE, SI;
   output Q;
   wire SE_inv_for_SAEDRVT14_FSDPQ_V2LP_0P5;
   not MGM_BG_0( SE_inv_for_SAEDRVT14_FSDPQ_V2LP_0P5, SE );
   wire MGM_D0_row1;
   and MGM_BG_1( MGM_D0_row1, SE_inv_for_SAEDRVT14_FSDPQ_V2LP_0P5, D );
   wire MGM_D0_row2;
   and MGM_BG_2( MGM_D0_row2, D, SI );
   wire MGM_D0_row3;
   and MGM_BG_3( MGM_D0_row3, SE, SI );
   or MGM_BG_4( MGM_D0, MGM_D0_row1, MGM_D0_row2, MGM_D0_row3 );
   UDP_saed14rvt_tt0p8v25c_MGM_IQ_FF_UDP( IQ, 1'b0, 1'b0, CK, MGM_D0 );
   buf MGM_BG_5( Q, IQ );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_FSDPQ_V2LP_1_func( Q, CK, D, SI, SE );
   input CK, D, SE, SI;
   output Q;
   wire SE_inv_for_SAEDRVT14_FSDPQ_V2LP_1;
   not MGM_BG_0( SE_inv_for_SAEDRVT14_FSDPQ_V2LP_1, SE );
   wire MGM_D0_row1;
   and MGM_BG_1( MGM_D0_row1, SE_inv_for_SAEDRVT14_FSDPQ_V2LP_1, D );
   wire MGM_D0_row2;
   and MGM_BG_2( MGM_D0_row2, D, SI );
   wire MGM_D0_row3;
   and MGM_BG_3( MGM_D0_row3, SE, SI );
   or MGM_BG_4( MGM_D0, MGM_D0_row1, MGM_D0_row2, MGM_D0_row3 );
   UDP_saed14rvt_tt0p8v25c_MGM_IQ_FF_UDP( IQ, 1'b0, 1'b0, CK, MGM_D0 );
   buf MGM_BG_5( Q, IQ );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_FSDPQ_V2LP_2_func( Q, CK, D, SI, SE );
   input CK, D, SE, SI;
   output Q;
   wire SE_inv_for_SAEDRVT14_FSDPQ_V2LP_2;
   not MGM_BG_0( SE_inv_for_SAEDRVT14_FSDPQ_V2LP_2, SE );
   wire MGM_D0_row1;
   and MGM_BG_1( MGM_D0_row1, SE_inv_for_SAEDRVT14_FSDPQ_V2LP_2, D );
   wire MGM_D0_row2;
   and MGM_BG_2( MGM_D0_row2, D, SI );
   wire MGM_D0_row3;
   and MGM_BG_3( MGM_D0_row3, SE, SI );
   or MGM_BG_4( MGM_D0, MGM_D0_row1, MGM_D0_row2, MGM_D0_row3 );
   UDP_saed14rvt_tt0p8v25c_MGM_IQ_FF_UDP( IQ, 1'b0, 1'b0, CK, MGM_D0 );
   buf MGM_BG_5( Q, IQ );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_FSDPQ_V2_0P5_func( Q, CK, D, SI, SE );
   input CK, D, SE, SI;
   output Q;
   wire SE_inv_for_SAEDRVT14_FSDPQ_V2_0P5;
   not MGM_BG_0( SE_inv_for_SAEDRVT14_FSDPQ_V2_0P5, SE );
   wire MGM_D0_row1;
   and MGM_BG_1( MGM_D0_row1, SE_inv_for_SAEDRVT14_FSDPQ_V2_0P5, D );
   wire MGM_D0_row2;
   and MGM_BG_2( MGM_D0_row2, D, SI );
   wire MGM_D0_row3;
   and MGM_BG_3( MGM_D0_row3, SE, SI );
   or MGM_BG_4( MGM_D0, MGM_D0_row1, MGM_D0_row2, MGM_D0_row3 );
   UDP_saed14rvt_tt0p8v25c_MGM_IQ_FF_UDP( IQ, 1'b0, 1'b0, CK, MGM_D0 );
   buf MGM_BG_5( Q, IQ );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_FSDPQ_V2_1_func( Q, CK, D, SI, SE );
   input CK, D, SE, SI;
   output Q;
   wire SE_inv_for_SAEDRVT14_FSDPQ_V2_1;
   not MGM_BG_0( SE_inv_for_SAEDRVT14_FSDPQ_V2_1, SE );
   wire MGM_D0_row1;
   and MGM_BG_1( MGM_D0_row1, SE_inv_for_SAEDRVT14_FSDPQ_V2_1, D );
   wire MGM_D0_row2;
   and MGM_BG_2( MGM_D0_row2, D, SI );
   wire MGM_D0_row3;
   and MGM_BG_3( MGM_D0_row3, SE, SI );
   or MGM_BG_4( MGM_D0, MGM_D0_row1, MGM_D0_row2, MGM_D0_row3 );
   UDP_saed14rvt_tt0p8v25c_MGM_IQ_FF_UDP( IQ, 1'b0, 1'b0, CK, MGM_D0 );
   buf MGM_BG_5( Q, IQ );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_FSDPQ_V2_2_func( Q, CK, D, SI, SE );
   input CK, D, SE, SI;
   output Q;
   wire SE_inv_for_SAEDRVT14_FSDPQ_V2_2;
   not MGM_BG_0( SE_inv_for_SAEDRVT14_FSDPQ_V2_2, SE );
   wire MGM_D0_row1;
   and MGM_BG_1( MGM_D0_row1, SE_inv_for_SAEDRVT14_FSDPQ_V2_2, D );
   wire MGM_D0_row2;
   and MGM_BG_2( MGM_D0_row2, D, SI );
   wire MGM_D0_row3;
   and MGM_BG_3( MGM_D0_row3, SE, SI );
   or MGM_BG_4( MGM_D0, MGM_D0_row1, MGM_D0_row2, MGM_D0_row3 );
   UDP_saed14rvt_tt0p8v25c_MGM_IQ_FF_UDP( IQ, 1'b0, 1'b0, CK, MGM_D0 );
   buf MGM_BG_5( Q, IQ );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_FSDPQ_V2_4_func( Q, CK, D, SI, SE );
   input CK, D, SE, SI;
   output Q;
   wire SE_inv_for_SAEDRVT14_FSDPQ_V2_4;
   not MGM_BG_0( SE_inv_for_SAEDRVT14_FSDPQ_V2_4, SE );
   wire MGM_D0_row1;
   and MGM_BG_1( MGM_D0_row1, SE_inv_for_SAEDRVT14_FSDPQ_V2_4, D );
   wire MGM_D0_row2;
   and MGM_BG_2( MGM_D0_row2, D, SI );
   wire MGM_D0_row3;
   and MGM_BG_3( MGM_D0_row3, SE, SI );
   or MGM_BG_4( MGM_D0, MGM_D0_row1, MGM_D0_row2, MGM_D0_row3 );
   UDP_saed14rvt_tt0p8v25c_MGM_IQ_FF_UDP( IQ, 1'b0, 1'b0, CK, MGM_D0 );
   buf MGM_BG_5( Q, IQ );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_FSDPQ_V3_1_func( Q, CK, D, SI, SE );
   input CK, D, SE, SI;
   output Q;
   wire SE_inv_for_SAEDRVT14_FSDPQ_V3_1;
   not MGM_BG_0( SE_inv_for_SAEDRVT14_FSDPQ_V3_1, SE );
   wire MGM_D0_row1;
   and MGM_BG_1( MGM_D0_row1, SE_inv_for_SAEDRVT14_FSDPQ_V3_1, D );
   wire MGM_D0_row2;
   and MGM_BG_2( MGM_D0_row2, D, SI );
   wire MGM_D0_row3;
   and MGM_BG_3( MGM_D0_row3, SE, SI );
   or MGM_BG_4( MGM_D0, MGM_D0_row1, MGM_D0_row2, MGM_D0_row3 );
   UDP_saed14rvt_tt0p8v25c_MGM_IQ_FF_UDP( IQ, 1'b0, 1'b0, CK, MGM_D0 );
   buf MGM_BG_5( Q, IQ );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_FSDPQ_V3_2_func( Q, CK, D, SI, SE );
   input CK, D, SE, SI;
   output Q;
   wire SE_inv_for_SAEDRVT14_FSDPQ_V3_2;
   not MGM_BG_0( SE_inv_for_SAEDRVT14_FSDPQ_V3_2, SE );
   wire MGM_D0_row1;
   and MGM_BG_1( MGM_D0_row1, SE_inv_for_SAEDRVT14_FSDPQ_V3_2, D );
   wire MGM_D0_row2;
   and MGM_BG_2( MGM_D0_row2, D, SI );
   wire MGM_D0_row3;
   and MGM_BG_3( MGM_D0_row3, SE, SI );
   or MGM_BG_4( MGM_D0, MGM_D0_row1, MGM_D0_row2, MGM_D0_row3 );
   UDP_saed14rvt_tt0p8v25c_MGM_IQ_FF_UDP( IQ, 1'b0, 1'b0, CK, MGM_D0 );
   buf MGM_BG_5( Q, IQ );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_FSDPQ_V3_4_func( Q, CK, D, SI, SE );
   input CK, D, SE, SI;
   output Q;
   wire SE_inv_for_SAEDRVT14_FSDPQ_V3_4;
   not MGM_BG_0( SE_inv_for_SAEDRVT14_FSDPQ_V3_4, SE );
   wire MGM_D0_row1;
   and MGM_BG_1( MGM_D0_row1, SE_inv_for_SAEDRVT14_FSDPQ_V3_4, D );
   wire MGM_D0_row2;
   and MGM_BG_2( MGM_D0_row2, D, SI );
   wire MGM_D0_row3;
   and MGM_BG_3( MGM_D0_row3, SE, SI );
   or MGM_BG_4( MGM_D0, MGM_D0_row1, MGM_D0_row2, MGM_D0_row3 );
   UDP_saed14rvt_tt0p8v25c_MGM_IQ_FF_UDP( IQ, 1'b0, 1'b0, CK, MGM_D0 );
   buf MGM_BG_5( Q, IQ );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_FSDPRBQ_V2LP_0P5_func( Q, CK, D, SI, SE, RD );
   input CK, D, RD, SE, SI;
   output Q;
   not MGM_BG_0( MGM_C0, RD );
   wire SE_inv_for_SAEDRVT14_FSDPRBQ_V2LP_0P5;
   not MGM_BG_1( SE_inv_for_SAEDRVT14_FSDPRBQ_V2LP_0P5, SE );
   wire MGM_D0_row1;
   and MGM_BG_2( MGM_D0_row1, SE_inv_for_SAEDRVT14_FSDPRBQ_V2LP_0P5, D );
   wire MGM_D0_row2;
   and MGM_BG_3( MGM_D0_row2, D, SI );
   wire MGM_D0_row3;
   and MGM_BG_4( MGM_D0_row3, SE, SI );
   or MGM_BG_5( MGM_D0, MGM_D0_row1, MGM_D0_row2, MGM_D0_row3 );
   UDP_saed14rvt_tt0p8v25c_MGM_IQ_FF_UDP( IQ, MGM_C0, 1'b0, CK, MGM_D0 );
   buf MGM_BG_6( Q, IQ );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_FSDPRBQ_V2LP_1_func( Q, CK, D, SI, SE, RD );
   input CK, D, RD, SE, SI;
   output Q;
   not MGM_BG_0( MGM_C0, RD );
   wire SE_inv_for_SAEDRVT14_FSDPRBQ_V2LP_1;
   not MGM_BG_1( SE_inv_for_SAEDRVT14_FSDPRBQ_V2LP_1, SE );
   wire MGM_D0_row1;
   and MGM_BG_2( MGM_D0_row1, SE_inv_for_SAEDRVT14_FSDPRBQ_V2LP_1, D );
   wire MGM_D0_row2;
   and MGM_BG_3( MGM_D0_row2, D, SI );
   wire MGM_D0_row3;
   and MGM_BG_4( MGM_D0_row3, SE, SI );
   or MGM_BG_5( MGM_D0, MGM_D0_row1, MGM_D0_row2, MGM_D0_row3 );
   UDP_saed14rvt_tt0p8v25c_MGM_IQ_FF_UDP( IQ, MGM_C0, 1'b0, CK, MGM_D0 );
   buf MGM_BG_6( Q, IQ );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_FSDPRBQ_V2LP_2_func( Q, CK, D, SI, SE, RD );
   input CK, D, RD, SE, SI;
   output Q;
   not MGM_BG_0( MGM_C0, RD );
   wire SE_inv_for_SAEDRVT14_FSDPRBQ_V2LP_2;
   not MGM_BG_1( SE_inv_for_SAEDRVT14_FSDPRBQ_V2LP_2, SE );
   wire MGM_D0_row1;
   and MGM_BG_2( MGM_D0_row1, SE_inv_for_SAEDRVT14_FSDPRBQ_V2LP_2, D );
   wire MGM_D0_row2;
   and MGM_BG_3( MGM_D0_row2, D, SI );
   wire MGM_D0_row3;
   and MGM_BG_4( MGM_D0_row3, SE, SI );
   or MGM_BG_5( MGM_D0, MGM_D0_row1, MGM_D0_row2, MGM_D0_row3 );
   UDP_saed14rvt_tt0p8v25c_MGM_IQ_FF_UDP( IQ, MGM_C0, 1'b0, CK, MGM_D0 );
   buf MGM_BG_6( Q, IQ );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_FSDPRBQ_V2_0P5_func( Q, CK, D, SI, SE, RD );
   input CK, D, RD, SE, SI;
   output Q;
   not MGM_BG_0( MGM_C0, RD );
   wire SE_inv_for_SAEDRVT14_FSDPRBQ_V2_0P5;
   not MGM_BG_1( SE_inv_for_SAEDRVT14_FSDPRBQ_V2_0P5, SE );
   wire MGM_D0_row1;
   and MGM_BG_2( MGM_D0_row1, SE_inv_for_SAEDRVT14_FSDPRBQ_V2_0P5, D );
   wire MGM_D0_row2;
   and MGM_BG_3( MGM_D0_row2, D, SI );
   wire MGM_D0_row3;
   and MGM_BG_4( MGM_D0_row3, SE, SI );
   or MGM_BG_5( MGM_D0, MGM_D0_row1, MGM_D0_row2, MGM_D0_row3 );
   UDP_saed14rvt_tt0p8v25c_MGM_IQ_FF_UDP( IQ, MGM_C0, 1'b0, CK, MGM_D0 );
   buf MGM_BG_6( Q, IQ );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_FSDPRBQ_V2_1_func( Q, CK, D, SI, SE, RD );
   input CK, D, RD, SE, SI;
   output Q;
   not MGM_BG_0( MGM_C0, RD );
   wire SE_inv_for_SAEDRVT14_FSDPRBQ_V2_1;
   not MGM_BG_1( SE_inv_for_SAEDRVT14_FSDPRBQ_V2_1, SE );
   wire MGM_D0_row1;
   and MGM_BG_2( MGM_D0_row1, SE_inv_for_SAEDRVT14_FSDPRBQ_V2_1, D );
   wire MGM_D0_row2;
   and MGM_BG_3( MGM_D0_row2, D, SI );
   wire MGM_D0_row3;
   and MGM_BG_4( MGM_D0_row3, SE, SI );
   or MGM_BG_5( MGM_D0, MGM_D0_row1, MGM_D0_row2, MGM_D0_row3 );
   UDP_saed14rvt_tt0p8v25c_MGM_IQ_FF_UDP( IQ, MGM_C0, 1'b0, CK, MGM_D0 );
   buf MGM_BG_6( Q, IQ );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_FSDPRBQ_V2_2_func( Q, CK, D, SI, SE, RD );
   input CK, D, RD, SE, SI;
   output Q;
   not MGM_BG_0( MGM_C0, RD );
   wire SE_inv_for_SAEDRVT14_FSDPRBQ_V2_2;
   not MGM_BG_1( SE_inv_for_SAEDRVT14_FSDPRBQ_V2_2, SE );
   wire MGM_D0_row1;
   and MGM_BG_2( MGM_D0_row1, SE_inv_for_SAEDRVT14_FSDPRBQ_V2_2, D );
   wire MGM_D0_row2;
   and MGM_BG_3( MGM_D0_row2, D, SI );
   wire MGM_D0_row3;
   and MGM_BG_4( MGM_D0_row3, SE, SI );
   or MGM_BG_5( MGM_D0, MGM_D0_row1, MGM_D0_row2, MGM_D0_row3 );
   UDP_saed14rvt_tt0p8v25c_MGM_IQ_FF_UDP( IQ, MGM_C0, 1'b0, CK, MGM_D0 );
   buf MGM_BG_6( Q, IQ );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_FSDPRBQ_V2_4_func( Q, CK, D, SI, SE, RD );
   input CK, D, RD, SE, SI;
   output Q;
   not MGM_BG_0( MGM_C0, RD );
   wire SE_inv_for_SAEDRVT14_FSDPRBQ_V2_4;
   not MGM_BG_1( SE_inv_for_SAEDRVT14_FSDPRBQ_V2_4, SE );
   wire MGM_D0_row1;
   and MGM_BG_2( MGM_D0_row1, SE_inv_for_SAEDRVT14_FSDPRBQ_V2_4, D );
   wire MGM_D0_row2;
   and MGM_BG_3( MGM_D0_row2, D, SI );
   wire MGM_D0_row3;
   and MGM_BG_4( MGM_D0_row3, SE, SI );
   or MGM_BG_5( MGM_D0, MGM_D0_row1, MGM_D0_row2, MGM_D0_row3 );
   UDP_saed14rvt_tt0p8v25c_MGM_IQ_FF_UDP( IQ, MGM_C0, 1'b0, CK, MGM_D0 );
   buf MGM_BG_6( Q, IQ );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_FSDPRBQ_V3_1_func( Q, CK, D, SI, SE, RD );
   input CK, D, RD, SE, SI;
   output Q;
   not MGM_BG_0( MGM_C0, RD );
   wire SE_inv_for_SAEDRVT14_FSDPRBQ_V3_1;
   not MGM_BG_1( SE_inv_for_SAEDRVT14_FSDPRBQ_V3_1, SE );
   wire MGM_D0_row1;
   and MGM_BG_2( MGM_D0_row1, SE_inv_for_SAEDRVT14_FSDPRBQ_V3_1, D );
   wire MGM_D0_row2;
   and MGM_BG_3( MGM_D0_row2, D, SI );
   wire MGM_D0_row3;
   and MGM_BG_4( MGM_D0_row3, SE, SI );
   or MGM_BG_5( MGM_D0, MGM_D0_row1, MGM_D0_row2, MGM_D0_row3 );
   UDP_saed14rvt_tt0p8v25c_MGM_IQ_FF_UDP( IQ, MGM_C0, 1'b0, CK, MGM_D0 );
   buf MGM_BG_6( Q, IQ );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_FSDPRBQ_V3_2_func( Q, CK, D, SI, SE, RD );
   input CK, D, RD, SE, SI;
   output Q;
   not MGM_BG_0( MGM_C0, RD );
   wire SE_inv_for_SAEDRVT14_FSDPRBQ_V3_2;
   not MGM_BG_1( SE_inv_for_SAEDRVT14_FSDPRBQ_V3_2, SE );
   wire MGM_D0_row1;
   and MGM_BG_2( MGM_D0_row1, SE_inv_for_SAEDRVT14_FSDPRBQ_V3_2, D );
   wire MGM_D0_row2;
   and MGM_BG_3( MGM_D0_row2, D, SI );
   wire MGM_D0_row3;
   and MGM_BG_4( MGM_D0_row3, SE, SI );
   or MGM_BG_5( MGM_D0, MGM_D0_row1, MGM_D0_row2, MGM_D0_row3 );
   UDP_saed14rvt_tt0p8v25c_MGM_IQ_FF_UDP( IQ, MGM_C0, 1'b0, CK, MGM_D0 );
   buf MGM_BG_6( Q, IQ );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_FSDPRBQ_V3_4_func( Q, CK, D, SI, SE, RD );
   input CK, D, RD, SE, SI;
   output Q;
   not MGM_BG_0( MGM_C0, RD );
   wire SE_inv_for_SAEDRVT14_FSDPRBQ_V3_4;
   not MGM_BG_1( SE_inv_for_SAEDRVT14_FSDPRBQ_V3_4, SE );
   wire MGM_D0_row1;
   and MGM_BG_2( MGM_D0_row1, SE_inv_for_SAEDRVT14_FSDPRBQ_V3_4, D );
   wire MGM_D0_row2;
   and MGM_BG_3( MGM_D0_row2, D, SI );
   wire MGM_D0_row3;
   and MGM_BG_4( MGM_D0_row3, SE, SI );
   or MGM_BG_5( MGM_D0, MGM_D0_row1, MGM_D0_row2, MGM_D0_row3 );
   UDP_saed14rvt_tt0p8v25c_MGM_IQ_FF_UDP( IQ, MGM_C0, 1'b0, CK, MGM_D0 );
   buf MGM_BG_6( Q, IQ );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_FSDPRBSBQ_V2LP_0P5_func( Q, CK, D, SI, SE, RD, SD );
   input CK, D, RD, SD, SE, SI;
   output Q;
   not MGM_BG_0( MGM_P0, SD );
   not MGM_BG_1( MGM_C0, RD );
   wire SE_inv_for_SAEDRVT14_FSDPRBSBQ_V2LP_0P5;
   not MGM_BG_2( SE_inv_for_SAEDRVT14_FSDPRBSBQ_V2LP_0P5, SE );
   wire MGM_D0_row1;
   and MGM_BG_3( MGM_D0_row1, SE_inv_for_SAEDRVT14_FSDPRBSBQ_V2LP_0P5, D );
   wire MGM_D0_row2;
   and MGM_BG_4( MGM_D0_row2, D, SI );
   wire MGM_D0_row3;
   and MGM_BG_5( MGM_D0_row3, SE, SI );
   or MGM_BG_6( MGM_D0, MGM_D0_row1, MGM_D0_row2, MGM_D0_row3 );
   UDP_saed14rvt_tt0p8v25c_MGM_L_IQ_FF_UDP( IQ, MGM_C0, MGM_P0, CK, MGM_D0 );
   buf MGM_BG_7( Q, IQ );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_FSDPRBSBQ_V2LP_1_func( Q, CK, D, SI, SE, RD, SD );
   input CK, D, RD, SD, SE, SI;
   output Q;
   not MGM_BG_0( MGM_P0, SD );
   not MGM_BG_1( MGM_C0, RD );
   wire SE_inv_for_SAEDRVT14_FSDPRBSBQ_V2LP_1;
   not MGM_BG_2( SE_inv_for_SAEDRVT14_FSDPRBSBQ_V2LP_1, SE );
   wire MGM_D0_row1;
   and MGM_BG_3( MGM_D0_row1, SE_inv_for_SAEDRVT14_FSDPRBSBQ_V2LP_1, D );
   wire MGM_D0_row2;
   and MGM_BG_4( MGM_D0_row2, D, SI );
   wire MGM_D0_row3;
   and MGM_BG_5( MGM_D0_row3, SE, SI );
   or MGM_BG_6( MGM_D0, MGM_D0_row1, MGM_D0_row2, MGM_D0_row3 );
   UDP_saed14rvt_tt0p8v25c_MGM_L_IQ_FF_UDP( IQ, MGM_C0, MGM_P0, CK, MGM_D0 );
   buf MGM_BG_7( Q, IQ );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_FSDPRBSBQ_V2LP_2_func( Q, CK, D, SI, SE, RD, SD );
   input CK, D, RD, SD, SE, SI;
   output Q;
   not MGM_BG_0( MGM_P0, SD );
   not MGM_BG_1( MGM_C0, RD );
   wire SE_inv_for_SAEDRVT14_FSDPRBSBQ_V2LP_2;
   not MGM_BG_2( SE_inv_for_SAEDRVT14_FSDPRBSBQ_V2LP_2, SE );
   wire MGM_D0_row1;
   and MGM_BG_3( MGM_D0_row1, SE_inv_for_SAEDRVT14_FSDPRBSBQ_V2LP_2, D );
   wire MGM_D0_row2;
   and MGM_BG_4( MGM_D0_row2, D, SI );
   wire MGM_D0_row3;
   and MGM_BG_5( MGM_D0_row3, SE, SI );
   or MGM_BG_6( MGM_D0, MGM_D0_row1, MGM_D0_row2, MGM_D0_row3 );
   UDP_saed14rvt_tt0p8v25c_MGM_L_IQ_FF_UDP( IQ, MGM_C0, MGM_P0, CK, MGM_D0 );
   buf MGM_BG_7( Q, IQ );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_FSDPRBSBQ_V2_0P5_func( Q, CK, D, SI, SE, RD, SD );
   input CK, D, RD, SD, SE, SI;
   output Q;
   not MGM_BG_0( MGM_P0, SD );
   not MGM_BG_1( MGM_C0, RD );
   wire SE_inv_for_SAEDRVT14_FSDPRBSBQ_V2_0P5;
   not MGM_BG_2( SE_inv_for_SAEDRVT14_FSDPRBSBQ_V2_0P5, SE );
   wire MGM_D0_row1;
   and MGM_BG_3( MGM_D0_row1, SE_inv_for_SAEDRVT14_FSDPRBSBQ_V2_0P5, D );
   wire MGM_D0_row2;
   and MGM_BG_4( MGM_D0_row2, D, SI );
   wire MGM_D0_row3;
   and MGM_BG_5( MGM_D0_row3, SE, SI );
   or MGM_BG_6( MGM_D0, MGM_D0_row1, MGM_D0_row2, MGM_D0_row3 );
   UDP_saed14rvt_tt0p8v25c_MGM_L_IQ_FF_UDP( IQ, MGM_C0, MGM_P0, CK, MGM_D0 );
   buf MGM_BG_7( Q, IQ );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_FSDPRBSBQ_V2_1_func( Q, CK, D, SI, SE, RD, SD );
   input CK, D, RD, SD, SE, SI;
   output Q;
   not MGM_BG_0( MGM_P0, SD );
   not MGM_BG_1( MGM_C0, RD );
   wire SE_inv_for_SAEDRVT14_FSDPRBSBQ_V2_1;
   not MGM_BG_2( SE_inv_for_SAEDRVT14_FSDPRBSBQ_V2_1, SE );
   wire MGM_D0_row1;
   and MGM_BG_3( MGM_D0_row1, SE_inv_for_SAEDRVT14_FSDPRBSBQ_V2_1, D );
   wire MGM_D0_row2;
   and MGM_BG_4( MGM_D0_row2, D, SI );
   wire MGM_D0_row3;
   and MGM_BG_5( MGM_D0_row3, SE, SI );
   or MGM_BG_6( MGM_D0, MGM_D0_row1, MGM_D0_row2, MGM_D0_row3 );
   UDP_saed14rvt_tt0p8v25c_MGM_L_IQ_FF_UDP( IQ, MGM_C0, MGM_P0, CK, MGM_D0 );
   buf MGM_BG_7( Q, IQ );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_FSDPRBSBQ_V2_2_func( Q, CK, D, SI, SE, RD, SD );
   input CK, D, RD, SD, SE, SI;
   output Q;
   not MGM_BG_0( MGM_P0, SD );
   not MGM_BG_1( MGM_C0, RD );
   wire SE_inv_for_SAEDRVT14_FSDPRBSBQ_V2_2;
   not MGM_BG_2( SE_inv_for_SAEDRVT14_FSDPRBSBQ_V2_2, SE );
   wire MGM_D0_row1;
   and MGM_BG_3( MGM_D0_row1, SE_inv_for_SAEDRVT14_FSDPRBSBQ_V2_2, D );
   wire MGM_D0_row2;
   and MGM_BG_4( MGM_D0_row2, D, SI );
   wire MGM_D0_row3;
   and MGM_BG_5( MGM_D0_row3, SE, SI );
   or MGM_BG_6( MGM_D0, MGM_D0_row1, MGM_D0_row2, MGM_D0_row3 );
   UDP_saed14rvt_tt0p8v25c_MGM_L_IQ_FF_UDP( IQ, MGM_C0, MGM_P0, CK, MGM_D0 );
   buf MGM_BG_7( Q, IQ );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_FSDPRBSBQ_V2_4_func( Q, CK, D, SI, SE, RD, SD );
   input CK, D, RD, SD, SE, SI;
   output Q;
   not MGM_BG_0( MGM_P0, SD );
   not MGM_BG_1( MGM_C0, RD );
   wire SE_inv_for_SAEDRVT14_FSDPRBSBQ_V2_4;
   not MGM_BG_2( SE_inv_for_SAEDRVT14_FSDPRBSBQ_V2_4, SE );
   wire MGM_D0_row1;
   and MGM_BG_3( MGM_D0_row1, SE_inv_for_SAEDRVT14_FSDPRBSBQ_V2_4, D );
   wire MGM_D0_row2;
   and MGM_BG_4( MGM_D0_row2, D, SI );
   wire MGM_D0_row3;
   and MGM_BG_5( MGM_D0_row3, SE, SI );
   or MGM_BG_6( MGM_D0, MGM_D0_row1, MGM_D0_row2, MGM_D0_row3 );
   UDP_saed14rvt_tt0p8v25c_MGM_L_IQ_FF_UDP( IQ, MGM_C0, MGM_P0, CK, MGM_D0 );
   buf MGM_BG_7( Q, IQ );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_FSDPSBQ_V2LP_0P5_func( Q, CK, D, SI, SE, SD );
   input CK, D, SD, SE, SI;
   output Q;
   not MGM_BG_0( MGM_P0, SD );
   wire SE_inv_for_SAEDRVT14_FSDPSBQ_V2LP_0P5;
   not MGM_BG_1( SE_inv_for_SAEDRVT14_FSDPSBQ_V2LP_0P5, SE );
   wire MGM_D0_row1;
   and MGM_BG_2( MGM_D0_row1, SE_inv_for_SAEDRVT14_FSDPSBQ_V2LP_0P5, D );
   wire MGM_D0_row2;
   and MGM_BG_3( MGM_D0_row2, D, SI );
   wire MGM_D0_row3;
   and MGM_BG_4( MGM_D0_row3, SE, SI );
   or MGM_BG_5( MGM_D0, MGM_D0_row1, MGM_D0_row2, MGM_D0_row3 );
   UDP_saed14rvt_tt0p8v25c_MGM_IQ_FF_UDP( IQ, 1'b0, MGM_P0, CK, MGM_D0 );
   buf MGM_BG_6( Q, IQ );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_FSDPSBQ_V2LP_1_func( Q, CK, D, SI, SE, SD );
   input CK, D, SD, SE, SI;
   output Q;
   not MGM_BG_0( MGM_P0, SD );
   wire SE_inv_for_SAEDRVT14_FSDPSBQ_V2LP_1;
   not MGM_BG_1( SE_inv_for_SAEDRVT14_FSDPSBQ_V2LP_1, SE );
   wire MGM_D0_row1;
   and MGM_BG_2( MGM_D0_row1, SE_inv_for_SAEDRVT14_FSDPSBQ_V2LP_1, D );
   wire MGM_D0_row2;
   and MGM_BG_3( MGM_D0_row2, D, SI );
   wire MGM_D0_row3;
   and MGM_BG_4( MGM_D0_row3, SE, SI );
   or MGM_BG_5( MGM_D0, MGM_D0_row1, MGM_D0_row2, MGM_D0_row3 );
   UDP_saed14rvt_tt0p8v25c_MGM_IQ_FF_UDP( IQ, 1'b0, MGM_P0, CK, MGM_D0 );
   buf MGM_BG_6( Q, IQ );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_FSDPSBQ_V2LP_2_func( Q, CK, D, SI, SE, SD );
   input CK, D, SD, SE, SI;
   output Q;
   not MGM_BG_0( MGM_P0, SD );
   wire SE_inv_for_SAEDRVT14_FSDPSBQ_V2LP_2;
   not MGM_BG_1( SE_inv_for_SAEDRVT14_FSDPSBQ_V2LP_2, SE );
   wire MGM_D0_row1;
   and MGM_BG_2( MGM_D0_row1, SE_inv_for_SAEDRVT14_FSDPSBQ_V2LP_2, D );
   wire MGM_D0_row2;
   and MGM_BG_3( MGM_D0_row2, D, SI );
   wire MGM_D0_row3;
   and MGM_BG_4( MGM_D0_row3, SE, SI );
   or MGM_BG_5( MGM_D0, MGM_D0_row1, MGM_D0_row2, MGM_D0_row3 );
   UDP_saed14rvt_tt0p8v25c_MGM_IQ_FF_UDP( IQ, 1'b0, MGM_P0, CK, MGM_D0 );
   buf MGM_BG_6( Q, IQ );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_FSDPSBQ_V2_0P5_func( Q, CK, D, SI, SE, SD );
   input CK, D, SD, SE, SI;
   output Q;
   not MGM_BG_0( MGM_P0, SD );
   wire SE_inv_for_SAEDRVT14_FSDPSBQ_V2_0P5;
   not MGM_BG_1( SE_inv_for_SAEDRVT14_FSDPSBQ_V2_0P5, SE );
   wire MGM_D0_row1;
   and MGM_BG_2( MGM_D0_row1, SE_inv_for_SAEDRVT14_FSDPSBQ_V2_0P5, D );
   wire MGM_D0_row2;
   and MGM_BG_3( MGM_D0_row2, D, SI );
   wire MGM_D0_row3;
   and MGM_BG_4( MGM_D0_row3, SE, SI );
   or MGM_BG_5( MGM_D0, MGM_D0_row1, MGM_D0_row2, MGM_D0_row3 );
   UDP_saed14rvt_tt0p8v25c_MGM_IQ_FF_UDP( IQ, 1'b0, MGM_P0, CK, MGM_D0 );
   buf MGM_BG_6( Q, IQ );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_FSDPSBQ_V2_1_func( Q, CK, D, SI, SE, SD );
   input CK, D, SD, SE, SI;
   output Q;
   not MGM_BG_0( MGM_P0, SD );
   wire SE_inv_for_SAEDRVT14_FSDPSBQ_V2_1;
   not MGM_BG_1( SE_inv_for_SAEDRVT14_FSDPSBQ_V2_1, SE );
   wire MGM_D0_row1;
   and MGM_BG_2( MGM_D0_row1, SE_inv_for_SAEDRVT14_FSDPSBQ_V2_1, D );
   wire MGM_D0_row2;
   and MGM_BG_3( MGM_D0_row2, D, SI );
   wire MGM_D0_row3;
   and MGM_BG_4( MGM_D0_row3, SE, SI );
   or MGM_BG_5( MGM_D0, MGM_D0_row1, MGM_D0_row2, MGM_D0_row3 );
   UDP_saed14rvt_tt0p8v25c_MGM_IQ_FF_UDP( IQ, 1'b0, MGM_P0, CK, MGM_D0 );
   buf MGM_BG_6( Q, IQ );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_FSDPSBQ_V2_2_func( Q, CK, D, SI, SE, SD );
   input CK, D, SD, SE, SI;
   output Q;
   not MGM_BG_0( MGM_P0, SD );
   wire SE_inv_for_SAEDRVT14_FSDPSBQ_V2_2;
   not MGM_BG_1( SE_inv_for_SAEDRVT14_FSDPSBQ_V2_2, SE );
   wire MGM_D0_row1;
   and MGM_BG_2( MGM_D0_row1, SE_inv_for_SAEDRVT14_FSDPSBQ_V2_2, D );
   wire MGM_D0_row2;
   and MGM_BG_3( MGM_D0_row2, D, SI );
   wire MGM_D0_row3;
   and MGM_BG_4( MGM_D0_row3, SE, SI );
   or MGM_BG_5( MGM_D0, MGM_D0_row1, MGM_D0_row2, MGM_D0_row3 );
   UDP_saed14rvt_tt0p8v25c_MGM_IQ_FF_UDP( IQ, 1'b0, MGM_P0, CK, MGM_D0 );
   buf MGM_BG_6( Q, IQ );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_FSDPSBQ_V2_4_func( Q, CK, D, SI, SE, SD );
   input CK, D, SD, SE, SI;
   output Q;
   not MGM_BG_0( MGM_P0, SD );
   wire SE_inv_for_SAEDRVT14_FSDPSBQ_V2_4;
   not MGM_BG_1( SE_inv_for_SAEDRVT14_FSDPSBQ_V2_4, SE );
   wire MGM_D0_row1;
   and MGM_BG_2( MGM_D0_row1, SE_inv_for_SAEDRVT14_FSDPSBQ_V2_4, D );
   wire MGM_D0_row2;
   and MGM_BG_3( MGM_D0_row2, D, SI );
   wire MGM_D0_row3;
   and MGM_BG_4( MGM_D0_row3, SE, SI );
   or MGM_BG_5( MGM_D0, MGM_D0_row1, MGM_D0_row2, MGM_D0_row3 );
   UDP_saed14rvt_tt0p8v25c_MGM_IQ_FF_UDP( IQ, 1'b0, MGM_P0, CK, MGM_D0 );
   buf MGM_BG_6( Q, IQ );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_FSDPSYNRBQ_V2LP_0P5_func( Q, CK, D, SI, SE, RD );
   input CK, D, RD, SE, SI;
   output Q;
   wire SE_inv_for_SAEDRVT14_FSDPSYNRBQ_V2LP_0P5;
   not MGM_BG_0( SE_inv_for_SAEDRVT14_FSDPSYNRBQ_V2LP_0P5, SE );
   wire MGM_D0_row1;
   and MGM_BG_1( MGM_D0_row1, SE_inv_for_SAEDRVT14_FSDPSYNRBQ_V2LP_0P5, D, RD );
   wire MGM_D0_row2;
   and MGM_BG_2( MGM_D0_row2, D, RD, SI );
   wire MGM_D0_row3;
   and MGM_BG_3( MGM_D0_row3, SE, SI );
   or MGM_BG_4( MGM_D0, MGM_D0_row1, MGM_D0_row2, MGM_D0_row3 );
   UDP_saed14rvt_tt0p8v25c_MGM_IQ_FF_UDP( IQ, 1'b0, 1'b0, CK, MGM_D0 );
   buf MGM_BG_5( Q, IQ );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_FSDPSYNRBQ_V2LP_1_func( Q, CK, D, SI, SE, RD );
   input CK, D, RD, SE, SI;
   output Q;
   wire SE_inv_for_SAEDRVT14_FSDPSYNRBQ_V2LP_1;
   not MGM_BG_0( SE_inv_for_SAEDRVT14_FSDPSYNRBQ_V2LP_1, SE );
   wire MGM_D0_row1;
   and MGM_BG_1( MGM_D0_row1, SE_inv_for_SAEDRVT14_FSDPSYNRBQ_V2LP_1, D, RD );
   wire MGM_D0_row2;
   and MGM_BG_2( MGM_D0_row2, D, RD, SI );
   wire MGM_D0_row3;
   and MGM_BG_3( MGM_D0_row3, SE, SI );
   or MGM_BG_4( MGM_D0, MGM_D0_row1, MGM_D0_row2, MGM_D0_row3 );
   UDP_saed14rvt_tt0p8v25c_MGM_IQ_FF_UDP( IQ, 1'b0, 1'b0, CK, MGM_D0 );
   buf MGM_BG_5( Q, IQ );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_FSDPSYNRBQ_V2LP_2_func( Q, CK, D, SI, SE, RD );
   input CK, D, RD, SE, SI;
   output Q;
   wire SE_inv_for_SAEDRVT14_FSDPSYNRBQ_V2LP_2;
   not MGM_BG_0( SE_inv_for_SAEDRVT14_FSDPSYNRBQ_V2LP_2, SE );
   wire MGM_D0_row1;
   and MGM_BG_1( MGM_D0_row1, SE_inv_for_SAEDRVT14_FSDPSYNRBQ_V2LP_2, D, RD );
   wire MGM_D0_row2;
   and MGM_BG_2( MGM_D0_row2, D, RD, SI );
   wire MGM_D0_row3;
   and MGM_BG_3( MGM_D0_row3, SE, SI );
   or MGM_BG_4( MGM_D0, MGM_D0_row1, MGM_D0_row2, MGM_D0_row3 );
   UDP_saed14rvt_tt0p8v25c_MGM_IQ_FF_UDP( IQ, 1'b0, 1'b0, CK, MGM_D0 );
   buf MGM_BG_5( Q, IQ );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_FSDPSYNRBQ_V2_0P5_func( Q, CK, D, SI, SE, RD );
   input CK, D, RD, SE, SI;
   output Q;
   wire SE_inv_for_SAEDRVT14_FSDPSYNRBQ_V2_0P5;
   not MGM_BG_0( SE_inv_for_SAEDRVT14_FSDPSYNRBQ_V2_0P5, SE );
   wire MGM_D0_row1;
   and MGM_BG_1( MGM_D0_row1, SE_inv_for_SAEDRVT14_FSDPSYNRBQ_V2_0P5, D, RD );
   wire MGM_D0_row2;
   and MGM_BG_2( MGM_D0_row2, D, RD, SI );
   wire MGM_D0_row3;
   and MGM_BG_3( MGM_D0_row3, SE, SI );
   or MGM_BG_4( MGM_D0, MGM_D0_row1, MGM_D0_row2, MGM_D0_row3 );
   UDP_saed14rvt_tt0p8v25c_MGM_IQ_FF_UDP( IQ, 1'b0, 1'b0, CK, MGM_D0 );
   buf MGM_BG_5( Q, IQ );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_FSDPSYNRBQ_V2_1_func( Q, CK, D, SI, SE, RD );
   input CK, D, RD, SE, SI;
   output Q;
   wire SE_inv_for_SAEDRVT14_FSDPSYNRBQ_V2_1;
   not MGM_BG_0( SE_inv_for_SAEDRVT14_FSDPSYNRBQ_V2_1, SE );
   wire MGM_D0_row1;
   and MGM_BG_1( MGM_D0_row1, SE_inv_for_SAEDRVT14_FSDPSYNRBQ_V2_1, D, RD );
   wire MGM_D0_row2;
   and MGM_BG_2( MGM_D0_row2, D, RD, SI );
   wire MGM_D0_row3;
   and MGM_BG_3( MGM_D0_row3, SE, SI );
   or MGM_BG_4( MGM_D0, MGM_D0_row1, MGM_D0_row2, MGM_D0_row3 );
   UDP_saed14rvt_tt0p8v25c_MGM_IQ_FF_UDP( IQ, 1'b0, 1'b0, CK, MGM_D0 );
   buf MGM_BG_5( Q, IQ );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_FSDPSYNRBQ_V2_2_func( Q, CK, D, SI, SE, RD );
   input CK, D, RD, SE, SI;
   output Q;
   wire SE_inv_for_SAEDRVT14_FSDPSYNRBQ_V2_2;
   not MGM_BG_0( SE_inv_for_SAEDRVT14_FSDPSYNRBQ_V2_2, SE );
   wire MGM_D0_row1;
   and MGM_BG_1( MGM_D0_row1, SE_inv_for_SAEDRVT14_FSDPSYNRBQ_V2_2, D, RD );
   wire MGM_D0_row2;
   and MGM_BG_2( MGM_D0_row2, D, RD, SI );
   wire MGM_D0_row3;
   and MGM_BG_3( MGM_D0_row3, SE, SI );
   or MGM_BG_4( MGM_D0, MGM_D0_row1, MGM_D0_row2, MGM_D0_row3 );
   UDP_saed14rvt_tt0p8v25c_MGM_IQ_FF_UDP( IQ, 1'b0, 1'b0, CK, MGM_D0 );
   buf MGM_BG_5( Q, IQ );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_FSDPSYNRBQ_V2_4_func( Q, CK, D, SI, SE, RD );
   input CK, D, RD, SE, SI;
   output Q;
   wire SE_inv_for_SAEDRVT14_FSDPSYNRBQ_V2_4;
   not MGM_BG_0( SE_inv_for_SAEDRVT14_FSDPSYNRBQ_V2_4, SE );
   wire MGM_D0_row1;
   and MGM_BG_1( MGM_D0_row1, SE_inv_for_SAEDRVT14_FSDPSYNRBQ_V2_4, D, RD );
   wire MGM_D0_row2;
   and MGM_BG_2( MGM_D0_row2, D, RD, SI );
   wire MGM_D0_row3;
   and MGM_BG_3( MGM_D0_row3, SE, SI );
   or MGM_BG_4( MGM_D0, MGM_D0_row1, MGM_D0_row2, MGM_D0_row3 );
   UDP_saed14rvt_tt0p8v25c_MGM_IQ_FF_UDP( IQ, 1'b0, 1'b0, CK, MGM_D0 );
   buf MGM_BG_5( Q, IQ );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_FSDPSYNRBQ_V3_1_func( Q, CK, D, SI, SE, RD );
   input CK, D, RD, SE, SI;
   output Q;
   wire SE_inv_for_SAEDRVT14_FSDPSYNRBQ_V3_1;
   not MGM_BG_0( SE_inv_for_SAEDRVT14_FSDPSYNRBQ_V3_1, SE );
   wire MGM_D0_row1;
   and MGM_BG_1( MGM_D0_row1, SE_inv_for_SAEDRVT14_FSDPSYNRBQ_V3_1, D, RD );
   wire MGM_D0_row2;
   and MGM_BG_2( MGM_D0_row2, D, RD, SI );
   wire MGM_D0_row3;
   and MGM_BG_3( MGM_D0_row3, SE, SI );
   or MGM_BG_4( MGM_D0, MGM_D0_row1, MGM_D0_row2, MGM_D0_row3 );
   UDP_saed14rvt_tt0p8v25c_MGM_IQ_FF_UDP( IQ, 1'b0, 1'b0, CK, MGM_D0 );
   buf MGM_BG_5( Q, IQ );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_FSDPSYNRBQ_V3_2_func( Q, CK, D, SI, SE, RD );
   input CK, D, RD, SE, SI;
   output Q;
   wire SE_inv_for_SAEDRVT14_FSDPSYNRBQ_V3_2;
   not MGM_BG_0( SE_inv_for_SAEDRVT14_FSDPSYNRBQ_V3_2, SE );
   wire MGM_D0_row1;
   and MGM_BG_1( MGM_D0_row1, SE_inv_for_SAEDRVT14_FSDPSYNRBQ_V3_2, D, RD );
   wire MGM_D0_row2;
   and MGM_BG_2( MGM_D0_row2, D, RD, SI );
   wire MGM_D0_row3;
   and MGM_BG_3( MGM_D0_row3, SE, SI );
   or MGM_BG_4( MGM_D0, MGM_D0_row1, MGM_D0_row2, MGM_D0_row3 );
   UDP_saed14rvt_tt0p8v25c_MGM_IQ_FF_UDP( IQ, 1'b0, 1'b0, CK, MGM_D0 );
   buf MGM_BG_5( Q, IQ );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_FSDPSYNRBQ_V3_4_func( Q, CK, D, SI, SE, RD );
   input CK, D, RD, SE, SI;
   output Q;
   wire SE_inv_for_SAEDRVT14_FSDPSYNRBQ_V3_4;
   not MGM_BG_0( SE_inv_for_SAEDRVT14_FSDPSYNRBQ_V3_4, SE );
   wire MGM_D0_row1;
   and MGM_BG_1( MGM_D0_row1, SE_inv_for_SAEDRVT14_FSDPSYNRBQ_V3_4, D, RD );
   wire MGM_D0_row2;
   and MGM_BG_2( MGM_D0_row2, D, RD, SI );
   wire MGM_D0_row3;
   and MGM_BG_3( MGM_D0_row3, SE, SI );
   or MGM_BG_4( MGM_D0, MGM_D0_row1, MGM_D0_row2, MGM_D0_row3 );
   UDP_saed14rvt_tt0p8v25c_MGM_IQ_FF_UDP( IQ, 1'b0, 1'b0, CK, MGM_D0 );
   buf MGM_BG_5( Q, IQ );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_FSDPSYNSBQ_V2LP_0P5_func( Q, CK, D, SI, SE, SD );
   input CK, D, SD, SE, SI;
   output Q;
   wire SE_inv_for_SAEDRVT14_FSDPSYNSBQ_V2LP_0P5;
   not MGM_BG_0( SE_inv_for_SAEDRVT14_FSDPSYNSBQ_V2LP_0P5, SE );
   wire MGM_D0_row1;
   and MGM_BG_1( MGM_D0_row1, SE_inv_for_SAEDRVT14_FSDPSYNSBQ_V2LP_0P5, D );
   wire MGM_D0_row2;
   and MGM_BG_2( MGM_D0_row2, D, SI );
   wire SD_inv_for_SAEDRVT14_FSDPSYNSBQ_V2LP_0P5;
   not MGM_BG_3( SD_inv_for_SAEDRVT14_FSDPSYNSBQ_V2LP_0P5, SD );
   wire MGM_D0_row3;
   and MGM_BG_4( MGM_D0_row3, SD_inv_for_SAEDRVT14_FSDPSYNSBQ_V2LP_0P5, SE_inv_for_SAEDRVT14_FSDPSYNSBQ_V2LP_0P5 );
   wire MGM_D0_row4;
   and MGM_BG_5( MGM_D0_row4, SD_inv_for_SAEDRVT14_FSDPSYNSBQ_V2LP_0P5, SI );
   wire MGM_D0_row5;
   and MGM_BG_6( MGM_D0_row5, SE, SI );
   or MGM_BG_7( MGM_D0, MGM_D0_row1, MGM_D0_row2, MGM_D0_row3, MGM_D0_row4, MGM_D0_row5 );
   UDP_saed14rvt_tt0p8v25c_MGM_IQ_FF_UDP( IQ, 1'b0, 1'b0, CK, MGM_D0 );
   buf MGM_BG_8( Q, IQ );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_FSDPSYNSBQ_V2LP_1_func( Q, CK, D, SI, SE, SD );
   input CK, D, SD, SE, SI;
   output Q;
   wire SE_inv_for_SAEDRVT14_FSDPSYNSBQ_V2LP_1;
   not MGM_BG_0( SE_inv_for_SAEDRVT14_FSDPSYNSBQ_V2LP_1, SE );
   wire MGM_D0_row1;
   and MGM_BG_1( MGM_D0_row1, SE_inv_for_SAEDRVT14_FSDPSYNSBQ_V2LP_1, D );
   wire MGM_D0_row2;
   and MGM_BG_2( MGM_D0_row2, D, SI );
   wire SD_inv_for_SAEDRVT14_FSDPSYNSBQ_V2LP_1;
   not MGM_BG_3( SD_inv_for_SAEDRVT14_FSDPSYNSBQ_V2LP_1, SD );
   wire MGM_D0_row3;
   and MGM_BG_4( MGM_D0_row3, SD_inv_for_SAEDRVT14_FSDPSYNSBQ_V2LP_1, SE_inv_for_SAEDRVT14_FSDPSYNSBQ_V2LP_1 );
   wire MGM_D0_row4;
   and MGM_BG_5( MGM_D0_row4, SD_inv_for_SAEDRVT14_FSDPSYNSBQ_V2LP_1, SI );
   wire MGM_D0_row5;
   and MGM_BG_6( MGM_D0_row5, SE, SI );
   or MGM_BG_7( MGM_D0, MGM_D0_row1, MGM_D0_row2, MGM_D0_row3, MGM_D0_row4, MGM_D0_row5 );
   UDP_saed14rvt_tt0p8v25c_MGM_IQ_FF_UDP( IQ, 1'b0, 1'b0, CK, MGM_D0 );
   buf MGM_BG_8( Q, IQ );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_FSDPSYNSBQ_V2LP_2_func( Q, CK, D, SI, SE, SD );
   input CK, D, SD, SE, SI;
   output Q;
   wire SE_inv_for_SAEDRVT14_FSDPSYNSBQ_V2LP_2;
   not MGM_BG_0( SE_inv_for_SAEDRVT14_FSDPSYNSBQ_V2LP_2, SE );
   wire MGM_D0_row1;
   and MGM_BG_1( MGM_D0_row1, SE_inv_for_SAEDRVT14_FSDPSYNSBQ_V2LP_2, D );
   wire MGM_D0_row2;
   and MGM_BG_2( MGM_D0_row2, D, SI );
   wire SD_inv_for_SAEDRVT14_FSDPSYNSBQ_V2LP_2;
   not MGM_BG_3( SD_inv_for_SAEDRVT14_FSDPSYNSBQ_V2LP_2, SD );
   wire MGM_D0_row3;
   and MGM_BG_4( MGM_D0_row3, SD_inv_for_SAEDRVT14_FSDPSYNSBQ_V2LP_2, SE_inv_for_SAEDRVT14_FSDPSYNSBQ_V2LP_2 );
   wire MGM_D0_row4;
   and MGM_BG_5( MGM_D0_row4, SD_inv_for_SAEDRVT14_FSDPSYNSBQ_V2LP_2, SI );
   wire MGM_D0_row5;
   and MGM_BG_6( MGM_D0_row5, SE, SI );
   or MGM_BG_7( MGM_D0, MGM_D0_row1, MGM_D0_row2, MGM_D0_row3, MGM_D0_row4, MGM_D0_row5 );
   UDP_saed14rvt_tt0p8v25c_MGM_IQ_FF_UDP( IQ, 1'b0, 1'b0, CK, MGM_D0 );
   buf MGM_BG_8( Q, IQ );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_FSDPSYNSBQ_V2_0P5_func( Q, CK, D, SI, SE, SD );
   input CK, D, SD, SE, SI;
   output Q;
   wire SE_inv_for_SAEDRVT14_FSDPSYNSBQ_V2_0P5;
   not MGM_BG_0( SE_inv_for_SAEDRVT14_FSDPSYNSBQ_V2_0P5, SE );
   wire MGM_D0_row1;
   and MGM_BG_1( MGM_D0_row1, SE_inv_for_SAEDRVT14_FSDPSYNSBQ_V2_0P5, D );
   wire MGM_D0_row2;
   and MGM_BG_2( MGM_D0_row2, D, SI );
   wire SD_inv_for_SAEDRVT14_FSDPSYNSBQ_V2_0P5;
   not MGM_BG_3( SD_inv_for_SAEDRVT14_FSDPSYNSBQ_V2_0P5, SD );
   wire MGM_D0_row3;
   and MGM_BG_4( MGM_D0_row3, SD_inv_for_SAEDRVT14_FSDPSYNSBQ_V2_0P5, SE_inv_for_SAEDRVT14_FSDPSYNSBQ_V2_0P5 );
   wire MGM_D0_row4;
   and MGM_BG_5( MGM_D0_row4, SD_inv_for_SAEDRVT14_FSDPSYNSBQ_V2_0P5, SI );
   wire MGM_D0_row5;
   and MGM_BG_6( MGM_D0_row5, SE, SI );
   or MGM_BG_7( MGM_D0, MGM_D0_row1, MGM_D0_row2, MGM_D0_row3, MGM_D0_row4, MGM_D0_row5 );
   UDP_saed14rvt_tt0p8v25c_MGM_IQ_FF_UDP( IQ, 1'b0, 1'b0, CK, MGM_D0 );
   buf MGM_BG_8( Q, IQ );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_FSDPSYNSBQ_V2_1_func( Q, CK, D, SI, SE, SD );
   input CK, D, SD, SE, SI;
   output Q;
   wire SE_inv_for_SAEDRVT14_FSDPSYNSBQ_V2_1;
   not MGM_BG_0( SE_inv_for_SAEDRVT14_FSDPSYNSBQ_V2_1, SE );
   wire MGM_D0_row1;
   and MGM_BG_1( MGM_D0_row1, SE_inv_for_SAEDRVT14_FSDPSYNSBQ_V2_1, D );
   wire MGM_D0_row2;
   and MGM_BG_2( MGM_D0_row2, D, SI );
   wire SD_inv_for_SAEDRVT14_FSDPSYNSBQ_V2_1;
   not MGM_BG_3( SD_inv_for_SAEDRVT14_FSDPSYNSBQ_V2_1, SD );
   wire MGM_D0_row3;
   and MGM_BG_4( MGM_D0_row3, SD_inv_for_SAEDRVT14_FSDPSYNSBQ_V2_1, SE_inv_for_SAEDRVT14_FSDPSYNSBQ_V2_1 );
   wire MGM_D0_row4;
   and MGM_BG_5( MGM_D0_row4, SD_inv_for_SAEDRVT14_FSDPSYNSBQ_V2_1, SI );
   wire MGM_D0_row5;
   and MGM_BG_6( MGM_D0_row5, SE, SI );
   or MGM_BG_7( MGM_D0, MGM_D0_row1, MGM_D0_row2, MGM_D0_row3, MGM_D0_row4, MGM_D0_row5 );
   UDP_saed14rvt_tt0p8v25c_MGM_IQ_FF_UDP( IQ, 1'b0, 1'b0, CK, MGM_D0 );
   buf MGM_BG_8( Q, IQ );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_FSDPSYNSBQ_V2_2_func( Q, CK, D, SI, SE, SD );
   input CK, D, SD, SE, SI;
   output Q;
   wire SE_inv_for_SAEDRVT14_FSDPSYNSBQ_V2_2;
   not MGM_BG_0( SE_inv_for_SAEDRVT14_FSDPSYNSBQ_V2_2, SE );
   wire MGM_D0_row1;
   and MGM_BG_1( MGM_D0_row1, SE_inv_for_SAEDRVT14_FSDPSYNSBQ_V2_2, D );
   wire MGM_D0_row2;
   and MGM_BG_2( MGM_D0_row2, D, SI );
   wire SD_inv_for_SAEDRVT14_FSDPSYNSBQ_V2_2;
   not MGM_BG_3( SD_inv_for_SAEDRVT14_FSDPSYNSBQ_V2_2, SD );
   wire MGM_D0_row3;
   and MGM_BG_4( MGM_D0_row3, SD_inv_for_SAEDRVT14_FSDPSYNSBQ_V2_2, SE_inv_for_SAEDRVT14_FSDPSYNSBQ_V2_2 );
   wire MGM_D0_row4;
   and MGM_BG_5( MGM_D0_row4, SD_inv_for_SAEDRVT14_FSDPSYNSBQ_V2_2, SI );
   wire MGM_D0_row5;
   and MGM_BG_6( MGM_D0_row5, SE, SI );
   or MGM_BG_7( MGM_D0, MGM_D0_row1, MGM_D0_row2, MGM_D0_row3, MGM_D0_row4, MGM_D0_row5 );
   UDP_saed14rvt_tt0p8v25c_MGM_IQ_FF_UDP( IQ, 1'b0, 1'b0, CK, MGM_D0 );
   buf MGM_BG_8( Q, IQ );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_FSDPSYNSBQ_V2_4_func( Q, CK, D, SI, SE, SD );
   input CK, D, SD, SE, SI;
   output Q;
   wire SE_inv_for_SAEDRVT14_FSDPSYNSBQ_V2_4;
   not MGM_BG_0( SE_inv_for_SAEDRVT14_FSDPSYNSBQ_V2_4, SE );
   wire MGM_D0_row1;
   and MGM_BG_1( MGM_D0_row1, SE_inv_for_SAEDRVT14_FSDPSYNSBQ_V2_4, D );
   wire MGM_D0_row2;
   and MGM_BG_2( MGM_D0_row2, D, SI );
   wire SD_inv_for_SAEDRVT14_FSDPSYNSBQ_V2_4;
   not MGM_BG_3( SD_inv_for_SAEDRVT14_FSDPSYNSBQ_V2_4, SD );
   wire MGM_D0_row3;
   and MGM_BG_4( MGM_D0_row3, SD_inv_for_SAEDRVT14_FSDPSYNSBQ_V2_4, SE_inv_for_SAEDRVT14_FSDPSYNSBQ_V2_4 );
   wire MGM_D0_row4;
   and MGM_BG_5( MGM_D0_row4, SD_inv_for_SAEDRVT14_FSDPSYNSBQ_V2_4, SI );
   wire MGM_D0_row5;
   and MGM_BG_6( MGM_D0_row5, SE, SI );
   or MGM_BG_7( MGM_D0, MGM_D0_row1, MGM_D0_row2, MGM_D0_row3, MGM_D0_row4, MGM_D0_row5 );
   UDP_saed14rvt_tt0p8v25c_MGM_IQ_FF_UDP( IQ, 1'b0, 1'b0, CK, MGM_D0 );
   buf MGM_BG_8( Q, IQ );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_FSDP_V2LP_0P5_func( Q, QN, CK, D, SI, SE );
   input CK, D, SE, SI;
   output Q, QN;
   wire SE_inv_for_SAEDRVT14_FSDP_V2LP_0P5;
   not MGM_BG_0( SE_inv_for_SAEDRVT14_FSDP_V2LP_0P5, SE );
   wire MGM_D0_row1;
   and MGM_BG_1( MGM_D0_row1, SE_inv_for_SAEDRVT14_FSDP_V2LP_0P5, D );
   wire MGM_D0_row2;
   and MGM_BG_2( MGM_D0_row2, D, SI );
   wire MGM_D0_row3;
   and MGM_BG_3( MGM_D0_row3, SE, SI );
   or MGM_BG_4( MGM_D0, MGM_D0_row1, MGM_D0_row2, MGM_D0_row3 );
   UDP_saed14rvt_tt0p8v25c_MGM_IQ_FF_UDP( IQ, 1'b0, 1'b0, CK, MGM_D0 );
   UDP_saed14rvt_tt0p8v25c_MGM_IQN_FF_UDP( IQN, 1'b0, 1'b0, CK, MGM_D0 );
   buf MGM_BG_5( Q, IQ );
   buf MGM_BG_6( QN, IQN );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_FSDP_V2LP_1_func( Q, QN, CK, D, SI, SE );
   input CK, D, SE, SI;
   output Q, QN;
   wire SE_inv_for_SAEDRVT14_FSDP_V2LP_1;
   not MGM_BG_0( SE_inv_for_SAEDRVT14_FSDP_V2LP_1, SE );
   wire MGM_D0_row1;
   and MGM_BG_1( MGM_D0_row1, SE_inv_for_SAEDRVT14_FSDP_V2LP_1, D );
   wire MGM_D0_row2;
   and MGM_BG_2( MGM_D0_row2, D, SI );
   wire MGM_D0_row3;
   and MGM_BG_3( MGM_D0_row3, SE, SI );
   or MGM_BG_4( MGM_D0, MGM_D0_row1, MGM_D0_row2, MGM_D0_row3 );
   UDP_saed14rvt_tt0p8v25c_MGM_IQ_FF_UDP( IQ, 1'b0, 1'b0, CK, MGM_D0 );
   UDP_saed14rvt_tt0p8v25c_MGM_IQN_FF_UDP( IQN, 1'b0, 1'b0, CK, MGM_D0 );
   buf MGM_BG_5( Q, IQ );
   buf MGM_BG_6( QN, IQN );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_FSDP_V2LP_2_func( Q, QN, CK, D, SI, SE );
   input CK, D, SE, SI;
   output Q, QN;
   wire SE_inv_for_SAEDRVT14_FSDP_V2LP_2;
   not MGM_BG_0( SE_inv_for_SAEDRVT14_FSDP_V2LP_2, SE );
   wire MGM_D0_row1;
   and MGM_BG_1( MGM_D0_row1, SE_inv_for_SAEDRVT14_FSDP_V2LP_2, D );
   wire MGM_D0_row2;
   and MGM_BG_2( MGM_D0_row2, D, SI );
   wire MGM_D0_row3;
   and MGM_BG_3( MGM_D0_row3, SE, SI );
   or MGM_BG_4( MGM_D0, MGM_D0_row1, MGM_D0_row2, MGM_D0_row3 );
   UDP_saed14rvt_tt0p8v25c_MGM_IQ_FF_UDP( IQ, 1'b0, 1'b0, CK, MGM_D0 );
   UDP_saed14rvt_tt0p8v25c_MGM_IQN_FF_UDP( IQN, 1'b0, 1'b0, CK, MGM_D0 );
   buf MGM_BG_5( Q, IQ );
   buf MGM_BG_6( QN, IQN );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_FSDP_V2_0P5_func( Q, QN, CK, D, SI, SE );
   input CK, D, SE, SI;
   output Q, QN;
   wire SE_inv_for_SAEDRVT14_FSDP_V2_0P5;
   not MGM_BG_0( SE_inv_for_SAEDRVT14_FSDP_V2_0P5, SE );
   wire MGM_D0_row1;
   and MGM_BG_1( MGM_D0_row1, SE_inv_for_SAEDRVT14_FSDP_V2_0P5, D );
   wire MGM_D0_row2;
   and MGM_BG_2( MGM_D0_row2, D, SI );
   wire MGM_D0_row3;
   and MGM_BG_3( MGM_D0_row3, SE, SI );
   or MGM_BG_4( MGM_D0, MGM_D0_row1, MGM_D0_row2, MGM_D0_row3 );
   UDP_saed14rvt_tt0p8v25c_MGM_IQ_FF_UDP( IQ, 1'b0, 1'b0, CK, MGM_D0 );
   UDP_saed14rvt_tt0p8v25c_MGM_IQN_FF_UDP( IQN, 1'b0, 1'b0, CK, MGM_D0 );
   buf MGM_BG_5( Q, IQ );
   buf MGM_BG_6( QN, IQN );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_FSDP_V2_1_func( Q, QN, CK, D, SI, SE );
   input CK, D, SE, SI;
   output Q, QN;
   wire SE_inv_for_SAEDRVT14_FSDP_V2_1;
   not MGM_BG_0( SE_inv_for_SAEDRVT14_FSDP_V2_1, SE );
   wire MGM_D0_row1;
   and MGM_BG_1( MGM_D0_row1, SE_inv_for_SAEDRVT14_FSDP_V2_1, D );
   wire MGM_D0_row2;
   and MGM_BG_2( MGM_D0_row2, D, SI );
   wire MGM_D0_row3;
   and MGM_BG_3( MGM_D0_row3, SE, SI );
   or MGM_BG_4( MGM_D0, MGM_D0_row1, MGM_D0_row2, MGM_D0_row3 );
   UDP_saed14rvt_tt0p8v25c_MGM_IQ_FF_UDP( IQ, 1'b0, 1'b0, CK, MGM_D0 );
   UDP_saed14rvt_tt0p8v25c_MGM_IQN_FF_UDP( IQN, 1'b0, 1'b0, CK, MGM_D0 );
   buf MGM_BG_5( Q, IQ );
   buf MGM_BG_6( QN, IQN );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_FSDP_V2_2_func( Q, QN, CK, D, SI, SE );
   input CK, D, SE, SI;
   output Q, QN;
   wire SE_inv_for_SAEDRVT14_FSDP_V2_2;
   not MGM_BG_0( SE_inv_for_SAEDRVT14_FSDP_V2_2, SE );
   wire MGM_D0_row1;
   and MGM_BG_1( MGM_D0_row1, SE_inv_for_SAEDRVT14_FSDP_V2_2, D );
   wire MGM_D0_row2;
   and MGM_BG_2( MGM_D0_row2, D, SI );
   wire MGM_D0_row3;
   and MGM_BG_3( MGM_D0_row3, SE, SI );
   or MGM_BG_4( MGM_D0, MGM_D0_row1, MGM_D0_row2, MGM_D0_row3 );
   UDP_saed14rvt_tt0p8v25c_MGM_IQ_FF_UDP( IQ, 1'b0, 1'b0, CK, MGM_D0 );
   UDP_saed14rvt_tt0p8v25c_MGM_IQN_FF_UDP( IQN, 1'b0, 1'b0, CK, MGM_D0 );
   buf MGM_BG_5( Q, IQ );
   buf MGM_BG_6( QN, IQN );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_FSDP_V2_4_func( Q, QN, CK, D, SI, SE );
   input CK, D, SE, SI;
   output Q, QN;
   wire SE_inv_for_SAEDRVT14_FSDP_V2_4;
   not MGM_BG_0( SE_inv_for_SAEDRVT14_FSDP_V2_4, SE );
   wire MGM_D0_row1;
   and MGM_BG_1( MGM_D0_row1, SE_inv_for_SAEDRVT14_FSDP_V2_4, D );
   wire MGM_D0_row2;
   and MGM_BG_2( MGM_D0_row2, D, SI );
   wire MGM_D0_row3;
   and MGM_BG_3( MGM_D0_row3, SE, SI );
   or MGM_BG_4( MGM_D0, MGM_D0_row1, MGM_D0_row2, MGM_D0_row3 );
   UDP_saed14rvt_tt0p8v25c_MGM_IQ_FF_UDP( IQ, 1'b0, 1'b0, CK, MGM_D0 );
   UDP_saed14rvt_tt0p8v25c_MGM_IQN_FF_UDP( IQN, 1'b0, 1'b0, CK, MGM_D0 );
   buf MGM_BG_5( Q, IQ );
   buf MGM_BG_6( QN, IQN );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_LDCKNR2PQ_5_func( Q, G1, G2, D );
   input D, G1, G2;
   output Q;
   or MGM_BG_0( MGM_EN0, G1, G2 );
   UDP_saed14rvt_tt0p8v25c_MGM_IQ_LATCH_UDP( IQ, 1'b0, 1'b0, MGM_EN0, D );
   buf MGM_BG_1( Q, IQ );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_LDND2NQ_1_func( Q, G, EN, SE );
   input EN, G, SE;
   output Q;
   not MGM_BG_0( MGM_EN0, G );
   and MGM_BG_1( MGM_D0, EN, SE );
   UDP_saed14rvt_tt0p8v25c_MGM_IQ_LATCH_UDP( IQ, 1'b0, 1'b0, MGM_EN0, MGM_D0 );
   buf MGM_BG_2( Q, IQ );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_LDND2NQ_2_func( Q, G, EN, SE );
   input EN, G, SE;
   output Q;
   not MGM_BG_0( MGM_EN0, G );
   and MGM_BG_1( MGM_D0, EN, SE );
   UDP_saed14rvt_tt0p8v25c_MGM_IQ_LATCH_UDP( IQ, 1'b0, 1'b0, MGM_EN0, MGM_D0 );
   buf MGM_BG_2( Q, IQ );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_LDND2NQ_4_func( Q, G, EN, SE );
   input EN, G, SE;
   output Q;
   not MGM_BG_0( MGM_EN0, G );
   and MGM_BG_1( MGM_D0, EN, SE );
   UDP_saed14rvt_tt0p8v25c_MGM_IQ_LATCH_UDP( IQ, 1'b0, 1'b0, MGM_EN0, MGM_D0 );
   buf MGM_BG_2( Q, IQ );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_LDNQOR2_1_func( Q, G, TEN, EN );
   input EN, G, TEN;
   output Q;
   not MGM_BG_0( MGM_EN0, G );
   or MGM_BG_1( MGM_D0, EN, TEN );
   UDP_saed14rvt_tt0p8v25c_MGM_IQ_LATCH_UDP( IQ, 1'b0, 1'b0, MGM_EN0, MGM_D0 );
   buf MGM_BG_2( Q, IQ );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_LDNQOR2_2_func( Q, G, TEN, EN );
   input EN, G, TEN;
   output Q;
   not MGM_BG_0( MGM_EN0, G );
   or MGM_BG_1( MGM_D0, EN, TEN );
   UDP_saed14rvt_tt0p8v25c_MGM_IQ_LATCH_UDP( IQ, 1'b0, 1'b0, MGM_EN0, MGM_D0 );
   buf MGM_BG_2( Q, IQ );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_LDNQOR2_4_func( G, Q, TEN, EN );
   input EN, G, TEN;
   output Q;
   not MGM_BG_0( MGM_EN0, G );
   or MGM_BG_1( MGM_D0, EN, TEN );
   UDP_saed14rvt_tt0p8v25c_MGM_IQ_LATCH_UDP( IQ, 1'b0, 1'b0, MGM_EN0, MGM_D0 );
   buf MGM_BG_2( Q, IQ );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_LDNQ_1_func( Q, G, D );
   input D, G;
   output Q;
   not MGM_BG_0( MGM_EN0, G );
   UDP_saed14rvt_tt0p8v25c_MGM_IQ_LATCH_UDP( IQ, 1'b0, 1'b0, MGM_EN0, D );
   buf MGM_BG_1( Q, IQ );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_LDNQ_2_func( Q, G, D );
   input D, G;
   output Q;
   not MGM_BG_0( MGM_EN0, G );
   UDP_saed14rvt_tt0p8v25c_MGM_IQ_LATCH_UDP( IQ, 1'b0, 1'b0, MGM_EN0, D );
   buf MGM_BG_1( Q, IQ );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_LDNQ_3_func( Q, G, D );
   input D, G;
   output Q;
   not MGM_BG_0( MGM_EN0, G );
   UDP_saed14rvt_tt0p8v25c_MGM_IQ_LATCH_UDP( IQ, 1'b0, 1'b0, MGM_EN0, D );
   buf MGM_BG_1( Q, IQ );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_LDNQ_4_func( Q, G, D );
   input D, G;
   output Q;
   not MGM_BG_0( MGM_EN0, G );
   UDP_saed14rvt_tt0p8v25c_MGM_IQ_LATCH_UDP( IQ, 1'b0, 1'b0, MGM_EN0, D );
   buf MGM_BG_1( Q, IQ );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_LDNQ_5_func( Q, G, D );
   input D, G;
   output Q;
   not MGM_BG_0( MGM_EN0, G );
   UDP_saed14rvt_tt0p8v25c_MGM_IQ_LATCH_UDP( IQ, 1'b0, 1'b0, MGM_EN0, D );
   buf MGM_BG_1( Q, IQ );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_LDNQ_6_func( Q, G, D );
   input D, G;
   output Q;
   not MGM_BG_0( MGM_EN0, G );
   UDP_saed14rvt_tt0p8v25c_MGM_IQ_LATCH_UDP( IQ, 1'b0, 1'b0, MGM_EN0, D );
   buf MGM_BG_1( Q, IQ );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_LDNQ_8_func( Q, G, D );
   input D, G;
   output Q;
   not MGM_BG_0( MGM_EN0, G );
   UDP_saed14rvt_tt0p8v25c_MGM_IQ_LATCH_UDP( IQ, 1'b0, 1'b0, MGM_EN0, D );
   buf MGM_BG_1( Q, IQ );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_LDNQ_U_0P5_func( Q, G, D );
   input D, G;
   output Q;
   not MGM_BG_0( MGM_EN0, G );
   UDP_saed14rvt_tt0p8v25c_MGM_IQ_LATCH_UDP( IQ, 1'b0, 1'b0, MGM_EN0, D );
   buf MGM_BG_1( Q, IQ );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_LDNQ_V1_1_func( Q, G, D );
   input D, G;
   output Q;
   not MGM_BG_0( MGM_EN0, G );
   UDP_saed14rvt_tt0p8v25c_MGM_IQ_LATCH_UDP( IQ, 1'b0, 1'b0, MGM_EN0, D );
   buf MGM_BG_1( Q, IQ );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_LDNQ_V1_2_func( Q, G, D );
   input D, G;
   output Q;
   not MGM_BG_0( MGM_EN0, G );
   UDP_saed14rvt_tt0p8v25c_MGM_IQ_LATCH_UDP( IQ, 1'b0, 1'b0, MGM_EN0, D );
   buf MGM_BG_1( Q, IQ );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_LDNQ_V1_4_func( Q, G, D );
   input D, G;
   output Q;
   not MGM_BG_0( MGM_EN0, G );
   UDP_saed14rvt_tt0p8v25c_MGM_IQ_LATCH_UDP( IQ, 1'b0, 1'b0, MGM_EN0, D );
   buf MGM_BG_1( Q, IQ );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_LDNR2PQ_1_func( Q, G, EN, SE );
   input EN, G, SE;
   output Q;
   not MGM_BG_0( MGM_EN0, G );
   or MGM_BG_1( MGM_D0, EN, SE );
   UDP_saed14rvt_tt0p8v25c_MGM_IQ_LATCH_UDP( IQ, 1'b0, 1'b0, MGM_EN0, MGM_D0 );
   buf MGM_BG_2( Q, IQ );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_LDNR2PQ_2_func( Q, G, EN, SE );
   input EN, G, SE;
   output Q;
   not MGM_BG_0( MGM_EN0, G );
   or MGM_BG_1( MGM_D0, EN, SE );
   UDP_saed14rvt_tt0p8v25c_MGM_IQ_LATCH_UDP( IQ, 1'b0, 1'b0, MGM_EN0, MGM_D0 );
   buf MGM_BG_2( Q, IQ );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_LDNR2PQ_4_func( Q, G, EN, SE );
   input EN, G, SE;
   output Q;
   not MGM_BG_0( MGM_EN0, G );
   or MGM_BG_1( MGM_D0, EN, SE );
   UDP_saed14rvt_tt0p8v25c_MGM_IQ_LATCH_UDP( IQ, 1'b0, 1'b0, MGM_EN0, MGM_D0 );
   buf MGM_BG_2( Q, IQ );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_LDNRBQ_V2_0P5_func( Q, G, D, RD );
   input D, G, RD;
   output Q;
   not MGM_BG_0( MGM_EN0, G );
   not MGM_BG_1( MGM_C0, RD );
   UDP_saed14rvt_tt0p8v25c_MGM_IQ_LATCH_UDP( IQ, MGM_C0, 1'b0, MGM_EN0, D );
   buf MGM_BG_2( Q, IQ );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_LDNRBQ_V2_1_func( Q, G, D, RD );
   input D, G, RD;
   output Q;
   not MGM_BG_0( MGM_EN0, G );
   not MGM_BG_1( MGM_C0, RD );
   UDP_saed14rvt_tt0p8v25c_MGM_IQ_LATCH_UDP( IQ, MGM_C0, 1'b0, MGM_EN0, D );
   buf MGM_BG_2( Q, IQ );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_LDNRBQ_V2_2_func( Q, G, D, RD );
   input D, G, RD;
   output Q;
   not MGM_BG_0( MGM_EN0, G );
   not MGM_BG_1( MGM_C0, RD );
   UDP_saed14rvt_tt0p8v25c_MGM_IQ_LATCH_UDP( IQ, MGM_C0, 1'b0, MGM_EN0, D );
   buf MGM_BG_2( Q, IQ );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_LDNRBQ_V2_4_func( Q, G, D, RD );
   input D, G, RD;
   output Q;
   not MGM_BG_0( MGM_EN0, G );
   not MGM_BG_1( MGM_C0, RD );
   UDP_saed14rvt_tt0p8v25c_MGM_IQ_LATCH_UDP( IQ, MGM_C0, 1'b0, MGM_EN0, D );
   buf MGM_BG_2( Q, IQ );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_LDOR2PQ_1_func( Q, G, EN, SE );
   input EN, G, SE;
   output Q;
   or MGM_BG_0( MGM_D0, EN, SE );
   UDP_saed14rvt_tt0p8v25c_MGM_IQ_LATCH_UDP( IQ, 1'b0, 1'b0, G, MGM_D0 );
   buf MGM_BG_1( Q, IQ );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_LDOR2PQ_2_func( Q, G, EN, SE );
   input EN, G, SE;
   output Q;
   or MGM_BG_0( MGM_D0, EN, SE );
   UDP_saed14rvt_tt0p8v25c_MGM_IQ_LATCH_UDP( IQ, 1'b0, 1'b0, G, MGM_D0 );
   buf MGM_BG_1( Q, IQ );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_LDOR2PQ_4_func( Q, G, EN, SE );
   input EN, G, SE;
   output Q;
   or MGM_BG_0( MGM_D0, EN, SE );
   UDP_saed14rvt_tt0p8v25c_MGM_IQ_LATCH_UDP( IQ, 1'b0, 1'b0, G, MGM_D0 );
   buf MGM_BG_1( Q, IQ );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_LDPQ_1_func( Q, G, D );
   input D, G;
   output Q;
   UDP_saed14rvt_tt0p8v25c_MGM_IQ_LATCH_UDP( IQ, 1'b0, 1'b0, G, D );
   buf MGM_BG_0( Q, IQ );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_LDPQ_2_func( Q, G, D );
   input D, G;
   output Q;
   UDP_saed14rvt_tt0p8v25c_MGM_IQ_LATCH_UDP( IQ, 1'b0, 1'b0, G, D );
   buf MGM_BG_0( Q, IQ );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_LDPQ_3_func( Q, G, D );
   input D, G;
   output Q;
   UDP_saed14rvt_tt0p8v25c_MGM_IQ_LATCH_UDP( IQ, 1'b0, 1'b0, G, D );
   buf MGM_BG_0( Q, IQ );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_LDPQ_4_func( Q, G, D );
   input D, G;
   output Q;
   UDP_saed14rvt_tt0p8v25c_MGM_IQ_LATCH_UDP( IQ, 1'b0, 1'b0, G, D );
   buf MGM_BG_0( Q, IQ );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_LDPQ_5_func( Q, G, D );
   input D, G;
   output Q;
   UDP_saed14rvt_tt0p8v25c_MGM_IQ_LATCH_UDP( IQ, 1'b0, 1'b0, G, D );
   buf MGM_BG_0( Q, IQ );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_LDPQ_6_func( Q, G, D );
   input D, G;
   output Q;
   UDP_saed14rvt_tt0p8v25c_MGM_IQ_LATCH_UDP( IQ, 1'b0, 1'b0, G, D );
   buf MGM_BG_0( Q, IQ );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_LDPQ_8_func( Q, G, D );
   input D, G;
   output Q;
   UDP_saed14rvt_tt0p8v25c_MGM_IQ_LATCH_UDP( IQ, 1'b0, 1'b0, G, D );
   buf MGM_BG_0( Q, IQ );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_LDPQ_ECO_1_func( Q, G, D );
   input D, G;
   output Q;
   UDP_saed14rvt_tt0p8v25c_MGM_IQ_LATCH_UDP( IQ, 1'b0, 1'b0, G, D );
   buf MGM_BG_0( Q, IQ );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_LDPQ_U_0P5_func( Q, G, D );
   input D, G;
   output Q;
   UDP_saed14rvt_tt0p8v25c_MGM_IQ_LATCH_UDP( IQ, 1'b0, 1'b0, G, D );
   buf MGM_BG_0( Q, IQ );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_LDPQ_V1_1_func( Q, G, D );
   input D, G;
   output Q;
   UDP_saed14rvt_tt0p8v25c_MGM_IQ_LATCH_UDP( IQ, 1'b0, 1'b0, G, D );
   buf MGM_BG_0( Q, IQ );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_LDPQ_V1_2_func( Q, G, D );
   input D, G;
   output Q;
   UDP_saed14rvt_tt0p8v25c_MGM_IQ_LATCH_UDP( IQ, 1'b0, 1'b0, G, D );
   buf MGM_BG_0( Q, IQ );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_LDPQ_V1_4_func( Q, G, D );
   input D, G;
   output Q;
   UDP_saed14rvt_tt0p8v25c_MGM_IQ_LATCH_UDP( IQ, 1'b0, 1'b0, G, D );
   buf MGM_BG_0( Q, IQ );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_LDPRSQB_1_func( QN, G, D, RD, SD );
   input D, G, RD, SD;
   output QN;
   buf MGM_BG_0( QN, IQN );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_LDPSBQ_V2_0P5_func( Q, G, D, SD );
   input D, G, SD;
   output Q;
   not MGM_BG_0( MGM_P0, SD );
   UDP_saed14rvt_tt0p8v25c_MGM_IQ_LATCH_UDP( IQ, 1'b0, MGM_P0, G, D );
   buf MGM_BG_1( Q, IQ );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_LDPSBQ_V2_1_func( Q, G, D, SD );
   input D, G, SD;
   output Q;
   not MGM_BG_0( MGM_P0, SD );
   UDP_saed14rvt_tt0p8v25c_MGM_IQ_LATCH_UDP( IQ, 1'b0, MGM_P0, G, D );
   buf MGM_BG_1( Q, IQ );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_LDPSBQ_V2_2_func( Q, G, D, SD );
   input D, G, SD;
   output Q;
   not MGM_BG_0( MGM_P0, SD );
   UDP_saed14rvt_tt0p8v25c_MGM_IQ_LATCH_UDP( IQ, 1'b0, MGM_P0, G, D );
   buf MGM_BG_1( Q, IQ );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_LDPSBQ_V2_4_func( Q, G, D, SD );
   input D, G, SD;
   output Q;
   not MGM_BG_0( MGM_P0, SD );
   UDP_saed14rvt_tt0p8v25c_MGM_IQ_LATCH_UDP( IQ, 1'b0, MGM_P0, G, D );
   buf MGM_BG_1( Q, IQ );

endmodule
`endcelldefine

//****************************************************************************//
// Verilog models generated by SiliconSmart M-2017.03-SP3 build date: Aug 22, 2017 15:59:14. (SMSC-2) //
// Siliconsmart Path: /global/apps/siliconsmart_2017.03-SP3/linux64/bin/siliconsmart //
// Host Name: am04dwamd076.internal.synopsys.com, User Name: baskovch, PID: 25338  //
// Directory: /remote/saed/meruzha/CHAR/lvl/dlvl/rvt/processes/tt0p8v25c_i0p8v/siliconsmart/simulation_dlvl //
//                                                                            //
// File generated on Sat Nov 04 19:11:48 AMT 2017. (SMSC-3)                   //
//****************************************************************************//


 



`celldefine
module SAEDRVT14_LVLDBUFE0_IY2V1_1_func( X, A, EN );
   input A, EN;
   output X;
   and MGM_BG_0( X, A, EN );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_LVLDBUFE0_IY2V1_10_func( X, A, EN );
   input A, EN;
   output X;
   and MGM_BG_0( X, A, EN );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_LVLDBUFE0_IY2V1_12_func( X, A, EN );
   input A, EN;
   output X;
   and MGM_BG_0( X, A, EN );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_LVLDBUFE0_IY2V1_2_func( X, A, EN );
   input A, EN;
   output X;
   and MGM_BG_0( X, A, EN );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_LVLDBUFE0_IY2V1_3_func( X, A, EN );
   input A, EN;
   output X;
   and MGM_BG_0( X, A, EN );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_LVLDBUFE0_IY2V1_4_func( X, A, EN );
   input A, EN;
   output X;
   and MGM_BG_0( X, A, EN );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_LVLDBUFE0_IY2V1_6_func( X, A, EN );
   input A, EN;
   output X;
   and MGM_BG_0( X, A, EN );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_LVLDBUFE0_IY2V1_8_func( X, A, EN );
   input A, EN;
   output X;
   and MGM_BG_0( X, A, EN );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_LVLDBUFE0_IY2_1_func( X, A, EN );
   input A, EN;
   output X;
   and MGM_BG_0( X, A, EN );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_LVLDBUFE0_IY2_10_func( X, A, EN );
   input A, EN;
   output X;
   and MGM_BG_0( X, A, EN );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_LVLDBUFE0_IY2_12_func( X, A, EN );
   input A, EN;
   output X;
   and MGM_BG_0( X, A, EN );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_LVLDBUFE0_IY2_2_func( X, A, EN );
   input A, EN;
   output X;
   and MGM_BG_0( X, A, EN );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_LVLDBUFE0_IY2_3_func( X, A, EN );
   input A, EN;
   output X;
   and MGM_BG_0( X, A, EN );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_LVLDBUFE0_IY2_4_func( X, A, EN );
   input A, EN;
   output X;
   and MGM_BG_0( X, A, EN );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_LVLDBUFE0_IY2_6_func( X, A, EN );
   input A, EN;
   output X;
   and MGM_BG_0( X, A, EN );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_LVLDBUFE1_IY2V1_1_func( X, A, EN );
   input A, EN;
   output X;
   wire EN_inv_for_SAEDRVT14_LVLDBUFE1_IY2V1_1;
   not MGM_BG_0( EN_inv_for_SAEDRVT14_LVLDBUFE1_IY2V1_1, EN );
   or MGM_BG_1( X, A, EN_inv_for_SAEDRVT14_LVLDBUFE1_IY2V1_1 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_LVLDBUFE1_IY2V1_10_func( X, A, EN );
   input A, EN;
   output X;
   wire EN_inv_for_SAEDRVT14_LVLDBUFE1_IY2V1_10;
   not MGM_BG_0( EN_inv_for_SAEDRVT14_LVLDBUFE1_IY2V1_10, EN );
   or MGM_BG_1( X, A, EN_inv_for_SAEDRVT14_LVLDBUFE1_IY2V1_10 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_LVLDBUFE1_IY2V1_12_func( X, A, EN );
   input A, EN;
   output X;
   wire EN_inv_for_SAEDRVT14_LVLDBUFE1_IY2V1_12;
   not MGM_BG_0( EN_inv_for_SAEDRVT14_LVLDBUFE1_IY2V1_12, EN );
   or MGM_BG_1( X, A, EN_inv_for_SAEDRVT14_LVLDBUFE1_IY2V1_12 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_LVLDBUFE1_IY2V1_2_func( X, A, EN );
   input A, EN;
   output X;
   wire EN_inv_for_SAEDRVT14_LVLDBUFE1_IY2V1_2;
   not MGM_BG_0( EN_inv_for_SAEDRVT14_LVLDBUFE1_IY2V1_2, EN );
   or MGM_BG_1( X, A, EN_inv_for_SAEDRVT14_LVLDBUFE1_IY2V1_2 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_LVLDBUFE1_IY2V1_3_func( X, A, EN );
   input A, EN;
   output X;
   wire EN_inv_for_SAEDRVT14_LVLDBUFE1_IY2V1_3;
   not MGM_BG_0( EN_inv_for_SAEDRVT14_LVLDBUFE1_IY2V1_3, EN );
   or MGM_BG_1( X, A, EN_inv_for_SAEDRVT14_LVLDBUFE1_IY2V1_3 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_LVLDBUFE1_IY2V1_4_func( X, A, EN );
   input A, EN;
   output X;
   wire EN_inv_for_SAEDRVT14_LVLDBUFE1_IY2V1_4;
   not MGM_BG_0( EN_inv_for_SAEDRVT14_LVLDBUFE1_IY2V1_4, EN );
   or MGM_BG_1( X, A, EN_inv_for_SAEDRVT14_LVLDBUFE1_IY2V1_4 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_LVLDBUFE1_IY2V1_6_func( X, A, EN );
   input A, EN;
   output X;
   wire EN_inv_for_SAEDRVT14_LVLDBUFE1_IY2V1_6;
   not MGM_BG_0( EN_inv_for_SAEDRVT14_LVLDBUFE1_IY2V1_6, EN );
   or MGM_BG_1( X, A, EN_inv_for_SAEDRVT14_LVLDBUFE1_IY2V1_6 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_LVLDBUFE1_IY2V1_8_func( X, A, EN );
   input A, EN;
   output X;
   wire EN_inv_for_SAEDRVT14_LVLDBUFE1_IY2V1_8;
   not MGM_BG_0( EN_inv_for_SAEDRVT14_LVLDBUFE1_IY2V1_8, EN );
   or MGM_BG_1( X, A, EN_inv_for_SAEDRVT14_LVLDBUFE1_IY2V1_8 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_LVLDBUFE1_IY2_1_func( X, A, EN );
   input A, EN;
   output X;
   wire EN_inv_for_SAEDRVT14_LVLDBUFE1_IY2_1;
   not MGM_BG_0( EN_inv_for_SAEDRVT14_LVLDBUFE1_IY2_1, EN );
   or MGM_BG_1( X, A, EN_inv_for_SAEDRVT14_LVLDBUFE1_IY2_1 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_LVLDBUFE1_IY2_10_func( X, A, EN );
   input A, EN;
   output X;
   wire EN_inv_for_SAEDRVT14_LVLDBUFE1_IY2_10;
   not MGM_BG_0( EN_inv_for_SAEDRVT14_LVLDBUFE1_IY2_10, EN );
   or MGM_BG_1( X, A, EN_inv_for_SAEDRVT14_LVLDBUFE1_IY2_10 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_LVLDBUFE1_IY2_12_func( X, A, EN );
   input A, EN;
   output X;
   wire EN_inv_for_SAEDRVT14_LVLDBUFE1_IY2_12;
   not MGM_BG_0( EN_inv_for_SAEDRVT14_LVLDBUFE1_IY2_12, EN );
   or MGM_BG_1( X, A, EN_inv_for_SAEDRVT14_LVLDBUFE1_IY2_12 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_LVLDBUFE1_IY2_2_func( X, A, EN );
   input A, EN;
   output X;
   wire EN_inv_for_SAEDRVT14_LVLDBUFE1_IY2_2;
   not MGM_BG_0( EN_inv_for_SAEDRVT14_LVLDBUFE1_IY2_2, EN );
   or MGM_BG_1( X, A, EN_inv_for_SAEDRVT14_LVLDBUFE1_IY2_2 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_LVLDBUFE1_IY2_4_func( X, A, EN );
   input A, EN;
   output X;
   wire EN_inv_for_SAEDRVT14_LVLDBUFE1_IY2_4;
   not MGM_BG_0( EN_inv_for_SAEDRVT14_LVLDBUFE1_IY2_4, EN );
   or MGM_BG_1( X, A, EN_inv_for_SAEDRVT14_LVLDBUFE1_IY2_4 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_LVLDBUFE1_IY2_6_func( X, A, EN );
   input A, EN;
   output X;
   wire EN_inv_for_SAEDRVT14_LVLDBUFE1_IY2_6;
   not MGM_BG_0( EN_inv_for_SAEDRVT14_LVLDBUFE1_IY2_6, EN );
   or MGM_BG_1( X, A, EN_inv_for_SAEDRVT14_LVLDBUFE1_IY2_6 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_LVLDBUFE1_IY2_8_func( X, A, EN );
   input A, EN;
   output X;
   wire EN_inv_for_SAEDRVT14_LVLDBUFE1_IY2_8;
   not MGM_BG_0( EN_inv_for_SAEDRVT14_LVLDBUFE1_IY2_8, EN );
   or MGM_BG_1( X, A, EN_inv_for_SAEDRVT14_LVLDBUFE1_IY2_8 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_LVLDBUF_IY2V1_1_func( X, A );
   input A;
   output X;
   buf MGM_BG_0( X, A );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_LVLDBUF_IY2V1_10_func( X, A );
   input A;
   output X;
   buf MGM_BG_0( X, A );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_LVLDBUF_IY2V1_12_func( X, A );
   input A;
   output X;
   buf MGM_BG_0( X, A );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_LVLDBUF_IY2V1_2_func( X, A );
   input A;
   output X;
   buf MGM_BG_0( X, A );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_LVLDBUF_IY2V1_3_func( X, A );
   input A;
   output X;
   buf MGM_BG_0( X, A );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_LVLDBUF_IY2V1_4_func( X, A );
   input A;
   output X;
   buf MGM_BG_0( X, A );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_LVLDBUF_IY2V1_6_func( X, A );
   input A;
   output X;
   buf MGM_BG_0( X, A );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_LVLDBUF_IY2V1_8_func( X, A );
   input A;
   output X;
   buf MGM_BG_0( X, A );

endmodule
`endcelldefine

`celldefine
module SAEDRVT14_AN2B_PMM_2_func( X, A, B );
   input A, B;
   output X;
   wire A_inv_for_SAEDRVT14_AN2B_PMM_2;
   not MGM_BG_0( A_inv_for_SAEDRVT14_AN2B_PMM_2, A );
   and MGM_BG_1( X, A_inv_for_SAEDRVT14_AN2B_PMM_2, B );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_AN2B_PMM_8_func( X, A, B );
   input A, B;
   output X;
   wire A_inv_for_SAEDRVT14_AN2B_PMM_8;
   not MGM_BG_0( A_inv_for_SAEDRVT14_AN2B_PMM_8, A );
   and MGM_BG_1( X, A_inv_for_SAEDRVT14_AN2B_PMM_8, B );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_AN2B_PSECO_1_func( X, A, B );
   input A, B;
   output X;
   wire A_inv_for_SAEDRVT14_AN2B_PSECO_1;
   not MGM_BG_0( A_inv_for_SAEDRVT14_AN2B_PSECO_1, A );
   and MGM_BG_1( X, A_inv_for_SAEDRVT14_AN2B_PSECO_1, B );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_AN2B_PSECO_2_func( X, A, B );
   input A, B;
   output X;
   wire A_inv_for_SAEDRVT14_AN2B_PSECO_2;
   not MGM_BG_0( A_inv_for_SAEDRVT14_AN2B_PSECO_2, A );
   and MGM_BG_1( X, A_inv_for_SAEDRVT14_AN2B_PSECO_2, B );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_AN2B_PSECO_4_func( X, A, B );
   input A, B;
   output X;
   wire A_inv_for_SAEDRVT14_AN2B_PSECO_4;
   not MGM_BG_0( A_inv_for_SAEDRVT14_AN2B_PSECO_4, A );
   and MGM_BG_1( X, A_inv_for_SAEDRVT14_AN2B_PSECO_4, B );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_AN2B_PSECO_8_func( X, A, B );
   input A, B;
   output X;
   wire A_inv_for_SAEDRVT14_AN2B_PSECO_8;
   not MGM_BG_0( A_inv_for_SAEDRVT14_AN2B_PSECO_8, A );
   and MGM_BG_1( X, A_inv_for_SAEDRVT14_AN2B_PSECO_8, B );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_BUF_PECO_1_func( X, A );
   input A;
   output X;
   buf MGM_BG_0( X, A );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_BUF_PECO_12_func( X, A );
   input A;
   output X;
   buf MGM_BG_0( X, A );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_BUF_PECO_2_func( X, A );
   input A;
   output X;
   buf MGM_BG_0( X, A );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_BUF_PECO_4_func( X, A );
   input A;
   output X;
   buf MGM_BG_0( X, A );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_BUF_PECO_8_func( X, A );
   input A;
   output X;
   buf MGM_BG_0( X, A );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_BUF_PS_0P75_func( X, A );
   input A;
   output X;
   buf MGM_BG_0( X, A );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_BUF_PS_1P5_func( X, A );
   input A;
   output X;
   buf MGM_BG_0( X, A );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_BUF_PS_3_func( X, A );
   input A;
   output X;
   buf MGM_BG_0( X, A );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_BUF_PS_6_func( X, A );
   input A;
   output X;
   buf MGM_BG_0( X, A );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_DEL_PR2V2_1_func( X, A );
   input A;
   output X;
   buf MGM_BG_0( X, A );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_INV_PECO_1_func( X, A );
   input A;
   output X;
   not MGM_BG_0( X, A );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_INV_PECO_12_func( X, A );
   input A;
   output X;
   not MGM_BG_0( X, A );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_INV_PECO_2_func( X, A );
   input A;
   output X;
   not MGM_BG_0( X, A );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_INV_PECO_4_func( X, A );
   input A;
   output X;
   not MGM_BG_0( X, A );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_INV_PECO_8_func( X, A );
   input A;
   output X;
   not MGM_BG_0( X, A );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_INV_PS_1_func( X, A );
   input A;
   output X;
   not MGM_BG_0( X, A );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_INV_PS_2_func( X, A );
   input A;
   output X;
   not MGM_BG_0( X, A );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_INV_PS_3_func( X, A );
   input A;
   output X;
   not MGM_BG_0( X, A );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_INV_PS_6_func( X, A );
   input A;
   output X;
   not MGM_BG_0( X, A );

endmodule
`endcelldefine


primitive UDP_saed14rvt_tt0p8v25c_MGM_IQ_FF_UDP( Q, C, P, CK, D );
output Q;
reg Q;
input C, P, CK, D; 
table 
//C  P CK  D   :  Q  :  Q 
  0  0  n  ?  :  ?  :  -;
  ?  0  r  0  :  ?  :  0;
  ?  0  p  0  :  0  :  0;
  1  0  ?  ?  :  ?  :  0;
  0  ?  r  1  :  ?  :  1;
  0  ?  p  1  :  1  :  1;
  0  1  ?  ?  :  ?  :  1;
  0  0  ?  *  :  ?  :  -;
  0  n  ?  ?  :  ?  :  -;
  n  0  ?  ?  :  ?  :  -;
  0  p  ?  ?  :  ?  :  -;

endtable
endprimitive


`celldefine
module SAEDRVT14_ISOFSDPQ_PECO_4_func( Q, CK, D, SI, SE, ISON );
   input CK, D, ISON, SE, SI;
   output Q;
   wire ISON_inv_for_SAEDRVT14_ISOFSDPQ_PECO_4;
   not MGM_BG_0( ISON_inv_for_SAEDRVT14_ISOFSDPQ_PECO_4, ISON );
   wire MGM_D0_row1;
   and MGM_BG_1( MGM_D0_row1, ISON_inv_for_SAEDRVT14_ISOFSDPQ_PECO_4, D );
   wire SE_inv_for_SAEDRVT14_ISOFSDPQ_PECO_4;
   not MGM_BG_2( SE_inv_for_SAEDRVT14_ISOFSDPQ_PECO_4, SE );
   wire MGM_D0_row2;
   and MGM_BG_3( MGM_D0_row2, SE_inv_for_SAEDRVT14_ISOFSDPQ_PECO_4, D );
   wire MGM_D0_row3;
   and MGM_BG_4( MGM_D0_row3, D, SI );
   wire MGM_D0_row4;
   and MGM_BG_5( MGM_D0_row4, ISON, SE, SI );
   or MGM_BG_6( MGM_D0, MGM_D0_row1, MGM_D0_row2, MGM_D0_row3, MGM_D0_row4 );
   UDP_saed14rvt_tt0p8v25c_MGM_IQ_FF_UDP( IQ, 1'b0, 1'b0, CK, MGM_D0 );
   buf MGM_BG_7( Q, IQ );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_ISOFSDPQ_PECO_8_func( Q, CK, D, SI, SE, ISON );
   input CK, D, ISON, SE, SI;
   output Q;
   wire ISON_inv_for_SAEDRVT14_ISOFSDPQ_PECO_8;
   not MGM_BG_0( ISON_inv_for_SAEDRVT14_ISOFSDPQ_PECO_8, ISON );
   wire MGM_D0_row1;
   and MGM_BG_1( MGM_D0_row1, ISON_inv_for_SAEDRVT14_ISOFSDPQ_PECO_8, D );
   wire SE_inv_for_SAEDRVT14_ISOFSDPQ_PECO_8;
   not MGM_BG_2( SE_inv_for_SAEDRVT14_ISOFSDPQ_PECO_8, SE );
   wire MGM_D0_row2;
   and MGM_BG_3( MGM_D0_row2, SE_inv_for_SAEDRVT14_ISOFSDPQ_PECO_8, D );
   wire MGM_D0_row3;
   and MGM_BG_4( MGM_D0_row3, D, SI );
   wire MGM_D0_row4;
   and MGM_BG_5( MGM_D0_row4, ISON, SE, SI );
   or MGM_BG_6( MGM_D0, MGM_D0_row1, MGM_D0_row2, MGM_D0_row3, MGM_D0_row4 );
   UDP_saed14rvt_tt0p8v25c_MGM_IQ_FF_UDP( IQ, 1'b0, 1'b0, CK, MGM_D0 );
   buf MGM_BG_7( Q, IQ );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_ISOS0CL1_PECO_1_func( X, A, EN0 );
   input A, EN0;
   output X;
   or MGM_BG_0( X, A, EN0 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_ISOS0CL1_PECO_2_func( X, A, EN0 );
   input A, EN0;
   output X;
   or MGM_BG_0( X, A, EN0 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_ISOS0CL1_PECO_4_func( X, A, EN0 );
   input A, EN0;
   output X;
   or MGM_BG_0( X, A, EN0 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_ISOS0CL1_PECO_8_func( X, A, EN0 );
   input A, EN0;
   output X;
   or MGM_BG_0( X, A, EN0 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_ISOS0CL1_P_2_func( X, A, EN0 );
   input A, EN0;
   output X;
   or MGM_BG_0( X, A, EN0 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_ISOS0CL1_P_8_func( X, A, EN0 );
   input A, EN0;
   output X;
   or MGM_BG_0( X, A, EN0 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_ISOS1CL0_PECO_1_func( X, A, EN );
   input A, EN;
   output X;
   and MGM_BG_0( X, A, EN );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_ISOS1CL0_PECO_2_func( X, A, EN );
   input A, EN;
   output X;
   and MGM_BG_0( X, A, EN );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_ISOS1CL0_PECO_4_func( X, A, EN );
   input A, EN;
   output X;
   and MGM_BG_0( X, A, EN );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_ISOS1CL0_PECO_8_func( X, A, EN );
   input A, EN;
   output X;
   and MGM_BG_0( X, A, EN );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_ISOS1CL0_P_2_func( X, A, EN );
   input A, EN;
   output X;
   and MGM_BG_0( X, A, EN );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_ISOS1CL0_P_8_func( X, A, EN );
   input A, EN;
   output X;
   and MGM_BG_0( X, A, EN );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_OR2B_PMM_2_func( X, A, B );
   input A, B;
   output X;
   wire A_inv_for_SAEDRVT14_OR2B_PMM_2;
   not MGM_BG_0( A_inv_for_SAEDRVT14_OR2B_PMM_2, A );
   or MGM_BG_1( X, A_inv_for_SAEDRVT14_OR2B_PMM_2, B );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_OR2B_PMM_8_func( X, A, B );
   input A, B;
   output X;
   wire A_inv_for_SAEDRVT14_OR2B_PMM_8;
   not MGM_BG_0( A_inv_for_SAEDRVT14_OR2B_PMM_8, A );
   or MGM_BG_1( X, A_inv_for_SAEDRVT14_OR2B_PMM_8, B );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_OR2B_PSECO_1_func( X, A, B );
   input A, B;
   output X;
   wire A_inv_for_SAEDRVT14_OR2B_PSECO_1;
   not MGM_BG_0( A_inv_for_SAEDRVT14_OR2B_PSECO_1, A );
   or MGM_BG_1( X, A_inv_for_SAEDRVT14_OR2B_PSECO_1, B );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_OR2B_PSECO_2_func( X, A, B );
   input A, B;
   output X;
   wire A_inv_for_SAEDRVT14_OR2B_PSECO_2;
   not MGM_BG_0( A_inv_for_SAEDRVT14_OR2B_PSECO_2, A );
   or MGM_BG_1( X, A_inv_for_SAEDRVT14_OR2B_PSECO_2, B );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_OR2B_PSECO_4_func( X, A, B );
   input A, B;
   output X;
   wire A_inv_for_SAEDRVT14_OR2B_PSECO_4;
   not MGM_BG_0( A_inv_for_SAEDRVT14_OR2B_PSECO_4, A );
   or MGM_BG_1( X, A_inv_for_SAEDRVT14_OR2B_PSECO_4, B );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_OR2B_PSECO_8_func( X, A, B );
   input A, B;
   output X;
   wire A_inv_for_SAEDRVT14_OR2B_PSECO_8;
   not MGM_BG_0( A_inv_for_SAEDRVT14_OR2B_PSECO_8, A );
   or MGM_BG_1( X, A_inv_for_SAEDRVT14_OR2B_PSECO_8, B );

endmodule
`endcelldefine

//****************************************************************************//
// Verilog models generated by SiliconSmart M-2017.03-SP3 build date: Aug 22, 2017 15:59:14. (SMSC-2) //
// Siliconsmart Path: /global/apps/siliconsmart_2017.03-SP3/linux64/bin/siliconsmart //
// Host Name: am04msemt030.internal.synopsys.com, User Name: meruzha, PID: 48441  //
// Directory: /remote/saed/meruzha/CHAR/rvt/processes_std/tt0p8v25c/siliconsmart/mbf //
//                                                                            //
// File generated on Tue Jul 17 15:27:51 +04 2018. (SMSC-3)                   //
//****************************************************************************//


 



`celldefine
module SAEDRVT14_AN2_ISO4_1_func( EN, CK0, CK1, CK2, CK3, X0, X1, X2, X3 );
   input CK0, CK1, CK2, CK3, EN;
   output X0, X1, X2, X3;
   and MGM_BG_0( X0, CK0, EN );
   and MGM_BG_1( X1, CK1, EN );
   and MGM_BG_2( X2, CK2, EN );
   and MGM_BG_3( X3, CK3, EN );

endmodule
`endcelldefine

`celldefine
module SAEDRVT14_AN2_ISO4_4_func( EN, CK0, CK1, CK2, CK3, X0, X1, X2, X3 );
   input CK0, CK1, CK2, CK3, EN;
   output X0, X1, X2, X3;
   and MGM_BG_0( X0, CK0, EN );
   and MGM_BG_1( X1, CK1, EN );
   and MGM_BG_2( X2, CK2, EN );
   and MGM_BG_3( X3, CK3, EN );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_AN2_ISO_1_func( X, CK, EN );
   input CK, EN;
   output X;
   and MGM_BG_0( X, CK, EN );

endmodule
`endcelldefine

`celldefine
module SAEDRVT14_AN2_ISO_4_func( X, CK, EN );
   input CK, EN;
   output X;
   and MGM_BG_0( X, CK, EN );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_AOBUF_IW_3_func( X, A );
   input A;
   output X;
   buf MGM_BG_0( X, A );

endmodule
`endcelldefine

`celldefine
module SAEDRVT14_AOBUF_IW_0P75_func( X, A );
   input A;
   output X;
   buf MGM_BG_0( X, A );

endmodule
`endcelldefine

`celldefine
module SAEDRVT14_AOBUF_IW_1P5_func( X, A );
   input A;
   output X;
   buf MGM_BG_0( X, A );

endmodule
`endcelldefine

`celldefine
module SAEDRVT14_AOBUF_IW_6_func( X, A );
   input A;
   output X;
   buf MGM_BG_0( X, A );

endmodule
`endcelldefine

`celldefine
module SAEDRVT14_AOINV_IW_1_func( X, A );
   input A;
   output X;
   not MGM_BG_0( X, A );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_AOINV_IW_0P5_func( X, A );
   input A;
   output X;
   not MGM_BG_0( X, A );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_AOINV_IW_2_func( X, A );
   input A;
   output X;
   not MGM_BG_0( X, A );

endmodule
`endcelldefine

`celldefine
module SAEDRVT14_AOINV_IW_4_func( X, A );
   input A;
   output X;
   not MGM_BG_0( X, A );

endmodule
`endcelldefine

`celldefine
module SAEDRVT14_AOINV_IW_6_func( X, A );
   input A;
   output X;
   not MGM_BG_0( X, A );

endmodule
`endcelldefine

primitive UDP_saed14rvt_tt0p8v25c_MGM_IQ_LATCH_UDP( Q, C, P, CK, D );
output Q;
reg Q;
input C, P, CK, D; 
table 
//C  P CK  D   :  Q  :  Q 
  0  0  0  *  :  ?  :  -;
  0  0  (?0)  ?  :  ?  :  -;
  0  (?0)  0  ?  :  ?  :  -;
  (?0)  0  0  ?  :  ?  :  -;
  ?  0  1  0  :  ?  :  0;
  ?  0  ?  (?0)  :  0  :  0;
  ?  (?0)  ?  0  :  0  :  0;
  1  0  ?  ?  :  ?  :  0;
  0  ?  1  1  :  ?  :  1;
  0  ?  ?  (?1)  :  1  :  1;
  (?0)  ?  ?  1  :  1  :  1;
  0  1  ?  ?  :  ?  :  1;

endtable
endprimitive


primitive UDP_saed14rvt_tt0p8v25c_MGM_IQ_FF_UDP( Q, C, P, CK, D );
output Q;
reg Q;
input C, P, CK, D; 
table 
//C  P CK  D   :  Q  :  Q 
  0  0  n  ?  :  ?  :  -;
  ?  0  r  0  :  ?  :  0;
  ?  0  p  0  :  0  :  0;
  1  0  ?  ?  :  ?  :  0;
  0  ?  r  1  :  ?  :  1;
  0  ?  p  1  :  1  :  1;
  0  1  ?  ?  :  ?  :  1;
  0  0  ?  *  :  ?  :  -;
  0  n  ?  ?  :  ?  :  -;
  n  0  ?  ?  :  ?  :  -;
  0  p  ?  ?  :  ?  :  -;

endtable
endprimitive


`celldefine
module SAEDRVT14_FSB2BDPRBQ_PV2_1_func( Q, CK, D, SI, SE, RD, B1, B2B );
   input B1, B2B, CK, D, RD, SE, SI;
   output Q;
   UDP_saed14rvt_tt0p8v25c_MGM_IQ_LATCH_UDP( Q2, 1'b0, 1'b0, B1, INT );
   wire B2B_inv_for_SAEDRVT14_FSB2BDPRBQ_PV2_1;
   not MGM_BG_0( B2B_inv_for_SAEDRVT14_FSB2BDPRBQ_PV2_1, B2B );
   and MGM_BG_1( MGM_P1, B2B_inv_for_SAEDRVT14_FSB2BDPRBQ_PV2_1, INT2 );
   wire RD_inv_for_SAEDRVT14_FSB2BDPRBQ_PV2_1;
   not MGM_BG_2( RD_inv_for_SAEDRVT14_FSB2BDPRBQ_PV2_1, RD );
   wire MGM_C1_row1;
   and MGM_BG_3( MGM_C1_row1, RD_inv_for_SAEDRVT14_FSB2BDPRBQ_PV2_1, B2B );
   wire INT2_inv_for_SAEDRVT14_FSB2BDPRBQ_PV2_1;
   not MGM_BG_4( INT2_inv_for_SAEDRVT14_FSB2BDPRBQ_PV2_1, INT2 );
   wire MGM_C1_row2;
   and MGM_BG_5( MGM_C1_row2, B2B_inv_for_SAEDRVT14_FSB2BDPRBQ_PV2_1, INT2_inv_for_SAEDRVT14_FSB2BDPRBQ_PV2_1 );
   wire MGM_C1_row3;
   and MGM_BG_6( MGM_C1_row3, INT2_inv_for_SAEDRVT14_FSB2BDPRBQ_PV2_1, RD_inv_for_SAEDRVT14_FSB2BDPRBQ_PV2_1 );
   or MGM_BG_7( MGM_C1, MGM_C1_row1, MGM_C1_row2, MGM_C1_row3 );
   wire SE_inv_for_SAEDRVT14_FSB2BDPRBQ_PV2_1;
   not MGM_BG_8( SE_inv_for_SAEDRVT14_FSB2BDPRBQ_PV2_1, SE );
   wire MGM_D1_row1;
   and MGM_BG_9( MGM_D1_row1, SE_inv_for_SAEDRVT14_FSB2BDPRBQ_PV2_1, D );
   wire MGM_D1_row2;
   and MGM_BG_10( MGM_D1_row2, D, SI );
   wire MGM_D1_row3;
   and MGM_BG_11( MGM_D1_row3, SE, SI );
   or MGM_BG_12( MGM_D1, MGM_D1_row1, MGM_D1_row2, MGM_D1_row3 );
   UDP_saed14rvt_tt0p8v25c_MGM_IQ_FF_UDP( Q1, MGM_C1, MGM_P1, CK, MGM_D1 );
   buf MGM_BG_13( INT, Q1 );
   buf MGM_BG_14( INT2, Q2 );
   buf MGM_BG_15( Q, Q1 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_FSB2BDPRBQ_PV2_2_func( Q, CK, D, SI, SE, RD, B1, B2B );
   input B1, B2B, CK, D, RD, SE, SI;
   output Q;
   UDP_saed14rvt_tt0p8v25c_MGM_IQ_LATCH_UDP( Q2, 1'b0, 1'b0, B1, INT );
   wire B2B_inv_for_SAEDRVT14_FSB2BDPRBQ_PV2_1;
   not MGM_BG_0( B2B_inv_for_SAEDRVT14_FSB2BDPRBQ_PV2_1, B2B );
   and MGM_BG_1( MGM_P1, B2B_inv_for_SAEDRVT14_FSB2BDPRBQ_PV2_1, INT2 );
   wire RD_inv_for_SAEDRVT14_FSB2BDPRBQ_PV2_1;
   not MGM_BG_2( RD_inv_for_SAEDRVT14_FSB2BDPRBQ_PV2_1, RD );
   wire MGM_C1_row1;
   and MGM_BG_3( MGM_C1_row1, RD_inv_for_SAEDRVT14_FSB2BDPRBQ_PV2_1, B2B );
   wire INT2_inv_for_SAEDRVT14_FSB2BDPRBQ_PV2_1;
   not MGM_BG_4( INT2_inv_for_SAEDRVT14_FSB2BDPRBQ_PV2_1, INT2 );
   wire MGM_C1_row2;
   and MGM_BG_5( MGM_C1_row2, B2B_inv_for_SAEDRVT14_FSB2BDPRBQ_PV2_1, INT2_inv_for_SAEDRVT14_FSB2BDPRBQ_PV2_1 );
   wire MGM_C1_row3;
   and MGM_BG_6( MGM_C1_row3, INT2_inv_for_SAEDRVT14_FSB2BDPRBQ_PV2_1, RD_inv_for_SAEDRVT14_FSB2BDPRBQ_PV2_1 );
   or MGM_BG_7( MGM_C1, MGM_C1_row1, MGM_C1_row2, MGM_C1_row3 );
   wire SE_inv_for_SAEDRVT14_FSB2BDPRBQ_PV2_1;
   not MGM_BG_8( SE_inv_for_SAEDRVT14_FSB2BDPRBQ_PV2_1, SE );
   wire MGM_D1_row1;
   and MGM_BG_9( MGM_D1_row1, SE_inv_for_SAEDRVT14_FSB2BDPRBQ_PV2_1, D );
   wire MGM_D1_row2;
   and MGM_BG_10( MGM_D1_row2, D, SI );
   wire MGM_D1_row3;
   and MGM_BG_11( MGM_D1_row3, SE, SI );
   or MGM_BG_12( MGM_D1, MGM_D1_row1, MGM_D1_row2, MGM_D1_row3 );
   UDP_saed14rvt_tt0p8v25c_MGM_IQ_FF_UDP( Q1, MGM_C1, MGM_P1, CK, MGM_D1 );
   buf MGM_BG_13( INT, Q1 );
   buf MGM_BG_14( INT2, Q2 );
   buf MGM_BG_15( Q, Q1 );

endmodule
`endcelldefine

`celldefine
module SAEDRVT14_FSB2BDPRBQ_PV2_4_func( Q, CK, D, SI, SE, RD, B1, B2B );
   input B1, B2B, CK, D, RD, SE, SI;
   output Q;
   UDP_saed14rvt_tt0p8v25c_MGM_IQ_LATCH_UDP( Q2, 1'b0, 1'b0, B1, INT );
   wire B2B_inv_for_SAEDRVT14_FSB2BDPRBQ_PV2_1;
   not MGM_BG_0( B2B_inv_for_SAEDRVT14_FSB2BDPRBQ_PV2_1, B2B );
   and MGM_BG_1( MGM_P1, B2B_inv_for_SAEDRVT14_FSB2BDPRBQ_PV2_1, INT2 );
   wire RD_inv_for_SAEDRVT14_FSB2BDPRBQ_PV2_1;
   not MGM_BG_2( RD_inv_for_SAEDRVT14_FSB2BDPRBQ_PV2_1, RD );
   wire MGM_C1_row1;
   and MGM_BG_3( MGM_C1_row1, RD_inv_for_SAEDRVT14_FSB2BDPRBQ_PV2_1, B2B );
   wire INT2_inv_for_SAEDRVT14_FSB2BDPRBQ_PV2_1;
   not MGM_BG_4( INT2_inv_for_SAEDRVT14_FSB2BDPRBQ_PV2_1, INT2 );
   wire MGM_C1_row2;
   and MGM_BG_5( MGM_C1_row2, B2B_inv_for_SAEDRVT14_FSB2BDPRBQ_PV2_1, INT2_inv_for_SAEDRVT14_FSB2BDPRBQ_PV2_1 );
   wire MGM_C1_row3;
   and MGM_BG_6( MGM_C1_row3, INT2_inv_for_SAEDRVT14_FSB2BDPRBQ_PV2_1, RD_inv_for_SAEDRVT14_FSB2BDPRBQ_PV2_1 );
   or MGM_BG_7( MGM_C1, MGM_C1_row1, MGM_C1_row2, MGM_C1_row3 );
   wire SE_inv_for_SAEDRVT14_FSB2BDPRBQ_PV2_1;
   not MGM_BG_8( SE_inv_for_SAEDRVT14_FSB2BDPRBQ_PV2_1, SE );
   wire MGM_D1_row1;
   and MGM_BG_9( MGM_D1_row1, SE_inv_for_SAEDRVT14_FSB2BDPRBQ_PV2_1, D );
   wire MGM_D1_row2;
   and MGM_BG_10( MGM_D1_row2, D, SI );
   wire MGM_D1_row3;
   and MGM_BG_11( MGM_D1_row3, SE, SI );
   or MGM_BG_12( MGM_D1, MGM_D1_row1, MGM_D1_row2, MGM_D1_row3 );
   UDP_saed14rvt_tt0p8v25c_MGM_IQ_FF_UDP( Q1, MGM_C1, MGM_P1, CK, MGM_D1 );
   buf MGM_BG_13( INT, Q1 );
   buf MGM_BG_14( INT2, Q2 );
   buf MGM_BG_15( Q, Q1 );

endmodule
`endcelldefine

`celldefine
module SAEDRVT14_FSB2BDPRBQ_PV2_8_func( Q, CK, D, SI, SE, RD, B1, B2B );
   input B1, B2B, CK, D, RD, SE, SI;
   output Q;
   UDP_saed14rvt_tt0p8v25c_MGM_IQ_LATCH_UDP( Q2, 1'b0, 1'b0, B1, INT );
   wire B2B_inv_for_SAEDRVT14_FSB2BDPRBQ_PV2_1;
   not MGM_BG_0( B2B_inv_for_SAEDRVT14_FSB2BDPRBQ_PV2_1, B2B );
   and MGM_BG_1( MGM_P1, B2B_inv_for_SAEDRVT14_FSB2BDPRBQ_PV2_1, INT2 );
   wire RD_inv_for_SAEDRVT14_FSB2BDPRBQ_PV2_1;
   not MGM_BG_2( RD_inv_for_SAEDRVT14_FSB2BDPRBQ_PV2_1, RD );
   wire MGM_C1_row1;
   and MGM_BG_3( MGM_C1_row1, RD_inv_for_SAEDRVT14_FSB2BDPRBQ_PV2_1, B2B );
   wire INT2_inv_for_SAEDRVT14_FSB2BDPRBQ_PV2_1;
   not MGM_BG_4( INT2_inv_for_SAEDRVT14_FSB2BDPRBQ_PV2_1, INT2 );
   wire MGM_C1_row2;
   and MGM_BG_5( MGM_C1_row2, B2B_inv_for_SAEDRVT14_FSB2BDPRBQ_PV2_1, INT2_inv_for_SAEDRVT14_FSB2BDPRBQ_PV2_1 );
   wire MGM_C1_row3;
   and MGM_BG_6( MGM_C1_row3, INT2_inv_for_SAEDRVT14_FSB2BDPRBQ_PV2_1, RD_inv_for_SAEDRVT14_FSB2BDPRBQ_PV2_1 );
   or MGM_BG_7( MGM_C1, MGM_C1_row1, MGM_C1_row2, MGM_C1_row3 );
   wire SE_inv_for_SAEDRVT14_FSB2BDPRBQ_PV2_1;
   not MGM_BG_8( SE_inv_for_SAEDRVT14_FSB2BDPRBQ_PV2_1, SE );
   wire MGM_D1_row1;
   and MGM_BG_9( MGM_D1_row1, SE_inv_for_SAEDRVT14_FSB2BDPRBQ_PV2_1, D );
   wire MGM_D1_row2;
   and MGM_BG_10( MGM_D1_row2, D, SI );
   wire MGM_D1_row3;
   and MGM_BG_11( MGM_D1_row3, SE, SI );
   or MGM_BG_12( MGM_D1, MGM_D1_row1, MGM_D1_row2, MGM_D1_row3 );
   UDP_saed14rvt_tt0p8v25c_MGM_IQ_FF_UDP( Q1, MGM_C1, MGM_P1, CK, MGM_D1 );
   buf MGM_BG_13( INT, Q1 );
   buf MGM_BG_14( INT2, Q2 );
   buf MGM_BG_15( Q, Q1 );

endmodule
`endcelldefine

primitive UDP_saed14rvt_tt0p8v25c_MGM_IQN_FF_UDP( Q, C, P, CK, D );
output Q;
reg Q;
input C, P, CK, D; 
table 
//C  P CK  D   :  Q  :  Q 
  0  0  n  ?  :  ?  :  -;
  ?  0  r  0  :  ?  :  1;
  ?  0  p  0  :  1  :  1;
  1  0  ?  ?  :  ?  :  1;
  0  ?  r  1  :  ?  :  0;
  0  ?  p  1  :  0  :  0;
  0  1  ?  ?  :  ?  :  0;
  0  0  ?  *  :  ?  :  -;
  0  n  ?  ?  :  ?  :  -;
  n  0  ?  ?  :  ?  :  -;
  0  p  ?  ?  :  ?  :  -;

endtable
endprimitive


`celldefine
module SAEDRVT14_FSDN2_V2_1_func( CK, D0, D1, Q0, Q1, QN0, QN1, SE, SI );
   input CK, SE, SI, D0, D1;
   output Q0, Q1, QN0, QN1;
   not MGM_BG_0( MGM_CLK0, CK );
   wire SE_inv_for_SAEDRVT14_FSDN2_V2_1;
   not MGM_BG_1( SE_inv_for_SAEDRVT14_FSDN2_V2_1, SE );
   wire MGM_D0_row1;
   and MGM_BG_2( MGM_D0_row1, SE_inv_for_SAEDRVT14_FSDN2_V2_1, D0 );
   wire MGM_D0_row2;
   and MGM_BG_3( MGM_D0_row2, D0, SI );
   wire MGM_D0_row3;
   and MGM_BG_4( MGM_D0_row3, SE, SI );
   or MGM_BG_5( MGM_D0, MGM_D0_row1, MGM_D0_row2, MGM_D0_row3 );
   not MGM_BG_6( MGM_CLK1, CK );
   wire MGM_D1_row1;
   and MGM_BG_7( MGM_D1_row1, SE_inv_for_SAEDRVT14_FSDN2_V2_1, D1 );
   wire MGM_D1_row2;
   and MGM_BG_8( MGM_D1_row2, D1, SI );
   wire MGM_D1_row3;
   and MGM_BG_9( MGM_D1_row3, SE, SI );
   or MGM_BG_10( MGM_D1, MGM_D1_row1, MGM_D1_row2, MGM_D1_row3 );
   UDP_saed14rvt_tt0p8v25c_MGM_IQ_FF_UDP( IQ0, 1'b0, 1'b0, MGM_CLK0, MGM_D0 );
   UDP_saed14rvt_tt0p8v25c_MGM_IQN_FF_UDP( IQN0, 1'b0, 1'b0, MGM_CLK0, MGM_D0 );
   UDP_saed14rvt_tt0p8v25c_MGM_IQ_FF_UDP( IQ1, 1'b0, 1'b0, MGM_CLK1, MGM_D1 );
   UDP_saed14rvt_tt0p8v25c_MGM_IQN_FF_UDP( IQN1, 1'b0, 1'b0, MGM_CLK1, MGM_D1 );
   buf MGM_BG_11( Q0, IQ0 );
   buf MGM_BG_12( Q1, IQ1 );
   buf MGM_BG_13( QN0, IQN0 );
   buf MGM_BG_14( QN1, IQN1 );

endmodule
`endcelldefine



`celldefine
module SAEDRVT14_FSDN2_V2_0P5_func( CK, D0, D1, Q0, Q1, QN0, QN1, SE, SI );
   input CK, SE, SI, D0, D1;
   output Q0, Q1, QN0, QN1;
   not MGM_BG_0( MGM_CLK0, CK );
   wire SE_inv_for_SAEDRVT14_FSDN2_V2_1;
   not MGM_BG_1( SE_inv_for_SAEDRVT14_FSDN2_V2_1, SE );
   wire MGM_D0_row1;
   and MGM_BG_2( MGM_D0_row1, SE_inv_for_SAEDRVT14_FSDN2_V2_1, D0 );
   wire MGM_D0_row2;
   and MGM_BG_3( MGM_D0_row2, D0, SI );
   wire MGM_D0_row3;
   and MGM_BG_4( MGM_D0_row3, SE, SI );
   or MGM_BG_5( MGM_D0, MGM_D0_row1, MGM_D0_row2, MGM_D0_row3 );
   not MGM_BG_6( MGM_CLK1, CK );
   wire MGM_D1_row1;
   and MGM_BG_7( MGM_D1_row1, SE_inv_for_SAEDRVT14_FSDN2_V2_1, D1 );
   wire MGM_D1_row2;
   and MGM_BG_8( MGM_D1_row2, D1, SI );
   wire MGM_D1_row3;
   and MGM_BG_9( MGM_D1_row3, SE, SI );
   or MGM_BG_10( MGM_D1, MGM_D1_row1, MGM_D1_row2, MGM_D1_row3 );
   UDP_saed14rvt_tt0p8v25c_MGM_IQ_FF_UDP( IQ0, 1'b0, 1'b0, MGM_CLK0, MGM_D0 );
   UDP_saed14rvt_tt0p8v25c_MGM_IQN_FF_UDP( IQN0, 1'b0, 1'b0, MGM_CLK0, MGM_D0 );
   UDP_saed14rvt_tt0p8v25c_MGM_IQ_FF_UDP( IQ1, 1'b0, 1'b0, MGM_CLK1, MGM_D1 );
   UDP_saed14rvt_tt0p8v25c_MGM_IQN_FF_UDP( IQN1, 1'b0, 1'b0, MGM_CLK1, MGM_D1 );
   buf MGM_BG_11( Q0, IQ0 );
   buf MGM_BG_12( Q1, IQ1 );
   buf MGM_BG_13( QN0, IQN0 );
   buf MGM_BG_14( QN1, IQN1 );

endmodule
`endcelldefine

`celldefine
module SAEDRVT14_FSDN2_V2_4_func( CK, D0, D1, Q0, Q1, QN0, QN1, SE, SI );
   input CK, SE, SI, D0, D1;
   output Q0, Q1, QN0, QN1;
   not MGM_BG_0( MGM_CLK0, CK );
   wire SE_inv_for_SAEDRVT14_FSDN2_V2_1;
   not MGM_BG_1( SE_inv_for_SAEDRVT14_FSDN2_V2_1, SE );
   wire MGM_D0_row1;
   and MGM_BG_2( MGM_D0_row1, SE_inv_for_SAEDRVT14_FSDN2_V2_1, D0 );
   wire MGM_D0_row2;
   and MGM_BG_3( MGM_D0_row2, D0, SI );
   wire MGM_D0_row3;
   and MGM_BG_4( MGM_D0_row3, SE, SI );
   or MGM_BG_5( MGM_D0, MGM_D0_row1, MGM_D0_row2, MGM_D0_row3 );
   not MGM_BG_6( MGM_CLK1, CK );
   wire MGM_D1_row1;
   and MGM_BG_7( MGM_D1_row1, SE_inv_for_SAEDRVT14_FSDN2_V2_1, D1 );
   wire MGM_D1_row2;
   and MGM_BG_8( MGM_D1_row2, D1, SI );
   wire MGM_D1_row3;
   and MGM_BG_9( MGM_D1_row3, SE, SI );
   or MGM_BG_10( MGM_D1, MGM_D1_row1, MGM_D1_row2, MGM_D1_row3 );
   UDP_saed14rvt_tt0p8v25c_MGM_IQ_FF_UDP( IQ0, 1'b0, 1'b0, MGM_CLK0, MGM_D0 );
   UDP_saed14rvt_tt0p8v25c_MGM_IQN_FF_UDP( IQN0, 1'b0, 1'b0, MGM_CLK0, MGM_D0 );
   UDP_saed14rvt_tt0p8v25c_MGM_IQ_FF_UDP( IQ1, 1'b0, 1'b0, MGM_CLK1, MGM_D1 );
   UDP_saed14rvt_tt0p8v25c_MGM_IQN_FF_UDP( IQN1, 1'b0, 1'b0, MGM_CLK1, MGM_D1 );
   buf MGM_BG_11( Q0, IQ0 );
   buf MGM_BG_12( Q1, IQ1 );
   buf MGM_BG_13( QN0, IQN0 );
   buf MGM_BG_14( QN1, IQN1 );

endmodule
`endcelldefine

`celldefine
module SAEDRVT14_FSDN2_V2_2_func( CK, D0, D1, Q0, Q1, QN0, QN1, SE, SI );
   input CK, SE, SI, D0, D1;
   output Q0, Q1, QN0, QN1;
   not MGM_BG_0( MGM_CLK0, CK );
   wire SE_inv_for_SAEDRVT14_FSDN2_V2_1;
   not MGM_BG_1( SE_inv_for_SAEDRVT14_FSDN2_V2_1, SE );
   wire MGM_D0_row1;
   and MGM_BG_2( MGM_D0_row1, SE_inv_for_SAEDRVT14_FSDN2_V2_1, D0 );
   wire MGM_D0_row2;
   and MGM_BG_3( MGM_D0_row2, D0, SI );
   wire MGM_D0_row3;
   and MGM_BG_4( MGM_D0_row3, SE, SI );
   or MGM_BG_5( MGM_D0, MGM_D0_row1, MGM_D0_row2, MGM_D0_row3 );
   not MGM_BG_6( MGM_CLK1, CK );
   wire MGM_D1_row1;
   and MGM_BG_7( MGM_D1_row1, SE_inv_for_SAEDRVT14_FSDN2_V2_1, D1 );
   wire MGM_D1_row2;
   and MGM_BG_8( MGM_D1_row2, D1, SI );
   wire MGM_D1_row3;
   and MGM_BG_9( MGM_D1_row3, SE, SI );
   or MGM_BG_10( MGM_D1, MGM_D1_row1, MGM_D1_row2, MGM_D1_row3 );
   UDP_saed14rvt_tt0p8v25c_MGM_IQ_FF_UDP( IQ0, 1'b0, 1'b0, MGM_CLK0, MGM_D0 );
   UDP_saed14rvt_tt0p8v25c_MGM_IQN_FF_UDP( IQN0, 1'b0, 1'b0, MGM_CLK0, MGM_D0 );
   UDP_saed14rvt_tt0p8v25c_MGM_IQ_FF_UDP( IQ1, 1'b0, 1'b0, MGM_CLK1, MGM_D1 );
   UDP_saed14rvt_tt0p8v25c_MGM_IQN_FF_UDP( IQN1, 1'b0, 1'b0, MGM_CLK1, MGM_D1 );
   buf MGM_BG_11( Q0, IQ0 );
   buf MGM_BG_12( Q1, IQ1 );
   buf MGM_BG_13( QN0, IQN0 );
   buf MGM_BG_14( QN1, IQN1 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_FSDN4_V2_1_func( CK, D0, D1, D2, D3, Q0, Q1, Q2, Q3, QN0, QN1, QN2, QN3, SE, SI );
   input CK, SE, SI, D0, D1, D2, D3;
   output Q0, Q1, Q2, Q3, QN0, QN1, QN2, QN3;
   not MGM_BG_0( MGM_CLK0, CK );
   wire SE_inv_for_SAEDRVT14_FSDN4_V2_1;
   not MGM_BG_1( SE_inv_for_SAEDRVT14_FSDN4_V2_1, SE );
   wire MGM_D0_row1;
   and MGM_BG_2( MGM_D0_row1, SE_inv_for_SAEDRVT14_FSDN4_V2_1, D0 );
   wire MGM_D0_row2;
   and MGM_BG_3( MGM_D0_row2, D0, SI );
   wire MGM_D0_row3;
   and MGM_BG_4( MGM_D0_row3, SE, SI );
   or MGM_BG_5( MGM_D0, MGM_D0_row1, MGM_D0_row2, MGM_D0_row3 );
   not MGM_BG_6( MGM_CLK1, CK );
   wire MGM_D1_row1;
   and MGM_BG_7( MGM_D1_row1, SE_inv_for_SAEDRVT14_FSDN4_V2_1, D1 );
   wire MGM_D1_row2;
   and MGM_BG_8( MGM_D1_row2, D1, SI );
   wire MGM_D1_row3;
   and MGM_BG_9( MGM_D1_row3, SE, SI );
   or MGM_BG_10( MGM_D1, MGM_D1_row1, MGM_D1_row2, MGM_D1_row3 );
   not MGM_BG_11( MGM_CLK2, CK );
   wire MGM_D2_row1;
   and MGM_BG_12( MGM_D2_row1, SE_inv_for_SAEDRVT14_FSDN4_V2_1, D2 );
   wire MGM_D2_row2;
   and MGM_BG_13( MGM_D2_row2, D2, SI );
   wire MGM_D2_row3;
   and MGM_BG_14( MGM_D2_row3, SE, SI );
   or MGM_BG_15( MGM_D2, MGM_D2_row1, MGM_D2_row2, MGM_D2_row3 );
   not MGM_BG_16( MGM_CLK3, CK );
   wire MGM_D3_row1;
   and MGM_BG_17( MGM_D3_row1, SE_inv_for_SAEDRVT14_FSDN4_V2_1, D3 );
   wire MGM_D3_row2;
   and MGM_BG_18( MGM_D3_row2, D3, SI );
   wire MGM_D3_row3;
   and MGM_BG_19( MGM_D3_row3, SE, SI );
   or MGM_BG_20( MGM_D3, MGM_D3_row1, MGM_D3_row2, MGM_D3_row3 );
   UDP_saed14rvt_tt0p8v25c_MGM_IQ_FF_UDP( IQ0, 1'b0, 1'b0, MGM_CLK0, MGM_D0 );
   UDP_saed14rvt_tt0p8v25c_MGM_IQN_FF_UDP( IQN0, 1'b0, 1'b0, MGM_CLK0, MGM_D0 );
   UDP_saed14rvt_tt0p8v25c_MGM_IQ_FF_UDP( IQ1, 1'b0, 1'b0, MGM_CLK1, MGM_D1 );
   UDP_saed14rvt_tt0p8v25c_MGM_IQN_FF_UDP( IQN1, 1'b0, 1'b0, MGM_CLK1, MGM_D1 );
   UDP_saed14rvt_tt0p8v25c_MGM_IQ_FF_UDP( IQ2, 1'b0, 1'b0, MGM_CLK2, MGM_D2 );
   UDP_saed14rvt_tt0p8v25c_MGM_IQN_FF_UDP( IQN2, 1'b0, 1'b0, MGM_CLK2, MGM_D2 );
   UDP_saed14rvt_tt0p8v25c_MGM_IQ_FF_UDP( IQ3, 1'b0, 1'b0, MGM_CLK3, MGM_D3 );
   UDP_saed14rvt_tt0p8v25c_MGM_IQN_FF_UDP( IQN3, 1'b0, 1'b0, MGM_CLK3, MGM_D3 );
   buf MGM_BG_21( Q0, IQ0 );
   buf MGM_BG_22( Q1, IQ1 );
   buf MGM_BG_23( Q2, IQ2 );
   buf MGM_BG_24( Q3, IQ3 );
   buf MGM_BG_25( QN0, IQN0 );
   buf MGM_BG_26( QN1, IQN1 );
   buf MGM_BG_27( QN2, IQN2 );
   buf MGM_BG_28( QN3, IQN3 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_FSDN4_V2_0P5_func( CK, D0, D1, D2, D3, Q0, Q1, Q2, Q3, QN0, QN1, QN2, QN3, SE, SI );
   input CK, SE, SI, D0, D1, D2, D3;
   output Q0, Q1, Q2, Q3, QN0, QN1, QN2, QN3;
   not MGM_BG_0( MGM_CLK0, CK );
   wire SE_inv_for_SAEDRVT14_FSDN4_V2_1;
   not MGM_BG_1( SE_inv_for_SAEDRVT14_FSDN4_V2_1, SE );
   wire MGM_D0_row1;
   and MGM_BG_2( MGM_D0_row1, SE_inv_for_SAEDRVT14_FSDN4_V2_1, D0 );
   wire MGM_D0_row2;
   and MGM_BG_3( MGM_D0_row2, D0, SI );
   wire MGM_D0_row3;
   and MGM_BG_4( MGM_D0_row3, SE, SI );
   or MGM_BG_5( MGM_D0, MGM_D0_row1, MGM_D0_row2, MGM_D0_row3 );
   not MGM_BG_6( MGM_CLK1, CK );
   wire MGM_D1_row1;
   and MGM_BG_7( MGM_D1_row1, SE_inv_for_SAEDRVT14_FSDN4_V2_1, D1 );
   wire MGM_D1_row2;
   and MGM_BG_8( MGM_D1_row2, D1, SI );
   wire MGM_D1_row3;
   and MGM_BG_9( MGM_D1_row3, SE, SI );
   or MGM_BG_10( MGM_D1, MGM_D1_row1, MGM_D1_row2, MGM_D1_row3 );
   not MGM_BG_11( MGM_CLK2, CK );
   wire MGM_D2_row1;
   and MGM_BG_12( MGM_D2_row1, SE_inv_for_SAEDRVT14_FSDN4_V2_1, D2 );
   wire MGM_D2_row2;
   and MGM_BG_13( MGM_D2_row2, D2, SI );
   wire MGM_D2_row3;
   and MGM_BG_14( MGM_D2_row3, SE, SI );
   or MGM_BG_15( MGM_D2, MGM_D2_row1, MGM_D2_row2, MGM_D2_row3 );
   not MGM_BG_16( MGM_CLK3, CK );
   wire MGM_D3_row1;
   and MGM_BG_17( MGM_D3_row1, SE_inv_for_SAEDRVT14_FSDN4_V2_1, D3 );
   wire MGM_D3_row2;
   and MGM_BG_18( MGM_D3_row2, D3, SI );
   wire MGM_D3_row3;
   and MGM_BG_19( MGM_D3_row3, SE, SI );
   or MGM_BG_20( MGM_D3, MGM_D3_row1, MGM_D3_row2, MGM_D3_row3 );
   UDP_saed14rvt_tt0p8v25c_MGM_IQ_FF_UDP( IQ0, 1'b0, 1'b0, MGM_CLK0, MGM_D0 );
   UDP_saed14rvt_tt0p8v25c_MGM_IQN_FF_UDP( IQN0, 1'b0, 1'b0, MGM_CLK0, MGM_D0 );
   UDP_saed14rvt_tt0p8v25c_MGM_IQ_FF_UDP( IQ1, 1'b0, 1'b0, MGM_CLK1, MGM_D1 );
   UDP_saed14rvt_tt0p8v25c_MGM_IQN_FF_UDP( IQN1, 1'b0, 1'b0, MGM_CLK1, MGM_D1 );
   UDP_saed14rvt_tt0p8v25c_MGM_IQ_FF_UDP( IQ2, 1'b0, 1'b0, MGM_CLK2, MGM_D2 );
   UDP_saed14rvt_tt0p8v25c_MGM_IQN_FF_UDP( IQN2, 1'b0, 1'b0, MGM_CLK2, MGM_D2 );
   UDP_saed14rvt_tt0p8v25c_MGM_IQ_FF_UDP( IQ3, 1'b0, 1'b0, MGM_CLK3, MGM_D3 );
   UDP_saed14rvt_tt0p8v25c_MGM_IQN_FF_UDP( IQN3, 1'b0, 1'b0, MGM_CLK3, MGM_D3 );
   buf MGM_BG_21( Q0, IQ0 );
   buf MGM_BG_22( Q1, IQ1 );
   buf MGM_BG_23( Q2, IQ2 );
   buf MGM_BG_24( Q3, IQ3 );
   buf MGM_BG_25( QN0, IQN0 );
   buf MGM_BG_26( QN1, IQN1 );
   buf MGM_BG_27( QN2, IQN2 );
   buf MGM_BG_28( QN3, IQN3 );

endmodule
`endcelldefine

`celldefine
module SAEDRVT14_FSDN4_V2_2_func( CK, D0, D1, D2, D3, Q0, Q1, Q2, Q3, QN0, QN1, QN2, QN3, SE, SI );
   input CK, SE, SI, D0, D1, D2, D3;
   output Q0, Q1, Q2, Q3, QN0, QN1, QN2, QN3;
   not MGM_BG_0( MGM_CLK0, CK );
   wire SE_inv_for_SAEDRVT14_FSDN4_V2_1;
   not MGM_BG_1( SE_inv_for_SAEDRVT14_FSDN4_V2_1, SE );
   wire MGM_D0_row1;
   and MGM_BG_2( MGM_D0_row1, SE_inv_for_SAEDRVT14_FSDN4_V2_1, D0 );
   wire MGM_D0_row2;
   and MGM_BG_3( MGM_D0_row2, D0, SI );
   wire MGM_D0_row3;
   and MGM_BG_4( MGM_D0_row3, SE, SI );
   or MGM_BG_5( MGM_D0, MGM_D0_row1, MGM_D0_row2, MGM_D0_row3 );
   not MGM_BG_6( MGM_CLK1, CK );
   wire MGM_D1_row1;
   and MGM_BG_7( MGM_D1_row1, SE_inv_for_SAEDRVT14_FSDN4_V2_1, D1 );
   wire MGM_D1_row2;
   and MGM_BG_8( MGM_D1_row2, D1, SI );
   wire MGM_D1_row3;
   and MGM_BG_9( MGM_D1_row3, SE, SI );
   or MGM_BG_10( MGM_D1, MGM_D1_row1, MGM_D1_row2, MGM_D1_row3 );
   not MGM_BG_11( MGM_CLK2, CK );
   wire MGM_D2_row1;
   and MGM_BG_12( MGM_D2_row1, SE_inv_for_SAEDRVT14_FSDN4_V2_1, D2 );
   wire MGM_D2_row2;
   and MGM_BG_13( MGM_D2_row2, D2, SI );
   wire MGM_D2_row3;
   and MGM_BG_14( MGM_D2_row3, SE, SI );
   or MGM_BG_15( MGM_D2, MGM_D2_row1, MGM_D2_row2, MGM_D2_row3 );
   not MGM_BG_16( MGM_CLK3, CK );
   wire MGM_D3_row1;
   and MGM_BG_17( MGM_D3_row1, SE_inv_for_SAEDRVT14_FSDN4_V2_1, D3 );
   wire MGM_D3_row2;
   and MGM_BG_18( MGM_D3_row2, D3, SI );
   wire MGM_D3_row3;
   and MGM_BG_19( MGM_D3_row3, SE, SI );
   or MGM_BG_20( MGM_D3, MGM_D3_row1, MGM_D3_row2, MGM_D3_row3 );
   UDP_saed14rvt_tt0p8v25c_MGM_IQ_FF_UDP( IQ0, 1'b0, 1'b0, MGM_CLK0, MGM_D0 );
   UDP_saed14rvt_tt0p8v25c_MGM_IQN_FF_UDP( IQN0, 1'b0, 1'b0, MGM_CLK0, MGM_D0 );
   UDP_saed14rvt_tt0p8v25c_MGM_IQ_FF_UDP( IQ1, 1'b0, 1'b0, MGM_CLK1, MGM_D1 );
   UDP_saed14rvt_tt0p8v25c_MGM_IQN_FF_UDP( IQN1, 1'b0, 1'b0, MGM_CLK1, MGM_D1 );
   UDP_saed14rvt_tt0p8v25c_MGM_IQ_FF_UDP( IQ2, 1'b0, 1'b0, MGM_CLK2, MGM_D2 );
   UDP_saed14rvt_tt0p8v25c_MGM_IQN_FF_UDP( IQN2, 1'b0, 1'b0, MGM_CLK2, MGM_D2 );
   UDP_saed14rvt_tt0p8v25c_MGM_IQ_FF_UDP( IQ3, 1'b0, 1'b0, MGM_CLK3, MGM_D3 );
   UDP_saed14rvt_tt0p8v25c_MGM_IQN_FF_UDP( IQN3, 1'b0, 1'b0, MGM_CLK3, MGM_D3 );
   buf MGM_BG_21( Q0, IQ0 );
   buf MGM_BG_22( Q1, IQ1 );
   buf MGM_BG_23( Q2, IQ2 );
   buf MGM_BG_24( Q3, IQ3 );
   buf MGM_BG_25( QN0, IQN0 );
   buf MGM_BG_26( QN1, IQN1 );
   buf MGM_BG_27( QN2, IQN2 );
   buf MGM_BG_28( QN3, IQN3 );

endmodule
`endcelldefine

`celldefine
module SAEDRVT14_FSDN4_V2_4_func( CK, D0, D1, D2, D3, Q0, Q1, Q2, Q3, QN0, QN1, QN2, QN3, SE, SI );
   input CK, SE, SI, D0, D1, D2, D3;
   output Q0, Q1, Q2, Q3, QN0, QN1, QN2, QN3;
   not MGM_BG_0( MGM_CLK0, CK );
   wire SE_inv_for_SAEDRVT14_FSDN4_V2_1;
   not MGM_BG_1( SE_inv_for_SAEDRVT14_FSDN4_V2_1, SE );
   wire MGM_D0_row1;
   and MGM_BG_2( MGM_D0_row1, SE_inv_for_SAEDRVT14_FSDN4_V2_1, D0 );
   wire MGM_D0_row2;
   and MGM_BG_3( MGM_D0_row2, D0, SI );
   wire MGM_D0_row3;
   and MGM_BG_4( MGM_D0_row3, SE, SI );
   or MGM_BG_5( MGM_D0, MGM_D0_row1, MGM_D0_row2, MGM_D0_row3 );
   not MGM_BG_6( MGM_CLK1, CK );
   wire MGM_D1_row1;
   and MGM_BG_7( MGM_D1_row1, SE_inv_for_SAEDRVT14_FSDN4_V2_1, D1 );
   wire MGM_D1_row2;
   and MGM_BG_8( MGM_D1_row2, D1, SI );
   wire MGM_D1_row3;
   and MGM_BG_9( MGM_D1_row3, SE, SI );
   or MGM_BG_10( MGM_D1, MGM_D1_row1, MGM_D1_row2, MGM_D1_row3 );
   not MGM_BG_11( MGM_CLK2, CK );
   wire MGM_D2_row1;
   and MGM_BG_12( MGM_D2_row1, SE_inv_for_SAEDRVT14_FSDN4_V2_1, D2 );
   wire MGM_D2_row2;
   and MGM_BG_13( MGM_D2_row2, D2, SI );
   wire MGM_D2_row3;
   and MGM_BG_14( MGM_D2_row3, SE, SI );
   or MGM_BG_15( MGM_D2, MGM_D2_row1, MGM_D2_row2, MGM_D2_row3 );
   not MGM_BG_16( MGM_CLK3, CK );
   wire MGM_D3_row1;
   and MGM_BG_17( MGM_D3_row1, SE_inv_for_SAEDRVT14_FSDN4_V2_1, D3 );
   wire MGM_D3_row2;
   and MGM_BG_18( MGM_D3_row2, D3, SI );
   wire MGM_D3_row3;
   and MGM_BG_19( MGM_D3_row3, SE, SI );
   or MGM_BG_20( MGM_D3, MGM_D3_row1, MGM_D3_row2, MGM_D3_row3 );
   UDP_saed14rvt_tt0p8v25c_MGM_IQ_FF_UDP( IQ0, 1'b0, 1'b0, MGM_CLK0, MGM_D0 );
   UDP_saed14rvt_tt0p8v25c_MGM_IQN_FF_UDP( IQN0, 1'b0, 1'b0, MGM_CLK0, MGM_D0 );
   UDP_saed14rvt_tt0p8v25c_MGM_IQ_FF_UDP( IQ1, 1'b0, 1'b0, MGM_CLK1, MGM_D1 );
   UDP_saed14rvt_tt0p8v25c_MGM_IQN_FF_UDP( IQN1, 1'b0, 1'b0, MGM_CLK1, MGM_D1 );
   UDP_saed14rvt_tt0p8v25c_MGM_IQ_FF_UDP( IQ2, 1'b0, 1'b0, MGM_CLK2, MGM_D2 );
   UDP_saed14rvt_tt0p8v25c_MGM_IQN_FF_UDP( IQN2, 1'b0, 1'b0, MGM_CLK2, MGM_D2 );
   UDP_saed14rvt_tt0p8v25c_MGM_IQ_FF_UDP( IQ3, 1'b0, 1'b0, MGM_CLK3, MGM_D3 );
   UDP_saed14rvt_tt0p8v25c_MGM_IQN_FF_UDP( IQN3, 1'b0, 1'b0, MGM_CLK3, MGM_D3 );
   buf MGM_BG_21( Q0, IQ0 );
   buf MGM_BG_22( Q1, IQ1 );
   buf MGM_BG_23( Q2, IQ2 );
   buf MGM_BG_24( Q3, IQ3 );
   buf MGM_BG_25( QN0, IQN0 );
   buf MGM_BG_26( QN1, IQN1 );
   buf MGM_BG_27( QN2, IQN2 );
   buf MGM_BG_28( QN3, IQN3 );

endmodule
`endcelldefine

primitive SAEDRVT14_FSDPQM4_V2LPY2_1_statetable_IQ0(IQ0, CK, D0, SI, SE);
output IQ0;
reg IQ0;
input CK, D0, SI, SE; 
table 
// CK, D0, SI, SE : IQ0 : IQ0
  r  1  ?  0   : ?   : 1;
  r  0  ?  0   : ?   : 0;
  r  ?  1  1   : ?   : 1;
  r  ?  0  1   : ?   : 0;
  b  ?  ?  ?   : ?   : -;
  f  ?  ?  ?   : ?   : -;

endtable
endprimitive


primitive SAEDRVT14_FSDPQM4_V2LPY2_1_statetable_IQ1(IQ1, CK, D1, SI, SE);
output IQ1;
reg IQ1;
input CK, D1, SI, SE; 
table 
// CK, D1, SI, SE : IQ1 : IQ1
  r  1  ?  0   : ?   : 1;
  r  0  ?  0   : ?   : 0;
  r  ?  1  1   : ?   : 1;
  r  ?  0  1   : ?   : 0;
  b  ?  ?  ?   : ?   : -;
  f  ?  ?  ?   : ?   : -;

endtable
endprimitive


primitive SAEDRVT14_FSDPQM4_V2LPY2_1_statetable_IQ2(IQ2, CK, D2, SI, SE);
output IQ2;
reg IQ2;
input CK, D2, SI, SE; 
table 
// CK, D2, SI, SE : IQ2 : IQ2
  r  1  ?  0   : ?   : 1;
  r  0  ?  0   : ?   : 0;
  r  ?  1  1   : ?   : 1;
  r  ?  0  1   : ?   : 0;
  b  ?  ?  ?   : ?   : -;
  f  ?  ?  ?   : ?   : -;

endtable
endprimitive


primitive SAEDRVT14_FSDPQM4_V2LPY2_1_statetable_IQ3(IQ3, CK, D3, SI, SE);
output IQ3;
reg IQ3;
input CK, D3, SI, SE; 
table 
// CK, D3, SI, SE : IQ3 : IQ3
  r  1  ?  0   : ?   : 1;
  r  0  ?  0   : ?   : 0;
  r  ?  1  1   : ?   : 1;
  r  ?  0  1   : ?   : 0;
  b  ?  ?  ?   : ?   : -;
  f  ?  ?  ?   : ?   : -;

endtable
endprimitive


`celldefine
module SAEDRVT14_FSDPQM4_V2LPY2_1_func( CK, D0, D1, D2, D3, Q0, Q1, Q2, Q3, SE, SI );
   input CK, SE, SI, D0, D1, D2, D3;
   output Q0, Q1, Q2, Q3;
SAEDRVT14_FSDPQM4_V2LPY2_1_statetable_IQ0(IQ0, CK, D0, SI, SE);
SAEDRVT14_FSDPQM4_V2LPY2_1_statetable_IQ1(IQ1, CK, D1, SI, SE);
SAEDRVT14_FSDPQM4_V2LPY2_1_statetable_IQ2(IQ2, CK, D2, SI, SE);
SAEDRVT14_FSDPQM4_V2LPY2_1_statetable_IQ3(IQ3, CK, D3, SI, SE);
   buf MGM_BG_0( Q0, IQ0 );
   buf MGM_BG_1( Q1, IQ1 );
   buf MGM_BG_2( Q2, IQ2 );
   buf MGM_BG_3( Q3, IQ3 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_FSDPQM4_V2Y2_1_func( CK, D0, D1, D2, D3, Q0, Q1, Q2, Q3, SE, SI );
   input CK, SE, SI, D0, D1, D2, D3;
   output Q0, Q1, Q2, Q3;
SAEDRVT14_FSDPQM4_V2LPY2_1_statetable_IQ0(IQ0, CK, D0, SI, SE);
SAEDRVT14_FSDPQM4_V2LPY2_1_statetable_IQ1(IQ1, CK, D1, SI, SE);
SAEDRVT14_FSDPQM4_V2LPY2_1_statetable_IQ2(IQ2, CK, D2, SI, SE);
SAEDRVT14_FSDPQM4_V2LPY2_1_statetable_IQ3(IQ3, CK, D3, SI, SE);
   buf MGM_BG_0( Q0, IQ0 );
   buf MGM_BG_1( Q1, IQ1 );
   buf MGM_BG_2( Q2, IQ2 );
   buf MGM_BG_3( Q3, IQ3 );

endmodule
`endcelldefine

primitive SAEDRVT14_FSDPSYNRBQM4_V2Y2_1_statetable_IQ0(IQ0, CK, D0, SI, SE, RD);
output IQ0;
reg IQ0;
input CK, D0, SI, SE, RD; 
table 
// CK, D0, SI, SE, RD : IQ0 : IQ0
  r  1  ?  0  1   : ?   : 1;
  r  0  ?  0  1   : ?   : 0;
  r  1  ?  0  0   : ?   : 0;
  r  0  ?  0  0   : ?   : 0;
  r  ?  1  1  ?   : ?   : 1;
  r  ?  0  1  ?   : ?   : 0;
  b  ?  ?  ?  ?   : ?   : -;
  f  ?  ?  ?  ?   : ?   : -;

endtable
endprimitive


primitive SAEDRVT14_FSDPSYNRBQM4_V2Y2_1_statetable_IQ1(IQ1, CK, D1, SI, SE, RD);
output IQ1;
reg IQ1;
input CK, D1, SI, SE, RD; 
table 
// CK, D1, SI, SE, RD : IQ1 : IQ1
  r  1  ?  0  1   : ?   : 1;
  r  0  ?  0  1   : ?   : 0;
  r  1  ?  0  0   : ?   : 0;
  r  0  ?  0  0   : ?   : 0;
  r  ?  1  1  ?   : ?   : 1;
  r  ?  0  1  ?   : ?   : 0;
  b  ?  ?  ?  ?   : ?   : -;
  f  ?  ?  ?  ?   : ?   : -;

endtable
endprimitive


primitive SAEDRVT14_FSDPSYNRBQM4_V2Y2_1_statetable_IQ2(IQ2, CK, D2, SI, SE, RD);
output IQ2;
reg IQ2;
input CK, D2, SI, SE, RD; 
table 
// CK, D2, SI, SE, RD : IQ2 : IQ2
  r  1  ?  0  1   : ?   : 1;
  r  0  ?  0  1   : ?   : 0;
  r  1  ?  0  0   : ?   : 0;
  r  0  ?  0  0   : ?   : 0;
  r  ?  1  1  ?   : ?   : 1;
  r  ?  0  1  ?   : ?   : 0;
  b  ?  ?  ?  ?   : ?   : -;
  f  ?  ?  ?  ?   : ?   : -;

endtable
endprimitive


primitive SAEDRVT14_FSDPSYNRBQM4_V2Y2_1_statetable_IQ3(IQ3, CK, D3, SI, SE, RD);
output IQ3;
reg IQ3;
input CK, D3, SI, SE, RD; 
table 
// CK, D3, SI, SE, RD : IQ3 : IQ3
  r  1  ?  0  1   : ?   : 1;
  r  0  ?  0  1   : ?   : 0;
  r  1  ?  0  0   : ?   : 0;
  r  0  ?  0  0   : ?   : 0;
  r  ?  1  1  ?   : ?   : 1;
  r  ?  0  1  ?   : ?   : 0;
  b  ?  ?  ?  ?   : ?   : -;
  f  ?  ?  ?  ?   : ?   : -;

endtable
endprimitive


`celldefine
module SAEDRVT14_FSDPSYNRBQM4_V2Y2_1_func( CK, D0, D1, D2, D3, Q0, Q1, Q2, Q3, RD, SE, SI );
   input CK, RD, SE, SI, D0, D1, D2, D3;
   output Q0, Q1, Q2, Q3;
SAEDRVT14_FSDPSYNRBQM4_V2Y2_1_statetable_IQ0(IQ0, CK, D0, SI, SE, RD);
SAEDRVT14_FSDPSYNRBQM4_V2Y2_1_statetable_IQ1(IQ1, CK, D1, SI, SE, RD);
SAEDRVT14_FSDPSYNRBQM4_V2Y2_1_statetable_IQ2(IQ2, CK, D2, SI, SE, RD);
SAEDRVT14_FSDPSYNRBQM4_V2Y2_1_statetable_IQ3(IQ3, CK, D3, SI, SE, RD);
   buf MGM_BG_0( Q0, IQ0 );
   buf MGM_BG_1( Q1, IQ1 );
   buf MGM_BG_2( Q2, IQ2 );
   buf MGM_BG_3( Q3, IQ3 );

endmodule
`endcelldefine

`celldefine
module SAEDRVT14_FSDPSYNRBQM4_V2LPY2_1_func( CK, D0, D1, D2, D3, Q0, Q1, Q2, Q3, RD, SE, SI );
   input CK, RD, SE, SI, D0, D1, D2, D3;
   output Q0, Q1, Q2, Q3;
SAEDRVT14_FSDPSYNRBQM4_V2Y2_1_statetable_IQ0(IQ0, CK, D0, SI, SE, RD);
SAEDRVT14_FSDPSYNRBQM4_V2Y2_1_statetable_IQ1(IQ1, CK, D1, SI, SE, RD);
SAEDRVT14_FSDPSYNRBQM4_V2Y2_1_statetable_IQ2(IQ2, CK, D2, SI, SE, RD);
SAEDRVT14_FSDPSYNRBQM4_V2Y2_1_statetable_IQ3(IQ3, CK, D3, SI, SE, RD);
   buf MGM_BG_0( Q0, IQ0 );
   buf MGM_BG_1( Q1, IQ1 );
   buf MGM_BG_2( Q2, IQ2 );
   buf MGM_BG_3( Q3, IQ3 );

endmodule
`endcelldefine

`celldefine
module SAEDRVT14_INV_OR2_AN2_1_func( A1, A2, A3, A4, A5, X1, X2, X3 );
   input A1, A2, A3, A4, A5;
   output X1, X2, X3;
   not MGM_BG_0( X1, A1 );
   or MGM_BG_1( X2, A2, A3 );
   and MGM_BG_2( X3, A4, A5 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_ISOS0CL1_PECO4_1_func( X1, X2, X3, X4, A1, A2, A3, A4, EN0 );
   input A1, A2, A3, A4, EN0;
   output X1, X2, X3, X4;
   or MGM_BG_0( X1, A1, EN0 );
   or MGM_BG_1( X2, A2, EN0 );
   or MGM_BG_2( X3, A3, EN0 );
   or MGM_BG_3( X4, A4, EN0 );

endmodule
`endcelldefine

`celldefine
module SAEDRVT14_ISOS0CL1_PECO4_2_func( X1, X2, X3, X4, A1, A2, A3, A4, EN0 );
   input A1, A2, A3, A4, EN0;
   output X1, X2, X3, X4;
   or MGM_BG_0( X1, A1, EN0 );
   or MGM_BG_1( X2, A2, EN0 );
   or MGM_BG_2( X3, A3, EN0 );
   or MGM_BG_3( X4, A4, EN0 );

endmodule
`endcelldefine

`celldefine
module SAEDRVT14_LSRDPQ4_1_func( CK, D1, D2, D3, D4, Q1, Q2, Q3, Q4, QN1, QN2, QN3, QN4 );
   input CK, D1, D2, D3, D4;
   output Q1, Q2, Q3, Q4, QN1, QN2, QN3, QN4;
   UDP_saed14rvt_tt0p8v25c_MGM_IQ_FF_UDP( IQ1, 1'b0, 1'b0, CK, D1 );
   UDP_saed14rvt_tt0p8v25c_MGM_IQN_FF_UDP( IQN1, 1'b0, 1'b0, CK, D1 );
   UDP_saed14rvt_tt0p8v25c_MGM_IQ_FF_UDP( IQ2, 1'b0, 1'b0, CK, D2 );
   UDP_saed14rvt_tt0p8v25c_MGM_IQN_FF_UDP( IQN2, 1'b0, 1'b0, CK, D2 );
   UDP_saed14rvt_tt0p8v25c_MGM_IQ_FF_UDP( IQ3, 1'b0, 1'b0, CK, D3 );
   UDP_saed14rvt_tt0p8v25c_MGM_IQN_FF_UDP( IQN3, 1'b0, 1'b0, CK, D3 );
   UDP_saed14rvt_tt0p8v25c_MGM_IQ_FF_UDP( IQ4, 1'b0, 1'b0, CK, D4 );
   UDP_saed14rvt_tt0p8v25c_MGM_IQN_FF_UDP( IQN4, 1'b0, 1'b0, CK, D4 );
   buf MGM_BG_0( Q1, IQ1 );
   buf MGM_BG_1( Q2, IQ2 );
   buf MGM_BG_2( Q3, IQ3 );
   buf MGM_BG_3( Q4, IQ4 );
   buf MGM_BG_4( QN1, IQN1 );
   buf MGM_BG_5( QN2, IQN2 );
   buf MGM_BG_6( QN3, IQN3 );
   buf MGM_BG_7( QN4, IQN4 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_LSRDPQ4_2_func( CK, D1, D2, D3, D4, Q1, Q2, Q3, Q4, QN1, QN2, QN3, QN4 );
   input CK, D1, D2, D3, D4;
   output Q1, Q2, Q3, Q4, QN1, QN2, QN3, QN4;
   UDP_saed14rvt_tt0p8v25c_MGM_IQ_FF_UDP( IQ1, 1'b0, 1'b0, CK, D1 );
   UDP_saed14rvt_tt0p8v25c_MGM_IQN_FF_UDP( IQN1, 1'b0, 1'b0, CK, D1 );
   UDP_saed14rvt_tt0p8v25c_MGM_IQ_FF_UDP( IQ2, 1'b0, 1'b0, CK, D2 );
   UDP_saed14rvt_tt0p8v25c_MGM_IQN_FF_UDP( IQN2, 1'b0, 1'b0, CK, D2 );
   UDP_saed14rvt_tt0p8v25c_MGM_IQ_FF_UDP( IQ3, 1'b0, 1'b0, CK, D3 );
   UDP_saed14rvt_tt0p8v25c_MGM_IQN_FF_UDP( IQN3, 1'b0, 1'b0, CK, D3 );
   UDP_saed14rvt_tt0p8v25c_MGM_IQ_FF_UDP( IQ4, 1'b0, 1'b0, CK, D4 );
   UDP_saed14rvt_tt0p8v25c_MGM_IQN_FF_UDP( IQN4, 1'b0, 1'b0, CK, D4 );
   buf MGM_BG_0( Q1, IQ1 );
   buf MGM_BG_1( Q2, IQ2 );
   buf MGM_BG_2( Q3, IQ3 );
   buf MGM_BG_3( Q4, IQ4 );
   buf MGM_BG_4( QN1, IQN1 );
   buf MGM_BG_5( QN2, IQN2 );
   buf MGM_BG_6( QN3, IQN3 );
   buf MGM_BG_7( QN4, IQN4 );

endmodule
`endcelldefine

`celldefine
module SAEDRVT14_LSRDPQ_1_func( D, Q, QN, CK );
   input CK, D;
   output Q, QN;
   UDP_saed14rvt_tt0p8v25c_MGM_IQ_FF_UDP( IQ, 1'b0, 1'b0, CK, D );
   UDP_saed14rvt_tt0p8v25c_MGM_IQN_FF_UDP( IQN, 1'b0, 1'b0, CK, D );
   buf MGM_BG_0( Q, IQ );
   buf MGM_BG_1( QN, IQN );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_LSRDPQ_2_func( D, Q, QN, CK );
   input CK, D;
   output Q, QN;
   UDP_saed14rvt_tt0p8v25c_MGM_IQ_FF_UDP( IQ, 1'b0, 1'b0, CK, D );
   UDP_saed14rvt_tt0p8v25c_MGM_IQN_FF_UDP( IQN, 1'b0, 1'b0, CK, D );
   buf MGM_BG_0( Q, IQ );
   buf MGM_BG_1( QN, IQN );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_NR2_ISO_4_func( X, CK, EN );
   input CK, EN;
   output X;
   wire CK_inv_for_SAEDRVT14_NR2_ISO_1;
   not MGM_BG_0( CK_inv_for_SAEDRVT14_NR2_ISO_1, CK );
   wire EN_inv_for_SAEDRVT14_NR2_ISO_1;
   not MGM_BG_1( EN_inv_for_SAEDRVT14_NR2_ISO_1, EN );
   and MGM_BG_2( X, CK_inv_for_SAEDRVT14_NR2_ISO_1, EN_inv_for_SAEDRVT14_NR2_ISO_1 );

endmodule
`endcelldefine

`celldefine
module SAEDRVT14_NR2_ISO_1_func( X, CK, EN );
   input CK, EN;
   output X;
   wire CK_inv_for_SAEDRVT14_NR2_ISO_1;
   not MGM_BG_0( CK_inv_for_SAEDRVT14_NR2_ISO_1, CK );
   wire EN_inv_for_SAEDRVT14_NR2_ISO_1;
   not MGM_BG_1( EN_inv_for_SAEDRVT14_NR2_ISO_1, EN );
   and MGM_BG_2( X, CK_inv_for_SAEDRVT14_NR2_ISO_1, EN_inv_for_SAEDRVT14_NR2_ISO_1 );

endmodule
`endcelldefine


primitive UDP_saed14rvt_tt0p8v25c_MGM_H_IQ_LATCH_UDP( Q, C, P, CK, D );
output Q;
reg Q;
input C, P, CK, D; 
table 
//C  P CK  D   :  Q  :  Q 
  0  0  0  *  :  ?  :  -;
  0  0  (?0)  ?  :  ?  :  -;
  0  (?0)  0  ?  :  ?  :  -;
  (?0)  0  0  ?  :  ?  :  -;
  ?  0  1  0  :  ?  :  0;
  ?  0  ?  (?0)  :  0  :  0;
  ?  (?0)  ?  0  :  0  :  0;
  1  0  ?  ?  :  ?  :  0;
  0  ?  1  1  :  ?  :  1;
  0  ?  ?  (?1)  :  1  :  1;
  (?0)  ?  ?  1  :  1  :  1;
  ?  1  ?  ?  :  ?  :  1;

endtable
endprimitive


primitive UDP_saed14rvt_tt0p8v25c_MGM_L_IQN_LATCH_UDP( Q, C, P, CK, D );
output Q;
reg Q;
input C, P, CK, D; 
table 
//C  P CK  D   :  Q  :  Q 
  0  0  0  *  :  ?  :  -;
  0  0  (?0)  ?  :  ?  :  -;
  0  (?0)  0  ?  :  ?  :  -;
  (?0)  0  0  ?  :  ?  :  -;
  ?  0  1  0  :  ?  :  1;
  ?  0  ?  (?0)  :  1  :  1;
  ?  (?0)  ?  0  :  1  :  1;
  1  0  ?  ?  :  ?  :  1;
  0  ?  1  1  :  ?  :  0;
  0  ?  ?  (?1)  :  0  :  0;
  (?0)  ?  ?  1  :  0  :  0;
  ?  1  ?  ?  :  ?  :  0;

endtable
endprimitive


`celldefine
module SAEDRVT14_SRLD_3_func( Q, QN, S, R );
   input R, S;
   output Q, QN;
   UDP_saed14rvt_tt0p8v25c_MGM_H_IQ_LATCH_UDP( IQ, R, S, 0, 0 );
   UDP_saed14rvt_tt0p8v25c_MGM_L_IQN_LATCH_UDP( IQN, R, S, 0, 0 );
   buf MGM_BG_0( Q, IQ );
   buf MGM_BG_1( QN, IQN );

endmodule
`endcelldefine


primitive UDP_saed14rvt_tt0p8v25c_MGM_L_IQ_FF_UDP( Q, C, P, CK, D );
output Q;
reg Q;
input C, P, CK, D; 
table 
//C  P CK  D   :  Q  :  Q 
  0  0  n  ?  :  ?  :  -;
  ?  0  r  0  :  ?  :  0;
  ?  0  p  0  :  0  :  0;
  1  ?  ?  ?  :  ?  :  0;
  0  ?  r  1  :  ?  :  1;
  0  ?  p  1  :  1  :  1;
  0  1  ?  ?  :  ?  :  1;
  0  0  ?  *  :  ?  :  -;
  0  n  ?  ?  :  ?  :  -;
  n  0  ?  ?  :  ?  :  -;
  0  p  ?  ?  :  ?  :  -;

endtable
endprimitive


primitive UDP_saed14rvt_tt0p8v25c_MGM_L_IQN_FF_UDP( Q, C, P, CK, D );
output Q;
reg Q;
input C, P, CK, D; 
table 
//C  P CK  D   :  Q  :  Q 
  0  0  n  ?  :  ?  :  -;
  ?  0  r  0  :  ?  :  1;
  ?  0  p  0  :  1  :  1;
  1  0  ?  ?  :  ?  :  1;
  0  ?  r  1  :  ?  :  0;
  0  ?  p  1  :  0  :  0;
  ?  1  ?  ?  :  ?  :  0;
  0  0  ?  *  :  ?  :  -;
  0  n  ?  ?  :  ?  :  -;
  n  0  ?  ?  :  ?  :  -;
  0  p  ?  ?  :  ?  :  -;

endtable
endprimitive


`celldefine
module SAEDRVT14_SRRDPQ4_1_func( CK, D1, D2, D3, D4, NRESTORE, Q1, Q2, Q3, Q4, QN1, QN2, QN3, QN4, SAVE );
   input CK, NRESTORE, SAVE, D1, D2, D3, D4;
   output Q1, Q2, Q3, Q4, QN1, QN2, QN3, QN4;
   UDP_saed14rvt_tt0p8v25c_MGM_IQ_LATCH_UDP( IQ21, 1'b0, 1'b0, SAVE, Q1 );
   UDP_saed14rvt_tt0p8v25c_MGM_IQ_LATCH_UDP( IQ22, 1'b0, 1'b0, SAVE, Q2 );
   UDP_saed14rvt_tt0p8v25c_MGM_IQ_LATCH_UDP( IQ23, 1'b0, 1'b0, SAVE, Q3 );
   UDP_saed14rvt_tt0p8v25c_MGM_IQ_LATCH_UDP( IQ24, 1'b0, 1'b0, SAVE, Q4 );
   wire CK_inv_for_SAEDRVT14_SRRDPQ4_1;
   not MGM_BG_0( CK_inv_for_SAEDRVT14_SRRDPQ4_1, CK );
   wire NRESTORE_inv_for_SAEDRVT14_SRRDPQ4_1;
   not MGM_BG_1( NRESTORE_inv_for_SAEDRVT14_SRRDPQ4_1, NRESTORE );
   and MGM_BG_2( MGM_P4, CK_inv_for_SAEDRVT14_SRRDPQ4_1, NRESTORE_inv_for_SAEDRVT14_SRRDPQ4_1 );
   and MGM_BG_3( MGM_C4, CK_inv_for_SAEDRVT14_SRRDPQ4_1, NRESTORE_inv_for_SAEDRVT14_SRRDPQ4_1 );
   and MGM_BG_4( MGM_P5, CK_inv_for_SAEDRVT14_SRRDPQ4_1, NRESTORE_inv_for_SAEDRVT14_SRRDPQ4_1 );
   and MGM_BG_5( MGM_C5, CK_inv_for_SAEDRVT14_SRRDPQ4_1, NRESTORE_inv_for_SAEDRVT14_SRRDPQ4_1 );
   and MGM_BG_6( MGM_P6, CK_inv_for_SAEDRVT14_SRRDPQ4_1, NRESTORE_inv_for_SAEDRVT14_SRRDPQ4_1 );
   and MGM_BG_7( MGM_C6, CK_inv_for_SAEDRVT14_SRRDPQ4_1, NRESTORE_inv_for_SAEDRVT14_SRRDPQ4_1 );
   and MGM_BG_8( MGM_P7, CK_inv_for_SAEDRVT14_SRRDPQ4_1, NRESTORE_inv_for_SAEDRVT14_SRRDPQ4_1 );
   and MGM_BG_9( MGM_C7, CK_inv_for_SAEDRVT14_SRRDPQ4_1, NRESTORE_inv_for_SAEDRVT14_SRRDPQ4_1 );
   UDP_saed14rvt_tt0p8v25c_MGM_L_IQ_FF_UDP( IQ1, MGM_C4, MGM_P4, CK, D1 );
   UDP_saed14rvt_tt0p8v25c_MGM_L_IQN_FF_UDP( IQN1, MGM_C4, MGM_P4, CK, D1 );
   UDP_saed14rvt_tt0p8v25c_MGM_L_IQ_FF_UDP( IQ2, MGM_C5, MGM_P5, CK, D2 );
   UDP_saed14rvt_tt0p8v25c_MGM_L_IQN_FF_UDP( IQN2, MGM_C5, MGM_P5, CK, D2 );
   UDP_saed14rvt_tt0p8v25c_MGM_L_IQ_FF_UDP( IQ3, MGM_C6, MGM_P6, CK, D3 );
   UDP_saed14rvt_tt0p8v25c_MGM_L_IQN_FF_UDP( IQN3, MGM_C6, MGM_P6, CK, D3 );
   UDP_saed14rvt_tt0p8v25c_MGM_L_IQ_FF_UDP( IQ4, MGM_C7, MGM_P7, CK, D4 );
   UDP_saed14rvt_tt0p8v25c_MGM_L_IQN_FF_UDP( IQN4, MGM_C7, MGM_P7, CK, D4 );
   buf MGM_BG_10( Q1, IQ1 );
   buf MGM_BG_11( Q2, IQ2 );
   buf MGM_BG_12( Q3, IQ3 );
   buf MGM_BG_13( Q4, IQ4 );
   buf MGM_BG_14( QN1, IQN1 );
   buf MGM_BG_15( QN2, IQN2 );
   buf MGM_BG_16( QN3, IQN3 );
   buf MGM_BG_17( QN4, IQN4 );

endmodule
`endcelldefine



`celldefine
module SAEDRVT14_SRRDPQ4_2_func( CK, D1, D2, D3, D4, NRESTORE, Q1, Q2, Q3, Q4, QN1, QN2, QN3, QN4, SAVE );
   input CK, NRESTORE, SAVE, D1, D2, D3, D4;
   output Q1, Q2, Q3, Q4, QN1, QN2, QN3, QN4;
   UDP_saed14rvt_tt0p8v25c_MGM_IQ_LATCH_UDP( IQ21, 1'b0, 1'b0, SAVE, Q1 );
   UDP_saed14rvt_tt0p8v25c_MGM_IQ_LATCH_UDP( IQ22, 1'b0, 1'b0, SAVE, Q2 );
   UDP_saed14rvt_tt0p8v25c_MGM_IQ_LATCH_UDP( IQ23, 1'b0, 1'b0, SAVE, Q3 );
   UDP_saed14rvt_tt0p8v25c_MGM_IQ_LATCH_UDP( IQ24, 1'b0, 1'b0, SAVE, Q4 );
   wire CK_inv_for_SAEDRVT14_SRRDPQ4_1;
   not MGM_BG_0( CK_inv_for_SAEDRVT14_SRRDPQ4_1, CK );
   wire NRESTORE_inv_for_SAEDRVT14_SRRDPQ4_1;
   not MGM_BG_1( NRESTORE_inv_for_SAEDRVT14_SRRDPQ4_1, NRESTORE );
   and MGM_BG_2( MGM_P4, CK_inv_for_SAEDRVT14_SRRDPQ4_1, NRESTORE_inv_for_SAEDRVT14_SRRDPQ4_1 );
   and MGM_BG_3( MGM_C4, CK_inv_for_SAEDRVT14_SRRDPQ4_1, NRESTORE_inv_for_SAEDRVT14_SRRDPQ4_1 );
   and MGM_BG_4( MGM_P5, CK_inv_for_SAEDRVT14_SRRDPQ4_1, NRESTORE_inv_for_SAEDRVT14_SRRDPQ4_1 );
   and MGM_BG_5( MGM_C5, CK_inv_for_SAEDRVT14_SRRDPQ4_1, NRESTORE_inv_for_SAEDRVT14_SRRDPQ4_1 );
   and MGM_BG_6( MGM_P6, CK_inv_for_SAEDRVT14_SRRDPQ4_1, NRESTORE_inv_for_SAEDRVT14_SRRDPQ4_1 );
   and MGM_BG_7( MGM_C6, CK_inv_for_SAEDRVT14_SRRDPQ4_1, NRESTORE_inv_for_SAEDRVT14_SRRDPQ4_1 );
   and MGM_BG_8( MGM_P7, CK_inv_for_SAEDRVT14_SRRDPQ4_1, NRESTORE_inv_for_SAEDRVT14_SRRDPQ4_1 );
   and MGM_BG_9( MGM_C7, CK_inv_for_SAEDRVT14_SRRDPQ4_1, NRESTORE_inv_for_SAEDRVT14_SRRDPQ4_1 );
   UDP_saed14rvt_tt0p8v25c_MGM_L_IQ_FF_UDP( IQ1, MGM_C4, MGM_P4, CK, D1 );
   UDP_saed14rvt_tt0p8v25c_MGM_L_IQN_FF_UDP( IQN1, MGM_C4, MGM_P4, CK, D1 );
   UDP_saed14rvt_tt0p8v25c_MGM_L_IQ_FF_UDP( IQ2, MGM_C5, MGM_P5, CK, D2 );
   UDP_saed14rvt_tt0p8v25c_MGM_L_IQN_FF_UDP( IQN2, MGM_C5, MGM_P5, CK, D2 );
   UDP_saed14rvt_tt0p8v25c_MGM_L_IQ_FF_UDP( IQ3, MGM_C6, MGM_P6, CK, D3 );
   UDP_saed14rvt_tt0p8v25c_MGM_L_IQN_FF_UDP( IQN3, MGM_C6, MGM_P6, CK, D3 );
   UDP_saed14rvt_tt0p8v25c_MGM_L_IQ_FF_UDP( IQ4, MGM_C7, MGM_P7, CK, D4 );
   UDP_saed14rvt_tt0p8v25c_MGM_L_IQN_FF_UDP( IQN4, MGM_C7, MGM_P7, CK, D4 );
   buf MGM_BG_10( Q1, IQ1 );
   buf MGM_BG_11( Q2, IQ2 );
   buf MGM_BG_12( Q3, IQ3 );
   buf MGM_BG_13( Q4, IQ4 );
   buf MGM_BG_14( QN1, IQN1 );
   buf MGM_BG_15( QN2, IQN2 );
   buf MGM_BG_16( QN3, IQN3 );
   buf MGM_BG_17( QN4, IQN4 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_SRRDPQ_1_func( CK, D, NRESTORE, Q, QN, SAVE );
   input CK, D, NRESTORE, SAVE;
   output Q, QN;
   UDP_saed14rvt_tt0p8v25c_MGM_IQ_LATCH_UDP( IQ2, 1'b0, 1'b0, SAVE, Q );
   wire CK_inv_for_SAEDRVT14_SRRDPQ_1;
   not MGM_BG_0( CK_inv_for_SAEDRVT14_SRRDPQ_1, CK );
   wire NRESTORE_inv_for_SAEDRVT14_SRRDPQ_1;
   not MGM_BG_1( NRESTORE_inv_for_SAEDRVT14_SRRDPQ_1, NRESTORE );
   and MGM_BG_2( MGM_P1, CK_inv_for_SAEDRVT14_SRRDPQ_1, NRESTORE_inv_for_SAEDRVT14_SRRDPQ_1 );
   and MGM_BG_3( MGM_C1, CK_inv_for_SAEDRVT14_SRRDPQ_1, NRESTORE_inv_for_SAEDRVT14_SRRDPQ_1 );
   UDP_saed14rvt_tt0p8v25c_MGM_L_IQ_FF_UDP( IQ, MGM_C1, MGM_P1, CK, D );
   UDP_saed14rvt_tt0p8v25c_MGM_L_IQN_FF_UDP( IQN, MGM_C1, MGM_P1, CK, D );
   buf MGM_BG_4( Q, IQ );
   buf MGM_BG_5( QN, IQN );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_SRRDPQ_2_func( CK, D, NRESTORE, Q, QN, SAVE );
   input CK, D, NRESTORE, SAVE;
   output Q, QN;
   UDP_saed14rvt_tt0p8v25c_MGM_IQ_LATCH_UDP( IQ2, 1'b0, 1'b0, SAVE, Q );
   wire CK_inv_for_SAEDRVT14_SRRDPQ_1;
   not MGM_BG_0( CK_inv_for_SAEDRVT14_SRRDPQ_1, CK );
   wire NRESTORE_inv_for_SAEDRVT14_SRRDPQ_1;
   not MGM_BG_1( NRESTORE_inv_for_SAEDRVT14_SRRDPQ_1, NRESTORE );
   and MGM_BG_2( MGM_P1, CK_inv_for_SAEDRVT14_SRRDPQ_1, NRESTORE_inv_for_SAEDRVT14_SRRDPQ_1 );
   and MGM_BG_3( MGM_C1, CK_inv_for_SAEDRVT14_SRRDPQ_1, NRESTORE_inv_for_SAEDRVT14_SRRDPQ_1 );
   UDP_saed14rvt_tt0p8v25c_MGM_L_IQ_FF_UDP( IQ, MGM_C1, MGM_P1, CK, D );
   UDP_saed14rvt_tt0p8v25c_MGM_L_IQN_FF_UDP( IQN, MGM_C1, MGM_P1, CK, D );
   buf MGM_BG_4( Q, IQ );
   buf MGM_BG_5( QN, IQN );

endmodule
`endcelldefine

`celldefine
module SAEDRVT14_SSRRDPQ4_1_func( CK, D1, D2, D3, D4, Q1, Q2, Q3, Q4, QN1, QN2, QN3, QN4, SR );
   input CK, SR, D1, D2, D3, D4;
   output Q1, Q2, Q3, Q4, QN1, QN2, QN3, QN4;
   not MGM_BG_0( MGM_EN0, SR );
   not MGM_BG_1( MGM_EN1, SR );
   not MGM_BG_2( MGM_EN2, SR );
   not MGM_BG_3( MGM_EN3, SR );
   UDP_saed14rvt_tt0p8v25c_MGM_IQ_LATCH_UDP( IQ21, 1'b0, 1'b0, MGM_EN0, Q1 );
   UDP_saed14rvt_tt0p8v25c_MGM_IQ_LATCH_UDP( IQ22, 1'b0, 1'b0, MGM_EN1, Q2 );
   UDP_saed14rvt_tt0p8v25c_MGM_IQ_LATCH_UDP( IQ23, 1'b0, 1'b0, MGM_EN2, Q3 );
   UDP_saed14rvt_tt0p8v25c_MGM_IQ_LATCH_UDP( IQ24, 1'b0, 1'b0, MGM_EN3, Q4 );
   and MGM_BG_4( MGM_CLK4, CK, SR );
   or MGM_BG_5( MGM_P4, CK, SR );
   or MGM_BG_6( MGM_C4, CK, SR );
   and MGM_BG_7( MGM_CLK5, CK, SR );
   or MGM_BG_8( MGM_P5, CK, SR );
   or MGM_BG_9( MGM_C5, CK, SR );
   and MGM_BG_10( MGM_CLK6, CK, SR );
   or MGM_BG_11( MGM_P6, CK, SR );
   or MGM_BG_12( MGM_C6, CK, SR );
   and MGM_BG_13( MGM_CLK7, CK, SR );
   or MGM_BG_14( MGM_P7, CK, SR );
   or MGM_BG_15( MGM_C7, CK, SR );
   UDP_saed14rvt_tt0p8v25c_MGM_L_IQ_FF_UDP( IQ1, MGM_C4, MGM_P4, MGM_CLK4, D1 );
   UDP_saed14rvt_tt0p8v25c_MGM_L_IQN_FF_UDP( IQN1, MGM_C4, MGM_P4, MGM_CLK4, D1 );
   UDP_saed14rvt_tt0p8v25c_MGM_L_IQ_FF_UDP( IQ2, MGM_C5, MGM_P5, MGM_CLK5, D2 );
   UDP_saed14rvt_tt0p8v25c_MGM_L_IQN_FF_UDP( IQN2, MGM_C5, MGM_P5, MGM_CLK5, D2 );
   UDP_saed14rvt_tt0p8v25c_MGM_L_IQ_FF_UDP( IQ3, MGM_C6, MGM_P6, MGM_CLK6, D3 );
   UDP_saed14rvt_tt0p8v25c_MGM_L_IQN_FF_UDP( IQN3, MGM_C6, MGM_P6, MGM_CLK6, D3 );
   UDP_saed14rvt_tt0p8v25c_MGM_L_IQ_FF_UDP( IQ4, MGM_C7, MGM_P7, MGM_CLK7, D4 );
   UDP_saed14rvt_tt0p8v25c_MGM_L_IQN_FF_UDP( IQN4, MGM_C7, MGM_P7, MGM_CLK7, D4 );
   buf MGM_BG_16( Q1, IQ1 );
   buf MGM_BG_17( Q2, IQ2 );
   buf MGM_BG_18( Q3, IQ3 );
   buf MGM_BG_19( Q4, IQ4 );
   buf MGM_BG_20( QN1, IQN1 );
   buf MGM_BG_21( QN2, IQN2 );
   buf MGM_BG_22( QN3, IQN3 );
   buf MGM_BG_23( QN4, IQN4 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_SSRRDPQ4_2_func( CK, D1, D2, D3, D4, Q1, Q2, Q3, Q4, QN1, QN2, QN3, QN4, SR );
   input CK, SR, D1, D2, D3, D4;
   output Q1, Q2, Q3, Q4, QN1, QN2, QN3, QN4;
   not MGM_BG_0( MGM_EN0, SR );
   not MGM_BG_1( MGM_EN1, SR );
   not MGM_BG_2( MGM_EN2, SR );
   not MGM_BG_3( MGM_EN3, SR );
   UDP_saed14rvt_tt0p8v25c_MGM_IQ_LATCH_UDP( IQ21, 1'b0, 1'b0, MGM_EN0, Q1 );
   UDP_saed14rvt_tt0p8v25c_MGM_IQ_LATCH_UDP( IQ22, 1'b0, 1'b0, MGM_EN1, Q2 );
   UDP_saed14rvt_tt0p8v25c_MGM_IQ_LATCH_UDP( IQ23, 1'b0, 1'b0, MGM_EN2, Q3 );
   UDP_saed14rvt_tt0p8v25c_MGM_IQ_LATCH_UDP( IQ24, 1'b0, 1'b0, MGM_EN3, Q4 );
   and MGM_BG_4( MGM_CLK4, CK, SR );
   or MGM_BG_5( MGM_P4, CK, SR );
   or MGM_BG_6( MGM_C4, CK, SR );
   and MGM_BG_7( MGM_CLK5, CK, SR );
   or MGM_BG_8( MGM_P5, CK, SR );
   or MGM_BG_9( MGM_C5, CK, SR );
   and MGM_BG_10( MGM_CLK6, CK, SR );
   or MGM_BG_11( MGM_P6, CK, SR );
   or MGM_BG_12( MGM_C6, CK, SR );
   and MGM_BG_13( MGM_CLK7, CK, SR );
   or MGM_BG_14( MGM_P7, CK, SR );
   or MGM_BG_15( MGM_C7, CK, SR );
   UDP_saed14rvt_tt0p8v25c_MGM_L_IQ_FF_UDP( IQ1, MGM_C4, MGM_P4, MGM_CLK4, D1 );
   UDP_saed14rvt_tt0p8v25c_MGM_L_IQN_FF_UDP( IQN1, MGM_C4, MGM_P4, MGM_CLK4, D1 );
   UDP_saed14rvt_tt0p8v25c_MGM_L_IQ_FF_UDP( IQ2, MGM_C5, MGM_P5, MGM_CLK5, D2 );
   UDP_saed14rvt_tt0p8v25c_MGM_L_IQN_FF_UDP( IQN2, MGM_C5, MGM_P5, MGM_CLK5, D2 );
   UDP_saed14rvt_tt0p8v25c_MGM_L_IQ_FF_UDP( IQ3, MGM_C6, MGM_P6, MGM_CLK6, D3 );
   UDP_saed14rvt_tt0p8v25c_MGM_L_IQN_FF_UDP( IQN3, MGM_C6, MGM_P6, MGM_CLK6, D3 );
   UDP_saed14rvt_tt0p8v25c_MGM_L_IQ_FF_UDP( IQ4, MGM_C7, MGM_P7, MGM_CLK7, D4 );
   UDP_saed14rvt_tt0p8v25c_MGM_L_IQN_FF_UDP( IQN4, MGM_C7, MGM_P7, MGM_CLK7, D4 );
   buf MGM_BG_16( Q1, IQ1 );
   buf MGM_BG_17( Q2, IQ2 );
   buf MGM_BG_18( Q3, IQ3 );
   buf MGM_BG_19( Q4, IQ4 );
   buf MGM_BG_20( QN1, IQN1 );
   buf MGM_BG_21( QN2, IQN2 );
   buf MGM_BG_22( QN3, IQN3 );
   buf MGM_BG_23( QN4, IQN4 );

endmodule
`endcelldefine

`celldefine
module SAEDRVT14_SSRRDPQ_1_func( D, Q, QN, SR, CK );
   input CK, D, SR;
   output Q, QN;
   not MGM_BG_0( MGM_EN0, SR );
   UDP_saed14rvt_tt0p8v25c_MGM_IQ_LATCH_UDP( IQ2, 1'b0, 1'b0, MGM_EN0, Q );
   and MGM_BG_1( MGM_CLK1, CK, SR );
   or MGM_BG_2( MGM_P1, CK, SR );
   or MGM_BG_3( MGM_C1, CK, SR );
   UDP_saed14rvt_tt0p8v25c_MGM_L_IQ_FF_UDP( IQ, MGM_C1, MGM_P1, MGM_CLK1, D );
   UDP_saed14rvt_tt0p8v25c_MGM_L_IQN_FF_UDP( IQN, MGM_C1, MGM_P1, MGM_CLK1, D );
   buf MGM_BG_4( Q, IQ );
   buf MGM_BG_5( QN, IQN );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_SSRRDPQ_2_func( D, Q, QN, SR, CK );
   input CK, D, SR;
   output Q, QN;
   not MGM_BG_0( MGM_EN0, SR );
   UDP_saed14rvt_tt0p8v25c_MGM_IQ_LATCH_UDP( IQ2, 1'b0, 1'b0, MGM_EN0, Q );
   and MGM_BG_1( MGM_CLK1, CK, SR );
   or MGM_BG_2( MGM_P1, CK, SR );
   or MGM_BG_3( MGM_C1, CK, SR );
   UDP_saed14rvt_tt0p8v25c_MGM_L_IQ_FF_UDP( IQ, MGM_C1, MGM_P1, MGM_CLK1, D );
   UDP_saed14rvt_tt0p8v25c_MGM_L_IQN_FF_UDP( IQN, MGM_C1, MGM_P1, MGM_CLK1, D );
   buf MGM_BG_4( Q, IQ );
   buf MGM_BG_5( QN, IQN );

endmodule
`endcelldefine

//****************************************************************************//
// Verilog models generated by SiliconSmart M-2017.03-SP3 build date: Aug 22, 2017 15:59:14. (SMSC-2) //
// Siliconsmart Path: /global/apps/siliconsmart_2017.03-SP3/linux64/bin/siliconsmart //
// Host Name: am04dwamd080.internal.synopsys.com, User Name: saroyan, PID: 24315  //
// Directory: /remote/saed/meruzha/CHAR/rvt/processes_std/tt0p8v25c/siliconsmart/simulation_tie_ao_tie_dcap //
//                                                                            //
// File generated on Tue Jan 02 16:45:06 AMT 2018. (SMSC-3)                   //
//****************************************************************************//


 



`celldefine
module SAEDRVT14_DCAP_PV1ECO_12_func(  );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_DCAP_PV1ECO_15_func(  );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_DCAP_PV1ECO_18_func(  );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_DCAP_PV1ECO_6_func(  );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_DCAP_PV1ECO_9_func(  );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_DCAP_PV3_3_func(  );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_TIE0_4_func( X );
   output X;
   assign X = 1'b0;

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_TIE0_PV1ECO_1_func( X );
   output X;
   assign X = 1'b0;

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_TIE0_V1_2_func( X );
   output X;
   assign X = 1'b0;

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_TIE1_4_func( X );
   output X;
   assign X = 1'b1;

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_TIE1_PV1ECO_1_func( X );
   output X;
   assign X = 1'b1;

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_TIE1_V1ECO_1_func( X );
   output X;
   assign X = 1'b1;

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_TIE1_V1_2_func( X );
   output X;
   assign X = 1'b1;

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_TIEDIN_4_func( X );
   input X;

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_TIEDIN_PV1ECO_6_func( X );
   input X;

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_TIEDIN_V1ECO_6_func( X );
   input X;

endmodule
`endcelldefine

//****************************************************************************//
// Verilog models generated by SiliconSmart M-2017.03-SP3 build date: Aug 22, 2017 15:59:14. (SMSC-2) //
// Siliconsmart Path: /global/apps/siliconsmart_2017.03-SP3/linux64/bin/siliconsmart //
// Host Name: am04dwamd080.internal.synopsys.com, User Name: rostomya, PID: 19306  //
// Directory: /remote/saed/meruzha/CHAR/lvl/ulvl/rvt/processes/tt0p8v25c_i0p8v/siliconsmart/simulation_ulvl //
//                                                                            //
// File generated on Tue Nov 07 09:40:50 AMT 2017. (SMSC-3)                   //
//****************************************************************************//


 



`celldefine
module SAEDRVT14_LVLUBUFE0_IY2V1_1_func( X, A, EN );
   input A, EN;
   output X;
   and MGM_BG_0( X, A, EN );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_LVLUBUFE0_IY2V1_10_func( X, A, EN );
   input A, EN;
   output X;
   and MGM_BG_0( X, A, EN );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_LVLUBUFE0_IY2V1_12_func( X, A, EN );
   input A, EN;
   output X;
   and MGM_BG_0( X, A, EN );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_LVLUBUFE0_IY2V1_2_func( X, A, EN );
   input A, EN;
   output X;
   and MGM_BG_0( X, A, EN );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_LVLUBUFE0_IY2V1_3_func( X, A, EN );
   input A, EN;
   output X;
   and MGM_BG_0( X, A, EN );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_LVLUBUFE0_IY2V1_4_func( X, A, EN );
   input A, EN;
   output X;
   and MGM_BG_0( X, A, EN );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_LVLUBUFE0_IY2V1_6_func( X, A, EN );
   input A, EN;
   output X;
   and MGM_BG_0( X, A, EN );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_LVLUBUFE0_IY2V1_8_func( X, A, EN );
   input A, EN;
   output X;
   and MGM_BG_0( X, A, EN );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_LVLUBUFE0_IY2_1_func( X, A, EN );
   input A, EN;
   output X;
   and MGM_BG_0( X, A, EN );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_LVLUBUFE0_IY2_10_func( X, A, EN );
   input A, EN;
   output X;
   and MGM_BG_0( X, A, EN );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_LVLUBUFE0_IY2_12_func( X, A, EN );
   input A, EN;
   output X;
   and MGM_BG_0( X, A, EN );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_LVLUBUFE0_IY2_2_func( X, A, EN );
   input A, EN;
   output X;
   and MGM_BG_0( X, A, EN );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_LVLUBUFE0_IY2_3_func( X, A, EN );
   input A, EN;
   output X;
   and MGM_BG_0( X, A, EN );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_LVLUBUFE0_IY2_4_func( X, A, EN );
   input A, EN;
   output X;
   and MGM_BG_0( X, A, EN );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_LVLUBUFE0_IY2_6_func( X, A, EN );
   input A, EN;
   output X;
   and MGM_BG_0( X, A, EN );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_LVLUBUFE0_IY2_8_func( X, A, EN );
   input A, EN;
   output X;
   and MGM_BG_0( X, A, EN );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_LVLUBUFE1_IY2V1_1_func( X, A, EN );
   input A, EN;
   output X;
   wire EN_inv_for_SAEDRVT14_LVLUBUFE1_IY2V1_1;
   not MGM_BG_0( EN_inv_for_SAEDRVT14_LVLUBUFE1_IY2V1_1, EN );
   or MGM_BG_1( X, A, EN_inv_for_SAEDRVT14_LVLUBUFE1_IY2V1_1 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_LVLUBUFE1_IY2V1_10_func( X, A, EN );
   input A, EN;
   output X;
   wire EN_inv_for_SAEDRVT14_LVLUBUFE1_IY2V1_10;
   not MGM_BG_0( EN_inv_for_SAEDRVT14_LVLUBUFE1_IY2V1_10, EN );
   or MGM_BG_1( X, A, EN_inv_for_SAEDRVT14_LVLUBUFE1_IY2V1_10 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_LVLUBUFE1_IY2V1_12_func( X, A, EN );
   input A, EN;
   output X;
   wire EN_inv_for_SAEDRVT14_LVLUBUFE1_IY2V1_12;
   not MGM_BG_0( EN_inv_for_SAEDRVT14_LVLUBUFE1_IY2V1_12, EN );
   or MGM_BG_1( X, A, EN_inv_for_SAEDRVT14_LVLUBUFE1_IY2V1_12 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_LVLUBUFE1_IY2V1_2_func( X, A, EN );
   input A, EN;
   output X;
   wire EN_inv_for_SAEDRVT14_LVLUBUFE1_IY2V1_2;
   not MGM_BG_0( EN_inv_for_SAEDRVT14_LVLUBUFE1_IY2V1_2, EN );
   or MGM_BG_1( X, A, EN_inv_for_SAEDRVT14_LVLUBUFE1_IY2V1_2 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_LVLUBUFE1_IY2V1_3_func( X, A, EN );
   input A, EN;
   output X;
   wire EN_inv_for_SAEDRVT14_LVLUBUFE1_IY2V1_3;
   not MGM_BG_0( EN_inv_for_SAEDRVT14_LVLUBUFE1_IY2V1_3, EN );
   or MGM_BG_1( X, A, EN_inv_for_SAEDRVT14_LVLUBUFE1_IY2V1_3 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_LVLUBUFE1_IY2V1_4_func( X, A, EN );
   input A, EN;
   output X;
   wire EN_inv_for_SAEDRVT14_LVLUBUFE1_IY2V1_4;
   not MGM_BG_0( EN_inv_for_SAEDRVT14_LVLUBUFE1_IY2V1_4, EN );
   or MGM_BG_1( X, A, EN_inv_for_SAEDRVT14_LVLUBUFE1_IY2V1_4 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_LVLUBUFE1_IY2V1_6_func( X, A, EN );
   input A, EN;
   output X;
   wire EN_inv_for_SAEDRVT14_LVLUBUFE1_IY2V1_6;
   not MGM_BG_0( EN_inv_for_SAEDRVT14_LVLUBUFE1_IY2V1_6, EN );
   or MGM_BG_1( X, A, EN_inv_for_SAEDRVT14_LVLUBUFE1_IY2V1_6 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_LVLUBUFE1_IY2V1_8_func( X, A, EN );
   input A, EN;
   output X;
   wire EN_inv_for_SAEDRVT14_LVLUBUFE1_IY2V1_8;
   not MGM_BG_0( EN_inv_for_SAEDRVT14_LVLUBUFE1_IY2V1_8, EN );
   or MGM_BG_1( X, A, EN_inv_for_SAEDRVT14_LVLUBUFE1_IY2V1_8 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_LVLUBUFE1_IY2_1_func( X, A, EN );
   input A, EN;
   output X;
   wire EN_inv_for_SAEDRVT14_LVLUBUFE1_IY2_1;
   not MGM_BG_0( EN_inv_for_SAEDRVT14_LVLUBUFE1_IY2_1, EN );
   or MGM_BG_1( X, A, EN_inv_for_SAEDRVT14_LVLUBUFE1_IY2_1 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_LVLUBUFE1_IY2_10_func( X, A, EN );
   input A, EN;
   output X;
   wire EN_inv_for_SAEDRVT14_LVLUBUFE1_IY2_10;
   not MGM_BG_0( EN_inv_for_SAEDRVT14_LVLUBUFE1_IY2_10, EN );
   or MGM_BG_1( X, A, EN_inv_for_SAEDRVT14_LVLUBUFE1_IY2_10 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_LVLUBUFE1_IY2_12_func( X, A, EN );
   input A, EN;
   output X;
   wire EN_inv_for_SAEDRVT14_LVLUBUFE1_IY2_12;
   not MGM_BG_0( EN_inv_for_SAEDRVT14_LVLUBUFE1_IY2_12, EN );
   or MGM_BG_1( X, A, EN_inv_for_SAEDRVT14_LVLUBUFE1_IY2_12 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_LVLUBUFE1_IY2_2_func( X, A, EN );
   input A, EN;
   output X;
   wire EN_inv_for_SAEDRVT14_LVLUBUFE1_IY2_2;
   not MGM_BG_0( EN_inv_for_SAEDRVT14_LVLUBUFE1_IY2_2, EN );
   or MGM_BG_1( X, A, EN_inv_for_SAEDRVT14_LVLUBUFE1_IY2_2 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_LVLUBUFE1_IY2_3_func( X, A, EN );
   input A, EN;
   output X;
   wire EN_inv_for_SAEDRVT14_LVLUBUFE1_IY2_3;
   not MGM_BG_0( EN_inv_for_SAEDRVT14_LVLUBUFE1_IY2_3, EN );
   or MGM_BG_1( X, A, EN_inv_for_SAEDRVT14_LVLUBUFE1_IY2_3 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_LVLUBUFE1_IY2_4_func( X, A, EN );
   input A, EN;
   output X;
   wire EN_inv_for_SAEDRVT14_LVLUBUFE1_IY2_4;
   not MGM_BG_0( EN_inv_for_SAEDRVT14_LVLUBUFE1_IY2_4, EN );
   or MGM_BG_1( X, A, EN_inv_for_SAEDRVT14_LVLUBUFE1_IY2_4 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_LVLUBUFE1_IY2_6_func( X, A, EN );
   input A, EN;
   output X;
   wire EN_inv_for_SAEDRVT14_LVLUBUFE1_IY2_6;
   not MGM_BG_0( EN_inv_for_SAEDRVT14_LVLUBUFE1_IY2_6, EN );
   or MGM_BG_1( X, A, EN_inv_for_SAEDRVT14_LVLUBUFE1_IY2_6 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_LVLUBUFE1_IY2_8_func( X, A, EN );
   input A, EN;
   output X;
   wire EN_inv_for_SAEDRVT14_LVLUBUFE1_IY2_8;
   not MGM_BG_0( EN_inv_for_SAEDRVT14_LVLUBUFE1_IY2_8, EN );
   or MGM_BG_1( X, A, EN_inv_for_SAEDRVT14_LVLUBUFE1_IY2_8 );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_LVLUBUF_IY2V1_1_func( X, A );
   input A;
   output X;
   buf MGM_BG_0( X, A );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_LVLUBUF_IY2V1_10_func( X, A );
   input A;
   output X;
   buf MGM_BG_0( X, A );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_LVLUBUF_IY2V1_12_func( X, A );
   input A;
   output X;
   buf MGM_BG_0( X, A );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_LVLUBUF_IY2V1_2_func( X, A );
   input A;
   output X;
   buf MGM_BG_0( X, A );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_LVLUBUF_IY2V1_3_func( X, A );
   input A;
   output X;
   buf MGM_BG_0( X, A );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_LVLUBUF_IY2V1_4_func( X, A );
   input A;
   output X;
   buf MGM_BG_0( X, A );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_LVLUBUF_IY2V1_6_func( X, A );
   input A;
   output X;
   buf MGM_BG_0( X, A );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_LVLUBUF_IY2V1_8_func( X, A );
   input A;
   output X;
   buf MGM_BG_0( X, A );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_LVLUBUF_IY2_1_func( X, A );
   input A;
   output X;
   buf MGM_BG_0( X, A );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_LVLUBUF_IY2_10_func( X, A );
   input A;
   output X;
   buf MGM_BG_0( X, A );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_LVLUBUF_IY2_12_func( X, A );
   input A;
   output X;
   buf MGM_BG_0( X, A );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_LVLUBUF_IY2_2_func( X, A );
   input A;
   output X;
   buf MGM_BG_0( X, A );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_LVLUBUF_IY2_3_func( X, A );
   input A;
   output X;
   buf MGM_BG_0( X, A );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_LVLUBUF_IY2_4_func( X, A );
   input A;
   output X;
   buf MGM_BG_0( X, A );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_LVLUBUF_IY2_6_func( X, A );
   input A;
   output X;
   buf MGM_BG_0( X, A );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_LVLUBUF_IY2_8_func( X, A );
   input A;
   output X;
   buf MGM_BG_0( X, A );

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_CKGTNLT_V5_1( Q, CK, EN, SE );
input CK, EN, SE;
output Q;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_CKGTNLT_V5_1_func SAEDRVT14_CKGTNLT_V5_1_behav_inst(.Q(Q),.CK(CK),.EN(EN),.SE(SE));
`else
   SAEDRVT14_CKGTNLT_V5_1_func SAEDRVT14_CKGTNLT_V5_1_inst(.Q(Q),.CK(CK),.EN(EN),.SE(SE));
   // spec_gates_begin
   not MGM_G0(MGM_W0,EN);
   not MGM_G1(MGM_W1,SE);
   and MGM_G2(ENABLE_NOT_EN_AND_NOT_SE,MGM_W1,MGM_W0);
   not MGM_G3(MGM_W2,EN);
   and MGM_G4(ENABLE_NOT_EN_AND_SE,SE,MGM_W2);
   not MGM_G5(MGM_W3,SE);
   and MGM_G6(ENABLE_EN_AND_NOT_SE,MGM_W3,EN);
   and MGM_G7(ENABLE_EN_AND_SE,SE,EN);
   not MGM_G8(ENABLE_NOT_SE,SE);
   not MGM_G9(ENABLE_NOT_EN,EN);
   // spec_gates_end
   // specify_block_begin
   specify

      if(EN===1'b0 && SE===1'b1)
      // comb arc CK --> Q
      (CK => Q) = (1.0,1.0);
      
      if(EN===1'b1 && SE===1'b0)
      // comb arc CK --> Q
      (CK => Q) = (1.0,1.0);
      
      if(EN===1'b1 && SE===1'b1)
      // comb arc CK --> Q
      (CK => Q) = (1.0,1.0);
      
      ifnone
      // comb arc CK --> Q
      (CK => Q) = (1.0,1.0);
      
      if(EN===1'b0 && SE===1'b0)
      // comb arc CK --> Q
      (CK => Q) = (1.0,1.0);
      
      $width(posedge CK &&& (ENABLE_NOT_EN_AND_NOT_SE === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_EN_AND_SE === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_EN_AND_NOT_SE === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_EN_AND_SE === 1'b1)
      ,1.0,0);
      
      // hold EN-HL CK-HL
      $hold(negedge CK &&& (ENABLE_NOT_SE === 1'b1),
      negedge EN &&& (ENABLE_NOT_SE === 1'b1),1.0);
      
      // hold EN-LH CK-HL
      $hold(negedge CK &&& (ENABLE_NOT_SE === 1'b1),
      posedge EN &&& (ENABLE_NOT_SE === 1'b1),1.0);
      
      // setup EN-HL CK-HL
      $setup(negedge EN &&& (ENABLE_NOT_SE === 1'b1),
      negedge CK &&& (ENABLE_NOT_SE === 1'b1),1.0);
      
      // setup EN-LH CK-HL
      $setup(posedge EN &&& (ENABLE_NOT_SE === 1'b1),
      negedge CK &&& (ENABLE_NOT_SE === 1'b1),1.0);
      
      // hold SE-HL CK-HL
      $hold(negedge CK &&& (ENABLE_NOT_EN === 1'b1),
      negedge SE &&& (ENABLE_NOT_EN === 1'b1),1.0);
      
      // hold SE-LH CK-HL
      $hold(negedge CK &&& (ENABLE_NOT_EN === 1'b1),
      posedge SE &&& (ENABLE_NOT_EN === 1'b1),1.0);
      
      // setup SE-HL CK-HL
      $setup(negedge SE &&& (ENABLE_NOT_EN === 1'b1),
      negedge CK &&& (ENABLE_NOT_EN === 1'b1),1.0);
      
      // setup SE-LH CK-HL
      $setup(posedge SE &&& (ENABLE_NOT_EN === 1'b1),
      negedge CK &&& (ENABLE_NOT_EN === 1'b1),1.0);
      
      // mpw CK_lh 
      $width(posedge CK,1.0,0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_CKGTNLT_V5_12( Q, CK, EN, SE );
input CK, EN, SE;
output Q;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_CKGTNLT_V5_12_func SAEDRVT14_CKGTNLT_V5_12_behav_inst(.Q(Q),.CK(CK),.EN(EN),.SE(SE));
`else
   SAEDRVT14_CKGTNLT_V5_12_func SAEDRVT14_CKGTNLT_V5_12_inst(.Q(Q),.CK(CK),.EN(EN),.SE(SE));
   // spec_gates_begin
   not MGM_G0(MGM_W0,EN);
   not MGM_G1(MGM_W1,SE);
   and MGM_G2(ENABLE_NOT_EN_AND_NOT_SE,MGM_W1,MGM_W0);
   not MGM_G3(MGM_W2,EN);
   and MGM_G4(ENABLE_NOT_EN_AND_SE,SE,MGM_W2);
   not MGM_G5(MGM_W3,SE);
   and MGM_G6(ENABLE_EN_AND_NOT_SE,MGM_W3,EN);
   and MGM_G7(ENABLE_EN_AND_SE,SE,EN);
   not MGM_G8(ENABLE_NOT_SE,SE);
   not MGM_G9(ENABLE_NOT_EN,EN);
   // spec_gates_end
   // specify_block_begin
   specify

      if(EN===1'b0 && SE===1'b1)
      // comb arc CK --> Q
      (CK => Q) = (1.0,1.0);
      
      if(EN===1'b1 && SE===1'b0)
      // comb arc CK --> Q
      (CK => Q) = (1.0,1.0);
      
      if(EN===1'b1 && SE===1'b1)
      // comb arc CK --> Q
      (CK => Q) = (1.0,1.0);
      
      ifnone
      // comb arc CK --> Q
      (CK => Q) = (1.0,1.0);
      
      if(EN===1'b0 && SE===1'b0)
      // comb arc CK --> Q
      (CK => Q) = (1.0,1.0);
      
      $width(posedge CK &&& (ENABLE_NOT_EN_AND_NOT_SE === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_EN_AND_SE === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_EN_AND_NOT_SE === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_EN_AND_SE === 1'b1)
      ,1.0,0);
      
      // hold EN-HL CK-HL
      $hold(negedge CK &&& (ENABLE_NOT_SE === 1'b1),
      negedge EN &&& (ENABLE_NOT_SE === 1'b1),1.0);
      
      // hold EN-LH CK-HL
      $hold(negedge CK &&& (ENABLE_NOT_SE === 1'b1),
      posedge EN &&& (ENABLE_NOT_SE === 1'b1),1.0);
      
      // setup EN-HL CK-HL
      $setup(negedge EN &&& (ENABLE_NOT_SE === 1'b1),
      negedge CK &&& (ENABLE_NOT_SE === 1'b1),1.0);
      
      // setup EN-LH CK-HL
      $setup(posedge EN &&& (ENABLE_NOT_SE === 1'b1),
      negedge CK &&& (ENABLE_NOT_SE === 1'b1),1.0);
      
      // hold SE-HL CK-HL
      $hold(negedge CK &&& (ENABLE_NOT_EN === 1'b1),
      negedge SE &&& (ENABLE_NOT_EN === 1'b1),1.0);
      
      // hold SE-LH CK-HL
      $hold(negedge CK &&& (ENABLE_NOT_EN === 1'b1),
      posedge SE &&& (ENABLE_NOT_EN === 1'b1),1.0);
      
      // setup SE-HL CK-HL
      $setup(negedge SE &&& (ENABLE_NOT_EN === 1'b1),
      negedge CK &&& (ENABLE_NOT_EN === 1'b1),1.0);
      
      // setup SE-LH CK-HL
      $setup(posedge SE &&& (ENABLE_NOT_EN === 1'b1),
      negedge CK &&& (ENABLE_NOT_EN === 1'b1),1.0);
      
      // mpw CK_lh 
      $width(posedge CK,1.0,0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_CKGTNLT_V5_2( Q, CK, EN, SE );
input CK, EN, SE;
output Q;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_CKGTNLT_V5_2_func SAEDRVT14_CKGTNLT_V5_2_behav_inst(.Q(Q),.CK(CK),.EN(EN),.SE(SE));
`else
   SAEDRVT14_CKGTNLT_V5_2_func SAEDRVT14_CKGTNLT_V5_2_inst(.Q(Q),.CK(CK),.EN(EN),.SE(SE));
   // spec_gates_begin
   not MGM_G0(MGM_W0,EN);
   not MGM_G1(MGM_W1,SE);
   and MGM_G2(ENABLE_NOT_EN_AND_NOT_SE,MGM_W1,MGM_W0);
   not MGM_G3(MGM_W2,EN);
   and MGM_G4(ENABLE_NOT_EN_AND_SE,SE,MGM_W2);
   not MGM_G5(MGM_W3,SE);
   and MGM_G6(ENABLE_EN_AND_NOT_SE,MGM_W3,EN);
   and MGM_G7(ENABLE_EN_AND_SE,SE,EN);
   not MGM_G8(ENABLE_NOT_SE,SE);
   not MGM_G9(ENABLE_NOT_EN,EN);
   // spec_gates_end
   // specify_block_begin
   specify

      if(EN===1'b0 && SE===1'b1)
      // comb arc CK --> Q
      (CK => Q) = (1.0,1.0);
      
      if(EN===1'b1 && SE===1'b0)
      // comb arc CK --> Q
      (CK => Q) = (1.0,1.0);
      
      if(EN===1'b1 && SE===1'b1)
      // comb arc CK --> Q
      (CK => Q) = (1.0,1.0);
      
      ifnone
      // comb arc CK --> Q
      (CK => Q) = (1.0,1.0);
      
      if(EN===1'b0 && SE===1'b0)
      // comb arc CK --> Q
      (CK => Q) = (1.0,1.0);
      
      $width(posedge CK &&& (ENABLE_NOT_EN_AND_NOT_SE === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_EN_AND_SE === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_EN_AND_NOT_SE === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_EN_AND_SE === 1'b1)
      ,1.0,0);
      
      // hold EN-HL CK-HL
      $hold(negedge CK &&& (ENABLE_NOT_SE === 1'b1),
      negedge EN &&& (ENABLE_NOT_SE === 1'b1),1.0);
      
      // hold EN-LH CK-HL
      $hold(negedge CK &&& (ENABLE_NOT_SE === 1'b1),
      posedge EN &&& (ENABLE_NOT_SE === 1'b1),1.0);
      
      // setup EN-HL CK-HL
      $setup(negedge EN &&& (ENABLE_NOT_SE === 1'b1),
      negedge CK &&& (ENABLE_NOT_SE === 1'b1),1.0);
      
      // setup EN-LH CK-HL
      $setup(posedge EN &&& (ENABLE_NOT_SE === 1'b1),
      negedge CK &&& (ENABLE_NOT_SE === 1'b1),1.0);
      
      // hold SE-HL CK-HL
      $hold(negedge CK &&& (ENABLE_NOT_EN === 1'b1),
      negedge SE &&& (ENABLE_NOT_EN === 1'b1),1.0);
      
      // hold SE-LH CK-HL
      $hold(negedge CK &&& (ENABLE_NOT_EN === 1'b1),
      posedge SE &&& (ENABLE_NOT_EN === 1'b1),1.0);
      
      // setup SE-HL CK-HL
      $setup(negedge SE &&& (ENABLE_NOT_EN === 1'b1),
      negedge CK &&& (ENABLE_NOT_EN === 1'b1),1.0);
      
      // setup SE-LH CK-HL
      $setup(posedge SE &&& (ENABLE_NOT_EN === 1'b1),
      negedge CK &&& (ENABLE_NOT_EN === 1'b1),1.0);
      
      // mpw CK_lh 
      $width(posedge CK,1.0,0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_CKGTNLT_V5_3( Q, CK, EN, SE );
input CK, EN, SE;
output Q;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_CKGTNLT_V5_3_func SAEDRVT14_CKGTNLT_V5_3_behav_inst(.Q(Q),.CK(CK),.EN(EN),.SE(SE));
`else
   SAEDRVT14_CKGTNLT_V5_3_func SAEDRVT14_CKGTNLT_V5_3_inst(.Q(Q),.CK(CK),.EN(EN),.SE(SE));
   // spec_gates_begin
   not MGM_G0(MGM_W0,EN);
   not MGM_G1(MGM_W1,SE);
   and MGM_G2(ENABLE_NOT_EN_AND_NOT_SE,MGM_W1,MGM_W0);
   not MGM_G3(MGM_W2,EN);
   and MGM_G4(ENABLE_NOT_EN_AND_SE,SE,MGM_W2);
   not MGM_G5(MGM_W3,SE);
   and MGM_G6(ENABLE_EN_AND_NOT_SE,MGM_W3,EN);
   and MGM_G7(ENABLE_EN_AND_SE,SE,EN);
   not MGM_G8(ENABLE_NOT_SE,SE);
   not MGM_G9(ENABLE_NOT_EN,EN);
   // spec_gates_end
   // specify_block_begin
   specify

      if(EN===1'b0 && SE===1'b1)
      // comb arc CK --> Q
      (CK => Q) = (1.0,1.0);
      
      if(EN===1'b1 && SE===1'b0)
      // comb arc CK --> Q
      (CK => Q) = (1.0,1.0);
      
      if(EN===1'b1 && SE===1'b1)
      // comb arc CK --> Q
      (CK => Q) = (1.0,1.0);
      
      ifnone
      // comb arc CK --> Q
      (CK => Q) = (1.0,1.0);
      
      if(EN===1'b0 && SE===1'b0)
      // comb arc CK --> Q
      (CK => Q) = (1.0,1.0);
      
      $width(posedge CK &&& (ENABLE_NOT_EN_AND_NOT_SE === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_EN_AND_SE === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_EN_AND_NOT_SE === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_EN_AND_SE === 1'b1)
      ,1.0,0);
      
      // hold EN-HL CK-HL
      $hold(negedge CK &&& (ENABLE_NOT_SE === 1'b1),
      negedge EN &&& (ENABLE_NOT_SE === 1'b1),1.0);
      
      // hold EN-LH CK-HL
      $hold(negedge CK &&& (ENABLE_NOT_SE === 1'b1),
      posedge EN &&& (ENABLE_NOT_SE === 1'b1),1.0);
      
      // setup EN-HL CK-HL
      $setup(negedge EN &&& (ENABLE_NOT_SE === 1'b1),
      negedge CK &&& (ENABLE_NOT_SE === 1'b1),1.0);
      
      // setup EN-LH CK-HL
      $setup(posedge EN &&& (ENABLE_NOT_SE === 1'b1),
      negedge CK &&& (ENABLE_NOT_SE === 1'b1),1.0);
      
      // hold SE-HL CK-HL
      $hold(negedge CK &&& (ENABLE_NOT_EN === 1'b1),
      negedge SE &&& (ENABLE_NOT_EN === 1'b1),1.0);
      
      // hold SE-LH CK-HL
      $hold(negedge CK &&& (ENABLE_NOT_EN === 1'b1),
      posedge SE &&& (ENABLE_NOT_EN === 1'b1),1.0);
      
      // setup SE-HL CK-HL
      $setup(negedge SE &&& (ENABLE_NOT_EN === 1'b1),
      negedge CK &&& (ENABLE_NOT_EN === 1'b1),1.0);
      
      // setup SE-LH CK-HL
      $setup(posedge SE &&& (ENABLE_NOT_EN === 1'b1),
      negedge CK &&& (ENABLE_NOT_EN === 1'b1),1.0);
      
      // mpw CK_lh 
      $width(posedge CK,1.0,0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_CKGTNLT_V5_4( Q, CK, EN, SE );
input CK, EN, SE;
output Q;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_CKGTNLT_V5_4_func SAEDRVT14_CKGTNLT_V5_4_behav_inst(.Q(Q),.CK(CK),.EN(EN),.SE(SE));
`else
   SAEDRVT14_CKGTNLT_V5_4_func SAEDRVT14_CKGTNLT_V5_4_inst(.Q(Q),.CK(CK),.EN(EN),.SE(SE));
   // spec_gates_begin
   not MGM_G0(MGM_W0,EN);
   not MGM_G1(MGM_W1,SE);
   and MGM_G2(ENABLE_NOT_EN_AND_NOT_SE,MGM_W1,MGM_W0);
   not MGM_G3(MGM_W2,EN);
   and MGM_G4(ENABLE_NOT_EN_AND_SE,SE,MGM_W2);
   not MGM_G5(MGM_W3,SE);
   and MGM_G6(ENABLE_EN_AND_NOT_SE,MGM_W3,EN);
   and MGM_G7(ENABLE_EN_AND_SE,SE,EN);
   not MGM_G8(ENABLE_NOT_SE,SE);
   not MGM_G9(ENABLE_NOT_EN,EN);
   // spec_gates_end
   // specify_block_begin
   specify

      if(EN===1'b0 && SE===1'b1)
      // comb arc CK --> Q
      (CK => Q) = (1.0,1.0);
      
      if(EN===1'b1 && SE===1'b0)
      // comb arc CK --> Q
      (CK => Q) = (1.0,1.0);
      
      if(EN===1'b1 && SE===1'b1)
      // comb arc CK --> Q
      (CK => Q) = (1.0,1.0);
      
      ifnone
      // comb arc CK --> Q
      (CK => Q) = (1.0,1.0);
      
      if(EN===1'b0 && SE===1'b0)
      // comb arc CK --> Q
      (CK => Q) = (1.0,1.0);
      
      $width(posedge CK &&& (ENABLE_NOT_EN_AND_NOT_SE === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_EN_AND_SE === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_EN_AND_NOT_SE === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_EN_AND_SE === 1'b1)
      ,1.0,0);
      
      // hold EN-HL CK-HL
      $hold(negedge CK &&& (ENABLE_NOT_SE === 1'b1),
      negedge EN &&& (ENABLE_NOT_SE === 1'b1),1.0);
      
      // hold EN-LH CK-HL
      $hold(negedge CK &&& (ENABLE_NOT_SE === 1'b1),
      posedge EN &&& (ENABLE_NOT_SE === 1'b1),1.0);
      
      // setup EN-HL CK-HL
      $setup(negedge EN &&& (ENABLE_NOT_SE === 1'b1),
      negedge CK &&& (ENABLE_NOT_SE === 1'b1),1.0);
      
      // setup EN-LH CK-HL
      $setup(posedge EN &&& (ENABLE_NOT_SE === 1'b1),
      negedge CK &&& (ENABLE_NOT_SE === 1'b1),1.0);
      
      // hold SE-HL CK-HL
      $hold(negedge CK &&& (ENABLE_NOT_EN === 1'b1),
      negedge SE &&& (ENABLE_NOT_EN === 1'b1),1.0);
      
      // hold SE-LH CK-HL
      $hold(negedge CK &&& (ENABLE_NOT_EN === 1'b1),
      posedge SE &&& (ENABLE_NOT_EN === 1'b1),1.0);
      
      // setup SE-HL CK-HL
      $setup(negedge SE &&& (ENABLE_NOT_EN === 1'b1),
      negedge CK &&& (ENABLE_NOT_EN === 1'b1),1.0);
      
      // setup SE-LH CK-HL
      $setup(posedge SE &&& (ENABLE_NOT_EN === 1'b1),
      negedge CK &&& (ENABLE_NOT_EN === 1'b1),1.0);
      
      // mpw CK_lh 
      $width(posedge CK,1.0,0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_CKGTNLT_V5_5( Q, CK, EN, SE );
input CK, EN, SE;
output Q;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_CKGTNLT_V5_5_func SAEDRVT14_CKGTNLT_V5_5_behav_inst(.Q(Q),.CK(CK),.EN(EN),.SE(SE));
`else
   SAEDRVT14_CKGTNLT_V5_5_func SAEDRVT14_CKGTNLT_V5_5_inst(.Q(Q),.CK(CK),.EN(EN),.SE(SE));
   // spec_gates_begin
   not MGM_G0(MGM_W0,EN);
   not MGM_G1(MGM_W1,SE);
   and MGM_G2(ENABLE_NOT_EN_AND_NOT_SE,MGM_W1,MGM_W0);
   not MGM_G3(MGM_W2,EN);
   and MGM_G4(ENABLE_NOT_EN_AND_SE,SE,MGM_W2);
   not MGM_G5(MGM_W3,SE);
   and MGM_G6(ENABLE_EN_AND_NOT_SE,MGM_W3,EN);
   and MGM_G7(ENABLE_EN_AND_SE,SE,EN);
   not MGM_G8(ENABLE_NOT_SE,SE);
   not MGM_G9(ENABLE_NOT_EN,EN);
   // spec_gates_end
   // specify_block_begin
   specify

      if(EN===1'b0 && SE===1'b1)
      // comb arc CK --> Q
      (CK => Q) = (1.0,1.0);
      
      if(EN===1'b1 && SE===1'b0)
      // comb arc CK --> Q
      (CK => Q) = (1.0,1.0);
      
      if(EN===1'b1 && SE===1'b1)
      // comb arc CK --> Q
      (CK => Q) = (1.0,1.0);
      
      ifnone
      // comb arc CK --> Q
      (CK => Q) = (1.0,1.0);
      
      if(EN===1'b0 && SE===1'b0)
      // comb arc CK --> Q
      (CK => Q) = (1.0,1.0);
      
      $width(posedge CK &&& (ENABLE_NOT_EN_AND_NOT_SE === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_EN_AND_SE === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_EN_AND_NOT_SE === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_EN_AND_SE === 1'b1)
      ,1.0,0);
      
      // hold EN-HL CK-HL
      $hold(negedge CK &&& (ENABLE_NOT_SE === 1'b1),
      negedge EN &&& (ENABLE_NOT_SE === 1'b1),1.0);
      
      // hold EN-LH CK-HL
      $hold(negedge CK &&& (ENABLE_NOT_SE === 1'b1),
      posedge EN &&& (ENABLE_NOT_SE === 1'b1),1.0);
      
      // setup EN-HL CK-HL
      $setup(negedge EN &&& (ENABLE_NOT_SE === 1'b1),
      negedge CK &&& (ENABLE_NOT_SE === 1'b1),1.0);
      
      // setup EN-LH CK-HL
      $setup(posedge EN &&& (ENABLE_NOT_SE === 1'b1),
      negedge CK &&& (ENABLE_NOT_SE === 1'b1),1.0);
      
      // hold SE-HL CK-HL
      $hold(negedge CK &&& (ENABLE_NOT_EN === 1'b1),
      negedge SE &&& (ENABLE_NOT_EN === 1'b1),1.0);
      
      // hold SE-LH CK-HL
      $hold(negedge CK &&& (ENABLE_NOT_EN === 1'b1),
      posedge SE &&& (ENABLE_NOT_EN === 1'b1),1.0);
      
      // setup SE-HL CK-HL
      $setup(negedge SE &&& (ENABLE_NOT_EN === 1'b1),
      negedge CK &&& (ENABLE_NOT_EN === 1'b1),1.0);
      
      // setup SE-LH CK-HL
      $setup(posedge SE &&& (ENABLE_NOT_EN === 1'b1),
      negedge CK &&& (ENABLE_NOT_EN === 1'b1),1.0);
      
      // mpw CK_lh 
      $width(posedge CK,1.0,0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_CKGTNLT_V5_6( Q, CK, EN, SE );
input CK, EN, SE;
output Q;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_CKGTNLT_V5_6_func SAEDRVT14_CKGTNLT_V5_6_behav_inst(.Q(Q),.CK(CK),.EN(EN),.SE(SE));
`else
   SAEDRVT14_CKGTNLT_V5_6_func SAEDRVT14_CKGTNLT_V5_6_inst(.Q(Q),.CK(CK),.EN(EN),.SE(SE));
   // spec_gates_begin
   not MGM_G0(MGM_W0,EN);
   not MGM_G1(MGM_W1,SE);
   and MGM_G2(ENABLE_NOT_EN_AND_NOT_SE,MGM_W1,MGM_W0);
   not MGM_G3(MGM_W2,EN);
   and MGM_G4(ENABLE_NOT_EN_AND_SE,SE,MGM_W2);
   not MGM_G5(MGM_W3,SE);
   and MGM_G6(ENABLE_EN_AND_NOT_SE,MGM_W3,EN);
   and MGM_G7(ENABLE_EN_AND_SE,SE,EN);
   not MGM_G8(ENABLE_NOT_SE,SE);
   not MGM_G9(ENABLE_NOT_EN,EN);
   // spec_gates_end
   // specify_block_begin
   specify

      if(EN===1'b0 && SE===1'b1)
      // comb arc CK --> Q
      (CK => Q) = (1.0,1.0);
      
      if(EN===1'b1 && SE===1'b0)
      // comb arc CK --> Q
      (CK => Q) = (1.0,1.0);
      
      if(EN===1'b1 && SE===1'b1)
      // comb arc CK --> Q
      (CK => Q) = (1.0,1.0);
      
      ifnone
      // comb arc CK --> Q
      (CK => Q) = (1.0,1.0);
      
      if(EN===1'b0 && SE===1'b0)
      // comb arc CK --> Q
      (CK => Q) = (1.0,1.0);
      
      $width(posedge CK &&& (ENABLE_NOT_EN_AND_NOT_SE === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_EN_AND_SE === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_EN_AND_NOT_SE === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_EN_AND_SE === 1'b1)
      ,1.0,0);
      
      // hold EN-HL CK-HL
      $hold(negedge CK &&& (ENABLE_NOT_SE === 1'b1),
      negedge EN &&& (ENABLE_NOT_SE === 1'b1),1.0);
      
      // hold EN-LH CK-HL
      $hold(negedge CK &&& (ENABLE_NOT_SE === 1'b1),
      posedge EN &&& (ENABLE_NOT_SE === 1'b1),1.0);
      
      // setup EN-HL CK-HL
      $setup(negedge EN &&& (ENABLE_NOT_SE === 1'b1),
      negedge CK &&& (ENABLE_NOT_SE === 1'b1),1.0);
      
      // setup EN-LH CK-HL
      $setup(posedge EN &&& (ENABLE_NOT_SE === 1'b1),
      negedge CK &&& (ENABLE_NOT_SE === 1'b1),1.0);
      
      // hold SE-HL CK-HL
      $hold(negedge CK &&& (ENABLE_NOT_EN === 1'b1),
      negedge SE &&& (ENABLE_NOT_EN === 1'b1),1.0);
      
      // hold SE-LH CK-HL
      $hold(negedge CK &&& (ENABLE_NOT_EN === 1'b1),
      posedge SE &&& (ENABLE_NOT_EN === 1'b1),1.0);
      
      // setup SE-HL CK-HL
      $setup(negedge SE &&& (ENABLE_NOT_EN === 1'b1),
      negedge CK &&& (ENABLE_NOT_EN === 1'b1),1.0);
      
      // setup SE-LH CK-HL
      $setup(posedge SE &&& (ENABLE_NOT_EN === 1'b1),
      negedge CK &&& (ENABLE_NOT_EN === 1'b1),1.0);
      
      // mpw CK_lh 
      $width(posedge CK,1.0,0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_CKGTNLT_V5_8( Q, CK, EN, SE );
input CK, EN, SE;
output Q;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_CKGTNLT_V5_8_func SAEDRVT14_CKGTNLT_V5_8_behav_inst(.Q(Q),.CK(CK),.EN(EN),.SE(SE));
`else
   SAEDRVT14_CKGTNLT_V5_8_func SAEDRVT14_CKGTNLT_V5_8_inst(.Q(Q),.CK(CK),.EN(EN),.SE(SE));
   // spec_gates_begin
   not MGM_G0(MGM_W0,EN);
   not MGM_G1(MGM_W1,SE);
   and MGM_G2(ENABLE_NOT_EN_AND_NOT_SE,MGM_W1,MGM_W0);
   not MGM_G3(MGM_W2,EN);
   and MGM_G4(ENABLE_NOT_EN_AND_SE,SE,MGM_W2);
   not MGM_G5(MGM_W3,SE);
   and MGM_G6(ENABLE_EN_AND_NOT_SE,MGM_W3,EN);
   and MGM_G7(ENABLE_EN_AND_SE,SE,EN);
   not MGM_G8(ENABLE_NOT_SE,SE);
   not MGM_G9(ENABLE_NOT_EN,EN);
   // spec_gates_end
   // specify_block_begin
   specify

      if(EN===1'b0 && SE===1'b1)
      // comb arc CK --> Q
      (CK => Q) = (1.0,1.0);
      
      if(EN===1'b1 && SE===1'b0)
      // comb arc CK --> Q
      (CK => Q) = (1.0,1.0);
      
      if(EN===1'b1 && SE===1'b1)
      // comb arc CK --> Q
      (CK => Q) = (1.0,1.0);
      
      ifnone
      // comb arc CK --> Q
      (CK => Q) = (1.0,1.0);
      
      if(EN===1'b0 && SE===1'b0)
      // comb arc CK --> Q
      (CK => Q) = (1.0,1.0);
      
      $width(posedge CK &&& (ENABLE_NOT_EN_AND_NOT_SE === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_EN_AND_SE === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_EN_AND_NOT_SE === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_EN_AND_SE === 1'b1)
      ,1.0,0);
      
      // hold EN-HL CK-HL
      $hold(negedge CK &&& (ENABLE_NOT_SE === 1'b1),
      negedge EN &&& (ENABLE_NOT_SE === 1'b1),1.0);
      
      // hold EN-LH CK-HL
      $hold(negedge CK &&& (ENABLE_NOT_SE === 1'b1),
      posedge EN &&& (ENABLE_NOT_SE === 1'b1),1.0);
      
      // setup EN-HL CK-HL
      $setup(negedge EN &&& (ENABLE_NOT_SE === 1'b1),
      negedge CK &&& (ENABLE_NOT_SE === 1'b1),1.0);
      
      // setup EN-LH CK-HL
      $setup(posedge EN &&& (ENABLE_NOT_SE === 1'b1),
      negedge CK &&& (ENABLE_NOT_SE === 1'b1),1.0);
      
      // hold SE-HL CK-HL
      $hold(negedge CK &&& (ENABLE_NOT_EN === 1'b1),
      negedge SE &&& (ENABLE_NOT_EN === 1'b1),1.0);
      
      // hold SE-LH CK-HL
      $hold(negedge CK &&& (ENABLE_NOT_EN === 1'b1),
      posedge SE &&& (ENABLE_NOT_EN === 1'b1),1.0);
      
      // setup SE-HL CK-HL
      $setup(negedge SE &&& (ENABLE_NOT_EN === 1'b1),
      negedge CK &&& (ENABLE_NOT_EN === 1'b1),1.0);
      
      // setup SE-LH CK-HL
      $setup(posedge SE &&& (ENABLE_NOT_EN === 1'b1),
      negedge CK &&& (ENABLE_NOT_EN === 1'b1),1.0);
      
      // mpw CK_lh 
      $width(posedge CK,1.0,0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_CKGTPLT_V5_1( Q, CK, EN, SE );
input CK, EN, SE;
output Q;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_CKGTPLT_V5_1_func SAEDRVT14_CKGTPLT_V5_1_behav_inst(.Q(Q),.CK(CK),.EN(EN),.SE(SE));
`else
   SAEDRVT14_CKGTPLT_V5_1_func SAEDRVT14_CKGTPLT_V5_1_inst(.Q(Q),.CK(CK),.EN(EN),.SE(SE));
   // spec_gates_begin
   not MGM_G0(MGM_W0,EN);
   not MGM_G1(MGM_W1,SE);
   and MGM_G2(ENABLE_NOT_EN_AND_NOT_SE,MGM_W1,MGM_W0);
   not MGM_G3(MGM_W2,EN);
   and MGM_G4(ENABLE_NOT_EN_AND_SE,SE,MGM_W2);
   not MGM_G5(MGM_W3,SE);
   and MGM_G6(ENABLE_EN_AND_NOT_SE,MGM_W3,EN);
   and MGM_G7(ENABLE_EN_AND_SE,SE,EN);
   not MGM_G8(ENABLE_NOT_SE,SE);
   not MGM_G9(ENABLE_NOT_EN,EN);
   // spec_gates_end
   // specify_block_begin
   specify

      if(EN===1'b0 && SE===1'b1)
      // comb arc CK --> Q
      (CK => Q) = (1.0,1.0);
      
      if(EN===1'b1 && SE===1'b0)
      // comb arc CK --> Q
      (CK => Q) = (1.0,1.0);
      
      if(EN===1'b1 && SE===1'b1)
      // comb arc CK --> Q
      (CK => Q) = (1.0,1.0);
      
      ifnone
      // comb arc CK --> Q
      (CK => Q) = (1.0,1.0);
      
      if(EN===1'b0 && SE===1'b0)
      // comb arc CK --> Q
      (CK => Q) = (1.0,1.0);
      
      $width(negedge CK &&& (ENABLE_NOT_EN_AND_NOT_SE === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_EN_AND_SE === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_EN_AND_NOT_SE === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_EN_AND_SE === 1'b1)
      ,1.0,0);
      
      // hold EN-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_SE === 1'b1),
      negedge EN &&& (ENABLE_NOT_SE === 1'b1),1.0);
      
      // hold EN-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_SE === 1'b1),
      posedge EN &&& (ENABLE_NOT_SE === 1'b1),1.0);
      
      // setup EN-HL CK-LH
      $setup(negedge EN &&& (ENABLE_NOT_SE === 1'b1),
      posedge CK &&& (ENABLE_NOT_SE === 1'b1),1.0);
      
      // setup EN-LH CK-LH
      $setup(posedge EN &&& (ENABLE_NOT_SE === 1'b1),
      posedge CK &&& (ENABLE_NOT_SE === 1'b1),1.0);
      
      // hold SE-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_EN === 1'b1),
      negedge SE &&& (ENABLE_NOT_EN === 1'b1),1.0);
      
      // hold SE-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_EN === 1'b1),
      posedge SE &&& (ENABLE_NOT_EN === 1'b1),1.0);
      
      // setup SE-HL CK-LH
      $setup(negedge SE &&& (ENABLE_NOT_EN === 1'b1),
      posedge CK &&& (ENABLE_NOT_EN === 1'b1),1.0);
      
      // setup SE-LH CK-LH
      $setup(posedge SE &&& (ENABLE_NOT_EN === 1'b1),
      posedge CK &&& (ENABLE_NOT_EN === 1'b1),1.0);
      
      // mpw CK_hl 
      $width(negedge CK,1.0,0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_CKGTPLT_V5_12( Q, CK, EN, SE );
input CK, EN, SE;
output Q;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_CKGTPLT_V5_12_func SAEDRVT14_CKGTPLT_V5_12_behav_inst(.Q(Q),.CK(CK),.EN(EN),.SE(SE));
`else
   SAEDRVT14_CKGTPLT_V5_12_func SAEDRVT14_CKGTPLT_V5_12_inst(.Q(Q),.CK(CK),.EN(EN),.SE(SE));
   // spec_gates_begin
   not MGM_G0(MGM_W0,EN);
   not MGM_G1(MGM_W1,SE);
   and MGM_G2(ENABLE_NOT_EN_AND_NOT_SE,MGM_W1,MGM_W0);
   not MGM_G3(MGM_W2,EN);
   and MGM_G4(ENABLE_NOT_EN_AND_SE,SE,MGM_W2);
   not MGM_G5(MGM_W3,SE);
   and MGM_G6(ENABLE_EN_AND_NOT_SE,MGM_W3,EN);
   and MGM_G7(ENABLE_EN_AND_SE,SE,EN);
   not MGM_G8(ENABLE_NOT_SE,SE);
   not MGM_G9(ENABLE_NOT_EN,EN);
   // spec_gates_end
   // specify_block_begin
   specify

      if(EN===1'b0 && SE===1'b1)
      // comb arc CK --> Q
      (CK => Q) = (1.0,1.0);
      
      if(EN===1'b1 && SE===1'b0)
      // comb arc CK --> Q
      (CK => Q) = (1.0,1.0);
      
      if(EN===1'b1 && SE===1'b1)
      // comb arc CK --> Q
      (CK => Q) = (1.0,1.0);
      
      ifnone
      // comb arc CK --> Q
      (CK => Q) = (1.0,1.0);
      
      if(EN===1'b0 && SE===1'b0)
      // comb arc CK --> Q
      (CK => Q) = (1.0,1.0);
      
      $width(negedge CK &&& (ENABLE_NOT_EN_AND_NOT_SE === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_EN_AND_SE === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_EN_AND_NOT_SE === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_EN_AND_SE === 1'b1)
      ,1.0,0);
      
      // hold EN-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_SE === 1'b1),
      negedge EN &&& (ENABLE_NOT_SE === 1'b1),1.0);
      
      // hold EN-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_SE === 1'b1),
      posedge EN &&& (ENABLE_NOT_SE === 1'b1),1.0);
      
      // setup EN-HL CK-LH
      $setup(negedge EN &&& (ENABLE_NOT_SE === 1'b1),
      posedge CK &&& (ENABLE_NOT_SE === 1'b1),1.0);
      
      // setup EN-LH CK-LH
      $setup(posedge EN &&& (ENABLE_NOT_SE === 1'b1),
      posedge CK &&& (ENABLE_NOT_SE === 1'b1),1.0);
      
      // hold SE-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_EN === 1'b1),
      negedge SE &&& (ENABLE_NOT_EN === 1'b1),1.0);
      
      // hold SE-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_EN === 1'b1),
      posedge SE &&& (ENABLE_NOT_EN === 1'b1),1.0);
      
      // setup SE-HL CK-LH
      $setup(negedge SE &&& (ENABLE_NOT_EN === 1'b1),
      posedge CK &&& (ENABLE_NOT_EN === 1'b1),1.0);
      
      // setup SE-LH CK-LH
      $setup(posedge SE &&& (ENABLE_NOT_EN === 1'b1),
      posedge CK &&& (ENABLE_NOT_EN === 1'b1),1.0);
      
      // mpw CK_hl 
      $width(negedge CK,1.0,0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_CKGTPLT_V5_16( Q, CK, EN, SE );
input CK, EN, SE;
output Q;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_CKGTPLT_V5_16_func SAEDRVT14_CKGTPLT_V5_16_behav_inst(.Q(Q),.CK(CK),.EN(EN),.SE(SE));
`else
   SAEDRVT14_CKGTPLT_V5_16_func SAEDRVT14_CKGTPLT_V5_16_inst(.Q(Q),.CK(CK),.EN(EN),.SE(SE));
   // spec_gates_begin
   not MGM_G0(MGM_W0,EN);
   not MGM_G1(MGM_W1,SE);
   and MGM_G2(ENABLE_NOT_EN_AND_NOT_SE,MGM_W1,MGM_W0);
   not MGM_G3(MGM_W2,EN);
   and MGM_G4(ENABLE_NOT_EN_AND_SE,SE,MGM_W2);
   not MGM_G5(MGM_W3,SE);
   and MGM_G6(ENABLE_EN_AND_NOT_SE,MGM_W3,EN);
   and MGM_G7(ENABLE_EN_AND_SE,SE,EN);
   not MGM_G8(ENABLE_NOT_SE,SE);
   not MGM_G9(ENABLE_NOT_EN,EN);
   // spec_gates_end
   // specify_block_begin
   specify

      if(EN===1'b0 && SE===1'b1)
      // comb arc CK --> Q
      (CK => Q) = (1.0,1.0);
      
      if(EN===1'b1 && SE===1'b0)
      // comb arc CK --> Q
      (CK => Q) = (1.0,1.0);
      
      if(EN===1'b1 && SE===1'b1)
      // comb arc CK --> Q
      (CK => Q) = (1.0,1.0);
      
      ifnone
      // comb arc CK --> Q
      (CK => Q) = (1.0,1.0);
      
      if(EN===1'b0 && SE===1'b0)
      // comb arc CK --> Q
      (CK => Q) = (1.0,1.0);
      
      $width(negedge CK &&& (ENABLE_NOT_EN_AND_NOT_SE === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_EN_AND_SE === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_EN_AND_NOT_SE === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_EN_AND_SE === 1'b1)
      ,1.0,0);
      
      // hold EN-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_SE === 1'b1),
      negedge EN &&& (ENABLE_NOT_SE === 1'b1),1.0);
      
      // hold EN-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_SE === 1'b1),
      posedge EN &&& (ENABLE_NOT_SE === 1'b1),1.0);
      
      // setup EN-HL CK-LH
      $setup(negedge EN &&& (ENABLE_NOT_SE === 1'b1),
      posedge CK &&& (ENABLE_NOT_SE === 1'b1),1.0);
      
      // setup EN-LH CK-LH
      $setup(posedge EN &&& (ENABLE_NOT_SE === 1'b1),
      posedge CK &&& (ENABLE_NOT_SE === 1'b1),1.0);
      
      // hold SE-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_EN === 1'b1),
      negedge SE &&& (ENABLE_NOT_EN === 1'b1),1.0);
      
      // hold SE-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_EN === 1'b1),
      posedge SE &&& (ENABLE_NOT_EN === 1'b1),1.0);
      
      // setup SE-HL CK-LH
      $setup(negedge SE &&& (ENABLE_NOT_EN === 1'b1),
      posedge CK &&& (ENABLE_NOT_EN === 1'b1),1.0);
      
      // setup SE-LH CK-LH
      $setup(posedge SE &&& (ENABLE_NOT_EN === 1'b1),
      posedge CK &&& (ENABLE_NOT_EN === 1'b1),1.0);
      
      // mpw CK_hl 
      $width(negedge CK,1.0,0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_CKGTPLT_V5_2( Q, CK, EN, SE );
input CK, EN, SE;
output Q;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_CKGTPLT_V5_2_func SAEDRVT14_CKGTPLT_V5_2_behav_inst(.Q(Q),.CK(CK),.EN(EN),.SE(SE));
`else
   SAEDRVT14_CKGTPLT_V5_2_func SAEDRVT14_CKGTPLT_V5_2_inst(.Q(Q),.CK(CK),.EN(EN),.SE(SE));
   // spec_gates_begin
   not MGM_G0(MGM_W0,EN);
   not MGM_G1(MGM_W1,SE);
   and MGM_G2(ENABLE_NOT_EN_AND_NOT_SE,MGM_W1,MGM_W0);
   not MGM_G3(MGM_W2,EN);
   and MGM_G4(ENABLE_NOT_EN_AND_SE,SE,MGM_W2);
   not MGM_G5(MGM_W3,SE);
   and MGM_G6(ENABLE_EN_AND_NOT_SE,MGM_W3,EN);
   and MGM_G7(ENABLE_EN_AND_SE,SE,EN);
   not MGM_G8(ENABLE_NOT_SE,SE);
   not MGM_G9(ENABLE_NOT_EN,EN);
   // spec_gates_end
   // specify_block_begin
   specify

      if(EN===1'b0 && SE===1'b1)
      // comb arc CK --> Q
      (CK => Q) = (1.0,1.0);
      
      if(EN===1'b1 && SE===1'b0)
      // comb arc CK --> Q
      (CK => Q) = (1.0,1.0);
      
      if(EN===1'b1 && SE===1'b1)
      // comb arc CK --> Q
      (CK => Q) = (1.0,1.0);
      
      ifnone
      // comb arc CK --> Q
      (CK => Q) = (1.0,1.0);
      
      if(EN===1'b0 && SE===1'b0)
      // comb arc CK --> Q
      (CK => Q) = (1.0,1.0);
      
      $width(negedge CK &&& (ENABLE_NOT_EN_AND_NOT_SE === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_EN_AND_SE === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_EN_AND_NOT_SE === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_EN_AND_SE === 1'b1)
      ,1.0,0);
      
      // hold EN-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_SE === 1'b1),
      negedge EN &&& (ENABLE_NOT_SE === 1'b1),1.0);
      
      // hold EN-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_SE === 1'b1),
      posedge EN &&& (ENABLE_NOT_SE === 1'b1),1.0);
      
      // setup EN-HL CK-LH
      $setup(negedge EN &&& (ENABLE_NOT_SE === 1'b1),
      posedge CK &&& (ENABLE_NOT_SE === 1'b1),1.0);
      
      // setup EN-LH CK-LH
      $setup(posedge EN &&& (ENABLE_NOT_SE === 1'b1),
      posedge CK &&& (ENABLE_NOT_SE === 1'b1),1.0);
      
      // hold SE-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_EN === 1'b1),
      negedge SE &&& (ENABLE_NOT_EN === 1'b1),1.0);
      
      // hold SE-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_EN === 1'b1),
      posedge SE &&& (ENABLE_NOT_EN === 1'b1),1.0);
      
      // setup SE-HL CK-LH
      $setup(negedge SE &&& (ENABLE_NOT_EN === 1'b1),
      posedge CK &&& (ENABLE_NOT_EN === 1'b1),1.0);
      
      // setup SE-LH CK-LH
      $setup(posedge SE &&& (ENABLE_NOT_EN === 1'b1),
      posedge CK &&& (ENABLE_NOT_EN === 1'b1),1.0);
      
      // mpw CK_hl 
      $width(negedge CK,1.0,0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_CKGTPLT_V5_20( Q, CK, EN, SE );
input CK, EN, SE;
output Q;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_CKGTPLT_V5_20_func SAEDRVT14_CKGTPLT_V5_20_behav_inst(.Q(Q),.CK(CK),.EN(EN),.SE(SE));
`else
   SAEDRVT14_CKGTPLT_V5_20_func SAEDRVT14_CKGTPLT_V5_20_inst(.Q(Q),.CK(CK),.EN(EN),.SE(SE));
   // spec_gates_begin
   not MGM_G0(MGM_W0,EN);
   not MGM_G1(MGM_W1,SE);
   and MGM_G2(ENABLE_NOT_EN_AND_NOT_SE,MGM_W1,MGM_W0);
   not MGM_G3(MGM_W2,EN);
   and MGM_G4(ENABLE_NOT_EN_AND_SE,SE,MGM_W2);
   not MGM_G5(MGM_W3,SE);
   and MGM_G6(ENABLE_EN_AND_NOT_SE,MGM_W3,EN);
   and MGM_G7(ENABLE_EN_AND_SE,SE,EN);
   not MGM_G8(ENABLE_NOT_SE,SE);
   not MGM_G9(ENABLE_NOT_EN,EN);
   // spec_gates_end
   // specify_block_begin
   specify

      if(EN===1'b0 && SE===1'b1)
      // comb arc CK --> Q
      (CK => Q) = (1.0,1.0);
      
      if(EN===1'b1 && SE===1'b0)
      // comb arc CK --> Q
      (CK => Q) = (1.0,1.0);
      
      if(EN===1'b1 && SE===1'b1)
      // comb arc CK --> Q
      (CK => Q) = (1.0,1.0);
      
      ifnone
      // comb arc CK --> Q
      (CK => Q) = (1.0,1.0);
      
      if(EN===1'b0 && SE===1'b0)
      // comb arc CK --> Q
      (CK => Q) = (1.0,1.0);
      
      $width(negedge CK &&& (ENABLE_NOT_EN_AND_NOT_SE === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_EN_AND_SE === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_EN_AND_NOT_SE === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_EN_AND_SE === 1'b1)
      ,1.0,0);
      
      // hold EN-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_SE === 1'b1),
      negedge EN &&& (ENABLE_NOT_SE === 1'b1),1.0);
      
      // hold EN-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_SE === 1'b1),
      posedge EN &&& (ENABLE_NOT_SE === 1'b1),1.0);
      
      // setup EN-HL CK-LH
      $setup(negedge EN &&& (ENABLE_NOT_SE === 1'b1),
      posedge CK &&& (ENABLE_NOT_SE === 1'b1),1.0);
      
      // setup EN-LH CK-LH
      $setup(posedge EN &&& (ENABLE_NOT_SE === 1'b1),
      posedge CK &&& (ENABLE_NOT_SE === 1'b1),1.0);
      
      // hold SE-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_EN === 1'b1),
      negedge SE &&& (ENABLE_NOT_EN === 1'b1),1.0);
      
      // hold SE-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_EN === 1'b1),
      posedge SE &&& (ENABLE_NOT_EN === 1'b1),1.0);
      
      // setup SE-HL CK-LH
      $setup(negedge SE &&& (ENABLE_NOT_EN === 1'b1),
      posedge CK &&& (ENABLE_NOT_EN === 1'b1),1.0);
      
      // setup SE-LH CK-LH
      $setup(posedge SE &&& (ENABLE_NOT_EN === 1'b1),
      posedge CK &&& (ENABLE_NOT_EN === 1'b1),1.0);
      
      // mpw CK_hl 
      $width(negedge CK,1.0,0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_CKGTPLT_V5_24( Q, CK, EN, SE );
input CK, EN, SE;
output Q;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_CKGTPLT_V5_24_func SAEDRVT14_CKGTPLT_V5_24_behav_inst(.Q(Q),.CK(CK),.EN(EN),.SE(SE));
`else
   SAEDRVT14_CKGTPLT_V5_24_func SAEDRVT14_CKGTPLT_V5_24_inst(.Q(Q),.CK(CK),.EN(EN),.SE(SE));
   // spec_gates_begin
   not MGM_G0(MGM_W0,EN);
   not MGM_G1(MGM_W1,SE);
   and MGM_G2(ENABLE_NOT_EN_AND_NOT_SE,MGM_W1,MGM_W0);
   not MGM_G3(MGM_W2,EN);
   and MGM_G4(ENABLE_NOT_EN_AND_SE,SE,MGM_W2);
   not MGM_G5(MGM_W3,SE);
   and MGM_G6(ENABLE_EN_AND_NOT_SE,MGM_W3,EN);
   and MGM_G7(ENABLE_EN_AND_SE,SE,EN);
   not MGM_G8(ENABLE_NOT_SE,SE);
   not MGM_G9(ENABLE_NOT_EN,EN);
   // spec_gates_end
   // specify_block_begin
   specify

      if(EN===1'b0 && SE===1'b1)
      // comb arc CK --> Q
      (CK => Q) = (1.0,1.0);
      
      if(EN===1'b1 && SE===1'b0)
      // comb arc CK --> Q
      (CK => Q) = (1.0,1.0);
      
      if(EN===1'b1 && SE===1'b1)
      // comb arc CK --> Q
      (CK => Q) = (1.0,1.0);
      
      ifnone
      // comb arc CK --> Q
      (CK => Q) = (1.0,1.0);
      
      if(EN===1'b0 && SE===1'b0)
      // comb arc CK --> Q
      (CK => Q) = (1.0,1.0);
      
      $width(negedge CK &&& (ENABLE_NOT_EN_AND_NOT_SE === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_EN_AND_SE === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_EN_AND_NOT_SE === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_EN_AND_SE === 1'b1)
      ,1.0,0);
      
      // hold EN-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_SE === 1'b1),
      negedge EN &&& (ENABLE_NOT_SE === 1'b1),1.0);
      
      // hold EN-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_SE === 1'b1),
      posedge EN &&& (ENABLE_NOT_SE === 1'b1),1.0);
      
      // setup EN-HL CK-LH
      $setup(negedge EN &&& (ENABLE_NOT_SE === 1'b1),
      posedge CK &&& (ENABLE_NOT_SE === 1'b1),1.0);
      
      // setup EN-LH CK-LH
      $setup(posedge EN &&& (ENABLE_NOT_SE === 1'b1),
      posedge CK &&& (ENABLE_NOT_SE === 1'b1),1.0);
      
      // hold SE-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_EN === 1'b1),
      negedge SE &&& (ENABLE_NOT_EN === 1'b1),1.0);
      
      // hold SE-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_EN === 1'b1),
      posedge SE &&& (ENABLE_NOT_EN === 1'b1),1.0);
      
      // setup SE-HL CK-LH
      $setup(negedge SE &&& (ENABLE_NOT_EN === 1'b1),
      posedge CK &&& (ENABLE_NOT_EN === 1'b1),1.0);
      
      // setup SE-LH CK-LH
      $setup(posedge SE &&& (ENABLE_NOT_EN === 1'b1),
      posedge CK &&& (ENABLE_NOT_EN === 1'b1),1.0);
      
      // mpw CK_hl 
      $width(negedge CK,1.0,0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_CKGTPLT_V5_3( Q, CK, EN, SE );
input CK, EN, SE;
output Q;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_CKGTPLT_V5_3_func SAEDRVT14_CKGTPLT_V5_3_behav_inst(.Q(Q),.CK(CK),.EN(EN),.SE(SE));
`else
   SAEDRVT14_CKGTPLT_V5_3_func SAEDRVT14_CKGTPLT_V5_3_inst(.Q(Q),.CK(CK),.EN(EN),.SE(SE));
   // spec_gates_begin
   not MGM_G0(MGM_W0,EN);
   not MGM_G1(MGM_W1,SE);
   and MGM_G2(ENABLE_NOT_EN_AND_NOT_SE,MGM_W1,MGM_W0);
   not MGM_G3(MGM_W2,EN);
   and MGM_G4(ENABLE_NOT_EN_AND_SE,SE,MGM_W2);
   not MGM_G5(MGM_W3,SE);
   and MGM_G6(ENABLE_EN_AND_NOT_SE,MGM_W3,EN);
   and MGM_G7(ENABLE_EN_AND_SE,SE,EN);
   not MGM_G8(ENABLE_NOT_SE,SE);
   not MGM_G9(ENABLE_NOT_EN,EN);
   // spec_gates_end
   // specify_block_begin
   specify

      if(EN===1'b0 && SE===1'b1)
      // comb arc CK --> Q
      (CK => Q) = (1.0,1.0);
      
      if(EN===1'b1 && SE===1'b0)
      // comb arc CK --> Q
      (CK => Q) = (1.0,1.0);
      
      if(EN===1'b1 && SE===1'b1)
      // comb arc CK --> Q
      (CK => Q) = (1.0,1.0);
      
      ifnone
      // comb arc CK --> Q
      (CK => Q) = (1.0,1.0);
      
      if(EN===1'b0 && SE===1'b0)
      // comb arc CK --> Q
      (CK => Q) = (1.0,1.0);
      
      $width(negedge CK &&& (ENABLE_NOT_EN_AND_NOT_SE === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_EN_AND_SE === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_EN_AND_NOT_SE === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_EN_AND_SE === 1'b1)
      ,1.0,0);
      
      // hold EN-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_SE === 1'b1),
      negedge EN &&& (ENABLE_NOT_SE === 1'b1),1.0);
      
      // hold EN-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_SE === 1'b1),
      posedge EN &&& (ENABLE_NOT_SE === 1'b1),1.0);
      
      // setup EN-HL CK-LH
      $setup(negedge EN &&& (ENABLE_NOT_SE === 1'b1),
      posedge CK &&& (ENABLE_NOT_SE === 1'b1),1.0);
      
      // setup EN-LH CK-LH
      $setup(posedge EN &&& (ENABLE_NOT_SE === 1'b1),
      posedge CK &&& (ENABLE_NOT_SE === 1'b1),1.0);
      
      // hold SE-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_EN === 1'b1),
      negedge SE &&& (ENABLE_NOT_EN === 1'b1),1.0);
      
      // hold SE-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_EN === 1'b1),
      posedge SE &&& (ENABLE_NOT_EN === 1'b1),1.0);
      
      // setup SE-HL CK-LH
      $setup(negedge SE &&& (ENABLE_NOT_EN === 1'b1),
      posedge CK &&& (ENABLE_NOT_EN === 1'b1),1.0);
      
      // setup SE-LH CK-LH
      $setup(posedge SE &&& (ENABLE_NOT_EN === 1'b1),
      posedge CK &&& (ENABLE_NOT_EN === 1'b1),1.0);
      
      // mpw CK_hl 
      $width(negedge CK,1.0,0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_CKGTPLT_V5_4( Q, CK, EN, SE );
input CK, EN, SE;
output Q;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_CKGTPLT_V5_4_func SAEDRVT14_CKGTPLT_V5_4_behav_inst(.Q(Q),.CK(CK),.EN(EN),.SE(SE));
`else
   SAEDRVT14_CKGTPLT_V5_4_func SAEDRVT14_CKGTPLT_V5_4_inst(.Q(Q),.CK(CK),.EN(EN),.SE(SE));
   // spec_gates_begin
   not MGM_G0(MGM_W0,EN);
   not MGM_G1(MGM_W1,SE);
   and MGM_G2(ENABLE_NOT_EN_AND_NOT_SE,MGM_W1,MGM_W0);
   not MGM_G3(MGM_W2,EN);
   and MGM_G4(ENABLE_NOT_EN_AND_SE,SE,MGM_W2);
   not MGM_G5(MGM_W3,SE);
   and MGM_G6(ENABLE_EN_AND_NOT_SE,MGM_W3,EN);
   and MGM_G7(ENABLE_EN_AND_SE,SE,EN);
   not MGM_G8(ENABLE_NOT_SE,SE);
   not MGM_G9(ENABLE_NOT_EN,EN);
   // spec_gates_end
   // specify_block_begin
   specify

      if(EN===1'b0 && SE===1'b1)
      // comb arc CK --> Q
      (CK => Q) = (1.0,1.0);
      
      if(EN===1'b1 && SE===1'b0)
      // comb arc CK --> Q
      (CK => Q) = (1.0,1.0);
      
      if(EN===1'b1 && SE===1'b1)
      // comb arc CK --> Q
      (CK => Q) = (1.0,1.0);
      
      ifnone
      // comb arc CK --> Q
      (CK => Q) = (1.0,1.0);
      
      if(EN===1'b0 && SE===1'b0)
      // comb arc CK --> Q
      (CK => Q) = (1.0,1.0);
      
      $width(negedge CK &&& (ENABLE_NOT_EN_AND_NOT_SE === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_EN_AND_SE === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_EN_AND_NOT_SE === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_EN_AND_SE === 1'b1)
      ,1.0,0);
      
      // hold EN-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_SE === 1'b1),
      negedge EN &&& (ENABLE_NOT_SE === 1'b1),1.0);
      
      // hold EN-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_SE === 1'b1),
      posedge EN &&& (ENABLE_NOT_SE === 1'b1),1.0);
      
      // setup EN-HL CK-LH
      $setup(negedge EN &&& (ENABLE_NOT_SE === 1'b1),
      posedge CK &&& (ENABLE_NOT_SE === 1'b1),1.0);
      
      // setup EN-LH CK-LH
      $setup(posedge EN &&& (ENABLE_NOT_SE === 1'b1),
      posedge CK &&& (ENABLE_NOT_SE === 1'b1),1.0);
      
      // hold SE-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_EN === 1'b1),
      negedge SE &&& (ENABLE_NOT_EN === 1'b1),1.0);
      
      // hold SE-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_EN === 1'b1),
      posedge SE &&& (ENABLE_NOT_EN === 1'b1),1.0);
      
      // setup SE-HL CK-LH
      $setup(negedge SE &&& (ENABLE_NOT_EN === 1'b1),
      posedge CK &&& (ENABLE_NOT_EN === 1'b1),1.0);
      
      // setup SE-LH CK-LH
      $setup(posedge SE &&& (ENABLE_NOT_EN === 1'b1),
      posedge CK &&& (ENABLE_NOT_EN === 1'b1),1.0);
      
      // mpw CK_hl 
      $width(negedge CK,1.0,0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_CKGTPLT_V5_5( Q, CK, EN, SE );
input CK, EN, SE;
output Q;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_CKGTPLT_V5_5_func SAEDRVT14_CKGTPLT_V5_5_behav_inst(.Q(Q),.CK(CK),.EN(EN),.SE(SE));
`else
   SAEDRVT14_CKGTPLT_V5_5_func SAEDRVT14_CKGTPLT_V5_5_inst(.Q(Q),.CK(CK),.EN(EN),.SE(SE));
   // spec_gates_begin
   not MGM_G0(MGM_W0,EN);
   not MGM_G1(MGM_W1,SE);
   and MGM_G2(ENABLE_NOT_EN_AND_NOT_SE,MGM_W1,MGM_W0);
   not MGM_G3(MGM_W2,EN);
   and MGM_G4(ENABLE_NOT_EN_AND_SE,SE,MGM_W2);
   not MGM_G5(MGM_W3,SE);
   and MGM_G6(ENABLE_EN_AND_NOT_SE,MGM_W3,EN);
   and MGM_G7(ENABLE_EN_AND_SE,SE,EN);
   not MGM_G8(ENABLE_NOT_SE,SE);
   not MGM_G9(ENABLE_NOT_EN,EN);
   // spec_gates_end
   // specify_block_begin
   specify

      if(EN===1'b0 && SE===1'b1)
      // comb arc CK --> Q
      (CK => Q) = (1.0,1.0);
      
      if(EN===1'b1 && SE===1'b0)
      // comb arc CK --> Q
      (CK => Q) = (1.0,1.0);
      
      if(EN===1'b1 && SE===1'b1)
      // comb arc CK --> Q
      (CK => Q) = (1.0,1.0);
      
      ifnone
      // comb arc CK --> Q
      (CK => Q) = (1.0,1.0);
      
      if(EN===1'b0 && SE===1'b0)
      // comb arc CK --> Q
      (CK => Q) = (1.0,1.0);
      
      $width(negedge CK &&& (ENABLE_NOT_EN_AND_NOT_SE === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_EN_AND_SE === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_EN_AND_NOT_SE === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_EN_AND_SE === 1'b1)
      ,1.0,0);
      
      // hold EN-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_SE === 1'b1),
      negedge EN &&& (ENABLE_NOT_SE === 1'b1),1.0);
      
      // hold EN-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_SE === 1'b1),
      posedge EN &&& (ENABLE_NOT_SE === 1'b1),1.0);
      
      // setup EN-HL CK-LH
      $setup(negedge EN &&& (ENABLE_NOT_SE === 1'b1),
      posedge CK &&& (ENABLE_NOT_SE === 1'b1),1.0);
      
      // setup EN-LH CK-LH
      $setup(posedge EN &&& (ENABLE_NOT_SE === 1'b1),
      posedge CK &&& (ENABLE_NOT_SE === 1'b1),1.0);
      
      // hold SE-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_EN === 1'b1),
      negedge SE &&& (ENABLE_NOT_EN === 1'b1),1.0);
      
      // hold SE-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_EN === 1'b1),
      posedge SE &&& (ENABLE_NOT_EN === 1'b1),1.0);
      
      // setup SE-HL CK-LH
      $setup(negedge SE &&& (ENABLE_NOT_EN === 1'b1),
      posedge CK &&& (ENABLE_NOT_EN === 1'b1),1.0);
      
      // setup SE-LH CK-LH
      $setup(posedge SE &&& (ENABLE_NOT_EN === 1'b1),
      posedge CK &&& (ENABLE_NOT_EN === 1'b1),1.0);
      
      // mpw CK_hl 
      $width(negedge CK,1.0,0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_CKGTPLT_V5_6( Q, CK, EN, SE );
input CK, EN, SE;
output Q;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_CKGTPLT_V5_6_func SAEDRVT14_CKGTPLT_V5_6_behav_inst(.Q(Q),.CK(CK),.EN(EN),.SE(SE));
`else
   SAEDRVT14_CKGTPLT_V5_6_func SAEDRVT14_CKGTPLT_V5_6_inst(.Q(Q),.CK(CK),.EN(EN),.SE(SE));
   // spec_gates_begin
   not MGM_G0(MGM_W0,EN);
   not MGM_G1(MGM_W1,SE);
   and MGM_G2(ENABLE_NOT_EN_AND_NOT_SE,MGM_W1,MGM_W0);
   not MGM_G3(MGM_W2,EN);
   and MGM_G4(ENABLE_NOT_EN_AND_SE,SE,MGM_W2);
   not MGM_G5(MGM_W3,SE);
   and MGM_G6(ENABLE_EN_AND_NOT_SE,MGM_W3,EN);
   and MGM_G7(ENABLE_EN_AND_SE,SE,EN);
   not MGM_G8(ENABLE_NOT_SE,SE);
   not MGM_G9(ENABLE_NOT_EN,EN);
   // spec_gates_end
   // specify_block_begin
   specify

      if(EN===1'b0 && SE===1'b1)
      // comb arc CK --> Q
      (CK => Q) = (1.0,1.0);
      
      if(EN===1'b1 && SE===1'b0)
      // comb arc CK --> Q
      (CK => Q) = (1.0,1.0);
      
      if(EN===1'b1 && SE===1'b1)
      // comb arc CK --> Q
      (CK => Q) = (1.0,1.0);
      
      ifnone
      // comb arc CK --> Q
      (CK => Q) = (1.0,1.0);
      
      if(EN===1'b0 && SE===1'b0)
      // comb arc CK --> Q
      (CK => Q) = (1.0,1.0);
      
      $width(negedge CK &&& (ENABLE_NOT_EN_AND_NOT_SE === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_EN_AND_SE === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_EN_AND_NOT_SE === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_EN_AND_SE === 1'b1)
      ,1.0,0);
      
      // hold EN-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_SE === 1'b1),
      negedge EN &&& (ENABLE_NOT_SE === 1'b1),1.0);
      
      // hold EN-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_SE === 1'b1),
      posedge EN &&& (ENABLE_NOT_SE === 1'b1),1.0);
      
      // setup EN-HL CK-LH
      $setup(negedge EN &&& (ENABLE_NOT_SE === 1'b1),
      posedge CK &&& (ENABLE_NOT_SE === 1'b1),1.0);
      
      // setup EN-LH CK-LH
      $setup(posedge EN &&& (ENABLE_NOT_SE === 1'b1),
      posedge CK &&& (ENABLE_NOT_SE === 1'b1),1.0);
      
      // hold SE-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_EN === 1'b1),
      negedge SE &&& (ENABLE_NOT_EN === 1'b1),1.0);
      
      // hold SE-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_EN === 1'b1),
      posedge SE &&& (ENABLE_NOT_EN === 1'b1),1.0);
      
      // setup SE-HL CK-LH
      $setup(negedge SE &&& (ENABLE_NOT_EN === 1'b1),
      posedge CK &&& (ENABLE_NOT_EN === 1'b1),1.0);
      
      // setup SE-LH CK-LH
      $setup(posedge SE &&& (ENABLE_NOT_EN === 1'b1),
      posedge CK &&& (ENABLE_NOT_EN === 1'b1),1.0);
      
      // mpw CK_hl 
      $width(negedge CK,1.0,0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_CKGTPLT_V5_8( Q, CK, EN, SE );
input CK, EN, SE;
output Q;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_CKGTPLT_V5_8_func SAEDRVT14_CKGTPLT_V5_8_behav_inst(.Q(Q),.CK(CK),.EN(EN),.SE(SE));
`else
   SAEDRVT14_CKGTPLT_V5_8_func SAEDRVT14_CKGTPLT_V5_8_inst(.Q(Q),.CK(CK),.EN(EN),.SE(SE));
   // spec_gates_begin
   not MGM_G0(MGM_W0,EN);
   not MGM_G1(MGM_W1,SE);
   and MGM_G2(ENABLE_NOT_EN_AND_NOT_SE,MGM_W1,MGM_W0);
   not MGM_G3(MGM_W2,EN);
   and MGM_G4(ENABLE_NOT_EN_AND_SE,SE,MGM_W2);
   not MGM_G5(MGM_W3,SE);
   and MGM_G6(ENABLE_EN_AND_NOT_SE,MGM_W3,EN);
   and MGM_G7(ENABLE_EN_AND_SE,SE,EN);
   not MGM_G8(ENABLE_NOT_SE,SE);
   not MGM_G9(ENABLE_NOT_EN,EN);
   // spec_gates_end
   // specify_block_begin
   specify

      if(EN===1'b0 && SE===1'b1)
      // comb arc CK --> Q
      (CK => Q) = (1.0,1.0);
      
      if(EN===1'b1 && SE===1'b0)
      // comb arc CK --> Q
      (CK => Q) = (1.0,1.0);
      
      if(EN===1'b1 && SE===1'b1)
      // comb arc CK --> Q
      (CK => Q) = (1.0,1.0);
      
      ifnone
      // comb arc CK --> Q
      (CK => Q) = (1.0,1.0);
      
      if(EN===1'b0 && SE===1'b0)
      // comb arc CK --> Q
      (CK => Q) = (1.0,1.0);
      
      $width(negedge CK &&& (ENABLE_NOT_EN_AND_NOT_SE === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_EN_AND_SE === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_EN_AND_NOT_SE === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_EN_AND_SE === 1'b1)
      ,1.0,0);
      
      // hold EN-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_SE === 1'b1),
      negedge EN &&& (ENABLE_NOT_SE === 1'b1),1.0);
      
      // hold EN-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_SE === 1'b1),
      posedge EN &&& (ENABLE_NOT_SE === 1'b1),1.0);
      
      // setup EN-HL CK-LH
      $setup(negedge EN &&& (ENABLE_NOT_SE === 1'b1),
      posedge CK &&& (ENABLE_NOT_SE === 1'b1),1.0);
      
      // setup EN-LH CK-LH
      $setup(posedge EN &&& (ENABLE_NOT_SE === 1'b1),
      posedge CK &&& (ENABLE_NOT_SE === 1'b1),1.0);
      
      // hold SE-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_EN === 1'b1),
      negedge SE &&& (ENABLE_NOT_EN === 1'b1),1.0);
      
      // hold SE-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_EN === 1'b1),
      posedge SE &&& (ENABLE_NOT_EN === 1'b1),1.0);
      
      // setup SE-HL CK-LH
      $setup(negedge SE &&& (ENABLE_NOT_EN === 1'b1),
      posedge CK &&& (ENABLE_NOT_EN === 1'b1),1.0);
      
      // setup SE-LH CK-LH
      $setup(posedge SE &&& (ENABLE_NOT_EN === 1'b1),
      posedge CK &&& (ENABLE_NOT_EN === 1'b1),1.0);
      
      // mpw CK_hl 
      $width(negedge CK,1.0,0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_CKGTPL_V5_0P5( Q, CK, EN );
input CK, EN;
output Q;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_CKGTPL_V5_0P5_func SAEDRVT14_CKGTPL_V5_0P5_behav_inst(.Q(Q),.CK(CK),.EN(EN));
`else
   SAEDRVT14_CKGTPL_V5_0P5_func SAEDRVT14_CKGTPL_V5_0P5_inst(.Q(Q),.CK(CK),.EN(EN));
   // spec_gates_begin
   not MGM_G0(ENABLE_NOT_EN,EN);
   buf MGM_G1(ENABLE_EN,EN);
   // spec_gates_end
   // specify_block_begin
   specify

      if(EN===1'b1)
      // comb arc CK --> Q
      (CK => Q) = (1.0,1.0);
      
      ifnone
      // comb arc CK --> Q
      (CK => Q) = (1.0,1.0);
      
      if(EN===1'b0)
      // comb arc CK --> Q
      (CK => Q) = (1.0,1.0);
      
      $width(negedge CK &&& (ENABLE_NOT_EN === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_EN === 1'b1)
      ,1.0,0);
      
      // hold EN-HL CK-LH
      $hold(posedge CK,negedge EN,1.0);
      
      // hold EN-LH CK-LH
      $hold(posedge CK,posedge EN,1.0);
      
      // setup EN-HL CK-LH
      $setup(negedge EN,posedge CK,1.0);
      
      // setup EN-LH CK-LH
      $setup(posedge EN,posedge CK,1.0);
      
      // mpw CK_hl 
      $width(negedge CK,1.0,0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_CKGTPL_V5_1( Q, CK, EN );
input CK, EN;
output Q;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_CKGTPL_V5_1_func SAEDRVT14_CKGTPL_V5_1_behav_inst(.Q(Q),.CK(CK),.EN(EN));
`else
   SAEDRVT14_CKGTPL_V5_1_func SAEDRVT14_CKGTPL_V5_1_inst(.Q(Q),.CK(CK),.EN(EN));
   // spec_gates_begin
   not MGM_G0(ENABLE_NOT_EN,EN);
   buf MGM_G1(ENABLE_EN,EN);
   // spec_gates_end
   // specify_block_begin
   specify

      if(EN===1'b1)
      // comb arc CK --> Q
      (CK => Q) = (1.0,1.0);
      
      ifnone
      // comb arc CK --> Q
      (CK => Q) = (1.0,1.0);
      
      if(EN===1'b0)
      // comb arc CK --> Q
      (CK => Q) = (1.0,1.0);
      
      $width(negedge CK &&& (ENABLE_NOT_EN === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_EN === 1'b1)
      ,1.0,0);
      
      // hold EN-HL CK-LH
      $hold(posedge CK,negedge EN,1.0);
      
      // hold EN-LH CK-LH
      $hold(posedge CK,posedge EN,1.0);
      
      // setup EN-HL CK-LH
      $setup(negedge EN,posedge CK,1.0);
      
      // setup EN-LH CK-LH
      $setup(posedge EN,posedge CK,1.0);
      
      // mpw CK_hl 
      $width(negedge CK,1.0,0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_CKGTPL_V5_2( Q, CK, EN );
input CK, EN;
output Q;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_CKGTPL_V5_2_func SAEDRVT14_CKGTPL_V5_2_behav_inst(.Q(Q),.CK(CK),.EN(EN));
`else
   SAEDRVT14_CKGTPL_V5_2_func SAEDRVT14_CKGTPL_V5_2_inst(.Q(Q),.CK(CK),.EN(EN));
   // spec_gates_begin
   not MGM_G0(ENABLE_NOT_EN,EN);
   buf MGM_G1(ENABLE_EN,EN);
   // spec_gates_end
   // specify_block_begin
   specify

      if(EN===1'b1)
      // comb arc CK --> Q
      (CK => Q) = (1.0,1.0);
      
      ifnone
      // comb arc CK --> Q
      (CK => Q) = (1.0,1.0);
      
      if(EN===1'b0)
      // comb arc CK --> Q
      (CK => Q) = (1.0,1.0);
      
      $width(negedge CK &&& (ENABLE_NOT_EN === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_EN === 1'b1)
      ,1.0,0);
      
      // hold EN-HL CK-LH
      $hold(posedge CK,negedge EN,1.0);
      
      // hold EN-LH CK-LH
      $hold(posedge CK,posedge EN,1.0);
      
      // setup EN-HL CK-LH
      $setup(negedge EN,posedge CK,1.0);
      
      // setup EN-LH CK-LH
      $setup(posedge EN,posedge CK,1.0);
      
      // mpw CK_hl 
      $width(negedge CK,1.0,0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_CKGTPL_V5_4( Q, CK, EN );
input CK, EN;
output Q;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_CKGTPL_V5_4_func SAEDRVT14_CKGTPL_V5_4_behav_inst(.Q(Q),.CK(CK),.EN(EN));
`else
   SAEDRVT14_CKGTPL_V5_4_func SAEDRVT14_CKGTPL_V5_4_inst(.Q(Q),.CK(CK),.EN(EN));
   // spec_gates_begin
   not MGM_G0(ENABLE_NOT_EN,EN);
   buf MGM_G1(ENABLE_EN,EN);
   // spec_gates_end
   // specify_block_begin
   specify

      if(EN===1'b1)
      // comb arc CK --> Q
      (CK => Q) = (1.0,1.0);
      
      ifnone
      // comb arc CK --> Q
      (CK => Q) = (1.0,1.0);
      
      if(EN===1'b0)
      // comb arc CK --> Q
      (CK => Q) = (1.0,1.0);
      
      $width(negedge CK &&& (ENABLE_NOT_EN === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_EN === 1'b1)
      ,1.0,0);
      
      // hold EN-HL CK-LH
      $hold(posedge CK,negedge EN,1.0);
      
      // hold EN-LH CK-LH
      $hold(posedge CK,posedge EN,1.0);
      
      // setup EN-HL CK-LH
      $setup(negedge EN,posedge CK,1.0);
      
      // setup EN-LH CK-LH
      $setup(posedge EN,posedge CK,1.0);
      
      // mpw CK_hl 
      $width(negedge CK,1.0,0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_CKINVGTPLT_V7_1( QB, CK, EN, SE );
input CK, EN, SE;
output QB;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_CKINVGTPLT_V7_1_func SAEDRVT14_CKINVGTPLT_V7_1_behav_inst(.QB(QB),.CK(CK),.EN(EN),.SE(SE));
`else
   SAEDRVT14_CKINVGTPLT_V7_1_func SAEDRVT14_CKINVGTPLT_V7_1_inst(.QB(QB),.CK(CK),.EN(EN),.SE(SE));
   // spec_gates_begin
   not MGM_G0(MGM_W0,EN);
   not MGM_G1(MGM_W1,SE);
   and MGM_G2(ENABLE_NOT_EN_AND_NOT_SE,MGM_W1,MGM_W0);
   not MGM_G3(MGM_W2,EN);
   and MGM_G4(ENABLE_NOT_EN_AND_SE,SE,MGM_W2);
   not MGM_G5(MGM_W3,SE);
   and MGM_G6(ENABLE_EN_AND_NOT_SE,MGM_W3,EN);
   and MGM_G7(ENABLE_EN_AND_SE,SE,EN);
   not MGM_G8(ENABLE_NOT_SE,SE);
   not MGM_G9(ENABLE_NOT_EN,EN);
   // spec_gates_end
   // specify_block_begin
   specify

      if(EN===1'b0 && SE===1'b1)
      // comb arc CK --> QB
      (CK => QB) = (1.0,1.0);
      
      if(EN===1'b1 && SE===1'b0)
      // comb arc CK --> QB
      (CK => QB) = (1.0,1.0);
      
      if(EN===1'b1 && SE===1'b1)
      // comb arc CK --> QB
      (CK => QB) = (1.0,1.0);
      
      ifnone
      // comb arc CK --> QB
      (CK => QB) = (1.0,1.0);
      
      if(EN===1'b0 && SE===1'b0)
      // comb arc CK --> QB
      (CK => QB) = (1.0,1.0);
      
      $width(negedge CK &&& (ENABLE_NOT_EN_AND_NOT_SE === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_EN_AND_SE === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_EN_AND_NOT_SE === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_EN_AND_SE === 1'b1)
      ,1.0,0);
      
      // hold EN-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_SE === 1'b1),
      negedge EN &&& (ENABLE_NOT_SE === 1'b1),1.0);
      
      // hold EN-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_SE === 1'b1),
      posedge EN &&& (ENABLE_NOT_SE === 1'b1),1.0);
      
      // setup EN-HL CK-LH
      $setup(negedge EN &&& (ENABLE_NOT_SE === 1'b1),
      posedge CK &&& (ENABLE_NOT_SE === 1'b1),1.0);
      
      // setup EN-LH CK-LH
      $setup(posedge EN &&& (ENABLE_NOT_SE === 1'b1),
      posedge CK &&& (ENABLE_NOT_SE === 1'b1),1.0);
      
      // hold SE-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_EN === 1'b1),
      negedge SE &&& (ENABLE_NOT_EN === 1'b1),1.0);
      
      // hold SE-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_EN === 1'b1),
      posedge SE &&& (ENABLE_NOT_EN === 1'b1),1.0);
      
      // setup SE-HL CK-LH
      $setup(negedge SE &&& (ENABLE_NOT_EN === 1'b1),
      posedge CK &&& (ENABLE_NOT_EN === 1'b1),1.0);
      
      // setup SE-LH CK-LH
      $setup(posedge SE &&& (ENABLE_NOT_EN === 1'b1),
      posedge CK &&& (ENABLE_NOT_EN === 1'b1),1.0);
      
      // mpw CK_hl 
      $width(negedge CK,1.0,0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_CKINVGTPLT_V7_2( QB, CK, EN, SE );
input CK, EN, SE;
output QB;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_CKINVGTPLT_V7_2_func SAEDRVT14_CKINVGTPLT_V7_2_behav_inst(.QB(QB),.CK(CK),.EN(EN),.SE(SE));
`else
   SAEDRVT14_CKINVGTPLT_V7_2_func SAEDRVT14_CKINVGTPLT_V7_2_inst(.QB(QB),.CK(CK),.EN(EN),.SE(SE));
   // spec_gates_begin
   not MGM_G0(MGM_W0,EN);
   not MGM_G1(MGM_W1,SE);
   and MGM_G2(ENABLE_NOT_EN_AND_NOT_SE,MGM_W1,MGM_W0);
   not MGM_G3(MGM_W2,EN);
   and MGM_G4(ENABLE_NOT_EN_AND_SE,SE,MGM_W2);
   not MGM_G5(MGM_W3,SE);
   and MGM_G6(ENABLE_EN_AND_NOT_SE,MGM_W3,EN);
   and MGM_G7(ENABLE_EN_AND_SE,SE,EN);
   not MGM_G8(ENABLE_NOT_SE,SE);
   not MGM_G9(ENABLE_NOT_EN,EN);
   // spec_gates_end
   // specify_block_begin
   specify

      if(EN===1'b0 && SE===1'b1)
      // comb arc CK --> QB
      (CK => QB) = (1.0,1.0);
      
      if(EN===1'b1 && SE===1'b0)
      // comb arc CK --> QB
      (CK => QB) = (1.0,1.0);
      
      if(EN===1'b1 && SE===1'b1)
      // comb arc CK --> QB
      (CK => QB) = (1.0,1.0);
      
      ifnone
      // comb arc CK --> QB
      (CK => QB) = (1.0,1.0);
      
      if(EN===1'b0 && SE===1'b0)
      // comb arc CK --> QB
      (CK => QB) = (1.0,1.0);
      
      $width(negedge CK &&& (ENABLE_NOT_EN_AND_NOT_SE === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_EN_AND_SE === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_EN_AND_NOT_SE === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_EN_AND_SE === 1'b1)
      ,1.0,0);
      
      // hold EN-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_SE === 1'b1),
      negedge EN &&& (ENABLE_NOT_SE === 1'b1),1.0);
      
      // hold EN-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_SE === 1'b1),
      posedge EN &&& (ENABLE_NOT_SE === 1'b1),1.0);
      
      // setup EN-HL CK-LH
      $setup(negedge EN &&& (ENABLE_NOT_SE === 1'b1),
      posedge CK &&& (ENABLE_NOT_SE === 1'b1),1.0);
      
      // setup EN-LH CK-LH
      $setup(posedge EN &&& (ENABLE_NOT_SE === 1'b1),
      posedge CK &&& (ENABLE_NOT_SE === 1'b1),1.0);
      
      // hold SE-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_EN === 1'b1),
      negedge SE &&& (ENABLE_NOT_EN === 1'b1),1.0);
      
      // hold SE-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_EN === 1'b1),
      posedge SE &&& (ENABLE_NOT_EN === 1'b1),1.0);
      
      // setup SE-HL CK-LH
      $setup(negedge SE &&& (ENABLE_NOT_EN === 1'b1),
      posedge CK &&& (ENABLE_NOT_EN === 1'b1),1.0);
      
      // setup SE-LH CK-LH
      $setup(posedge SE &&& (ENABLE_NOT_EN === 1'b1),
      posedge CK &&& (ENABLE_NOT_EN === 1'b1),1.0);
      
      // mpw CK_hl 
      $width(negedge CK,1.0,0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_CKINVGTPLT_V7_3( QB, CK, EN, SE );
input CK, EN, SE;
output QB;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_CKINVGTPLT_V7_3_func SAEDRVT14_CKINVGTPLT_V7_3_behav_inst(.QB(QB),.CK(CK),.EN(EN),.SE(SE));
`else
   SAEDRVT14_CKINVGTPLT_V7_3_func SAEDRVT14_CKINVGTPLT_V7_3_inst(.QB(QB),.CK(CK),.EN(EN),.SE(SE));
   // spec_gates_begin
   not MGM_G0(MGM_W0,EN);
   not MGM_G1(MGM_W1,SE);
   and MGM_G2(ENABLE_NOT_EN_AND_NOT_SE,MGM_W1,MGM_W0);
   not MGM_G3(MGM_W2,EN);
   and MGM_G4(ENABLE_NOT_EN_AND_SE,SE,MGM_W2);
   not MGM_G5(MGM_W3,SE);
   and MGM_G6(ENABLE_EN_AND_NOT_SE,MGM_W3,EN);
   and MGM_G7(ENABLE_EN_AND_SE,SE,EN);
   not MGM_G8(ENABLE_NOT_SE,SE);
   not MGM_G9(ENABLE_NOT_EN,EN);
   // spec_gates_end
   // specify_block_begin
   specify

      if(EN===1'b0 && SE===1'b1)
      // comb arc CK --> QB
      (CK => QB) = (1.0,1.0);
      
      if(EN===1'b1 && SE===1'b0)
      // comb arc CK --> QB
      (CK => QB) = (1.0,1.0);
      
      if(EN===1'b1 && SE===1'b1)
      // comb arc CK --> QB
      (CK => QB) = (1.0,1.0);
      
      ifnone
      // comb arc CK --> QB
      (CK => QB) = (1.0,1.0);
      
      if(EN===1'b0 && SE===1'b0)
      // comb arc CK --> QB
      (CK => QB) = (1.0,1.0);
      
      $width(negedge CK &&& (ENABLE_NOT_EN_AND_NOT_SE === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_EN_AND_SE === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_EN_AND_NOT_SE === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_EN_AND_SE === 1'b1)
      ,1.0,0);
      
      // hold EN-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_SE === 1'b1),
      negedge EN &&& (ENABLE_NOT_SE === 1'b1),1.0);
      
      // hold EN-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_SE === 1'b1),
      posedge EN &&& (ENABLE_NOT_SE === 1'b1),1.0);
      
      // setup EN-HL CK-LH
      $setup(negedge EN &&& (ENABLE_NOT_SE === 1'b1),
      posedge CK &&& (ENABLE_NOT_SE === 1'b1),1.0);
      
      // setup EN-LH CK-LH
      $setup(posedge EN &&& (ENABLE_NOT_SE === 1'b1),
      posedge CK &&& (ENABLE_NOT_SE === 1'b1),1.0);
      
      // hold SE-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_EN === 1'b1),
      negedge SE &&& (ENABLE_NOT_EN === 1'b1),1.0);
      
      // hold SE-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_EN === 1'b1),
      posedge SE &&& (ENABLE_NOT_EN === 1'b1),1.0);
      
      // setup SE-HL CK-LH
      $setup(negedge SE &&& (ENABLE_NOT_EN === 1'b1),
      posedge CK &&& (ENABLE_NOT_EN === 1'b1),1.0);
      
      // setup SE-LH CK-LH
      $setup(posedge SE &&& (ENABLE_NOT_EN === 1'b1),
      posedge CK &&& (ENABLE_NOT_EN === 1'b1),1.0);
      
      // mpw CK_hl 
      $width(negedge CK,1.0,0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_CKINVGTPLT_V7_4( QB, CK, EN, SE );
input CK, EN, SE;
output QB;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_CKINVGTPLT_V7_4_func SAEDRVT14_CKINVGTPLT_V7_4_behav_inst(.QB(QB),.CK(CK),.EN(EN),.SE(SE));
`else
   SAEDRVT14_CKINVGTPLT_V7_4_func SAEDRVT14_CKINVGTPLT_V7_4_inst(.QB(QB),.CK(CK),.EN(EN),.SE(SE));
   // spec_gates_begin
   not MGM_G0(MGM_W0,EN);
   not MGM_G1(MGM_W1,SE);
   and MGM_G2(ENABLE_NOT_EN_AND_NOT_SE,MGM_W1,MGM_W0);
   not MGM_G3(MGM_W2,EN);
   and MGM_G4(ENABLE_NOT_EN_AND_SE,SE,MGM_W2);
   not MGM_G5(MGM_W3,SE);
   and MGM_G6(ENABLE_EN_AND_NOT_SE,MGM_W3,EN);
   and MGM_G7(ENABLE_EN_AND_SE,SE,EN);
   not MGM_G8(ENABLE_NOT_SE,SE);
   not MGM_G9(ENABLE_NOT_EN,EN);
   // spec_gates_end
   // specify_block_begin
   specify

      if(EN===1'b0 && SE===1'b1)
      // comb arc CK --> QB
      (CK => QB) = (1.0,1.0);
      
      if(EN===1'b1 && SE===1'b0)
      // comb arc CK --> QB
      (CK => QB) = (1.0,1.0);
      
      if(EN===1'b1 && SE===1'b1)
      // comb arc CK --> QB
      (CK => QB) = (1.0,1.0);
      
      ifnone
      // comb arc CK --> QB
      (CK => QB) = (1.0,1.0);
      
      if(EN===1'b0 && SE===1'b0)
      // comb arc CK --> QB
      (CK => QB) = (1.0,1.0);
      
      $width(negedge CK &&& (ENABLE_NOT_EN_AND_NOT_SE === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_EN_AND_SE === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_EN_AND_NOT_SE === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_EN_AND_SE === 1'b1)
      ,1.0,0);
      
      // hold EN-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_SE === 1'b1),
      negedge EN &&& (ENABLE_NOT_SE === 1'b1),1.0);
      
      // hold EN-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_SE === 1'b1),
      posedge EN &&& (ENABLE_NOT_SE === 1'b1),1.0);
      
      // setup EN-HL CK-LH
      $setup(negedge EN &&& (ENABLE_NOT_SE === 1'b1),
      posedge CK &&& (ENABLE_NOT_SE === 1'b1),1.0);
      
      // setup EN-LH CK-LH
      $setup(posedge EN &&& (ENABLE_NOT_SE === 1'b1),
      posedge CK &&& (ENABLE_NOT_SE === 1'b1),1.0);
      
      // hold SE-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_EN === 1'b1),
      negedge SE &&& (ENABLE_NOT_EN === 1'b1),1.0);
      
      // hold SE-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_EN === 1'b1),
      posedge SE &&& (ENABLE_NOT_EN === 1'b1),1.0);
      
      // setup SE-HL CK-LH
      $setup(negedge SE &&& (ENABLE_NOT_EN === 1'b1),
      posedge CK &&& (ENABLE_NOT_EN === 1'b1),1.0);
      
      // setup SE-LH CK-LH
      $setup(posedge SE &&& (ENABLE_NOT_EN === 1'b1),
      posedge CK &&& (ENABLE_NOT_EN === 1'b1),1.0);
      
      // mpw CK_hl 
      $width(negedge CK,1.0,0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_CKINVGTPLT_V7_5( QB, CK, EN, SE );
input CK, EN, SE;
output QB;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_CKINVGTPLT_V7_5_func SAEDRVT14_CKINVGTPLT_V7_5_behav_inst(.QB(QB),.CK(CK),.EN(EN),.SE(SE));
`else
   SAEDRVT14_CKINVGTPLT_V7_5_func SAEDRVT14_CKINVGTPLT_V7_5_inst(.QB(QB),.CK(CK),.EN(EN),.SE(SE));
   // spec_gates_begin
   not MGM_G0(MGM_W0,EN);
   not MGM_G1(MGM_W1,SE);
   and MGM_G2(ENABLE_NOT_EN_AND_NOT_SE,MGM_W1,MGM_W0);
   not MGM_G3(MGM_W2,EN);
   and MGM_G4(ENABLE_NOT_EN_AND_SE,SE,MGM_W2);
   not MGM_G5(MGM_W3,SE);
   and MGM_G6(ENABLE_EN_AND_NOT_SE,MGM_W3,EN);
   and MGM_G7(ENABLE_EN_AND_SE,SE,EN);
   not MGM_G8(ENABLE_NOT_SE,SE);
   not MGM_G9(ENABLE_NOT_EN,EN);
   // spec_gates_end
   // specify_block_begin
   specify

      if(EN===1'b0 && SE===1'b1)
      // comb arc CK --> QB
      (CK => QB) = (1.0,1.0);
      
      if(EN===1'b1 && SE===1'b0)
      // comb arc CK --> QB
      (CK => QB) = (1.0,1.0);
      
      if(EN===1'b1 && SE===1'b1)
      // comb arc CK --> QB
      (CK => QB) = (1.0,1.0);
      
      ifnone
      // comb arc CK --> QB
      (CK => QB) = (1.0,1.0);
      
      if(EN===1'b0 && SE===1'b0)
      // comb arc CK --> QB
      (CK => QB) = (1.0,1.0);
      
      $width(negedge CK &&& (ENABLE_NOT_EN_AND_NOT_SE === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_EN_AND_SE === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_EN_AND_NOT_SE === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_EN_AND_SE === 1'b1)
      ,1.0,0);
      
      // hold EN-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_SE === 1'b1),
      negedge EN &&& (ENABLE_NOT_SE === 1'b1),1.0);
      
      // hold EN-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_SE === 1'b1),
      posedge EN &&& (ENABLE_NOT_SE === 1'b1),1.0);
      
      // setup EN-HL CK-LH
      $setup(negedge EN &&& (ENABLE_NOT_SE === 1'b1),
      posedge CK &&& (ENABLE_NOT_SE === 1'b1),1.0);
      
      // setup EN-LH CK-LH
      $setup(posedge EN &&& (ENABLE_NOT_SE === 1'b1),
      posedge CK &&& (ENABLE_NOT_SE === 1'b1),1.0);
      
      // hold SE-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_EN === 1'b1),
      negedge SE &&& (ENABLE_NOT_EN === 1'b1),1.0);
      
      // hold SE-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_EN === 1'b1),
      posedge SE &&& (ENABLE_NOT_EN === 1'b1),1.0);
      
      // setup SE-HL CK-LH
      $setup(negedge SE &&& (ENABLE_NOT_EN === 1'b1),
      posedge CK &&& (ENABLE_NOT_EN === 1'b1),1.0);
      
      // setup SE-LH CK-LH
      $setup(posedge SE &&& (ENABLE_NOT_EN === 1'b1),
      posedge CK &&& (ENABLE_NOT_EN === 1'b1),1.0);
      
      // mpw CK_hl 
      $width(negedge CK,1.0,0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_CKINVGTPLT_V7_6( QB, CK, EN, SE );
input CK, EN, SE;
output QB;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_CKINVGTPLT_V7_6_func SAEDRVT14_CKINVGTPLT_V7_6_behav_inst(.QB(QB),.CK(CK),.EN(EN),.SE(SE));
`else
   SAEDRVT14_CKINVGTPLT_V7_6_func SAEDRVT14_CKINVGTPLT_V7_6_inst(.QB(QB),.CK(CK),.EN(EN),.SE(SE));
   // spec_gates_begin
   not MGM_G0(MGM_W0,EN);
   not MGM_G1(MGM_W1,SE);
   and MGM_G2(ENABLE_NOT_EN_AND_NOT_SE,MGM_W1,MGM_W0);
   not MGM_G3(MGM_W2,EN);
   and MGM_G4(ENABLE_NOT_EN_AND_SE,SE,MGM_W2);
   not MGM_G5(MGM_W3,SE);
   and MGM_G6(ENABLE_EN_AND_NOT_SE,MGM_W3,EN);
   and MGM_G7(ENABLE_EN_AND_SE,SE,EN);
   not MGM_G8(ENABLE_NOT_SE,SE);
   not MGM_G9(ENABLE_NOT_EN,EN);
   // spec_gates_end
   // specify_block_begin
   specify

      if(EN===1'b0 && SE===1'b1)
      // comb arc CK --> QB
      (CK => QB) = (1.0,1.0);
      
      if(EN===1'b1 && SE===1'b0)
      // comb arc CK --> QB
      (CK => QB) = (1.0,1.0);
      
      if(EN===1'b1 && SE===1'b1)
      // comb arc CK --> QB
      (CK => QB) = (1.0,1.0);
      
      ifnone
      // comb arc CK --> QB
      (CK => QB) = (1.0,1.0);
      
      if(EN===1'b0 && SE===1'b0)
      // comb arc CK --> QB
      (CK => QB) = (1.0,1.0);
      
      $width(negedge CK &&& (ENABLE_NOT_EN_AND_NOT_SE === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_EN_AND_SE === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_EN_AND_NOT_SE === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_EN_AND_SE === 1'b1)
      ,1.0,0);
      
      // hold EN-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_SE === 1'b1),
      negedge EN &&& (ENABLE_NOT_SE === 1'b1),1.0);
      
      // hold EN-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_SE === 1'b1),
      posedge EN &&& (ENABLE_NOT_SE === 1'b1),1.0);
      
      // setup EN-HL CK-LH
      $setup(negedge EN &&& (ENABLE_NOT_SE === 1'b1),
      posedge CK &&& (ENABLE_NOT_SE === 1'b1),1.0);
      
      // setup EN-LH CK-LH
      $setup(posedge EN &&& (ENABLE_NOT_SE === 1'b1),
      posedge CK &&& (ENABLE_NOT_SE === 1'b1),1.0);
      
      // hold SE-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_EN === 1'b1),
      negedge SE &&& (ENABLE_NOT_EN === 1'b1),1.0);
      
      // hold SE-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_EN === 1'b1),
      posedge SE &&& (ENABLE_NOT_EN === 1'b1),1.0);
      
      // setup SE-HL CK-LH
      $setup(negedge SE &&& (ENABLE_NOT_EN === 1'b1),
      posedge CK &&& (ENABLE_NOT_EN === 1'b1),1.0);
      
      // setup SE-LH CK-LH
      $setup(posedge SE &&& (ENABLE_NOT_EN === 1'b1),
      posedge CK &&& (ENABLE_NOT_EN === 1'b1),1.0);
      
      // mpw CK_hl 
      $width(negedge CK,1.0,0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_CKINVGTPLT_V7_8( QB, CK, EN, SE );
input CK, EN, SE;
output QB;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_CKINVGTPLT_V7_8_func SAEDRVT14_CKINVGTPLT_V7_8_behav_inst(.QB(QB),.CK(CK),.EN(EN),.SE(SE));
`else
   SAEDRVT14_CKINVGTPLT_V7_8_func SAEDRVT14_CKINVGTPLT_V7_8_inst(.QB(QB),.CK(CK),.EN(EN),.SE(SE));
   // spec_gates_begin
   not MGM_G0(MGM_W0,EN);
   not MGM_G1(MGM_W1,SE);
   and MGM_G2(ENABLE_NOT_EN_AND_NOT_SE,MGM_W1,MGM_W0);
   not MGM_G3(MGM_W2,EN);
   and MGM_G4(ENABLE_NOT_EN_AND_SE,SE,MGM_W2);
   not MGM_G5(MGM_W3,SE);
   and MGM_G6(ENABLE_EN_AND_NOT_SE,MGM_W3,EN);
   and MGM_G7(ENABLE_EN_AND_SE,SE,EN);
   not MGM_G8(ENABLE_NOT_SE,SE);
   not MGM_G9(ENABLE_NOT_EN,EN);
   // spec_gates_end
   // specify_block_begin
   specify

      if(EN===1'b0 && SE===1'b1)
      // comb arc CK --> QB
      (CK => QB) = (1.0,1.0);
      
      if(EN===1'b1 && SE===1'b0)
      // comb arc CK --> QB
      (CK => QB) = (1.0,1.0);
      
      if(EN===1'b1 && SE===1'b1)
      // comb arc CK --> QB
      (CK => QB) = (1.0,1.0);
      
      ifnone
      // comb arc CK --> QB
      (CK => QB) = (1.0,1.0);
      
      if(EN===1'b0 && SE===1'b0)
      // comb arc CK --> QB
      (CK => QB) = (1.0,1.0);
      
      $width(negedge CK &&& (ENABLE_NOT_EN_AND_NOT_SE === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_EN_AND_SE === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_EN_AND_NOT_SE === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_EN_AND_SE === 1'b1)
      ,1.0,0);
      
      // hold EN-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_SE === 1'b1),
      negedge EN &&& (ENABLE_NOT_SE === 1'b1),1.0);
      
      // hold EN-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_SE === 1'b1),
      posedge EN &&& (ENABLE_NOT_SE === 1'b1),1.0);
      
      // setup EN-HL CK-LH
      $setup(negedge EN &&& (ENABLE_NOT_SE === 1'b1),
      posedge CK &&& (ENABLE_NOT_SE === 1'b1),1.0);
      
      // setup EN-LH CK-LH
      $setup(posedge EN &&& (ENABLE_NOT_SE === 1'b1),
      posedge CK &&& (ENABLE_NOT_SE === 1'b1),1.0);
      
      // hold SE-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_EN === 1'b1),
      negedge SE &&& (ENABLE_NOT_EN === 1'b1),1.0);
      
      // hold SE-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_EN === 1'b1),
      posedge SE &&& (ENABLE_NOT_EN === 1'b1),1.0);
      
      // setup SE-HL CK-LH
      $setup(negedge SE &&& (ENABLE_NOT_EN === 1'b1),
      posedge CK &&& (ENABLE_NOT_EN === 1'b1),1.0);
      
      // setup SE-LH CK-LH
      $setup(posedge SE &&& (ENABLE_NOT_EN === 1'b1),
      posedge CK &&& (ENABLE_NOT_EN === 1'b1),1.0);
      
      // mpw CK_hl 
      $width(negedge CK,1.0,0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_CLKSPLT_1( CKOUT, CKOUTB, CK );
input CK;
output CKOUT, CKOUTB;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_CLKSPLT_1_func SAEDRVT14_CLKSPLT_1_behav_inst(.CKOUT(CKOUT),.CKOUTB(CKOUTB),.CK(CK));
`else
   SAEDRVT14_CLKSPLT_1_func SAEDRVT14_CLKSPLT_1_inst(.CKOUT(CKOUT),.CKOUTB(CKOUTB),.CK(CK));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc CK --> CKOUT
      (CK => CKOUT) = (1.0,1.0);
      
      // comb arc CK --> CKOUTB
      (CK => CKOUTB) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_CLKSPLT_8( CKOUT, CKOUTB, CK );
input CK;
output CKOUT, CKOUTB;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_CLKSPLT_8_func SAEDRVT14_CLKSPLT_8_behav_inst(.CKOUT(CKOUT),.CKOUTB(CKOUTB),.CK(CK));
`else
   SAEDRVT14_CLKSPLT_8_func SAEDRVT14_CLKSPLT_8_inst(.CKOUT(CKOUT),.CKOUTB(CKOUTB),.CK(CK));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc CK --> CKOUT
      (CK => CKOUT) = (1.0,1.0);
      
      // comb arc CK --> CKOUTB
      (CK => CKOUTB) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_FDNQ_V2_8( Q, CK, D );
input CK, D;
output Q;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_FDNQ_V2_8_func SAEDRVT14_FDNQ_V2_8_behav_inst(.Q(Q),.CK(CK),.D(D));
`else
   SAEDRVT14_FDNQ_V2_8_func SAEDRVT14_FDNQ_V2_8_inst(.Q(Q),.CK(CK),.D(D));
   // spec_gates_begin
   not MGM_G0(ENABLE_NOT_D,D);
   buf MGM_G1(ENABLE_D,D);
   // spec_gates_end
   // specify_block_begin
   specify

      // seq arc CK --> Q
      (negedge CK => (Q : D))  = (1.0,1.0);
      
      $width(negedge CK &&& (ENABLE_NOT_D === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D === 1'b1)
      ,1.0,0);
      
      // hold D-HL CK-HL
      $hold(negedge CK,negedge D,1.0);
      
      // hold D-LH CK-HL
      $hold(negedge CK,posedge D,1.0);
      
      // setup D-HL CK-HL
      $setup(negedge D,negedge CK,1.0);
      
      // setup D-LH CK-HL
      $setup(posedge D,negedge CK,1.0);
      
      // mpw CK_lh 
      $width(posedge CK,1.0,0);
      
      // mpw CK_hl 
      $width(negedge CK,1.0,0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_FDNQ_V3_1( Q, CK, D );
input CK, D;
output Q;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_FDNQ_V3_1_func SAEDRVT14_FDNQ_V3_1_behav_inst(.Q(Q),.CK(CK),.D(D));
`else
   SAEDRVT14_FDNQ_V3_1_func SAEDRVT14_FDNQ_V3_1_inst(.Q(Q),.CK(CK),.D(D));
   // spec_gates_begin
   not MGM_G0(ENABLE_NOT_D,D);
   buf MGM_G1(ENABLE_D,D);
   // spec_gates_end
   // specify_block_begin
   specify

      // seq arc CK --> Q
      (negedge CK => (Q : D))  = (1.0,1.0);
      
      $width(negedge CK &&& (ENABLE_NOT_D === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D === 1'b1)
      ,1.0,0);
      
      // hold D-HL CK-HL
      $hold(negedge CK,negedge D,1.0);
      
      // hold D-LH CK-HL
      $hold(negedge CK,posedge D,1.0);
      
      // setup D-HL CK-HL
      $setup(negedge D,negedge CK,1.0);
      
      // setup D-LH CK-HL
      $setup(posedge D,negedge CK,1.0);
      
      // mpw CK_lh 
      $width(posedge CK,1.0,0);
      
      // mpw CK_hl 
      $width(negedge CK,1.0,0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_FDNQ_V3_2( Q, CK, D );
input CK, D;
output Q;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_FDNQ_V3_2_func SAEDRVT14_FDNQ_V3_2_behav_inst(.Q(Q),.CK(CK),.D(D));
`else
   SAEDRVT14_FDNQ_V3_2_func SAEDRVT14_FDNQ_V3_2_inst(.Q(Q),.CK(CK),.D(D));
   // spec_gates_begin
   not MGM_G0(ENABLE_NOT_D,D);
   buf MGM_G1(ENABLE_D,D);
   // spec_gates_end
   // specify_block_begin
   specify

      // seq arc CK --> Q
      (negedge CK => (Q : D))  = (1.0,1.0);
      
      $width(negedge CK &&& (ENABLE_NOT_D === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D === 1'b1)
      ,1.0,0);
      
      // hold D-HL CK-HL
      $hold(negedge CK,negedge D,1.0);
      
      // hold D-LH CK-HL
      $hold(negedge CK,posedge D,1.0);
      
      // setup D-HL CK-HL
      $setup(negedge D,negedge CK,1.0);
      
      // setup D-LH CK-HL
      $setup(posedge D,negedge CK,1.0);
      
      // mpw CK_lh 
      $width(posedge CK,1.0,0);
      
      // mpw CK_hl 
      $width(negedge CK,1.0,0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_FDNQ_V3_4( Q, CK, D );
input CK, D;
output Q;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_FDNQ_V3_4_func SAEDRVT14_FDNQ_V3_4_behav_inst(.Q(Q),.CK(CK),.D(D));
`else
   SAEDRVT14_FDNQ_V3_4_func SAEDRVT14_FDNQ_V3_4_inst(.Q(Q),.CK(CK),.D(D));
   // spec_gates_begin
   not MGM_G0(ENABLE_NOT_D,D);
   buf MGM_G1(ENABLE_D,D);
   // spec_gates_end
   // specify_block_begin
   specify

      // seq arc CK --> Q
      (negedge CK => (Q : D))  = (1.0,1.0);
      
      $width(negedge CK &&& (ENABLE_NOT_D === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D === 1'b1)
      ,1.0,0);
      
      // hold D-HL CK-HL
      $hold(negedge CK,negedge D,1.0);
      
      // hold D-LH CK-HL
      $hold(negedge CK,posedge D,1.0);
      
      // setup D-HL CK-HL
      $setup(negedge D,negedge CK,1.0);
      
      // setup D-LH CK-HL
      $setup(posedge D,negedge CK,1.0);
      
      // mpw CK_lh 
      $width(posedge CK,1.0,0);
      
      // mpw CK_hl 
      $width(negedge CK,1.0,0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_FDNRBSBQ_V2_0P5( Q, CK, D, RD, SD );
input CK, D, RD, SD;
output Q;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_FDNRBSBQ_V2_0P5_func SAEDRVT14_FDNRBSBQ_V2_0P5_behav_inst(.Q(Q),.CK(CK),.D(D),.RD(RD),.SD(SD));
`else
   SAEDRVT14_FDNRBSBQ_V2_0P5_func SAEDRVT14_FDNRBSBQ_V2_0P5_inst(.Q(Q),.CK(CK),.D(D),.RD(RD),.SD(SD));
   // spec_gates_begin
   not MGM_G0(MGM_W0,D);
   and MGM_G1(MGM_W1,RD,MGM_W0);
   and MGM_G2(ENABLE_NOT_D_AND_RD_AND_SD,SD,MGM_W1);
   and MGM_G3(MGM_W2,RD,D);
   and MGM_G4(ENABLE_D_AND_RD_AND_SD,SD,MGM_W2);
   and MGM_G5(ENABLE_RD_AND_SD,SD,RD);
   and MGM_G6(ENABLE_D_AND_SD,SD,D);
   not MGM_G7(MGM_W3,CK);
   not MGM_G8(MGM_W4,D);
   and MGM_G9(MGM_W5,MGM_W4,MGM_W3);
   and MGM_G10(ENABLE_NOT_CK_AND_NOT_D_AND_SD,SD,MGM_W5);
   not MGM_G11(MGM_W6,CK);
   and MGM_G12(MGM_W7,D,MGM_W6);
   and MGM_G13(ENABLE_NOT_CK_AND_D_AND_SD,SD,MGM_W7);
   not MGM_G14(MGM_W8,D);
   and MGM_G15(MGM_W9,MGM_W8,CK);
   and MGM_G16(ENABLE_CK_AND_NOT_D_AND_SD,SD,MGM_W9);
   and MGM_G17(MGM_W10,D,CK);
   and MGM_G18(ENABLE_CK_AND_D_AND_SD,SD,MGM_W10);
   not MGM_G19(MGM_W11,CK);
   not MGM_G20(MGM_W12,D);
   and MGM_G21(ENABLE_NOT_CK_AND_NOT_D,MGM_W12,MGM_W11);
   not MGM_G22(MGM_W13,CK);
   and MGM_G23(ENABLE_NOT_CK_AND_D,D,MGM_W13);
   not MGM_G24(MGM_W14,D);
   and MGM_G25(ENABLE_CK_AND_NOT_D,MGM_W14,CK);
   and MGM_G26(ENABLE_CK_AND_D,D,CK);
   not MGM_G27(MGM_W15,D);
   and MGM_G28(ENABLE_NOT_D_AND_RD,RD,MGM_W15);
   not MGM_G29(MGM_W16,CK);
   not MGM_G30(MGM_W17,D);
   and MGM_G31(MGM_W18,MGM_W17,MGM_W16);
   and MGM_G32(ENABLE_NOT_CK_AND_NOT_D_AND_RD,RD,MGM_W18);
   not MGM_G33(MGM_W19,CK);
   and MGM_G34(MGM_W20,D,MGM_W19);
   and MGM_G35(ENABLE_NOT_CK_AND_D_AND_RD,RD,MGM_W20);
   not MGM_G36(MGM_W21,D);
   and MGM_G37(MGM_W22,MGM_W21,CK);
   and MGM_G38(ENABLE_CK_AND_NOT_D_AND_RD,RD,MGM_W22);
   and MGM_G39(MGM_W23,D,CK);
   and MGM_G40(ENABLE_CK_AND_D_AND_RD,RD,MGM_W23);
   // spec_gates_end
   // specify_block_begin
   specify

      // seq arc CK --> Q
      (negedge CK => (Q : D))  = (1.0,1.0);
      
      if(CK===1'b0 && D===1'b0 && SD===1'b0)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b0 && D===1'b0 && SD===1'b1)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b0 && D===1'b1 && SD===1'b0)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b0 && D===1'b1 && SD===1'b1)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b1 && D===1'b0 && SD===1'b0)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b1 && D===1'b0 && SD===1'b1)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b1 && D===1'b1 && SD===1'b0)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b1 && D===1'b1 && SD===1'b1)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      ifnone
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b0 && D===1'b0)
      // seq arc SD --> Q
      (SD => Q)  = (1.0,1.0);
      
      if(CK===1'b0 && D===1'b1)
      // seq arc SD --> Q
      (SD => Q)  = (1.0,1.0);
      
      if(CK===1'b1 && D===1'b0)
      // seq arc SD --> Q
      (SD => Q)  = (1.0,1.0);
      
      if(CK===1'b1 && D===1'b1)
      // seq arc SD --> Q
      (SD => Q)  = (1.0,1.0);
      
      ifnone
      // seq arc SD --> Q
      (SD => Q)  = (1.0,1.0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_RD_AND_SD === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_RD_AND_SD === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_RD_AND_SD === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_RD_AND_SD === 1'b1)
      ,1.0,0);
      
      // hold D-HL CK-HL
      $hold(negedge CK &&& (ENABLE_RD_AND_SD === 1'b1),
      negedge D &&& (ENABLE_RD_AND_SD === 1'b1),1.0);
      
      // hold D-LH CK-HL
      $hold(negedge CK &&& (ENABLE_RD_AND_SD === 1'b1),
      posedge D &&& (ENABLE_RD_AND_SD === 1'b1),1.0);
      
      // setup D-HL CK-HL
      $setup(negedge D &&& (ENABLE_RD_AND_SD === 1'b1),
      negedge CK &&& (ENABLE_RD_AND_SD === 1'b1),1.0);
      
      // setup D-LH CK-HL
      $setup(posedge D &&& (ENABLE_RD_AND_SD === 1'b1),
      negedge CK &&& (ENABLE_RD_AND_SD === 1'b1),1.0);
      
      // recovery RD-LH CK-HL
      $recovery(posedge RD &&& (ENABLE_D_AND_SD === 1'b1),
      negedge CK &&& (ENABLE_D_AND_SD === 1'b1),1.0);
      
      // removal RD-LH CK-HL
      $removal(posedge RD &&& (ENABLE_D_AND_SD === 1'b1),
      negedge CK &&& (ENABLE_D_AND_SD === 1'b1),1.0);
      
      $width(negedge RD &&& (ENABLE_NOT_CK_AND_NOT_D_AND_SD === 1'b1)
      ,1.0,0);
      
      $width(negedge RD &&& (ENABLE_NOT_CK_AND_D_AND_SD === 1'b1)
      ,1.0,0);
      
      $width(negedge RD &&& (ENABLE_CK_AND_NOT_D_AND_SD === 1'b1)
      ,1.0,0);
      
      $width(negedge RD &&& (ENABLE_CK_AND_D_AND_SD === 1'b1)
      ,1.0,0);
      
      // hold RD-LH SD-LH
      $hold(posedge SD &&& (ENABLE_NOT_CK_AND_NOT_D === 1'b1),
      posedge RD &&& (ENABLE_NOT_CK_AND_NOT_D === 1'b1),1.0);
      
      // setup RD-LH SD-LH
      $setup(posedge RD &&& (ENABLE_NOT_CK_AND_NOT_D === 1'b1),
      posedge SD &&& (ENABLE_NOT_CK_AND_NOT_D === 1'b1),1.0);
      
      // hold RD-LH SD-LH
      $hold(posedge SD &&& (ENABLE_NOT_CK_AND_D === 1'b1),
      posedge RD &&& (ENABLE_NOT_CK_AND_D === 1'b1),1.0);
      
      // setup RD-LH SD-LH
      $setup(posedge RD &&& (ENABLE_NOT_CK_AND_D === 1'b1),
      posedge SD &&& (ENABLE_NOT_CK_AND_D === 1'b1),1.0);
      
      // hold RD-LH SD-LH
      $hold(posedge SD &&& (ENABLE_CK_AND_NOT_D === 1'b1),
      posedge RD &&& (ENABLE_CK_AND_NOT_D === 1'b1),1.0);
      
      // setup RD-LH SD-LH
      $setup(posedge RD &&& (ENABLE_CK_AND_NOT_D === 1'b1),
      posedge SD &&& (ENABLE_CK_AND_NOT_D === 1'b1),1.0);
      
      // hold RD-LH SD-LH
      $hold(posedge SD &&& (ENABLE_CK_AND_D === 1'b1),
      posedge RD &&& (ENABLE_CK_AND_D === 1'b1),1.0);
      
      // setup RD-LH SD-LH
      $setup(posedge RD &&& (ENABLE_CK_AND_D === 1'b1),
      posedge SD &&& (ENABLE_CK_AND_D === 1'b1),1.0);
      
      // recovery SD-LH CK-HL
      $recovery(posedge SD &&& (ENABLE_NOT_D_AND_RD === 1'b1),
      negedge CK &&& (ENABLE_NOT_D_AND_RD === 1'b1),1.0);
      
      // removal SD-LH CK-HL
      $removal(posedge SD &&& (ENABLE_NOT_D_AND_RD === 1'b1),
      negedge CK &&& (ENABLE_NOT_D_AND_RD === 1'b1),1.0);
      
      // hold SD-LH RD-LH
      $hold(posedge RD &&& (ENABLE_NOT_CK_AND_NOT_D === 1'b1),
      posedge SD &&& (ENABLE_NOT_CK_AND_NOT_D === 1'b1),1.0);
      
      // setup SD-LH RD-LH
      $setup(posedge SD &&& (ENABLE_NOT_CK_AND_NOT_D === 1'b1),
      posedge RD &&& (ENABLE_NOT_CK_AND_NOT_D === 1'b1),1.0);
      
      // hold SD-LH RD-LH
      $hold(posedge RD &&& (ENABLE_NOT_CK_AND_D === 1'b1),
      posedge SD &&& (ENABLE_NOT_CK_AND_D === 1'b1),1.0);
      
      // setup SD-LH RD-LH
      $setup(posedge SD &&& (ENABLE_NOT_CK_AND_D === 1'b1),
      posedge RD &&& (ENABLE_NOT_CK_AND_D === 1'b1),1.0);
      
      // hold SD-LH RD-LH
      $hold(posedge RD &&& (ENABLE_CK_AND_NOT_D === 1'b1),
      posedge SD &&& (ENABLE_CK_AND_NOT_D === 1'b1),1.0);
      
      // setup SD-LH RD-LH
      $setup(posedge SD &&& (ENABLE_CK_AND_NOT_D === 1'b1),
      posedge RD &&& (ENABLE_CK_AND_NOT_D === 1'b1),1.0);
      
      // hold SD-LH RD-LH
      $hold(posedge RD &&& (ENABLE_CK_AND_D === 1'b1),
      posedge SD &&& (ENABLE_CK_AND_D === 1'b1),1.0);
      
      // setup SD-LH RD-LH
      $setup(posedge SD &&& (ENABLE_CK_AND_D === 1'b1),
      posedge RD &&& (ENABLE_CK_AND_D === 1'b1),1.0);
      
      $width(negedge SD &&& (ENABLE_NOT_CK_AND_NOT_D_AND_RD === 1'b1)
      ,1.0,0);
      
      $width(negedge SD &&& (ENABLE_NOT_CK_AND_D_AND_RD === 1'b1)
      ,1.0,0);
      
      $width(negedge SD &&& (ENABLE_CK_AND_NOT_D_AND_RD === 1'b1)
      ,1.0,0);
      
      $width(negedge SD &&& (ENABLE_CK_AND_D_AND_RD === 1'b1)
      ,1.0,0);
      
      // mpw CK_lh 
      $width(posedge CK,1.0,0);
      
      // mpw CK_hl 
      $width(negedge CK,1.0,0);
      
      // mpw RD_hl 
      $width(negedge RD,1.0,0);
      
      // mpw SD_hl 
      $width(negedge SD,1.0,0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_FDNRBSBQ_V2_1( Q, CK, D, RD, SD );
input CK, D, RD, SD;
output Q;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_FDNRBSBQ_V2_1_func SAEDRVT14_FDNRBSBQ_V2_1_behav_inst(.Q(Q),.CK(CK),.D(D),.RD(RD),.SD(SD));
`else
   SAEDRVT14_FDNRBSBQ_V2_1_func SAEDRVT14_FDNRBSBQ_V2_1_inst(.Q(Q),.CK(CK),.D(D),.RD(RD),.SD(SD));
   // spec_gates_begin
   not MGM_G0(MGM_W0,D);
   and MGM_G1(MGM_W1,RD,MGM_W0);
   and MGM_G2(ENABLE_NOT_D_AND_RD_AND_SD,SD,MGM_W1);
   and MGM_G3(MGM_W2,RD,D);
   and MGM_G4(ENABLE_D_AND_RD_AND_SD,SD,MGM_W2);
   and MGM_G5(ENABLE_RD_AND_SD,SD,RD);
   and MGM_G6(ENABLE_D_AND_SD,SD,D);
   not MGM_G7(MGM_W3,CK);
   not MGM_G8(MGM_W4,D);
   and MGM_G9(MGM_W5,MGM_W4,MGM_W3);
   and MGM_G10(ENABLE_NOT_CK_AND_NOT_D_AND_SD,SD,MGM_W5);
   not MGM_G11(MGM_W6,CK);
   and MGM_G12(MGM_W7,D,MGM_W6);
   and MGM_G13(ENABLE_NOT_CK_AND_D_AND_SD,SD,MGM_W7);
   not MGM_G14(MGM_W8,D);
   and MGM_G15(MGM_W9,MGM_W8,CK);
   and MGM_G16(ENABLE_CK_AND_NOT_D_AND_SD,SD,MGM_W9);
   and MGM_G17(MGM_W10,D,CK);
   and MGM_G18(ENABLE_CK_AND_D_AND_SD,SD,MGM_W10);
   not MGM_G19(MGM_W11,CK);
   not MGM_G20(MGM_W12,D);
   and MGM_G21(ENABLE_NOT_CK_AND_NOT_D,MGM_W12,MGM_W11);
   not MGM_G22(MGM_W13,CK);
   and MGM_G23(ENABLE_NOT_CK_AND_D,D,MGM_W13);
   not MGM_G24(MGM_W14,D);
   and MGM_G25(ENABLE_CK_AND_NOT_D,MGM_W14,CK);
   and MGM_G26(ENABLE_CK_AND_D,D,CK);
   not MGM_G27(MGM_W15,D);
   and MGM_G28(ENABLE_NOT_D_AND_RD,RD,MGM_W15);
   not MGM_G29(MGM_W16,CK);
   not MGM_G30(MGM_W17,D);
   and MGM_G31(MGM_W18,MGM_W17,MGM_W16);
   and MGM_G32(ENABLE_NOT_CK_AND_NOT_D_AND_RD,RD,MGM_W18);
   not MGM_G33(MGM_W19,CK);
   and MGM_G34(MGM_W20,D,MGM_W19);
   and MGM_G35(ENABLE_NOT_CK_AND_D_AND_RD,RD,MGM_W20);
   not MGM_G36(MGM_W21,D);
   and MGM_G37(MGM_W22,MGM_W21,CK);
   and MGM_G38(ENABLE_CK_AND_NOT_D_AND_RD,RD,MGM_W22);
   and MGM_G39(MGM_W23,D,CK);
   and MGM_G40(ENABLE_CK_AND_D_AND_RD,RD,MGM_W23);
   // spec_gates_end
   // specify_block_begin
   specify

      // seq arc CK --> Q
      (negedge CK => (Q : D))  = (1.0,1.0);
      
      if(CK===1'b0 && D===1'b0 && SD===1'b0)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b0 && D===1'b0 && SD===1'b1)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b0 && D===1'b1 && SD===1'b0)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b0 && D===1'b1 && SD===1'b1)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b1 && D===1'b0 && SD===1'b0)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b1 && D===1'b0 && SD===1'b1)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b1 && D===1'b1 && SD===1'b0)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b1 && D===1'b1 && SD===1'b1)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      ifnone
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b0 && D===1'b0)
      // seq arc SD --> Q
      (SD => Q)  = (1.0,1.0);
      
      if(CK===1'b0 && D===1'b1)
      // seq arc SD --> Q
      (SD => Q)  = (1.0,1.0);
      
      if(CK===1'b1 && D===1'b0)
      // seq arc SD --> Q
      (SD => Q)  = (1.0,1.0);
      
      if(CK===1'b1 && D===1'b1)
      // seq arc SD --> Q
      (SD => Q)  = (1.0,1.0);
      
      ifnone
      // seq arc SD --> Q
      (SD => Q)  = (1.0,1.0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_RD_AND_SD === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_RD_AND_SD === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_RD_AND_SD === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_RD_AND_SD === 1'b1)
      ,1.0,0);
      
      // hold D-HL CK-HL
      $hold(negedge CK &&& (ENABLE_RD_AND_SD === 1'b1),
      negedge D &&& (ENABLE_RD_AND_SD === 1'b1),1.0);
      
      // hold D-LH CK-HL
      $hold(negedge CK &&& (ENABLE_RD_AND_SD === 1'b1),
      posedge D &&& (ENABLE_RD_AND_SD === 1'b1),1.0);
      
      // setup D-HL CK-HL
      $setup(negedge D &&& (ENABLE_RD_AND_SD === 1'b1),
      negedge CK &&& (ENABLE_RD_AND_SD === 1'b1),1.0);
      
      // setup D-LH CK-HL
      $setup(posedge D &&& (ENABLE_RD_AND_SD === 1'b1),
      negedge CK &&& (ENABLE_RD_AND_SD === 1'b1),1.0);
      
      // recovery RD-LH CK-HL
      $recovery(posedge RD &&& (ENABLE_D_AND_SD === 1'b1),
      negedge CK &&& (ENABLE_D_AND_SD === 1'b1),1.0);
      
      // removal RD-LH CK-HL
      $removal(posedge RD &&& (ENABLE_D_AND_SD === 1'b1),
      negedge CK &&& (ENABLE_D_AND_SD === 1'b1),1.0);
      
      $width(negedge RD &&& (ENABLE_NOT_CK_AND_NOT_D_AND_SD === 1'b1)
      ,1.0,0);
      
      $width(negedge RD &&& (ENABLE_NOT_CK_AND_D_AND_SD === 1'b1)
      ,1.0,0);
      
      $width(negedge RD &&& (ENABLE_CK_AND_NOT_D_AND_SD === 1'b1)
      ,1.0,0);
      
      $width(negedge RD &&& (ENABLE_CK_AND_D_AND_SD === 1'b1)
      ,1.0,0);
      
      // hold RD-LH SD-LH
      $hold(posedge SD &&& (ENABLE_NOT_CK_AND_NOT_D === 1'b1),
      posedge RD &&& (ENABLE_NOT_CK_AND_NOT_D === 1'b1),1.0);
      
      // setup RD-LH SD-LH
      $setup(posedge RD &&& (ENABLE_NOT_CK_AND_NOT_D === 1'b1),
      posedge SD &&& (ENABLE_NOT_CK_AND_NOT_D === 1'b1),1.0);
      
      // hold RD-LH SD-LH
      $hold(posedge SD &&& (ENABLE_NOT_CK_AND_D === 1'b1),
      posedge RD &&& (ENABLE_NOT_CK_AND_D === 1'b1),1.0);
      
      // setup RD-LH SD-LH
      $setup(posedge RD &&& (ENABLE_NOT_CK_AND_D === 1'b1),
      posedge SD &&& (ENABLE_NOT_CK_AND_D === 1'b1),1.0);
      
      // hold RD-LH SD-LH
      $hold(posedge SD &&& (ENABLE_CK_AND_NOT_D === 1'b1),
      posedge RD &&& (ENABLE_CK_AND_NOT_D === 1'b1),1.0);
      
      // setup RD-LH SD-LH
      $setup(posedge RD &&& (ENABLE_CK_AND_NOT_D === 1'b1),
      posedge SD &&& (ENABLE_CK_AND_NOT_D === 1'b1),1.0);
      
      // hold RD-LH SD-LH
      $hold(posedge SD &&& (ENABLE_CK_AND_D === 1'b1),
      posedge RD &&& (ENABLE_CK_AND_D === 1'b1),1.0);
      
      // setup RD-LH SD-LH
      $setup(posedge RD &&& (ENABLE_CK_AND_D === 1'b1),
      posedge SD &&& (ENABLE_CK_AND_D === 1'b1),1.0);
      
      // recovery SD-LH CK-HL
      $recovery(posedge SD &&& (ENABLE_NOT_D_AND_RD === 1'b1),
      negedge CK &&& (ENABLE_NOT_D_AND_RD === 1'b1),1.0);
      
      // removal SD-LH CK-HL
      $removal(posedge SD &&& (ENABLE_NOT_D_AND_RD === 1'b1),
      negedge CK &&& (ENABLE_NOT_D_AND_RD === 1'b1),1.0);
      
      // hold SD-LH RD-LH
      $hold(posedge RD &&& (ENABLE_NOT_CK_AND_NOT_D === 1'b1),
      posedge SD &&& (ENABLE_NOT_CK_AND_NOT_D === 1'b1),1.0);
      
      // setup SD-LH RD-LH
      $setup(posedge SD &&& (ENABLE_NOT_CK_AND_NOT_D === 1'b1),
      posedge RD &&& (ENABLE_NOT_CK_AND_NOT_D === 1'b1),1.0);
      
      // hold SD-LH RD-LH
      $hold(posedge RD &&& (ENABLE_NOT_CK_AND_D === 1'b1),
      posedge SD &&& (ENABLE_NOT_CK_AND_D === 1'b1),1.0);
      
      // setup SD-LH RD-LH
      $setup(posedge SD &&& (ENABLE_NOT_CK_AND_D === 1'b1),
      posedge RD &&& (ENABLE_NOT_CK_AND_D === 1'b1),1.0);
      
      // hold SD-LH RD-LH
      $hold(posedge RD &&& (ENABLE_CK_AND_NOT_D === 1'b1),
      posedge SD &&& (ENABLE_CK_AND_NOT_D === 1'b1),1.0);
      
      // setup SD-LH RD-LH
      $setup(posedge SD &&& (ENABLE_CK_AND_NOT_D === 1'b1),
      posedge RD &&& (ENABLE_CK_AND_NOT_D === 1'b1),1.0);
      
      // hold SD-LH RD-LH
      $hold(posedge RD &&& (ENABLE_CK_AND_D === 1'b1),
      posedge SD &&& (ENABLE_CK_AND_D === 1'b1),1.0);
      
      // setup SD-LH RD-LH
      $setup(posedge SD &&& (ENABLE_CK_AND_D === 1'b1),
      posedge RD &&& (ENABLE_CK_AND_D === 1'b1),1.0);
      
      $width(negedge SD &&& (ENABLE_NOT_CK_AND_NOT_D_AND_RD === 1'b1)
      ,1.0,0);
      
      $width(negedge SD &&& (ENABLE_NOT_CK_AND_D_AND_RD === 1'b1)
      ,1.0,0);
      
      $width(negedge SD &&& (ENABLE_CK_AND_NOT_D_AND_RD === 1'b1)
      ,1.0,0);
      
      $width(negedge SD &&& (ENABLE_CK_AND_D_AND_RD === 1'b1)
      ,1.0,0);
      
      // mpw CK_lh 
      $width(posedge CK,1.0,0);
      
      // mpw CK_hl 
      $width(negedge CK,1.0,0);
      
      // mpw RD_hl 
      $width(negedge RD,1.0,0);
      
      // mpw SD_hl 
      $width(negedge SD,1.0,0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_FDNRBSBQ_V2_2( Q, CK, D, RD, SD );
input CK, D, RD, SD;
output Q;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_FDNRBSBQ_V2_2_func SAEDRVT14_FDNRBSBQ_V2_2_behav_inst(.Q(Q),.CK(CK),.D(D),.RD(RD),.SD(SD));
`else
   SAEDRVT14_FDNRBSBQ_V2_2_func SAEDRVT14_FDNRBSBQ_V2_2_inst(.Q(Q),.CK(CK),.D(D),.RD(RD),.SD(SD));
   // spec_gates_begin
   not MGM_G0(MGM_W0,D);
   and MGM_G1(MGM_W1,RD,MGM_W0);
   and MGM_G2(ENABLE_NOT_D_AND_RD_AND_SD,SD,MGM_W1);
   and MGM_G3(MGM_W2,RD,D);
   and MGM_G4(ENABLE_D_AND_RD_AND_SD,SD,MGM_W2);
   and MGM_G5(ENABLE_RD_AND_SD,SD,RD);
   and MGM_G6(ENABLE_D_AND_SD,SD,D);
   not MGM_G7(MGM_W3,CK);
   not MGM_G8(MGM_W4,D);
   and MGM_G9(MGM_W5,MGM_W4,MGM_W3);
   and MGM_G10(ENABLE_NOT_CK_AND_NOT_D_AND_SD,SD,MGM_W5);
   not MGM_G11(MGM_W6,CK);
   and MGM_G12(MGM_W7,D,MGM_W6);
   and MGM_G13(ENABLE_NOT_CK_AND_D_AND_SD,SD,MGM_W7);
   not MGM_G14(MGM_W8,D);
   and MGM_G15(MGM_W9,MGM_W8,CK);
   and MGM_G16(ENABLE_CK_AND_NOT_D_AND_SD,SD,MGM_W9);
   and MGM_G17(MGM_W10,D,CK);
   and MGM_G18(ENABLE_CK_AND_D_AND_SD,SD,MGM_W10);
   not MGM_G19(MGM_W11,CK);
   not MGM_G20(MGM_W12,D);
   and MGM_G21(ENABLE_NOT_CK_AND_NOT_D,MGM_W12,MGM_W11);
   not MGM_G22(MGM_W13,CK);
   and MGM_G23(ENABLE_NOT_CK_AND_D,D,MGM_W13);
   not MGM_G24(MGM_W14,D);
   and MGM_G25(ENABLE_CK_AND_NOT_D,MGM_W14,CK);
   and MGM_G26(ENABLE_CK_AND_D,D,CK);
   not MGM_G27(MGM_W15,D);
   and MGM_G28(ENABLE_NOT_D_AND_RD,RD,MGM_W15);
   not MGM_G29(MGM_W16,CK);
   not MGM_G30(MGM_W17,D);
   and MGM_G31(MGM_W18,MGM_W17,MGM_W16);
   and MGM_G32(ENABLE_NOT_CK_AND_NOT_D_AND_RD,RD,MGM_W18);
   not MGM_G33(MGM_W19,CK);
   and MGM_G34(MGM_W20,D,MGM_W19);
   and MGM_G35(ENABLE_NOT_CK_AND_D_AND_RD,RD,MGM_W20);
   not MGM_G36(MGM_W21,D);
   and MGM_G37(MGM_W22,MGM_W21,CK);
   and MGM_G38(ENABLE_CK_AND_NOT_D_AND_RD,RD,MGM_W22);
   and MGM_G39(MGM_W23,D,CK);
   and MGM_G40(ENABLE_CK_AND_D_AND_RD,RD,MGM_W23);
   // spec_gates_end
   // specify_block_begin
   specify

      // seq arc CK --> Q
      (negedge CK => (Q : D))  = (1.0,1.0);
      
      if(CK===1'b0 && D===1'b0 && SD===1'b0)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b0 && D===1'b0 && SD===1'b1)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b0 && D===1'b1 && SD===1'b0)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b0 && D===1'b1 && SD===1'b1)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b1 && D===1'b0 && SD===1'b0)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b1 && D===1'b0 && SD===1'b1)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b1 && D===1'b1 && SD===1'b0)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b1 && D===1'b1 && SD===1'b1)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      ifnone
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b0 && D===1'b0)
      // seq arc SD --> Q
      (SD => Q)  = (1.0,1.0);
      
      if(CK===1'b0 && D===1'b1)
      // seq arc SD --> Q
      (SD => Q)  = (1.0,1.0);
      
      if(CK===1'b1 && D===1'b0)
      // seq arc SD --> Q
      (SD => Q)  = (1.0,1.0);
      
      if(CK===1'b1 && D===1'b1)
      // seq arc SD --> Q
      (SD => Q)  = (1.0,1.0);
      
      ifnone
      // seq arc SD --> Q
      (SD => Q)  = (1.0,1.0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_RD_AND_SD === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_RD_AND_SD === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_RD_AND_SD === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_RD_AND_SD === 1'b1)
      ,1.0,0);
      
      // hold D-HL CK-HL
      $hold(negedge CK &&& (ENABLE_RD_AND_SD === 1'b1),
      negedge D &&& (ENABLE_RD_AND_SD === 1'b1),1.0);
      
      // hold D-LH CK-HL
      $hold(negedge CK &&& (ENABLE_RD_AND_SD === 1'b1),
      posedge D &&& (ENABLE_RD_AND_SD === 1'b1),1.0);
      
      // setup D-HL CK-HL
      $setup(negedge D &&& (ENABLE_RD_AND_SD === 1'b1),
      negedge CK &&& (ENABLE_RD_AND_SD === 1'b1),1.0);
      
      // setup D-LH CK-HL
      $setup(posedge D &&& (ENABLE_RD_AND_SD === 1'b1),
      negedge CK &&& (ENABLE_RD_AND_SD === 1'b1),1.0);
      
      // recovery RD-LH CK-HL
      $recovery(posedge RD &&& (ENABLE_D_AND_SD === 1'b1),
      negedge CK &&& (ENABLE_D_AND_SD === 1'b1),1.0);
      
      // removal RD-LH CK-HL
      $removal(posedge RD &&& (ENABLE_D_AND_SD === 1'b1),
      negedge CK &&& (ENABLE_D_AND_SD === 1'b1),1.0);
      
      $width(negedge RD &&& (ENABLE_NOT_CK_AND_NOT_D_AND_SD === 1'b1)
      ,1.0,0);
      
      $width(negedge RD &&& (ENABLE_NOT_CK_AND_D_AND_SD === 1'b1)
      ,1.0,0);
      
      $width(negedge RD &&& (ENABLE_CK_AND_NOT_D_AND_SD === 1'b1)
      ,1.0,0);
      
      $width(negedge RD &&& (ENABLE_CK_AND_D_AND_SD === 1'b1)
      ,1.0,0);
      
      // hold RD-LH SD-LH
      $hold(posedge SD &&& (ENABLE_NOT_CK_AND_NOT_D === 1'b1),
      posedge RD &&& (ENABLE_NOT_CK_AND_NOT_D === 1'b1),1.0);
      
      // setup RD-LH SD-LH
      $setup(posedge RD &&& (ENABLE_NOT_CK_AND_NOT_D === 1'b1),
      posedge SD &&& (ENABLE_NOT_CK_AND_NOT_D === 1'b1),1.0);
      
      // hold RD-LH SD-LH
      $hold(posedge SD &&& (ENABLE_NOT_CK_AND_D === 1'b1),
      posedge RD &&& (ENABLE_NOT_CK_AND_D === 1'b1),1.0);
      
      // setup RD-LH SD-LH
      $setup(posedge RD &&& (ENABLE_NOT_CK_AND_D === 1'b1),
      posedge SD &&& (ENABLE_NOT_CK_AND_D === 1'b1),1.0);
      
      // hold RD-LH SD-LH
      $hold(posedge SD &&& (ENABLE_CK_AND_NOT_D === 1'b1),
      posedge RD &&& (ENABLE_CK_AND_NOT_D === 1'b1),1.0);
      
      // setup RD-LH SD-LH
      $setup(posedge RD &&& (ENABLE_CK_AND_NOT_D === 1'b1),
      posedge SD &&& (ENABLE_CK_AND_NOT_D === 1'b1),1.0);
      
      // hold RD-LH SD-LH
      $hold(posedge SD &&& (ENABLE_CK_AND_D === 1'b1),
      posedge RD &&& (ENABLE_CK_AND_D === 1'b1),1.0);
      
      // setup RD-LH SD-LH
      $setup(posedge RD &&& (ENABLE_CK_AND_D === 1'b1),
      posedge SD &&& (ENABLE_CK_AND_D === 1'b1),1.0);
      
      // recovery SD-LH CK-HL
      $recovery(posedge SD &&& (ENABLE_NOT_D_AND_RD === 1'b1),
      negedge CK &&& (ENABLE_NOT_D_AND_RD === 1'b1),1.0);
      
      // removal SD-LH CK-HL
      $removal(posedge SD &&& (ENABLE_NOT_D_AND_RD === 1'b1),
      negedge CK &&& (ENABLE_NOT_D_AND_RD === 1'b1),1.0);
      
      // hold SD-LH RD-LH
      $hold(posedge RD &&& (ENABLE_NOT_CK_AND_NOT_D === 1'b1),
      posedge SD &&& (ENABLE_NOT_CK_AND_NOT_D === 1'b1),1.0);
      
      // setup SD-LH RD-LH
      $setup(posedge SD &&& (ENABLE_NOT_CK_AND_NOT_D === 1'b1),
      posedge RD &&& (ENABLE_NOT_CK_AND_NOT_D === 1'b1),1.0);
      
      // hold SD-LH RD-LH
      $hold(posedge RD &&& (ENABLE_NOT_CK_AND_D === 1'b1),
      posedge SD &&& (ENABLE_NOT_CK_AND_D === 1'b1),1.0);
      
      // setup SD-LH RD-LH
      $setup(posedge SD &&& (ENABLE_NOT_CK_AND_D === 1'b1),
      posedge RD &&& (ENABLE_NOT_CK_AND_D === 1'b1),1.0);
      
      // hold SD-LH RD-LH
      $hold(posedge RD &&& (ENABLE_CK_AND_NOT_D === 1'b1),
      posedge SD &&& (ENABLE_CK_AND_NOT_D === 1'b1),1.0);
      
      // setup SD-LH RD-LH
      $setup(posedge SD &&& (ENABLE_CK_AND_NOT_D === 1'b1),
      posedge RD &&& (ENABLE_CK_AND_NOT_D === 1'b1),1.0);
      
      // hold SD-LH RD-LH
      $hold(posedge RD &&& (ENABLE_CK_AND_D === 1'b1),
      posedge SD &&& (ENABLE_CK_AND_D === 1'b1),1.0);
      
      // setup SD-LH RD-LH
      $setup(posedge SD &&& (ENABLE_CK_AND_D === 1'b1),
      posedge RD &&& (ENABLE_CK_AND_D === 1'b1),1.0);
      
      $width(negedge SD &&& (ENABLE_NOT_CK_AND_NOT_D_AND_RD === 1'b1)
      ,1.0,0);
      
      $width(negedge SD &&& (ENABLE_NOT_CK_AND_D_AND_RD === 1'b1)
      ,1.0,0);
      
      $width(negedge SD &&& (ENABLE_CK_AND_NOT_D_AND_RD === 1'b1)
      ,1.0,0);
      
      $width(negedge SD &&& (ENABLE_CK_AND_D_AND_RD === 1'b1)
      ,1.0,0);
      
      // mpw CK_lh 
      $width(posedge CK,1.0,0);
      
      // mpw CK_hl 
      $width(negedge CK,1.0,0);
      
      // mpw RD_hl 
      $width(negedge RD,1.0,0);
      
      // mpw SD_hl 
      $width(negedge SD,1.0,0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_FDNRBSBQ_V2_4( Q, CK, D, RD, SD );
input CK, D, RD, SD;
output Q;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_FDNRBSBQ_V2_4_func SAEDRVT14_FDNRBSBQ_V2_4_behav_inst(.Q(Q),.CK(CK),.D(D),.RD(RD),.SD(SD));
`else
   SAEDRVT14_FDNRBSBQ_V2_4_func SAEDRVT14_FDNRBSBQ_V2_4_inst(.Q(Q),.CK(CK),.D(D),.RD(RD),.SD(SD));
   // spec_gates_begin
   not MGM_G0(MGM_W0,D);
   and MGM_G1(MGM_W1,RD,MGM_W0);
   and MGM_G2(ENABLE_NOT_D_AND_RD_AND_SD,SD,MGM_W1);
   and MGM_G3(MGM_W2,RD,D);
   and MGM_G4(ENABLE_D_AND_RD_AND_SD,SD,MGM_W2);
   and MGM_G5(ENABLE_RD_AND_SD,SD,RD);
   and MGM_G6(ENABLE_D_AND_SD,SD,D);
   not MGM_G7(MGM_W3,CK);
   not MGM_G8(MGM_W4,D);
   and MGM_G9(MGM_W5,MGM_W4,MGM_W3);
   and MGM_G10(ENABLE_NOT_CK_AND_NOT_D_AND_SD,SD,MGM_W5);
   not MGM_G11(MGM_W6,CK);
   and MGM_G12(MGM_W7,D,MGM_W6);
   and MGM_G13(ENABLE_NOT_CK_AND_D_AND_SD,SD,MGM_W7);
   not MGM_G14(MGM_W8,D);
   and MGM_G15(MGM_W9,MGM_W8,CK);
   and MGM_G16(ENABLE_CK_AND_NOT_D_AND_SD,SD,MGM_W9);
   and MGM_G17(MGM_W10,D,CK);
   and MGM_G18(ENABLE_CK_AND_D_AND_SD,SD,MGM_W10);
   not MGM_G19(MGM_W11,CK);
   not MGM_G20(MGM_W12,D);
   and MGM_G21(ENABLE_NOT_CK_AND_NOT_D,MGM_W12,MGM_W11);
   not MGM_G22(MGM_W13,CK);
   and MGM_G23(ENABLE_NOT_CK_AND_D,D,MGM_W13);
   not MGM_G24(MGM_W14,D);
   and MGM_G25(ENABLE_CK_AND_NOT_D,MGM_W14,CK);
   and MGM_G26(ENABLE_CK_AND_D,D,CK);
   not MGM_G27(MGM_W15,D);
   and MGM_G28(ENABLE_NOT_D_AND_RD,RD,MGM_W15);
   not MGM_G29(MGM_W16,CK);
   not MGM_G30(MGM_W17,D);
   and MGM_G31(MGM_W18,MGM_W17,MGM_W16);
   and MGM_G32(ENABLE_NOT_CK_AND_NOT_D_AND_RD,RD,MGM_W18);
   not MGM_G33(MGM_W19,CK);
   and MGM_G34(MGM_W20,D,MGM_W19);
   and MGM_G35(ENABLE_NOT_CK_AND_D_AND_RD,RD,MGM_W20);
   not MGM_G36(MGM_W21,D);
   and MGM_G37(MGM_W22,MGM_W21,CK);
   and MGM_G38(ENABLE_CK_AND_NOT_D_AND_RD,RD,MGM_W22);
   and MGM_G39(MGM_W23,D,CK);
   and MGM_G40(ENABLE_CK_AND_D_AND_RD,RD,MGM_W23);
   // spec_gates_end
   // specify_block_begin
   specify

      // seq arc CK --> Q
      (negedge CK => (Q : D))  = (1.0,1.0);
      
      if(CK===1'b0 && D===1'b0 && SD===1'b0)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b0 && D===1'b0 && SD===1'b1)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b0 && D===1'b1 && SD===1'b0)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b0 && D===1'b1 && SD===1'b1)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b1 && D===1'b0 && SD===1'b0)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b1 && D===1'b0 && SD===1'b1)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b1 && D===1'b1 && SD===1'b0)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b1 && D===1'b1 && SD===1'b1)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      ifnone
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b0 && D===1'b0)
      // seq arc SD --> Q
      (SD => Q)  = (1.0,1.0);
      
      if(CK===1'b0 && D===1'b1)
      // seq arc SD --> Q
      (SD => Q)  = (1.0,1.0);
      
      if(CK===1'b1 && D===1'b0)
      // seq arc SD --> Q
      (SD => Q)  = (1.0,1.0);
      
      if(CK===1'b1 && D===1'b1)
      // seq arc SD --> Q
      (SD => Q)  = (1.0,1.0);
      
      ifnone
      // seq arc SD --> Q
      (SD => Q)  = (1.0,1.0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_RD_AND_SD === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_RD_AND_SD === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_RD_AND_SD === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_RD_AND_SD === 1'b1)
      ,1.0,0);
      
      // hold D-HL CK-HL
      $hold(negedge CK &&& (ENABLE_RD_AND_SD === 1'b1),
      negedge D &&& (ENABLE_RD_AND_SD === 1'b1),1.0);
      
      // hold D-LH CK-HL
      $hold(negedge CK &&& (ENABLE_RD_AND_SD === 1'b1),
      posedge D &&& (ENABLE_RD_AND_SD === 1'b1),1.0);
      
      // setup D-HL CK-HL
      $setup(negedge D &&& (ENABLE_RD_AND_SD === 1'b1),
      negedge CK &&& (ENABLE_RD_AND_SD === 1'b1),1.0);
      
      // setup D-LH CK-HL
      $setup(posedge D &&& (ENABLE_RD_AND_SD === 1'b1),
      negedge CK &&& (ENABLE_RD_AND_SD === 1'b1),1.0);
      
      // recovery RD-LH CK-HL
      $recovery(posedge RD &&& (ENABLE_D_AND_SD === 1'b1),
      negedge CK &&& (ENABLE_D_AND_SD === 1'b1),1.0);
      
      // removal RD-LH CK-HL
      $removal(posedge RD &&& (ENABLE_D_AND_SD === 1'b1),
      negedge CK &&& (ENABLE_D_AND_SD === 1'b1),1.0);
      
      $width(negedge RD &&& (ENABLE_NOT_CK_AND_NOT_D_AND_SD === 1'b1)
      ,1.0,0);
      
      $width(negedge RD &&& (ENABLE_NOT_CK_AND_D_AND_SD === 1'b1)
      ,1.0,0);
      
      $width(negedge RD &&& (ENABLE_CK_AND_NOT_D_AND_SD === 1'b1)
      ,1.0,0);
      
      $width(negedge RD &&& (ENABLE_CK_AND_D_AND_SD === 1'b1)
      ,1.0,0);
      
      // hold RD-LH SD-LH
      $hold(posedge SD &&& (ENABLE_NOT_CK_AND_NOT_D === 1'b1),
      posedge RD &&& (ENABLE_NOT_CK_AND_NOT_D === 1'b1),1.0);
      
      // setup RD-LH SD-LH
      $setup(posedge RD &&& (ENABLE_NOT_CK_AND_NOT_D === 1'b1),
      posedge SD &&& (ENABLE_NOT_CK_AND_NOT_D === 1'b1),1.0);
      
      // hold RD-LH SD-LH
      $hold(posedge SD &&& (ENABLE_NOT_CK_AND_D === 1'b1),
      posedge RD &&& (ENABLE_NOT_CK_AND_D === 1'b1),1.0);
      
      // setup RD-LH SD-LH
      $setup(posedge RD &&& (ENABLE_NOT_CK_AND_D === 1'b1),
      posedge SD &&& (ENABLE_NOT_CK_AND_D === 1'b1),1.0);
      
      // hold RD-LH SD-LH
      $hold(posedge SD &&& (ENABLE_CK_AND_NOT_D === 1'b1),
      posedge RD &&& (ENABLE_CK_AND_NOT_D === 1'b1),1.0);
      
      // setup RD-LH SD-LH
      $setup(posedge RD &&& (ENABLE_CK_AND_NOT_D === 1'b1),
      posedge SD &&& (ENABLE_CK_AND_NOT_D === 1'b1),1.0);
      
      // hold RD-LH SD-LH
      $hold(posedge SD &&& (ENABLE_CK_AND_D === 1'b1),
      posedge RD &&& (ENABLE_CK_AND_D === 1'b1),1.0);
      
      // setup RD-LH SD-LH
      $setup(posedge RD &&& (ENABLE_CK_AND_D === 1'b1),
      posedge SD &&& (ENABLE_CK_AND_D === 1'b1),1.0);
      
      // recovery SD-LH CK-HL
      $recovery(posedge SD &&& (ENABLE_NOT_D_AND_RD === 1'b1),
      negedge CK &&& (ENABLE_NOT_D_AND_RD === 1'b1),1.0);
      
      // removal SD-LH CK-HL
      $removal(posedge SD &&& (ENABLE_NOT_D_AND_RD === 1'b1),
      negedge CK &&& (ENABLE_NOT_D_AND_RD === 1'b1),1.0);
      
      // hold SD-LH RD-LH
      $hold(posedge RD &&& (ENABLE_NOT_CK_AND_NOT_D === 1'b1),
      posedge SD &&& (ENABLE_NOT_CK_AND_NOT_D === 1'b1),1.0);
      
      // setup SD-LH RD-LH
      $setup(posedge SD &&& (ENABLE_NOT_CK_AND_NOT_D === 1'b1),
      posedge RD &&& (ENABLE_NOT_CK_AND_NOT_D === 1'b1),1.0);
      
      // hold SD-LH RD-LH
      $hold(posedge RD &&& (ENABLE_NOT_CK_AND_D === 1'b1),
      posedge SD &&& (ENABLE_NOT_CK_AND_D === 1'b1),1.0);
      
      // setup SD-LH RD-LH
      $setup(posedge SD &&& (ENABLE_NOT_CK_AND_D === 1'b1),
      posedge RD &&& (ENABLE_NOT_CK_AND_D === 1'b1),1.0);
      
      // hold SD-LH RD-LH
      $hold(posedge RD &&& (ENABLE_CK_AND_NOT_D === 1'b1),
      posedge SD &&& (ENABLE_CK_AND_NOT_D === 1'b1),1.0);
      
      // setup SD-LH RD-LH
      $setup(posedge SD &&& (ENABLE_CK_AND_NOT_D === 1'b1),
      posedge RD &&& (ENABLE_CK_AND_NOT_D === 1'b1),1.0);
      
      // hold SD-LH RD-LH
      $hold(posedge RD &&& (ENABLE_CK_AND_D === 1'b1),
      posedge SD &&& (ENABLE_CK_AND_D === 1'b1),1.0);
      
      // setup SD-LH RD-LH
      $setup(posedge SD &&& (ENABLE_CK_AND_D === 1'b1),
      posedge RD &&& (ENABLE_CK_AND_D === 1'b1),1.0);
      
      $width(negedge SD &&& (ENABLE_NOT_CK_AND_NOT_D_AND_RD === 1'b1)
      ,1.0,0);
      
      $width(negedge SD &&& (ENABLE_NOT_CK_AND_D_AND_RD === 1'b1)
      ,1.0,0);
      
      $width(negedge SD &&& (ENABLE_CK_AND_NOT_D_AND_RD === 1'b1)
      ,1.0,0);
      
      $width(negedge SD &&& (ENABLE_CK_AND_D_AND_RD === 1'b1)
      ,1.0,0);
      
      // mpw CK_lh 
      $width(posedge CK,1.0,0);
      
      // mpw CK_hl 
      $width(negedge CK,1.0,0);
      
      // mpw RD_hl 
      $width(negedge RD,1.0,0);
      
      // mpw SD_hl 
      $width(negedge SD,1.0,0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_FDN_V2_0P5( Q, QN, CK, D );
input CK, D;
output Q, QN;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_FDN_V2_0P5_func SAEDRVT14_FDN_V2_0P5_behav_inst(.Q(Q),.QN(QN),.CK(CK),.D(D));
`else
   SAEDRVT14_FDN_V2_0P5_func SAEDRVT14_FDN_V2_0P5_inst(.Q(Q),.QN(QN),.CK(CK),.D(D));
   // spec_gates_begin
   not MGM_G0(ENABLE_NOT_D,D);
   buf MGM_G1(ENABLE_D,D);
   // spec_gates_end
   // specify_block_begin
   specify

      // seq arc CK --> Q
      (negedge CK => (Q : D))  = (1.0,1.0);
      
      // seq arc CK --> QN
      (negedge CK => (QN : D))  = (1.0,1.0);
      
      $width(negedge CK &&& (ENABLE_NOT_D === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D === 1'b1)
      ,1.0,0);
      
      // hold D-HL CK-HL
      $hold(negedge CK,negedge D,1.0);
      
      // hold D-LH CK-HL
      $hold(negedge CK,posedge D,1.0);
      
      // setup D-HL CK-HL
      $setup(negedge D,negedge CK,1.0);
      
      // setup D-LH CK-HL
      $setup(posedge D,negedge CK,1.0);
      
      // mpw CK_lh 
      $width(posedge CK,1.0,0);
      
      // mpw CK_hl 
      $width(negedge CK,1.0,0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_FDN_V2_1( Q, QN, CK, D );
input CK, D;
output Q, QN;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_FDN_V2_1_func SAEDRVT14_FDN_V2_1_behav_inst(.Q(Q),.QN(QN),.CK(CK),.D(D));
`else
   SAEDRVT14_FDN_V2_1_func SAEDRVT14_FDN_V2_1_inst(.Q(Q),.QN(QN),.CK(CK),.D(D));
   // spec_gates_begin
   not MGM_G0(ENABLE_NOT_D,D);
   buf MGM_G1(ENABLE_D,D);
   // spec_gates_end
   // specify_block_begin
   specify

      // seq arc CK --> Q
      (negedge CK => (Q : D))  = (1.0,1.0);
      
      // seq arc CK --> QN
      (negedge CK => (QN : D))  = (1.0,1.0);
      
      $width(negedge CK &&& (ENABLE_NOT_D === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D === 1'b1)
      ,1.0,0);
      
      // hold D-HL CK-HL
      $hold(negedge CK,negedge D,1.0);
      
      // hold D-LH CK-HL
      $hold(negedge CK,posedge D,1.0);
      
      // setup D-HL CK-HL
      $setup(negedge D,negedge CK,1.0);
      
      // setup D-LH CK-HL
      $setup(posedge D,negedge CK,1.0);
      
      // mpw CK_lh 
      $width(posedge CK,1.0,0);
      
      // mpw CK_hl 
      $width(negedge CK,1.0,0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_FDN_V2_2( Q, QN, CK, D );
input CK, D;
output Q, QN;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_FDN_V2_2_func SAEDRVT14_FDN_V2_2_behav_inst(.Q(Q),.QN(QN),.CK(CK),.D(D));
`else
   SAEDRVT14_FDN_V2_2_func SAEDRVT14_FDN_V2_2_inst(.Q(Q),.QN(QN),.CK(CK),.D(D));
   // spec_gates_begin
   not MGM_G0(ENABLE_NOT_D,D);
   buf MGM_G1(ENABLE_D,D);
   // spec_gates_end
   // specify_block_begin
   specify

      // seq arc CK --> Q
      (negedge CK => (Q : D))  = (1.0,1.0);
      
      // seq arc CK --> QN
      (negedge CK => (QN : D))  = (1.0,1.0);
      
      $width(negedge CK &&& (ENABLE_NOT_D === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D === 1'b1)
      ,1.0,0);
      
      // hold D-HL CK-HL
      $hold(negedge CK,negedge D,1.0);
      
      // hold D-LH CK-HL
      $hold(negedge CK,posedge D,1.0);
      
      // setup D-HL CK-HL
      $setup(negedge D,negedge CK,1.0);
      
      // setup D-LH CK-HL
      $setup(posedge D,negedge CK,1.0);
      
      // mpw CK_lh 
      $width(posedge CK,1.0,0);
      
      // mpw CK_hl 
      $width(negedge CK,1.0,0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_FDN_V2_4( Q, QN, CK, D );
input CK, D;
output Q, QN;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_FDN_V2_4_func SAEDRVT14_FDN_V2_4_behav_inst(.Q(Q),.QN(QN),.CK(CK),.D(D));
`else
   SAEDRVT14_FDN_V2_4_func SAEDRVT14_FDN_V2_4_inst(.Q(Q),.QN(QN),.CK(CK),.D(D));
   // spec_gates_begin
   not MGM_G0(ENABLE_NOT_D,D);
   buf MGM_G1(ENABLE_D,D);
   // spec_gates_end
   // specify_block_begin
   specify

      // seq arc CK --> Q
      (negedge CK => (Q : D))  = (1.0,1.0);
      
      // seq arc CK --> QN
      (negedge CK => (QN : D))  = (1.0,1.0);
      
      $width(negedge CK &&& (ENABLE_NOT_D === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D === 1'b1)
      ,1.0,0);
      
      // hold D-HL CK-HL
      $hold(negedge CK,negedge D,1.0);
      
      // hold D-LH CK-HL
      $hold(negedge CK,posedge D,1.0);
      
      // setup D-HL CK-HL
      $setup(negedge D,negedge CK,1.0);
      
      // setup D-LH CK-HL
      $setup(posedge D,negedge CK,1.0);
      
      // mpw CK_lh 
      $width(posedge CK,1.0,0);
      
      // mpw CK_hl 
      $width(negedge CK,1.0,0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_FDPCBQ_V2LP_0P5( Q, CK, D, RS );
input CK, D, RS;
output Q;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_FDPCBQ_V2LP_0P5_func SAEDRVT14_FDPCBQ_V2LP_0P5_behav_inst(.Q(Q),.CK(CK),.D(D),.RS(RS));
`else
   SAEDRVT14_FDPCBQ_V2LP_0P5_func SAEDRVT14_FDPCBQ_V2LP_0P5_inst(.Q(Q),.CK(CK),.D(D),.RS(RS));
   // spec_gates_begin
   not MGM_G0(MGM_W0,D);
   not MGM_G1(MGM_W1,RS);
   and MGM_G2(ENABLE_NOT_D_AND_NOT_RS,MGM_W1,MGM_W0);
   not MGM_G3(MGM_W2,D);
   and MGM_G4(ENABLE_NOT_D_AND_RS,RS,MGM_W2);
   not MGM_G5(MGM_W3,RS);
   and MGM_G6(ENABLE_D_AND_NOT_RS,MGM_W3,D);
   and MGM_G7(ENABLE_D_AND_RS,RS,D);
   buf MGM_G8(ENABLE_RS,RS);
   buf MGM_G9(ENABLE_D,D);
   // spec_gates_end
   // specify_block_begin
   specify

      if(D===1'b0 && RS===1'b0)
      // seq arc CK --> Q
      (posedge CK => (Q : D))  = (1.0,1.0);
      
      if(D===1'b1 && RS===1'b0)
      // seq arc CK --> Q
      (posedge CK => (Q : D))  = (1.0,1.0);
      
      if(RS===1'b1)
      // seq arc CK --> Q
      (posedge CK => (Q : D))  = (1.0,1.0);
      
      ifnone
      // seq arc CK --> Q
      (posedge CK => (Q : D))  = (1.0,1.0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_NOT_RS === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_NOT_RS === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_RS === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_RS === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_NOT_RS === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_NOT_RS === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_RS === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_RS === 1'b1)
      ,1.0,0);
      
      // hold D-HL CK-LH
      $hold(posedge CK &&& (ENABLE_RS === 1'b1),
      negedge D &&& (ENABLE_RS === 1'b1),1.0);
      
      // hold D-LH CK-LH
      $hold(posedge CK &&& (ENABLE_RS === 1'b1),
      posedge D &&& (ENABLE_RS === 1'b1),1.0);
      
      // setup D-HL CK-LH
      $setup(negedge D &&& (ENABLE_RS === 1'b1),
      posedge CK &&& (ENABLE_RS === 1'b1),1.0);
      
      // setup D-LH CK-LH
      $setup(posedge D &&& (ENABLE_RS === 1'b1),
      posedge CK &&& (ENABLE_RS === 1'b1),1.0);
      
      // hold RS-HL CK-LH
      $hold(posedge CK &&& (ENABLE_D === 1'b1),
      negedge RS &&& (ENABLE_D === 1'b1),1.0);
      
      // hold RS-LH CK-LH
      $hold(posedge CK &&& (ENABLE_D === 1'b1),
      posedge RS &&& (ENABLE_D === 1'b1),1.0);
      
      // setup RS-HL CK-LH
      $setup(negedge RS &&& (ENABLE_D === 1'b1),
      posedge CK &&& (ENABLE_D === 1'b1),1.0);
      
      // setup RS-LH CK-LH
      $setup(posedge RS &&& (ENABLE_D === 1'b1),
      posedge CK &&& (ENABLE_D === 1'b1),1.0);
      
      // mpw CK_lh 
      $width(posedge CK,1.0,0);
      
      // mpw CK_hl 
      $width(negedge CK,1.0,0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_FDPCBQ_V2LP_1( Q, CK, D, RS );
input CK, D, RS;
output Q;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_FDPCBQ_V2LP_1_func SAEDRVT14_FDPCBQ_V2LP_1_behav_inst(.Q(Q),.CK(CK),.D(D),.RS(RS));
`else
   SAEDRVT14_FDPCBQ_V2LP_1_func SAEDRVT14_FDPCBQ_V2LP_1_inst(.Q(Q),.CK(CK),.D(D),.RS(RS));
   // spec_gates_begin
   not MGM_G0(MGM_W0,D);
   not MGM_G1(MGM_W1,RS);
   and MGM_G2(ENABLE_NOT_D_AND_NOT_RS,MGM_W1,MGM_W0);
   not MGM_G3(MGM_W2,D);
   and MGM_G4(ENABLE_NOT_D_AND_RS,RS,MGM_W2);
   not MGM_G5(MGM_W3,RS);
   and MGM_G6(ENABLE_D_AND_NOT_RS,MGM_W3,D);
   and MGM_G7(ENABLE_D_AND_RS,RS,D);
   buf MGM_G8(ENABLE_RS,RS);
   buf MGM_G9(ENABLE_D,D);
   // spec_gates_end
   // specify_block_begin
   specify

      if(D===1'b0 && RS===1'b0)
      // seq arc CK --> Q
      (posedge CK => (Q : D))  = (1.0,1.0);
      
      if(D===1'b1 && RS===1'b0)
      // seq arc CK --> Q
      (posedge CK => (Q : D))  = (1.0,1.0);
      
      if(RS===1'b1)
      // seq arc CK --> Q
      (posedge CK => (Q : D))  = (1.0,1.0);
      
      ifnone
      // seq arc CK --> Q
      (posedge CK => (Q : D))  = (1.0,1.0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_NOT_RS === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_NOT_RS === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_RS === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_RS === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_NOT_RS === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_NOT_RS === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_RS === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_RS === 1'b1)
      ,1.0,0);
      
      // hold D-HL CK-LH
      $hold(posedge CK &&& (ENABLE_RS === 1'b1),
      negedge D &&& (ENABLE_RS === 1'b1),1.0);
      
      // hold D-LH CK-LH
      $hold(posedge CK &&& (ENABLE_RS === 1'b1),
      posedge D &&& (ENABLE_RS === 1'b1),1.0);
      
      // setup D-HL CK-LH
      $setup(negedge D &&& (ENABLE_RS === 1'b1),
      posedge CK &&& (ENABLE_RS === 1'b1),1.0);
      
      // setup D-LH CK-LH
      $setup(posedge D &&& (ENABLE_RS === 1'b1),
      posedge CK &&& (ENABLE_RS === 1'b1),1.0);
      
      // hold RS-HL CK-LH
      $hold(posedge CK &&& (ENABLE_D === 1'b1),
      negedge RS &&& (ENABLE_D === 1'b1),1.0);
      
      // hold RS-LH CK-LH
      $hold(posedge CK &&& (ENABLE_D === 1'b1),
      posedge RS &&& (ENABLE_D === 1'b1),1.0);
      
      // setup RS-HL CK-LH
      $setup(negedge RS &&& (ENABLE_D === 1'b1),
      posedge CK &&& (ENABLE_D === 1'b1),1.0);
      
      // setup RS-LH CK-LH
      $setup(posedge RS &&& (ENABLE_D === 1'b1),
      posedge CK &&& (ENABLE_D === 1'b1),1.0);
      
      // mpw CK_lh 
      $width(posedge CK,1.0,0);
      
      // mpw CK_hl 
      $width(negedge CK,1.0,0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_FDPCBQ_V2LP_2( Q, CK, D, RS );
input CK, D, RS;
output Q;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_FDPCBQ_V2LP_2_func SAEDRVT14_FDPCBQ_V2LP_2_behav_inst(.Q(Q),.CK(CK),.D(D),.RS(RS));
`else
   SAEDRVT14_FDPCBQ_V2LP_2_func SAEDRVT14_FDPCBQ_V2LP_2_inst(.Q(Q),.CK(CK),.D(D),.RS(RS));
   // spec_gates_begin
   not MGM_G0(MGM_W0,D);
   not MGM_G1(MGM_W1,RS);
   and MGM_G2(ENABLE_NOT_D_AND_NOT_RS,MGM_W1,MGM_W0);
   not MGM_G3(MGM_W2,D);
   and MGM_G4(ENABLE_NOT_D_AND_RS,RS,MGM_W2);
   not MGM_G5(MGM_W3,RS);
   and MGM_G6(ENABLE_D_AND_NOT_RS,MGM_W3,D);
   and MGM_G7(ENABLE_D_AND_RS,RS,D);
   buf MGM_G8(ENABLE_RS,RS);
   buf MGM_G9(ENABLE_D,D);
   // spec_gates_end
   // specify_block_begin
   specify

      if(D===1'b0 && RS===1'b0)
      // seq arc CK --> Q
      (posedge CK => (Q : D))  = (1.0,1.0);
      
      if(D===1'b1 && RS===1'b0)
      // seq arc CK --> Q
      (posedge CK => (Q : D))  = (1.0,1.0);
      
      if(RS===1'b1)
      // seq arc CK --> Q
      (posedge CK => (Q : D))  = (1.0,1.0);
      
      ifnone
      // seq arc CK --> Q
      (posedge CK => (Q : D))  = (1.0,1.0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_NOT_RS === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_NOT_RS === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_RS === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_RS === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_NOT_RS === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_NOT_RS === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_RS === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_RS === 1'b1)
      ,1.0,0);
      
      // hold D-HL CK-LH
      $hold(posedge CK &&& (ENABLE_RS === 1'b1),
      negedge D &&& (ENABLE_RS === 1'b1),1.0);
      
      // hold D-LH CK-LH
      $hold(posedge CK &&& (ENABLE_RS === 1'b1),
      posedge D &&& (ENABLE_RS === 1'b1),1.0);
      
      // setup D-HL CK-LH
      $setup(negedge D &&& (ENABLE_RS === 1'b1),
      posedge CK &&& (ENABLE_RS === 1'b1),1.0);
      
      // setup D-LH CK-LH
      $setup(posedge D &&& (ENABLE_RS === 1'b1),
      posedge CK &&& (ENABLE_RS === 1'b1),1.0);
      
      // hold RS-HL CK-LH
      $hold(posedge CK &&& (ENABLE_D === 1'b1),
      negedge RS &&& (ENABLE_D === 1'b1),1.0);
      
      // hold RS-LH CK-LH
      $hold(posedge CK &&& (ENABLE_D === 1'b1),
      posedge RS &&& (ENABLE_D === 1'b1),1.0);
      
      // setup RS-HL CK-LH
      $setup(negedge RS &&& (ENABLE_D === 1'b1),
      posedge CK &&& (ENABLE_D === 1'b1),1.0);
      
      // setup RS-LH CK-LH
      $setup(posedge RS &&& (ENABLE_D === 1'b1),
      posedge CK &&& (ENABLE_D === 1'b1),1.0);
      
      // mpw CK_lh 
      $width(posedge CK,1.0,0);
      
      // mpw CK_hl 
      $width(negedge CK,1.0,0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_FDPCBQ_V2_0P5( Q, CK, D, RS );
input CK, D, RS;
output Q;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_FDPCBQ_V2_0P5_func SAEDRVT14_FDPCBQ_V2_0P5_behav_inst(.Q(Q),.CK(CK),.D(D),.RS(RS));
`else
   SAEDRVT14_FDPCBQ_V2_0P5_func SAEDRVT14_FDPCBQ_V2_0P5_inst(.Q(Q),.CK(CK),.D(D),.RS(RS));
   // spec_gates_begin
   not MGM_G0(MGM_W0,D);
   not MGM_G1(MGM_W1,RS);
   and MGM_G2(ENABLE_NOT_D_AND_NOT_RS,MGM_W1,MGM_W0);
   not MGM_G3(MGM_W2,D);
   and MGM_G4(ENABLE_NOT_D_AND_RS,RS,MGM_W2);
   not MGM_G5(MGM_W3,RS);
   and MGM_G6(ENABLE_D_AND_NOT_RS,MGM_W3,D);
   and MGM_G7(ENABLE_D_AND_RS,RS,D);
   buf MGM_G8(ENABLE_RS,RS);
   buf MGM_G9(ENABLE_D,D);
   // spec_gates_end
   // specify_block_begin
   specify

      if(D===1'b0 && RS===1'b0)
      // seq arc CK --> Q
      (posedge CK => (Q : D))  = (1.0,1.0);
      
      if(D===1'b1 && RS===1'b0)
      // seq arc CK --> Q
      (posedge CK => (Q : D))  = (1.0,1.0);
      
      if(RS===1'b1)
      // seq arc CK --> Q
      (posedge CK => (Q : D))  = (1.0,1.0);
      
      ifnone
      // seq arc CK --> Q
      (posedge CK => (Q : D))  = (1.0,1.0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_NOT_RS === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_NOT_RS === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_RS === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_RS === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_NOT_RS === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_NOT_RS === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_RS === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_RS === 1'b1)
      ,1.0,0);
      
      // hold D-HL CK-LH
      $hold(posedge CK &&& (ENABLE_RS === 1'b1),
      negedge D &&& (ENABLE_RS === 1'b1),1.0);
      
      // hold D-LH CK-LH
      $hold(posedge CK &&& (ENABLE_RS === 1'b1),
      posedge D &&& (ENABLE_RS === 1'b1),1.0);
      
      // setup D-HL CK-LH
      $setup(negedge D &&& (ENABLE_RS === 1'b1),
      posedge CK &&& (ENABLE_RS === 1'b1),1.0);
      
      // setup D-LH CK-LH
      $setup(posedge D &&& (ENABLE_RS === 1'b1),
      posedge CK &&& (ENABLE_RS === 1'b1),1.0);
      
      // hold RS-HL CK-LH
      $hold(posedge CK &&& (ENABLE_D === 1'b1),
      negedge RS &&& (ENABLE_D === 1'b1),1.0);
      
      // hold RS-LH CK-LH
      $hold(posedge CK &&& (ENABLE_D === 1'b1),
      posedge RS &&& (ENABLE_D === 1'b1),1.0);
      
      // setup RS-HL CK-LH
      $setup(negedge RS &&& (ENABLE_D === 1'b1),
      posedge CK &&& (ENABLE_D === 1'b1),1.0);
      
      // setup RS-LH CK-LH
      $setup(posedge RS &&& (ENABLE_D === 1'b1),
      posedge CK &&& (ENABLE_D === 1'b1),1.0);
      
      // mpw CK_lh 
      $width(posedge CK,1.0,0);
      
      // mpw CK_hl 
      $width(negedge CK,1.0,0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_FDPCBQ_V2_1( Q, CK, D, RS );
input CK, D, RS;
output Q;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_FDPCBQ_V2_1_func SAEDRVT14_FDPCBQ_V2_1_behav_inst(.Q(Q),.CK(CK),.D(D),.RS(RS));
`else
   SAEDRVT14_FDPCBQ_V2_1_func SAEDRVT14_FDPCBQ_V2_1_inst(.Q(Q),.CK(CK),.D(D),.RS(RS));
   // spec_gates_begin
   not MGM_G0(MGM_W0,D);
   not MGM_G1(MGM_W1,RS);
   and MGM_G2(ENABLE_NOT_D_AND_NOT_RS,MGM_W1,MGM_W0);
   not MGM_G3(MGM_W2,D);
   and MGM_G4(ENABLE_NOT_D_AND_RS,RS,MGM_W2);
   not MGM_G5(MGM_W3,RS);
   and MGM_G6(ENABLE_D_AND_NOT_RS,MGM_W3,D);
   and MGM_G7(ENABLE_D_AND_RS,RS,D);
   buf MGM_G8(ENABLE_RS,RS);
   buf MGM_G9(ENABLE_D,D);
   // spec_gates_end
   // specify_block_begin
   specify

      if(D===1'b0 && RS===1'b0)
      // seq arc CK --> Q
      (posedge CK => (Q : D))  = (1.0,1.0);
      
      if(D===1'b1 && RS===1'b0)
      // seq arc CK --> Q
      (posedge CK => (Q : D))  = (1.0,1.0);
      
      if(RS===1'b1)
      // seq arc CK --> Q
      (posedge CK => (Q : D))  = (1.0,1.0);
      
      ifnone
      // seq arc CK --> Q
      (posedge CK => (Q : D))  = (1.0,1.0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_NOT_RS === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_NOT_RS === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_RS === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_RS === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_NOT_RS === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_NOT_RS === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_RS === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_RS === 1'b1)
      ,1.0,0);
      
      // hold D-HL CK-LH
      $hold(posedge CK &&& (ENABLE_RS === 1'b1),
      negedge D &&& (ENABLE_RS === 1'b1),1.0);
      
      // hold D-LH CK-LH
      $hold(posedge CK &&& (ENABLE_RS === 1'b1),
      posedge D &&& (ENABLE_RS === 1'b1),1.0);
      
      // setup D-HL CK-LH
      $setup(negedge D &&& (ENABLE_RS === 1'b1),
      posedge CK &&& (ENABLE_RS === 1'b1),1.0);
      
      // setup D-LH CK-LH
      $setup(posedge D &&& (ENABLE_RS === 1'b1),
      posedge CK &&& (ENABLE_RS === 1'b1),1.0);
      
      // hold RS-HL CK-LH
      $hold(posedge CK &&& (ENABLE_D === 1'b1),
      negedge RS &&& (ENABLE_D === 1'b1),1.0);
      
      // hold RS-LH CK-LH
      $hold(posedge CK &&& (ENABLE_D === 1'b1),
      posedge RS &&& (ENABLE_D === 1'b1),1.0);
      
      // setup RS-HL CK-LH
      $setup(negedge RS &&& (ENABLE_D === 1'b1),
      posedge CK &&& (ENABLE_D === 1'b1),1.0);
      
      // setup RS-LH CK-LH
      $setup(posedge RS &&& (ENABLE_D === 1'b1),
      posedge CK &&& (ENABLE_D === 1'b1),1.0);
      
      // mpw CK_lh 
      $width(posedge CK,1.0,0);
      
      // mpw CK_hl 
      $width(negedge CK,1.0,0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_FDPCBQ_V2_2( Q, CK, D, RS );
input CK, D, RS;
output Q;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_FDPCBQ_V2_2_func SAEDRVT14_FDPCBQ_V2_2_behav_inst(.Q(Q),.CK(CK),.D(D),.RS(RS));
`else
   SAEDRVT14_FDPCBQ_V2_2_func SAEDRVT14_FDPCBQ_V2_2_inst(.Q(Q),.CK(CK),.D(D),.RS(RS));
   // spec_gates_begin
   not MGM_G0(MGM_W0,D);
   not MGM_G1(MGM_W1,RS);
   and MGM_G2(ENABLE_NOT_D_AND_NOT_RS,MGM_W1,MGM_W0);
   not MGM_G3(MGM_W2,D);
   and MGM_G4(ENABLE_NOT_D_AND_RS,RS,MGM_W2);
   not MGM_G5(MGM_W3,RS);
   and MGM_G6(ENABLE_D_AND_NOT_RS,MGM_W3,D);
   and MGM_G7(ENABLE_D_AND_RS,RS,D);
   buf MGM_G8(ENABLE_RS,RS);
   buf MGM_G9(ENABLE_D,D);
   // spec_gates_end
   // specify_block_begin
   specify

      if(D===1'b0 && RS===1'b0)
      // seq arc CK --> Q
      (posedge CK => (Q : D))  = (1.0,1.0);
      
      if(D===1'b1 && RS===1'b0)
      // seq arc CK --> Q
      (posedge CK => (Q : D))  = (1.0,1.0);
      
      if(RS===1'b1)
      // seq arc CK --> Q
      (posedge CK => (Q : D))  = (1.0,1.0);
      
      ifnone
      // seq arc CK --> Q
      (posedge CK => (Q : D))  = (1.0,1.0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_NOT_RS === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_NOT_RS === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_RS === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_RS === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_NOT_RS === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_NOT_RS === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_RS === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_RS === 1'b1)
      ,1.0,0);
      
      // hold D-HL CK-LH
      $hold(posedge CK &&& (ENABLE_RS === 1'b1),
      negedge D &&& (ENABLE_RS === 1'b1),1.0);
      
      // hold D-LH CK-LH
      $hold(posedge CK &&& (ENABLE_RS === 1'b1),
      posedge D &&& (ENABLE_RS === 1'b1),1.0);
      
      // setup D-HL CK-LH
      $setup(negedge D &&& (ENABLE_RS === 1'b1),
      posedge CK &&& (ENABLE_RS === 1'b1),1.0);
      
      // setup D-LH CK-LH
      $setup(posedge D &&& (ENABLE_RS === 1'b1),
      posedge CK &&& (ENABLE_RS === 1'b1),1.0);
      
      // hold RS-HL CK-LH
      $hold(posedge CK &&& (ENABLE_D === 1'b1),
      negedge RS &&& (ENABLE_D === 1'b1),1.0);
      
      // hold RS-LH CK-LH
      $hold(posedge CK &&& (ENABLE_D === 1'b1),
      posedge RS &&& (ENABLE_D === 1'b1),1.0);
      
      // setup RS-HL CK-LH
      $setup(negedge RS &&& (ENABLE_D === 1'b1),
      posedge CK &&& (ENABLE_D === 1'b1),1.0);
      
      // setup RS-LH CK-LH
      $setup(posedge RS &&& (ENABLE_D === 1'b1),
      posedge CK &&& (ENABLE_D === 1'b1),1.0);
      
      // mpw CK_lh 
      $width(posedge CK,1.0,0);
      
      // mpw CK_hl 
      $width(negedge CK,1.0,0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_FDPCBQ_V2_4( Q, CK, D, RS );
input CK, D, RS;
output Q;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_FDPCBQ_V2_4_func SAEDRVT14_FDPCBQ_V2_4_behav_inst(.Q(Q),.CK(CK),.D(D),.RS(RS));
`else
   SAEDRVT14_FDPCBQ_V2_4_func SAEDRVT14_FDPCBQ_V2_4_inst(.Q(Q),.CK(CK),.D(D),.RS(RS));
   // spec_gates_begin
   not MGM_G0(MGM_W0,D);
   not MGM_G1(MGM_W1,RS);
   and MGM_G2(ENABLE_NOT_D_AND_NOT_RS,MGM_W1,MGM_W0);
   not MGM_G3(MGM_W2,D);
   and MGM_G4(ENABLE_NOT_D_AND_RS,RS,MGM_W2);
   not MGM_G5(MGM_W3,RS);
   and MGM_G6(ENABLE_D_AND_NOT_RS,MGM_W3,D);
   and MGM_G7(ENABLE_D_AND_RS,RS,D);
   buf MGM_G8(ENABLE_RS,RS);
   buf MGM_G9(ENABLE_D,D);
   // spec_gates_end
   // specify_block_begin
   specify

      if(D===1'b0 && RS===1'b0)
      // seq arc CK --> Q
      (posedge CK => (Q : D))  = (1.0,1.0);
      
      if(D===1'b1 && RS===1'b0)
      // seq arc CK --> Q
      (posedge CK => (Q : D))  = (1.0,1.0);
      
      if(RS===1'b1)
      // seq arc CK --> Q
      (posedge CK => (Q : D))  = (1.0,1.0);
      
      ifnone
      // seq arc CK --> Q
      (posedge CK => (Q : D))  = (1.0,1.0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_NOT_RS === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_NOT_RS === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_RS === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_RS === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_NOT_RS === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_NOT_RS === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_RS === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_RS === 1'b1)
      ,1.0,0);
      
      // hold D-HL CK-LH
      $hold(posedge CK &&& (ENABLE_RS === 1'b1),
      negedge D &&& (ENABLE_RS === 1'b1),1.0);
      
      // hold D-LH CK-LH
      $hold(posedge CK &&& (ENABLE_RS === 1'b1),
      posedge D &&& (ENABLE_RS === 1'b1),1.0);
      
      // setup D-HL CK-LH
      $setup(negedge D &&& (ENABLE_RS === 1'b1),
      posedge CK &&& (ENABLE_RS === 1'b1),1.0);
      
      // setup D-LH CK-LH
      $setup(posedge D &&& (ENABLE_RS === 1'b1),
      posedge CK &&& (ENABLE_RS === 1'b1),1.0);
      
      // hold RS-HL CK-LH
      $hold(posedge CK &&& (ENABLE_D === 1'b1),
      negedge RS &&& (ENABLE_D === 1'b1),1.0);
      
      // hold RS-LH CK-LH
      $hold(posedge CK &&& (ENABLE_D === 1'b1),
      posedge RS &&& (ENABLE_D === 1'b1),1.0);
      
      // setup RS-HL CK-LH
      $setup(negedge RS &&& (ENABLE_D === 1'b1),
      posedge CK &&& (ENABLE_D === 1'b1),1.0);
      
      // setup RS-LH CK-LH
      $setup(posedge RS &&& (ENABLE_D === 1'b1),
      posedge CK &&& (ENABLE_D === 1'b1),1.0);
      
      // mpw CK_lh 
      $width(posedge CK,1.0,0);
      
      // mpw CK_hl 
      $width(negedge CK,1.0,0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_FDPCBQ_V3_1( Q, CK, D, RS );
input CK, D, RS;
output Q;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_FDPCBQ_V3_1_func SAEDRVT14_FDPCBQ_V3_1_behav_inst(.Q(Q),.CK(CK),.D(D),.RS(RS));
`else
   SAEDRVT14_FDPCBQ_V3_1_func SAEDRVT14_FDPCBQ_V3_1_inst(.Q(Q),.CK(CK),.D(D),.RS(RS));
   // spec_gates_begin
   not MGM_G0(MGM_W0,D);
   not MGM_G1(MGM_W1,RS);
   and MGM_G2(ENABLE_NOT_D_AND_NOT_RS,MGM_W1,MGM_W0);
   not MGM_G3(MGM_W2,D);
   and MGM_G4(ENABLE_NOT_D_AND_RS,RS,MGM_W2);
   not MGM_G5(MGM_W3,RS);
   and MGM_G6(ENABLE_D_AND_NOT_RS,MGM_W3,D);
   and MGM_G7(ENABLE_D_AND_RS,RS,D);
   buf MGM_G8(ENABLE_RS,RS);
   buf MGM_G9(ENABLE_D,D);
   // spec_gates_end
   // specify_block_begin
   specify

      if(D===1'b0 && RS===1'b0)
      // seq arc CK --> Q
      (posedge CK => (Q : D))  = (1.0,1.0);
      
      if(D===1'b1 && RS===1'b0)
      // seq arc CK --> Q
      (posedge CK => (Q : D))  = (1.0,1.0);
      
      if(RS===1'b1)
      // seq arc CK --> Q
      (posedge CK => (Q : D))  = (1.0,1.0);
      
      ifnone
      // seq arc CK --> Q
      (posedge CK => (Q : D))  = (1.0,1.0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_NOT_RS === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_NOT_RS === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_RS === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_RS === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_NOT_RS === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_NOT_RS === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_RS === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_RS === 1'b1)
      ,1.0,0);
      
      // hold D-HL CK-LH
      $hold(posedge CK &&& (ENABLE_RS === 1'b1),
      negedge D &&& (ENABLE_RS === 1'b1),1.0);
      
      // hold D-LH CK-LH
      $hold(posedge CK &&& (ENABLE_RS === 1'b1),
      posedge D &&& (ENABLE_RS === 1'b1),1.0);
      
      // setup D-HL CK-LH
      $setup(negedge D &&& (ENABLE_RS === 1'b1),
      posedge CK &&& (ENABLE_RS === 1'b1),1.0);
      
      // setup D-LH CK-LH
      $setup(posedge D &&& (ENABLE_RS === 1'b1),
      posedge CK &&& (ENABLE_RS === 1'b1),1.0);
      
      // hold RS-HL CK-LH
      $hold(posedge CK &&& (ENABLE_D === 1'b1),
      negedge RS &&& (ENABLE_D === 1'b1),1.0);
      
      // hold RS-LH CK-LH
      $hold(posedge CK &&& (ENABLE_D === 1'b1),
      posedge RS &&& (ENABLE_D === 1'b1),1.0);
      
      // setup RS-HL CK-LH
      $setup(negedge RS &&& (ENABLE_D === 1'b1),
      posedge CK &&& (ENABLE_D === 1'b1),1.0);
      
      // setup RS-LH CK-LH
      $setup(posedge RS &&& (ENABLE_D === 1'b1),
      posedge CK &&& (ENABLE_D === 1'b1),1.0);
      
      // mpw CK_lh 
      $width(posedge CK,1.0,0);
      
      // mpw CK_hl 
      $width(negedge CK,1.0,0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_FDPCBQ_V3_2( Q, CK, D, RS );
input CK, D, RS;
output Q;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_FDPCBQ_V3_2_func SAEDRVT14_FDPCBQ_V3_2_behav_inst(.Q(Q),.CK(CK),.D(D),.RS(RS));
`else
   SAEDRVT14_FDPCBQ_V3_2_func SAEDRVT14_FDPCBQ_V3_2_inst(.Q(Q),.CK(CK),.D(D),.RS(RS));
   // spec_gates_begin
   not MGM_G0(MGM_W0,D);
   not MGM_G1(MGM_W1,RS);
   and MGM_G2(ENABLE_NOT_D_AND_NOT_RS,MGM_W1,MGM_W0);
   not MGM_G3(MGM_W2,D);
   and MGM_G4(ENABLE_NOT_D_AND_RS,RS,MGM_W2);
   not MGM_G5(MGM_W3,RS);
   and MGM_G6(ENABLE_D_AND_NOT_RS,MGM_W3,D);
   and MGM_G7(ENABLE_D_AND_RS,RS,D);
   buf MGM_G8(ENABLE_RS,RS);
   buf MGM_G9(ENABLE_D,D);
   // spec_gates_end
   // specify_block_begin
   specify

      if(D===1'b0 && RS===1'b0)
      // seq arc CK --> Q
      (posedge CK => (Q : D))  = (1.0,1.0);
      
      if(D===1'b1 && RS===1'b0)
      // seq arc CK --> Q
      (posedge CK => (Q : D))  = (1.0,1.0);
      
      if(RS===1'b1)
      // seq arc CK --> Q
      (posedge CK => (Q : D))  = (1.0,1.0);
      
      ifnone
      // seq arc CK --> Q
      (posedge CK => (Q : D))  = (1.0,1.0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_NOT_RS === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_NOT_RS === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_RS === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_RS === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_NOT_RS === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_NOT_RS === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_RS === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_RS === 1'b1)
      ,1.0,0);
      
      // hold D-HL CK-LH
      $hold(posedge CK &&& (ENABLE_RS === 1'b1),
      negedge D &&& (ENABLE_RS === 1'b1),1.0);
      
      // hold D-LH CK-LH
      $hold(posedge CK &&& (ENABLE_RS === 1'b1),
      posedge D &&& (ENABLE_RS === 1'b1),1.0);
      
      // setup D-HL CK-LH
      $setup(negedge D &&& (ENABLE_RS === 1'b1),
      posedge CK &&& (ENABLE_RS === 1'b1),1.0);
      
      // setup D-LH CK-LH
      $setup(posedge D &&& (ENABLE_RS === 1'b1),
      posedge CK &&& (ENABLE_RS === 1'b1),1.0);
      
      // hold RS-HL CK-LH
      $hold(posedge CK &&& (ENABLE_D === 1'b1),
      negedge RS &&& (ENABLE_D === 1'b1),1.0);
      
      // hold RS-LH CK-LH
      $hold(posedge CK &&& (ENABLE_D === 1'b1),
      posedge RS &&& (ENABLE_D === 1'b1),1.0);
      
      // setup RS-HL CK-LH
      $setup(negedge RS &&& (ENABLE_D === 1'b1),
      posedge CK &&& (ENABLE_D === 1'b1),1.0);
      
      // setup RS-LH CK-LH
      $setup(posedge RS &&& (ENABLE_D === 1'b1),
      posedge CK &&& (ENABLE_D === 1'b1),1.0);
      
      // mpw CK_lh 
      $width(posedge CK,1.0,0);
      
      // mpw CK_hl 
      $width(negedge CK,1.0,0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_FDPMQ_0P5( Q, CK, D0, D1, S );
input CK, D0, D1, S;
output Q;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_FDPMQ_0P5_func SAEDRVT14_FDPMQ_0P5_behav_inst(.Q(Q),.CK(CK),.D0(D0),.D1(D1),.S(S));
`else
   SAEDRVT14_FDPMQ_0P5_func SAEDRVT14_FDPMQ_0P5_inst(.Q(Q),.CK(CK),.D0(D0),.D1(D1),.S(S));
   // spec_gates_begin
   not MGM_G0(MGM_W0,D0);
   not MGM_G1(MGM_W1,D1);
   and MGM_G2(MGM_W2,MGM_W1,MGM_W0);
   not MGM_G3(MGM_W3,S);
   and MGM_G4(ENABLE_NOT_D0_AND_NOT_D1_AND_NOT_S,MGM_W3,MGM_W2);
   not MGM_G5(MGM_W4,D0);
   not MGM_G6(MGM_W5,D1);
   and MGM_G7(MGM_W6,MGM_W5,MGM_W4);
   and MGM_G8(ENABLE_NOT_D0_AND_NOT_D1_AND_S,S,MGM_W6);
   not MGM_G9(MGM_W7,D0);
   and MGM_G10(MGM_W8,D1,MGM_W7);
   not MGM_G11(MGM_W9,S);
   and MGM_G12(ENABLE_NOT_D0_AND_D1_AND_NOT_S,MGM_W9,MGM_W8);
   not MGM_G13(MGM_W10,D0);
   and MGM_G14(MGM_W11,D1,MGM_W10);
   and MGM_G15(ENABLE_NOT_D0_AND_D1_AND_S,S,MGM_W11);
   not MGM_G16(MGM_W12,D1);
   and MGM_G17(MGM_W13,MGM_W12,D0);
   not MGM_G18(MGM_W14,S);
   and MGM_G19(ENABLE_D0_AND_NOT_D1_AND_NOT_S,MGM_W14,MGM_W13);
   not MGM_G20(MGM_W15,D1);
   and MGM_G21(MGM_W16,MGM_W15,D0);
   and MGM_G22(ENABLE_D0_AND_NOT_D1_AND_S,S,MGM_W16);
   and MGM_G23(MGM_W17,D1,D0);
   not MGM_G24(MGM_W18,S);
   and MGM_G25(ENABLE_D0_AND_D1_AND_NOT_S,MGM_W18,MGM_W17);
   and MGM_G26(MGM_W19,D1,D0);
   and MGM_G27(ENABLE_D0_AND_D1_AND_S,S,MGM_W19);
   not MGM_G28(MGM_W20,D1);
   not MGM_G29(MGM_W21,S);
   and MGM_G30(ENABLE_NOT_D1_AND_NOT_S,MGM_W21,MGM_W20);
   not MGM_G31(MGM_W22,S);
   and MGM_G32(ENABLE_D1_AND_NOT_S,MGM_W22,D1);
   not MGM_G33(MGM_W23,D0);
   and MGM_G34(ENABLE_NOT_D0_AND_S,S,MGM_W23);
   and MGM_G35(ENABLE_D0_AND_S,S,D0);
   not MGM_G36(MGM_W24,D0);
   and MGM_G37(ENABLE_NOT_D0_AND_D1,D1,MGM_W24);
   not MGM_G38(MGM_W25,D1);
   and MGM_G39(ENABLE_D0_AND_NOT_D1,MGM_W25,D0);
   // spec_gates_end
   // specify_block_begin
   specify

      if(D0===1'b0 && S===1'b1)
      // seq arc CK --> Q
      (posedge CK => (Q : D1))  = (1.0,1.0);
      
      if(D1===1'b0 && S===1'b0)
      // seq arc CK --> Q
      (posedge CK => (Q : D0))  = (1.0,1.0);
      
      if(D0===1'b1 && S===1'b1)
      // seq arc CK --> Q
      (posedge CK => (Q : D1))  = (1.0,1.0);
      
      if(D1===1'b1 && S===1'b0)
      // seq arc CK --> Q
      (posedge CK => (Q : D0))  = (1.0,1.0);
      
      ifnone
      // seq arc CK --> Q
      (posedge CK => (Q : D0))  = (1.0,1.0);
      
      $width(negedge CK &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_NOT_S === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_NOT_S === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_S === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_S === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D0_AND_D1_AND_NOT_S === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D0_AND_D1_AND_NOT_S === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D0_AND_D1_AND_S === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D0_AND_D1_AND_S === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D0_AND_NOT_D1_AND_NOT_S === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D0_AND_NOT_D1_AND_NOT_S === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D0_AND_NOT_D1_AND_S === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D0_AND_NOT_D1_AND_S === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D0_AND_D1_AND_NOT_S === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D0_AND_D1_AND_NOT_S === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D0_AND_D1_AND_S === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D0_AND_D1_AND_S === 1'b1)
      ,1.0,0);
      
      // hold D0-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D1_AND_NOT_S === 1'b1),
      negedge D0 &&& (ENABLE_NOT_D1_AND_NOT_S === 1'b1),1.0);
      
      // hold D0-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D1_AND_NOT_S === 1'b1),
      posedge D0 &&& (ENABLE_NOT_D1_AND_NOT_S === 1'b1),1.0);
      
      // setup D0-HL CK-LH
      $setup(negedge D0 &&& (ENABLE_NOT_D1_AND_NOT_S === 1'b1),
      posedge CK &&& (ENABLE_NOT_D1_AND_NOT_S === 1'b1),1.0);
      
      // setup D0-LH CK-LH
      $setup(posedge D0 &&& (ENABLE_NOT_D1_AND_NOT_S === 1'b1),
      posedge CK &&& (ENABLE_NOT_D1_AND_NOT_S === 1'b1),1.0);
      
      // hold D0-HL CK-LH
      $hold(posedge CK &&& (ENABLE_D1_AND_NOT_S === 1'b1),
      negedge D0 &&& (ENABLE_D1_AND_NOT_S === 1'b1),1.0);
      
      // hold D0-LH CK-LH
      $hold(posedge CK &&& (ENABLE_D1_AND_NOT_S === 1'b1),
      posedge D0 &&& (ENABLE_D1_AND_NOT_S === 1'b1),1.0);
      
      // setup D0-HL CK-LH
      $setup(negedge D0 &&& (ENABLE_D1_AND_NOT_S === 1'b1),
      posedge CK &&& (ENABLE_D1_AND_NOT_S === 1'b1),1.0);
      
      // setup D0-LH CK-LH
      $setup(posedge D0 &&& (ENABLE_D1_AND_NOT_S === 1'b1),
      posedge CK &&& (ENABLE_D1_AND_NOT_S === 1'b1),1.0);
      
      // hold D1-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D0_AND_S === 1'b1),
      negedge D1 &&& (ENABLE_NOT_D0_AND_S === 1'b1),1.0);
      
      // hold D1-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D0_AND_S === 1'b1),
      posedge D1 &&& (ENABLE_NOT_D0_AND_S === 1'b1),1.0);
      
      // setup D1-HL CK-LH
      $setup(negedge D1 &&& (ENABLE_NOT_D0_AND_S === 1'b1),
      posedge CK &&& (ENABLE_NOT_D0_AND_S === 1'b1),1.0);
      
      // setup D1-LH CK-LH
      $setup(posedge D1 &&& (ENABLE_NOT_D0_AND_S === 1'b1),
      posedge CK &&& (ENABLE_NOT_D0_AND_S === 1'b1),1.0);
      
      // hold D1-HL CK-LH
      $hold(posedge CK &&& (ENABLE_D0_AND_S === 1'b1),
      negedge D1 &&& (ENABLE_D0_AND_S === 1'b1),1.0);
      
      // hold D1-LH CK-LH
      $hold(posedge CK &&& (ENABLE_D0_AND_S === 1'b1),
      posedge D1 &&& (ENABLE_D0_AND_S === 1'b1),1.0);
      
      // setup D1-HL CK-LH
      $setup(negedge D1 &&& (ENABLE_D0_AND_S === 1'b1),
      posedge CK &&& (ENABLE_D0_AND_S === 1'b1),1.0);
      
      // setup D1-LH CK-LH
      $setup(posedge D1 &&& (ENABLE_D0_AND_S === 1'b1),
      posedge CK &&& (ENABLE_D0_AND_S === 1'b1),1.0);
      
      // hold S-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D0_AND_D1 === 1'b1),
      negedge S &&& (ENABLE_NOT_D0_AND_D1 === 1'b1),1.0);
      
      // hold S-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D0_AND_D1 === 1'b1),
      posedge S &&& (ENABLE_NOT_D0_AND_D1 === 1'b1),1.0);
      
      // setup S-HL CK-LH
      $setup(negedge S &&& (ENABLE_NOT_D0_AND_D1 === 1'b1),
      posedge CK &&& (ENABLE_NOT_D0_AND_D1 === 1'b1),1.0);
      
      // setup S-LH CK-LH
      $setup(posedge S &&& (ENABLE_NOT_D0_AND_D1 === 1'b1),
      posedge CK &&& (ENABLE_NOT_D0_AND_D1 === 1'b1),1.0);
      
      // hold S-HL CK-LH
      $hold(posedge CK &&& (ENABLE_D0_AND_NOT_D1 === 1'b1),
      negedge S &&& (ENABLE_D0_AND_NOT_D1 === 1'b1),1.0);
      
      // hold S-LH CK-LH
      $hold(posedge CK &&& (ENABLE_D0_AND_NOT_D1 === 1'b1),
      posedge S &&& (ENABLE_D0_AND_NOT_D1 === 1'b1),1.0);
      
      // setup S-HL CK-LH
      $setup(negedge S &&& (ENABLE_D0_AND_NOT_D1 === 1'b1),
      posedge CK &&& (ENABLE_D0_AND_NOT_D1 === 1'b1),1.0);
      
      // setup S-LH CK-LH
      $setup(posedge S &&& (ENABLE_D0_AND_NOT_D1 === 1'b1),
      posedge CK &&& (ENABLE_D0_AND_NOT_D1 === 1'b1),1.0);
      
      // mpw CK_lh 
      $width(posedge CK,1.0,0);
      
      // mpw CK_hl 
      $width(negedge CK,1.0,0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_FDPMQ_1( Q, CK, D0, D1, S );
input CK, D0, D1, S;
output Q;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_FDPMQ_1_func SAEDRVT14_FDPMQ_1_behav_inst(.Q(Q),.CK(CK),.D0(D0),.D1(D1),.S(S));
`else
   SAEDRVT14_FDPMQ_1_func SAEDRVT14_FDPMQ_1_inst(.Q(Q),.CK(CK),.D0(D0),.D1(D1),.S(S));
   // spec_gates_begin
   not MGM_G0(MGM_W0,D0);
   not MGM_G1(MGM_W1,D1);
   and MGM_G2(MGM_W2,MGM_W1,MGM_W0);
   not MGM_G3(MGM_W3,S);
   and MGM_G4(ENABLE_NOT_D0_AND_NOT_D1_AND_NOT_S,MGM_W3,MGM_W2);
   not MGM_G5(MGM_W4,D0);
   not MGM_G6(MGM_W5,D1);
   and MGM_G7(MGM_W6,MGM_W5,MGM_W4);
   and MGM_G8(ENABLE_NOT_D0_AND_NOT_D1_AND_S,S,MGM_W6);
   not MGM_G9(MGM_W7,D0);
   and MGM_G10(MGM_W8,D1,MGM_W7);
   not MGM_G11(MGM_W9,S);
   and MGM_G12(ENABLE_NOT_D0_AND_D1_AND_NOT_S,MGM_W9,MGM_W8);
   not MGM_G13(MGM_W10,D0);
   and MGM_G14(MGM_W11,D1,MGM_W10);
   and MGM_G15(ENABLE_NOT_D0_AND_D1_AND_S,S,MGM_W11);
   not MGM_G16(MGM_W12,D1);
   and MGM_G17(MGM_W13,MGM_W12,D0);
   not MGM_G18(MGM_W14,S);
   and MGM_G19(ENABLE_D0_AND_NOT_D1_AND_NOT_S,MGM_W14,MGM_W13);
   not MGM_G20(MGM_W15,D1);
   and MGM_G21(MGM_W16,MGM_W15,D0);
   and MGM_G22(ENABLE_D0_AND_NOT_D1_AND_S,S,MGM_W16);
   and MGM_G23(MGM_W17,D1,D0);
   not MGM_G24(MGM_W18,S);
   and MGM_G25(ENABLE_D0_AND_D1_AND_NOT_S,MGM_W18,MGM_W17);
   and MGM_G26(MGM_W19,D1,D0);
   and MGM_G27(ENABLE_D0_AND_D1_AND_S,S,MGM_W19);
   not MGM_G28(MGM_W20,D1);
   not MGM_G29(MGM_W21,S);
   and MGM_G30(ENABLE_NOT_D1_AND_NOT_S,MGM_W21,MGM_W20);
   not MGM_G31(MGM_W22,S);
   and MGM_G32(ENABLE_D1_AND_NOT_S,MGM_W22,D1);
   not MGM_G33(MGM_W23,D0);
   and MGM_G34(ENABLE_NOT_D0_AND_S,S,MGM_W23);
   and MGM_G35(ENABLE_D0_AND_S,S,D0);
   not MGM_G36(MGM_W24,D0);
   and MGM_G37(ENABLE_NOT_D0_AND_D1,D1,MGM_W24);
   not MGM_G38(MGM_W25,D1);
   and MGM_G39(ENABLE_D0_AND_NOT_D1,MGM_W25,D0);
   // spec_gates_end
   // specify_block_begin
   specify

      if(D0===1'b0 && S===1'b1)
      // seq arc CK --> Q
      (posedge CK => (Q : D1))  = (1.0,1.0);
      
      if(D1===1'b0 && S===1'b0)
      // seq arc CK --> Q
      (posedge CK => (Q : D0))  = (1.0,1.0);
      
      if(D0===1'b1 && S===1'b1)
      // seq arc CK --> Q
      (posedge CK => (Q : D1))  = (1.0,1.0);
      
      if(D1===1'b1 && S===1'b0)
      // seq arc CK --> Q
      (posedge CK => (Q : D0))  = (1.0,1.0);
      
      ifnone
      // seq arc CK --> Q
      (posedge CK => (Q : D0))  = (1.0,1.0);
      
      $width(negedge CK &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_NOT_S === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_NOT_S === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_S === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_S === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D0_AND_D1_AND_NOT_S === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D0_AND_D1_AND_NOT_S === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D0_AND_D1_AND_S === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D0_AND_D1_AND_S === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D0_AND_NOT_D1_AND_NOT_S === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D0_AND_NOT_D1_AND_NOT_S === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D0_AND_NOT_D1_AND_S === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D0_AND_NOT_D1_AND_S === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D0_AND_D1_AND_NOT_S === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D0_AND_D1_AND_NOT_S === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D0_AND_D1_AND_S === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D0_AND_D1_AND_S === 1'b1)
      ,1.0,0);
      
      // hold D0-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D1_AND_NOT_S === 1'b1),
      negedge D0 &&& (ENABLE_NOT_D1_AND_NOT_S === 1'b1),1.0);
      
      // hold D0-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D1_AND_NOT_S === 1'b1),
      posedge D0 &&& (ENABLE_NOT_D1_AND_NOT_S === 1'b1),1.0);
      
      // setup D0-HL CK-LH
      $setup(negedge D0 &&& (ENABLE_NOT_D1_AND_NOT_S === 1'b1),
      posedge CK &&& (ENABLE_NOT_D1_AND_NOT_S === 1'b1),1.0);
      
      // setup D0-LH CK-LH
      $setup(posedge D0 &&& (ENABLE_NOT_D1_AND_NOT_S === 1'b1),
      posedge CK &&& (ENABLE_NOT_D1_AND_NOT_S === 1'b1),1.0);
      
      // hold D0-HL CK-LH
      $hold(posedge CK &&& (ENABLE_D1_AND_NOT_S === 1'b1),
      negedge D0 &&& (ENABLE_D1_AND_NOT_S === 1'b1),1.0);
      
      // hold D0-LH CK-LH
      $hold(posedge CK &&& (ENABLE_D1_AND_NOT_S === 1'b1),
      posedge D0 &&& (ENABLE_D1_AND_NOT_S === 1'b1),1.0);
      
      // setup D0-HL CK-LH
      $setup(negedge D0 &&& (ENABLE_D1_AND_NOT_S === 1'b1),
      posedge CK &&& (ENABLE_D1_AND_NOT_S === 1'b1),1.0);
      
      // setup D0-LH CK-LH
      $setup(posedge D0 &&& (ENABLE_D1_AND_NOT_S === 1'b1),
      posedge CK &&& (ENABLE_D1_AND_NOT_S === 1'b1),1.0);
      
      // hold D1-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D0_AND_S === 1'b1),
      negedge D1 &&& (ENABLE_NOT_D0_AND_S === 1'b1),1.0);
      
      // hold D1-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D0_AND_S === 1'b1),
      posedge D1 &&& (ENABLE_NOT_D0_AND_S === 1'b1),1.0);
      
      // setup D1-HL CK-LH
      $setup(negedge D1 &&& (ENABLE_NOT_D0_AND_S === 1'b1),
      posedge CK &&& (ENABLE_NOT_D0_AND_S === 1'b1),1.0);
      
      // setup D1-LH CK-LH
      $setup(posedge D1 &&& (ENABLE_NOT_D0_AND_S === 1'b1),
      posedge CK &&& (ENABLE_NOT_D0_AND_S === 1'b1),1.0);
      
      // hold D1-HL CK-LH
      $hold(posedge CK &&& (ENABLE_D0_AND_S === 1'b1),
      negedge D1 &&& (ENABLE_D0_AND_S === 1'b1),1.0);
      
      // hold D1-LH CK-LH
      $hold(posedge CK &&& (ENABLE_D0_AND_S === 1'b1),
      posedge D1 &&& (ENABLE_D0_AND_S === 1'b1),1.0);
      
      // setup D1-HL CK-LH
      $setup(negedge D1 &&& (ENABLE_D0_AND_S === 1'b1),
      posedge CK &&& (ENABLE_D0_AND_S === 1'b1),1.0);
      
      // setup D1-LH CK-LH
      $setup(posedge D1 &&& (ENABLE_D0_AND_S === 1'b1),
      posedge CK &&& (ENABLE_D0_AND_S === 1'b1),1.0);
      
      // hold S-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D0_AND_D1 === 1'b1),
      negedge S &&& (ENABLE_NOT_D0_AND_D1 === 1'b1),1.0);
      
      // hold S-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D0_AND_D1 === 1'b1),
      posedge S &&& (ENABLE_NOT_D0_AND_D1 === 1'b1),1.0);
      
      // setup S-HL CK-LH
      $setup(negedge S &&& (ENABLE_NOT_D0_AND_D1 === 1'b1),
      posedge CK &&& (ENABLE_NOT_D0_AND_D1 === 1'b1),1.0);
      
      // setup S-LH CK-LH
      $setup(posedge S &&& (ENABLE_NOT_D0_AND_D1 === 1'b1),
      posedge CK &&& (ENABLE_NOT_D0_AND_D1 === 1'b1),1.0);
      
      // hold S-HL CK-LH
      $hold(posedge CK &&& (ENABLE_D0_AND_NOT_D1 === 1'b1),
      negedge S &&& (ENABLE_D0_AND_NOT_D1 === 1'b1),1.0);
      
      // hold S-LH CK-LH
      $hold(posedge CK &&& (ENABLE_D0_AND_NOT_D1 === 1'b1),
      posedge S &&& (ENABLE_D0_AND_NOT_D1 === 1'b1),1.0);
      
      // setup S-HL CK-LH
      $setup(negedge S &&& (ENABLE_D0_AND_NOT_D1 === 1'b1),
      posedge CK &&& (ENABLE_D0_AND_NOT_D1 === 1'b1),1.0);
      
      // setup S-LH CK-LH
      $setup(posedge S &&& (ENABLE_D0_AND_NOT_D1 === 1'b1),
      posedge CK &&& (ENABLE_D0_AND_NOT_D1 === 1'b1),1.0);
      
      // mpw CK_lh 
      $width(posedge CK,1.0,0);
      
      // mpw CK_hl 
      $width(negedge CK,1.0,0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_FDPMQ_2( Q, CK, D0, D1, S );
input CK, D0, D1, S;
output Q;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_FDPMQ_2_func SAEDRVT14_FDPMQ_2_behav_inst(.Q(Q),.CK(CK),.D0(D0),.D1(D1),.S(S));
`else
   SAEDRVT14_FDPMQ_2_func SAEDRVT14_FDPMQ_2_inst(.Q(Q),.CK(CK),.D0(D0),.D1(D1),.S(S));
   // spec_gates_begin
   not MGM_G0(MGM_W0,D0);
   not MGM_G1(MGM_W1,D1);
   and MGM_G2(MGM_W2,MGM_W1,MGM_W0);
   not MGM_G3(MGM_W3,S);
   and MGM_G4(ENABLE_NOT_D0_AND_NOT_D1_AND_NOT_S,MGM_W3,MGM_W2);
   not MGM_G5(MGM_W4,D0);
   not MGM_G6(MGM_W5,D1);
   and MGM_G7(MGM_W6,MGM_W5,MGM_W4);
   and MGM_G8(ENABLE_NOT_D0_AND_NOT_D1_AND_S,S,MGM_W6);
   not MGM_G9(MGM_W7,D0);
   and MGM_G10(MGM_W8,D1,MGM_W7);
   not MGM_G11(MGM_W9,S);
   and MGM_G12(ENABLE_NOT_D0_AND_D1_AND_NOT_S,MGM_W9,MGM_W8);
   not MGM_G13(MGM_W10,D0);
   and MGM_G14(MGM_W11,D1,MGM_W10);
   and MGM_G15(ENABLE_NOT_D0_AND_D1_AND_S,S,MGM_W11);
   not MGM_G16(MGM_W12,D1);
   and MGM_G17(MGM_W13,MGM_W12,D0);
   not MGM_G18(MGM_W14,S);
   and MGM_G19(ENABLE_D0_AND_NOT_D1_AND_NOT_S,MGM_W14,MGM_W13);
   not MGM_G20(MGM_W15,D1);
   and MGM_G21(MGM_W16,MGM_W15,D0);
   and MGM_G22(ENABLE_D0_AND_NOT_D1_AND_S,S,MGM_W16);
   and MGM_G23(MGM_W17,D1,D0);
   not MGM_G24(MGM_W18,S);
   and MGM_G25(ENABLE_D0_AND_D1_AND_NOT_S,MGM_W18,MGM_W17);
   and MGM_G26(MGM_W19,D1,D0);
   and MGM_G27(ENABLE_D0_AND_D1_AND_S,S,MGM_W19);
   not MGM_G28(MGM_W20,D1);
   not MGM_G29(MGM_W21,S);
   and MGM_G30(ENABLE_NOT_D1_AND_NOT_S,MGM_W21,MGM_W20);
   not MGM_G31(MGM_W22,S);
   and MGM_G32(ENABLE_D1_AND_NOT_S,MGM_W22,D1);
   not MGM_G33(MGM_W23,D0);
   and MGM_G34(ENABLE_NOT_D0_AND_S,S,MGM_W23);
   and MGM_G35(ENABLE_D0_AND_S,S,D0);
   not MGM_G36(MGM_W24,D0);
   and MGM_G37(ENABLE_NOT_D0_AND_D1,D1,MGM_W24);
   not MGM_G38(MGM_W25,D1);
   and MGM_G39(ENABLE_D0_AND_NOT_D1,MGM_W25,D0);
   // spec_gates_end
   // specify_block_begin
   specify

      if(D0===1'b0 && S===1'b1)
      // seq arc CK --> Q
      (posedge CK => (Q : D1))  = (1.0,1.0);
      
      if(D1===1'b0 && S===1'b0)
      // seq arc CK --> Q
      (posedge CK => (Q : D0))  = (1.0,1.0);
      
      if(D0===1'b1 && S===1'b1)
      // seq arc CK --> Q
      (posedge CK => (Q : D1))  = (1.0,1.0);
      
      if(D1===1'b1 && S===1'b0)
      // seq arc CK --> Q
      (posedge CK => (Q : D0))  = (1.0,1.0);
      
      ifnone
      // seq arc CK --> Q
      (posedge CK => (Q : D0))  = (1.0,1.0);
      
      $width(negedge CK &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_NOT_S === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_NOT_S === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_S === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_S === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D0_AND_D1_AND_NOT_S === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D0_AND_D1_AND_NOT_S === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D0_AND_D1_AND_S === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D0_AND_D1_AND_S === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D0_AND_NOT_D1_AND_NOT_S === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D0_AND_NOT_D1_AND_NOT_S === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D0_AND_NOT_D1_AND_S === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D0_AND_NOT_D1_AND_S === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D0_AND_D1_AND_NOT_S === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D0_AND_D1_AND_NOT_S === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D0_AND_D1_AND_S === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D0_AND_D1_AND_S === 1'b1)
      ,1.0,0);
      
      // hold D0-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D1_AND_NOT_S === 1'b1),
      negedge D0 &&& (ENABLE_NOT_D1_AND_NOT_S === 1'b1),1.0);
      
      // hold D0-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D1_AND_NOT_S === 1'b1),
      posedge D0 &&& (ENABLE_NOT_D1_AND_NOT_S === 1'b1),1.0);
      
      // setup D0-HL CK-LH
      $setup(negedge D0 &&& (ENABLE_NOT_D1_AND_NOT_S === 1'b1),
      posedge CK &&& (ENABLE_NOT_D1_AND_NOT_S === 1'b1),1.0);
      
      // setup D0-LH CK-LH
      $setup(posedge D0 &&& (ENABLE_NOT_D1_AND_NOT_S === 1'b1),
      posedge CK &&& (ENABLE_NOT_D1_AND_NOT_S === 1'b1),1.0);
      
      // hold D0-HL CK-LH
      $hold(posedge CK &&& (ENABLE_D1_AND_NOT_S === 1'b1),
      negedge D0 &&& (ENABLE_D1_AND_NOT_S === 1'b1),1.0);
      
      // hold D0-LH CK-LH
      $hold(posedge CK &&& (ENABLE_D1_AND_NOT_S === 1'b1),
      posedge D0 &&& (ENABLE_D1_AND_NOT_S === 1'b1),1.0);
      
      // setup D0-HL CK-LH
      $setup(negedge D0 &&& (ENABLE_D1_AND_NOT_S === 1'b1),
      posedge CK &&& (ENABLE_D1_AND_NOT_S === 1'b1),1.0);
      
      // setup D0-LH CK-LH
      $setup(posedge D0 &&& (ENABLE_D1_AND_NOT_S === 1'b1),
      posedge CK &&& (ENABLE_D1_AND_NOT_S === 1'b1),1.0);
      
      // hold D1-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D0_AND_S === 1'b1),
      negedge D1 &&& (ENABLE_NOT_D0_AND_S === 1'b1),1.0);
      
      // hold D1-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D0_AND_S === 1'b1),
      posedge D1 &&& (ENABLE_NOT_D0_AND_S === 1'b1),1.0);
      
      // setup D1-HL CK-LH
      $setup(negedge D1 &&& (ENABLE_NOT_D0_AND_S === 1'b1),
      posedge CK &&& (ENABLE_NOT_D0_AND_S === 1'b1),1.0);
      
      // setup D1-LH CK-LH
      $setup(posedge D1 &&& (ENABLE_NOT_D0_AND_S === 1'b1),
      posedge CK &&& (ENABLE_NOT_D0_AND_S === 1'b1),1.0);
      
      // hold D1-HL CK-LH
      $hold(posedge CK &&& (ENABLE_D0_AND_S === 1'b1),
      negedge D1 &&& (ENABLE_D0_AND_S === 1'b1),1.0);
      
      // hold D1-LH CK-LH
      $hold(posedge CK &&& (ENABLE_D0_AND_S === 1'b1),
      posedge D1 &&& (ENABLE_D0_AND_S === 1'b1),1.0);
      
      // setup D1-HL CK-LH
      $setup(negedge D1 &&& (ENABLE_D0_AND_S === 1'b1),
      posedge CK &&& (ENABLE_D0_AND_S === 1'b1),1.0);
      
      // setup D1-LH CK-LH
      $setup(posedge D1 &&& (ENABLE_D0_AND_S === 1'b1),
      posedge CK &&& (ENABLE_D0_AND_S === 1'b1),1.0);
      
      // hold S-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D0_AND_D1 === 1'b1),
      negedge S &&& (ENABLE_NOT_D0_AND_D1 === 1'b1),1.0);
      
      // hold S-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D0_AND_D1 === 1'b1),
      posedge S &&& (ENABLE_NOT_D0_AND_D1 === 1'b1),1.0);
      
      // setup S-HL CK-LH
      $setup(negedge S &&& (ENABLE_NOT_D0_AND_D1 === 1'b1),
      posedge CK &&& (ENABLE_NOT_D0_AND_D1 === 1'b1),1.0);
      
      // setup S-LH CK-LH
      $setup(posedge S &&& (ENABLE_NOT_D0_AND_D1 === 1'b1),
      posedge CK &&& (ENABLE_NOT_D0_AND_D1 === 1'b1),1.0);
      
      // hold S-HL CK-LH
      $hold(posedge CK &&& (ENABLE_D0_AND_NOT_D1 === 1'b1),
      negedge S &&& (ENABLE_D0_AND_NOT_D1 === 1'b1),1.0);
      
      // hold S-LH CK-LH
      $hold(posedge CK &&& (ENABLE_D0_AND_NOT_D1 === 1'b1),
      posedge S &&& (ENABLE_D0_AND_NOT_D1 === 1'b1),1.0);
      
      // setup S-HL CK-LH
      $setup(negedge S &&& (ENABLE_D0_AND_NOT_D1 === 1'b1),
      posedge CK &&& (ENABLE_D0_AND_NOT_D1 === 1'b1),1.0);
      
      // setup S-LH CK-LH
      $setup(posedge S &&& (ENABLE_D0_AND_NOT_D1 === 1'b1),
      posedge CK &&& (ENABLE_D0_AND_NOT_D1 === 1'b1),1.0);
      
      // mpw CK_lh 
      $width(posedge CK,1.0,0);
      
      // mpw CK_hl 
      $width(negedge CK,1.0,0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_FDPMQ_4( Q, CK, D0, D1, S );
input CK, D0, D1, S;
output Q;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_FDPMQ_4_func SAEDRVT14_FDPMQ_4_behav_inst(.Q(Q),.CK(CK),.D0(D0),.D1(D1),.S(S));
`else
   SAEDRVT14_FDPMQ_4_func SAEDRVT14_FDPMQ_4_inst(.Q(Q),.CK(CK),.D0(D0),.D1(D1),.S(S));
   // spec_gates_begin
   not MGM_G0(MGM_W0,D0);
   not MGM_G1(MGM_W1,D1);
   and MGM_G2(MGM_W2,MGM_W1,MGM_W0);
   not MGM_G3(MGM_W3,S);
   and MGM_G4(ENABLE_NOT_D0_AND_NOT_D1_AND_NOT_S,MGM_W3,MGM_W2);
   not MGM_G5(MGM_W4,D0);
   not MGM_G6(MGM_W5,D1);
   and MGM_G7(MGM_W6,MGM_W5,MGM_W4);
   and MGM_G8(ENABLE_NOT_D0_AND_NOT_D1_AND_S,S,MGM_W6);
   not MGM_G9(MGM_W7,D0);
   and MGM_G10(MGM_W8,D1,MGM_W7);
   not MGM_G11(MGM_W9,S);
   and MGM_G12(ENABLE_NOT_D0_AND_D1_AND_NOT_S,MGM_W9,MGM_W8);
   not MGM_G13(MGM_W10,D0);
   and MGM_G14(MGM_W11,D1,MGM_W10);
   and MGM_G15(ENABLE_NOT_D0_AND_D1_AND_S,S,MGM_W11);
   not MGM_G16(MGM_W12,D1);
   and MGM_G17(MGM_W13,MGM_W12,D0);
   not MGM_G18(MGM_W14,S);
   and MGM_G19(ENABLE_D0_AND_NOT_D1_AND_NOT_S,MGM_W14,MGM_W13);
   not MGM_G20(MGM_W15,D1);
   and MGM_G21(MGM_W16,MGM_W15,D0);
   and MGM_G22(ENABLE_D0_AND_NOT_D1_AND_S,S,MGM_W16);
   and MGM_G23(MGM_W17,D1,D0);
   not MGM_G24(MGM_W18,S);
   and MGM_G25(ENABLE_D0_AND_D1_AND_NOT_S,MGM_W18,MGM_W17);
   and MGM_G26(MGM_W19,D1,D0);
   and MGM_G27(ENABLE_D0_AND_D1_AND_S,S,MGM_W19);
   not MGM_G28(MGM_W20,D1);
   not MGM_G29(MGM_W21,S);
   and MGM_G30(ENABLE_NOT_D1_AND_NOT_S,MGM_W21,MGM_W20);
   not MGM_G31(MGM_W22,S);
   and MGM_G32(ENABLE_D1_AND_NOT_S,MGM_W22,D1);
   not MGM_G33(MGM_W23,D0);
   and MGM_G34(ENABLE_NOT_D0_AND_S,S,MGM_W23);
   and MGM_G35(ENABLE_D0_AND_S,S,D0);
   not MGM_G36(MGM_W24,D0);
   and MGM_G37(ENABLE_NOT_D0_AND_D1,D1,MGM_W24);
   not MGM_G38(MGM_W25,D1);
   and MGM_G39(ENABLE_D0_AND_NOT_D1,MGM_W25,D0);
   // spec_gates_end
   // specify_block_begin
   specify

      if(D0===1'b0 && S===1'b1)
      // seq arc CK --> Q
      (posedge CK => (Q : D1))  = (1.0,1.0);
      
      if(D1===1'b0 && S===1'b0)
      // seq arc CK --> Q
      (posedge CK => (Q : D0))  = (1.0,1.0);
      
      if(D0===1'b1 && S===1'b1)
      // seq arc CK --> Q
      (posedge CK => (Q : D1))  = (1.0,1.0);
      
      if(D1===1'b1 && S===1'b0)
      // seq arc CK --> Q
      (posedge CK => (Q : D0))  = (1.0,1.0);
      
      ifnone
      // seq arc CK --> Q
      (posedge CK => (Q : D0))  = (1.0,1.0);
      
      $width(negedge CK &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_NOT_S === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_NOT_S === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_S === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_S === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D0_AND_D1_AND_NOT_S === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D0_AND_D1_AND_NOT_S === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D0_AND_D1_AND_S === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D0_AND_D1_AND_S === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D0_AND_NOT_D1_AND_NOT_S === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D0_AND_NOT_D1_AND_NOT_S === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D0_AND_NOT_D1_AND_S === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D0_AND_NOT_D1_AND_S === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D0_AND_D1_AND_NOT_S === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D0_AND_D1_AND_NOT_S === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D0_AND_D1_AND_S === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D0_AND_D1_AND_S === 1'b1)
      ,1.0,0);
      
      // hold D0-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D1_AND_NOT_S === 1'b1),
      negedge D0 &&& (ENABLE_NOT_D1_AND_NOT_S === 1'b1),1.0);
      
      // hold D0-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D1_AND_NOT_S === 1'b1),
      posedge D0 &&& (ENABLE_NOT_D1_AND_NOT_S === 1'b1),1.0);
      
      // setup D0-HL CK-LH
      $setup(negedge D0 &&& (ENABLE_NOT_D1_AND_NOT_S === 1'b1),
      posedge CK &&& (ENABLE_NOT_D1_AND_NOT_S === 1'b1),1.0);
      
      // setup D0-LH CK-LH
      $setup(posedge D0 &&& (ENABLE_NOT_D1_AND_NOT_S === 1'b1),
      posedge CK &&& (ENABLE_NOT_D1_AND_NOT_S === 1'b1),1.0);
      
      // hold D0-HL CK-LH
      $hold(posedge CK &&& (ENABLE_D1_AND_NOT_S === 1'b1),
      negedge D0 &&& (ENABLE_D1_AND_NOT_S === 1'b1),1.0);
      
      // hold D0-LH CK-LH
      $hold(posedge CK &&& (ENABLE_D1_AND_NOT_S === 1'b1),
      posedge D0 &&& (ENABLE_D1_AND_NOT_S === 1'b1),1.0);
      
      // setup D0-HL CK-LH
      $setup(negedge D0 &&& (ENABLE_D1_AND_NOT_S === 1'b1),
      posedge CK &&& (ENABLE_D1_AND_NOT_S === 1'b1),1.0);
      
      // setup D0-LH CK-LH
      $setup(posedge D0 &&& (ENABLE_D1_AND_NOT_S === 1'b1),
      posedge CK &&& (ENABLE_D1_AND_NOT_S === 1'b1),1.0);
      
      // hold D1-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D0_AND_S === 1'b1),
      negedge D1 &&& (ENABLE_NOT_D0_AND_S === 1'b1),1.0);
      
      // hold D1-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D0_AND_S === 1'b1),
      posedge D1 &&& (ENABLE_NOT_D0_AND_S === 1'b1),1.0);
      
      // setup D1-HL CK-LH
      $setup(negedge D1 &&& (ENABLE_NOT_D0_AND_S === 1'b1),
      posedge CK &&& (ENABLE_NOT_D0_AND_S === 1'b1),1.0);
      
      // setup D1-LH CK-LH
      $setup(posedge D1 &&& (ENABLE_NOT_D0_AND_S === 1'b1),
      posedge CK &&& (ENABLE_NOT_D0_AND_S === 1'b1),1.0);
      
      // hold D1-HL CK-LH
      $hold(posedge CK &&& (ENABLE_D0_AND_S === 1'b1),
      negedge D1 &&& (ENABLE_D0_AND_S === 1'b1),1.0);
      
      // hold D1-LH CK-LH
      $hold(posedge CK &&& (ENABLE_D0_AND_S === 1'b1),
      posedge D1 &&& (ENABLE_D0_AND_S === 1'b1),1.0);
      
      // setup D1-HL CK-LH
      $setup(negedge D1 &&& (ENABLE_D0_AND_S === 1'b1),
      posedge CK &&& (ENABLE_D0_AND_S === 1'b1),1.0);
      
      // setup D1-LH CK-LH
      $setup(posedge D1 &&& (ENABLE_D0_AND_S === 1'b1),
      posedge CK &&& (ENABLE_D0_AND_S === 1'b1),1.0);
      
      // hold S-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D0_AND_D1 === 1'b1),
      negedge S &&& (ENABLE_NOT_D0_AND_D1 === 1'b1),1.0);
      
      // hold S-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D0_AND_D1 === 1'b1),
      posedge S &&& (ENABLE_NOT_D0_AND_D1 === 1'b1),1.0);
      
      // setup S-HL CK-LH
      $setup(negedge S &&& (ENABLE_NOT_D0_AND_D1 === 1'b1),
      posedge CK &&& (ENABLE_NOT_D0_AND_D1 === 1'b1),1.0);
      
      // setup S-LH CK-LH
      $setup(posedge S &&& (ENABLE_NOT_D0_AND_D1 === 1'b1),
      posedge CK &&& (ENABLE_NOT_D0_AND_D1 === 1'b1),1.0);
      
      // hold S-HL CK-LH
      $hold(posedge CK &&& (ENABLE_D0_AND_NOT_D1 === 1'b1),
      negedge S &&& (ENABLE_D0_AND_NOT_D1 === 1'b1),1.0);
      
      // hold S-LH CK-LH
      $hold(posedge CK &&& (ENABLE_D0_AND_NOT_D1 === 1'b1),
      posedge S &&& (ENABLE_D0_AND_NOT_D1 === 1'b1),1.0);
      
      // setup S-HL CK-LH
      $setup(negedge S &&& (ENABLE_D0_AND_NOT_D1 === 1'b1),
      posedge CK &&& (ENABLE_D0_AND_NOT_D1 === 1'b1),1.0);
      
      // setup S-LH CK-LH
      $setup(posedge S &&& (ENABLE_D0_AND_NOT_D1 === 1'b1),
      posedge CK &&& (ENABLE_D0_AND_NOT_D1 === 1'b1),1.0);
      
      // mpw CK_lh 
      $width(posedge CK,1.0,0);
      
      // mpw CK_hl 
      $width(negedge CK,1.0,0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_FDPQB_V2LP_0P5( QN, CK, D );
input CK, D;
output QN;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_FDPQB_V2LP_0P5_func SAEDRVT14_FDPQB_V2LP_0P5_behav_inst(.QN(QN),.CK(CK),.D(D));
`else
   SAEDRVT14_FDPQB_V2LP_0P5_func SAEDRVT14_FDPQB_V2LP_0P5_inst(.QN(QN),.CK(CK),.D(D));
   // spec_gates_begin
   not MGM_G0(ENABLE_NOT_D,D);
   buf MGM_G1(ENABLE_D,D);
   // spec_gates_end
   // specify_block_begin
   specify

      // seq arc CK --> QN
      (posedge CK => (QN : D))  = (1.0,1.0);
      
      $width(negedge CK &&& (ENABLE_NOT_D === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D === 1'b1)
      ,1.0,0);
      
      // hold D-HL CK-LH
      $hold(posedge CK,negedge D,1.0);
      
      // hold D-LH CK-LH
      $hold(posedge CK,posedge D,1.0);
      
      // setup D-HL CK-LH
      $setup(negedge D,posedge CK,1.0);
      
      // setup D-LH CK-LH
      $setup(posedge D,posedge CK,1.0);
      
      // mpw CK_lh 
      $width(posedge CK,1.0,0);
      
      // mpw CK_hl 
      $width(negedge CK,1.0,0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_FDPQB_V2LP_1( QN, CK, D );
input CK, D;
output QN;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_FDPQB_V2LP_1_func SAEDRVT14_FDPQB_V2LP_1_behav_inst(.QN(QN),.CK(CK),.D(D));
`else
   SAEDRVT14_FDPQB_V2LP_1_func SAEDRVT14_FDPQB_V2LP_1_inst(.QN(QN),.CK(CK),.D(D));
   // spec_gates_begin
   not MGM_G0(ENABLE_NOT_D,D);
   buf MGM_G1(ENABLE_D,D);
   // spec_gates_end
   // specify_block_begin
   specify

      // seq arc CK --> QN
      (posedge CK => (QN : D))  = (1.0,1.0);
      
      $width(negedge CK &&& (ENABLE_NOT_D === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D === 1'b1)
      ,1.0,0);
      
      // hold D-HL CK-LH
      $hold(posedge CK,negedge D,1.0);
      
      // hold D-LH CK-LH
      $hold(posedge CK,posedge D,1.0);
      
      // setup D-HL CK-LH
      $setup(negedge D,posedge CK,1.0);
      
      // setup D-LH CK-LH
      $setup(posedge D,posedge CK,1.0);
      
      // mpw CK_lh 
      $width(posedge CK,1.0,0);
      
      // mpw CK_hl 
      $width(negedge CK,1.0,0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_FDPQB_V2LP_2( QN, CK, D );
input CK, D;
output QN;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_FDPQB_V2LP_2_func SAEDRVT14_FDPQB_V2LP_2_behav_inst(.QN(QN),.CK(CK),.D(D));
`else
   SAEDRVT14_FDPQB_V2LP_2_func SAEDRVT14_FDPQB_V2LP_2_inst(.QN(QN),.CK(CK),.D(D));
   // spec_gates_begin
   not MGM_G0(ENABLE_NOT_D,D);
   buf MGM_G1(ENABLE_D,D);
   // spec_gates_end
   // specify_block_begin
   specify

      // seq arc CK --> QN
      (posedge CK => (QN : D))  = (1.0,1.0);
      
      $width(negedge CK &&& (ENABLE_NOT_D === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D === 1'b1)
      ,1.0,0);
      
      // hold D-HL CK-LH
      $hold(posedge CK,negedge D,1.0);
      
      // hold D-LH CK-LH
      $hold(posedge CK,posedge D,1.0);
      
      // setup D-HL CK-LH
      $setup(negedge D,posedge CK,1.0);
      
      // setup D-LH CK-LH
      $setup(posedge D,posedge CK,1.0);
      
      // mpw CK_lh 
      $width(posedge CK,1.0,0);
      
      // mpw CK_hl 
      $width(negedge CK,1.0,0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_FDPQB_V2_1( QN, CK, D );
input CK, D;
output QN;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_FDPQB_V2_1_func SAEDRVT14_FDPQB_V2_1_behav_inst(.QN(QN),.CK(CK),.D(D));
`else
   SAEDRVT14_FDPQB_V2_1_func SAEDRVT14_FDPQB_V2_1_inst(.QN(QN),.CK(CK),.D(D));
   // spec_gates_begin
   not MGM_G0(ENABLE_NOT_D,D);
   buf MGM_G1(ENABLE_D,D);
   // spec_gates_end
   // specify_block_begin
   specify

      // seq arc CK --> QN
      (posedge CK => (QN : D))  = (1.0,1.0);
      
      $width(negedge CK &&& (ENABLE_NOT_D === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D === 1'b1)
      ,1.0,0);
      
      // hold D-HL CK-LH
      $hold(posedge CK,negedge D,1.0);
      
      // hold D-LH CK-LH
      $hold(posedge CK,posedge D,1.0);
      
      // setup D-HL CK-LH
      $setup(negedge D,posedge CK,1.0);
      
      // setup D-LH CK-LH
      $setup(posedge D,posedge CK,1.0);
      
      // mpw CK_lh 
      $width(posedge CK,1.0,0);
      
      // mpw CK_hl 
      $width(negedge CK,1.0,0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_FDPQB_V2_2( QN, CK, D );
input CK, D;
output QN;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_FDPQB_V2_2_func SAEDRVT14_FDPQB_V2_2_behav_inst(.QN(QN),.CK(CK),.D(D));
`else
   SAEDRVT14_FDPQB_V2_2_func SAEDRVT14_FDPQB_V2_2_inst(.QN(QN),.CK(CK),.D(D));
   // spec_gates_begin
   not MGM_G0(ENABLE_NOT_D,D);
   buf MGM_G1(ENABLE_D,D);
   // spec_gates_end
   // specify_block_begin
   specify

      // seq arc CK --> QN
      (posedge CK => (QN : D))  = (1.0,1.0);
      
      $width(negedge CK &&& (ENABLE_NOT_D === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D === 1'b1)
      ,1.0,0);
      
      // hold D-HL CK-LH
      $hold(posedge CK,negedge D,1.0);
      
      // hold D-LH CK-LH
      $hold(posedge CK,posedge D,1.0);
      
      // setup D-HL CK-LH
      $setup(negedge D,posedge CK,1.0);
      
      // setup D-LH CK-LH
      $setup(posedge D,posedge CK,1.0);
      
      // mpw CK_lh 
      $width(posedge CK,1.0,0);
      
      // mpw CK_hl 
      $width(negedge CK,1.0,0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_FDPQB_V2_4( QN, CK, D );
input CK, D;
output QN;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_FDPQB_V2_4_func SAEDRVT14_FDPQB_V2_4_behav_inst(.QN(QN),.CK(CK),.D(D));
`else
   SAEDRVT14_FDPQB_V2_4_func SAEDRVT14_FDPQB_V2_4_inst(.QN(QN),.CK(CK),.D(D));
   // spec_gates_begin
   not MGM_G0(ENABLE_NOT_D,D);
   buf MGM_G1(ENABLE_D,D);
   // spec_gates_end
   // specify_block_begin
   specify

      // seq arc CK --> QN
      (posedge CK => (QN : D))  = (1.0,1.0);
      
      $width(negedge CK &&& (ENABLE_NOT_D === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D === 1'b1)
      ,1.0,0);
      
      // hold D-HL CK-LH
      $hold(posedge CK,negedge D,1.0);
      
      // hold D-LH CK-LH
      $hold(posedge CK,posedge D,1.0);
      
      // setup D-HL CK-LH
      $setup(negedge D,posedge CK,1.0);
      
      // setup D-LH CK-LH
      $setup(posedge D,posedge CK,1.0);
      
      // mpw CK_lh 
      $width(posedge CK,1.0,0);
      
      // mpw CK_hl 
      $width(negedge CK,1.0,0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_FDPQB_V2_8( QN, CK, D );
input CK, D;
output QN;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_FDPQB_V2_8_func SAEDRVT14_FDPQB_V2_8_behav_inst(.QN(QN),.CK(CK),.D(D));
`else
   SAEDRVT14_FDPQB_V2_8_func SAEDRVT14_FDPQB_V2_8_inst(.QN(QN),.CK(CK),.D(D));
   // spec_gates_begin
   not MGM_G0(ENABLE_NOT_D,D);
   buf MGM_G1(ENABLE_D,D);
   // spec_gates_end
   // specify_block_begin
   specify

      // seq arc CK --> QN
      (posedge CK => (QN : D))  = (1.0,1.0);
      
      $width(negedge CK &&& (ENABLE_NOT_D === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D === 1'b1)
      ,1.0,0);
      
      // hold D-HL CK-LH
      $hold(posedge CK,negedge D,1.0);
      
      // hold D-LH CK-LH
      $hold(posedge CK,posedge D,1.0);
      
      // setup D-HL CK-LH
      $setup(negedge D,posedge CK,1.0);
      
      // setup D-LH CK-LH
      $setup(posedge D,posedge CK,1.0);
      
      // mpw CK_lh 
      $width(posedge CK,1.0,0);
      
      // mpw CK_hl 
      $width(negedge CK,1.0,0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_FDPQB_V3_1( QN, CK, D );
input CK, D;
output QN;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_FDPQB_V3_1_func SAEDRVT14_FDPQB_V3_1_behav_inst(.QN(QN),.CK(CK),.D(D));
`else
   SAEDRVT14_FDPQB_V3_1_func SAEDRVT14_FDPQB_V3_1_inst(.QN(QN),.CK(CK),.D(D));
   // spec_gates_begin
   not MGM_G0(ENABLE_NOT_D,D);
   buf MGM_G1(ENABLE_D,D);
   // spec_gates_end
   // specify_block_begin
   specify

      // seq arc CK --> QN
      (posedge CK => (QN : D))  = (1.0,1.0);
      
      $width(negedge CK &&& (ENABLE_NOT_D === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D === 1'b1)
      ,1.0,0);
      
      // hold D-HL CK-LH
      $hold(posedge CK,negedge D,1.0);
      
      // hold D-LH CK-LH
      $hold(posedge CK,posedge D,1.0);
      
      // setup D-HL CK-LH
      $setup(negedge D,posedge CK,1.0);
      
      // setup D-LH CK-LH
      $setup(posedge D,posedge CK,1.0);
      
      // mpw CK_lh 
      $width(posedge CK,1.0,0);
      
      // mpw CK_hl 
      $width(negedge CK,1.0,0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_FDPQB_V3_2( QN, CK, D );
input CK, D;
output QN;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_FDPQB_V3_2_func SAEDRVT14_FDPQB_V3_2_behav_inst(.QN(QN),.CK(CK),.D(D));
`else
   SAEDRVT14_FDPQB_V3_2_func SAEDRVT14_FDPQB_V3_2_inst(.QN(QN),.CK(CK),.D(D));
   // spec_gates_begin
   not MGM_G0(ENABLE_NOT_D,D);
   buf MGM_G1(ENABLE_D,D);
   // spec_gates_end
   // specify_block_begin
   specify

      // seq arc CK --> QN
      (posedge CK => (QN : D))  = (1.0,1.0);
      
      $width(negedge CK &&& (ENABLE_NOT_D === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D === 1'b1)
      ,1.0,0);
      
      // hold D-HL CK-LH
      $hold(posedge CK,negedge D,1.0);
      
      // hold D-LH CK-LH
      $hold(posedge CK,posedge D,1.0);
      
      // setup D-HL CK-LH
      $setup(negedge D,posedge CK,1.0);
      
      // setup D-LH CK-LH
      $setup(posedge D,posedge CK,1.0);
      
      // mpw CK_lh 
      $width(posedge CK,1.0,0);
      
      // mpw CK_hl 
      $width(negedge CK,1.0,0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_FDPQB_V3_4( QN, CK, D );
input CK, D;
output QN;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_FDPQB_V3_4_func SAEDRVT14_FDPQB_V3_4_behav_inst(.QN(QN),.CK(CK),.D(D));
`else
   SAEDRVT14_FDPQB_V3_4_func SAEDRVT14_FDPQB_V3_4_inst(.QN(QN),.CK(CK),.D(D));
   // spec_gates_begin
   not MGM_G0(ENABLE_NOT_D,D);
   buf MGM_G1(ENABLE_D,D);
   // spec_gates_end
   // specify_block_begin
   specify

      // seq arc CK --> QN
      (posedge CK => (QN : D))  = (1.0,1.0);
      
      $width(negedge CK &&& (ENABLE_NOT_D === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D === 1'b1)
      ,1.0,0);
      
      // hold D-HL CK-LH
      $hold(posedge CK,negedge D,1.0);
      
      // hold D-LH CK-LH
      $hold(posedge CK,posedge D,1.0);
      
      // setup D-HL CK-LH
      $setup(negedge D,posedge CK,1.0);
      
      // setup D-LH CK-LH
      $setup(posedge D,posedge CK,1.0);
      
      // mpw CK_lh 
      $width(posedge CK,1.0,0);
      
      // mpw CK_hl 
      $width(negedge CK,1.0,0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_FDPQB_V3_8( QN, CK, D );
input CK, D;
output QN;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_FDPQB_V3_8_func SAEDRVT14_FDPQB_V3_8_behav_inst(.QN(QN),.CK(CK),.D(D));
`else
   SAEDRVT14_FDPQB_V3_8_func SAEDRVT14_FDPQB_V3_8_inst(.QN(QN),.CK(CK),.D(D));
   // spec_gates_begin
   not MGM_G0(ENABLE_NOT_D,D);
   buf MGM_G1(ENABLE_D,D);
   // spec_gates_end
   // specify_block_begin
   specify

      // seq arc CK --> QN
      (posedge CK => (QN : D))  = (1.0,1.0);
      
      $width(negedge CK &&& (ENABLE_NOT_D === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D === 1'b1)
      ,1.0,0);
      
      // hold D-HL CK-LH
      $hold(posedge CK,negedge D,1.0);
      
      // hold D-LH CK-LH
      $hold(posedge CK,posedge D,1.0);
      
      // setup D-HL CK-LH
      $setup(negedge D,posedge CK,1.0);
      
      // setup D-LH CK-LH
      $setup(posedge D,posedge CK,1.0);
      
      // mpw CK_lh 
      $width(posedge CK,1.0,0);
      
      // mpw CK_hl 
      $width(negedge CK,1.0,0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_FDPQ_V2ECO_1( Q, CK, D );
input CK, D;
output Q;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_FDPQ_V2ECO_1_func SAEDRVT14_FDPQ_V2ECO_1_behav_inst(.Q(Q),.CK(CK),.D(D));
`else
   SAEDRVT14_FDPQ_V2ECO_1_func SAEDRVT14_FDPQ_V2ECO_1_inst(.Q(Q),.CK(CK),.D(D));
   // spec_gates_begin
   not MGM_G0(ENABLE_NOT_D,D);
   buf MGM_G1(ENABLE_D,D);
   // spec_gates_end
   // specify_block_begin
   specify

      // seq arc CK --> Q
      (posedge CK => (Q : D))  = (1.0,1.0);
      
      $width(negedge CK &&& (ENABLE_NOT_D === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D === 1'b1)
      ,1.0,0);
      
      // hold D-HL CK-LH
      $hold(posedge CK,negedge D,1.0);
      
      // hold D-LH CK-LH
      $hold(posedge CK,posedge D,1.0);
      
      // setup D-HL CK-LH
      $setup(negedge D,posedge CK,1.0);
      
      // setup D-LH CK-LH
      $setup(posedge D,posedge CK,1.0);
      
      // mpw CK_lh 
      $width(posedge CK,1.0,0);
      
      // mpw CK_hl 
      $width(negedge CK,1.0,0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_FDPQ_V2_1( Q, CK, D );
input CK, D;
output Q;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_FDPQ_V2_1_func SAEDRVT14_FDPQ_V2_1_behav_inst(.Q(Q),.CK(CK),.D(D));
`else
   SAEDRVT14_FDPQ_V2_1_func SAEDRVT14_FDPQ_V2_1_inst(.Q(Q),.CK(CK),.D(D));
   // spec_gates_begin
   not MGM_G0(ENABLE_NOT_D,D);
   buf MGM_G1(ENABLE_D,D);
   // spec_gates_end
   // specify_block_begin
   specify

      // seq arc CK --> Q
      (posedge CK => (Q : D))  = (1.0,1.0);
      
      $width(negedge CK &&& (ENABLE_NOT_D === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D === 1'b1)
      ,1.0,0);
      
      // hold D-HL CK-LH
      $hold(posedge CK,negedge D,1.0);
      
      // hold D-LH CK-LH
      $hold(posedge CK,posedge D,1.0);
      
      // setup D-HL CK-LH
      $setup(negedge D,posedge CK,1.0);
      
      // setup D-LH CK-LH
      $setup(posedge D,posedge CK,1.0);
      
      // mpw CK_lh 
      $width(posedge CK,1.0,0);
      
      // mpw CK_hl 
      $width(negedge CK,1.0,0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_FDPQ_V2_6( Q, CK, D );
input CK, D;
output Q;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_FDPQ_V2_6_func SAEDRVT14_FDPQ_V2_6_behav_inst(.Q(Q),.CK(CK),.D(D));
`else
   SAEDRVT14_FDPQ_V2_6_func SAEDRVT14_FDPQ_V2_6_inst(.Q(Q),.CK(CK),.D(D));
   // spec_gates_begin
   not MGM_G0(ENABLE_NOT_D,D);
   buf MGM_G1(ENABLE_D,D);
   // spec_gates_end
   // specify_block_begin
   specify

      // seq arc CK --> Q
      (posedge CK => (Q : D))  = (1.0,1.0);
      
      $width(negedge CK &&& (ENABLE_NOT_D === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D === 1'b1)
      ,1.0,0);
      
      // hold D-HL CK-LH
      $hold(posedge CK,negedge D,1.0);
      
      // hold D-LH CK-LH
      $hold(posedge CK,posedge D,1.0);
      
      // setup D-HL CK-LH
      $setup(negedge D,posedge CK,1.0);
      
      // setup D-LH CK-LH
      $setup(posedge D,posedge CK,1.0);
      
      // mpw CK_lh 
      $width(posedge CK,1.0,0);
      
      // mpw CK_hl 
      $width(negedge CK,1.0,0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_FDPQ_V2_8( Q, CK, D );
input CK, D;
output Q;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_FDPQ_V2_8_func SAEDRVT14_FDPQ_V2_8_behav_inst(.Q(Q),.CK(CK),.D(D));
`else
   SAEDRVT14_FDPQ_V2_8_func SAEDRVT14_FDPQ_V2_8_inst(.Q(Q),.CK(CK),.D(D));
   // spec_gates_begin
   not MGM_G0(ENABLE_NOT_D,D);
   buf MGM_G1(ENABLE_D,D);
   // spec_gates_end
   // specify_block_begin
   specify

      // seq arc CK --> Q
      (posedge CK => (Q : D))  = (1.0,1.0);
      
      $width(negedge CK &&& (ENABLE_NOT_D === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D === 1'b1)
      ,1.0,0);
      
      // hold D-HL CK-LH
      $hold(posedge CK,negedge D,1.0);
      
      // hold D-LH CK-LH
      $hold(posedge CK,posedge D,1.0);
      
      // setup D-HL CK-LH
      $setup(negedge D,posedge CK,1.0);
      
      // setup D-LH CK-LH
      $setup(posedge D,posedge CK,1.0);
      
      // mpw CK_lh 
      $width(posedge CK,1.0,0);
      
      // mpw CK_hl 
      $width(negedge CK,1.0,0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_FDPQ_V3_1( Q, CK, D );
input CK, D;
output Q;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_FDPQ_V3_1_func SAEDRVT14_FDPQ_V3_1_behav_inst(.Q(Q),.CK(CK),.D(D));
`else
   SAEDRVT14_FDPQ_V3_1_func SAEDRVT14_FDPQ_V3_1_inst(.Q(Q),.CK(CK),.D(D));
   // spec_gates_begin
   not MGM_G0(ENABLE_NOT_D,D);
   buf MGM_G1(ENABLE_D,D);
   // spec_gates_end
   // specify_block_begin
   specify

      // seq arc CK --> Q
      (posedge CK => (Q : D))  = (1.0,1.0);
      
      $width(negedge CK &&& (ENABLE_NOT_D === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D === 1'b1)
      ,1.0,0);
      
      // hold D-HL CK-LH
      $hold(posedge CK,negedge D,1.0);
      
      // hold D-LH CK-LH
      $hold(posedge CK,posedge D,1.0);
      
      // setup D-HL CK-LH
      $setup(negedge D,posedge CK,1.0);
      
      // setup D-LH CK-LH
      $setup(posedge D,posedge CK,1.0);
      
      // mpw CK_lh 
      $width(posedge CK,1.0,0);
      
      // mpw CK_hl 
      $width(negedge CK,1.0,0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_FDPQ_V3_2( Q, CK, D );
input CK, D;
output Q;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_FDPQ_V3_2_func SAEDRVT14_FDPQ_V3_2_behav_inst(.Q(Q),.CK(CK),.D(D));
`else
   SAEDRVT14_FDPQ_V3_2_func SAEDRVT14_FDPQ_V3_2_inst(.Q(Q),.CK(CK),.D(D));
   // spec_gates_begin
   not MGM_G0(ENABLE_NOT_D,D);
   buf MGM_G1(ENABLE_D,D);
   // spec_gates_end
   // specify_block_begin
   specify

      // seq arc CK --> Q
      (posedge CK => (Q : D))  = (1.0,1.0);
      
      $width(negedge CK &&& (ENABLE_NOT_D === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D === 1'b1)
      ,1.0,0);
      
      // hold D-HL CK-LH
      $hold(posedge CK,negedge D,1.0);
      
      // hold D-LH CK-LH
      $hold(posedge CK,posedge D,1.0);
      
      // setup D-HL CK-LH
      $setup(negedge D,posedge CK,1.0);
      
      // setup D-LH CK-LH
      $setup(posedge D,posedge CK,1.0);
      
      // mpw CK_lh 
      $width(posedge CK,1.0,0);
      
      // mpw CK_hl 
      $width(negedge CK,1.0,0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_FDPQ_V3_4( Q, CK, D );
input CK, D;
output Q;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_FDPQ_V3_4_func SAEDRVT14_FDPQ_V3_4_behav_inst(.Q(Q),.CK(CK),.D(D));
`else
   SAEDRVT14_FDPQ_V3_4_func SAEDRVT14_FDPQ_V3_4_inst(.Q(Q),.CK(CK),.D(D));
   // spec_gates_begin
   not MGM_G0(ENABLE_NOT_D,D);
   buf MGM_G1(ENABLE_D,D);
   // spec_gates_end
   // specify_block_begin
   specify

      // seq arc CK --> Q
      (posedge CK => (Q : D))  = (1.0,1.0);
      
      $width(negedge CK &&& (ENABLE_NOT_D === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D === 1'b1)
      ,1.0,0);
      
      // hold D-HL CK-LH
      $hold(posedge CK,negedge D,1.0);
      
      // hold D-LH CK-LH
      $hold(posedge CK,posedge D,1.0);
      
      // setup D-HL CK-LH
      $setup(negedge D,posedge CK,1.0);
      
      // setup D-LH CK-LH
      $setup(posedge D,posedge CK,1.0);
      
      // mpw CK_lh 
      $width(posedge CK,1.0,0);
      
      // mpw CK_hl 
      $width(negedge CK,1.0,0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_FDPRBQ_V2LP_0P5( Q, CK, D, RD );
input CK, D, RD;
output Q;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_FDPRBQ_V2LP_0P5_func SAEDRVT14_FDPRBQ_V2LP_0P5_behav_inst(.Q(Q),.CK(CK),.D(D),.RD(RD));
`else
   SAEDRVT14_FDPRBQ_V2LP_0P5_func SAEDRVT14_FDPRBQ_V2LP_0P5_inst(.Q(Q),.CK(CK),.D(D),.RD(RD));
   // spec_gates_begin
   not MGM_G0(MGM_W0,D);
   and MGM_G1(ENABLE_NOT_D_AND_RD,RD,MGM_W0);
   and MGM_G2(ENABLE_D_AND_RD,RD,D);
   buf MGM_G3(ENABLE_RD,RD);
   buf MGM_G4(ENABLE_D,D);
   not MGM_G5(MGM_W1,CK);
   not MGM_G6(MGM_W2,D);
   and MGM_G7(ENABLE_NOT_CK_AND_NOT_D,MGM_W2,MGM_W1);
   not MGM_G8(MGM_W3,CK);
   and MGM_G9(ENABLE_NOT_CK_AND_D,D,MGM_W3);
   not MGM_G10(MGM_W4,D);
   and MGM_G11(ENABLE_CK_AND_NOT_D,MGM_W4,CK);
   and MGM_G12(ENABLE_CK_AND_D,D,CK);
   // spec_gates_end
   // specify_block_begin
   specify

      // seq arc CK --> Q
      (posedge CK => (Q : D))  = (1.0,1.0);
      
      if(CK===1'b0 && D===1'b0)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b0 && D===1'b1)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b1 && D===1'b0)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b1 && D===1'b1)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      ifnone
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_RD === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_RD === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_RD === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_RD === 1'b1)
      ,1.0,0);
      
      // hold D-HL CK-LH
      $hold(posedge CK &&& (ENABLE_RD === 1'b1),
      negedge D &&& (ENABLE_RD === 1'b1),1.0);
      
      // hold D-LH CK-LH
      $hold(posedge CK &&& (ENABLE_RD === 1'b1),
      posedge D &&& (ENABLE_RD === 1'b1),1.0);
      
      // setup D-HL CK-LH
      $setup(negedge D &&& (ENABLE_RD === 1'b1),
      posedge CK &&& (ENABLE_RD === 1'b1),1.0);
      
      // setup D-LH CK-LH
      $setup(posedge D &&& (ENABLE_RD === 1'b1),
      posedge CK &&& (ENABLE_RD === 1'b1),1.0);
      
      // recovery RD-LH CK-LH
      $recovery(posedge RD &&& (ENABLE_D === 1'b1),
      posedge CK &&& (ENABLE_D === 1'b1),1.0);
      
      // removal RD-LH CK-LH
      $removal(posedge RD &&& (ENABLE_D === 1'b1),
      posedge CK &&& (ENABLE_D === 1'b1),1.0);
      
      $width(negedge RD &&& (ENABLE_NOT_CK_AND_NOT_D === 1'b1)
      ,1.0,0);
      
      $width(negedge RD &&& (ENABLE_NOT_CK_AND_D === 1'b1)
      ,1.0,0);
      
      $width(negedge RD &&& (ENABLE_CK_AND_NOT_D === 1'b1)
      ,1.0,0);
      
      $width(negedge RD &&& (ENABLE_CK_AND_D === 1'b1)
      ,1.0,0);
      
      // mpw CK_lh 
      $width(posedge CK,1.0,0);
      
      // mpw CK_hl 
      $width(negedge CK,1.0,0);
      
      // mpw RD_hl 
      $width(negedge RD,1.0,0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_FDPRBQ_V2LP_1( Q, CK, D, RD );
input CK, D, RD;
output Q;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_FDPRBQ_V2LP_1_func SAEDRVT14_FDPRBQ_V2LP_1_behav_inst(.Q(Q),.CK(CK),.D(D),.RD(RD));
`else
   SAEDRVT14_FDPRBQ_V2LP_1_func SAEDRVT14_FDPRBQ_V2LP_1_inst(.Q(Q),.CK(CK),.D(D),.RD(RD));
   // spec_gates_begin
   not MGM_G0(MGM_W0,D);
   and MGM_G1(ENABLE_NOT_D_AND_RD,RD,MGM_W0);
   and MGM_G2(ENABLE_D_AND_RD,RD,D);
   buf MGM_G3(ENABLE_RD,RD);
   buf MGM_G4(ENABLE_D,D);
   not MGM_G5(MGM_W1,CK);
   not MGM_G6(MGM_W2,D);
   and MGM_G7(ENABLE_NOT_CK_AND_NOT_D,MGM_W2,MGM_W1);
   not MGM_G8(MGM_W3,CK);
   and MGM_G9(ENABLE_NOT_CK_AND_D,D,MGM_W3);
   not MGM_G10(MGM_W4,D);
   and MGM_G11(ENABLE_CK_AND_NOT_D,MGM_W4,CK);
   and MGM_G12(ENABLE_CK_AND_D,D,CK);
   // spec_gates_end
   // specify_block_begin
   specify

      // seq arc CK --> Q
      (posedge CK => (Q : D))  = (1.0,1.0);
      
      if(CK===1'b0 && D===1'b0)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b0 && D===1'b1)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b1 && D===1'b0)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b1 && D===1'b1)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      ifnone
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_RD === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_RD === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_RD === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_RD === 1'b1)
      ,1.0,0);
      
      // hold D-HL CK-LH
      $hold(posedge CK &&& (ENABLE_RD === 1'b1),
      negedge D &&& (ENABLE_RD === 1'b1),1.0);
      
      // hold D-LH CK-LH
      $hold(posedge CK &&& (ENABLE_RD === 1'b1),
      posedge D &&& (ENABLE_RD === 1'b1),1.0);
      
      // setup D-HL CK-LH
      $setup(negedge D &&& (ENABLE_RD === 1'b1),
      posedge CK &&& (ENABLE_RD === 1'b1),1.0);
      
      // setup D-LH CK-LH
      $setup(posedge D &&& (ENABLE_RD === 1'b1),
      posedge CK &&& (ENABLE_RD === 1'b1),1.0);
      
      // recovery RD-LH CK-LH
      $recovery(posedge RD &&& (ENABLE_D === 1'b1),
      posedge CK &&& (ENABLE_D === 1'b1),1.0);
      
      // removal RD-LH CK-LH
      $removal(posedge RD &&& (ENABLE_D === 1'b1),
      posedge CK &&& (ENABLE_D === 1'b1),1.0);
      
      $width(negedge RD &&& (ENABLE_NOT_CK_AND_NOT_D === 1'b1)
      ,1.0,0);
      
      $width(negedge RD &&& (ENABLE_NOT_CK_AND_D === 1'b1)
      ,1.0,0);
      
      $width(negedge RD &&& (ENABLE_CK_AND_NOT_D === 1'b1)
      ,1.0,0);
      
      $width(negedge RD &&& (ENABLE_CK_AND_D === 1'b1)
      ,1.0,0);
      
      // mpw CK_lh 
      $width(posedge CK,1.0,0);
      
      // mpw CK_hl 
      $width(negedge CK,1.0,0);
      
      // mpw RD_hl 
      $width(negedge RD,1.0,0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_FDPRBQ_V2LP_2( Q, CK, D, RD );
input CK, D, RD;
output Q;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_FDPRBQ_V2LP_2_func SAEDRVT14_FDPRBQ_V2LP_2_behav_inst(.Q(Q),.CK(CK),.D(D),.RD(RD));
`else
   SAEDRVT14_FDPRBQ_V2LP_2_func SAEDRVT14_FDPRBQ_V2LP_2_inst(.Q(Q),.CK(CK),.D(D),.RD(RD));
   // spec_gates_begin
   not MGM_G0(MGM_W0,D);
   and MGM_G1(ENABLE_NOT_D_AND_RD,RD,MGM_W0);
   and MGM_G2(ENABLE_D_AND_RD,RD,D);
   buf MGM_G3(ENABLE_RD,RD);
   buf MGM_G4(ENABLE_D,D);
   not MGM_G5(MGM_W1,CK);
   not MGM_G6(MGM_W2,D);
   and MGM_G7(ENABLE_NOT_CK_AND_NOT_D,MGM_W2,MGM_W1);
   not MGM_G8(MGM_W3,CK);
   and MGM_G9(ENABLE_NOT_CK_AND_D,D,MGM_W3);
   not MGM_G10(MGM_W4,D);
   and MGM_G11(ENABLE_CK_AND_NOT_D,MGM_W4,CK);
   and MGM_G12(ENABLE_CK_AND_D,D,CK);
   // spec_gates_end
   // specify_block_begin
   specify

      // seq arc CK --> Q
      (posedge CK => (Q : D))  = (1.0,1.0);
      
      if(CK===1'b0 && D===1'b0)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b0 && D===1'b1)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b1 && D===1'b0)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b1 && D===1'b1)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      ifnone
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_RD === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_RD === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_RD === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_RD === 1'b1)
      ,1.0,0);
      
      // hold D-HL CK-LH
      $hold(posedge CK &&& (ENABLE_RD === 1'b1),
      negedge D &&& (ENABLE_RD === 1'b1),1.0);
      
      // hold D-LH CK-LH
      $hold(posedge CK &&& (ENABLE_RD === 1'b1),
      posedge D &&& (ENABLE_RD === 1'b1),1.0);
      
      // setup D-HL CK-LH
      $setup(negedge D &&& (ENABLE_RD === 1'b1),
      posedge CK &&& (ENABLE_RD === 1'b1),1.0);
      
      // setup D-LH CK-LH
      $setup(posedge D &&& (ENABLE_RD === 1'b1),
      posedge CK &&& (ENABLE_RD === 1'b1),1.0);
      
      // recovery RD-LH CK-LH
      $recovery(posedge RD &&& (ENABLE_D === 1'b1),
      posedge CK &&& (ENABLE_D === 1'b1),1.0);
      
      // removal RD-LH CK-LH
      $removal(posedge RD &&& (ENABLE_D === 1'b1),
      posedge CK &&& (ENABLE_D === 1'b1),1.0);
      
      $width(negedge RD &&& (ENABLE_NOT_CK_AND_NOT_D === 1'b1)
      ,1.0,0);
      
      $width(negedge RD &&& (ENABLE_NOT_CK_AND_D === 1'b1)
      ,1.0,0);
      
      $width(negedge RD &&& (ENABLE_CK_AND_NOT_D === 1'b1)
      ,1.0,0);
      
      $width(negedge RD &&& (ENABLE_CK_AND_D === 1'b1)
      ,1.0,0);
      
      // mpw CK_lh 
      $width(posedge CK,1.0,0);
      
      // mpw CK_hl 
      $width(negedge CK,1.0,0);
      
      // mpw RD_hl 
      $width(negedge RD,1.0,0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_FDPRBQ_V2_0P5( Q, CK, D, RD );
input CK, D, RD;
output Q;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_FDPRBQ_V2_0P5_func SAEDRVT14_FDPRBQ_V2_0P5_behav_inst(.Q(Q),.CK(CK),.D(D),.RD(RD));
`else
   SAEDRVT14_FDPRBQ_V2_0P5_func SAEDRVT14_FDPRBQ_V2_0P5_inst(.Q(Q),.CK(CK),.D(D),.RD(RD));
   // spec_gates_begin
   not MGM_G0(MGM_W0,D);
   and MGM_G1(ENABLE_NOT_D_AND_RD,RD,MGM_W0);
   and MGM_G2(ENABLE_D_AND_RD,RD,D);
   buf MGM_G3(ENABLE_RD,RD);
   buf MGM_G4(ENABLE_D,D);
   not MGM_G5(MGM_W1,CK);
   not MGM_G6(MGM_W2,D);
   and MGM_G7(ENABLE_NOT_CK_AND_NOT_D,MGM_W2,MGM_W1);
   not MGM_G8(MGM_W3,CK);
   and MGM_G9(ENABLE_NOT_CK_AND_D,D,MGM_W3);
   not MGM_G10(MGM_W4,D);
   and MGM_G11(ENABLE_CK_AND_NOT_D,MGM_W4,CK);
   and MGM_G12(ENABLE_CK_AND_D,D,CK);
   // spec_gates_end
   // specify_block_begin
   specify

      // seq arc CK --> Q
      (posedge CK => (Q : D))  = (1.0,1.0);
      
      if(CK===1'b0 && D===1'b0)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b0 && D===1'b1)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b1 && D===1'b0)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b1 && D===1'b1)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      ifnone
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_RD === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_RD === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_RD === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_RD === 1'b1)
      ,1.0,0);
      
      // hold D-HL CK-LH
      $hold(posedge CK &&& (ENABLE_RD === 1'b1),
      negedge D &&& (ENABLE_RD === 1'b1),1.0);
      
      // hold D-LH CK-LH
      $hold(posedge CK &&& (ENABLE_RD === 1'b1),
      posedge D &&& (ENABLE_RD === 1'b1),1.0);
      
      // setup D-HL CK-LH
      $setup(negedge D &&& (ENABLE_RD === 1'b1),
      posedge CK &&& (ENABLE_RD === 1'b1),1.0);
      
      // setup D-LH CK-LH
      $setup(posedge D &&& (ENABLE_RD === 1'b1),
      posedge CK &&& (ENABLE_RD === 1'b1),1.0);
      
      // recovery RD-LH CK-LH
      $recovery(posedge RD &&& (ENABLE_D === 1'b1),
      posedge CK &&& (ENABLE_D === 1'b1),1.0);
      
      // removal RD-LH CK-LH
      $removal(posedge RD &&& (ENABLE_D === 1'b1),
      posedge CK &&& (ENABLE_D === 1'b1),1.0);
      
      $width(negedge RD &&& (ENABLE_NOT_CK_AND_NOT_D === 1'b1)
      ,1.0,0);
      
      $width(negedge RD &&& (ENABLE_NOT_CK_AND_D === 1'b1)
      ,1.0,0);
      
      $width(negedge RD &&& (ENABLE_CK_AND_NOT_D === 1'b1)
      ,1.0,0);
      
      $width(negedge RD &&& (ENABLE_CK_AND_D === 1'b1)
      ,1.0,0);
      
      // mpw CK_lh 
      $width(posedge CK,1.0,0);
      
      // mpw CK_hl 
      $width(negedge CK,1.0,0);
      
      // mpw RD_hl 
      $width(negedge RD,1.0,0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_FDPRBQ_V2_1( Q, CK, D, RD );
input CK, D, RD;
output Q;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_FDPRBQ_V2_1_func SAEDRVT14_FDPRBQ_V2_1_behav_inst(.Q(Q),.CK(CK),.D(D),.RD(RD));
`else
   SAEDRVT14_FDPRBQ_V2_1_func SAEDRVT14_FDPRBQ_V2_1_inst(.Q(Q),.CK(CK),.D(D),.RD(RD));
   // spec_gates_begin
   not MGM_G0(MGM_W0,D);
   and MGM_G1(ENABLE_NOT_D_AND_RD,RD,MGM_W0);
   and MGM_G2(ENABLE_D_AND_RD,RD,D);
   buf MGM_G3(ENABLE_RD,RD);
   buf MGM_G4(ENABLE_D,D);
   not MGM_G5(MGM_W1,CK);
   not MGM_G6(MGM_W2,D);
   and MGM_G7(ENABLE_NOT_CK_AND_NOT_D,MGM_W2,MGM_W1);
   not MGM_G8(MGM_W3,CK);
   and MGM_G9(ENABLE_NOT_CK_AND_D,D,MGM_W3);
   not MGM_G10(MGM_W4,D);
   and MGM_G11(ENABLE_CK_AND_NOT_D,MGM_W4,CK);
   and MGM_G12(ENABLE_CK_AND_D,D,CK);
   // spec_gates_end
   // specify_block_begin
   specify

      // seq arc CK --> Q
      (posedge CK => (Q : D))  = (1.0,1.0);
      
      if(CK===1'b0 && D===1'b0)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b0 && D===1'b1)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b1 && D===1'b0)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b1 && D===1'b1)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      ifnone
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_RD === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_RD === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_RD === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_RD === 1'b1)
      ,1.0,0);
      
      // hold D-HL CK-LH
      $hold(posedge CK &&& (ENABLE_RD === 1'b1),
      negedge D &&& (ENABLE_RD === 1'b1),1.0);
      
      // hold D-LH CK-LH
      $hold(posedge CK &&& (ENABLE_RD === 1'b1),
      posedge D &&& (ENABLE_RD === 1'b1),1.0);
      
      // setup D-HL CK-LH
      $setup(negedge D &&& (ENABLE_RD === 1'b1),
      posedge CK &&& (ENABLE_RD === 1'b1),1.0);
      
      // setup D-LH CK-LH
      $setup(posedge D &&& (ENABLE_RD === 1'b1),
      posedge CK &&& (ENABLE_RD === 1'b1),1.0);
      
      // recovery RD-LH CK-LH
      $recovery(posedge RD &&& (ENABLE_D === 1'b1),
      posedge CK &&& (ENABLE_D === 1'b1),1.0);
      
      // removal RD-LH CK-LH
      $removal(posedge RD &&& (ENABLE_D === 1'b1),
      posedge CK &&& (ENABLE_D === 1'b1),1.0);
      
      $width(negedge RD &&& (ENABLE_NOT_CK_AND_NOT_D === 1'b1)
      ,1.0,0);
      
      $width(negedge RD &&& (ENABLE_NOT_CK_AND_D === 1'b1)
      ,1.0,0);
      
      $width(negedge RD &&& (ENABLE_CK_AND_NOT_D === 1'b1)
      ,1.0,0);
      
      $width(negedge RD &&& (ENABLE_CK_AND_D === 1'b1)
      ,1.0,0);
      
      // mpw CK_lh 
      $width(posedge CK,1.0,0);
      
      // mpw CK_hl 
      $width(negedge CK,1.0,0);
      
      // mpw RD_hl 
      $width(negedge RD,1.0,0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_FDPRBQ_V2_2( Q, CK, D, RD );
input CK, D, RD;
output Q;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_FDPRBQ_V2_2_func SAEDRVT14_FDPRBQ_V2_2_behav_inst(.Q(Q),.CK(CK),.D(D),.RD(RD));
`else
   SAEDRVT14_FDPRBQ_V2_2_func SAEDRVT14_FDPRBQ_V2_2_inst(.Q(Q),.CK(CK),.D(D),.RD(RD));
   // spec_gates_begin
   not MGM_G0(MGM_W0,D);
   and MGM_G1(ENABLE_NOT_D_AND_RD,RD,MGM_W0);
   and MGM_G2(ENABLE_D_AND_RD,RD,D);
   buf MGM_G3(ENABLE_RD,RD);
   buf MGM_G4(ENABLE_D,D);
   not MGM_G5(MGM_W1,CK);
   not MGM_G6(MGM_W2,D);
   and MGM_G7(ENABLE_NOT_CK_AND_NOT_D,MGM_W2,MGM_W1);
   not MGM_G8(MGM_W3,CK);
   and MGM_G9(ENABLE_NOT_CK_AND_D,D,MGM_W3);
   not MGM_G10(MGM_W4,D);
   and MGM_G11(ENABLE_CK_AND_NOT_D,MGM_W4,CK);
   and MGM_G12(ENABLE_CK_AND_D,D,CK);
   // spec_gates_end
   // specify_block_begin
   specify

      // seq arc CK --> Q
      (posedge CK => (Q : D))  = (1.0,1.0);
      
      if(CK===1'b0 && D===1'b0)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b0 && D===1'b1)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b1 && D===1'b0)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b1 && D===1'b1)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      ifnone
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_RD === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_RD === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_RD === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_RD === 1'b1)
      ,1.0,0);
      
      // hold D-HL CK-LH
      $hold(posedge CK &&& (ENABLE_RD === 1'b1),
      negedge D &&& (ENABLE_RD === 1'b1),1.0);
      
      // hold D-LH CK-LH
      $hold(posedge CK &&& (ENABLE_RD === 1'b1),
      posedge D &&& (ENABLE_RD === 1'b1),1.0);
      
      // setup D-HL CK-LH
      $setup(negedge D &&& (ENABLE_RD === 1'b1),
      posedge CK &&& (ENABLE_RD === 1'b1),1.0);
      
      // setup D-LH CK-LH
      $setup(posedge D &&& (ENABLE_RD === 1'b1),
      posedge CK &&& (ENABLE_RD === 1'b1),1.0);
      
      // recovery RD-LH CK-LH
      $recovery(posedge RD &&& (ENABLE_D === 1'b1),
      posedge CK &&& (ENABLE_D === 1'b1),1.0);
      
      // removal RD-LH CK-LH
      $removal(posedge RD &&& (ENABLE_D === 1'b1),
      posedge CK &&& (ENABLE_D === 1'b1),1.0);
      
      $width(negedge RD &&& (ENABLE_NOT_CK_AND_NOT_D === 1'b1)
      ,1.0,0);
      
      $width(negedge RD &&& (ENABLE_NOT_CK_AND_D === 1'b1)
      ,1.0,0);
      
      $width(negedge RD &&& (ENABLE_CK_AND_NOT_D === 1'b1)
      ,1.0,0);
      
      $width(negedge RD &&& (ENABLE_CK_AND_D === 1'b1)
      ,1.0,0);
      
      // mpw CK_lh 
      $width(posedge CK,1.0,0);
      
      // mpw CK_hl 
      $width(negedge CK,1.0,0);
      
      // mpw RD_hl 
      $width(negedge RD,1.0,0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_FDPRBQ_V2_4( Q, CK, D, RD );
input CK, D, RD;
output Q;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_FDPRBQ_V2_4_func SAEDRVT14_FDPRBQ_V2_4_behav_inst(.Q(Q),.CK(CK),.D(D),.RD(RD));
`else
   SAEDRVT14_FDPRBQ_V2_4_func SAEDRVT14_FDPRBQ_V2_4_inst(.Q(Q),.CK(CK),.D(D),.RD(RD));
   // spec_gates_begin
   not MGM_G0(MGM_W0,D);
   and MGM_G1(ENABLE_NOT_D_AND_RD,RD,MGM_W0);
   and MGM_G2(ENABLE_D_AND_RD,RD,D);
   buf MGM_G3(ENABLE_RD,RD);
   buf MGM_G4(ENABLE_D,D);
   not MGM_G5(MGM_W1,CK);
   not MGM_G6(MGM_W2,D);
   and MGM_G7(ENABLE_NOT_CK_AND_NOT_D,MGM_W2,MGM_W1);
   not MGM_G8(MGM_W3,CK);
   and MGM_G9(ENABLE_NOT_CK_AND_D,D,MGM_W3);
   not MGM_G10(MGM_W4,D);
   and MGM_G11(ENABLE_CK_AND_NOT_D,MGM_W4,CK);
   and MGM_G12(ENABLE_CK_AND_D,D,CK);
   // spec_gates_end
   // specify_block_begin
   specify

      // seq arc CK --> Q
      (posedge CK => (Q : D))  = (1.0,1.0);
      
      if(CK===1'b0 && D===1'b0)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b0 && D===1'b1)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b1 && D===1'b0)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b1 && D===1'b1)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      ifnone
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_RD === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_RD === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_RD === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_RD === 1'b1)
      ,1.0,0);
      
      // hold D-HL CK-LH
      $hold(posedge CK &&& (ENABLE_RD === 1'b1),
      negedge D &&& (ENABLE_RD === 1'b1),1.0);
      
      // hold D-LH CK-LH
      $hold(posedge CK &&& (ENABLE_RD === 1'b1),
      posedge D &&& (ENABLE_RD === 1'b1),1.0);
      
      // setup D-HL CK-LH
      $setup(negedge D &&& (ENABLE_RD === 1'b1),
      posedge CK &&& (ENABLE_RD === 1'b1),1.0);
      
      // setup D-LH CK-LH
      $setup(posedge D &&& (ENABLE_RD === 1'b1),
      posedge CK &&& (ENABLE_RD === 1'b1),1.0);
      
      // recovery RD-LH CK-LH
      $recovery(posedge RD &&& (ENABLE_D === 1'b1),
      posedge CK &&& (ENABLE_D === 1'b1),1.0);
      
      // removal RD-LH CK-LH
      $removal(posedge RD &&& (ENABLE_D === 1'b1),
      posedge CK &&& (ENABLE_D === 1'b1),1.0);
      
      $width(negedge RD &&& (ENABLE_NOT_CK_AND_NOT_D === 1'b1)
      ,1.0,0);
      
      $width(negedge RD &&& (ENABLE_NOT_CK_AND_D === 1'b1)
      ,1.0,0);
      
      $width(negedge RD &&& (ENABLE_CK_AND_NOT_D === 1'b1)
      ,1.0,0);
      
      $width(negedge RD &&& (ENABLE_CK_AND_D === 1'b1)
      ,1.0,0);
      
      // mpw CK_lh 
      $width(posedge CK,1.0,0);
      
      // mpw CK_hl 
      $width(negedge CK,1.0,0);
      
      // mpw RD_hl 
      $width(negedge RD,1.0,0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_FDPRBSBQ_V2_0P5( Q, CK, D, RD, SD );
input CK, D, RD, SD;
output Q;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_FDPRBSBQ_V2_0P5_func SAEDRVT14_FDPRBSBQ_V2_0P5_behav_inst(.Q(Q),.CK(CK),.D(D),.RD(RD),.SD(SD));
`else
   SAEDRVT14_FDPRBSBQ_V2_0P5_func SAEDRVT14_FDPRBSBQ_V2_0P5_inst(.Q(Q),.CK(CK),.D(D),.RD(RD),.SD(SD));
   // spec_gates_begin
   not MGM_G0(MGM_W0,D);
   and MGM_G1(MGM_W1,RD,MGM_W0);
   and MGM_G2(ENABLE_NOT_D_AND_RD_AND_SD,SD,MGM_W1);
   and MGM_G3(MGM_W2,RD,D);
   and MGM_G4(ENABLE_D_AND_RD_AND_SD,SD,MGM_W2);
   and MGM_G5(ENABLE_RD_AND_SD,SD,RD);
   and MGM_G6(ENABLE_D_AND_SD,SD,D);
   not MGM_G7(MGM_W3,CK);
   not MGM_G8(MGM_W4,D);
   and MGM_G9(MGM_W5,MGM_W4,MGM_W3);
   and MGM_G10(ENABLE_NOT_CK_AND_NOT_D_AND_SD,SD,MGM_W5);
   not MGM_G11(MGM_W6,CK);
   and MGM_G12(MGM_W7,D,MGM_W6);
   and MGM_G13(ENABLE_NOT_CK_AND_D_AND_SD,SD,MGM_W7);
   not MGM_G14(MGM_W8,D);
   and MGM_G15(MGM_W9,MGM_W8,CK);
   and MGM_G16(ENABLE_CK_AND_NOT_D_AND_SD,SD,MGM_W9);
   and MGM_G17(MGM_W10,D,CK);
   and MGM_G18(ENABLE_CK_AND_D_AND_SD,SD,MGM_W10);
   not MGM_G19(MGM_W11,CK);
   not MGM_G20(MGM_W12,D);
   and MGM_G21(ENABLE_NOT_CK_AND_NOT_D,MGM_W12,MGM_W11);
   not MGM_G22(MGM_W13,CK);
   and MGM_G23(ENABLE_NOT_CK_AND_D,D,MGM_W13);
   not MGM_G24(MGM_W14,D);
   and MGM_G25(ENABLE_CK_AND_NOT_D,MGM_W14,CK);
   and MGM_G26(ENABLE_CK_AND_D,D,CK);
   not MGM_G27(MGM_W15,D);
   and MGM_G28(ENABLE_NOT_D_AND_RD,RD,MGM_W15);
   not MGM_G29(MGM_W16,CK);
   not MGM_G30(MGM_W17,D);
   and MGM_G31(MGM_W18,MGM_W17,MGM_W16);
   and MGM_G32(ENABLE_NOT_CK_AND_NOT_D_AND_RD,RD,MGM_W18);
   not MGM_G33(MGM_W19,CK);
   and MGM_G34(MGM_W20,D,MGM_W19);
   and MGM_G35(ENABLE_NOT_CK_AND_D_AND_RD,RD,MGM_W20);
   not MGM_G36(MGM_W21,D);
   and MGM_G37(MGM_W22,MGM_W21,CK);
   and MGM_G38(ENABLE_CK_AND_NOT_D_AND_RD,RD,MGM_W22);
   and MGM_G39(MGM_W23,D,CK);
   and MGM_G40(ENABLE_CK_AND_D_AND_RD,RD,MGM_W23);
   // spec_gates_end
   // specify_block_begin
   specify

      // seq arc CK --> Q
      (posedge CK => (Q : D))  = (1.0,1.0);
      
      if(CK===1'b0 && D===1'b0 && SD===1'b0)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b0 && D===1'b0 && SD===1'b1)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b0 && D===1'b1 && SD===1'b0)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b0 && D===1'b1 && SD===1'b1)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b1 && D===1'b0 && SD===1'b0)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b1 && D===1'b0 && SD===1'b1)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b1 && D===1'b1 && SD===1'b0)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b1 && D===1'b1 && SD===1'b1)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      ifnone
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b0 && D===1'b0)
      // seq arc SD --> Q
      (SD => Q)  = (1.0,1.0);
      
      if(CK===1'b0 && D===1'b1)
      // seq arc SD --> Q
      (SD => Q)  = (1.0,1.0);
      
      if(CK===1'b1 && D===1'b0)
      // seq arc SD --> Q
      (SD => Q)  = (1.0,1.0);
      
      if(CK===1'b1 && D===1'b1)
      // seq arc SD --> Q
      (SD => Q)  = (1.0,1.0);
      
      ifnone
      // seq arc SD --> Q
      (SD => Q)  = (1.0,1.0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_RD_AND_SD === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_RD_AND_SD === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_RD_AND_SD === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_RD_AND_SD === 1'b1)
      ,1.0,0);
      
      // hold D-HL CK-LH
      $hold(posedge CK &&& (ENABLE_RD_AND_SD === 1'b1),
      negedge D &&& (ENABLE_RD_AND_SD === 1'b1),1.0);
      
      // hold D-LH CK-LH
      $hold(posedge CK &&& (ENABLE_RD_AND_SD === 1'b1),
      posedge D &&& (ENABLE_RD_AND_SD === 1'b1),1.0);
      
      // setup D-HL CK-LH
      $setup(negedge D &&& (ENABLE_RD_AND_SD === 1'b1),
      posedge CK &&& (ENABLE_RD_AND_SD === 1'b1),1.0);
      
      // setup D-LH CK-LH
      $setup(posedge D &&& (ENABLE_RD_AND_SD === 1'b1),
      posedge CK &&& (ENABLE_RD_AND_SD === 1'b1),1.0);
      
      // recovery RD-LH CK-LH
      $recovery(posedge RD &&& (ENABLE_D_AND_SD === 1'b1),
      posedge CK &&& (ENABLE_D_AND_SD === 1'b1),1.0);
      
      // removal RD-LH CK-LH
      $removal(posedge RD &&& (ENABLE_D_AND_SD === 1'b1),
      posedge CK &&& (ENABLE_D_AND_SD === 1'b1),1.0);
      
      $width(negedge RD &&& (ENABLE_NOT_CK_AND_NOT_D_AND_SD === 1'b1)
      ,1.0,0);
      
      $width(negedge RD &&& (ENABLE_NOT_CK_AND_D_AND_SD === 1'b1)
      ,1.0,0);
      
      $width(negedge RD &&& (ENABLE_CK_AND_NOT_D_AND_SD === 1'b1)
      ,1.0,0);
      
      $width(negedge RD &&& (ENABLE_CK_AND_D_AND_SD === 1'b1)
      ,1.0,0);
      
      // hold RD-LH SD-LH
      $hold(posedge SD &&& (ENABLE_NOT_CK_AND_NOT_D === 1'b1),
      posedge RD &&& (ENABLE_NOT_CK_AND_NOT_D === 1'b1),1.0);
      
      // setup RD-LH SD-LH
      $setup(posedge RD &&& (ENABLE_NOT_CK_AND_NOT_D === 1'b1),
      posedge SD &&& (ENABLE_NOT_CK_AND_NOT_D === 1'b1),1.0);
      
      // hold RD-LH SD-LH
      $hold(posedge SD &&& (ENABLE_NOT_CK_AND_D === 1'b1),
      posedge RD &&& (ENABLE_NOT_CK_AND_D === 1'b1),1.0);
      
      // setup RD-LH SD-LH
      $setup(posedge RD &&& (ENABLE_NOT_CK_AND_D === 1'b1),
      posedge SD &&& (ENABLE_NOT_CK_AND_D === 1'b1),1.0);
      
      // hold RD-LH SD-LH
      $hold(posedge SD &&& (ENABLE_CK_AND_NOT_D === 1'b1),
      posedge RD &&& (ENABLE_CK_AND_NOT_D === 1'b1),1.0);
      
      // setup RD-LH SD-LH
      $setup(posedge RD &&& (ENABLE_CK_AND_NOT_D === 1'b1),
      posedge SD &&& (ENABLE_CK_AND_NOT_D === 1'b1),1.0);
      
      // hold RD-LH SD-LH
      $hold(posedge SD &&& (ENABLE_CK_AND_D === 1'b1),
      posedge RD &&& (ENABLE_CK_AND_D === 1'b1),1.0);
      
      // setup RD-LH SD-LH
      $setup(posedge RD &&& (ENABLE_CK_AND_D === 1'b1),
      posedge SD &&& (ENABLE_CK_AND_D === 1'b1),1.0);
      
      // recovery SD-LH CK-LH
      $recovery(posedge SD &&& (ENABLE_NOT_D_AND_RD === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_RD === 1'b1),1.0);
      
      // removal SD-LH CK-LH
      $removal(posedge SD &&& (ENABLE_NOT_D_AND_RD === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_RD === 1'b1),1.0);
      
      // hold SD-LH RD-LH
      $hold(posedge RD &&& (ENABLE_NOT_CK_AND_NOT_D === 1'b1),
      posedge SD &&& (ENABLE_NOT_CK_AND_NOT_D === 1'b1),1.0);
      
      // setup SD-LH RD-LH
      $setup(posedge SD &&& (ENABLE_NOT_CK_AND_NOT_D === 1'b1),
      posedge RD &&& (ENABLE_NOT_CK_AND_NOT_D === 1'b1),1.0);
      
      // hold SD-LH RD-LH
      $hold(posedge RD &&& (ENABLE_NOT_CK_AND_D === 1'b1),
      posedge SD &&& (ENABLE_NOT_CK_AND_D === 1'b1),1.0);
      
      // setup SD-LH RD-LH
      $setup(posedge SD &&& (ENABLE_NOT_CK_AND_D === 1'b1),
      posedge RD &&& (ENABLE_NOT_CK_AND_D === 1'b1),1.0);
      
      // hold SD-LH RD-LH
      $hold(posedge RD &&& (ENABLE_CK_AND_NOT_D === 1'b1),
      posedge SD &&& (ENABLE_CK_AND_NOT_D === 1'b1),1.0);
      
      // setup SD-LH RD-LH
      $setup(posedge SD &&& (ENABLE_CK_AND_NOT_D === 1'b1),
      posedge RD &&& (ENABLE_CK_AND_NOT_D === 1'b1),1.0);
      
      // hold SD-LH RD-LH
      $hold(posedge RD &&& (ENABLE_CK_AND_D === 1'b1),
      posedge SD &&& (ENABLE_CK_AND_D === 1'b1),1.0);
      
      // setup SD-LH RD-LH
      $setup(posedge SD &&& (ENABLE_CK_AND_D === 1'b1),
      posedge RD &&& (ENABLE_CK_AND_D === 1'b1),1.0);
      
      $width(negedge SD &&& (ENABLE_NOT_CK_AND_NOT_D_AND_RD === 1'b1)
      ,1.0,0);
      
      $width(negedge SD &&& (ENABLE_NOT_CK_AND_D_AND_RD === 1'b1)
      ,1.0,0);
      
      $width(negedge SD &&& (ENABLE_CK_AND_NOT_D_AND_RD === 1'b1)
      ,1.0,0);
      
      $width(negedge SD &&& (ENABLE_CK_AND_D_AND_RD === 1'b1)
      ,1.0,0);
      
      // mpw CK_lh 
      $width(posedge CK,1.0,0);
      
      // mpw CK_hl 
      $width(negedge CK,1.0,0);
      
      // mpw RD_hl 
      $width(negedge RD,1.0,0);
      
      // mpw SD_hl 
      $width(negedge SD,1.0,0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_FDPRBSBQ_V2_1( Q, CK, D, RD, SD );
input CK, D, RD, SD;
output Q;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_FDPRBSBQ_V2_1_func SAEDRVT14_FDPRBSBQ_V2_1_behav_inst(.Q(Q),.CK(CK),.D(D),.RD(RD),.SD(SD));
`else
   SAEDRVT14_FDPRBSBQ_V2_1_func SAEDRVT14_FDPRBSBQ_V2_1_inst(.Q(Q),.CK(CK),.D(D),.RD(RD),.SD(SD));
   // spec_gates_begin
   not MGM_G0(MGM_W0,D);
   and MGM_G1(MGM_W1,RD,MGM_W0);
   and MGM_G2(ENABLE_NOT_D_AND_RD_AND_SD,SD,MGM_W1);
   and MGM_G3(MGM_W2,RD,D);
   and MGM_G4(ENABLE_D_AND_RD_AND_SD,SD,MGM_W2);
   and MGM_G5(ENABLE_RD_AND_SD,SD,RD);
   and MGM_G6(ENABLE_D_AND_SD,SD,D);
   not MGM_G7(MGM_W3,CK);
   not MGM_G8(MGM_W4,D);
   and MGM_G9(MGM_W5,MGM_W4,MGM_W3);
   and MGM_G10(ENABLE_NOT_CK_AND_NOT_D_AND_SD,SD,MGM_W5);
   not MGM_G11(MGM_W6,CK);
   and MGM_G12(MGM_W7,D,MGM_W6);
   and MGM_G13(ENABLE_NOT_CK_AND_D_AND_SD,SD,MGM_W7);
   not MGM_G14(MGM_W8,D);
   and MGM_G15(MGM_W9,MGM_W8,CK);
   and MGM_G16(ENABLE_CK_AND_NOT_D_AND_SD,SD,MGM_W9);
   and MGM_G17(MGM_W10,D,CK);
   and MGM_G18(ENABLE_CK_AND_D_AND_SD,SD,MGM_W10);
   not MGM_G19(MGM_W11,CK);
   not MGM_G20(MGM_W12,D);
   and MGM_G21(ENABLE_NOT_CK_AND_NOT_D,MGM_W12,MGM_W11);
   not MGM_G22(MGM_W13,CK);
   and MGM_G23(ENABLE_NOT_CK_AND_D,D,MGM_W13);
   not MGM_G24(MGM_W14,D);
   and MGM_G25(ENABLE_CK_AND_NOT_D,MGM_W14,CK);
   and MGM_G26(ENABLE_CK_AND_D,D,CK);
   not MGM_G27(MGM_W15,D);
   and MGM_G28(ENABLE_NOT_D_AND_RD,RD,MGM_W15);
   not MGM_G29(MGM_W16,CK);
   not MGM_G30(MGM_W17,D);
   and MGM_G31(MGM_W18,MGM_W17,MGM_W16);
   and MGM_G32(ENABLE_NOT_CK_AND_NOT_D_AND_RD,RD,MGM_W18);
   not MGM_G33(MGM_W19,CK);
   and MGM_G34(MGM_W20,D,MGM_W19);
   and MGM_G35(ENABLE_NOT_CK_AND_D_AND_RD,RD,MGM_W20);
   not MGM_G36(MGM_W21,D);
   and MGM_G37(MGM_W22,MGM_W21,CK);
   and MGM_G38(ENABLE_CK_AND_NOT_D_AND_RD,RD,MGM_W22);
   and MGM_G39(MGM_W23,D,CK);
   and MGM_G40(ENABLE_CK_AND_D_AND_RD,RD,MGM_W23);
   // spec_gates_end
   // specify_block_begin
   specify

      // seq arc CK --> Q
      (posedge CK => (Q : D))  = (1.0,1.0);
      
      if(CK===1'b0 && D===1'b0 && SD===1'b0)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b0 && D===1'b0 && SD===1'b1)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b0 && D===1'b1 && SD===1'b0)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b0 && D===1'b1 && SD===1'b1)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b1 && D===1'b0 && SD===1'b0)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b1 && D===1'b0 && SD===1'b1)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b1 && D===1'b1 && SD===1'b0)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b1 && D===1'b1 && SD===1'b1)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      ifnone
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b0 && D===1'b0)
      // seq arc SD --> Q
      (SD => Q)  = (1.0,1.0);
      
      if(CK===1'b0 && D===1'b1)
      // seq arc SD --> Q
      (SD => Q)  = (1.0,1.0);
      
      if(CK===1'b1 && D===1'b0)
      // seq arc SD --> Q
      (SD => Q)  = (1.0,1.0);
      
      if(CK===1'b1 && D===1'b1)
      // seq arc SD --> Q
      (SD => Q)  = (1.0,1.0);
      
      ifnone
      // seq arc SD --> Q
      (SD => Q)  = (1.0,1.0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_RD_AND_SD === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_RD_AND_SD === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_RD_AND_SD === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_RD_AND_SD === 1'b1)
      ,1.0,0);
      
      // hold D-HL CK-LH
      $hold(posedge CK &&& (ENABLE_RD_AND_SD === 1'b1),
      negedge D &&& (ENABLE_RD_AND_SD === 1'b1),1.0);
      
      // hold D-LH CK-LH
      $hold(posedge CK &&& (ENABLE_RD_AND_SD === 1'b1),
      posedge D &&& (ENABLE_RD_AND_SD === 1'b1),1.0);
      
      // setup D-HL CK-LH
      $setup(negedge D &&& (ENABLE_RD_AND_SD === 1'b1),
      posedge CK &&& (ENABLE_RD_AND_SD === 1'b1),1.0);
      
      // setup D-LH CK-LH
      $setup(posedge D &&& (ENABLE_RD_AND_SD === 1'b1),
      posedge CK &&& (ENABLE_RD_AND_SD === 1'b1),1.0);
      
      // recovery RD-LH CK-LH
      $recovery(posedge RD &&& (ENABLE_D_AND_SD === 1'b1),
      posedge CK &&& (ENABLE_D_AND_SD === 1'b1),1.0);
      
      // removal RD-LH CK-LH
      $removal(posedge RD &&& (ENABLE_D_AND_SD === 1'b1),
      posedge CK &&& (ENABLE_D_AND_SD === 1'b1),1.0);
      
      $width(negedge RD &&& (ENABLE_NOT_CK_AND_NOT_D_AND_SD === 1'b1)
      ,1.0,0);
      
      $width(negedge RD &&& (ENABLE_NOT_CK_AND_D_AND_SD === 1'b1)
      ,1.0,0);
      
      $width(negedge RD &&& (ENABLE_CK_AND_NOT_D_AND_SD === 1'b1)
      ,1.0,0);
      
      $width(negedge RD &&& (ENABLE_CK_AND_D_AND_SD === 1'b1)
      ,1.0,0);
      
      // hold RD-LH SD-LH
      $hold(posedge SD &&& (ENABLE_NOT_CK_AND_NOT_D === 1'b1),
      posedge RD &&& (ENABLE_NOT_CK_AND_NOT_D === 1'b1),1.0);
      
      // setup RD-LH SD-LH
      $setup(posedge RD &&& (ENABLE_NOT_CK_AND_NOT_D === 1'b1),
      posedge SD &&& (ENABLE_NOT_CK_AND_NOT_D === 1'b1),1.0);
      
      // hold RD-LH SD-LH
      $hold(posedge SD &&& (ENABLE_NOT_CK_AND_D === 1'b1),
      posedge RD &&& (ENABLE_NOT_CK_AND_D === 1'b1),1.0);
      
      // setup RD-LH SD-LH
      $setup(posedge RD &&& (ENABLE_NOT_CK_AND_D === 1'b1),
      posedge SD &&& (ENABLE_NOT_CK_AND_D === 1'b1),1.0);
      
      // hold RD-LH SD-LH
      $hold(posedge SD &&& (ENABLE_CK_AND_NOT_D === 1'b1),
      posedge RD &&& (ENABLE_CK_AND_NOT_D === 1'b1),1.0);
      
      // setup RD-LH SD-LH
      $setup(posedge RD &&& (ENABLE_CK_AND_NOT_D === 1'b1),
      posedge SD &&& (ENABLE_CK_AND_NOT_D === 1'b1),1.0);
      
      // hold RD-LH SD-LH
      $hold(posedge SD &&& (ENABLE_CK_AND_D === 1'b1),
      posedge RD &&& (ENABLE_CK_AND_D === 1'b1),1.0);
      
      // setup RD-LH SD-LH
      $setup(posedge RD &&& (ENABLE_CK_AND_D === 1'b1),
      posedge SD &&& (ENABLE_CK_AND_D === 1'b1),1.0);
      
      // recovery SD-LH CK-LH
      $recovery(posedge SD &&& (ENABLE_NOT_D_AND_RD === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_RD === 1'b1),1.0);
      
      // removal SD-LH CK-LH
      $removal(posedge SD &&& (ENABLE_NOT_D_AND_RD === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_RD === 1'b1),1.0);
      
      // hold SD-LH RD-LH
      $hold(posedge RD &&& (ENABLE_NOT_CK_AND_NOT_D === 1'b1),
      posedge SD &&& (ENABLE_NOT_CK_AND_NOT_D === 1'b1),1.0);
      
      // setup SD-LH RD-LH
      $setup(posedge SD &&& (ENABLE_NOT_CK_AND_NOT_D === 1'b1),
      posedge RD &&& (ENABLE_NOT_CK_AND_NOT_D === 1'b1),1.0);
      
      // hold SD-LH RD-LH
      $hold(posedge RD &&& (ENABLE_NOT_CK_AND_D === 1'b1),
      posedge SD &&& (ENABLE_NOT_CK_AND_D === 1'b1),1.0);
      
      // setup SD-LH RD-LH
      $setup(posedge SD &&& (ENABLE_NOT_CK_AND_D === 1'b1),
      posedge RD &&& (ENABLE_NOT_CK_AND_D === 1'b1),1.0);
      
      // hold SD-LH RD-LH
      $hold(posedge RD &&& (ENABLE_CK_AND_NOT_D === 1'b1),
      posedge SD &&& (ENABLE_CK_AND_NOT_D === 1'b1),1.0);
      
      // setup SD-LH RD-LH
      $setup(posedge SD &&& (ENABLE_CK_AND_NOT_D === 1'b1),
      posedge RD &&& (ENABLE_CK_AND_NOT_D === 1'b1),1.0);
      
      // hold SD-LH RD-LH
      $hold(posedge RD &&& (ENABLE_CK_AND_D === 1'b1),
      posedge SD &&& (ENABLE_CK_AND_D === 1'b1),1.0);
      
      // setup SD-LH RD-LH
      $setup(posedge SD &&& (ENABLE_CK_AND_D === 1'b1),
      posedge RD &&& (ENABLE_CK_AND_D === 1'b1),1.0);
      
      $width(negedge SD &&& (ENABLE_NOT_CK_AND_NOT_D_AND_RD === 1'b1)
      ,1.0,0);
      
      $width(negedge SD &&& (ENABLE_NOT_CK_AND_D_AND_RD === 1'b1)
      ,1.0,0);
      
      $width(negedge SD &&& (ENABLE_CK_AND_NOT_D_AND_RD === 1'b1)
      ,1.0,0);
      
      $width(negedge SD &&& (ENABLE_CK_AND_D_AND_RD === 1'b1)
      ,1.0,0);
      
      // mpw CK_lh 
      $width(posedge CK,1.0,0);
      
      // mpw CK_hl 
      $width(negedge CK,1.0,0);
      
      // mpw RD_hl 
      $width(negedge RD,1.0,0);
      
      // mpw SD_hl 
      $width(negedge SD,1.0,0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_FDPRBSBQ_V2_2( Q, CK, D, RD, SD );
input CK, D, RD, SD;
output Q;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_FDPRBSBQ_V2_2_func SAEDRVT14_FDPRBSBQ_V2_2_behav_inst(.Q(Q),.CK(CK),.D(D),.RD(RD),.SD(SD));
`else
   SAEDRVT14_FDPRBSBQ_V2_2_func SAEDRVT14_FDPRBSBQ_V2_2_inst(.Q(Q),.CK(CK),.D(D),.RD(RD),.SD(SD));
   // spec_gates_begin
   not MGM_G0(MGM_W0,D);
   and MGM_G1(MGM_W1,RD,MGM_W0);
   and MGM_G2(ENABLE_NOT_D_AND_RD_AND_SD,SD,MGM_W1);
   and MGM_G3(MGM_W2,RD,D);
   and MGM_G4(ENABLE_D_AND_RD_AND_SD,SD,MGM_W2);
   and MGM_G5(ENABLE_RD_AND_SD,SD,RD);
   and MGM_G6(ENABLE_D_AND_SD,SD,D);
   not MGM_G7(MGM_W3,CK);
   not MGM_G8(MGM_W4,D);
   and MGM_G9(MGM_W5,MGM_W4,MGM_W3);
   and MGM_G10(ENABLE_NOT_CK_AND_NOT_D_AND_SD,SD,MGM_W5);
   not MGM_G11(MGM_W6,CK);
   and MGM_G12(MGM_W7,D,MGM_W6);
   and MGM_G13(ENABLE_NOT_CK_AND_D_AND_SD,SD,MGM_W7);
   not MGM_G14(MGM_W8,D);
   and MGM_G15(MGM_W9,MGM_W8,CK);
   and MGM_G16(ENABLE_CK_AND_NOT_D_AND_SD,SD,MGM_W9);
   and MGM_G17(MGM_W10,D,CK);
   and MGM_G18(ENABLE_CK_AND_D_AND_SD,SD,MGM_W10);
   not MGM_G19(MGM_W11,CK);
   not MGM_G20(MGM_W12,D);
   and MGM_G21(ENABLE_NOT_CK_AND_NOT_D,MGM_W12,MGM_W11);
   not MGM_G22(MGM_W13,CK);
   and MGM_G23(ENABLE_NOT_CK_AND_D,D,MGM_W13);
   not MGM_G24(MGM_W14,D);
   and MGM_G25(ENABLE_CK_AND_NOT_D,MGM_W14,CK);
   and MGM_G26(ENABLE_CK_AND_D,D,CK);
   not MGM_G27(MGM_W15,D);
   and MGM_G28(ENABLE_NOT_D_AND_RD,RD,MGM_W15);
   not MGM_G29(MGM_W16,CK);
   not MGM_G30(MGM_W17,D);
   and MGM_G31(MGM_W18,MGM_W17,MGM_W16);
   and MGM_G32(ENABLE_NOT_CK_AND_NOT_D_AND_RD,RD,MGM_W18);
   not MGM_G33(MGM_W19,CK);
   and MGM_G34(MGM_W20,D,MGM_W19);
   and MGM_G35(ENABLE_NOT_CK_AND_D_AND_RD,RD,MGM_W20);
   not MGM_G36(MGM_W21,D);
   and MGM_G37(MGM_W22,MGM_W21,CK);
   and MGM_G38(ENABLE_CK_AND_NOT_D_AND_RD,RD,MGM_W22);
   and MGM_G39(MGM_W23,D,CK);
   and MGM_G40(ENABLE_CK_AND_D_AND_RD,RD,MGM_W23);
   // spec_gates_end
   // specify_block_begin
   specify

      // seq arc CK --> Q
      (posedge CK => (Q : D))  = (1.0,1.0);
      
      if(CK===1'b0 && D===1'b0 && SD===1'b0)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b0 && D===1'b0 && SD===1'b1)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b0 && D===1'b1 && SD===1'b0)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b0 && D===1'b1 && SD===1'b1)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b1 && D===1'b0 && SD===1'b0)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b1 && D===1'b0 && SD===1'b1)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b1 && D===1'b1 && SD===1'b0)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b1 && D===1'b1 && SD===1'b1)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      ifnone
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b0 && D===1'b0)
      // seq arc SD --> Q
      (SD => Q)  = (1.0,1.0);
      
      if(CK===1'b0 && D===1'b1)
      // seq arc SD --> Q
      (SD => Q)  = (1.0,1.0);
      
      if(CK===1'b1 && D===1'b0)
      // seq arc SD --> Q
      (SD => Q)  = (1.0,1.0);
      
      if(CK===1'b1 && D===1'b1)
      // seq arc SD --> Q
      (SD => Q)  = (1.0,1.0);
      
      ifnone
      // seq arc SD --> Q
      (SD => Q)  = (1.0,1.0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_RD_AND_SD === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_RD_AND_SD === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_RD_AND_SD === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_RD_AND_SD === 1'b1)
      ,1.0,0);
      
      // hold D-HL CK-LH
      $hold(posedge CK &&& (ENABLE_RD_AND_SD === 1'b1),
      negedge D &&& (ENABLE_RD_AND_SD === 1'b1),1.0);
      
      // hold D-LH CK-LH
      $hold(posedge CK &&& (ENABLE_RD_AND_SD === 1'b1),
      posedge D &&& (ENABLE_RD_AND_SD === 1'b1),1.0);
      
      // setup D-HL CK-LH
      $setup(negedge D &&& (ENABLE_RD_AND_SD === 1'b1),
      posedge CK &&& (ENABLE_RD_AND_SD === 1'b1),1.0);
      
      // setup D-LH CK-LH
      $setup(posedge D &&& (ENABLE_RD_AND_SD === 1'b1),
      posedge CK &&& (ENABLE_RD_AND_SD === 1'b1),1.0);
      
      // recovery RD-LH CK-LH
      $recovery(posedge RD &&& (ENABLE_D_AND_SD === 1'b1),
      posedge CK &&& (ENABLE_D_AND_SD === 1'b1),1.0);
      
      // removal RD-LH CK-LH
      $removal(posedge RD &&& (ENABLE_D_AND_SD === 1'b1),
      posedge CK &&& (ENABLE_D_AND_SD === 1'b1),1.0);
      
      $width(negedge RD &&& (ENABLE_NOT_CK_AND_NOT_D_AND_SD === 1'b1)
      ,1.0,0);
      
      $width(negedge RD &&& (ENABLE_NOT_CK_AND_D_AND_SD === 1'b1)
      ,1.0,0);
      
      $width(negedge RD &&& (ENABLE_CK_AND_NOT_D_AND_SD === 1'b1)
      ,1.0,0);
      
      $width(negedge RD &&& (ENABLE_CK_AND_D_AND_SD === 1'b1)
      ,1.0,0);
      
      // hold RD-LH SD-LH
      $hold(posedge SD &&& (ENABLE_NOT_CK_AND_NOT_D === 1'b1),
      posedge RD &&& (ENABLE_NOT_CK_AND_NOT_D === 1'b1),1.0);
      
      // setup RD-LH SD-LH
      $setup(posedge RD &&& (ENABLE_NOT_CK_AND_NOT_D === 1'b1),
      posedge SD &&& (ENABLE_NOT_CK_AND_NOT_D === 1'b1),1.0);
      
      // hold RD-LH SD-LH
      $hold(posedge SD &&& (ENABLE_NOT_CK_AND_D === 1'b1),
      posedge RD &&& (ENABLE_NOT_CK_AND_D === 1'b1),1.0);
      
      // setup RD-LH SD-LH
      $setup(posedge RD &&& (ENABLE_NOT_CK_AND_D === 1'b1),
      posedge SD &&& (ENABLE_NOT_CK_AND_D === 1'b1),1.0);
      
      // hold RD-LH SD-LH
      $hold(posedge SD &&& (ENABLE_CK_AND_NOT_D === 1'b1),
      posedge RD &&& (ENABLE_CK_AND_NOT_D === 1'b1),1.0);
      
      // setup RD-LH SD-LH
      $setup(posedge RD &&& (ENABLE_CK_AND_NOT_D === 1'b1),
      posedge SD &&& (ENABLE_CK_AND_NOT_D === 1'b1),1.0);
      
      // hold RD-LH SD-LH
      $hold(posedge SD &&& (ENABLE_CK_AND_D === 1'b1),
      posedge RD &&& (ENABLE_CK_AND_D === 1'b1),1.0);
      
      // setup RD-LH SD-LH
      $setup(posedge RD &&& (ENABLE_CK_AND_D === 1'b1),
      posedge SD &&& (ENABLE_CK_AND_D === 1'b1),1.0);
      
      // recovery SD-LH CK-LH
      $recovery(posedge SD &&& (ENABLE_NOT_D_AND_RD === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_RD === 1'b1),1.0);
      
      // removal SD-LH CK-LH
      $removal(posedge SD &&& (ENABLE_NOT_D_AND_RD === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_RD === 1'b1),1.0);
      
      // hold SD-LH RD-LH
      $hold(posedge RD &&& (ENABLE_NOT_CK_AND_NOT_D === 1'b1),
      posedge SD &&& (ENABLE_NOT_CK_AND_NOT_D === 1'b1),1.0);
      
      // setup SD-LH RD-LH
      $setup(posedge SD &&& (ENABLE_NOT_CK_AND_NOT_D === 1'b1),
      posedge RD &&& (ENABLE_NOT_CK_AND_NOT_D === 1'b1),1.0);
      
      // hold SD-LH RD-LH
      $hold(posedge RD &&& (ENABLE_NOT_CK_AND_D === 1'b1),
      posedge SD &&& (ENABLE_NOT_CK_AND_D === 1'b1),1.0);
      
      // setup SD-LH RD-LH
      $setup(posedge SD &&& (ENABLE_NOT_CK_AND_D === 1'b1),
      posedge RD &&& (ENABLE_NOT_CK_AND_D === 1'b1),1.0);
      
      // hold SD-LH RD-LH
      $hold(posedge RD &&& (ENABLE_CK_AND_NOT_D === 1'b1),
      posedge SD &&& (ENABLE_CK_AND_NOT_D === 1'b1),1.0);
      
      // setup SD-LH RD-LH
      $setup(posedge SD &&& (ENABLE_CK_AND_NOT_D === 1'b1),
      posedge RD &&& (ENABLE_CK_AND_NOT_D === 1'b1),1.0);
      
      // hold SD-LH RD-LH
      $hold(posedge RD &&& (ENABLE_CK_AND_D === 1'b1),
      posedge SD &&& (ENABLE_CK_AND_D === 1'b1),1.0);
      
      // setup SD-LH RD-LH
      $setup(posedge SD &&& (ENABLE_CK_AND_D === 1'b1),
      posedge RD &&& (ENABLE_CK_AND_D === 1'b1),1.0);
      
      $width(negedge SD &&& (ENABLE_NOT_CK_AND_NOT_D_AND_RD === 1'b1)
      ,1.0,0);
      
      $width(negedge SD &&& (ENABLE_NOT_CK_AND_D_AND_RD === 1'b1)
      ,1.0,0);
      
      $width(negedge SD &&& (ENABLE_CK_AND_NOT_D_AND_RD === 1'b1)
      ,1.0,0);
      
      $width(negedge SD &&& (ENABLE_CK_AND_D_AND_RD === 1'b1)
      ,1.0,0);
      
      // mpw CK_lh 
      $width(posedge CK,1.0,0);
      
      // mpw CK_hl 
      $width(negedge CK,1.0,0);
      
      // mpw RD_hl 
      $width(negedge RD,1.0,0);
      
      // mpw SD_hl 
      $width(negedge SD,1.0,0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_FDPRBSBQ_V2_4( Q, CK, D, RD, SD );
input CK, D, RD, SD;
output Q;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_FDPRBSBQ_V2_4_func SAEDRVT14_FDPRBSBQ_V2_4_behav_inst(.Q(Q),.CK(CK),.D(D),.RD(RD),.SD(SD));
`else
   SAEDRVT14_FDPRBSBQ_V2_4_func SAEDRVT14_FDPRBSBQ_V2_4_inst(.Q(Q),.CK(CK),.D(D),.RD(RD),.SD(SD));
   // spec_gates_begin
   not MGM_G0(MGM_W0,D);
   and MGM_G1(MGM_W1,RD,MGM_W0);
   and MGM_G2(ENABLE_NOT_D_AND_RD_AND_SD,SD,MGM_W1);
   and MGM_G3(MGM_W2,RD,D);
   and MGM_G4(ENABLE_D_AND_RD_AND_SD,SD,MGM_W2);
   and MGM_G5(ENABLE_RD_AND_SD,SD,RD);
   and MGM_G6(ENABLE_D_AND_SD,SD,D);
   not MGM_G7(MGM_W3,CK);
   not MGM_G8(MGM_W4,D);
   and MGM_G9(MGM_W5,MGM_W4,MGM_W3);
   and MGM_G10(ENABLE_NOT_CK_AND_NOT_D_AND_SD,SD,MGM_W5);
   not MGM_G11(MGM_W6,CK);
   and MGM_G12(MGM_W7,D,MGM_W6);
   and MGM_G13(ENABLE_NOT_CK_AND_D_AND_SD,SD,MGM_W7);
   not MGM_G14(MGM_W8,D);
   and MGM_G15(MGM_W9,MGM_W8,CK);
   and MGM_G16(ENABLE_CK_AND_NOT_D_AND_SD,SD,MGM_W9);
   and MGM_G17(MGM_W10,D,CK);
   and MGM_G18(ENABLE_CK_AND_D_AND_SD,SD,MGM_W10);
   not MGM_G19(MGM_W11,CK);
   not MGM_G20(MGM_W12,D);
   and MGM_G21(ENABLE_NOT_CK_AND_NOT_D,MGM_W12,MGM_W11);
   not MGM_G22(MGM_W13,CK);
   and MGM_G23(ENABLE_NOT_CK_AND_D,D,MGM_W13);
   not MGM_G24(MGM_W14,D);
   and MGM_G25(ENABLE_CK_AND_NOT_D,MGM_W14,CK);
   and MGM_G26(ENABLE_CK_AND_D,D,CK);
   not MGM_G27(MGM_W15,D);
   and MGM_G28(ENABLE_NOT_D_AND_RD,RD,MGM_W15);
   not MGM_G29(MGM_W16,CK);
   not MGM_G30(MGM_W17,D);
   and MGM_G31(MGM_W18,MGM_W17,MGM_W16);
   and MGM_G32(ENABLE_NOT_CK_AND_NOT_D_AND_RD,RD,MGM_W18);
   not MGM_G33(MGM_W19,CK);
   and MGM_G34(MGM_W20,D,MGM_W19);
   and MGM_G35(ENABLE_NOT_CK_AND_D_AND_RD,RD,MGM_W20);
   not MGM_G36(MGM_W21,D);
   and MGM_G37(MGM_W22,MGM_W21,CK);
   and MGM_G38(ENABLE_CK_AND_NOT_D_AND_RD,RD,MGM_W22);
   and MGM_G39(MGM_W23,D,CK);
   and MGM_G40(ENABLE_CK_AND_D_AND_RD,RD,MGM_W23);
   // spec_gates_end
   // specify_block_begin
   specify

      // seq arc CK --> Q
      (posedge CK => (Q : D))  = (1.0,1.0);
      
      if(CK===1'b0 && D===1'b0 && SD===1'b0)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b0 && D===1'b0 && SD===1'b1)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b0 && D===1'b1 && SD===1'b0)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b0 && D===1'b1 && SD===1'b1)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b1 && D===1'b0 && SD===1'b0)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b1 && D===1'b0 && SD===1'b1)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b1 && D===1'b1 && SD===1'b0)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b1 && D===1'b1 && SD===1'b1)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      ifnone
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b0 && D===1'b0)
      // seq arc SD --> Q
      (SD => Q)  = (1.0,1.0);
      
      if(CK===1'b0 && D===1'b1)
      // seq arc SD --> Q
      (SD => Q)  = (1.0,1.0);
      
      if(CK===1'b1 && D===1'b0)
      // seq arc SD --> Q
      (SD => Q)  = (1.0,1.0);
      
      if(CK===1'b1 && D===1'b1)
      // seq arc SD --> Q
      (SD => Q)  = (1.0,1.0);
      
      ifnone
      // seq arc SD --> Q
      (SD => Q)  = (1.0,1.0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_RD_AND_SD === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_RD_AND_SD === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_RD_AND_SD === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_RD_AND_SD === 1'b1)
      ,1.0,0);
      
      // hold D-HL CK-LH
      $hold(posedge CK &&& (ENABLE_RD_AND_SD === 1'b1),
      negedge D &&& (ENABLE_RD_AND_SD === 1'b1),1.0);
      
      // hold D-LH CK-LH
      $hold(posedge CK &&& (ENABLE_RD_AND_SD === 1'b1),
      posedge D &&& (ENABLE_RD_AND_SD === 1'b1),1.0);
      
      // setup D-HL CK-LH
      $setup(negedge D &&& (ENABLE_RD_AND_SD === 1'b1),
      posedge CK &&& (ENABLE_RD_AND_SD === 1'b1),1.0);
      
      // setup D-LH CK-LH
      $setup(posedge D &&& (ENABLE_RD_AND_SD === 1'b1),
      posedge CK &&& (ENABLE_RD_AND_SD === 1'b1),1.0);
      
      // recovery RD-LH CK-LH
      $recovery(posedge RD &&& (ENABLE_D_AND_SD === 1'b1),
      posedge CK &&& (ENABLE_D_AND_SD === 1'b1),1.0);
      
      // removal RD-LH CK-LH
      $removal(posedge RD &&& (ENABLE_D_AND_SD === 1'b1),
      posedge CK &&& (ENABLE_D_AND_SD === 1'b1),1.0);
      
      $width(negedge RD &&& (ENABLE_NOT_CK_AND_NOT_D_AND_SD === 1'b1)
      ,1.0,0);
      
      $width(negedge RD &&& (ENABLE_NOT_CK_AND_D_AND_SD === 1'b1)
      ,1.0,0);
      
      $width(negedge RD &&& (ENABLE_CK_AND_NOT_D_AND_SD === 1'b1)
      ,1.0,0);
      
      $width(negedge RD &&& (ENABLE_CK_AND_D_AND_SD === 1'b1)
      ,1.0,0);
      
      // hold RD-LH SD-LH
      $hold(posedge SD &&& (ENABLE_NOT_CK_AND_NOT_D === 1'b1),
      posedge RD &&& (ENABLE_NOT_CK_AND_NOT_D === 1'b1),1.0);
      
      // setup RD-LH SD-LH
      $setup(posedge RD &&& (ENABLE_NOT_CK_AND_NOT_D === 1'b1),
      posedge SD &&& (ENABLE_NOT_CK_AND_NOT_D === 1'b1),1.0);
      
      // hold RD-LH SD-LH
      $hold(posedge SD &&& (ENABLE_NOT_CK_AND_D === 1'b1),
      posedge RD &&& (ENABLE_NOT_CK_AND_D === 1'b1),1.0);
      
      // setup RD-LH SD-LH
      $setup(posedge RD &&& (ENABLE_NOT_CK_AND_D === 1'b1),
      posedge SD &&& (ENABLE_NOT_CK_AND_D === 1'b1),1.0);
      
      // hold RD-LH SD-LH
      $hold(posedge SD &&& (ENABLE_CK_AND_NOT_D === 1'b1),
      posedge RD &&& (ENABLE_CK_AND_NOT_D === 1'b1),1.0);
      
      // setup RD-LH SD-LH
      $setup(posedge RD &&& (ENABLE_CK_AND_NOT_D === 1'b1),
      posedge SD &&& (ENABLE_CK_AND_NOT_D === 1'b1),1.0);
      
      // hold RD-LH SD-LH
      $hold(posedge SD &&& (ENABLE_CK_AND_D === 1'b1),
      posedge RD &&& (ENABLE_CK_AND_D === 1'b1),1.0);
      
      // setup RD-LH SD-LH
      $setup(posedge RD &&& (ENABLE_CK_AND_D === 1'b1),
      posedge SD &&& (ENABLE_CK_AND_D === 1'b1),1.0);
      
      // recovery SD-LH CK-LH
      $recovery(posedge SD &&& (ENABLE_NOT_D_AND_RD === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_RD === 1'b1),1.0);
      
      // removal SD-LH CK-LH
      $removal(posedge SD &&& (ENABLE_NOT_D_AND_RD === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_RD === 1'b1),1.0);
      
      // hold SD-LH RD-LH
      $hold(posedge RD &&& (ENABLE_NOT_CK_AND_NOT_D === 1'b1),
      posedge SD &&& (ENABLE_NOT_CK_AND_NOT_D === 1'b1),1.0);
      
      // setup SD-LH RD-LH
      $setup(posedge SD &&& (ENABLE_NOT_CK_AND_NOT_D === 1'b1),
      posedge RD &&& (ENABLE_NOT_CK_AND_NOT_D === 1'b1),1.0);
      
      // hold SD-LH RD-LH
      $hold(posedge RD &&& (ENABLE_NOT_CK_AND_D === 1'b1),
      posedge SD &&& (ENABLE_NOT_CK_AND_D === 1'b1),1.0);
      
      // setup SD-LH RD-LH
      $setup(posedge SD &&& (ENABLE_NOT_CK_AND_D === 1'b1),
      posedge RD &&& (ENABLE_NOT_CK_AND_D === 1'b1),1.0);
      
      // hold SD-LH RD-LH
      $hold(posedge RD &&& (ENABLE_CK_AND_NOT_D === 1'b1),
      posedge SD &&& (ENABLE_CK_AND_NOT_D === 1'b1),1.0);
      
      // setup SD-LH RD-LH
      $setup(posedge SD &&& (ENABLE_CK_AND_NOT_D === 1'b1),
      posedge RD &&& (ENABLE_CK_AND_NOT_D === 1'b1),1.0);
      
      // hold SD-LH RD-LH
      $hold(posedge RD &&& (ENABLE_CK_AND_D === 1'b1),
      posedge SD &&& (ENABLE_CK_AND_D === 1'b1),1.0);
      
      // setup SD-LH RD-LH
      $setup(posedge SD &&& (ENABLE_CK_AND_D === 1'b1),
      posedge RD &&& (ENABLE_CK_AND_D === 1'b1),1.0);
      
      $width(negedge SD &&& (ENABLE_NOT_CK_AND_NOT_D_AND_RD === 1'b1)
      ,1.0,0);
      
      $width(negedge SD &&& (ENABLE_NOT_CK_AND_D_AND_RD === 1'b1)
      ,1.0,0);
      
      $width(negedge SD &&& (ENABLE_CK_AND_NOT_D_AND_RD === 1'b1)
      ,1.0,0);
      
      $width(negedge SD &&& (ENABLE_CK_AND_D_AND_RD === 1'b1)
      ,1.0,0);
      
      // mpw CK_lh 
      $width(posedge CK,1.0,0);
      
      // mpw CK_hl 
      $width(negedge CK,1.0,0);
      
      // mpw RD_hl 
      $width(negedge RD,1.0,0);
      
      // mpw SD_hl 
      $width(negedge SD,1.0,0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_FDPRB_V3_2( Q, QN, CK, D, RD );
input CK, D, RD;
output Q, QN;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_FDPRB_V3_2_func SAEDRVT14_FDPRB_V3_2_behav_inst(.Q(Q),.QN(QN),.CK(CK),.D(D),.RD(RD));
`else
   SAEDRVT14_FDPRB_V3_2_func SAEDRVT14_FDPRB_V3_2_inst(.Q(Q),.QN(QN),.CK(CK),.D(D),.RD(RD));
   // spec_gates_begin
   not MGM_G0(MGM_W0,D);
   and MGM_G1(ENABLE_NOT_D_AND_RD,RD,MGM_W0);
   and MGM_G2(ENABLE_D_AND_RD,RD,D);
   buf MGM_G3(ENABLE_RD,RD);
   buf MGM_G4(ENABLE_D,D);
   not MGM_G5(MGM_W1,CK);
   not MGM_G6(MGM_W2,D);
   and MGM_G7(ENABLE_NOT_CK_AND_NOT_D,MGM_W2,MGM_W1);
   not MGM_G8(MGM_W3,CK);
   and MGM_G9(ENABLE_NOT_CK_AND_D,D,MGM_W3);
   not MGM_G10(MGM_W4,D);
   and MGM_G11(ENABLE_CK_AND_NOT_D,MGM_W4,CK);
   and MGM_G12(ENABLE_CK_AND_D,D,CK);
   // spec_gates_end
   // specify_block_begin
   specify

      // seq arc CK --> Q
      (posedge CK => (Q : D))  = (1.0,1.0);
      
      if(CK===1'b0 && D===1'b0)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b0 && D===1'b1)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b1 && D===1'b0)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b1 && D===1'b1)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      ifnone
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      // seq arc CK --> QN
      (posedge CK => (QN : D))  = (1.0,1.0);
      
      if(CK===1'b0 && D===1'b0)
      // seq arc RD --> QN
      (RD => QN)  = (1.0,1.0);
      
      if(CK===1'b0 && D===1'b1)
      // seq arc RD --> QN
      (RD => QN)  = (1.0,1.0);
      
      if(CK===1'b1 && D===1'b0)
      // seq arc RD --> QN
      (RD => QN)  = (1.0,1.0);
      
      if(CK===1'b1 && D===1'b1)
      // seq arc RD --> QN
      (RD => QN)  = (1.0,1.0);
      
      ifnone
      // seq arc RD --> QN
      (RD => QN)  = (1.0,1.0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_RD === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_RD === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_RD === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_RD === 1'b1)
      ,1.0,0);
      
      // hold D-HL CK-LH
      $hold(posedge CK &&& (ENABLE_RD === 1'b1),
      negedge D &&& (ENABLE_RD === 1'b1),1.0);
      
      // hold D-LH CK-LH
      $hold(posedge CK &&& (ENABLE_RD === 1'b1),
      posedge D &&& (ENABLE_RD === 1'b1),1.0);
      
      // setup D-HL CK-LH
      $setup(negedge D &&& (ENABLE_RD === 1'b1),
      posedge CK &&& (ENABLE_RD === 1'b1),1.0);
      
      // setup D-LH CK-LH
      $setup(posedge D &&& (ENABLE_RD === 1'b1),
      posedge CK &&& (ENABLE_RD === 1'b1),1.0);
      
      // recovery RD-LH CK-LH
      $recovery(posedge RD &&& (ENABLE_D === 1'b1),
      posedge CK &&& (ENABLE_D === 1'b1),1.0);
      
      // removal RD-LH CK-LH
      $removal(posedge RD &&& (ENABLE_D === 1'b1),
      posedge CK &&& (ENABLE_D === 1'b1),1.0);
      
      $width(negedge RD &&& (ENABLE_NOT_CK_AND_NOT_D === 1'b1)
      ,1.0,0);
      
      $width(negedge RD &&& (ENABLE_NOT_CK_AND_D === 1'b1)
      ,1.0,0);
      
      $width(negedge RD &&& (ENABLE_CK_AND_NOT_D === 1'b1)
      ,1.0,0);
      
      $width(negedge RD &&& (ENABLE_CK_AND_D === 1'b1)
      ,1.0,0);
      
      // mpw CK_lh 
      $width(posedge CK,1.0,0);
      
      // mpw CK_hl 
      $width(negedge CK,1.0,0);
      
      // mpw RD_hl 
      $width(negedge RD,1.0,0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_FDPSBQ_0P5( Q, CK, D, SD );
input CK, D, SD;
output Q;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_FDPSBQ_0P5_func SAEDRVT14_FDPSBQ_0P5_behav_inst(.Q(Q),.CK(CK),.D(D),.SD(SD));
`else
   SAEDRVT14_FDPSBQ_0P5_func SAEDRVT14_FDPSBQ_0P5_inst(.Q(Q),.CK(CK),.D(D),.SD(SD));
   // spec_gates_begin
   not MGM_G0(MGM_W0,D);
   and MGM_G1(ENABLE_NOT_D_AND_SD,SD,MGM_W0);
   and MGM_G2(ENABLE_D_AND_SD,SD,D);
   buf MGM_G3(ENABLE_SD,SD);
   not MGM_G4(ENABLE_NOT_D,D);
   not MGM_G5(MGM_W1,CK);
   not MGM_G6(MGM_W2,D);
   and MGM_G7(ENABLE_NOT_CK_AND_NOT_D,MGM_W2,MGM_W1);
   not MGM_G8(MGM_W3,CK);
   and MGM_G9(ENABLE_NOT_CK_AND_D,D,MGM_W3);
   not MGM_G10(MGM_W4,D);
   and MGM_G11(ENABLE_CK_AND_NOT_D,MGM_W4,CK);
   and MGM_G12(ENABLE_CK_AND_D,D,CK);
   // spec_gates_end
   // specify_block_begin
   specify

      // seq arc CK --> Q
      (posedge CK => (Q : D))  = (1.0,1.0);
      
      if(CK===1'b0 && D===1'b0)
      // seq arc SD --> Q
      (SD => Q)  = (1.0,1.0);
      
      if(CK===1'b0 && D===1'b1)
      // seq arc SD --> Q
      (SD => Q)  = (1.0,1.0);
      
      if(CK===1'b1 && D===1'b0)
      // seq arc SD --> Q
      (SD => Q)  = (1.0,1.0);
      
      if(CK===1'b1 && D===1'b1)
      // seq arc SD --> Q
      (SD => Q)  = (1.0,1.0);
      
      ifnone
      // seq arc SD --> Q
      (SD => Q)  = (1.0,1.0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_SD === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_SD === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_SD === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_SD === 1'b1)
      ,1.0,0);
      
      // hold D-HL CK-LH
      $hold(posedge CK &&& (ENABLE_SD === 1'b1),
      negedge D &&& (ENABLE_SD === 1'b1),1.0);
      
      // hold D-LH CK-LH
      $hold(posedge CK &&& (ENABLE_SD === 1'b1),
      posedge D &&& (ENABLE_SD === 1'b1),1.0);
      
      // setup D-HL CK-LH
      $setup(negedge D &&& (ENABLE_SD === 1'b1),
      posedge CK &&& (ENABLE_SD === 1'b1),1.0);
      
      // setup D-LH CK-LH
      $setup(posedge D &&& (ENABLE_SD === 1'b1),
      posedge CK &&& (ENABLE_SD === 1'b1),1.0);
      
      // recovery SD-LH CK-LH
      $recovery(posedge SD &&& (ENABLE_NOT_D === 1'b1),
      posedge CK &&& (ENABLE_NOT_D === 1'b1),1.0);
      
      // removal SD-LH CK-LH
      $removal(posedge SD &&& (ENABLE_NOT_D === 1'b1),
      posedge CK &&& (ENABLE_NOT_D === 1'b1),1.0);
      
      $width(negedge SD &&& (ENABLE_NOT_CK_AND_NOT_D === 1'b1)
      ,1.0,0);
      
      $width(negedge SD &&& (ENABLE_NOT_CK_AND_D === 1'b1)
      ,1.0,0);
      
      $width(negedge SD &&& (ENABLE_CK_AND_NOT_D === 1'b1)
      ,1.0,0);
      
      $width(negedge SD &&& (ENABLE_CK_AND_D === 1'b1)
      ,1.0,0);
      
      // mpw CK_lh 
      $width(posedge CK,1.0,0);
      
      // mpw CK_hl 
      $width(negedge CK,1.0,0);
      
      // mpw SD_hl 
      $width(negedge SD,1.0,0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_FDPSBQ_1( Q, CK, D, SD );
input CK, D, SD;
output Q;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_FDPSBQ_1_func SAEDRVT14_FDPSBQ_1_behav_inst(.Q(Q),.CK(CK),.D(D),.SD(SD));
`else
   SAEDRVT14_FDPSBQ_1_func SAEDRVT14_FDPSBQ_1_inst(.Q(Q),.CK(CK),.D(D),.SD(SD));
   // spec_gates_begin
   not MGM_G0(MGM_W0,D);
   and MGM_G1(ENABLE_NOT_D_AND_SD,SD,MGM_W0);
   and MGM_G2(ENABLE_D_AND_SD,SD,D);
   buf MGM_G3(ENABLE_SD,SD);
   not MGM_G4(ENABLE_NOT_D,D);
   not MGM_G5(MGM_W1,CK);
   not MGM_G6(MGM_W2,D);
   and MGM_G7(ENABLE_NOT_CK_AND_NOT_D,MGM_W2,MGM_W1);
   not MGM_G8(MGM_W3,CK);
   and MGM_G9(ENABLE_NOT_CK_AND_D,D,MGM_W3);
   not MGM_G10(MGM_W4,D);
   and MGM_G11(ENABLE_CK_AND_NOT_D,MGM_W4,CK);
   and MGM_G12(ENABLE_CK_AND_D,D,CK);
   // spec_gates_end
   // specify_block_begin
   specify

      // seq arc CK --> Q
      (posedge CK => (Q : D))  = (1.0,1.0);
      
      if(CK===1'b0 && D===1'b0)
      // seq arc SD --> Q
      (SD => Q)  = (1.0,1.0);
      
      if(CK===1'b0 && D===1'b1)
      // seq arc SD --> Q
      (SD => Q)  = (1.0,1.0);
      
      if(CK===1'b1 && D===1'b0)
      // seq arc SD --> Q
      (SD => Q)  = (1.0,1.0);
      
      if(CK===1'b1 && D===1'b1)
      // seq arc SD --> Q
      (SD => Q)  = (1.0,1.0);
      
      ifnone
      // seq arc SD --> Q
      (SD => Q)  = (1.0,1.0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_SD === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_SD === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_SD === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_SD === 1'b1)
      ,1.0,0);
      
      // hold D-HL CK-LH
      $hold(posedge CK &&& (ENABLE_SD === 1'b1),
      negedge D &&& (ENABLE_SD === 1'b1),1.0);
      
      // hold D-LH CK-LH
      $hold(posedge CK &&& (ENABLE_SD === 1'b1),
      posedge D &&& (ENABLE_SD === 1'b1),1.0);
      
      // setup D-HL CK-LH
      $setup(negedge D &&& (ENABLE_SD === 1'b1),
      posedge CK &&& (ENABLE_SD === 1'b1),1.0);
      
      // setup D-LH CK-LH
      $setup(posedge D &&& (ENABLE_SD === 1'b1),
      posedge CK &&& (ENABLE_SD === 1'b1),1.0);
      
      // recovery SD-LH CK-LH
      $recovery(posedge SD &&& (ENABLE_NOT_D === 1'b1),
      posedge CK &&& (ENABLE_NOT_D === 1'b1),1.0);
      
      // removal SD-LH CK-LH
      $removal(posedge SD &&& (ENABLE_NOT_D === 1'b1),
      posedge CK &&& (ENABLE_NOT_D === 1'b1),1.0);
      
      $width(negedge SD &&& (ENABLE_NOT_CK_AND_NOT_D === 1'b1)
      ,1.0,0);
      
      $width(negedge SD &&& (ENABLE_NOT_CK_AND_D === 1'b1)
      ,1.0,0);
      
      $width(negedge SD &&& (ENABLE_CK_AND_NOT_D === 1'b1)
      ,1.0,0);
      
      $width(negedge SD &&& (ENABLE_CK_AND_D === 1'b1)
      ,1.0,0);
      
      // mpw CK_lh 
      $width(posedge CK,1.0,0);
      
      // mpw CK_hl 
      $width(negedge CK,1.0,0);
      
      // mpw SD_hl 
      $width(negedge SD,1.0,0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_FDPSBQ_2( Q, CK, D, SD );
input CK, D, SD;
output Q;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_FDPSBQ_2_func SAEDRVT14_FDPSBQ_2_behav_inst(.Q(Q),.CK(CK),.D(D),.SD(SD));
`else
   SAEDRVT14_FDPSBQ_2_func SAEDRVT14_FDPSBQ_2_inst(.Q(Q),.CK(CK),.D(D),.SD(SD));
   // spec_gates_begin
   not MGM_G0(MGM_W0,D);
   and MGM_G1(ENABLE_NOT_D_AND_SD,SD,MGM_W0);
   and MGM_G2(ENABLE_D_AND_SD,SD,D);
   buf MGM_G3(ENABLE_SD,SD);
   not MGM_G4(ENABLE_NOT_D,D);
   not MGM_G5(MGM_W1,CK);
   not MGM_G6(MGM_W2,D);
   and MGM_G7(ENABLE_NOT_CK_AND_NOT_D,MGM_W2,MGM_W1);
   not MGM_G8(MGM_W3,CK);
   and MGM_G9(ENABLE_NOT_CK_AND_D,D,MGM_W3);
   not MGM_G10(MGM_W4,D);
   and MGM_G11(ENABLE_CK_AND_NOT_D,MGM_W4,CK);
   and MGM_G12(ENABLE_CK_AND_D,D,CK);
   // spec_gates_end
   // specify_block_begin
   specify

      // seq arc CK --> Q
      (posedge CK => (Q : D))  = (1.0,1.0);
      
      if(CK===1'b0 && D===1'b0)
      // seq arc SD --> Q
      (SD => Q)  = (1.0,1.0);
      
      if(CK===1'b0 && D===1'b1)
      // seq arc SD --> Q
      (SD => Q)  = (1.0,1.0);
      
      if(CK===1'b1 && D===1'b0)
      // seq arc SD --> Q
      (SD => Q)  = (1.0,1.0);
      
      if(CK===1'b1 && D===1'b1)
      // seq arc SD --> Q
      (SD => Q)  = (1.0,1.0);
      
      ifnone
      // seq arc SD --> Q
      (SD => Q)  = (1.0,1.0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_SD === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_SD === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_SD === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_SD === 1'b1)
      ,1.0,0);
      
      // hold D-HL CK-LH
      $hold(posedge CK &&& (ENABLE_SD === 1'b1),
      negedge D &&& (ENABLE_SD === 1'b1),1.0);
      
      // hold D-LH CK-LH
      $hold(posedge CK &&& (ENABLE_SD === 1'b1),
      posedge D &&& (ENABLE_SD === 1'b1),1.0);
      
      // setup D-HL CK-LH
      $setup(negedge D &&& (ENABLE_SD === 1'b1),
      posedge CK &&& (ENABLE_SD === 1'b1),1.0);
      
      // setup D-LH CK-LH
      $setup(posedge D &&& (ENABLE_SD === 1'b1),
      posedge CK &&& (ENABLE_SD === 1'b1),1.0);
      
      // recovery SD-LH CK-LH
      $recovery(posedge SD &&& (ENABLE_NOT_D === 1'b1),
      posedge CK &&& (ENABLE_NOT_D === 1'b1),1.0);
      
      // removal SD-LH CK-LH
      $removal(posedge SD &&& (ENABLE_NOT_D === 1'b1),
      posedge CK &&& (ENABLE_NOT_D === 1'b1),1.0);
      
      $width(negedge SD &&& (ENABLE_NOT_CK_AND_NOT_D === 1'b1)
      ,1.0,0);
      
      $width(negedge SD &&& (ENABLE_NOT_CK_AND_D === 1'b1)
      ,1.0,0);
      
      $width(negedge SD &&& (ENABLE_CK_AND_NOT_D === 1'b1)
      ,1.0,0);
      
      $width(negedge SD &&& (ENABLE_CK_AND_D === 1'b1)
      ,1.0,0);
      
      // mpw CK_lh 
      $width(posedge CK,1.0,0);
      
      // mpw CK_hl 
      $width(negedge CK,1.0,0);
      
      // mpw SD_hl 
      $width(negedge SD,1.0,0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_FDPSBQ_4( Q, CK, D, SD );
input CK, D, SD;
output Q;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_FDPSBQ_4_func SAEDRVT14_FDPSBQ_4_behav_inst(.Q(Q),.CK(CK),.D(D),.SD(SD));
`else
   SAEDRVT14_FDPSBQ_4_func SAEDRVT14_FDPSBQ_4_inst(.Q(Q),.CK(CK),.D(D),.SD(SD));
   // spec_gates_begin
   not MGM_G0(MGM_W0,D);
   and MGM_G1(ENABLE_NOT_D_AND_SD,SD,MGM_W0);
   and MGM_G2(ENABLE_D_AND_SD,SD,D);
   buf MGM_G3(ENABLE_SD,SD);
   not MGM_G4(ENABLE_NOT_D,D);
   not MGM_G5(MGM_W1,CK);
   not MGM_G6(MGM_W2,D);
   and MGM_G7(ENABLE_NOT_CK_AND_NOT_D,MGM_W2,MGM_W1);
   not MGM_G8(MGM_W3,CK);
   and MGM_G9(ENABLE_NOT_CK_AND_D,D,MGM_W3);
   not MGM_G10(MGM_W4,D);
   and MGM_G11(ENABLE_CK_AND_NOT_D,MGM_W4,CK);
   and MGM_G12(ENABLE_CK_AND_D,D,CK);
   // spec_gates_end
   // specify_block_begin
   specify

      // seq arc CK --> Q
      (posedge CK => (Q : D))  = (1.0,1.0);
      
      if(CK===1'b0 && D===1'b0)
      // seq arc SD --> Q
      (SD => Q)  = (1.0,1.0);
      
      if(CK===1'b0 && D===1'b1)
      // seq arc SD --> Q
      (SD => Q)  = (1.0,1.0);
      
      if(CK===1'b1 && D===1'b0)
      // seq arc SD --> Q
      (SD => Q)  = (1.0,1.0);
      
      if(CK===1'b1 && D===1'b1)
      // seq arc SD --> Q
      (SD => Q)  = (1.0,1.0);
      
      ifnone
      // seq arc SD --> Q
      (SD => Q)  = (1.0,1.0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_SD === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_SD === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_SD === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_SD === 1'b1)
      ,1.0,0);
      
      // hold D-HL CK-LH
      $hold(posedge CK &&& (ENABLE_SD === 1'b1),
      negedge D &&& (ENABLE_SD === 1'b1),1.0);
      
      // hold D-LH CK-LH
      $hold(posedge CK &&& (ENABLE_SD === 1'b1),
      posedge D &&& (ENABLE_SD === 1'b1),1.0);
      
      // setup D-HL CK-LH
      $setup(negedge D &&& (ENABLE_SD === 1'b1),
      posedge CK &&& (ENABLE_SD === 1'b1),1.0);
      
      // setup D-LH CK-LH
      $setup(posedge D &&& (ENABLE_SD === 1'b1),
      posedge CK &&& (ENABLE_SD === 1'b1),1.0);
      
      // recovery SD-LH CK-LH
      $recovery(posedge SD &&& (ENABLE_NOT_D === 1'b1),
      posedge CK &&& (ENABLE_NOT_D === 1'b1),1.0);
      
      // removal SD-LH CK-LH
      $removal(posedge SD &&& (ENABLE_NOT_D === 1'b1),
      posedge CK &&& (ENABLE_NOT_D === 1'b1),1.0);
      
      $width(negedge SD &&& (ENABLE_NOT_CK_AND_NOT_D === 1'b1)
      ,1.0,0);
      
      $width(negedge SD &&& (ENABLE_NOT_CK_AND_D === 1'b1)
      ,1.0,0);
      
      $width(negedge SD &&& (ENABLE_CK_AND_NOT_D === 1'b1)
      ,1.0,0);
      
      $width(negedge SD &&& (ENABLE_CK_AND_D === 1'b1)
      ,1.0,0);
      
      // mpw CK_lh 
      $width(posedge CK,1.0,0);
      
      // mpw CK_hl 
      $width(negedge CK,1.0,0);
      
      // mpw SD_hl 
      $width(negedge SD,1.0,0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_FDPSQB_2( QN, CK, D, SD );
input CK, D, SD;
output QN;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_FDPSQB_2_func SAEDRVT14_FDPSQB_2_behav_inst(.QN(QN),.CK(CK),.D(D),.SD(SD));
`else
   SAEDRVT14_FDPSQB_2_func SAEDRVT14_FDPSQB_2_inst(.QN(QN),.CK(CK),.D(D),.SD(SD));
   // spec_gates_begin
   not MGM_G0(MGM_W0,D);
   not MGM_G1(MGM_W1,SD);
   and MGM_G2(ENABLE_NOT_D_AND_NOT_SD,MGM_W1,MGM_W0);
   not MGM_G3(MGM_W2,SD);
   and MGM_G4(ENABLE_D_AND_NOT_SD,MGM_W2,D);
   not MGM_G5(ENABLE_NOT_SD,SD);
   not MGM_G6(ENABLE_NOT_D,D);
   not MGM_G7(MGM_W3,CK);
   not MGM_G8(MGM_W4,D);
   and MGM_G9(ENABLE_NOT_CK_AND_NOT_D,MGM_W4,MGM_W3);
   not MGM_G10(MGM_W5,CK);
   and MGM_G11(ENABLE_NOT_CK_AND_D,D,MGM_W5);
   not MGM_G12(MGM_W6,D);
   and MGM_G13(ENABLE_CK_AND_NOT_D,MGM_W6,CK);
   and MGM_G14(ENABLE_CK_AND_D,D,CK);
   // spec_gates_end
   // specify_block_begin
   specify

      // seq arc CK --> QN
      (posedge CK => (QN : D))  = (1.0,1.0);
      
      if(CK===1'b0 && D===1'b0)
      // seq arc SD --> QN
      (SD => QN)  = (1.0,1.0);
      
      if(CK===1'b0 && D===1'b1)
      // seq arc SD --> QN
      (SD => QN)  = (1.0,1.0);
      
      if(CK===1'b1 && D===1'b0)
      // seq arc SD --> QN
      (SD => QN)  = (1.0,1.0);
      
      if(CK===1'b1 && D===1'b1)
      // seq arc SD --> QN
      (SD => QN)  = (1.0,1.0);
      
      ifnone
      // seq arc SD --> QN
      (SD => QN)  = (1.0,1.0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_NOT_SD === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_NOT_SD === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_NOT_SD === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_NOT_SD === 1'b1)
      ,1.0,0);
      
      // hold D-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_SD === 1'b1),
      negedge D &&& (ENABLE_NOT_SD === 1'b1),1.0);
      
      // hold D-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_SD === 1'b1),
      posedge D &&& (ENABLE_NOT_SD === 1'b1),1.0);
      
      // setup D-HL CK-LH
      $setup(negedge D &&& (ENABLE_NOT_SD === 1'b1),
      posedge CK &&& (ENABLE_NOT_SD === 1'b1),1.0);
      
      // setup D-LH CK-LH
      $setup(posedge D &&& (ENABLE_NOT_SD === 1'b1),
      posedge CK &&& (ENABLE_NOT_SD === 1'b1),1.0);
      
      // recovery SD-HL CK-LH
      $recovery(negedge SD &&& (ENABLE_NOT_D === 1'b1),
      posedge CK &&& (ENABLE_NOT_D === 1'b1),1.0);
      
      // removal SD-HL CK-LH
      $removal(negedge SD &&& (ENABLE_NOT_D === 1'b1),
      posedge CK &&& (ENABLE_NOT_D === 1'b1),1.0);
      
      $width(posedge SD &&& (ENABLE_NOT_CK_AND_NOT_D === 1'b1)
      ,1.0,0);
      
      $width(posedge SD &&& (ENABLE_NOT_CK_AND_D === 1'b1)
      ,1.0,0);
      
      $width(posedge SD &&& (ENABLE_CK_AND_NOT_D === 1'b1)
      ,1.0,0);
      
      $width(posedge SD &&& (ENABLE_CK_AND_D === 1'b1)
      ,1.0,0);
      
      // mpw CK_lh 
      $width(posedge CK,1.0,0);
      
      // mpw CK_hl 
      $width(negedge CK,1.0,0);
      
      // mpw SD_lh 
      $width(posedge SD,1.0,0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_FDPSYNSBQ_V2_0P5( Q, CK, D, SD );
input CK, D, SD;
output Q;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_FDPSYNSBQ_V2_0P5_func SAEDRVT14_FDPSYNSBQ_V2_0P5_behav_inst(.Q(Q),.CK(CK),.D(D),.SD(SD));
`else
   SAEDRVT14_FDPSYNSBQ_V2_0P5_func SAEDRVT14_FDPSYNSBQ_V2_0P5_inst(.Q(Q),.CK(CK),.D(D),.SD(SD));
   // spec_gates_begin
   not MGM_G0(MGM_W0,D);
   not MGM_G1(MGM_W1,SD);
   and MGM_G2(ENABLE_NOT_D_AND_NOT_SD,MGM_W1,MGM_W0);
   not MGM_G3(MGM_W2,D);
   and MGM_G4(ENABLE_NOT_D_AND_SD,SD,MGM_W2);
   not MGM_G5(MGM_W3,SD);
   and MGM_G6(ENABLE_D_AND_NOT_SD,MGM_W3,D);
   and MGM_G7(ENABLE_D_AND_SD,SD,D);
   buf MGM_G8(ENABLE_SD,SD);
   not MGM_G9(ENABLE_NOT_D,D);
   // spec_gates_end
   // specify_block_begin
   specify

      if(D===1'b1 && SD===1'b0)
      // seq arc CK --> Q
      (posedge CK => (Q : D))  = (1.0,1.0);
      
      if(D===1'b1 && SD===1'b1)
      // seq arc CK --> Q
      (posedge CK => (Q : D))  = (1.0,1.0);
      
      if(D===1'b0)
      // seq arc CK --> Q
      (posedge CK => (Q : SD))  = (1.0,1.0);
      
      ifnone
      // seq arc CK --> Q
      (posedge CK => (Q : D))  = (1.0,1.0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_NOT_SD === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_NOT_SD === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_SD === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_SD === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_NOT_SD === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_NOT_SD === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_SD === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_SD === 1'b1)
      ,1.0,0);
      
      // hold D-HL CK-LH
      $hold(posedge CK &&& (ENABLE_SD === 1'b1),
      negedge D &&& (ENABLE_SD === 1'b1),1.0);
      
      // hold D-LH CK-LH
      $hold(posedge CK &&& (ENABLE_SD === 1'b1),
      posedge D &&& (ENABLE_SD === 1'b1),1.0);
      
      // setup D-HL CK-LH
      $setup(negedge D &&& (ENABLE_SD === 1'b1),
      posedge CK &&& (ENABLE_SD === 1'b1),1.0);
      
      // setup D-LH CK-LH
      $setup(posedge D &&& (ENABLE_SD === 1'b1),
      posedge CK &&& (ENABLE_SD === 1'b1),1.0);
      
      // hold SD-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D === 1'b1),
      negedge SD &&& (ENABLE_NOT_D === 1'b1),1.0);
      
      // hold SD-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D === 1'b1),
      posedge SD &&& (ENABLE_NOT_D === 1'b1),1.0);
      
      // setup SD-HL CK-LH
      $setup(negedge SD &&& (ENABLE_NOT_D === 1'b1),
      posedge CK &&& (ENABLE_NOT_D === 1'b1),1.0);
      
      // setup SD-LH CK-LH
      $setup(posedge SD &&& (ENABLE_NOT_D === 1'b1),
      posedge CK &&& (ENABLE_NOT_D === 1'b1),1.0);
      
      // mpw CK_lh 
      $width(posedge CK,1.0,0);
      
      // mpw CK_hl 
      $width(negedge CK,1.0,0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_FDPSYNSBQ_V2_1( Q, CK, D, SD );
input CK, D, SD;
output Q;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_FDPSYNSBQ_V2_1_func SAEDRVT14_FDPSYNSBQ_V2_1_behav_inst(.Q(Q),.CK(CK),.D(D),.SD(SD));
`else
   SAEDRVT14_FDPSYNSBQ_V2_1_func SAEDRVT14_FDPSYNSBQ_V2_1_inst(.Q(Q),.CK(CK),.D(D),.SD(SD));
   // spec_gates_begin
   not MGM_G0(MGM_W0,D);
   not MGM_G1(MGM_W1,SD);
   and MGM_G2(ENABLE_NOT_D_AND_NOT_SD,MGM_W1,MGM_W0);
   not MGM_G3(MGM_W2,D);
   and MGM_G4(ENABLE_NOT_D_AND_SD,SD,MGM_W2);
   not MGM_G5(MGM_W3,SD);
   and MGM_G6(ENABLE_D_AND_NOT_SD,MGM_W3,D);
   and MGM_G7(ENABLE_D_AND_SD,SD,D);
   buf MGM_G8(ENABLE_SD,SD);
   not MGM_G9(ENABLE_NOT_D,D);
   // spec_gates_end
   // specify_block_begin
   specify

      if(D===1'b1 && SD===1'b0)
      // seq arc CK --> Q
      (posedge CK => (Q : D))  = (1.0,1.0);
      
      if(D===1'b1 && SD===1'b1)
      // seq arc CK --> Q
      (posedge CK => (Q : D))  = (1.0,1.0);
      
      if(D===1'b0)
      // seq arc CK --> Q
      (posedge CK => (Q : SD))  = (1.0,1.0);
      
      ifnone
      // seq arc CK --> Q
      (posedge CK => (Q : D))  = (1.0,1.0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_NOT_SD === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_NOT_SD === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_SD === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_SD === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_NOT_SD === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_NOT_SD === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_SD === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_SD === 1'b1)
      ,1.0,0);
      
      // hold D-HL CK-LH
      $hold(posedge CK &&& (ENABLE_SD === 1'b1),
      negedge D &&& (ENABLE_SD === 1'b1),1.0);
      
      // hold D-LH CK-LH
      $hold(posedge CK &&& (ENABLE_SD === 1'b1),
      posedge D &&& (ENABLE_SD === 1'b1),1.0);
      
      // setup D-HL CK-LH
      $setup(negedge D &&& (ENABLE_SD === 1'b1),
      posedge CK &&& (ENABLE_SD === 1'b1),1.0);
      
      // setup D-LH CK-LH
      $setup(posedge D &&& (ENABLE_SD === 1'b1),
      posedge CK &&& (ENABLE_SD === 1'b1),1.0);
      
      // hold SD-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D === 1'b1),
      negedge SD &&& (ENABLE_NOT_D === 1'b1),1.0);
      
      // hold SD-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D === 1'b1),
      posedge SD &&& (ENABLE_NOT_D === 1'b1),1.0);
      
      // setup SD-HL CK-LH
      $setup(negedge SD &&& (ENABLE_NOT_D === 1'b1),
      posedge CK &&& (ENABLE_NOT_D === 1'b1),1.0);
      
      // setup SD-LH CK-LH
      $setup(posedge SD &&& (ENABLE_NOT_D === 1'b1),
      posedge CK &&& (ENABLE_NOT_D === 1'b1),1.0);
      
      // mpw CK_lh 
      $width(posedge CK,1.0,0);
      
      // mpw CK_hl 
      $width(negedge CK,1.0,0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_FDPSYNSBQ_V2_2( Q, CK, D, SD );
input CK, D, SD;
output Q;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_FDPSYNSBQ_V2_2_func SAEDRVT14_FDPSYNSBQ_V2_2_behav_inst(.Q(Q),.CK(CK),.D(D),.SD(SD));
`else
   SAEDRVT14_FDPSYNSBQ_V2_2_func SAEDRVT14_FDPSYNSBQ_V2_2_inst(.Q(Q),.CK(CK),.D(D),.SD(SD));
   // spec_gates_begin
   not MGM_G0(MGM_W0,D);
   not MGM_G1(MGM_W1,SD);
   and MGM_G2(ENABLE_NOT_D_AND_NOT_SD,MGM_W1,MGM_W0);
   not MGM_G3(MGM_W2,D);
   and MGM_G4(ENABLE_NOT_D_AND_SD,SD,MGM_W2);
   not MGM_G5(MGM_W3,SD);
   and MGM_G6(ENABLE_D_AND_NOT_SD,MGM_W3,D);
   and MGM_G7(ENABLE_D_AND_SD,SD,D);
   buf MGM_G8(ENABLE_SD,SD);
   not MGM_G9(ENABLE_NOT_D,D);
   // spec_gates_end
   // specify_block_begin
   specify

      if(D===1'b1 && SD===1'b0)
      // seq arc CK --> Q
      (posedge CK => (Q : D))  = (1.0,1.0);
      
      if(D===1'b1 && SD===1'b1)
      // seq arc CK --> Q
      (posedge CK => (Q : D))  = (1.0,1.0);
      
      if(D===1'b0)
      // seq arc CK --> Q
      (posedge CK => (Q : SD))  = (1.0,1.0);
      
      ifnone
      // seq arc CK --> Q
      (posedge CK => (Q : D))  = (1.0,1.0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_NOT_SD === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_NOT_SD === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_SD === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_SD === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_NOT_SD === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_NOT_SD === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_SD === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_SD === 1'b1)
      ,1.0,0);
      
      // hold D-HL CK-LH
      $hold(posedge CK &&& (ENABLE_SD === 1'b1),
      negedge D &&& (ENABLE_SD === 1'b1),1.0);
      
      // hold D-LH CK-LH
      $hold(posedge CK &&& (ENABLE_SD === 1'b1),
      posedge D &&& (ENABLE_SD === 1'b1),1.0);
      
      // setup D-HL CK-LH
      $setup(negedge D &&& (ENABLE_SD === 1'b1),
      posedge CK &&& (ENABLE_SD === 1'b1),1.0);
      
      // setup D-LH CK-LH
      $setup(posedge D &&& (ENABLE_SD === 1'b1),
      posedge CK &&& (ENABLE_SD === 1'b1),1.0);
      
      // hold SD-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D === 1'b1),
      negedge SD &&& (ENABLE_NOT_D === 1'b1),1.0);
      
      // hold SD-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D === 1'b1),
      posedge SD &&& (ENABLE_NOT_D === 1'b1),1.0);
      
      // setup SD-HL CK-LH
      $setup(negedge SD &&& (ENABLE_NOT_D === 1'b1),
      posedge CK &&& (ENABLE_NOT_D === 1'b1),1.0);
      
      // setup SD-LH CK-LH
      $setup(posedge SD &&& (ENABLE_NOT_D === 1'b1),
      posedge CK &&& (ENABLE_NOT_D === 1'b1),1.0);
      
      // mpw CK_lh 
      $width(posedge CK,1.0,0);
      
      // mpw CK_hl 
      $width(negedge CK,1.0,0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_FDPSYNSBQ_V2_4( Q, CK, D, SD );
input CK, D, SD;
output Q;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_FDPSYNSBQ_V2_4_func SAEDRVT14_FDPSYNSBQ_V2_4_behav_inst(.Q(Q),.CK(CK),.D(D),.SD(SD));
`else
   SAEDRVT14_FDPSYNSBQ_V2_4_func SAEDRVT14_FDPSYNSBQ_V2_4_inst(.Q(Q),.CK(CK),.D(D),.SD(SD));
   // spec_gates_begin
   not MGM_G0(MGM_W0,D);
   not MGM_G1(MGM_W1,SD);
   and MGM_G2(ENABLE_NOT_D_AND_NOT_SD,MGM_W1,MGM_W0);
   not MGM_G3(MGM_W2,D);
   and MGM_G4(ENABLE_NOT_D_AND_SD,SD,MGM_W2);
   not MGM_G5(MGM_W3,SD);
   and MGM_G6(ENABLE_D_AND_NOT_SD,MGM_W3,D);
   and MGM_G7(ENABLE_D_AND_SD,SD,D);
   buf MGM_G8(ENABLE_SD,SD);
   not MGM_G9(ENABLE_NOT_D,D);
   // spec_gates_end
   // specify_block_begin
   specify

      if(D===1'b1 && SD===1'b0)
      // seq arc CK --> Q
      (posedge CK => (Q : D))  = (1.0,1.0);
      
      if(D===1'b1 && SD===1'b1)
      // seq arc CK --> Q
      (posedge CK => (Q : D))  = (1.0,1.0);
      
      if(D===1'b0)
      // seq arc CK --> Q
      (posedge CK => (Q : SD))  = (1.0,1.0);
      
      ifnone
      // seq arc CK --> Q
      (posedge CK => (Q : D))  = (1.0,1.0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_NOT_SD === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_NOT_SD === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_SD === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_SD === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_NOT_SD === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_NOT_SD === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_SD === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_SD === 1'b1)
      ,1.0,0);
      
      // hold D-HL CK-LH
      $hold(posedge CK &&& (ENABLE_SD === 1'b1),
      negedge D &&& (ENABLE_SD === 1'b1),1.0);
      
      // hold D-LH CK-LH
      $hold(posedge CK &&& (ENABLE_SD === 1'b1),
      posedge D &&& (ENABLE_SD === 1'b1),1.0);
      
      // setup D-HL CK-LH
      $setup(negedge D &&& (ENABLE_SD === 1'b1),
      posedge CK &&& (ENABLE_SD === 1'b1),1.0);
      
      // setup D-LH CK-LH
      $setup(posedge D &&& (ENABLE_SD === 1'b1),
      posedge CK &&& (ENABLE_SD === 1'b1),1.0);
      
      // hold SD-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D === 1'b1),
      negedge SD &&& (ENABLE_NOT_D === 1'b1),1.0);
      
      // hold SD-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D === 1'b1),
      posedge SD &&& (ENABLE_NOT_D === 1'b1),1.0);
      
      // setup SD-HL CK-LH
      $setup(negedge SD &&& (ENABLE_NOT_D === 1'b1),
      posedge CK &&& (ENABLE_NOT_D === 1'b1),1.0);
      
      // setup SD-LH CK-LH
      $setup(posedge SD &&& (ENABLE_NOT_D === 1'b1),
      posedge CK &&& (ENABLE_NOT_D === 1'b1),1.0);
      
      // mpw CK_lh 
      $width(posedge CK,1.0,0);
      
      // mpw CK_hl 
      $width(negedge CK,1.0,0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_FDPS_V3_2( Q, QN, CK, D, S );
input CK, D, S;
output Q, QN;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_FDPS_V3_2_func SAEDRVT14_FDPS_V3_2_behav_inst(.Q(Q),.QN(QN),.CK(CK),.D(D),.S(S));
`else
   SAEDRVT14_FDPS_V3_2_func SAEDRVT14_FDPS_V3_2_inst(.Q(Q),.QN(QN),.CK(CK),.D(D),.S(S));
   // spec_gates_begin
   not MGM_G0(MGM_W0,D);
   not MGM_G1(MGM_W1,S);
   and MGM_G2(ENABLE_NOT_D_AND_NOT_S,MGM_W1,MGM_W0);
   not MGM_G3(MGM_W2,S);
   and MGM_G4(ENABLE_D_AND_NOT_S,MGM_W2,D);
   not MGM_G5(ENABLE_NOT_S,S);
   not MGM_G6(ENABLE_NOT_D,D);
   not MGM_G7(MGM_W3,CK);
   not MGM_G8(MGM_W4,D);
   and MGM_G9(ENABLE_NOT_CK_AND_NOT_D,MGM_W4,MGM_W3);
   not MGM_G10(MGM_W5,CK);
   and MGM_G11(ENABLE_NOT_CK_AND_D,D,MGM_W5);
   not MGM_G12(MGM_W6,D);
   and MGM_G13(ENABLE_CK_AND_NOT_D,MGM_W6,CK);
   and MGM_G14(ENABLE_CK_AND_D,D,CK);
   // spec_gates_end
   // specify_block_begin
   specify

      // seq arc CK --> Q
      (posedge CK => (Q : D))  = (1.0,1.0);
      
      if(CK===1'b0 && D===1'b0)
      // seq arc S --> Q
      (S => Q)  = (1.0,1.0);
      
      if(CK===1'b0 && D===1'b1)
      // seq arc S --> Q
      (S => Q)  = (1.0,1.0);
      
      if(CK===1'b1 && D===1'b0)
      // seq arc S --> Q
      (S => Q)  = (1.0,1.0);
      
      if(CK===1'b1 && D===1'b1)
      // seq arc S --> Q
      (S => Q)  = (1.0,1.0);
      
      ifnone
      // seq arc S --> Q
      (S => Q)  = (1.0,1.0);
      
      // seq arc CK --> QN
      (posedge CK => (QN : D))  = (1.0,1.0);
      
      if(CK===1'b0 && D===1'b0)
      // seq arc S --> QN
      (S => QN)  = (1.0,1.0);
      
      if(CK===1'b0 && D===1'b1)
      // seq arc S --> QN
      (S => QN)  = (1.0,1.0);
      
      if(CK===1'b1 && D===1'b0)
      // seq arc S --> QN
      (S => QN)  = (1.0,1.0);
      
      if(CK===1'b1 && D===1'b1)
      // seq arc S --> QN
      (S => QN)  = (1.0,1.0);
      
      ifnone
      // seq arc S --> QN
      (S => QN)  = (1.0,1.0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_NOT_S === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_NOT_S === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_NOT_S === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_NOT_S === 1'b1)
      ,1.0,0);
      
      // hold D-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_S === 1'b1),
      negedge D &&& (ENABLE_NOT_S === 1'b1),1.0);
      
      // hold D-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_S === 1'b1),
      posedge D &&& (ENABLE_NOT_S === 1'b1),1.0);
      
      // setup D-HL CK-LH
      $setup(negedge D &&& (ENABLE_NOT_S === 1'b1),
      posedge CK &&& (ENABLE_NOT_S === 1'b1),1.0);
      
      // setup D-LH CK-LH
      $setup(posedge D &&& (ENABLE_NOT_S === 1'b1),
      posedge CK &&& (ENABLE_NOT_S === 1'b1),1.0);
      
      // recovery S-HL CK-LH
      $recovery(negedge S &&& (ENABLE_NOT_D === 1'b1),
      posedge CK &&& (ENABLE_NOT_D === 1'b1),1.0);
      
      // removal S-HL CK-LH
      $removal(negedge S &&& (ENABLE_NOT_D === 1'b1),
      posedge CK &&& (ENABLE_NOT_D === 1'b1),1.0);
      
      $width(posedge S &&& (ENABLE_NOT_CK_AND_NOT_D === 1'b1)
      ,1.0,0);
      
      $width(posedge S &&& (ENABLE_NOT_CK_AND_D === 1'b1)
      ,1.0,0);
      
      $width(posedge S &&& (ENABLE_CK_AND_NOT_D === 1'b1)
      ,1.0,0);
      
      $width(posedge S &&& (ENABLE_CK_AND_D === 1'b1)
      ,1.0,0);
      
      // mpw CK_lh 
      $width(posedge CK,1.0,0);
      
      // mpw CK_hl 
      $width(negedge CK,1.0,0);
      
      // mpw S_lh 
      $width(posedge S,1.0,0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_FDP_V2LP_0P5( CK, Q, QN, D );
input CK, D;
output Q, QN;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_FDP_V2LP_0P5_func SAEDRVT14_FDP_V2LP_0P5_behav_inst(.CK(CK),.Q(Q),.QN(QN),.D(D));
`else
   SAEDRVT14_FDP_V2LP_0P5_func SAEDRVT14_FDP_V2LP_0P5_inst(.CK(CK),.Q(Q),.QN(QN),.D(D));
   // spec_gates_begin
   not MGM_G0(ENABLE_NOT_D,D);
   buf MGM_G1(ENABLE_D,D);
   // spec_gates_end
   // specify_block_begin
   specify

      // seq arc CK --> Q
      (posedge CK => (Q : D))  = (1.0,1.0);
      
      // seq arc CK --> QN
      (posedge CK => (QN : D))  = (1.0,1.0);
      
      $width(negedge CK &&& (ENABLE_NOT_D === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D === 1'b1)
      ,1.0,0);
      
      // hold D-HL CK-LH
      $hold(posedge CK,negedge D,1.0);
      
      // hold D-LH CK-LH
      $hold(posedge CK,posedge D,1.0);
      
      // setup D-HL CK-LH
      $setup(negedge D,posedge CK,1.0);
      
      // setup D-LH CK-LH
      $setup(posedge D,posedge CK,1.0);
      
      // mpw CK_lh 
      $width(posedge CK,1.0,0);
      
      // mpw CK_hl 
      $width(negedge CK,1.0,0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_FDP_V2LP_1( CK, Q, D, QN );
input CK, D;
output Q, QN;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_FDP_V2LP_1_func SAEDRVT14_FDP_V2LP_1_behav_inst(.CK(CK),.Q(Q),.D(D),.QN(QN));
`else
   SAEDRVT14_FDP_V2LP_1_func SAEDRVT14_FDP_V2LP_1_inst(.CK(CK),.Q(Q),.D(D),.QN(QN));
   // spec_gates_begin
   not MGM_G0(ENABLE_NOT_D,D);
   buf MGM_G1(ENABLE_D,D);
   // spec_gates_end
   // specify_block_begin
   specify

      // seq arc CK --> Q
      (posedge CK => (Q : D))  = (1.0,1.0);
      
      // seq arc CK --> QN
      (posedge CK => (QN : D))  = (1.0,1.0);
      
      $width(negedge CK &&& (ENABLE_NOT_D === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D === 1'b1)
      ,1.0,0);
      
      // hold D-HL CK-LH
      $hold(posedge CK,negedge D,1.0);
      
      // hold D-LH CK-LH
      $hold(posedge CK,posedge D,1.0);
      
      // setup D-HL CK-LH
      $setup(negedge D,posedge CK,1.0);
      
      // setup D-LH CK-LH
      $setup(posedge D,posedge CK,1.0);
      
      // mpw CK_lh 
      $width(posedge CK,1.0,0);
      
      // mpw CK_hl 
      $width(negedge CK,1.0,0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_FDP_V2LP_2( Q, QN, CK, D );
input CK, D;
output Q, QN;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_FDP_V2LP_2_func SAEDRVT14_FDP_V2LP_2_behav_inst(.Q(Q),.QN(QN),.CK(CK),.D(D));
`else
   SAEDRVT14_FDP_V2LP_2_func SAEDRVT14_FDP_V2LP_2_inst(.Q(Q),.QN(QN),.CK(CK),.D(D));
   // spec_gates_begin
   not MGM_G0(ENABLE_NOT_D,D);
   buf MGM_G1(ENABLE_D,D);
   // spec_gates_end
   // specify_block_begin
   specify

      // seq arc CK --> Q
      (posedge CK => (Q : D))  = (1.0,1.0);
      
      // seq arc CK --> QN
      (posedge CK => (QN : D))  = (1.0,1.0);
      
      $width(negedge CK &&& (ENABLE_NOT_D === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D === 1'b1)
      ,1.0,0);
      
      // hold D-HL CK-LH
      $hold(posedge CK,negedge D,1.0);
      
      // hold D-LH CK-LH
      $hold(posedge CK,posedge D,1.0);
      
      // setup D-HL CK-LH
      $setup(negedge D,posedge CK,1.0);
      
      // setup D-LH CK-LH
      $setup(posedge D,posedge CK,1.0);
      
      // mpw CK_lh 
      $width(posedge CK,1.0,0);
      
      // mpw CK_hl 
      $width(negedge CK,1.0,0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_FDP_V2_0P5( Q, QN, CK, D );
input CK, D;
output Q, QN;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_FDP_V2_0P5_func SAEDRVT14_FDP_V2_0P5_behav_inst(.Q(Q),.QN(QN),.CK(CK),.D(D));
`else
   SAEDRVT14_FDP_V2_0P5_func SAEDRVT14_FDP_V2_0P5_inst(.Q(Q),.QN(QN),.CK(CK),.D(D));
   // spec_gates_begin
   not MGM_G0(ENABLE_NOT_D,D);
   buf MGM_G1(ENABLE_D,D);
   // spec_gates_end
   // specify_block_begin
   specify

      // seq arc CK --> Q
      (posedge CK => (Q : D))  = (1.0,1.0);
      
      // seq arc CK --> QN
      (posedge CK => (QN : D))  = (1.0,1.0);
      
      $width(negedge CK &&& (ENABLE_NOT_D === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D === 1'b1)
      ,1.0,0);
      
      // hold D-HL CK-LH
      $hold(posedge CK,negedge D,1.0);
      
      // hold D-LH CK-LH
      $hold(posedge CK,posedge D,1.0);
      
      // setup D-HL CK-LH
      $setup(negedge D,posedge CK,1.0);
      
      // setup D-LH CK-LH
      $setup(posedge D,posedge CK,1.0);
      
      // mpw CK_lh 
      $width(posedge CK,1.0,0);
      
      // mpw CK_hl 
      $width(negedge CK,1.0,0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_FDP_V2_1( Q, QN, CK, D );
input CK, D;
output Q, QN;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_FDP_V2_1_func SAEDRVT14_FDP_V2_1_behav_inst(.Q(Q),.QN(QN),.CK(CK),.D(D));
`else
   SAEDRVT14_FDP_V2_1_func SAEDRVT14_FDP_V2_1_inst(.Q(Q),.QN(QN),.CK(CK),.D(D));
   // spec_gates_begin
   not MGM_G0(ENABLE_NOT_D,D);
   buf MGM_G1(ENABLE_D,D);
   // spec_gates_end
   // specify_block_begin
   specify

      // seq arc CK --> Q
      (posedge CK => (Q : D))  = (1.0,1.0);
      
      // seq arc CK --> QN
      (posedge CK => (QN : D))  = (1.0,1.0);
      
      $width(negedge CK &&& (ENABLE_NOT_D === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D === 1'b1)
      ,1.0,0);
      
      // hold D-HL CK-LH
      $hold(posedge CK,negedge D,1.0);
      
      // hold D-LH CK-LH
      $hold(posedge CK,posedge D,1.0);
      
      // setup D-HL CK-LH
      $setup(negedge D,posedge CK,1.0);
      
      // setup D-LH CK-LH
      $setup(posedge D,posedge CK,1.0);
      
      // mpw CK_lh 
      $width(posedge CK,1.0,0);
      
      // mpw CK_hl 
      $width(negedge CK,1.0,0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_FDP_V2_2( Q, QN, CK, D );
input CK, D;
output Q, QN;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_FDP_V2_2_func SAEDRVT14_FDP_V2_2_behav_inst(.Q(Q),.QN(QN),.CK(CK),.D(D));
`else
   SAEDRVT14_FDP_V2_2_func SAEDRVT14_FDP_V2_2_inst(.Q(Q),.QN(QN),.CK(CK),.D(D));
   // spec_gates_begin
   not MGM_G0(ENABLE_NOT_D,D);
   buf MGM_G1(ENABLE_D,D);
   // spec_gates_end
   // specify_block_begin
   specify

      // seq arc CK --> Q
      (posedge CK => (Q : D))  = (1.0,1.0);
      
      // seq arc CK --> QN
      (posedge CK => (QN : D))  = (1.0,1.0);
      
      $width(negedge CK &&& (ENABLE_NOT_D === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D === 1'b1)
      ,1.0,0);
      
      // hold D-HL CK-LH
      $hold(posedge CK,negedge D,1.0);
      
      // hold D-LH CK-LH
      $hold(posedge CK,posedge D,1.0);
      
      // setup D-HL CK-LH
      $setup(negedge D,posedge CK,1.0);
      
      // setup D-LH CK-LH
      $setup(posedge D,posedge CK,1.0);
      
      // mpw CK_lh 
      $width(posedge CK,1.0,0);
      
      // mpw CK_hl 
      $width(negedge CK,1.0,0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_FDP_V2_4( Q, QN, CK, D );
input CK, D;
output Q, QN;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_FDP_V2_4_func SAEDRVT14_FDP_V2_4_behav_inst(.Q(Q),.QN(QN),.CK(CK),.D(D));
`else
   SAEDRVT14_FDP_V2_4_func SAEDRVT14_FDP_V2_4_inst(.Q(Q),.QN(QN),.CK(CK),.D(D));
   // spec_gates_begin
   not MGM_G0(ENABLE_NOT_D,D);
   buf MGM_G1(ENABLE_D,D);
   // spec_gates_end
   // specify_block_begin
   specify

      // seq arc CK --> Q
      (posedge CK => (Q : D))  = (1.0,1.0);
      
      // seq arc CK --> QN
      (posedge CK => (QN : D))  = (1.0,1.0);
      
      $width(negedge CK &&& (ENABLE_NOT_D === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D === 1'b1)
      ,1.0,0);
      
      // hold D-HL CK-LH
      $hold(posedge CK,negedge D,1.0);
      
      // hold D-LH CK-LH
      $hold(posedge CK,posedge D,1.0);
      
      // setup D-HL CK-LH
      $setup(negedge D,posedge CK,1.0);
      
      // setup D-LH CK-LH
      $setup(posedge D,posedge CK,1.0);
      
      // mpw CK_lh 
      $width(posedge CK,1.0,0);
      
      // mpw CK_hl 
      $width(negedge CK,1.0,0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_FSDNQ_V3_1( Q, CK, D, SI, SE );
input CK, D, SE, SI;
output Q;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_FSDNQ_V3_1_func SAEDRVT14_FSDNQ_V3_1_behav_inst(.Q(Q),.CK(CK),.D(D),.SI(SI),.SE(SE));
`else
   SAEDRVT14_FSDNQ_V3_1_func SAEDRVT14_FSDNQ_V3_1_inst(.Q(Q),.CK(CK),.D(D),.SI(SI),.SE(SE));
   // spec_gates_begin
   not MGM_G0(MGM_W0,D);
   not MGM_G1(MGM_W1,SE);
   and MGM_G2(MGM_W2,MGM_W1,MGM_W0);
   not MGM_G3(MGM_W3,SI);
   and MGM_G4(ENABLE_NOT_D_AND_NOT_SE_AND_NOT_SI,MGM_W3,MGM_W2);
   not MGM_G5(MGM_W4,D);
   not MGM_G6(MGM_W5,SE);
   and MGM_G7(MGM_W6,MGM_W5,MGM_W4);
   and MGM_G8(ENABLE_NOT_D_AND_NOT_SE_AND_SI,SI,MGM_W6);
   not MGM_G9(MGM_W7,D);
   and MGM_G10(MGM_W8,SE,MGM_W7);
   not MGM_G11(MGM_W9,SI);
   and MGM_G12(ENABLE_NOT_D_AND_SE_AND_NOT_SI,MGM_W9,MGM_W8);
   not MGM_G13(MGM_W10,D);
   and MGM_G14(MGM_W11,SE,MGM_W10);
   and MGM_G15(ENABLE_NOT_D_AND_SE_AND_SI,SI,MGM_W11);
   not MGM_G16(MGM_W12,SE);
   and MGM_G17(MGM_W13,MGM_W12,D);
   not MGM_G18(MGM_W14,SI);
   and MGM_G19(ENABLE_D_AND_NOT_SE_AND_NOT_SI,MGM_W14,MGM_W13);
   not MGM_G20(MGM_W15,SE);
   and MGM_G21(MGM_W16,MGM_W15,D);
   and MGM_G22(ENABLE_D_AND_NOT_SE_AND_SI,SI,MGM_W16);
   and MGM_G23(MGM_W17,SE,D);
   not MGM_G24(MGM_W18,SI);
   and MGM_G25(ENABLE_D_AND_SE_AND_NOT_SI,MGM_W18,MGM_W17);
   and MGM_G26(MGM_W19,SE,D);
   and MGM_G27(ENABLE_D_AND_SE_AND_SI,SI,MGM_W19);
   not MGM_G28(MGM_W20,SE);
   not MGM_G29(MGM_W21,SI);
   and MGM_G30(ENABLE_NOT_SE_AND_NOT_SI,MGM_W21,MGM_W20);
   not MGM_G31(MGM_W22,SE);
   and MGM_G32(ENABLE_NOT_SE_AND_SI,SI,MGM_W22);
   not MGM_G33(MGM_W23,D);
   and MGM_G34(ENABLE_NOT_D_AND_SI,SI,MGM_W23);
   not MGM_G35(MGM_W24,SI);
   and MGM_G36(ENABLE_D_AND_NOT_SI,MGM_W24,D);
   not MGM_G37(MGM_W25,D);
   and MGM_G38(ENABLE_NOT_D_AND_SE,SE,MGM_W25);
   and MGM_G39(ENABLE_D_AND_SE,SE,D);
   // spec_gates_end
   // specify_block_begin
   specify

      if(D===1'b0 && SI===1'b1)
      // seq arc CK --> Q
      (negedge CK => (Q : SE))  = (1.0,1.0);
      
      if(SE===1'b0 && SI===1'b0)
      // seq arc CK --> Q
      (negedge CK => (Q : D))  = (1.0,1.0);
      
      if(D===1'b1 && SE===1'b0 && SI===1'b1 || D===1'b0 && SE===1'b1 && SI===1'b0)
      // seq arc CK --> Q
      (negedge CK => (Q : D))  = (1.0,1.0);
      
      if(D===1'b1 && SE===1'b1)
      // seq arc CK --> Q
      (negedge CK => (Q : SI))  = (1.0,1.0);
      
      ifnone
      // seq arc CK --> Q
      (negedge CK => (Q : D))  = (1.0,1.0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      // hold D-HL CK-HL
      $hold(negedge CK &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),
      negedge D &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold D-LH CK-HL
      $hold(negedge CK &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),
      posedge D &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup D-HL CK-HL
      $setup(negedge D &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),
      negedge CK &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup D-LH CK-HL
      $setup(posedge D &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),
      negedge CK &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold D-HL CK-HL
      $hold(negedge CK &&& (ENABLE_NOT_SE_AND_SI === 1'b1),
      negedge D &&& (ENABLE_NOT_SE_AND_SI === 1'b1),1.0);
      
      // hold D-LH CK-HL
      $hold(negedge CK &&& (ENABLE_NOT_SE_AND_SI === 1'b1),
      posedge D &&& (ENABLE_NOT_SE_AND_SI === 1'b1),1.0);
      
      // setup D-HL CK-HL
      $setup(negedge D &&& (ENABLE_NOT_SE_AND_SI === 1'b1),
      negedge CK &&& (ENABLE_NOT_SE_AND_SI === 1'b1),1.0);
      
      // setup D-LH CK-HL
      $setup(posedge D &&& (ENABLE_NOT_SE_AND_SI === 1'b1),
      negedge CK &&& (ENABLE_NOT_SE_AND_SI === 1'b1),1.0);
      
      // hold SE-HL CK-HL
      $hold(negedge CK &&& (ENABLE_NOT_D_AND_SI === 1'b1),
      negedge SE &&& (ENABLE_NOT_D_AND_SI === 1'b1),1.0);
      
      // hold SE-LH CK-HL
      $hold(negedge CK &&& (ENABLE_NOT_D_AND_SI === 1'b1),
      posedge SE &&& (ENABLE_NOT_D_AND_SI === 1'b1),1.0);
      
      // setup SE-HL CK-HL
      $setup(negedge SE &&& (ENABLE_NOT_D_AND_SI === 1'b1),
      negedge CK &&& (ENABLE_NOT_D_AND_SI === 1'b1),1.0);
      
      // setup SE-LH CK-HL
      $setup(posedge SE &&& (ENABLE_NOT_D_AND_SI === 1'b1),
      negedge CK &&& (ENABLE_NOT_D_AND_SI === 1'b1),1.0);
      
      // hold SE-HL CK-HL
      $hold(negedge CK &&& (ENABLE_D_AND_NOT_SI === 1'b1),
      negedge SE &&& (ENABLE_D_AND_NOT_SI === 1'b1),1.0);
      
      // hold SE-LH CK-HL
      $hold(negedge CK &&& (ENABLE_D_AND_NOT_SI === 1'b1),
      posedge SE &&& (ENABLE_D_AND_NOT_SI === 1'b1),1.0);
      
      // setup SE-HL CK-HL
      $setup(negedge SE &&& (ENABLE_D_AND_NOT_SI === 1'b1),
      negedge CK &&& (ENABLE_D_AND_NOT_SI === 1'b1),1.0);
      
      // setup SE-LH CK-HL
      $setup(posedge SE &&& (ENABLE_D_AND_NOT_SI === 1'b1),
      negedge CK &&& (ENABLE_D_AND_NOT_SI === 1'b1),1.0);
      
      // hold SI-HL CK-HL
      $hold(negedge CK &&& (ENABLE_NOT_D_AND_SE === 1'b1),
      negedge SI &&& (ENABLE_NOT_D_AND_SE === 1'b1),1.0);
      
      // hold SI-LH CK-HL
      $hold(negedge CK &&& (ENABLE_NOT_D_AND_SE === 1'b1),
      posedge SI &&& (ENABLE_NOT_D_AND_SE === 1'b1),1.0);
      
      // setup SI-HL CK-HL
      $setup(negedge SI &&& (ENABLE_NOT_D_AND_SE === 1'b1),
      negedge CK &&& (ENABLE_NOT_D_AND_SE === 1'b1),1.0);
      
      // setup SI-LH CK-HL
      $setup(posedge SI &&& (ENABLE_NOT_D_AND_SE === 1'b1),
      negedge CK &&& (ENABLE_NOT_D_AND_SE === 1'b1),1.0);
      
      // hold SI-HL CK-HL
      $hold(negedge CK &&& (ENABLE_D_AND_SE === 1'b1),
      negedge SI &&& (ENABLE_D_AND_SE === 1'b1),1.0);
      
      // hold SI-LH CK-HL
      $hold(negedge CK &&& (ENABLE_D_AND_SE === 1'b1),
      posedge SI &&& (ENABLE_D_AND_SE === 1'b1),1.0);
      
      // setup SI-HL CK-HL
      $setup(negedge SI &&& (ENABLE_D_AND_SE === 1'b1),
      negedge CK &&& (ENABLE_D_AND_SE === 1'b1),1.0);
      
      // setup SI-LH CK-HL
      $setup(posedge SI &&& (ENABLE_D_AND_SE === 1'b1),
      negedge CK &&& (ENABLE_D_AND_SE === 1'b1),1.0);
      
      // mpw CK_lh 
      $width(posedge CK,1.0,0);
      
      // mpw CK_hl 
      $width(negedge CK,1.0,0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_FSDNQ_V3_2( Q, CK, D, SI, SE );
input CK, D, SE, SI;
output Q;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_FSDNQ_V3_2_func SAEDRVT14_FSDNQ_V3_2_behav_inst(.Q(Q),.CK(CK),.D(D),.SI(SI),.SE(SE));
`else
   SAEDRVT14_FSDNQ_V3_2_func SAEDRVT14_FSDNQ_V3_2_inst(.Q(Q),.CK(CK),.D(D),.SI(SI),.SE(SE));
   // spec_gates_begin
   not MGM_G0(MGM_W0,D);
   not MGM_G1(MGM_W1,SE);
   and MGM_G2(MGM_W2,MGM_W1,MGM_W0);
   not MGM_G3(MGM_W3,SI);
   and MGM_G4(ENABLE_NOT_D_AND_NOT_SE_AND_NOT_SI,MGM_W3,MGM_W2);
   not MGM_G5(MGM_W4,D);
   not MGM_G6(MGM_W5,SE);
   and MGM_G7(MGM_W6,MGM_W5,MGM_W4);
   and MGM_G8(ENABLE_NOT_D_AND_NOT_SE_AND_SI,SI,MGM_W6);
   not MGM_G9(MGM_W7,D);
   and MGM_G10(MGM_W8,SE,MGM_W7);
   not MGM_G11(MGM_W9,SI);
   and MGM_G12(ENABLE_NOT_D_AND_SE_AND_NOT_SI,MGM_W9,MGM_W8);
   not MGM_G13(MGM_W10,D);
   and MGM_G14(MGM_W11,SE,MGM_W10);
   and MGM_G15(ENABLE_NOT_D_AND_SE_AND_SI,SI,MGM_W11);
   not MGM_G16(MGM_W12,SE);
   and MGM_G17(MGM_W13,MGM_W12,D);
   not MGM_G18(MGM_W14,SI);
   and MGM_G19(ENABLE_D_AND_NOT_SE_AND_NOT_SI,MGM_W14,MGM_W13);
   not MGM_G20(MGM_W15,SE);
   and MGM_G21(MGM_W16,MGM_W15,D);
   and MGM_G22(ENABLE_D_AND_NOT_SE_AND_SI,SI,MGM_W16);
   and MGM_G23(MGM_W17,SE,D);
   not MGM_G24(MGM_W18,SI);
   and MGM_G25(ENABLE_D_AND_SE_AND_NOT_SI,MGM_W18,MGM_W17);
   and MGM_G26(MGM_W19,SE,D);
   and MGM_G27(ENABLE_D_AND_SE_AND_SI,SI,MGM_W19);
   not MGM_G28(MGM_W20,SE);
   not MGM_G29(MGM_W21,SI);
   and MGM_G30(ENABLE_NOT_SE_AND_NOT_SI,MGM_W21,MGM_W20);
   not MGM_G31(MGM_W22,SE);
   and MGM_G32(ENABLE_NOT_SE_AND_SI,SI,MGM_W22);
   not MGM_G33(MGM_W23,D);
   and MGM_G34(ENABLE_NOT_D_AND_SI,SI,MGM_W23);
   not MGM_G35(MGM_W24,SI);
   and MGM_G36(ENABLE_D_AND_NOT_SI,MGM_W24,D);
   not MGM_G37(MGM_W25,D);
   and MGM_G38(ENABLE_NOT_D_AND_SE,SE,MGM_W25);
   and MGM_G39(ENABLE_D_AND_SE,SE,D);
   // spec_gates_end
   // specify_block_begin
   specify

      if(D===1'b0 && SI===1'b1)
      // seq arc CK --> Q
      (negedge CK => (Q : SE))  = (1.0,1.0);
      
      if(SE===1'b0 && SI===1'b0)
      // seq arc CK --> Q
      (negedge CK => (Q : D))  = (1.0,1.0);
      
      if(D===1'b1 && SE===1'b0 && SI===1'b1 || D===1'b0 && SE===1'b1 && SI===1'b0)
      // seq arc CK --> Q
      (negedge CK => (Q : D))  = (1.0,1.0);
      
      if(D===1'b1 && SE===1'b1)
      // seq arc CK --> Q
      (negedge CK => (Q : SI))  = (1.0,1.0);
      
      ifnone
      // seq arc CK --> Q
      (negedge CK => (Q : D))  = (1.0,1.0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      // hold D-HL CK-HL
      $hold(negedge CK &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),
      negedge D &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold D-LH CK-HL
      $hold(negedge CK &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),
      posedge D &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup D-HL CK-HL
      $setup(negedge D &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),
      negedge CK &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup D-LH CK-HL
      $setup(posedge D &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),
      negedge CK &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold D-HL CK-HL
      $hold(negedge CK &&& (ENABLE_NOT_SE_AND_SI === 1'b1),
      negedge D &&& (ENABLE_NOT_SE_AND_SI === 1'b1),1.0);
      
      // hold D-LH CK-HL
      $hold(negedge CK &&& (ENABLE_NOT_SE_AND_SI === 1'b1),
      posedge D &&& (ENABLE_NOT_SE_AND_SI === 1'b1),1.0);
      
      // setup D-HL CK-HL
      $setup(negedge D &&& (ENABLE_NOT_SE_AND_SI === 1'b1),
      negedge CK &&& (ENABLE_NOT_SE_AND_SI === 1'b1),1.0);
      
      // setup D-LH CK-HL
      $setup(posedge D &&& (ENABLE_NOT_SE_AND_SI === 1'b1),
      negedge CK &&& (ENABLE_NOT_SE_AND_SI === 1'b1),1.0);
      
      // hold SE-HL CK-HL
      $hold(negedge CK &&& (ENABLE_NOT_D_AND_SI === 1'b1),
      negedge SE &&& (ENABLE_NOT_D_AND_SI === 1'b1),1.0);
      
      // hold SE-LH CK-HL
      $hold(negedge CK &&& (ENABLE_NOT_D_AND_SI === 1'b1),
      posedge SE &&& (ENABLE_NOT_D_AND_SI === 1'b1),1.0);
      
      // setup SE-HL CK-HL
      $setup(negedge SE &&& (ENABLE_NOT_D_AND_SI === 1'b1),
      negedge CK &&& (ENABLE_NOT_D_AND_SI === 1'b1),1.0);
      
      // setup SE-LH CK-HL
      $setup(posedge SE &&& (ENABLE_NOT_D_AND_SI === 1'b1),
      negedge CK &&& (ENABLE_NOT_D_AND_SI === 1'b1),1.0);
      
      // hold SE-HL CK-HL
      $hold(negedge CK &&& (ENABLE_D_AND_NOT_SI === 1'b1),
      negedge SE &&& (ENABLE_D_AND_NOT_SI === 1'b1),1.0);
      
      // hold SE-LH CK-HL
      $hold(negedge CK &&& (ENABLE_D_AND_NOT_SI === 1'b1),
      posedge SE &&& (ENABLE_D_AND_NOT_SI === 1'b1),1.0);
      
      // setup SE-HL CK-HL
      $setup(negedge SE &&& (ENABLE_D_AND_NOT_SI === 1'b1),
      negedge CK &&& (ENABLE_D_AND_NOT_SI === 1'b1),1.0);
      
      // setup SE-LH CK-HL
      $setup(posedge SE &&& (ENABLE_D_AND_NOT_SI === 1'b1),
      negedge CK &&& (ENABLE_D_AND_NOT_SI === 1'b1),1.0);
      
      // hold SI-HL CK-HL
      $hold(negedge CK &&& (ENABLE_NOT_D_AND_SE === 1'b1),
      negedge SI &&& (ENABLE_NOT_D_AND_SE === 1'b1),1.0);
      
      // hold SI-LH CK-HL
      $hold(negedge CK &&& (ENABLE_NOT_D_AND_SE === 1'b1),
      posedge SI &&& (ENABLE_NOT_D_AND_SE === 1'b1),1.0);
      
      // setup SI-HL CK-HL
      $setup(negedge SI &&& (ENABLE_NOT_D_AND_SE === 1'b1),
      negedge CK &&& (ENABLE_NOT_D_AND_SE === 1'b1),1.0);
      
      // setup SI-LH CK-HL
      $setup(posedge SI &&& (ENABLE_NOT_D_AND_SE === 1'b1),
      negedge CK &&& (ENABLE_NOT_D_AND_SE === 1'b1),1.0);
      
      // hold SI-HL CK-HL
      $hold(negedge CK &&& (ENABLE_D_AND_SE === 1'b1),
      negedge SI &&& (ENABLE_D_AND_SE === 1'b1),1.0);
      
      // hold SI-LH CK-HL
      $hold(negedge CK &&& (ENABLE_D_AND_SE === 1'b1),
      posedge SI &&& (ENABLE_D_AND_SE === 1'b1),1.0);
      
      // setup SI-HL CK-HL
      $setup(negedge SI &&& (ENABLE_D_AND_SE === 1'b1),
      negedge CK &&& (ENABLE_D_AND_SE === 1'b1),1.0);
      
      // setup SI-LH CK-HL
      $setup(posedge SI &&& (ENABLE_D_AND_SE === 1'b1),
      negedge CK &&& (ENABLE_D_AND_SE === 1'b1),1.0);
      
      // mpw CK_lh 
      $width(posedge CK,1.0,0);
      
      // mpw CK_hl 
      $width(negedge CK,1.0,0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_FSDNQ_V3_4( Q, CK, D, SI, SE );
input CK, D, SE, SI;
output Q;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_FSDNQ_V3_4_func SAEDRVT14_FSDNQ_V3_4_behav_inst(.Q(Q),.CK(CK),.D(D),.SI(SI),.SE(SE));
`else
   SAEDRVT14_FSDNQ_V3_4_func SAEDRVT14_FSDNQ_V3_4_inst(.Q(Q),.CK(CK),.D(D),.SI(SI),.SE(SE));
   // spec_gates_begin
   not MGM_G0(MGM_W0,D);
   not MGM_G1(MGM_W1,SE);
   and MGM_G2(MGM_W2,MGM_W1,MGM_W0);
   not MGM_G3(MGM_W3,SI);
   and MGM_G4(ENABLE_NOT_D_AND_NOT_SE_AND_NOT_SI,MGM_W3,MGM_W2);
   not MGM_G5(MGM_W4,D);
   not MGM_G6(MGM_W5,SE);
   and MGM_G7(MGM_W6,MGM_W5,MGM_W4);
   and MGM_G8(ENABLE_NOT_D_AND_NOT_SE_AND_SI,SI,MGM_W6);
   not MGM_G9(MGM_W7,D);
   and MGM_G10(MGM_W8,SE,MGM_W7);
   not MGM_G11(MGM_W9,SI);
   and MGM_G12(ENABLE_NOT_D_AND_SE_AND_NOT_SI,MGM_W9,MGM_W8);
   not MGM_G13(MGM_W10,D);
   and MGM_G14(MGM_W11,SE,MGM_W10);
   and MGM_G15(ENABLE_NOT_D_AND_SE_AND_SI,SI,MGM_W11);
   not MGM_G16(MGM_W12,SE);
   and MGM_G17(MGM_W13,MGM_W12,D);
   not MGM_G18(MGM_W14,SI);
   and MGM_G19(ENABLE_D_AND_NOT_SE_AND_NOT_SI,MGM_W14,MGM_W13);
   not MGM_G20(MGM_W15,SE);
   and MGM_G21(MGM_W16,MGM_W15,D);
   and MGM_G22(ENABLE_D_AND_NOT_SE_AND_SI,SI,MGM_W16);
   and MGM_G23(MGM_W17,SE,D);
   not MGM_G24(MGM_W18,SI);
   and MGM_G25(ENABLE_D_AND_SE_AND_NOT_SI,MGM_W18,MGM_W17);
   and MGM_G26(MGM_W19,SE,D);
   and MGM_G27(ENABLE_D_AND_SE_AND_SI,SI,MGM_W19);
   not MGM_G28(MGM_W20,SE);
   not MGM_G29(MGM_W21,SI);
   and MGM_G30(ENABLE_NOT_SE_AND_NOT_SI,MGM_W21,MGM_W20);
   not MGM_G31(MGM_W22,SE);
   and MGM_G32(ENABLE_NOT_SE_AND_SI,SI,MGM_W22);
   not MGM_G33(MGM_W23,D);
   and MGM_G34(ENABLE_NOT_D_AND_SI,SI,MGM_W23);
   not MGM_G35(MGM_W24,SI);
   and MGM_G36(ENABLE_D_AND_NOT_SI,MGM_W24,D);
   not MGM_G37(MGM_W25,D);
   and MGM_G38(ENABLE_NOT_D_AND_SE,SE,MGM_W25);
   and MGM_G39(ENABLE_D_AND_SE,SE,D);
   // spec_gates_end
   // specify_block_begin
   specify

      if(D===1'b0 && SI===1'b1)
      // seq arc CK --> Q
      (negedge CK => (Q : SE))  = (1.0,1.0);
      
      if(SE===1'b0 && SI===1'b0)
      // seq arc CK --> Q
      (negedge CK => (Q : D))  = (1.0,1.0);
      
      if(D===1'b1 && SE===1'b0 && SI===1'b1 || D===1'b0 && SE===1'b1 && SI===1'b0)
      // seq arc CK --> Q
      (negedge CK => (Q : D))  = (1.0,1.0);
      
      if(D===1'b1 && SE===1'b1)
      // seq arc CK --> Q
      (negedge CK => (Q : SI))  = (1.0,1.0);
      
      ifnone
      // seq arc CK --> Q
      (negedge CK => (Q : D))  = (1.0,1.0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      // hold D-HL CK-HL
      $hold(negedge CK &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),
      negedge D &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold D-LH CK-HL
      $hold(negedge CK &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),
      posedge D &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup D-HL CK-HL
      $setup(negedge D &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),
      negedge CK &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup D-LH CK-HL
      $setup(posedge D &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),
      negedge CK &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold D-HL CK-HL
      $hold(negedge CK &&& (ENABLE_NOT_SE_AND_SI === 1'b1),
      negedge D &&& (ENABLE_NOT_SE_AND_SI === 1'b1),1.0);
      
      // hold D-LH CK-HL
      $hold(negedge CK &&& (ENABLE_NOT_SE_AND_SI === 1'b1),
      posedge D &&& (ENABLE_NOT_SE_AND_SI === 1'b1),1.0);
      
      // setup D-HL CK-HL
      $setup(negedge D &&& (ENABLE_NOT_SE_AND_SI === 1'b1),
      negedge CK &&& (ENABLE_NOT_SE_AND_SI === 1'b1),1.0);
      
      // setup D-LH CK-HL
      $setup(posedge D &&& (ENABLE_NOT_SE_AND_SI === 1'b1),
      negedge CK &&& (ENABLE_NOT_SE_AND_SI === 1'b1),1.0);
      
      // hold SE-HL CK-HL
      $hold(negedge CK &&& (ENABLE_NOT_D_AND_SI === 1'b1),
      negedge SE &&& (ENABLE_NOT_D_AND_SI === 1'b1),1.0);
      
      // hold SE-LH CK-HL
      $hold(negedge CK &&& (ENABLE_NOT_D_AND_SI === 1'b1),
      posedge SE &&& (ENABLE_NOT_D_AND_SI === 1'b1),1.0);
      
      // setup SE-HL CK-HL
      $setup(negedge SE &&& (ENABLE_NOT_D_AND_SI === 1'b1),
      negedge CK &&& (ENABLE_NOT_D_AND_SI === 1'b1),1.0);
      
      // setup SE-LH CK-HL
      $setup(posedge SE &&& (ENABLE_NOT_D_AND_SI === 1'b1),
      negedge CK &&& (ENABLE_NOT_D_AND_SI === 1'b1),1.0);
      
      // hold SE-HL CK-HL
      $hold(negedge CK &&& (ENABLE_D_AND_NOT_SI === 1'b1),
      negedge SE &&& (ENABLE_D_AND_NOT_SI === 1'b1),1.0);
      
      // hold SE-LH CK-HL
      $hold(negedge CK &&& (ENABLE_D_AND_NOT_SI === 1'b1),
      posedge SE &&& (ENABLE_D_AND_NOT_SI === 1'b1),1.0);
      
      // setup SE-HL CK-HL
      $setup(negedge SE &&& (ENABLE_D_AND_NOT_SI === 1'b1),
      negedge CK &&& (ENABLE_D_AND_NOT_SI === 1'b1),1.0);
      
      // setup SE-LH CK-HL
      $setup(posedge SE &&& (ENABLE_D_AND_NOT_SI === 1'b1),
      negedge CK &&& (ENABLE_D_AND_NOT_SI === 1'b1),1.0);
      
      // hold SI-HL CK-HL
      $hold(negedge CK &&& (ENABLE_NOT_D_AND_SE === 1'b1),
      negedge SI &&& (ENABLE_NOT_D_AND_SE === 1'b1),1.0);
      
      // hold SI-LH CK-HL
      $hold(negedge CK &&& (ENABLE_NOT_D_AND_SE === 1'b1),
      posedge SI &&& (ENABLE_NOT_D_AND_SE === 1'b1),1.0);
      
      // setup SI-HL CK-HL
      $setup(negedge SI &&& (ENABLE_NOT_D_AND_SE === 1'b1),
      negedge CK &&& (ENABLE_NOT_D_AND_SE === 1'b1),1.0);
      
      // setup SI-LH CK-HL
      $setup(posedge SI &&& (ENABLE_NOT_D_AND_SE === 1'b1),
      negedge CK &&& (ENABLE_NOT_D_AND_SE === 1'b1),1.0);
      
      // hold SI-HL CK-HL
      $hold(negedge CK &&& (ENABLE_D_AND_SE === 1'b1),
      negedge SI &&& (ENABLE_D_AND_SE === 1'b1),1.0);
      
      // hold SI-LH CK-HL
      $hold(negedge CK &&& (ENABLE_D_AND_SE === 1'b1),
      posedge SI &&& (ENABLE_D_AND_SE === 1'b1),1.0);
      
      // setup SI-HL CK-HL
      $setup(negedge SI &&& (ENABLE_D_AND_SE === 1'b1),
      negedge CK &&& (ENABLE_D_AND_SE === 1'b1),1.0);
      
      // setup SI-LH CK-HL
      $setup(posedge SI &&& (ENABLE_D_AND_SE === 1'b1),
      negedge CK &&& (ENABLE_D_AND_SE === 1'b1),1.0);
      
      // mpw CK_lh 
      $width(posedge CK,1.0,0);
      
      // mpw CK_hl 
      $width(negedge CK,1.0,0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine

`celldefine
module SAEDRVT14_FSDN_V2_1( Q, QN, CK, D, SI, SE );
input CK, D, SE, SI;
output Q, QN;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_FSDN_V2_1_func SAEDRVT14_FSDN_V2_1_behav_inst(.Q(Q),.QN(QN),.CK(CK),.D(D),.SI(SI),.SE(SE));
`else
   SAEDRVT14_FSDN_V2_1_func SAEDRVT14_FSDN_V2_1_inst(.Q(Q),.QN(QN),.CK(CK),.D(D),.SI(SI),.SE(SE));
   // spec_gates_begin
   not MGM_G0(MGM_W0,D);
   not MGM_G1(MGM_W1,SE);
   and MGM_G2(MGM_W2,MGM_W1,MGM_W0);
   not MGM_G3(MGM_W3,SI);
   and MGM_G4(ENABLE_NOT_D_AND_NOT_SE_AND_NOT_SI,MGM_W3,MGM_W2);
   not MGM_G5(MGM_W4,D);
   not MGM_G6(MGM_W5,SE);
   and MGM_G7(MGM_W6,MGM_W5,MGM_W4);
   and MGM_G8(ENABLE_NOT_D_AND_NOT_SE_AND_SI,SI,MGM_W6);
   not MGM_G9(MGM_W7,D);
   and MGM_G10(MGM_W8,SE,MGM_W7);
   not MGM_G11(MGM_W9,SI);
   and MGM_G12(ENABLE_NOT_D_AND_SE_AND_NOT_SI,MGM_W9,MGM_W8);
   not MGM_G13(MGM_W10,D);
   and MGM_G14(MGM_W11,SE,MGM_W10);
   and MGM_G15(ENABLE_NOT_D_AND_SE_AND_SI,SI,MGM_W11);
   not MGM_G16(MGM_W12,SE);
   and MGM_G17(MGM_W13,MGM_W12,D);
   not MGM_G18(MGM_W14,SI);
   and MGM_G19(ENABLE_D_AND_NOT_SE_AND_NOT_SI,MGM_W14,MGM_W13);
   not MGM_G20(MGM_W15,SE);
   and MGM_G21(MGM_W16,MGM_W15,D);
   and MGM_G22(ENABLE_D_AND_NOT_SE_AND_SI,SI,MGM_W16);
   and MGM_G23(MGM_W17,SE,D);
   not MGM_G24(MGM_W18,SI);
   and MGM_G25(ENABLE_D_AND_SE_AND_NOT_SI,MGM_W18,MGM_W17);
   and MGM_G26(MGM_W19,SE,D);
   and MGM_G27(ENABLE_D_AND_SE_AND_SI,SI,MGM_W19);
   not MGM_G28(MGM_W20,SE);
   not MGM_G29(MGM_W21,SI);
   and MGM_G30(ENABLE_NOT_SE_AND_NOT_SI,MGM_W21,MGM_W20);
   not MGM_G31(MGM_W22,SE);
   and MGM_G32(ENABLE_NOT_SE_AND_SI,SI,MGM_W22);
   not MGM_G33(MGM_W23,D);
   and MGM_G34(ENABLE_NOT_D_AND_SI,SI,MGM_W23);
   not MGM_G35(MGM_W24,SI);
   and MGM_G36(ENABLE_D_AND_NOT_SI,MGM_W24,D);
   not MGM_G37(MGM_W25,D);
   and MGM_G38(ENABLE_NOT_D_AND_SE,SE,MGM_W25);
   and MGM_G39(ENABLE_D_AND_SE,SE,D);
   // spec_gates_end
   // specify_block_begin
   specify

      if(D===1'b0 && SI===1'b1)
      // seq arc CK --> Q
      (negedge CK => (Q : SE))  = (1.0,1.0);
      
      if(SE===1'b0 && SI===1'b0)
      // seq arc CK --> Q
      (negedge CK => (Q : D))  = (1.0,1.0);
      
      if(D===1'b1 && SE===1'b0 && SI===1'b1 || D===1'b0 && SE===1'b1 && SI===1'b0)
      // seq arc CK --> Q
      (negedge CK => (Q : D))  = (1.0,1.0);
      
      if(D===1'b1 && SE===1'b1)
      // seq arc CK --> Q
      (negedge CK => (Q : SI))  = (1.0,1.0);
      
      ifnone
      // seq arc CK --> Q
      (negedge CK => (Q : D))  = (1.0,1.0);
      
      if(D===1'b0 && SI===1'b1)
      // seq arc CK --> QN
      (negedge CK => (QN : SE))  = (1.0,1.0);
      
      if(SE===1'b0 && SI===1'b0)
      // seq arc CK --> QN
      (negedge CK => (QN : D))  = (1.0,1.0);
      
      if(D===1'b1 && SE===1'b0 && SI===1'b1 || D===1'b0 && SE===1'b1 && SI===1'b0)
      // seq arc CK --> QN
      (negedge CK => (QN : D))  = (1.0,1.0);
      
      if(D===1'b1 && SE===1'b1)
      // seq arc CK --> QN
      (negedge CK => (QN : SI))  = (1.0,1.0);
      
      ifnone
      // seq arc CK --> QN
      (negedge CK => (QN : D))  = (1.0,1.0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      // hold D-HL CK-HL
      $hold(negedge CK &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),
      negedge D &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold D-LH CK-HL
      $hold(negedge CK &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),
      posedge D &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup D-HL CK-HL
      $setup(negedge D &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),
      negedge CK &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup D-LH CK-HL
      $setup(posedge D &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),
      negedge CK &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold D-HL CK-HL
      $hold(negedge CK &&& (ENABLE_NOT_SE_AND_SI === 1'b1),
      negedge D &&& (ENABLE_NOT_SE_AND_SI === 1'b1),1.0);
      
      // hold D-LH CK-HL
      $hold(negedge CK &&& (ENABLE_NOT_SE_AND_SI === 1'b1),
      posedge D &&& (ENABLE_NOT_SE_AND_SI === 1'b1),1.0);
      
      // setup D-HL CK-HL
      $setup(negedge D &&& (ENABLE_NOT_SE_AND_SI === 1'b1),
      negedge CK &&& (ENABLE_NOT_SE_AND_SI === 1'b1),1.0);
      
      // setup D-LH CK-HL
      $setup(posedge D &&& (ENABLE_NOT_SE_AND_SI === 1'b1),
      negedge CK &&& (ENABLE_NOT_SE_AND_SI === 1'b1),1.0);
      
      // hold SE-HL CK-HL
      $hold(negedge CK &&& (ENABLE_NOT_D_AND_SI === 1'b1),
      negedge SE &&& (ENABLE_NOT_D_AND_SI === 1'b1),1.0);
      
      // hold SE-LH CK-HL
      $hold(negedge CK &&& (ENABLE_NOT_D_AND_SI === 1'b1),
      posedge SE &&& (ENABLE_NOT_D_AND_SI === 1'b1),1.0);
      
      // setup SE-HL CK-HL
      $setup(negedge SE &&& (ENABLE_NOT_D_AND_SI === 1'b1),
      negedge CK &&& (ENABLE_NOT_D_AND_SI === 1'b1),1.0);
      
      // setup SE-LH CK-HL
      $setup(posedge SE &&& (ENABLE_NOT_D_AND_SI === 1'b1),
      negedge CK &&& (ENABLE_NOT_D_AND_SI === 1'b1),1.0);
      
      // hold SE-HL CK-HL
      $hold(negedge CK &&& (ENABLE_D_AND_NOT_SI === 1'b1),
      negedge SE &&& (ENABLE_D_AND_NOT_SI === 1'b1),1.0);
      
      // hold SE-LH CK-HL
      $hold(negedge CK &&& (ENABLE_D_AND_NOT_SI === 1'b1),
      posedge SE &&& (ENABLE_D_AND_NOT_SI === 1'b1),1.0);
      
      // setup SE-HL CK-HL
      $setup(negedge SE &&& (ENABLE_D_AND_NOT_SI === 1'b1),
      negedge CK &&& (ENABLE_D_AND_NOT_SI === 1'b1),1.0);
      
      // setup SE-LH CK-HL
      $setup(posedge SE &&& (ENABLE_D_AND_NOT_SI === 1'b1),
      negedge CK &&& (ENABLE_D_AND_NOT_SI === 1'b1),1.0);
      
      // hold SI-HL CK-HL
      $hold(negedge CK &&& (ENABLE_NOT_D_AND_SE === 1'b1),
      negedge SI &&& (ENABLE_NOT_D_AND_SE === 1'b1),1.0);
      
      // hold SI-LH CK-HL
      $hold(negedge CK &&& (ENABLE_NOT_D_AND_SE === 1'b1),
      posedge SI &&& (ENABLE_NOT_D_AND_SE === 1'b1),1.0);
      
      // setup SI-HL CK-HL
      $setup(negedge SI &&& (ENABLE_NOT_D_AND_SE === 1'b1),
      negedge CK &&& (ENABLE_NOT_D_AND_SE === 1'b1),1.0);
      
      // setup SI-LH CK-HL
      $setup(posedge SI &&& (ENABLE_NOT_D_AND_SE === 1'b1),
      negedge CK &&& (ENABLE_NOT_D_AND_SE === 1'b1),1.0);
      
      // hold SI-HL CK-HL
      $hold(negedge CK &&& (ENABLE_D_AND_SE === 1'b1),
      negedge SI &&& (ENABLE_D_AND_SE === 1'b1),1.0);
      
      // hold SI-LH CK-HL
      $hold(negedge CK &&& (ENABLE_D_AND_SE === 1'b1),
      posedge SI &&& (ENABLE_D_AND_SE === 1'b1),1.0);
      
      // setup SI-HL CK-HL
      $setup(negedge SI &&& (ENABLE_D_AND_SE === 1'b1),
      negedge CK &&& (ENABLE_D_AND_SE === 1'b1),1.0);
      
      // setup SI-LH CK-HL
      $setup(posedge SI &&& (ENABLE_D_AND_SE === 1'b1),
      negedge CK &&& (ENABLE_D_AND_SE === 1'b1),1.0);
      
      // mpw CK_lh 
      $width(posedge CK,1.0,0);
      
      // mpw CK_hl 
      $width(negedge CK,1.0,0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_FSDN_V2_2( Q, QN, CK, D, SI, SE );
input CK, D, SE, SI;
output Q, QN;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_FSDN_V2_2_func SAEDRVT14_FSDN_V2_2_behav_inst(.Q(Q),.QN(QN),.CK(CK),.D(D),.SI(SI),.SE(SE));
`else
   SAEDRVT14_FSDN_V2_2_func SAEDRVT14_FSDN_V2_2_inst(.Q(Q),.QN(QN),.CK(CK),.D(D),.SI(SI),.SE(SE));
   // spec_gates_begin
   not MGM_G0(MGM_W0,D);
   not MGM_G1(MGM_W1,SE);
   and MGM_G2(MGM_W2,MGM_W1,MGM_W0);
   not MGM_G3(MGM_W3,SI);
   and MGM_G4(ENABLE_NOT_D_AND_NOT_SE_AND_NOT_SI,MGM_W3,MGM_W2);
   not MGM_G5(MGM_W4,D);
   not MGM_G6(MGM_W5,SE);
   and MGM_G7(MGM_W6,MGM_W5,MGM_W4);
   and MGM_G8(ENABLE_NOT_D_AND_NOT_SE_AND_SI,SI,MGM_W6);
   not MGM_G9(MGM_W7,D);
   and MGM_G10(MGM_W8,SE,MGM_W7);
   not MGM_G11(MGM_W9,SI);
   and MGM_G12(ENABLE_NOT_D_AND_SE_AND_NOT_SI,MGM_W9,MGM_W8);
   not MGM_G13(MGM_W10,D);
   and MGM_G14(MGM_W11,SE,MGM_W10);
   and MGM_G15(ENABLE_NOT_D_AND_SE_AND_SI,SI,MGM_W11);
   not MGM_G16(MGM_W12,SE);
   and MGM_G17(MGM_W13,MGM_W12,D);
   not MGM_G18(MGM_W14,SI);
   and MGM_G19(ENABLE_D_AND_NOT_SE_AND_NOT_SI,MGM_W14,MGM_W13);
   not MGM_G20(MGM_W15,SE);
   and MGM_G21(MGM_W16,MGM_W15,D);
   and MGM_G22(ENABLE_D_AND_NOT_SE_AND_SI,SI,MGM_W16);
   and MGM_G23(MGM_W17,SE,D);
   not MGM_G24(MGM_W18,SI);
   and MGM_G25(ENABLE_D_AND_SE_AND_NOT_SI,MGM_W18,MGM_W17);
   and MGM_G26(MGM_W19,SE,D);
   and MGM_G27(ENABLE_D_AND_SE_AND_SI,SI,MGM_W19);
   not MGM_G28(MGM_W20,SE);
   not MGM_G29(MGM_W21,SI);
   and MGM_G30(ENABLE_NOT_SE_AND_NOT_SI,MGM_W21,MGM_W20);
   not MGM_G31(MGM_W22,SE);
   and MGM_G32(ENABLE_NOT_SE_AND_SI,SI,MGM_W22);
   not MGM_G33(MGM_W23,D);
   and MGM_G34(ENABLE_NOT_D_AND_SI,SI,MGM_W23);
   not MGM_G35(MGM_W24,SI);
   and MGM_G36(ENABLE_D_AND_NOT_SI,MGM_W24,D);
   not MGM_G37(MGM_W25,D);
   and MGM_G38(ENABLE_NOT_D_AND_SE,SE,MGM_W25);
   and MGM_G39(ENABLE_D_AND_SE,SE,D);
   // spec_gates_end
   // specify_block_begin
   specify

      if(D===1'b0 && SI===1'b1)
      // seq arc CK --> Q
      (negedge CK => (Q : SE))  = (1.0,1.0);
      
      if(SE===1'b0 && SI===1'b0)
      // seq arc CK --> Q
      (negedge CK => (Q : D))  = (1.0,1.0);
      
      if(D===1'b1 && SE===1'b0 && SI===1'b1 || D===1'b0 && SE===1'b1 && SI===1'b0)
      // seq arc CK --> Q
      (negedge CK => (Q : D))  = (1.0,1.0);
      
      if(D===1'b1 && SE===1'b1)
      // seq arc CK --> Q
      (negedge CK => (Q : SI))  = (1.0,1.0);
      
      ifnone
      // seq arc CK --> Q
      (negedge CK => (Q : D))  = (1.0,1.0);
      
      if(D===1'b0 && SI===1'b1)
      // seq arc CK --> QN
      (negedge CK => (QN : SE))  = (1.0,1.0);
      
      if(SE===1'b0 && SI===1'b0)
      // seq arc CK --> QN
      (negedge CK => (QN : D))  = (1.0,1.0);
      
      if(D===1'b1 && SE===1'b0 && SI===1'b1 || D===1'b0 && SE===1'b1 && SI===1'b0)
      // seq arc CK --> QN
      (negedge CK => (QN : D))  = (1.0,1.0);
      
      if(D===1'b1 && SE===1'b1)
      // seq arc CK --> QN
      (negedge CK => (QN : SI))  = (1.0,1.0);
      
      ifnone
      // seq arc CK --> QN
      (negedge CK => (QN : D))  = (1.0,1.0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      // hold D-HL CK-HL
      $hold(negedge CK &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),
      negedge D &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold D-LH CK-HL
      $hold(negedge CK &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),
      posedge D &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup D-HL CK-HL
      $setup(negedge D &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),
      negedge CK &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup D-LH CK-HL
      $setup(posedge D &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),
      negedge CK &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold D-HL CK-HL
      $hold(negedge CK &&& (ENABLE_NOT_SE_AND_SI === 1'b1),
      negedge D &&& (ENABLE_NOT_SE_AND_SI === 1'b1),1.0);
      
      // hold D-LH CK-HL
      $hold(negedge CK &&& (ENABLE_NOT_SE_AND_SI === 1'b1),
      posedge D &&& (ENABLE_NOT_SE_AND_SI === 1'b1),1.0);
      
      // setup D-HL CK-HL
      $setup(negedge D &&& (ENABLE_NOT_SE_AND_SI === 1'b1),
      negedge CK &&& (ENABLE_NOT_SE_AND_SI === 1'b1),1.0);
      
      // setup D-LH CK-HL
      $setup(posedge D &&& (ENABLE_NOT_SE_AND_SI === 1'b1),
      negedge CK &&& (ENABLE_NOT_SE_AND_SI === 1'b1),1.0);
      
      // hold SE-HL CK-HL
      $hold(negedge CK &&& (ENABLE_NOT_D_AND_SI === 1'b1),
      negedge SE &&& (ENABLE_NOT_D_AND_SI === 1'b1),1.0);
      
      // hold SE-LH CK-HL
      $hold(negedge CK &&& (ENABLE_NOT_D_AND_SI === 1'b1),
      posedge SE &&& (ENABLE_NOT_D_AND_SI === 1'b1),1.0);
      
      // setup SE-HL CK-HL
      $setup(negedge SE &&& (ENABLE_NOT_D_AND_SI === 1'b1),
      negedge CK &&& (ENABLE_NOT_D_AND_SI === 1'b1),1.0);
      
      // setup SE-LH CK-HL
      $setup(posedge SE &&& (ENABLE_NOT_D_AND_SI === 1'b1),
      negedge CK &&& (ENABLE_NOT_D_AND_SI === 1'b1),1.0);
      
      // hold SE-HL CK-HL
      $hold(negedge CK &&& (ENABLE_D_AND_NOT_SI === 1'b1),
      negedge SE &&& (ENABLE_D_AND_NOT_SI === 1'b1),1.0);
      
      // hold SE-LH CK-HL
      $hold(negedge CK &&& (ENABLE_D_AND_NOT_SI === 1'b1),
      posedge SE &&& (ENABLE_D_AND_NOT_SI === 1'b1),1.0);
      
      // setup SE-HL CK-HL
      $setup(negedge SE &&& (ENABLE_D_AND_NOT_SI === 1'b1),
      negedge CK &&& (ENABLE_D_AND_NOT_SI === 1'b1),1.0);
      
      // setup SE-LH CK-HL
      $setup(posedge SE &&& (ENABLE_D_AND_NOT_SI === 1'b1),
      negedge CK &&& (ENABLE_D_AND_NOT_SI === 1'b1),1.0);
      
      // hold SI-HL CK-HL
      $hold(negedge CK &&& (ENABLE_NOT_D_AND_SE === 1'b1),
      negedge SI &&& (ENABLE_NOT_D_AND_SE === 1'b1),1.0);
      
      // hold SI-LH CK-HL
      $hold(negedge CK &&& (ENABLE_NOT_D_AND_SE === 1'b1),
      posedge SI &&& (ENABLE_NOT_D_AND_SE === 1'b1),1.0);
      
      // setup SI-HL CK-HL
      $setup(negedge SI &&& (ENABLE_NOT_D_AND_SE === 1'b1),
      negedge CK &&& (ENABLE_NOT_D_AND_SE === 1'b1),1.0);
      
      // setup SI-LH CK-HL
      $setup(posedge SI &&& (ENABLE_NOT_D_AND_SE === 1'b1),
      negedge CK &&& (ENABLE_NOT_D_AND_SE === 1'b1),1.0);
      
      // hold SI-HL CK-HL
      $hold(negedge CK &&& (ENABLE_D_AND_SE === 1'b1),
      negedge SI &&& (ENABLE_D_AND_SE === 1'b1),1.0);
      
      // hold SI-LH CK-HL
      $hold(negedge CK &&& (ENABLE_D_AND_SE === 1'b1),
      posedge SI &&& (ENABLE_D_AND_SE === 1'b1),1.0);
      
      // setup SI-HL CK-HL
      $setup(negedge SI &&& (ENABLE_D_AND_SE === 1'b1),
      negedge CK &&& (ENABLE_D_AND_SE === 1'b1),1.0);
      
      // setup SI-LH CK-HL
      $setup(posedge SI &&& (ENABLE_D_AND_SE === 1'b1),
      negedge CK &&& (ENABLE_D_AND_SE === 1'b1),1.0);
      
      // mpw CK_lh 
      $width(posedge CK,1.0,0);
      
      // mpw CK_hl 
      $width(negedge CK,1.0,0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_FSDN_V2_4( Q, QN, CK, D, SI, SE );
input CK, D, SE, SI;
output Q, QN;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_FSDN_V2_4_func SAEDRVT14_FSDN_V2_4_behav_inst(.Q(Q),.QN(QN),.CK(CK),.D(D),.SI(SI),.SE(SE));
`else
   SAEDRVT14_FSDN_V2_4_func SAEDRVT14_FSDN_V2_4_inst(.Q(Q),.QN(QN),.CK(CK),.D(D),.SI(SI),.SE(SE));
   // spec_gates_begin
   not MGM_G0(MGM_W0,D);
   not MGM_G1(MGM_W1,SE);
   and MGM_G2(MGM_W2,MGM_W1,MGM_W0);
   not MGM_G3(MGM_W3,SI);
   and MGM_G4(ENABLE_NOT_D_AND_NOT_SE_AND_NOT_SI,MGM_W3,MGM_W2);
   not MGM_G5(MGM_W4,D);
   not MGM_G6(MGM_W5,SE);
   and MGM_G7(MGM_W6,MGM_W5,MGM_W4);
   and MGM_G8(ENABLE_NOT_D_AND_NOT_SE_AND_SI,SI,MGM_W6);
   not MGM_G9(MGM_W7,D);
   and MGM_G10(MGM_W8,SE,MGM_W7);
   not MGM_G11(MGM_W9,SI);
   and MGM_G12(ENABLE_NOT_D_AND_SE_AND_NOT_SI,MGM_W9,MGM_W8);
   not MGM_G13(MGM_W10,D);
   and MGM_G14(MGM_W11,SE,MGM_W10);
   and MGM_G15(ENABLE_NOT_D_AND_SE_AND_SI,SI,MGM_W11);
   not MGM_G16(MGM_W12,SE);
   and MGM_G17(MGM_W13,MGM_W12,D);
   not MGM_G18(MGM_W14,SI);
   and MGM_G19(ENABLE_D_AND_NOT_SE_AND_NOT_SI,MGM_W14,MGM_W13);
   not MGM_G20(MGM_W15,SE);
   and MGM_G21(MGM_W16,MGM_W15,D);
   and MGM_G22(ENABLE_D_AND_NOT_SE_AND_SI,SI,MGM_W16);
   and MGM_G23(MGM_W17,SE,D);
   not MGM_G24(MGM_W18,SI);
   and MGM_G25(ENABLE_D_AND_SE_AND_NOT_SI,MGM_W18,MGM_W17);
   and MGM_G26(MGM_W19,SE,D);
   and MGM_G27(ENABLE_D_AND_SE_AND_SI,SI,MGM_W19);
   not MGM_G28(MGM_W20,SE);
   not MGM_G29(MGM_W21,SI);
   and MGM_G30(ENABLE_NOT_SE_AND_NOT_SI,MGM_W21,MGM_W20);
   not MGM_G31(MGM_W22,SE);
   and MGM_G32(ENABLE_NOT_SE_AND_SI,SI,MGM_W22);
   not MGM_G33(MGM_W23,D);
   and MGM_G34(ENABLE_NOT_D_AND_SI,SI,MGM_W23);
   not MGM_G35(MGM_W24,SI);
   and MGM_G36(ENABLE_D_AND_NOT_SI,MGM_W24,D);
   not MGM_G37(MGM_W25,D);
   and MGM_G38(ENABLE_NOT_D_AND_SE,SE,MGM_W25);
   and MGM_G39(ENABLE_D_AND_SE,SE,D);
   // spec_gates_end
   // specify_block_begin
   specify

      if(D===1'b0 && SI===1'b1)
      // seq arc CK --> Q
      (negedge CK => (Q : SE))  = (1.0,1.0);
      
      if(SE===1'b0 && SI===1'b0)
      // seq arc CK --> Q
      (negedge CK => (Q : D))  = (1.0,1.0);
      
      if(D===1'b1 && SE===1'b0 && SI===1'b1 || D===1'b0 && SE===1'b1 && SI===1'b0)
      // seq arc CK --> Q
      (negedge CK => (Q : D))  = (1.0,1.0);
      
      if(D===1'b1 && SE===1'b1)
      // seq arc CK --> Q
      (negedge CK => (Q : SI))  = (1.0,1.0);
      
      ifnone
      // seq arc CK --> Q
      (negedge CK => (Q : D))  = (1.0,1.0);
      
      if(D===1'b0 && SI===1'b1)
      // seq arc CK --> QN
      (negedge CK => (QN : SE))  = (1.0,1.0);
      
      if(SE===1'b0 && SI===1'b0)
      // seq arc CK --> QN
      (negedge CK => (QN : D))  = (1.0,1.0);
      
      if(D===1'b1 && SE===1'b0 && SI===1'b1 || D===1'b0 && SE===1'b1 && SI===1'b0)
      // seq arc CK --> QN
      (negedge CK => (QN : D))  = (1.0,1.0);
      
      if(D===1'b1 && SE===1'b1)
      // seq arc CK --> QN
      (negedge CK => (QN : SI))  = (1.0,1.0);
      
      ifnone
      // seq arc CK --> QN
      (negedge CK => (QN : D))  = (1.0,1.0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      // hold D-HL CK-HL
      $hold(negedge CK &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),
      negedge D &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold D-LH CK-HL
      $hold(negedge CK &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),
      posedge D &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup D-HL CK-HL
      $setup(negedge D &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),
      negedge CK &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup D-LH CK-HL
      $setup(posedge D &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),
      negedge CK &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold D-HL CK-HL
      $hold(negedge CK &&& (ENABLE_NOT_SE_AND_SI === 1'b1),
      negedge D &&& (ENABLE_NOT_SE_AND_SI === 1'b1),1.0);
      
      // hold D-LH CK-HL
      $hold(negedge CK &&& (ENABLE_NOT_SE_AND_SI === 1'b1),
      posedge D &&& (ENABLE_NOT_SE_AND_SI === 1'b1),1.0);
      
      // setup D-HL CK-HL
      $setup(negedge D &&& (ENABLE_NOT_SE_AND_SI === 1'b1),
      negedge CK &&& (ENABLE_NOT_SE_AND_SI === 1'b1),1.0);
      
      // setup D-LH CK-HL
      $setup(posedge D &&& (ENABLE_NOT_SE_AND_SI === 1'b1),
      negedge CK &&& (ENABLE_NOT_SE_AND_SI === 1'b1),1.0);
      
      // hold SE-HL CK-HL
      $hold(negedge CK &&& (ENABLE_NOT_D_AND_SI === 1'b1),
      negedge SE &&& (ENABLE_NOT_D_AND_SI === 1'b1),1.0);
      
      // hold SE-LH CK-HL
      $hold(negedge CK &&& (ENABLE_NOT_D_AND_SI === 1'b1),
      posedge SE &&& (ENABLE_NOT_D_AND_SI === 1'b1),1.0);
      
      // setup SE-HL CK-HL
      $setup(negedge SE &&& (ENABLE_NOT_D_AND_SI === 1'b1),
      negedge CK &&& (ENABLE_NOT_D_AND_SI === 1'b1),1.0);
      
      // setup SE-LH CK-HL
      $setup(posedge SE &&& (ENABLE_NOT_D_AND_SI === 1'b1),
      negedge CK &&& (ENABLE_NOT_D_AND_SI === 1'b1),1.0);
      
      // hold SE-HL CK-HL
      $hold(negedge CK &&& (ENABLE_D_AND_NOT_SI === 1'b1),
      negedge SE &&& (ENABLE_D_AND_NOT_SI === 1'b1),1.0);
      
      // hold SE-LH CK-HL
      $hold(negedge CK &&& (ENABLE_D_AND_NOT_SI === 1'b1),
      posedge SE &&& (ENABLE_D_AND_NOT_SI === 1'b1),1.0);
      
      // setup SE-HL CK-HL
      $setup(negedge SE &&& (ENABLE_D_AND_NOT_SI === 1'b1),
      negedge CK &&& (ENABLE_D_AND_NOT_SI === 1'b1),1.0);
      
      // setup SE-LH CK-HL
      $setup(posedge SE &&& (ENABLE_D_AND_NOT_SI === 1'b1),
      negedge CK &&& (ENABLE_D_AND_NOT_SI === 1'b1),1.0);
      
      // hold SI-HL CK-HL
      $hold(negedge CK &&& (ENABLE_NOT_D_AND_SE === 1'b1),
      negedge SI &&& (ENABLE_NOT_D_AND_SE === 1'b1),1.0);
      
      // hold SI-LH CK-HL
      $hold(negedge CK &&& (ENABLE_NOT_D_AND_SE === 1'b1),
      posedge SI &&& (ENABLE_NOT_D_AND_SE === 1'b1),1.0);
      
      // setup SI-HL CK-HL
      $setup(negedge SI &&& (ENABLE_NOT_D_AND_SE === 1'b1),
      negedge CK &&& (ENABLE_NOT_D_AND_SE === 1'b1),1.0);
      
      // setup SI-LH CK-HL
      $setup(posedge SI &&& (ENABLE_NOT_D_AND_SE === 1'b1),
      negedge CK &&& (ENABLE_NOT_D_AND_SE === 1'b1),1.0);
      
      // hold SI-HL CK-HL
      $hold(negedge CK &&& (ENABLE_D_AND_SE === 1'b1),
      negedge SI &&& (ENABLE_D_AND_SE === 1'b1),1.0);
      
      // hold SI-LH CK-HL
      $hold(negedge CK &&& (ENABLE_D_AND_SE === 1'b1),
      posedge SI &&& (ENABLE_D_AND_SE === 1'b1),1.0);
      
      // setup SI-HL CK-HL
      $setup(negedge SI &&& (ENABLE_D_AND_SE === 1'b1),
      negedge CK &&& (ENABLE_D_AND_SE === 1'b1),1.0);
      
      // setup SI-LH CK-HL
      $setup(posedge SI &&& (ENABLE_D_AND_SE === 1'b1),
      negedge CK &&& (ENABLE_D_AND_SE === 1'b1),1.0);
      
      // mpw CK_lh 
      $width(posedge CK,1.0,0);
      
      // mpw CK_hl 
      $width(negedge CK,1.0,0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_FSDPMQ_0P5( Q, CK, D0, D1, S, SI, SE );
input CK, D0, D1, S, SE, SI;
output Q;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_FSDPMQ_0P5_func SAEDRVT14_FSDPMQ_0P5_behav_inst(.Q(Q),.CK(CK),.D0(D0),.D1(D1),.S(S),.SI(SI),.SE(SE));
`else
   SAEDRVT14_FSDPMQ_0P5_func SAEDRVT14_FSDPMQ_0P5_inst(.Q(Q),.CK(CK),.D0(D0),.D1(D1),.S(S),.SI(SI),.SE(SE));
   // spec_gates_begin
   not MGM_G0(MGM_W0,D0);
   not MGM_G1(MGM_W1,D1);
   and MGM_G2(MGM_W2,MGM_W1,MGM_W0);
   not MGM_G3(MGM_W3,S);
   and MGM_G4(MGM_W4,MGM_W3,MGM_W2);
   not MGM_G5(MGM_W5,SE);
   and MGM_G6(MGM_W6,MGM_W5,MGM_W4);
   not MGM_G7(MGM_W7,SI);
   and MGM_G8(ENABLE_NOT_D0_AND_NOT_D1_AND_NOT_S_AND_NOT_SE_AND_NOT_SI,MGM_W7,MGM_W6);
   not MGM_G9(MGM_W8,D0);
   not MGM_G10(MGM_W9,D1);
   and MGM_G11(MGM_W10,MGM_W9,MGM_W8);
   not MGM_G12(MGM_W11,S);
   and MGM_G13(MGM_W12,MGM_W11,MGM_W10);
   not MGM_G14(MGM_W13,SE);
   and MGM_G15(MGM_W14,MGM_W13,MGM_W12);
   and MGM_G16(ENABLE_NOT_D0_AND_NOT_D1_AND_NOT_S_AND_NOT_SE_AND_SI,SI,MGM_W14);
   not MGM_G17(MGM_W15,D0);
   not MGM_G18(MGM_W16,D1);
   and MGM_G19(MGM_W17,MGM_W16,MGM_W15);
   not MGM_G20(MGM_W18,S);
   and MGM_G21(MGM_W19,MGM_W18,MGM_W17);
   and MGM_G22(MGM_W20,SE,MGM_W19);
   not MGM_G23(MGM_W21,SI);
   and MGM_G24(ENABLE_NOT_D0_AND_NOT_D1_AND_NOT_S_AND_SE_AND_NOT_SI,MGM_W21,MGM_W20);
   not MGM_G25(MGM_W22,D0);
   not MGM_G26(MGM_W23,D1);
   and MGM_G27(MGM_W24,MGM_W23,MGM_W22);
   not MGM_G28(MGM_W25,S);
   and MGM_G29(MGM_W26,MGM_W25,MGM_W24);
   and MGM_G30(MGM_W27,SE,MGM_W26);
   and MGM_G31(ENABLE_NOT_D0_AND_NOT_D1_AND_NOT_S_AND_SE_AND_SI,SI,MGM_W27);
   not MGM_G32(MGM_W28,D0);
   not MGM_G33(MGM_W29,D1);
   and MGM_G34(MGM_W30,MGM_W29,MGM_W28);
   and MGM_G35(MGM_W31,S,MGM_W30);
   not MGM_G36(MGM_W32,SE);
   and MGM_G37(MGM_W33,MGM_W32,MGM_W31);
   not MGM_G38(MGM_W34,SI);
   and MGM_G39(ENABLE_NOT_D0_AND_NOT_D1_AND_S_AND_NOT_SE_AND_NOT_SI,MGM_W34,MGM_W33);
   not MGM_G40(MGM_W35,D0);
   not MGM_G41(MGM_W36,D1);
   and MGM_G42(MGM_W37,MGM_W36,MGM_W35);
   and MGM_G43(MGM_W38,S,MGM_W37);
   not MGM_G44(MGM_W39,SE);
   and MGM_G45(MGM_W40,MGM_W39,MGM_W38);
   and MGM_G46(ENABLE_NOT_D0_AND_NOT_D1_AND_S_AND_NOT_SE_AND_SI,SI,MGM_W40);
   not MGM_G47(MGM_W41,D0);
   not MGM_G48(MGM_W42,D1);
   and MGM_G49(MGM_W43,MGM_W42,MGM_W41);
   and MGM_G50(MGM_W44,S,MGM_W43);
   and MGM_G51(MGM_W45,SE,MGM_W44);
   not MGM_G52(MGM_W46,SI);
   and MGM_G53(ENABLE_NOT_D0_AND_NOT_D1_AND_S_AND_SE_AND_NOT_SI,MGM_W46,MGM_W45);
   not MGM_G54(MGM_W47,D0);
   not MGM_G55(MGM_W48,D1);
   and MGM_G56(MGM_W49,MGM_W48,MGM_W47);
   and MGM_G57(MGM_W50,S,MGM_W49);
   and MGM_G58(MGM_W51,SE,MGM_W50);
   and MGM_G59(ENABLE_NOT_D0_AND_NOT_D1_AND_S_AND_SE_AND_SI,SI,MGM_W51);
   not MGM_G60(MGM_W52,D0);
   and MGM_G61(MGM_W53,D1,MGM_W52);
   not MGM_G62(MGM_W54,S);
   and MGM_G63(MGM_W55,MGM_W54,MGM_W53);
   not MGM_G64(MGM_W56,SE);
   and MGM_G65(MGM_W57,MGM_W56,MGM_W55);
   not MGM_G66(MGM_W58,SI);
   and MGM_G67(ENABLE_NOT_D0_AND_D1_AND_NOT_S_AND_NOT_SE_AND_NOT_SI,MGM_W58,MGM_W57);
   not MGM_G68(MGM_W59,D0);
   and MGM_G69(MGM_W60,D1,MGM_W59);
   not MGM_G70(MGM_W61,S);
   and MGM_G71(MGM_W62,MGM_W61,MGM_W60);
   not MGM_G72(MGM_W63,SE);
   and MGM_G73(MGM_W64,MGM_W63,MGM_W62);
   and MGM_G74(ENABLE_NOT_D0_AND_D1_AND_NOT_S_AND_NOT_SE_AND_SI,SI,MGM_W64);
   not MGM_G75(MGM_W65,D0);
   and MGM_G76(MGM_W66,D1,MGM_W65);
   not MGM_G77(MGM_W67,S);
   and MGM_G78(MGM_W68,MGM_W67,MGM_W66);
   and MGM_G79(MGM_W69,SE,MGM_W68);
   not MGM_G80(MGM_W70,SI);
   and MGM_G81(ENABLE_NOT_D0_AND_D1_AND_NOT_S_AND_SE_AND_NOT_SI,MGM_W70,MGM_W69);
   not MGM_G82(MGM_W71,D0);
   and MGM_G83(MGM_W72,D1,MGM_W71);
   not MGM_G84(MGM_W73,S);
   and MGM_G85(MGM_W74,MGM_W73,MGM_W72);
   and MGM_G86(MGM_W75,SE,MGM_W74);
   and MGM_G87(ENABLE_NOT_D0_AND_D1_AND_NOT_S_AND_SE_AND_SI,SI,MGM_W75);
   not MGM_G88(MGM_W76,D0);
   and MGM_G89(MGM_W77,D1,MGM_W76);
   and MGM_G90(MGM_W78,S,MGM_W77);
   not MGM_G91(MGM_W79,SE);
   and MGM_G92(MGM_W80,MGM_W79,MGM_W78);
   not MGM_G93(MGM_W81,SI);
   and MGM_G94(ENABLE_NOT_D0_AND_D1_AND_S_AND_NOT_SE_AND_NOT_SI,MGM_W81,MGM_W80);
   not MGM_G95(MGM_W82,D0);
   and MGM_G96(MGM_W83,D1,MGM_W82);
   and MGM_G97(MGM_W84,S,MGM_W83);
   not MGM_G98(MGM_W85,SE);
   and MGM_G99(MGM_W86,MGM_W85,MGM_W84);
   and MGM_G100(ENABLE_NOT_D0_AND_D1_AND_S_AND_NOT_SE_AND_SI,SI,MGM_W86);
   not MGM_G101(MGM_W87,D0);
   and MGM_G102(MGM_W88,D1,MGM_W87);
   and MGM_G103(MGM_W89,S,MGM_W88);
   and MGM_G104(MGM_W90,SE,MGM_W89);
   not MGM_G105(MGM_W91,SI);
   and MGM_G106(ENABLE_NOT_D0_AND_D1_AND_S_AND_SE_AND_NOT_SI,MGM_W91,MGM_W90);
   not MGM_G107(MGM_W92,D0);
   and MGM_G108(MGM_W93,D1,MGM_W92);
   and MGM_G109(MGM_W94,S,MGM_W93);
   and MGM_G110(MGM_W95,SE,MGM_W94);
   and MGM_G111(ENABLE_NOT_D0_AND_D1_AND_S_AND_SE_AND_SI,SI,MGM_W95);
   not MGM_G112(MGM_W96,D1);
   and MGM_G113(MGM_W97,MGM_W96,D0);
   not MGM_G114(MGM_W98,S);
   and MGM_G115(MGM_W99,MGM_W98,MGM_W97);
   not MGM_G116(MGM_W100,SE);
   and MGM_G117(MGM_W101,MGM_W100,MGM_W99);
   not MGM_G118(MGM_W102,SI);
   and MGM_G119(ENABLE_D0_AND_NOT_D1_AND_NOT_S_AND_NOT_SE_AND_NOT_SI,MGM_W102,MGM_W101);
   not MGM_G120(MGM_W103,D1);
   and MGM_G121(MGM_W104,MGM_W103,D0);
   not MGM_G122(MGM_W105,S);
   and MGM_G123(MGM_W106,MGM_W105,MGM_W104);
   not MGM_G124(MGM_W107,SE);
   and MGM_G125(MGM_W108,MGM_W107,MGM_W106);
   and MGM_G126(ENABLE_D0_AND_NOT_D1_AND_NOT_S_AND_NOT_SE_AND_SI,SI,MGM_W108);
   not MGM_G127(MGM_W109,D1);
   and MGM_G128(MGM_W110,MGM_W109,D0);
   not MGM_G129(MGM_W111,S);
   and MGM_G130(MGM_W112,MGM_W111,MGM_W110);
   and MGM_G131(MGM_W113,SE,MGM_W112);
   not MGM_G132(MGM_W114,SI);
   and MGM_G133(ENABLE_D0_AND_NOT_D1_AND_NOT_S_AND_SE_AND_NOT_SI,MGM_W114,MGM_W113);
   not MGM_G134(MGM_W115,D1);
   and MGM_G135(MGM_W116,MGM_W115,D0);
   not MGM_G136(MGM_W117,S);
   and MGM_G137(MGM_W118,MGM_W117,MGM_W116);
   and MGM_G138(MGM_W119,SE,MGM_W118);
   and MGM_G139(ENABLE_D0_AND_NOT_D1_AND_NOT_S_AND_SE_AND_SI,SI,MGM_W119);
   not MGM_G140(MGM_W120,D1);
   and MGM_G141(MGM_W121,MGM_W120,D0);
   and MGM_G142(MGM_W122,S,MGM_W121);
   not MGM_G143(MGM_W123,SE);
   and MGM_G144(MGM_W124,MGM_W123,MGM_W122);
   not MGM_G145(MGM_W125,SI);
   and MGM_G146(ENABLE_D0_AND_NOT_D1_AND_S_AND_NOT_SE_AND_NOT_SI,MGM_W125,MGM_W124);
   not MGM_G147(MGM_W126,D1);
   and MGM_G148(MGM_W127,MGM_W126,D0);
   and MGM_G149(MGM_W128,S,MGM_W127);
   not MGM_G150(MGM_W129,SE);
   and MGM_G151(MGM_W130,MGM_W129,MGM_W128);
   and MGM_G152(ENABLE_D0_AND_NOT_D1_AND_S_AND_NOT_SE_AND_SI,SI,MGM_W130);
   not MGM_G153(MGM_W131,D1);
   and MGM_G154(MGM_W132,MGM_W131,D0);
   and MGM_G155(MGM_W133,S,MGM_W132);
   and MGM_G156(MGM_W134,SE,MGM_W133);
   not MGM_G157(MGM_W135,SI);
   and MGM_G158(ENABLE_D0_AND_NOT_D1_AND_S_AND_SE_AND_NOT_SI,MGM_W135,MGM_W134);
   not MGM_G159(MGM_W136,D1);
   and MGM_G160(MGM_W137,MGM_W136,D0);
   and MGM_G161(MGM_W138,S,MGM_W137);
   and MGM_G162(MGM_W139,SE,MGM_W138);
   and MGM_G163(ENABLE_D0_AND_NOT_D1_AND_S_AND_SE_AND_SI,SI,MGM_W139);
   and MGM_G164(MGM_W140,D1,D0);
   not MGM_G165(MGM_W141,S);
   and MGM_G166(MGM_W142,MGM_W141,MGM_W140);
   not MGM_G167(MGM_W143,SE);
   and MGM_G168(MGM_W144,MGM_W143,MGM_W142);
   not MGM_G169(MGM_W145,SI);
   and MGM_G170(ENABLE_D0_AND_D1_AND_NOT_S_AND_NOT_SE_AND_NOT_SI,MGM_W145,MGM_W144);
   and MGM_G171(MGM_W146,D1,D0);
   not MGM_G172(MGM_W147,S);
   and MGM_G173(MGM_W148,MGM_W147,MGM_W146);
   not MGM_G174(MGM_W149,SE);
   and MGM_G175(MGM_W150,MGM_W149,MGM_W148);
   and MGM_G176(ENABLE_D0_AND_D1_AND_NOT_S_AND_NOT_SE_AND_SI,SI,MGM_W150);
   and MGM_G177(MGM_W151,D1,D0);
   not MGM_G178(MGM_W152,S);
   and MGM_G179(MGM_W153,MGM_W152,MGM_W151);
   and MGM_G180(MGM_W154,SE,MGM_W153);
   not MGM_G181(MGM_W155,SI);
   and MGM_G182(ENABLE_D0_AND_D1_AND_NOT_S_AND_SE_AND_NOT_SI,MGM_W155,MGM_W154);
   and MGM_G183(MGM_W156,D1,D0);
   not MGM_G184(MGM_W157,S);
   and MGM_G185(MGM_W158,MGM_W157,MGM_W156);
   and MGM_G186(MGM_W159,SE,MGM_W158);
   and MGM_G187(ENABLE_D0_AND_D1_AND_NOT_S_AND_SE_AND_SI,SI,MGM_W159);
   and MGM_G188(MGM_W160,D1,D0);
   and MGM_G189(MGM_W161,S,MGM_W160);
   not MGM_G190(MGM_W162,SE);
   and MGM_G191(MGM_W163,MGM_W162,MGM_W161);
   not MGM_G192(MGM_W164,SI);
   and MGM_G193(ENABLE_D0_AND_D1_AND_S_AND_NOT_SE_AND_NOT_SI,MGM_W164,MGM_W163);
   and MGM_G194(MGM_W165,D1,D0);
   and MGM_G195(MGM_W166,S,MGM_W165);
   not MGM_G196(MGM_W167,SE);
   and MGM_G197(MGM_W168,MGM_W167,MGM_W166);
   and MGM_G198(ENABLE_D0_AND_D1_AND_S_AND_NOT_SE_AND_SI,SI,MGM_W168);
   and MGM_G199(MGM_W169,D1,D0);
   and MGM_G200(MGM_W170,S,MGM_W169);
   and MGM_G201(MGM_W171,SE,MGM_W170);
   not MGM_G202(MGM_W172,SI);
   and MGM_G203(ENABLE_D0_AND_D1_AND_S_AND_SE_AND_NOT_SI,MGM_W172,MGM_W171);
   and MGM_G204(MGM_W173,D1,D0);
   and MGM_G205(MGM_W174,S,MGM_W173);
   and MGM_G206(MGM_W175,SE,MGM_W174);
   and MGM_G207(ENABLE_D0_AND_D1_AND_S_AND_SE_AND_SI,SI,MGM_W175);
   not MGM_G208(MGM_W176,D1);
   not MGM_G209(MGM_W177,S);
   and MGM_G210(MGM_W178,MGM_W177,MGM_W176);
   not MGM_G211(MGM_W179,SE);
   and MGM_G212(MGM_W180,MGM_W179,MGM_W178);
   not MGM_G213(MGM_W181,SI);
   and MGM_G214(ENABLE_NOT_D1_AND_NOT_S_AND_NOT_SE_AND_NOT_SI,MGM_W181,MGM_W180);
   not MGM_G215(MGM_W182,D1);
   not MGM_G216(MGM_W183,S);
   and MGM_G217(MGM_W184,MGM_W183,MGM_W182);
   not MGM_G218(MGM_W185,SE);
   and MGM_G219(MGM_W186,MGM_W185,MGM_W184);
   and MGM_G220(ENABLE_NOT_D1_AND_NOT_S_AND_NOT_SE_AND_SI,SI,MGM_W186);
   not MGM_G221(MGM_W187,S);
   and MGM_G222(MGM_W188,MGM_W187,D1);
   not MGM_G223(MGM_W189,SE);
   and MGM_G224(MGM_W190,MGM_W189,MGM_W188);
   not MGM_G225(MGM_W191,SI);
   and MGM_G226(ENABLE_D1_AND_NOT_S_AND_NOT_SE_AND_NOT_SI,MGM_W191,MGM_W190);
   not MGM_G227(MGM_W192,S);
   and MGM_G228(MGM_W193,MGM_W192,D1);
   not MGM_G229(MGM_W194,SE);
   and MGM_G230(MGM_W195,MGM_W194,MGM_W193);
   and MGM_G231(ENABLE_D1_AND_NOT_S_AND_NOT_SE_AND_SI,SI,MGM_W195);
   not MGM_G232(MGM_W196,D0);
   and MGM_G233(MGM_W197,S,MGM_W196);
   not MGM_G234(MGM_W198,SE);
   and MGM_G235(MGM_W199,MGM_W198,MGM_W197);
   not MGM_G236(MGM_W200,SI);
   and MGM_G237(ENABLE_NOT_D0_AND_S_AND_NOT_SE_AND_NOT_SI,MGM_W200,MGM_W199);
   not MGM_G238(MGM_W201,D0);
   and MGM_G239(MGM_W202,S,MGM_W201);
   not MGM_G240(MGM_W203,SE);
   and MGM_G241(MGM_W204,MGM_W203,MGM_W202);
   and MGM_G242(ENABLE_NOT_D0_AND_S_AND_NOT_SE_AND_SI,SI,MGM_W204);
   and MGM_G243(MGM_W205,S,D0);
   not MGM_G244(MGM_W206,SE);
   and MGM_G245(MGM_W207,MGM_W206,MGM_W205);
   not MGM_G246(MGM_W208,SI);
   and MGM_G247(ENABLE_D0_AND_S_AND_NOT_SE_AND_NOT_SI,MGM_W208,MGM_W207);
   and MGM_G248(MGM_W209,S,D0);
   not MGM_G249(MGM_W210,SE);
   and MGM_G250(MGM_W211,MGM_W210,MGM_W209);
   and MGM_G251(ENABLE_D0_AND_S_AND_NOT_SE_AND_SI,SI,MGM_W211);
   not MGM_G252(MGM_W212,D0);
   and MGM_G253(MGM_W213,D1,MGM_W212);
   not MGM_G254(MGM_W214,SE);
   and MGM_G255(MGM_W215,MGM_W214,MGM_W213);
   not MGM_G256(MGM_W216,SI);
   and MGM_G257(ENABLE_NOT_D0_AND_D1_AND_NOT_SE_AND_NOT_SI,MGM_W216,MGM_W215);
   not MGM_G258(MGM_W217,D0);
   and MGM_G259(MGM_W218,D1,MGM_W217);
   not MGM_G260(MGM_W219,SE);
   and MGM_G261(MGM_W220,MGM_W219,MGM_W218);
   and MGM_G262(ENABLE_NOT_D0_AND_D1_AND_NOT_SE_AND_SI,SI,MGM_W220);
   not MGM_G263(MGM_W221,D1);
   and MGM_G264(MGM_W222,MGM_W221,D0);
   not MGM_G265(MGM_W223,SE);
   and MGM_G266(MGM_W224,MGM_W223,MGM_W222);
   not MGM_G267(MGM_W225,SI);
   and MGM_G268(ENABLE_D0_AND_NOT_D1_AND_NOT_SE_AND_NOT_SI,MGM_W225,MGM_W224);
   not MGM_G269(MGM_W226,D1);
   and MGM_G270(MGM_W227,MGM_W226,D0);
   not MGM_G271(MGM_W228,SE);
   and MGM_G272(MGM_W229,MGM_W228,MGM_W227);
   and MGM_G273(ENABLE_D0_AND_NOT_D1_AND_NOT_SE_AND_SI,SI,MGM_W229);
   not MGM_G274(MGM_W230,D0);
   not MGM_G275(MGM_W231,D1);
   and MGM_G276(MGM_W232,MGM_W231,MGM_W230);
   not MGM_G277(MGM_W233,S);
   and MGM_G278(MGM_W234,MGM_W233,MGM_W232);
   and MGM_G279(ENABLE_NOT_D0_AND_NOT_D1_AND_NOT_S_AND_SI,SI,MGM_W234);
   not MGM_G280(MGM_W235,D0);
   not MGM_G281(MGM_W236,D1);
   and MGM_G282(MGM_W237,MGM_W236,MGM_W235);
   and MGM_G283(MGM_W238,S,MGM_W237);
   and MGM_G284(ENABLE_NOT_D0_AND_NOT_D1_AND_S_AND_SI,SI,MGM_W238);
   not MGM_G285(MGM_W239,D0);
   and MGM_G286(MGM_W240,D1,MGM_W239);
   not MGM_G287(MGM_W241,S);
   and MGM_G288(MGM_W242,MGM_W241,MGM_W240);
   and MGM_G289(ENABLE_NOT_D0_AND_D1_AND_NOT_S_AND_SI,SI,MGM_W242);
   not MGM_G290(MGM_W243,D0);
   and MGM_G291(MGM_W244,D1,MGM_W243);
   and MGM_G292(MGM_W245,S,MGM_W244);
   not MGM_G293(MGM_W246,SI);
   and MGM_G294(ENABLE_NOT_D0_AND_D1_AND_S_AND_NOT_SI,MGM_W246,MGM_W245);
   not MGM_G295(MGM_W247,D1);
   and MGM_G296(MGM_W248,MGM_W247,D0);
   not MGM_G297(MGM_W249,S);
   and MGM_G298(MGM_W250,MGM_W249,MGM_W248);
   not MGM_G299(MGM_W251,SI);
   and MGM_G300(ENABLE_D0_AND_NOT_D1_AND_NOT_S_AND_NOT_SI,MGM_W251,MGM_W250);
   not MGM_G301(MGM_W252,D1);
   and MGM_G302(MGM_W253,MGM_W252,D0);
   and MGM_G303(MGM_W254,S,MGM_W253);
   and MGM_G304(ENABLE_D0_AND_NOT_D1_AND_S_AND_SI,SI,MGM_W254);
   and MGM_G305(MGM_W255,D1,D0);
   not MGM_G306(MGM_W256,S);
   and MGM_G307(MGM_W257,MGM_W256,MGM_W255);
   not MGM_G308(MGM_W258,SI);
   and MGM_G309(ENABLE_D0_AND_D1_AND_NOT_S_AND_NOT_SI,MGM_W258,MGM_W257);
   and MGM_G310(MGM_W259,D1,D0);
   and MGM_G311(MGM_W260,S,MGM_W259);
   not MGM_G312(MGM_W261,SI);
   and MGM_G313(ENABLE_D0_AND_D1_AND_S_AND_NOT_SI,MGM_W261,MGM_W260);
   not MGM_G314(MGM_W262,D0);
   not MGM_G315(MGM_W263,D1);
   and MGM_G316(MGM_W264,MGM_W263,MGM_W262);
   not MGM_G317(MGM_W265,S);
   and MGM_G318(MGM_W266,MGM_W265,MGM_W264);
   and MGM_G319(ENABLE_NOT_D0_AND_NOT_D1_AND_NOT_S_AND_SE,SE,MGM_W266);
   not MGM_G320(MGM_W267,D0);
   not MGM_G321(MGM_W268,D1);
   and MGM_G322(MGM_W269,MGM_W268,MGM_W267);
   and MGM_G323(MGM_W270,S,MGM_W269);
   and MGM_G324(ENABLE_NOT_D0_AND_NOT_D1_AND_S_AND_SE,SE,MGM_W270);
   not MGM_G325(MGM_W271,D0);
   and MGM_G326(MGM_W272,D1,MGM_W271);
   not MGM_G327(MGM_W273,S);
   and MGM_G328(MGM_W274,MGM_W273,MGM_W272);
   and MGM_G329(ENABLE_NOT_D0_AND_D1_AND_NOT_S_AND_SE,SE,MGM_W274);
   not MGM_G330(MGM_W275,D0);
   and MGM_G331(MGM_W276,D1,MGM_W275);
   and MGM_G332(MGM_W277,S,MGM_W276);
   and MGM_G333(ENABLE_NOT_D0_AND_D1_AND_S_AND_SE,SE,MGM_W277);
   not MGM_G334(MGM_W278,D1);
   and MGM_G335(MGM_W279,MGM_W278,D0);
   not MGM_G336(MGM_W280,S);
   and MGM_G337(MGM_W281,MGM_W280,MGM_W279);
   and MGM_G338(ENABLE_D0_AND_NOT_D1_AND_NOT_S_AND_SE,SE,MGM_W281);
   not MGM_G339(MGM_W282,D1);
   and MGM_G340(MGM_W283,MGM_W282,D0);
   and MGM_G341(MGM_W284,S,MGM_W283);
   and MGM_G342(ENABLE_D0_AND_NOT_D1_AND_S_AND_SE,SE,MGM_W284);
   and MGM_G343(MGM_W285,D1,D0);
   not MGM_G344(MGM_W286,S);
   and MGM_G345(MGM_W287,MGM_W286,MGM_W285);
   and MGM_G346(ENABLE_D0_AND_D1_AND_NOT_S_AND_SE,SE,MGM_W287);
   and MGM_G347(MGM_W288,D1,D0);
   and MGM_G348(MGM_W289,S,MGM_W288);
   and MGM_G349(ENABLE_D0_AND_D1_AND_S_AND_SE,SE,MGM_W289);
   // spec_gates_end
   // specify_block_begin
   specify

      if(D0===1'b0 && D1===1'b0 && S===1'b0 && SI===1'b1)
      // seq arc CK --> Q
      (posedge CK => (Q : SE))  = (1.0,1.0);
      
      if(D0===1'b0 && D1===1'b0 && S===1'b1 && SI===1'b1)
      // seq arc CK --> Q
      (posedge CK => (Q : SE))  = (1.0,1.0);
      
      if(D0===1'b0 && D1===1'b1 && S===1'b0 && SI===1'b1)
      // seq arc CK --> Q
      (posedge CK => (Q : SE))  = (1.0,1.0);
      
      if(D0===1'b0 && D1===1'b1 && S===1'b1 && SE===1'b0 && SI===1'b1 || D0===1'b0 && D1===1'b0 && S===1'b0 && SE===1'b0 && SI===1'b0)
      // seq arc CK --> Q
      (posedge CK => (Q : S))  = (1.0,1.0);
      
      if(D0===1'b0 && D1===1'b1 && S===1'b1 && SE===1'b1)
      // seq arc CK --> Q
      (posedge CK => (Q : SI))  = (1.0,1.0);
      
      if(D0===1'b0 && S===1'b1 && SE===1'b0 && SI===1'b0)
      // seq arc CK --> Q
      (posedge CK => (Q : D1))  = (1.0,1.0);
      
      if(D0===1'b1 && D1===1'b0 && S===1'b0 && SI===1'b0)
      // seq arc CK --> Q
      (posedge CK => (Q : SE))  = (1.0,1.0);
      
      if(D0===1'b1 && D1===1'b0 && S===1'b0 && SE===1'b1 && SI===1'b1 || D0===1'b0 && D1===1'b0 && S===1'b0 && SE===1'b1 && SI===1'b0)
      // seq arc CK --> Q
      (posedge CK => (Q : D0))  = (1.0,1.0);
      
      if(D0===1'b1 && D1===1'b0 && SE===1'b0 && SI===1'b1)
      // seq arc CK --> Q
      (posedge CK => (Q : S))  = (1.0,1.0);
      
      if(D0===1'b1 && D1===1'b0 && S===1'b1 && SE===1'b1)
      // seq arc CK --> Q
      (posedge CK => (Q : SI))  = (1.0,1.0);
      
      if(D0===1'b1 && D1===1'b1 && S===1'b0 && SE===1'b0 && SI===1'b1 || D0===1'b0 && D1===1'b0 && S===1'b1 && SE===1'b1 && SI===1'b0)
      // seq arc CK --> Q
      (posedge CK => (Q : D0))  = (1.0,1.0);
      
      if(D0===1'b1 && D1===1'b1 && S===1'b0 && SE===1'b1)
      // seq arc CK --> Q
      (posedge CK => (Q : SI))  = (1.0,1.0);
      
      if(D0===1'b1 && D1===1'b1 && S===1'b1 && SE===1'b0 && SI===1'b1 || D0===1'b0 && D1===1'b1 && S===1'b0 && SE===1'b1 && SI===1'b0)
      // seq arc CK --> Q
      (posedge CK => (Q : D0))  = (1.0,1.0);
      
      if(D0===1'b1 && D1===1'b1 && S===1'b1 && SE===1'b1)
      // seq arc CK --> Q
      (posedge CK => (Q : SI))  = (1.0,1.0);
      
      if(D0===1'b1 && S===1'b1 && SE===1'b0 && SI===1'b0)
      // seq arc CK --> Q
      (posedge CK => (Q : D1))  = (1.0,1.0);
      
      if(D1===1'b1 && S===1'b0 && SE===1'b0 && SI===1'b0)
      // seq arc CK --> Q
      (posedge CK => (Q : D0))  = (1.0,1.0);
      
      ifnone
      // seq arc CK --> Q
      (posedge CK => (Q : D0))  = (1.0,1.0);
      
      $width(negedge CK &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_NOT_S_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_NOT_S_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_NOT_S_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_NOT_S_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_NOT_S_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_NOT_S_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_NOT_S_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_NOT_S_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_S_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_S_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_S_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_S_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_S_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_S_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_S_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_S_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D0_AND_D1_AND_NOT_S_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D0_AND_D1_AND_NOT_S_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D0_AND_D1_AND_NOT_S_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D0_AND_D1_AND_NOT_S_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D0_AND_D1_AND_NOT_S_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D0_AND_D1_AND_NOT_S_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D0_AND_D1_AND_NOT_S_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D0_AND_D1_AND_NOT_S_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D0_AND_D1_AND_S_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D0_AND_D1_AND_S_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D0_AND_D1_AND_S_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D0_AND_D1_AND_S_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D0_AND_D1_AND_S_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D0_AND_D1_AND_S_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D0_AND_D1_AND_S_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D0_AND_D1_AND_S_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D0_AND_NOT_D1_AND_NOT_S_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D0_AND_NOT_D1_AND_NOT_S_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D0_AND_NOT_D1_AND_NOT_S_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D0_AND_NOT_D1_AND_NOT_S_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D0_AND_NOT_D1_AND_NOT_S_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D0_AND_NOT_D1_AND_NOT_S_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D0_AND_NOT_D1_AND_NOT_S_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D0_AND_NOT_D1_AND_NOT_S_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D0_AND_NOT_D1_AND_S_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D0_AND_NOT_D1_AND_S_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D0_AND_NOT_D1_AND_S_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D0_AND_NOT_D1_AND_S_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D0_AND_NOT_D1_AND_S_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D0_AND_NOT_D1_AND_S_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D0_AND_NOT_D1_AND_S_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D0_AND_NOT_D1_AND_S_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D0_AND_D1_AND_NOT_S_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D0_AND_D1_AND_NOT_S_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D0_AND_D1_AND_NOT_S_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D0_AND_D1_AND_NOT_S_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D0_AND_D1_AND_NOT_S_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D0_AND_D1_AND_NOT_S_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D0_AND_D1_AND_NOT_S_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D0_AND_D1_AND_NOT_S_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D0_AND_D1_AND_S_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D0_AND_D1_AND_S_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D0_AND_D1_AND_S_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D0_AND_D1_AND_S_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D0_AND_D1_AND_S_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D0_AND_D1_AND_S_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D0_AND_D1_AND_S_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D0_AND_D1_AND_S_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      // hold D0-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D1_AND_NOT_S_AND_NOT_SE_AND_NOT_SI === 1'b1),
      negedge D0 &&& (ENABLE_NOT_D1_AND_NOT_S_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold D0-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D1_AND_NOT_S_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge D0 &&& (ENABLE_NOT_D1_AND_NOT_S_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup D0-HL CK-LH
      $setup(negedge D0 &&& (ENABLE_NOT_D1_AND_NOT_S_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D1_AND_NOT_S_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup D0-LH CK-LH
      $setup(posedge D0 &&& (ENABLE_NOT_D1_AND_NOT_S_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D1_AND_NOT_S_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold D0-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D1_AND_NOT_S_AND_NOT_SE_AND_SI === 1'b1),
      negedge D0 &&& (ENABLE_NOT_D1_AND_NOT_S_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // hold D0-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D1_AND_NOT_S_AND_NOT_SE_AND_SI === 1'b1),
      posedge D0 &&& (ENABLE_NOT_D1_AND_NOT_S_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // setup D0-HL CK-LH
      $setup(negedge D0 &&& (ENABLE_NOT_D1_AND_NOT_S_AND_NOT_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D1_AND_NOT_S_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // setup D0-LH CK-LH
      $setup(posedge D0 &&& (ENABLE_NOT_D1_AND_NOT_S_AND_NOT_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D1_AND_NOT_S_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // hold D0-HL CK-LH
      $hold(posedge CK &&& (ENABLE_D1_AND_NOT_S_AND_NOT_SE_AND_NOT_SI === 1'b1),
      negedge D0 &&& (ENABLE_D1_AND_NOT_S_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold D0-LH CK-LH
      $hold(posedge CK &&& (ENABLE_D1_AND_NOT_S_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge D0 &&& (ENABLE_D1_AND_NOT_S_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup D0-HL CK-LH
      $setup(negedge D0 &&& (ENABLE_D1_AND_NOT_S_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_D1_AND_NOT_S_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup D0-LH CK-LH
      $setup(posedge D0 &&& (ENABLE_D1_AND_NOT_S_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_D1_AND_NOT_S_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold D0-HL CK-LH
      $hold(posedge CK &&& (ENABLE_D1_AND_NOT_S_AND_NOT_SE_AND_SI === 1'b1),
      negedge D0 &&& (ENABLE_D1_AND_NOT_S_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // hold D0-LH CK-LH
      $hold(posedge CK &&& (ENABLE_D1_AND_NOT_S_AND_NOT_SE_AND_SI === 1'b1),
      posedge D0 &&& (ENABLE_D1_AND_NOT_S_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // setup D0-HL CK-LH
      $setup(negedge D0 &&& (ENABLE_D1_AND_NOT_S_AND_NOT_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_D1_AND_NOT_S_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // setup D0-LH CK-LH
      $setup(posedge D0 &&& (ENABLE_D1_AND_NOT_S_AND_NOT_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_D1_AND_NOT_S_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // hold D1-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D0_AND_S_AND_NOT_SE_AND_NOT_SI === 1'b1),
      negedge D1 &&& (ENABLE_NOT_D0_AND_S_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold D1-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D0_AND_S_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge D1 &&& (ENABLE_NOT_D0_AND_S_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup D1-HL CK-LH
      $setup(negedge D1 &&& (ENABLE_NOT_D0_AND_S_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D0_AND_S_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup D1-LH CK-LH
      $setup(posedge D1 &&& (ENABLE_NOT_D0_AND_S_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D0_AND_S_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold D1-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D0_AND_S_AND_NOT_SE_AND_SI === 1'b1),
      negedge D1 &&& (ENABLE_NOT_D0_AND_S_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // hold D1-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D0_AND_S_AND_NOT_SE_AND_SI === 1'b1),
      posedge D1 &&& (ENABLE_NOT_D0_AND_S_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // setup D1-HL CK-LH
      $setup(negedge D1 &&& (ENABLE_NOT_D0_AND_S_AND_NOT_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D0_AND_S_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // setup D1-LH CK-LH
      $setup(posedge D1 &&& (ENABLE_NOT_D0_AND_S_AND_NOT_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D0_AND_S_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // hold D1-HL CK-LH
      $hold(posedge CK &&& (ENABLE_D0_AND_S_AND_NOT_SE_AND_NOT_SI === 1'b1),
      negedge D1 &&& (ENABLE_D0_AND_S_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold D1-LH CK-LH
      $hold(posedge CK &&& (ENABLE_D0_AND_S_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge D1 &&& (ENABLE_D0_AND_S_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup D1-HL CK-LH
      $setup(negedge D1 &&& (ENABLE_D0_AND_S_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_D0_AND_S_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup D1-LH CK-LH
      $setup(posedge D1 &&& (ENABLE_D0_AND_S_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_D0_AND_S_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold D1-HL CK-LH
      $hold(posedge CK &&& (ENABLE_D0_AND_S_AND_NOT_SE_AND_SI === 1'b1),
      negedge D1 &&& (ENABLE_D0_AND_S_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // hold D1-LH CK-LH
      $hold(posedge CK &&& (ENABLE_D0_AND_S_AND_NOT_SE_AND_SI === 1'b1),
      posedge D1 &&& (ENABLE_D0_AND_S_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // setup D1-HL CK-LH
      $setup(negedge D1 &&& (ENABLE_D0_AND_S_AND_NOT_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_D0_AND_S_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // setup D1-LH CK-LH
      $setup(posedge D1 &&& (ENABLE_D0_AND_S_AND_NOT_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_D0_AND_S_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // hold S-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D0_AND_D1_AND_NOT_SE_AND_NOT_SI === 1'b1),
      negedge S &&& (ENABLE_NOT_D0_AND_D1_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold S-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D0_AND_D1_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge S &&& (ENABLE_NOT_D0_AND_D1_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup S-HL CK-LH
      $setup(negedge S &&& (ENABLE_NOT_D0_AND_D1_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D0_AND_D1_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup S-LH CK-LH
      $setup(posedge S &&& (ENABLE_NOT_D0_AND_D1_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D0_AND_D1_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold S-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D0_AND_D1_AND_NOT_SE_AND_SI === 1'b1),
      negedge S &&& (ENABLE_NOT_D0_AND_D1_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // hold S-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D0_AND_D1_AND_NOT_SE_AND_SI === 1'b1),
      posedge S &&& (ENABLE_NOT_D0_AND_D1_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // setup S-HL CK-LH
      $setup(negedge S &&& (ENABLE_NOT_D0_AND_D1_AND_NOT_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D0_AND_D1_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // setup S-LH CK-LH
      $setup(posedge S &&& (ENABLE_NOT_D0_AND_D1_AND_NOT_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D0_AND_D1_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // hold S-HL CK-LH
      $hold(posedge CK &&& (ENABLE_D0_AND_NOT_D1_AND_NOT_SE_AND_NOT_SI === 1'b1),
      negedge S &&& (ENABLE_D0_AND_NOT_D1_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold S-LH CK-LH
      $hold(posedge CK &&& (ENABLE_D0_AND_NOT_D1_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge S &&& (ENABLE_D0_AND_NOT_D1_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup S-HL CK-LH
      $setup(negedge S &&& (ENABLE_D0_AND_NOT_D1_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_D0_AND_NOT_D1_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup S-LH CK-LH
      $setup(posedge S &&& (ENABLE_D0_AND_NOT_D1_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_D0_AND_NOT_D1_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold S-HL CK-LH
      $hold(posedge CK &&& (ENABLE_D0_AND_NOT_D1_AND_NOT_SE_AND_SI === 1'b1),
      negedge S &&& (ENABLE_D0_AND_NOT_D1_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // hold S-LH CK-LH
      $hold(posedge CK &&& (ENABLE_D0_AND_NOT_D1_AND_NOT_SE_AND_SI === 1'b1),
      posedge S &&& (ENABLE_D0_AND_NOT_D1_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // setup S-HL CK-LH
      $setup(negedge S &&& (ENABLE_D0_AND_NOT_D1_AND_NOT_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_D0_AND_NOT_D1_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // setup S-LH CK-LH
      $setup(posedge S &&& (ENABLE_D0_AND_NOT_D1_AND_NOT_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_D0_AND_NOT_D1_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // hold SE-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_NOT_S_AND_SI === 1'b1),
      negedge SE &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_NOT_S_AND_SI === 1'b1),1.0);
      
      // hold SE-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_NOT_S_AND_SI === 1'b1),
      posedge SE &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_NOT_S_AND_SI === 1'b1),1.0);
      
      // setup SE-HL CK-LH
      $setup(negedge SE &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_NOT_S_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_NOT_S_AND_SI === 1'b1),1.0);
      
      // setup SE-LH CK-LH
      $setup(posedge SE &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_NOT_S_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_NOT_S_AND_SI === 1'b1),1.0);
      
      // hold SE-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_S_AND_SI === 1'b1),
      negedge SE &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_S_AND_SI === 1'b1),1.0);
      
      // hold SE-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_S_AND_SI === 1'b1),
      posedge SE &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_S_AND_SI === 1'b1),1.0);
      
      // setup SE-HL CK-LH
      $setup(negedge SE &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_S_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_S_AND_SI === 1'b1),1.0);
      
      // setup SE-LH CK-LH
      $setup(posedge SE &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_S_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_S_AND_SI === 1'b1),1.0);
      
      // hold SE-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D0_AND_D1_AND_NOT_S_AND_SI === 1'b1),
      negedge SE &&& (ENABLE_NOT_D0_AND_D1_AND_NOT_S_AND_SI === 1'b1),1.0);
      
      // hold SE-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D0_AND_D1_AND_NOT_S_AND_SI === 1'b1),
      posedge SE &&& (ENABLE_NOT_D0_AND_D1_AND_NOT_S_AND_SI === 1'b1),1.0);
      
      // setup SE-HL CK-LH
      $setup(negedge SE &&& (ENABLE_NOT_D0_AND_D1_AND_NOT_S_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D0_AND_D1_AND_NOT_S_AND_SI === 1'b1),1.0);
      
      // setup SE-LH CK-LH
      $setup(posedge SE &&& (ENABLE_NOT_D0_AND_D1_AND_NOT_S_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D0_AND_D1_AND_NOT_S_AND_SI === 1'b1),1.0);
      
      // hold SE-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D0_AND_D1_AND_S_AND_NOT_SI === 1'b1),
      negedge SE &&& (ENABLE_NOT_D0_AND_D1_AND_S_AND_NOT_SI === 1'b1),1.0);
      
      // hold SE-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D0_AND_D1_AND_S_AND_NOT_SI === 1'b1),
      posedge SE &&& (ENABLE_NOT_D0_AND_D1_AND_S_AND_NOT_SI === 1'b1),1.0);
      
      // setup SE-HL CK-LH
      $setup(negedge SE &&& (ENABLE_NOT_D0_AND_D1_AND_S_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D0_AND_D1_AND_S_AND_NOT_SI === 1'b1),1.0);
      
      // setup SE-LH CK-LH
      $setup(posedge SE &&& (ENABLE_NOT_D0_AND_D1_AND_S_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D0_AND_D1_AND_S_AND_NOT_SI === 1'b1),1.0);
      
      // hold SE-HL CK-LH
      $hold(posedge CK &&& (ENABLE_D0_AND_NOT_D1_AND_NOT_S_AND_NOT_SI === 1'b1),
      negedge SE &&& (ENABLE_D0_AND_NOT_D1_AND_NOT_S_AND_NOT_SI === 1'b1),1.0);
      
      // hold SE-LH CK-LH
      $hold(posedge CK &&& (ENABLE_D0_AND_NOT_D1_AND_NOT_S_AND_NOT_SI === 1'b1),
      posedge SE &&& (ENABLE_D0_AND_NOT_D1_AND_NOT_S_AND_NOT_SI === 1'b1),1.0);
      
      // setup SE-HL CK-LH
      $setup(negedge SE &&& (ENABLE_D0_AND_NOT_D1_AND_NOT_S_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_D0_AND_NOT_D1_AND_NOT_S_AND_NOT_SI === 1'b1),1.0);
      
      // setup SE-LH CK-LH
      $setup(posedge SE &&& (ENABLE_D0_AND_NOT_D1_AND_NOT_S_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_D0_AND_NOT_D1_AND_NOT_S_AND_NOT_SI === 1'b1),1.0);
      
      // hold SE-HL CK-LH
      $hold(posedge CK &&& (ENABLE_D0_AND_NOT_D1_AND_S_AND_SI === 1'b1),
      negedge SE &&& (ENABLE_D0_AND_NOT_D1_AND_S_AND_SI === 1'b1),1.0);
      
      // hold SE-LH CK-LH
      $hold(posedge CK &&& (ENABLE_D0_AND_NOT_D1_AND_S_AND_SI === 1'b1),
      posedge SE &&& (ENABLE_D0_AND_NOT_D1_AND_S_AND_SI === 1'b1),1.0);
      
      // setup SE-HL CK-LH
      $setup(negedge SE &&& (ENABLE_D0_AND_NOT_D1_AND_S_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_D0_AND_NOT_D1_AND_S_AND_SI === 1'b1),1.0);
      
      // setup SE-LH CK-LH
      $setup(posedge SE &&& (ENABLE_D0_AND_NOT_D1_AND_S_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_D0_AND_NOT_D1_AND_S_AND_SI === 1'b1),1.0);
      
      // hold SE-HL CK-LH
      $hold(posedge CK &&& (ENABLE_D0_AND_D1_AND_NOT_S_AND_NOT_SI === 1'b1),
      negedge SE &&& (ENABLE_D0_AND_D1_AND_NOT_S_AND_NOT_SI === 1'b1),1.0);
      
      // hold SE-LH CK-LH
      $hold(posedge CK &&& (ENABLE_D0_AND_D1_AND_NOT_S_AND_NOT_SI === 1'b1),
      posedge SE &&& (ENABLE_D0_AND_D1_AND_NOT_S_AND_NOT_SI === 1'b1),1.0);
      
      // setup SE-HL CK-LH
      $setup(negedge SE &&& (ENABLE_D0_AND_D1_AND_NOT_S_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_D0_AND_D1_AND_NOT_S_AND_NOT_SI === 1'b1),1.0);
      
      // setup SE-LH CK-LH
      $setup(posedge SE &&& (ENABLE_D0_AND_D1_AND_NOT_S_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_D0_AND_D1_AND_NOT_S_AND_NOT_SI === 1'b1),1.0);
      
      // hold SE-HL CK-LH
      $hold(posedge CK &&& (ENABLE_D0_AND_D1_AND_S_AND_NOT_SI === 1'b1),
      negedge SE &&& (ENABLE_D0_AND_D1_AND_S_AND_NOT_SI === 1'b1),1.0);
      
      // hold SE-LH CK-LH
      $hold(posedge CK &&& (ENABLE_D0_AND_D1_AND_S_AND_NOT_SI === 1'b1),
      posedge SE &&& (ENABLE_D0_AND_D1_AND_S_AND_NOT_SI === 1'b1),1.0);
      
      // setup SE-HL CK-LH
      $setup(negedge SE &&& (ENABLE_D0_AND_D1_AND_S_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_D0_AND_D1_AND_S_AND_NOT_SI === 1'b1),1.0);
      
      // setup SE-LH CK-LH
      $setup(posedge SE &&& (ENABLE_D0_AND_D1_AND_S_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_D0_AND_D1_AND_S_AND_NOT_SI === 1'b1),1.0);
      
      // hold SI-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_NOT_S_AND_SE === 1'b1),
      negedge SI &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_NOT_S_AND_SE === 1'b1),1.0);
      
      // hold SI-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_NOT_S_AND_SE === 1'b1),
      posedge SI &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_NOT_S_AND_SE === 1'b1),1.0);
      
      // setup SI-HL CK-LH
      $setup(negedge SI &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_NOT_S_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_NOT_S_AND_SE === 1'b1),1.0);
      
      // setup SI-LH CK-LH
      $setup(posedge SI &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_NOT_S_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_NOT_S_AND_SE === 1'b1),1.0);
      
      // hold SI-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_S_AND_SE === 1'b1),
      negedge SI &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_S_AND_SE === 1'b1),1.0);
      
      // hold SI-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_S_AND_SE === 1'b1),
      posedge SI &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_S_AND_SE === 1'b1),1.0);
      
      // setup SI-HL CK-LH
      $setup(negedge SI &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_S_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_S_AND_SE === 1'b1),1.0);
      
      // setup SI-LH CK-LH
      $setup(posedge SI &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_S_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_S_AND_SE === 1'b1),1.0);
      
      // hold SI-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D0_AND_D1_AND_NOT_S_AND_SE === 1'b1),
      negedge SI &&& (ENABLE_NOT_D0_AND_D1_AND_NOT_S_AND_SE === 1'b1),1.0);
      
      // hold SI-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D0_AND_D1_AND_NOT_S_AND_SE === 1'b1),
      posedge SI &&& (ENABLE_NOT_D0_AND_D1_AND_NOT_S_AND_SE === 1'b1),1.0);
      
      // setup SI-HL CK-LH
      $setup(negedge SI &&& (ENABLE_NOT_D0_AND_D1_AND_NOT_S_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_NOT_D0_AND_D1_AND_NOT_S_AND_SE === 1'b1),1.0);
      
      // setup SI-LH CK-LH
      $setup(posedge SI &&& (ENABLE_NOT_D0_AND_D1_AND_NOT_S_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_NOT_D0_AND_D1_AND_NOT_S_AND_SE === 1'b1),1.0);
      
      // hold SI-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D0_AND_D1_AND_S_AND_SE === 1'b1),
      negedge SI &&& (ENABLE_NOT_D0_AND_D1_AND_S_AND_SE === 1'b1),1.0);
      
      // hold SI-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D0_AND_D1_AND_S_AND_SE === 1'b1),
      posedge SI &&& (ENABLE_NOT_D0_AND_D1_AND_S_AND_SE === 1'b1),1.0);
      
      // setup SI-HL CK-LH
      $setup(negedge SI &&& (ENABLE_NOT_D0_AND_D1_AND_S_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_NOT_D0_AND_D1_AND_S_AND_SE === 1'b1),1.0);
      
      // setup SI-LH CK-LH
      $setup(posedge SI &&& (ENABLE_NOT_D0_AND_D1_AND_S_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_NOT_D0_AND_D1_AND_S_AND_SE === 1'b1),1.0);
      
      // hold SI-HL CK-LH
      $hold(posedge CK &&& (ENABLE_D0_AND_NOT_D1_AND_NOT_S_AND_SE === 1'b1),
      negedge SI &&& (ENABLE_D0_AND_NOT_D1_AND_NOT_S_AND_SE === 1'b1),1.0);
      
      // hold SI-LH CK-LH
      $hold(posedge CK &&& (ENABLE_D0_AND_NOT_D1_AND_NOT_S_AND_SE === 1'b1),
      posedge SI &&& (ENABLE_D0_AND_NOT_D1_AND_NOT_S_AND_SE === 1'b1),1.0);
      
      // setup SI-HL CK-LH
      $setup(negedge SI &&& (ENABLE_D0_AND_NOT_D1_AND_NOT_S_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_D0_AND_NOT_D1_AND_NOT_S_AND_SE === 1'b1),1.0);
      
      // setup SI-LH CK-LH
      $setup(posedge SI &&& (ENABLE_D0_AND_NOT_D1_AND_NOT_S_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_D0_AND_NOT_D1_AND_NOT_S_AND_SE === 1'b1),1.0);
      
      // hold SI-HL CK-LH
      $hold(posedge CK &&& (ENABLE_D0_AND_NOT_D1_AND_S_AND_SE === 1'b1),
      negedge SI &&& (ENABLE_D0_AND_NOT_D1_AND_S_AND_SE === 1'b1),1.0);
      
      // hold SI-LH CK-LH
      $hold(posedge CK &&& (ENABLE_D0_AND_NOT_D1_AND_S_AND_SE === 1'b1),
      posedge SI &&& (ENABLE_D0_AND_NOT_D1_AND_S_AND_SE === 1'b1),1.0);
      
      // setup SI-HL CK-LH
      $setup(negedge SI &&& (ENABLE_D0_AND_NOT_D1_AND_S_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_D0_AND_NOT_D1_AND_S_AND_SE === 1'b1),1.0);
      
      // setup SI-LH CK-LH
      $setup(posedge SI &&& (ENABLE_D0_AND_NOT_D1_AND_S_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_D0_AND_NOT_D1_AND_S_AND_SE === 1'b1),1.0);
      
      // hold SI-HL CK-LH
      $hold(posedge CK &&& (ENABLE_D0_AND_D1_AND_NOT_S_AND_SE === 1'b1),
      negedge SI &&& (ENABLE_D0_AND_D1_AND_NOT_S_AND_SE === 1'b1),1.0);
      
      // hold SI-LH CK-LH
      $hold(posedge CK &&& (ENABLE_D0_AND_D1_AND_NOT_S_AND_SE === 1'b1),
      posedge SI &&& (ENABLE_D0_AND_D1_AND_NOT_S_AND_SE === 1'b1),1.0);
      
      // setup SI-HL CK-LH
      $setup(negedge SI &&& (ENABLE_D0_AND_D1_AND_NOT_S_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_D0_AND_D1_AND_NOT_S_AND_SE === 1'b1),1.0);
      
      // setup SI-LH CK-LH
      $setup(posedge SI &&& (ENABLE_D0_AND_D1_AND_NOT_S_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_D0_AND_D1_AND_NOT_S_AND_SE === 1'b1),1.0);
      
      // hold SI-HL CK-LH
      $hold(posedge CK &&& (ENABLE_D0_AND_D1_AND_S_AND_SE === 1'b1),
      negedge SI &&& (ENABLE_D0_AND_D1_AND_S_AND_SE === 1'b1),1.0);
      
      // hold SI-LH CK-LH
      $hold(posedge CK &&& (ENABLE_D0_AND_D1_AND_S_AND_SE === 1'b1),
      posedge SI &&& (ENABLE_D0_AND_D1_AND_S_AND_SE === 1'b1),1.0);
      
      // setup SI-HL CK-LH
      $setup(negedge SI &&& (ENABLE_D0_AND_D1_AND_S_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_D0_AND_D1_AND_S_AND_SE === 1'b1),1.0);
      
      // setup SI-LH CK-LH
      $setup(posedge SI &&& (ENABLE_D0_AND_D1_AND_S_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_D0_AND_D1_AND_S_AND_SE === 1'b1),1.0);
      
      // mpw CK_lh 
      $width(posedge CK,1.0,0);
      
      // mpw CK_hl 
      $width(negedge CK,1.0,0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_FSDPMQ_1( Q, CK, D0, D1, S, SI, SE );
input CK, D0, D1, S, SE, SI;
output Q;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_FSDPMQ_1_func SAEDRVT14_FSDPMQ_1_behav_inst(.Q(Q),.CK(CK),.D0(D0),.D1(D1),.S(S),.SI(SI),.SE(SE));
`else
   SAEDRVT14_FSDPMQ_1_func SAEDRVT14_FSDPMQ_1_inst(.Q(Q),.CK(CK),.D0(D0),.D1(D1),.S(S),.SI(SI),.SE(SE));
   // spec_gates_begin
   not MGM_G0(MGM_W0,D0);
   not MGM_G1(MGM_W1,D1);
   and MGM_G2(MGM_W2,MGM_W1,MGM_W0);
   not MGM_G3(MGM_W3,S);
   and MGM_G4(MGM_W4,MGM_W3,MGM_W2);
   not MGM_G5(MGM_W5,SE);
   and MGM_G6(MGM_W6,MGM_W5,MGM_W4);
   not MGM_G7(MGM_W7,SI);
   and MGM_G8(ENABLE_NOT_D0_AND_NOT_D1_AND_NOT_S_AND_NOT_SE_AND_NOT_SI,MGM_W7,MGM_W6);
   not MGM_G9(MGM_W8,D0);
   not MGM_G10(MGM_W9,D1);
   and MGM_G11(MGM_W10,MGM_W9,MGM_W8);
   not MGM_G12(MGM_W11,S);
   and MGM_G13(MGM_W12,MGM_W11,MGM_W10);
   not MGM_G14(MGM_W13,SE);
   and MGM_G15(MGM_W14,MGM_W13,MGM_W12);
   and MGM_G16(ENABLE_NOT_D0_AND_NOT_D1_AND_NOT_S_AND_NOT_SE_AND_SI,SI,MGM_W14);
   not MGM_G17(MGM_W15,D0);
   not MGM_G18(MGM_W16,D1);
   and MGM_G19(MGM_W17,MGM_W16,MGM_W15);
   not MGM_G20(MGM_W18,S);
   and MGM_G21(MGM_W19,MGM_W18,MGM_W17);
   and MGM_G22(MGM_W20,SE,MGM_W19);
   not MGM_G23(MGM_W21,SI);
   and MGM_G24(ENABLE_NOT_D0_AND_NOT_D1_AND_NOT_S_AND_SE_AND_NOT_SI,MGM_W21,MGM_W20);
   not MGM_G25(MGM_W22,D0);
   not MGM_G26(MGM_W23,D1);
   and MGM_G27(MGM_W24,MGM_W23,MGM_W22);
   not MGM_G28(MGM_W25,S);
   and MGM_G29(MGM_W26,MGM_W25,MGM_W24);
   and MGM_G30(MGM_W27,SE,MGM_W26);
   and MGM_G31(ENABLE_NOT_D0_AND_NOT_D1_AND_NOT_S_AND_SE_AND_SI,SI,MGM_W27);
   not MGM_G32(MGM_W28,D0);
   not MGM_G33(MGM_W29,D1);
   and MGM_G34(MGM_W30,MGM_W29,MGM_W28);
   and MGM_G35(MGM_W31,S,MGM_W30);
   not MGM_G36(MGM_W32,SE);
   and MGM_G37(MGM_W33,MGM_W32,MGM_W31);
   not MGM_G38(MGM_W34,SI);
   and MGM_G39(ENABLE_NOT_D0_AND_NOT_D1_AND_S_AND_NOT_SE_AND_NOT_SI,MGM_W34,MGM_W33);
   not MGM_G40(MGM_W35,D0);
   not MGM_G41(MGM_W36,D1);
   and MGM_G42(MGM_W37,MGM_W36,MGM_W35);
   and MGM_G43(MGM_W38,S,MGM_W37);
   not MGM_G44(MGM_W39,SE);
   and MGM_G45(MGM_W40,MGM_W39,MGM_W38);
   and MGM_G46(ENABLE_NOT_D0_AND_NOT_D1_AND_S_AND_NOT_SE_AND_SI,SI,MGM_W40);
   not MGM_G47(MGM_W41,D0);
   not MGM_G48(MGM_W42,D1);
   and MGM_G49(MGM_W43,MGM_W42,MGM_W41);
   and MGM_G50(MGM_W44,S,MGM_W43);
   and MGM_G51(MGM_W45,SE,MGM_W44);
   not MGM_G52(MGM_W46,SI);
   and MGM_G53(ENABLE_NOT_D0_AND_NOT_D1_AND_S_AND_SE_AND_NOT_SI,MGM_W46,MGM_W45);
   not MGM_G54(MGM_W47,D0);
   not MGM_G55(MGM_W48,D1);
   and MGM_G56(MGM_W49,MGM_W48,MGM_W47);
   and MGM_G57(MGM_W50,S,MGM_W49);
   and MGM_G58(MGM_W51,SE,MGM_W50);
   and MGM_G59(ENABLE_NOT_D0_AND_NOT_D1_AND_S_AND_SE_AND_SI,SI,MGM_W51);
   not MGM_G60(MGM_W52,D0);
   and MGM_G61(MGM_W53,D1,MGM_W52);
   not MGM_G62(MGM_W54,S);
   and MGM_G63(MGM_W55,MGM_W54,MGM_W53);
   not MGM_G64(MGM_W56,SE);
   and MGM_G65(MGM_W57,MGM_W56,MGM_W55);
   not MGM_G66(MGM_W58,SI);
   and MGM_G67(ENABLE_NOT_D0_AND_D1_AND_NOT_S_AND_NOT_SE_AND_NOT_SI,MGM_W58,MGM_W57);
   not MGM_G68(MGM_W59,D0);
   and MGM_G69(MGM_W60,D1,MGM_W59);
   not MGM_G70(MGM_W61,S);
   and MGM_G71(MGM_W62,MGM_W61,MGM_W60);
   not MGM_G72(MGM_W63,SE);
   and MGM_G73(MGM_W64,MGM_W63,MGM_W62);
   and MGM_G74(ENABLE_NOT_D0_AND_D1_AND_NOT_S_AND_NOT_SE_AND_SI,SI,MGM_W64);
   not MGM_G75(MGM_W65,D0);
   and MGM_G76(MGM_W66,D1,MGM_W65);
   not MGM_G77(MGM_W67,S);
   and MGM_G78(MGM_W68,MGM_W67,MGM_W66);
   and MGM_G79(MGM_W69,SE,MGM_W68);
   not MGM_G80(MGM_W70,SI);
   and MGM_G81(ENABLE_NOT_D0_AND_D1_AND_NOT_S_AND_SE_AND_NOT_SI,MGM_W70,MGM_W69);
   not MGM_G82(MGM_W71,D0);
   and MGM_G83(MGM_W72,D1,MGM_W71);
   not MGM_G84(MGM_W73,S);
   and MGM_G85(MGM_W74,MGM_W73,MGM_W72);
   and MGM_G86(MGM_W75,SE,MGM_W74);
   and MGM_G87(ENABLE_NOT_D0_AND_D1_AND_NOT_S_AND_SE_AND_SI,SI,MGM_W75);
   not MGM_G88(MGM_W76,D0);
   and MGM_G89(MGM_W77,D1,MGM_W76);
   and MGM_G90(MGM_W78,S,MGM_W77);
   not MGM_G91(MGM_W79,SE);
   and MGM_G92(MGM_W80,MGM_W79,MGM_W78);
   not MGM_G93(MGM_W81,SI);
   and MGM_G94(ENABLE_NOT_D0_AND_D1_AND_S_AND_NOT_SE_AND_NOT_SI,MGM_W81,MGM_W80);
   not MGM_G95(MGM_W82,D0);
   and MGM_G96(MGM_W83,D1,MGM_W82);
   and MGM_G97(MGM_W84,S,MGM_W83);
   not MGM_G98(MGM_W85,SE);
   and MGM_G99(MGM_W86,MGM_W85,MGM_W84);
   and MGM_G100(ENABLE_NOT_D0_AND_D1_AND_S_AND_NOT_SE_AND_SI,SI,MGM_W86);
   not MGM_G101(MGM_W87,D0);
   and MGM_G102(MGM_W88,D1,MGM_W87);
   and MGM_G103(MGM_W89,S,MGM_W88);
   and MGM_G104(MGM_W90,SE,MGM_W89);
   not MGM_G105(MGM_W91,SI);
   and MGM_G106(ENABLE_NOT_D0_AND_D1_AND_S_AND_SE_AND_NOT_SI,MGM_W91,MGM_W90);
   not MGM_G107(MGM_W92,D0);
   and MGM_G108(MGM_W93,D1,MGM_W92);
   and MGM_G109(MGM_W94,S,MGM_W93);
   and MGM_G110(MGM_W95,SE,MGM_W94);
   and MGM_G111(ENABLE_NOT_D0_AND_D1_AND_S_AND_SE_AND_SI,SI,MGM_W95);
   not MGM_G112(MGM_W96,D1);
   and MGM_G113(MGM_W97,MGM_W96,D0);
   not MGM_G114(MGM_W98,S);
   and MGM_G115(MGM_W99,MGM_W98,MGM_W97);
   not MGM_G116(MGM_W100,SE);
   and MGM_G117(MGM_W101,MGM_W100,MGM_W99);
   not MGM_G118(MGM_W102,SI);
   and MGM_G119(ENABLE_D0_AND_NOT_D1_AND_NOT_S_AND_NOT_SE_AND_NOT_SI,MGM_W102,MGM_W101);
   not MGM_G120(MGM_W103,D1);
   and MGM_G121(MGM_W104,MGM_W103,D0);
   not MGM_G122(MGM_W105,S);
   and MGM_G123(MGM_W106,MGM_W105,MGM_W104);
   not MGM_G124(MGM_W107,SE);
   and MGM_G125(MGM_W108,MGM_W107,MGM_W106);
   and MGM_G126(ENABLE_D0_AND_NOT_D1_AND_NOT_S_AND_NOT_SE_AND_SI,SI,MGM_W108);
   not MGM_G127(MGM_W109,D1);
   and MGM_G128(MGM_W110,MGM_W109,D0);
   not MGM_G129(MGM_W111,S);
   and MGM_G130(MGM_W112,MGM_W111,MGM_W110);
   and MGM_G131(MGM_W113,SE,MGM_W112);
   not MGM_G132(MGM_W114,SI);
   and MGM_G133(ENABLE_D0_AND_NOT_D1_AND_NOT_S_AND_SE_AND_NOT_SI,MGM_W114,MGM_W113);
   not MGM_G134(MGM_W115,D1);
   and MGM_G135(MGM_W116,MGM_W115,D0);
   not MGM_G136(MGM_W117,S);
   and MGM_G137(MGM_W118,MGM_W117,MGM_W116);
   and MGM_G138(MGM_W119,SE,MGM_W118);
   and MGM_G139(ENABLE_D0_AND_NOT_D1_AND_NOT_S_AND_SE_AND_SI,SI,MGM_W119);
   not MGM_G140(MGM_W120,D1);
   and MGM_G141(MGM_W121,MGM_W120,D0);
   and MGM_G142(MGM_W122,S,MGM_W121);
   not MGM_G143(MGM_W123,SE);
   and MGM_G144(MGM_W124,MGM_W123,MGM_W122);
   not MGM_G145(MGM_W125,SI);
   and MGM_G146(ENABLE_D0_AND_NOT_D1_AND_S_AND_NOT_SE_AND_NOT_SI,MGM_W125,MGM_W124);
   not MGM_G147(MGM_W126,D1);
   and MGM_G148(MGM_W127,MGM_W126,D0);
   and MGM_G149(MGM_W128,S,MGM_W127);
   not MGM_G150(MGM_W129,SE);
   and MGM_G151(MGM_W130,MGM_W129,MGM_W128);
   and MGM_G152(ENABLE_D0_AND_NOT_D1_AND_S_AND_NOT_SE_AND_SI,SI,MGM_W130);
   not MGM_G153(MGM_W131,D1);
   and MGM_G154(MGM_W132,MGM_W131,D0);
   and MGM_G155(MGM_W133,S,MGM_W132);
   and MGM_G156(MGM_W134,SE,MGM_W133);
   not MGM_G157(MGM_W135,SI);
   and MGM_G158(ENABLE_D0_AND_NOT_D1_AND_S_AND_SE_AND_NOT_SI,MGM_W135,MGM_W134);
   not MGM_G159(MGM_W136,D1);
   and MGM_G160(MGM_W137,MGM_W136,D0);
   and MGM_G161(MGM_W138,S,MGM_W137);
   and MGM_G162(MGM_W139,SE,MGM_W138);
   and MGM_G163(ENABLE_D0_AND_NOT_D1_AND_S_AND_SE_AND_SI,SI,MGM_W139);
   and MGM_G164(MGM_W140,D1,D0);
   not MGM_G165(MGM_W141,S);
   and MGM_G166(MGM_W142,MGM_W141,MGM_W140);
   not MGM_G167(MGM_W143,SE);
   and MGM_G168(MGM_W144,MGM_W143,MGM_W142);
   not MGM_G169(MGM_W145,SI);
   and MGM_G170(ENABLE_D0_AND_D1_AND_NOT_S_AND_NOT_SE_AND_NOT_SI,MGM_W145,MGM_W144);
   and MGM_G171(MGM_W146,D1,D0);
   not MGM_G172(MGM_W147,S);
   and MGM_G173(MGM_W148,MGM_W147,MGM_W146);
   not MGM_G174(MGM_W149,SE);
   and MGM_G175(MGM_W150,MGM_W149,MGM_W148);
   and MGM_G176(ENABLE_D0_AND_D1_AND_NOT_S_AND_NOT_SE_AND_SI,SI,MGM_W150);
   and MGM_G177(MGM_W151,D1,D0);
   not MGM_G178(MGM_W152,S);
   and MGM_G179(MGM_W153,MGM_W152,MGM_W151);
   and MGM_G180(MGM_W154,SE,MGM_W153);
   not MGM_G181(MGM_W155,SI);
   and MGM_G182(ENABLE_D0_AND_D1_AND_NOT_S_AND_SE_AND_NOT_SI,MGM_W155,MGM_W154);
   and MGM_G183(MGM_W156,D1,D0);
   not MGM_G184(MGM_W157,S);
   and MGM_G185(MGM_W158,MGM_W157,MGM_W156);
   and MGM_G186(MGM_W159,SE,MGM_W158);
   and MGM_G187(ENABLE_D0_AND_D1_AND_NOT_S_AND_SE_AND_SI,SI,MGM_W159);
   and MGM_G188(MGM_W160,D1,D0);
   and MGM_G189(MGM_W161,S,MGM_W160);
   not MGM_G190(MGM_W162,SE);
   and MGM_G191(MGM_W163,MGM_W162,MGM_W161);
   not MGM_G192(MGM_W164,SI);
   and MGM_G193(ENABLE_D0_AND_D1_AND_S_AND_NOT_SE_AND_NOT_SI,MGM_W164,MGM_W163);
   and MGM_G194(MGM_W165,D1,D0);
   and MGM_G195(MGM_W166,S,MGM_W165);
   not MGM_G196(MGM_W167,SE);
   and MGM_G197(MGM_W168,MGM_W167,MGM_W166);
   and MGM_G198(ENABLE_D0_AND_D1_AND_S_AND_NOT_SE_AND_SI,SI,MGM_W168);
   and MGM_G199(MGM_W169,D1,D0);
   and MGM_G200(MGM_W170,S,MGM_W169);
   and MGM_G201(MGM_W171,SE,MGM_W170);
   not MGM_G202(MGM_W172,SI);
   and MGM_G203(ENABLE_D0_AND_D1_AND_S_AND_SE_AND_NOT_SI,MGM_W172,MGM_W171);
   and MGM_G204(MGM_W173,D1,D0);
   and MGM_G205(MGM_W174,S,MGM_W173);
   and MGM_G206(MGM_W175,SE,MGM_W174);
   and MGM_G207(ENABLE_D0_AND_D1_AND_S_AND_SE_AND_SI,SI,MGM_W175);
   not MGM_G208(MGM_W176,D1);
   not MGM_G209(MGM_W177,S);
   and MGM_G210(MGM_W178,MGM_W177,MGM_W176);
   not MGM_G211(MGM_W179,SE);
   and MGM_G212(MGM_W180,MGM_W179,MGM_W178);
   not MGM_G213(MGM_W181,SI);
   and MGM_G214(ENABLE_NOT_D1_AND_NOT_S_AND_NOT_SE_AND_NOT_SI,MGM_W181,MGM_W180);
   not MGM_G215(MGM_W182,D1);
   not MGM_G216(MGM_W183,S);
   and MGM_G217(MGM_W184,MGM_W183,MGM_W182);
   not MGM_G218(MGM_W185,SE);
   and MGM_G219(MGM_W186,MGM_W185,MGM_W184);
   and MGM_G220(ENABLE_NOT_D1_AND_NOT_S_AND_NOT_SE_AND_SI,SI,MGM_W186);
   not MGM_G221(MGM_W187,S);
   and MGM_G222(MGM_W188,MGM_W187,D1);
   not MGM_G223(MGM_W189,SE);
   and MGM_G224(MGM_W190,MGM_W189,MGM_W188);
   not MGM_G225(MGM_W191,SI);
   and MGM_G226(ENABLE_D1_AND_NOT_S_AND_NOT_SE_AND_NOT_SI,MGM_W191,MGM_W190);
   not MGM_G227(MGM_W192,S);
   and MGM_G228(MGM_W193,MGM_W192,D1);
   not MGM_G229(MGM_W194,SE);
   and MGM_G230(MGM_W195,MGM_W194,MGM_W193);
   and MGM_G231(ENABLE_D1_AND_NOT_S_AND_NOT_SE_AND_SI,SI,MGM_W195);
   not MGM_G232(MGM_W196,D0);
   and MGM_G233(MGM_W197,S,MGM_W196);
   not MGM_G234(MGM_W198,SE);
   and MGM_G235(MGM_W199,MGM_W198,MGM_W197);
   not MGM_G236(MGM_W200,SI);
   and MGM_G237(ENABLE_NOT_D0_AND_S_AND_NOT_SE_AND_NOT_SI,MGM_W200,MGM_W199);
   not MGM_G238(MGM_W201,D0);
   and MGM_G239(MGM_W202,S,MGM_W201);
   not MGM_G240(MGM_W203,SE);
   and MGM_G241(MGM_W204,MGM_W203,MGM_W202);
   and MGM_G242(ENABLE_NOT_D0_AND_S_AND_NOT_SE_AND_SI,SI,MGM_W204);
   and MGM_G243(MGM_W205,S,D0);
   not MGM_G244(MGM_W206,SE);
   and MGM_G245(MGM_W207,MGM_W206,MGM_W205);
   not MGM_G246(MGM_W208,SI);
   and MGM_G247(ENABLE_D0_AND_S_AND_NOT_SE_AND_NOT_SI,MGM_W208,MGM_W207);
   and MGM_G248(MGM_W209,S,D0);
   not MGM_G249(MGM_W210,SE);
   and MGM_G250(MGM_W211,MGM_W210,MGM_W209);
   and MGM_G251(ENABLE_D0_AND_S_AND_NOT_SE_AND_SI,SI,MGM_W211);
   not MGM_G252(MGM_W212,D0);
   and MGM_G253(MGM_W213,D1,MGM_W212);
   not MGM_G254(MGM_W214,SE);
   and MGM_G255(MGM_W215,MGM_W214,MGM_W213);
   not MGM_G256(MGM_W216,SI);
   and MGM_G257(ENABLE_NOT_D0_AND_D1_AND_NOT_SE_AND_NOT_SI,MGM_W216,MGM_W215);
   not MGM_G258(MGM_W217,D0);
   and MGM_G259(MGM_W218,D1,MGM_W217);
   not MGM_G260(MGM_W219,SE);
   and MGM_G261(MGM_W220,MGM_W219,MGM_W218);
   and MGM_G262(ENABLE_NOT_D0_AND_D1_AND_NOT_SE_AND_SI,SI,MGM_W220);
   not MGM_G263(MGM_W221,D1);
   and MGM_G264(MGM_W222,MGM_W221,D0);
   not MGM_G265(MGM_W223,SE);
   and MGM_G266(MGM_W224,MGM_W223,MGM_W222);
   not MGM_G267(MGM_W225,SI);
   and MGM_G268(ENABLE_D0_AND_NOT_D1_AND_NOT_SE_AND_NOT_SI,MGM_W225,MGM_W224);
   not MGM_G269(MGM_W226,D1);
   and MGM_G270(MGM_W227,MGM_W226,D0);
   not MGM_G271(MGM_W228,SE);
   and MGM_G272(MGM_W229,MGM_W228,MGM_W227);
   and MGM_G273(ENABLE_D0_AND_NOT_D1_AND_NOT_SE_AND_SI,SI,MGM_W229);
   not MGM_G274(MGM_W230,D0);
   not MGM_G275(MGM_W231,D1);
   and MGM_G276(MGM_W232,MGM_W231,MGM_W230);
   not MGM_G277(MGM_W233,S);
   and MGM_G278(MGM_W234,MGM_W233,MGM_W232);
   and MGM_G279(ENABLE_NOT_D0_AND_NOT_D1_AND_NOT_S_AND_SI,SI,MGM_W234);
   not MGM_G280(MGM_W235,D0);
   not MGM_G281(MGM_W236,D1);
   and MGM_G282(MGM_W237,MGM_W236,MGM_W235);
   and MGM_G283(MGM_W238,S,MGM_W237);
   and MGM_G284(ENABLE_NOT_D0_AND_NOT_D1_AND_S_AND_SI,SI,MGM_W238);
   not MGM_G285(MGM_W239,D0);
   and MGM_G286(MGM_W240,D1,MGM_W239);
   not MGM_G287(MGM_W241,S);
   and MGM_G288(MGM_W242,MGM_W241,MGM_W240);
   and MGM_G289(ENABLE_NOT_D0_AND_D1_AND_NOT_S_AND_SI,SI,MGM_W242);
   not MGM_G290(MGM_W243,D0);
   and MGM_G291(MGM_W244,D1,MGM_W243);
   and MGM_G292(MGM_W245,S,MGM_W244);
   not MGM_G293(MGM_W246,SI);
   and MGM_G294(ENABLE_NOT_D0_AND_D1_AND_S_AND_NOT_SI,MGM_W246,MGM_W245);
   not MGM_G295(MGM_W247,D1);
   and MGM_G296(MGM_W248,MGM_W247,D0);
   not MGM_G297(MGM_W249,S);
   and MGM_G298(MGM_W250,MGM_W249,MGM_W248);
   not MGM_G299(MGM_W251,SI);
   and MGM_G300(ENABLE_D0_AND_NOT_D1_AND_NOT_S_AND_NOT_SI,MGM_W251,MGM_W250);
   not MGM_G301(MGM_W252,D1);
   and MGM_G302(MGM_W253,MGM_W252,D0);
   and MGM_G303(MGM_W254,S,MGM_W253);
   and MGM_G304(ENABLE_D0_AND_NOT_D1_AND_S_AND_SI,SI,MGM_W254);
   and MGM_G305(MGM_W255,D1,D0);
   not MGM_G306(MGM_W256,S);
   and MGM_G307(MGM_W257,MGM_W256,MGM_W255);
   not MGM_G308(MGM_W258,SI);
   and MGM_G309(ENABLE_D0_AND_D1_AND_NOT_S_AND_NOT_SI,MGM_W258,MGM_W257);
   and MGM_G310(MGM_W259,D1,D0);
   and MGM_G311(MGM_W260,S,MGM_W259);
   not MGM_G312(MGM_W261,SI);
   and MGM_G313(ENABLE_D0_AND_D1_AND_S_AND_NOT_SI,MGM_W261,MGM_W260);
   not MGM_G314(MGM_W262,D0);
   not MGM_G315(MGM_W263,D1);
   and MGM_G316(MGM_W264,MGM_W263,MGM_W262);
   not MGM_G317(MGM_W265,S);
   and MGM_G318(MGM_W266,MGM_W265,MGM_W264);
   and MGM_G319(ENABLE_NOT_D0_AND_NOT_D1_AND_NOT_S_AND_SE,SE,MGM_W266);
   not MGM_G320(MGM_W267,D0);
   not MGM_G321(MGM_W268,D1);
   and MGM_G322(MGM_W269,MGM_W268,MGM_W267);
   and MGM_G323(MGM_W270,S,MGM_W269);
   and MGM_G324(ENABLE_NOT_D0_AND_NOT_D1_AND_S_AND_SE,SE,MGM_W270);
   not MGM_G325(MGM_W271,D0);
   and MGM_G326(MGM_W272,D1,MGM_W271);
   not MGM_G327(MGM_W273,S);
   and MGM_G328(MGM_W274,MGM_W273,MGM_W272);
   and MGM_G329(ENABLE_NOT_D0_AND_D1_AND_NOT_S_AND_SE,SE,MGM_W274);
   not MGM_G330(MGM_W275,D0);
   and MGM_G331(MGM_W276,D1,MGM_W275);
   and MGM_G332(MGM_W277,S,MGM_W276);
   and MGM_G333(ENABLE_NOT_D0_AND_D1_AND_S_AND_SE,SE,MGM_W277);
   not MGM_G334(MGM_W278,D1);
   and MGM_G335(MGM_W279,MGM_W278,D0);
   not MGM_G336(MGM_W280,S);
   and MGM_G337(MGM_W281,MGM_W280,MGM_W279);
   and MGM_G338(ENABLE_D0_AND_NOT_D1_AND_NOT_S_AND_SE,SE,MGM_W281);
   not MGM_G339(MGM_W282,D1);
   and MGM_G340(MGM_W283,MGM_W282,D0);
   and MGM_G341(MGM_W284,S,MGM_W283);
   and MGM_G342(ENABLE_D0_AND_NOT_D1_AND_S_AND_SE,SE,MGM_W284);
   and MGM_G343(MGM_W285,D1,D0);
   not MGM_G344(MGM_W286,S);
   and MGM_G345(MGM_W287,MGM_W286,MGM_W285);
   and MGM_G346(ENABLE_D0_AND_D1_AND_NOT_S_AND_SE,SE,MGM_W287);
   and MGM_G347(MGM_W288,D1,D0);
   and MGM_G348(MGM_W289,S,MGM_W288);
   and MGM_G349(ENABLE_D0_AND_D1_AND_S_AND_SE,SE,MGM_W289);
   // spec_gates_end
   // specify_block_begin
   specify

      if(D0===1'b0 && D1===1'b0 && S===1'b0 && SI===1'b1)
      // seq arc CK --> Q
      (posedge CK => (Q : SE))  = (1.0,1.0);
      
      if(D0===1'b0 && D1===1'b0 && S===1'b1 && SI===1'b1)
      // seq arc CK --> Q
      (posedge CK => (Q : SE))  = (1.0,1.0);
      
      if(D0===1'b0 && D1===1'b1 && S===1'b0 && SI===1'b1)
      // seq arc CK --> Q
      (posedge CK => (Q : SE))  = (1.0,1.0);
      
      if(D0===1'b0 && D1===1'b1 && S===1'b1 && SE===1'b0 && SI===1'b1 || D0===1'b0 && D1===1'b0 && S===1'b0 && SE===1'b0 && SI===1'b0)
      // seq arc CK --> Q
      (posedge CK => (Q : S))  = (1.0,1.0);
      
      if(D0===1'b0 && D1===1'b1 && S===1'b1 && SE===1'b1)
      // seq arc CK --> Q
      (posedge CK => (Q : SI))  = (1.0,1.0);
      
      if(D0===1'b0 && S===1'b1 && SE===1'b0 && SI===1'b0)
      // seq arc CK --> Q
      (posedge CK => (Q : D1))  = (1.0,1.0);
      
      if(D0===1'b1 && D1===1'b0 && S===1'b0 && SI===1'b0)
      // seq arc CK --> Q
      (posedge CK => (Q : SE))  = (1.0,1.0);
      
      if(D0===1'b1 && D1===1'b0 && S===1'b0 && SE===1'b1 && SI===1'b1 || D0===1'b0 && D1===1'b0 && S===1'b0 && SE===1'b1 && SI===1'b0)
      // seq arc CK --> Q
      (posedge CK => (Q : D0))  = (1.0,1.0);
      
      if(D0===1'b1 && D1===1'b0 && SE===1'b0 && SI===1'b1)
      // seq arc CK --> Q
      (posedge CK => (Q : S))  = (1.0,1.0);
      
      if(D0===1'b1 && D1===1'b0 && S===1'b1 && SE===1'b1)
      // seq arc CK --> Q
      (posedge CK => (Q : SI))  = (1.0,1.0);
      
      if(D0===1'b1 && D1===1'b1 && S===1'b0 && SE===1'b0 && SI===1'b1 || D0===1'b0 && D1===1'b0 && S===1'b1 && SE===1'b1 && SI===1'b0)
      // seq arc CK --> Q
      (posedge CK => (Q : D0))  = (1.0,1.0);
      
      if(D0===1'b1 && D1===1'b1 && S===1'b0 && SE===1'b1)
      // seq arc CK --> Q
      (posedge CK => (Q : SI))  = (1.0,1.0);
      
      if(D0===1'b1 && D1===1'b1 && S===1'b1 && SE===1'b0 && SI===1'b1 || D0===1'b0 && D1===1'b1 && S===1'b0 && SE===1'b1 && SI===1'b0)
      // seq arc CK --> Q
      (posedge CK => (Q : D0))  = (1.0,1.0);
      
      if(D0===1'b1 && D1===1'b1 && S===1'b1 && SE===1'b1)
      // seq arc CK --> Q
      (posedge CK => (Q : SI))  = (1.0,1.0);
      
      if(D0===1'b1 && S===1'b1 && SE===1'b0 && SI===1'b0)
      // seq arc CK --> Q
      (posedge CK => (Q : D1))  = (1.0,1.0);
      
      if(D1===1'b1 && S===1'b0 && SE===1'b0 && SI===1'b0)
      // seq arc CK --> Q
      (posedge CK => (Q : D0))  = (1.0,1.0);
      
      ifnone
      // seq arc CK --> Q
      (posedge CK => (Q : D0))  = (1.0,1.0);
      
      $width(negedge CK &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_NOT_S_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_NOT_S_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_NOT_S_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_NOT_S_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_NOT_S_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_NOT_S_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_NOT_S_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_NOT_S_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_S_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_S_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_S_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_S_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_S_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_S_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_S_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_S_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D0_AND_D1_AND_NOT_S_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D0_AND_D1_AND_NOT_S_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D0_AND_D1_AND_NOT_S_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D0_AND_D1_AND_NOT_S_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D0_AND_D1_AND_NOT_S_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D0_AND_D1_AND_NOT_S_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D0_AND_D1_AND_NOT_S_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D0_AND_D1_AND_NOT_S_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D0_AND_D1_AND_S_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D0_AND_D1_AND_S_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D0_AND_D1_AND_S_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D0_AND_D1_AND_S_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D0_AND_D1_AND_S_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D0_AND_D1_AND_S_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D0_AND_D1_AND_S_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D0_AND_D1_AND_S_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D0_AND_NOT_D1_AND_NOT_S_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D0_AND_NOT_D1_AND_NOT_S_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D0_AND_NOT_D1_AND_NOT_S_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D0_AND_NOT_D1_AND_NOT_S_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D0_AND_NOT_D1_AND_NOT_S_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D0_AND_NOT_D1_AND_NOT_S_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D0_AND_NOT_D1_AND_NOT_S_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D0_AND_NOT_D1_AND_NOT_S_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D0_AND_NOT_D1_AND_S_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D0_AND_NOT_D1_AND_S_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D0_AND_NOT_D1_AND_S_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D0_AND_NOT_D1_AND_S_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D0_AND_NOT_D1_AND_S_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D0_AND_NOT_D1_AND_S_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D0_AND_NOT_D1_AND_S_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D0_AND_NOT_D1_AND_S_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D0_AND_D1_AND_NOT_S_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D0_AND_D1_AND_NOT_S_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D0_AND_D1_AND_NOT_S_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D0_AND_D1_AND_NOT_S_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D0_AND_D1_AND_NOT_S_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D0_AND_D1_AND_NOT_S_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D0_AND_D1_AND_NOT_S_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D0_AND_D1_AND_NOT_S_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D0_AND_D1_AND_S_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D0_AND_D1_AND_S_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D0_AND_D1_AND_S_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D0_AND_D1_AND_S_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D0_AND_D1_AND_S_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D0_AND_D1_AND_S_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D0_AND_D1_AND_S_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D0_AND_D1_AND_S_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      // hold D0-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D1_AND_NOT_S_AND_NOT_SE_AND_NOT_SI === 1'b1),
      negedge D0 &&& (ENABLE_NOT_D1_AND_NOT_S_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold D0-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D1_AND_NOT_S_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge D0 &&& (ENABLE_NOT_D1_AND_NOT_S_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup D0-HL CK-LH
      $setup(negedge D0 &&& (ENABLE_NOT_D1_AND_NOT_S_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D1_AND_NOT_S_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup D0-LH CK-LH
      $setup(posedge D0 &&& (ENABLE_NOT_D1_AND_NOT_S_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D1_AND_NOT_S_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold D0-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D1_AND_NOT_S_AND_NOT_SE_AND_SI === 1'b1),
      negedge D0 &&& (ENABLE_NOT_D1_AND_NOT_S_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // hold D0-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D1_AND_NOT_S_AND_NOT_SE_AND_SI === 1'b1),
      posedge D0 &&& (ENABLE_NOT_D1_AND_NOT_S_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // setup D0-HL CK-LH
      $setup(negedge D0 &&& (ENABLE_NOT_D1_AND_NOT_S_AND_NOT_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D1_AND_NOT_S_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // setup D0-LH CK-LH
      $setup(posedge D0 &&& (ENABLE_NOT_D1_AND_NOT_S_AND_NOT_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D1_AND_NOT_S_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // hold D0-HL CK-LH
      $hold(posedge CK &&& (ENABLE_D1_AND_NOT_S_AND_NOT_SE_AND_NOT_SI === 1'b1),
      negedge D0 &&& (ENABLE_D1_AND_NOT_S_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold D0-LH CK-LH
      $hold(posedge CK &&& (ENABLE_D1_AND_NOT_S_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge D0 &&& (ENABLE_D1_AND_NOT_S_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup D0-HL CK-LH
      $setup(negedge D0 &&& (ENABLE_D1_AND_NOT_S_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_D1_AND_NOT_S_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup D0-LH CK-LH
      $setup(posedge D0 &&& (ENABLE_D1_AND_NOT_S_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_D1_AND_NOT_S_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold D0-HL CK-LH
      $hold(posedge CK &&& (ENABLE_D1_AND_NOT_S_AND_NOT_SE_AND_SI === 1'b1),
      negedge D0 &&& (ENABLE_D1_AND_NOT_S_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // hold D0-LH CK-LH
      $hold(posedge CK &&& (ENABLE_D1_AND_NOT_S_AND_NOT_SE_AND_SI === 1'b1),
      posedge D0 &&& (ENABLE_D1_AND_NOT_S_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // setup D0-HL CK-LH
      $setup(negedge D0 &&& (ENABLE_D1_AND_NOT_S_AND_NOT_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_D1_AND_NOT_S_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // setup D0-LH CK-LH
      $setup(posedge D0 &&& (ENABLE_D1_AND_NOT_S_AND_NOT_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_D1_AND_NOT_S_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // hold D1-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D0_AND_S_AND_NOT_SE_AND_NOT_SI === 1'b1),
      negedge D1 &&& (ENABLE_NOT_D0_AND_S_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold D1-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D0_AND_S_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge D1 &&& (ENABLE_NOT_D0_AND_S_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup D1-HL CK-LH
      $setup(negedge D1 &&& (ENABLE_NOT_D0_AND_S_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D0_AND_S_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup D1-LH CK-LH
      $setup(posedge D1 &&& (ENABLE_NOT_D0_AND_S_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D0_AND_S_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold D1-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D0_AND_S_AND_NOT_SE_AND_SI === 1'b1),
      negedge D1 &&& (ENABLE_NOT_D0_AND_S_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // hold D1-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D0_AND_S_AND_NOT_SE_AND_SI === 1'b1),
      posedge D1 &&& (ENABLE_NOT_D0_AND_S_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // setup D1-HL CK-LH
      $setup(negedge D1 &&& (ENABLE_NOT_D0_AND_S_AND_NOT_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D0_AND_S_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // setup D1-LH CK-LH
      $setup(posedge D1 &&& (ENABLE_NOT_D0_AND_S_AND_NOT_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D0_AND_S_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // hold D1-HL CK-LH
      $hold(posedge CK &&& (ENABLE_D0_AND_S_AND_NOT_SE_AND_NOT_SI === 1'b1),
      negedge D1 &&& (ENABLE_D0_AND_S_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold D1-LH CK-LH
      $hold(posedge CK &&& (ENABLE_D0_AND_S_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge D1 &&& (ENABLE_D0_AND_S_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup D1-HL CK-LH
      $setup(negedge D1 &&& (ENABLE_D0_AND_S_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_D0_AND_S_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup D1-LH CK-LH
      $setup(posedge D1 &&& (ENABLE_D0_AND_S_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_D0_AND_S_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold D1-HL CK-LH
      $hold(posedge CK &&& (ENABLE_D0_AND_S_AND_NOT_SE_AND_SI === 1'b1),
      negedge D1 &&& (ENABLE_D0_AND_S_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // hold D1-LH CK-LH
      $hold(posedge CK &&& (ENABLE_D0_AND_S_AND_NOT_SE_AND_SI === 1'b1),
      posedge D1 &&& (ENABLE_D0_AND_S_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // setup D1-HL CK-LH
      $setup(negedge D1 &&& (ENABLE_D0_AND_S_AND_NOT_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_D0_AND_S_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // setup D1-LH CK-LH
      $setup(posedge D1 &&& (ENABLE_D0_AND_S_AND_NOT_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_D0_AND_S_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // hold S-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D0_AND_D1_AND_NOT_SE_AND_NOT_SI === 1'b1),
      negedge S &&& (ENABLE_NOT_D0_AND_D1_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold S-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D0_AND_D1_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge S &&& (ENABLE_NOT_D0_AND_D1_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup S-HL CK-LH
      $setup(negedge S &&& (ENABLE_NOT_D0_AND_D1_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D0_AND_D1_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup S-LH CK-LH
      $setup(posedge S &&& (ENABLE_NOT_D0_AND_D1_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D0_AND_D1_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold S-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D0_AND_D1_AND_NOT_SE_AND_SI === 1'b1),
      negedge S &&& (ENABLE_NOT_D0_AND_D1_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // hold S-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D0_AND_D1_AND_NOT_SE_AND_SI === 1'b1),
      posedge S &&& (ENABLE_NOT_D0_AND_D1_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // setup S-HL CK-LH
      $setup(negedge S &&& (ENABLE_NOT_D0_AND_D1_AND_NOT_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D0_AND_D1_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // setup S-LH CK-LH
      $setup(posedge S &&& (ENABLE_NOT_D0_AND_D1_AND_NOT_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D0_AND_D1_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // hold S-HL CK-LH
      $hold(posedge CK &&& (ENABLE_D0_AND_NOT_D1_AND_NOT_SE_AND_NOT_SI === 1'b1),
      negedge S &&& (ENABLE_D0_AND_NOT_D1_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold S-LH CK-LH
      $hold(posedge CK &&& (ENABLE_D0_AND_NOT_D1_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge S &&& (ENABLE_D0_AND_NOT_D1_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup S-HL CK-LH
      $setup(negedge S &&& (ENABLE_D0_AND_NOT_D1_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_D0_AND_NOT_D1_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup S-LH CK-LH
      $setup(posedge S &&& (ENABLE_D0_AND_NOT_D1_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_D0_AND_NOT_D1_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold S-HL CK-LH
      $hold(posedge CK &&& (ENABLE_D0_AND_NOT_D1_AND_NOT_SE_AND_SI === 1'b1),
      negedge S &&& (ENABLE_D0_AND_NOT_D1_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // hold S-LH CK-LH
      $hold(posedge CK &&& (ENABLE_D0_AND_NOT_D1_AND_NOT_SE_AND_SI === 1'b1),
      posedge S &&& (ENABLE_D0_AND_NOT_D1_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // setup S-HL CK-LH
      $setup(negedge S &&& (ENABLE_D0_AND_NOT_D1_AND_NOT_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_D0_AND_NOT_D1_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // setup S-LH CK-LH
      $setup(posedge S &&& (ENABLE_D0_AND_NOT_D1_AND_NOT_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_D0_AND_NOT_D1_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // hold SE-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_NOT_S_AND_SI === 1'b1),
      negedge SE &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_NOT_S_AND_SI === 1'b1),1.0);
      
      // hold SE-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_NOT_S_AND_SI === 1'b1),
      posedge SE &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_NOT_S_AND_SI === 1'b1),1.0);
      
      // setup SE-HL CK-LH
      $setup(negedge SE &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_NOT_S_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_NOT_S_AND_SI === 1'b1),1.0);
      
      // setup SE-LH CK-LH
      $setup(posedge SE &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_NOT_S_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_NOT_S_AND_SI === 1'b1),1.0);
      
      // hold SE-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_S_AND_SI === 1'b1),
      negedge SE &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_S_AND_SI === 1'b1),1.0);
      
      // hold SE-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_S_AND_SI === 1'b1),
      posedge SE &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_S_AND_SI === 1'b1),1.0);
      
      // setup SE-HL CK-LH
      $setup(negedge SE &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_S_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_S_AND_SI === 1'b1),1.0);
      
      // setup SE-LH CK-LH
      $setup(posedge SE &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_S_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_S_AND_SI === 1'b1),1.0);
      
      // hold SE-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D0_AND_D1_AND_NOT_S_AND_SI === 1'b1),
      negedge SE &&& (ENABLE_NOT_D0_AND_D1_AND_NOT_S_AND_SI === 1'b1),1.0);
      
      // hold SE-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D0_AND_D1_AND_NOT_S_AND_SI === 1'b1),
      posedge SE &&& (ENABLE_NOT_D0_AND_D1_AND_NOT_S_AND_SI === 1'b1),1.0);
      
      // setup SE-HL CK-LH
      $setup(negedge SE &&& (ENABLE_NOT_D0_AND_D1_AND_NOT_S_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D0_AND_D1_AND_NOT_S_AND_SI === 1'b1),1.0);
      
      // setup SE-LH CK-LH
      $setup(posedge SE &&& (ENABLE_NOT_D0_AND_D1_AND_NOT_S_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D0_AND_D1_AND_NOT_S_AND_SI === 1'b1),1.0);
      
      // hold SE-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D0_AND_D1_AND_S_AND_NOT_SI === 1'b1),
      negedge SE &&& (ENABLE_NOT_D0_AND_D1_AND_S_AND_NOT_SI === 1'b1),1.0);
      
      // hold SE-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D0_AND_D1_AND_S_AND_NOT_SI === 1'b1),
      posedge SE &&& (ENABLE_NOT_D0_AND_D1_AND_S_AND_NOT_SI === 1'b1),1.0);
      
      // setup SE-HL CK-LH
      $setup(negedge SE &&& (ENABLE_NOT_D0_AND_D1_AND_S_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D0_AND_D1_AND_S_AND_NOT_SI === 1'b1),1.0);
      
      // setup SE-LH CK-LH
      $setup(posedge SE &&& (ENABLE_NOT_D0_AND_D1_AND_S_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D0_AND_D1_AND_S_AND_NOT_SI === 1'b1),1.0);
      
      // hold SE-HL CK-LH
      $hold(posedge CK &&& (ENABLE_D0_AND_NOT_D1_AND_NOT_S_AND_NOT_SI === 1'b1),
      negedge SE &&& (ENABLE_D0_AND_NOT_D1_AND_NOT_S_AND_NOT_SI === 1'b1),1.0);
      
      // hold SE-LH CK-LH
      $hold(posedge CK &&& (ENABLE_D0_AND_NOT_D1_AND_NOT_S_AND_NOT_SI === 1'b1),
      posedge SE &&& (ENABLE_D0_AND_NOT_D1_AND_NOT_S_AND_NOT_SI === 1'b1),1.0);
      
      // setup SE-HL CK-LH
      $setup(negedge SE &&& (ENABLE_D0_AND_NOT_D1_AND_NOT_S_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_D0_AND_NOT_D1_AND_NOT_S_AND_NOT_SI === 1'b1),1.0);
      
      // setup SE-LH CK-LH
      $setup(posedge SE &&& (ENABLE_D0_AND_NOT_D1_AND_NOT_S_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_D0_AND_NOT_D1_AND_NOT_S_AND_NOT_SI === 1'b1),1.0);
      
      // hold SE-HL CK-LH
      $hold(posedge CK &&& (ENABLE_D0_AND_NOT_D1_AND_S_AND_SI === 1'b1),
      negedge SE &&& (ENABLE_D0_AND_NOT_D1_AND_S_AND_SI === 1'b1),1.0);
      
      // hold SE-LH CK-LH
      $hold(posedge CK &&& (ENABLE_D0_AND_NOT_D1_AND_S_AND_SI === 1'b1),
      posedge SE &&& (ENABLE_D0_AND_NOT_D1_AND_S_AND_SI === 1'b1),1.0);
      
      // setup SE-HL CK-LH
      $setup(negedge SE &&& (ENABLE_D0_AND_NOT_D1_AND_S_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_D0_AND_NOT_D1_AND_S_AND_SI === 1'b1),1.0);
      
      // setup SE-LH CK-LH
      $setup(posedge SE &&& (ENABLE_D0_AND_NOT_D1_AND_S_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_D0_AND_NOT_D1_AND_S_AND_SI === 1'b1),1.0);
      
      // hold SE-HL CK-LH
      $hold(posedge CK &&& (ENABLE_D0_AND_D1_AND_NOT_S_AND_NOT_SI === 1'b1),
      negedge SE &&& (ENABLE_D0_AND_D1_AND_NOT_S_AND_NOT_SI === 1'b1),1.0);
      
      // hold SE-LH CK-LH
      $hold(posedge CK &&& (ENABLE_D0_AND_D1_AND_NOT_S_AND_NOT_SI === 1'b1),
      posedge SE &&& (ENABLE_D0_AND_D1_AND_NOT_S_AND_NOT_SI === 1'b1),1.0);
      
      // setup SE-HL CK-LH
      $setup(negedge SE &&& (ENABLE_D0_AND_D1_AND_NOT_S_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_D0_AND_D1_AND_NOT_S_AND_NOT_SI === 1'b1),1.0);
      
      // setup SE-LH CK-LH
      $setup(posedge SE &&& (ENABLE_D0_AND_D1_AND_NOT_S_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_D0_AND_D1_AND_NOT_S_AND_NOT_SI === 1'b1),1.0);
      
      // hold SE-HL CK-LH
      $hold(posedge CK &&& (ENABLE_D0_AND_D1_AND_S_AND_NOT_SI === 1'b1),
      negedge SE &&& (ENABLE_D0_AND_D1_AND_S_AND_NOT_SI === 1'b1),1.0);
      
      // hold SE-LH CK-LH
      $hold(posedge CK &&& (ENABLE_D0_AND_D1_AND_S_AND_NOT_SI === 1'b1),
      posedge SE &&& (ENABLE_D0_AND_D1_AND_S_AND_NOT_SI === 1'b1),1.0);
      
      // setup SE-HL CK-LH
      $setup(negedge SE &&& (ENABLE_D0_AND_D1_AND_S_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_D0_AND_D1_AND_S_AND_NOT_SI === 1'b1),1.0);
      
      // setup SE-LH CK-LH
      $setup(posedge SE &&& (ENABLE_D0_AND_D1_AND_S_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_D0_AND_D1_AND_S_AND_NOT_SI === 1'b1),1.0);
      
      // hold SI-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_NOT_S_AND_SE === 1'b1),
      negedge SI &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_NOT_S_AND_SE === 1'b1),1.0);
      
      // hold SI-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_NOT_S_AND_SE === 1'b1),
      posedge SI &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_NOT_S_AND_SE === 1'b1),1.0);
      
      // setup SI-HL CK-LH
      $setup(negedge SI &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_NOT_S_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_NOT_S_AND_SE === 1'b1),1.0);
      
      // setup SI-LH CK-LH
      $setup(posedge SI &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_NOT_S_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_NOT_S_AND_SE === 1'b1),1.0);
      
      // hold SI-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_S_AND_SE === 1'b1),
      negedge SI &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_S_AND_SE === 1'b1),1.0);
      
      // hold SI-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_S_AND_SE === 1'b1),
      posedge SI &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_S_AND_SE === 1'b1),1.0);
      
      // setup SI-HL CK-LH
      $setup(negedge SI &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_S_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_S_AND_SE === 1'b1),1.0);
      
      // setup SI-LH CK-LH
      $setup(posedge SI &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_S_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_S_AND_SE === 1'b1),1.0);
      
      // hold SI-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D0_AND_D1_AND_NOT_S_AND_SE === 1'b1),
      negedge SI &&& (ENABLE_NOT_D0_AND_D1_AND_NOT_S_AND_SE === 1'b1),1.0);
      
      // hold SI-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D0_AND_D1_AND_NOT_S_AND_SE === 1'b1),
      posedge SI &&& (ENABLE_NOT_D0_AND_D1_AND_NOT_S_AND_SE === 1'b1),1.0);
      
      // setup SI-HL CK-LH
      $setup(negedge SI &&& (ENABLE_NOT_D0_AND_D1_AND_NOT_S_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_NOT_D0_AND_D1_AND_NOT_S_AND_SE === 1'b1),1.0);
      
      // setup SI-LH CK-LH
      $setup(posedge SI &&& (ENABLE_NOT_D0_AND_D1_AND_NOT_S_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_NOT_D0_AND_D1_AND_NOT_S_AND_SE === 1'b1),1.0);
      
      // hold SI-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D0_AND_D1_AND_S_AND_SE === 1'b1),
      negedge SI &&& (ENABLE_NOT_D0_AND_D1_AND_S_AND_SE === 1'b1),1.0);
      
      // hold SI-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D0_AND_D1_AND_S_AND_SE === 1'b1),
      posedge SI &&& (ENABLE_NOT_D0_AND_D1_AND_S_AND_SE === 1'b1),1.0);
      
      // setup SI-HL CK-LH
      $setup(negedge SI &&& (ENABLE_NOT_D0_AND_D1_AND_S_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_NOT_D0_AND_D1_AND_S_AND_SE === 1'b1),1.0);
      
      // setup SI-LH CK-LH
      $setup(posedge SI &&& (ENABLE_NOT_D0_AND_D1_AND_S_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_NOT_D0_AND_D1_AND_S_AND_SE === 1'b1),1.0);
      
      // hold SI-HL CK-LH
      $hold(posedge CK &&& (ENABLE_D0_AND_NOT_D1_AND_NOT_S_AND_SE === 1'b1),
      negedge SI &&& (ENABLE_D0_AND_NOT_D1_AND_NOT_S_AND_SE === 1'b1),1.0);
      
      // hold SI-LH CK-LH
      $hold(posedge CK &&& (ENABLE_D0_AND_NOT_D1_AND_NOT_S_AND_SE === 1'b1),
      posedge SI &&& (ENABLE_D0_AND_NOT_D1_AND_NOT_S_AND_SE === 1'b1),1.0);
      
      // setup SI-HL CK-LH
      $setup(negedge SI &&& (ENABLE_D0_AND_NOT_D1_AND_NOT_S_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_D0_AND_NOT_D1_AND_NOT_S_AND_SE === 1'b1),1.0);
      
      // setup SI-LH CK-LH
      $setup(posedge SI &&& (ENABLE_D0_AND_NOT_D1_AND_NOT_S_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_D0_AND_NOT_D1_AND_NOT_S_AND_SE === 1'b1),1.0);
      
      // hold SI-HL CK-LH
      $hold(posedge CK &&& (ENABLE_D0_AND_NOT_D1_AND_S_AND_SE === 1'b1),
      negedge SI &&& (ENABLE_D0_AND_NOT_D1_AND_S_AND_SE === 1'b1),1.0);
      
      // hold SI-LH CK-LH
      $hold(posedge CK &&& (ENABLE_D0_AND_NOT_D1_AND_S_AND_SE === 1'b1),
      posedge SI &&& (ENABLE_D0_AND_NOT_D1_AND_S_AND_SE === 1'b1),1.0);
      
      // setup SI-HL CK-LH
      $setup(negedge SI &&& (ENABLE_D0_AND_NOT_D1_AND_S_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_D0_AND_NOT_D1_AND_S_AND_SE === 1'b1),1.0);
      
      // setup SI-LH CK-LH
      $setup(posedge SI &&& (ENABLE_D0_AND_NOT_D1_AND_S_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_D0_AND_NOT_D1_AND_S_AND_SE === 1'b1),1.0);
      
      // hold SI-HL CK-LH
      $hold(posedge CK &&& (ENABLE_D0_AND_D1_AND_NOT_S_AND_SE === 1'b1),
      negedge SI &&& (ENABLE_D0_AND_D1_AND_NOT_S_AND_SE === 1'b1),1.0);
      
      // hold SI-LH CK-LH
      $hold(posedge CK &&& (ENABLE_D0_AND_D1_AND_NOT_S_AND_SE === 1'b1),
      posedge SI &&& (ENABLE_D0_AND_D1_AND_NOT_S_AND_SE === 1'b1),1.0);
      
      // setup SI-HL CK-LH
      $setup(negedge SI &&& (ENABLE_D0_AND_D1_AND_NOT_S_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_D0_AND_D1_AND_NOT_S_AND_SE === 1'b1),1.0);
      
      // setup SI-LH CK-LH
      $setup(posedge SI &&& (ENABLE_D0_AND_D1_AND_NOT_S_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_D0_AND_D1_AND_NOT_S_AND_SE === 1'b1),1.0);
      
      // hold SI-HL CK-LH
      $hold(posedge CK &&& (ENABLE_D0_AND_D1_AND_S_AND_SE === 1'b1),
      negedge SI &&& (ENABLE_D0_AND_D1_AND_S_AND_SE === 1'b1),1.0);
      
      // hold SI-LH CK-LH
      $hold(posedge CK &&& (ENABLE_D0_AND_D1_AND_S_AND_SE === 1'b1),
      posedge SI &&& (ENABLE_D0_AND_D1_AND_S_AND_SE === 1'b1),1.0);
      
      // setup SI-HL CK-LH
      $setup(negedge SI &&& (ENABLE_D0_AND_D1_AND_S_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_D0_AND_D1_AND_S_AND_SE === 1'b1),1.0);
      
      // setup SI-LH CK-LH
      $setup(posedge SI &&& (ENABLE_D0_AND_D1_AND_S_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_D0_AND_D1_AND_S_AND_SE === 1'b1),1.0);
      
      // mpw CK_lh 
      $width(posedge CK,1.0,0);
      
      // mpw CK_hl 
      $width(negedge CK,1.0,0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_FSDPMQ_2( Q, CK, D0, D1, S, SI, SE );
input CK, D0, D1, S, SE, SI;
output Q;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_FSDPMQ_2_func SAEDRVT14_FSDPMQ_2_behav_inst(.Q(Q),.CK(CK),.D0(D0),.D1(D1),.S(S),.SI(SI),.SE(SE));
`else
   SAEDRVT14_FSDPMQ_2_func SAEDRVT14_FSDPMQ_2_inst(.Q(Q),.CK(CK),.D0(D0),.D1(D1),.S(S),.SI(SI),.SE(SE));
   // spec_gates_begin
   not MGM_G0(MGM_W0,D0);
   not MGM_G1(MGM_W1,D1);
   and MGM_G2(MGM_W2,MGM_W1,MGM_W0);
   not MGM_G3(MGM_W3,S);
   and MGM_G4(MGM_W4,MGM_W3,MGM_W2);
   not MGM_G5(MGM_W5,SE);
   and MGM_G6(MGM_W6,MGM_W5,MGM_W4);
   not MGM_G7(MGM_W7,SI);
   and MGM_G8(ENABLE_NOT_D0_AND_NOT_D1_AND_NOT_S_AND_NOT_SE_AND_NOT_SI,MGM_W7,MGM_W6);
   not MGM_G9(MGM_W8,D0);
   not MGM_G10(MGM_W9,D1);
   and MGM_G11(MGM_W10,MGM_W9,MGM_W8);
   not MGM_G12(MGM_W11,S);
   and MGM_G13(MGM_W12,MGM_W11,MGM_W10);
   not MGM_G14(MGM_W13,SE);
   and MGM_G15(MGM_W14,MGM_W13,MGM_W12);
   and MGM_G16(ENABLE_NOT_D0_AND_NOT_D1_AND_NOT_S_AND_NOT_SE_AND_SI,SI,MGM_W14);
   not MGM_G17(MGM_W15,D0);
   not MGM_G18(MGM_W16,D1);
   and MGM_G19(MGM_W17,MGM_W16,MGM_W15);
   not MGM_G20(MGM_W18,S);
   and MGM_G21(MGM_W19,MGM_W18,MGM_W17);
   and MGM_G22(MGM_W20,SE,MGM_W19);
   not MGM_G23(MGM_W21,SI);
   and MGM_G24(ENABLE_NOT_D0_AND_NOT_D1_AND_NOT_S_AND_SE_AND_NOT_SI,MGM_W21,MGM_W20);
   not MGM_G25(MGM_W22,D0);
   not MGM_G26(MGM_W23,D1);
   and MGM_G27(MGM_W24,MGM_W23,MGM_W22);
   not MGM_G28(MGM_W25,S);
   and MGM_G29(MGM_W26,MGM_W25,MGM_W24);
   and MGM_G30(MGM_W27,SE,MGM_W26);
   and MGM_G31(ENABLE_NOT_D0_AND_NOT_D1_AND_NOT_S_AND_SE_AND_SI,SI,MGM_W27);
   not MGM_G32(MGM_W28,D0);
   not MGM_G33(MGM_W29,D1);
   and MGM_G34(MGM_W30,MGM_W29,MGM_W28);
   and MGM_G35(MGM_W31,S,MGM_W30);
   not MGM_G36(MGM_W32,SE);
   and MGM_G37(MGM_W33,MGM_W32,MGM_W31);
   not MGM_G38(MGM_W34,SI);
   and MGM_G39(ENABLE_NOT_D0_AND_NOT_D1_AND_S_AND_NOT_SE_AND_NOT_SI,MGM_W34,MGM_W33);
   not MGM_G40(MGM_W35,D0);
   not MGM_G41(MGM_W36,D1);
   and MGM_G42(MGM_W37,MGM_W36,MGM_W35);
   and MGM_G43(MGM_W38,S,MGM_W37);
   not MGM_G44(MGM_W39,SE);
   and MGM_G45(MGM_W40,MGM_W39,MGM_W38);
   and MGM_G46(ENABLE_NOT_D0_AND_NOT_D1_AND_S_AND_NOT_SE_AND_SI,SI,MGM_W40);
   not MGM_G47(MGM_W41,D0);
   not MGM_G48(MGM_W42,D1);
   and MGM_G49(MGM_W43,MGM_W42,MGM_W41);
   and MGM_G50(MGM_W44,S,MGM_W43);
   and MGM_G51(MGM_W45,SE,MGM_W44);
   not MGM_G52(MGM_W46,SI);
   and MGM_G53(ENABLE_NOT_D0_AND_NOT_D1_AND_S_AND_SE_AND_NOT_SI,MGM_W46,MGM_W45);
   not MGM_G54(MGM_W47,D0);
   not MGM_G55(MGM_W48,D1);
   and MGM_G56(MGM_W49,MGM_W48,MGM_W47);
   and MGM_G57(MGM_W50,S,MGM_W49);
   and MGM_G58(MGM_W51,SE,MGM_W50);
   and MGM_G59(ENABLE_NOT_D0_AND_NOT_D1_AND_S_AND_SE_AND_SI,SI,MGM_W51);
   not MGM_G60(MGM_W52,D0);
   and MGM_G61(MGM_W53,D1,MGM_W52);
   not MGM_G62(MGM_W54,S);
   and MGM_G63(MGM_W55,MGM_W54,MGM_W53);
   not MGM_G64(MGM_W56,SE);
   and MGM_G65(MGM_W57,MGM_W56,MGM_W55);
   not MGM_G66(MGM_W58,SI);
   and MGM_G67(ENABLE_NOT_D0_AND_D1_AND_NOT_S_AND_NOT_SE_AND_NOT_SI,MGM_W58,MGM_W57);
   not MGM_G68(MGM_W59,D0);
   and MGM_G69(MGM_W60,D1,MGM_W59);
   not MGM_G70(MGM_W61,S);
   and MGM_G71(MGM_W62,MGM_W61,MGM_W60);
   not MGM_G72(MGM_W63,SE);
   and MGM_G73(MGM_W64,MGM_W63,MGM_W62);
   and MGM_G74(ENABLE_NOT_D0_AND_D1_AND_NOT_S_AND_NOT_SE_AND_SI,SI,MGM_W64);
   not MGM_G75(MGM_W65,D0);
   and MGM_G76(MGM_W66,D1,MGM_W65);
   not MGM_G77(MGM_W67,S);
   and MGM_G78(MGM_W68,MGM_W67,MGM_W66);
   and MGM_G79(MGM_W69,SE,MGM_W68);
   not MGM_G80(MGM_W70,SI);
   and MGM_G81(ENABLE_NOT_D0_AND_D1_AND_NOT_S_AND_SE_AND_NOT_SI,MGM_W70,MGM_W69);
   not MGM_G82(MGM_W71,D0);
   and MGM_G83(MGM_W72,D1,MGM_W71);
   not MGM_G84(MGM_W73,S);
   and MGM_G85(MGM_W74,MGM_W73,MGM_W72);
   and MGM_G86(MGM_W75,SE,MGM_W74);
   and MGM_G87(ENABLE_NOT_D0_AND_D1_AND_NOT_S_AND_SE_AND_SI,SI,MGM_W75);
   not MGM_G88(MGM_W76,D0);
   and MGM_G89(MGM_W77,D1,MGM_W76);
   and MGM_G90(MGM_W78,S,MGM_W77);
   not MGM_G91(MGM_W79,SE);
   and MGM_G92(MGM_W80,MGM_W79,MGM_W78);
   not MGM_G93(MGM_W81,SI);
   and MGM_G94(ENABLE_NOT_D0_AND_D1_AND_S_AND_NOT_SE_AND_NOT_SI,MGM_W81,MGM_W80);
   not MGM_G95(MGM_W82,D0);
   and MGM_G96(MGM_W83,D1,MGM_W82);
   and MGM_G97(MGM_W84,S,MGM_W83);
   not MGM_G98(MGM_W85,SE);
   and MGM_G99(MGM_W86,MGM_W85,MGM_W84);
   and MGM_G100(ENABLE_NOT_D0_AND_D1_AND_S_AND_NOT_SE_AND_SI,SI,MGM_W86);
   not MGM_G101(MGM_W87,D0);
   and MGM_G102(MGM_W88,D1,MGM_W87);
   and MGM_G103(MGM_W89,S,MGM_W88);
   and MGM_G104(MGM_W90,SE,MGM_W89);
   not MGM_G105(MGM_W91,SI);
   and MGM_G106(ENABLE_NOT_D0_AND_D1_AND_S_AND_SE_AND_NOT_SI,MGM_W91,MGM_W90);
   not MGM_G107(MGM_W92,D0);
   and MGM_G108(MGM_W93,D1,MGM_W92);
   and MGM_G109(MGM_W94,S,MGM_W93);
   and MGM_G110(MGM_W95,SE,MGM_W94);
   and MGM_G111(ENABLE_NOT_D0_AND_D1_AND_S_AND_SE_AND_SI,SI,MGM_W95);
   not MGM_G112(MGM_W96,D1);
   and MGM_G113(MGM_W97,MGM_W96,D0);
   not MGM_G114(MGM_W98,S);
   and MGM_G115(MGM_W99,MGM_W98,MGM_W97);
   not MGM_G116(MGM_W100,SE);
   and MGM_G117(MGM_W101,MGM_W100,MGM_W99);
   not MGM_G118(MGM_W102,SI);
   and MGM_G119(ENABLE_D0_AND_NOT_D1_AND_NOT_S_AND_NOT_SE_AND_NOT_SI,MGM_W102,MGM_W101);
   not MGM_G120(MGM_W103,D1);
   and MGM_G121(MGM_W104,MGM_W103,D0);
   not MGM_G122(MGM_W105,S);
   and MGM_G123(MGM_W106,MGM_W105,MGM_W104);
   not MGM_G124(MGM_W107,SE);
   and MGM_G125(MGM_W108,MGM_W107,MGM_W106);
   and MGM_G126(ENABLE_D0_AND_NOT_D1_AND_NOT_S_AND_NOT_SE_AND_SI,SI,MGM_W108);
   not MGM_G127(MGM_W109,D1);
   and MGM_G128(MGM_W110,MGM_W109,D0);
   not MGM_G129(MGM_W111,S);
   and MGM_G130(MGM_W112,MGM_W111,MGM_W110);
   and MGM_G131(MGM_W113,SE,MGM_W112);
   not MGM_G132(MGM_W114,SI);
   and MGM_G133(ENABLE_D0_AND_NOT_D1_AND_NOT_S_AND_SE_AND_NOT_SI,MGM_W114,MGM_W113);
   not MGM_G134(MGM_W115,D1);
   and MGM_G135(MGM_W116,MGM_W115,D0);
   not MGM_G136(MGM_W117,S);
   and MGM_G137(MGM_W118,MGM_W117,MGM_W116);
   and MGM_G138(MGM_W119,SE,MGM_W118);
   and MGM_G139(ENABLE_D0_AND_NOT_D1_AND_NOT_S_AND_SE_AND_SI,SI,MGM_W119);
   not MGM_G140(MGM_W120,D1);
   and MGM_G141(MGM_W121,MGM_W120,D0);
   and MGM_G142(MGM_W122,S,MGM_W121);
   not MGM_G143(MGM_W123,SE);
   and MGM_G144(MGM_W124,MGM_W123,MGM_W122);
   not MGM_G145(MGM_W125,SI);
   and MGM_G146(ENABLE_D0_AND_NOT_D1_AND_S_AND_NOT_SE_AND_NOT_SI,MGM_W125,MGM_W124);
   not MGM_G147(MGM_W126,D1);
   and MGM_G148(MGM_W127,MGM_W126,D0);
   and MGM_G149(MGM_W128,S,MGM_W127);
   not MGM_G150(MGM_W129,SE);
   and MGM_G151(MGM_W130,MGM_W129,MGM_W128);
   and MGM_G152(ENABLE_D0_AND_NOT_D1_AND_S_AND_NOT_SE_AND_SI,SI,MGM_W130);
   not MGM_G153(MGM_W131,D1);
   and MGM_G154(MGM_W132,MGM_W131,D0);
   and MGM_G155(MGM_W133,S,MGM_W132);
   and MGM_G156(MGM_W134,SE,MGM_W133);
   not MGM_G157(MGM_W135,SI);
   and MGM_G158(ENABLE_D0_AND_NOT_D1_AND_S_AND_SE_AND_NOT_SI,MGM_W135,MGM_W134);
   not MGM_G159(MGM_W136,D1);
   and MGM_G160(MGM_W137,MGM_W136,D0);
   and MGM_G161(MGM_W138,S,MGM_W137);
   and MGM_G162(MGM_W139,SE,MGM_W138);
   and MGM_G163(ENABLE_D0_AND_NOT_D1_AND_S_AND_SE_AND_SI,SI,MGM_W139);
   and MGM_G164(MGM_W140,D1,D0);
   not MGM_G165(MGM_W141,S);
   and MGM_G166(MGM_W142,MGM_W141,MGM_W140);
   not MGM_G167(MGM_W143,SE);
   and MGM_G168(MGM_W144,MGM_W143,MGM_W142);
   not MGM_G169(MGM_W145,SI);
   and MGM_G170(ENABLE_D0_AND_D1_AND_NOT_S_AND_NOT_SE_AND_NOT_SI,MGM_W145,MGM_W144);
   and MGM_G171(MGM_W146,D1,D0);
   not MGM_G172(MGM_W147,S);
   and MGM_G173(MGM_W148,MGM_W147,MGM_W146);
   not MGM_G174(MGM_W149,SE);
   and MGM_G175(MGM_W150,MGM_W149,MGM_W148);
   and MGM_G176(ENABLE_D0_AND_D1_AND_NOT_S_AND_NOT_SE_AND_SI,SI,MGM_W150);
   and MGM_G177(MGM_W151,D1,D0);
   not MGM_G178(MGM_W152,S);
   and MGM_G179(MGM_W153,MGM_W152,MGM_W151);
   and MGM_G180(MGM_W154,SE,MGM_W153);
   not MGM_G181(MGM_W155,SI);
   and MGM_G182(ENABLE_D0_AND_D1_AND_NOT_S_AND_SE_AND_NOT_SI,MGM_W155,MGM_W154);
   and MGM_G183(MGM_W156,D1,D0);
   not MGM_G184(MGM_W157,S);
   and MGM_G185(MGM_W158,MGM_W157,MGM_W156);
   and MGM_G186(MGM_W159,SE,MGM_W158);
   and MGM_G187(ENABLE_D0_AND_D1_AND_NOT_S_AND_SE_AND_SI,SI,MGM_W159);
   and MGM_G188(MGM_W160,D1,D0);
   and MGM_G189(MGM_W161,S,MGM_W160);
   not MGM_G190(MGM_W162,SE);
   and MGM_G191(MGM_W163,MGM_W162,MGM_W161);
   not MGM_G192(MGM_W164,SI);
   and MGM_G193(ENABLE_D0_AND_D1_AND_S_AND_NOT_SE_AND_NOT_SI,MGM_W164,MGM_W163);
   and MGM_G194(MGM_W165,D1,D0);
   and MGM_G195(MGM_W166,S,MGM_W165);
   not MGM_G196(MGM_W167,SE);
   and MGM_G197(MGM_W168,MGM_W167,MGM_W166);
   and MGM_G198(ENABLE_D0_AND_D1_AND_S_AND_NOT_SE_AND_SI,SI,MGM_W168);
   and MGM_G199(MGM_W169,D1,D0);
   and MGM_G200(MGM_W170,S,MGM_W169);
   and MGM_G201(MGM_W171,SE,MGM_W170);
   not MGM_G202(MGM_W172,SI);
   and MGM_G203(ENABLE_D0_AND_D1_AND_S_AND_SE_AND_NOT_SI,MGM_W172,MGM_W171);
   and MGM_G204(MGM_W173,D1,D0);
   and MGM_G205(MGM_W174,S,MGM_W173);
   and MGM_G206(MGM_W175,SE,MGM_W174);
   and MGM_G207(ENABLE_D0_AND_D1_AND_S_AND_SE_AND_SI,SI,MGM_W175);
   not MGM_G208(MGM_W176,D1);
   not MGM_G209(MGM_W177,S);
   and MGM_G210(MGM_W178,MGM_W177,MGM_W176);
   not MGM_G211(MGM_W179,SE);
   and MGM_G212(MGM_W180,MGM_W179,MGM_W178);
   not MGM_G213(MGM_W181,SI);
   and MGM_G214(ENABLE_NOT_D1_AND_NOT_S_AND_NOT_SE_AND_NOT_SI,MGM_W181,MGM_W180);
   not MGM_G215(MGM_W182,D1);
   not MGM_G216(MGM_W183,S);
   and MGM_G217(MGM_W184,MGM_W183,MGM_W182);
   not MGM_G218(MGM_W185,SE);
   and MGM_G219(MGM_W186,MGM_W185,MGM_W184);
   and MGM_G220(ENABLE_NOT_D1_AND_NOT_S_AND_NOT_SE_AND_SI,SI,MGM_W186);
   not MGM_G221(MGM_W187,S);
   and MGM_G222(MGM_W188,MGM_W187,D1);
   not MGM_G223(MGM_W189,SE);
   and MGM_G224(MGM_W190,MGM_W189,MGM_W188);
   not MGM_G225(MGM_W191,SI);
   and MGM_G226(ENABLE_D1_AND_NOT_S_AND_NOT_SE_AND_NOT_SI,MGM_W191,MGM_W190);
   not MGM_G227(MGM_W192,S);
   and MGM_G228(MGM_W193,MGM_W192,D1);
   not MGM_G229(MGM_W194,SE);
   and MGM_G230(MGM_W195,MGM_W194,MGM_W193);
   and MGM_G231(ENABLE_D1_AND_NOT_S_AND_NOT_SE_AND_SI,SI,MGM_W195);
   not MGM_G232(MGM_W196,D0);
   and MGM_G233(MGM_W197,S,MGM_W196);
   not MGM_G234(MGM_W198,SE);
   and MGM_G235(MGM_W199,MGM_W198,MGM_W197);
   not MGM_G236(MGM_W200,SI);
   and MGM_G237(ENABLE_NOT_D0_AND_S_AND_NOT_SE_AND_NOT_SI,MGM_W200,MGM_W199);
   not MGM_G238(MGM_W201,D0);
   and MGM_G239(MGM_W202,S,MGM_W201);
   not MGM_G240(MGM_W203,SE);
   and MGM_G241(MGM_W204,MGM_W203,MGM_W202);
   and MGM_G242(ENABLE_NOT_D0_AND_S_AND_NOT_SE_AND_SI,SI,MGM_W204);
   and MGM_G243(MGM_W205,S,D0);
   not MGM_G244(MGM_W206,SE);
   and MGM_G245(MGM_W207,MGM_W206,MGM_W205);
   not MGM_G246(MGM_W208,SI);
   and MGM_G247(ENABLE_D0_AND_S_AND_NOT_SE_AND_NOT_SI,MGM_W208,MGM_W207);
   and MGM_G248(MGM_W209,S,D0);
   not MGM_G249(MGM_W210,SE);
   and MGM_G250(MGM_W211,MGM_W210,MGM_W209);
   and MGM_G251(ENABLE_D0_AND_S_AND_NOT_SE_AND_SI,SI,MGM_W211);
   not MGM_G252(MGM_W212,D0);
   and MGM_G253(MGM_W213,D1,MGM_W212);
   not MGM_G254(MGM_W214,SE);
   and MGM_G255(MGM_W215,MGM_W214,MGM_W213);
   not MGM_G256(MGM_W216,SI);
   and MGM_G257(ENABLE_NOT_D0_AND_D1_AND_NOT_SE_AND_NOT_SI,MGM_W216,MGM_W215);
   not MGM_G258(MGM_W217,D0);
   and MGM_G259(MGM_W218,D1,MGM_W217);
   not MGM_G260(MGM_W219,SE);
   and MGM_G261(MGM_W220,MGM_W219,MGM_W218);
   and MGM_G262(ENABLE_NOT_D0_AND_D1_AND_NOT_SE_AND_SI,SI,MGM_W220);
   not MGM_G263(MGM_W221,D1);
   and MGM_G264(MGM_W222,MGM_W221,D0);
   not MGM_G265(MGM_W223,SE);
   and MGM_G266(MGM_W224,MGM_W223,MGM_W222);
   not MGM_G267(MGM_W225,SI);
   and MGM_G268(ENABLE_D0_AND_NOT_D1_AND_NOT_SE_AND_NOT_SI,MGM_W225,MGM_W224);
   not MGM_G269(MGM_W226,D1);
   and MGM_G270(MGM_W227,MGM_W226,D0);
   not MGM_G271(MGM_W228,SE);
   and MGM_G272(MGM_W229,MGM_W228,MGM_W227);
   and MGM_G273(ENABLE_D0_AND_NOT_D1_AND_NOT_SE_AND_SI,SI,MGM_W229);
   not MGM_G274(MGM_W230,D0);
   not MGM_G275(MGM_W231,D1);
   and MGM_G276(MGM_W232,MGM_W231,MGM_W230);
   not MGM_G277(MGM_W233,S);
   and MGM_G278(MGM_W234,MGM_W233,MGM_W232);
   and MGM_G279(ENABLE_NOT_D0_AND_NOT_D1_AND_NOT_S_AND_SI,SI,MGM_W234);
   not MGM_G280(MGM_W235,D0);
   not MGM_G281(MGM_W236,D1);
   and MGM_G282(MGM_W237,MGM_W236,MGM_W235);
   and MGM_G283(MGM_W238,S,MGM_W237);
   and MGM_G284(ENABLE_NOT_D0_AND_NOT_D1_AND_S_AND_SI,SI,MGM_W238);
   not MGM_G285(MGM_W239,D0);
   and MGM_G286(MGM_W240,D1,MGM_W239);
   not MGM_G287(MGM_W241,S);
   and MGM_G288(MGM_W242,MGM_W241,MGM_W240);
   and MGM_G289(ENABLE_NOT_D0_AND_D1_AND_NOT_S_AND_SI,SI,MGM_W242);
   not MGM_G290(MGM_W243,D0);
   and MGM_G291(MGM_W244,D1,MGM_W243);
   and MGM_G292(MGM_W245,S,MGM_W244);
   not MGM_G293(MGM_W246,SI);
   and MGM_G294(ENABLE_NOT_D0_AND_D1_AND_S_AND_NOT_SI,MGM_W246,MGM_W245);
   not MGM_G295(MGM_W247,D1);
   and MGM_G296(MGM_W248,MGM_W247,D0);
   not MGM_G297(MGM_W249,S);
   and MGM_G298(MGM_W250,MGM_W249,MGM_W248);
   not MGM_G299(MGM_W251,SI);
   and MGM_G300(ENABLE_D0_AND_NOT_D1_AND_NOT_S_AND_NOT_SI,MGM_W251,MGM_W250);
   not MGM_G301(MGM_W252,D1);
   and MGM_G302(MGM_W253,MGM_W252,D0);
   and MGM_G303(MGM_W254,S,MGM_W253);
   and MGM_G304(ENABLE_D0_AND_NOT_D1_AND_S_AND_SI,SI,MGM_W254);
   and MGM_G305(MGM_W255,D1,D0);
   not MGM_G306(MGM_W256,S);
   and MGM_G307(MGM_W257,MGM_W256,MGM_W255);
   not MGM_G308(MGM_W258,SI);
   and MGM_G309(ENABLE_D0_AND_D1_AND_NOT_S_AND_NOT_SI,MGM_W258,MGM_W257);
   and MGM_G310(MGM_W259,D1,D0);
   and MGM_G311(MGM_W260,S,MGM_W259);
   not MGM_G312(MGM_W261,SI);
   and MGM_G313(ENABLE_D0_AND_D1_AND_S_AND_NOT_SI,MGM_W261,MGM_W260);
   not MGM_G314(MGM_W262,D0);
   not MGM_G315(MGM_W263,D1);
   and MGM_G316(MGM_W264,MGM_W263,MGM_W262);
   not MGM_G317(MGM_W265,S);
   and MGM_G318(MGM_W266,MGM_W265,MGM_W264);
   and MGM_G319(ENABLE_NOT_D0_AND_NOT_D1_AND_NOT_S_AND_SE,SE,MGM_W266);
   not MGM_G320(MGM_W267,D0);
   not MGM_G321(MGM_W268,D1);
   and MGM_G322(MGM_W269,MGM_W268,MGM_W267);
   and MGM_G323(MGM_W270,S,MGM_W269);
   and MGM_G324(ENABLE_NOT_D0_AND_NOT_D1_AND_S_AND_SE,SE,MGM_W270);
   not MGM_G325(MGM_W271,D0);
   and MGM_G326(MGM_W272,D1,MGM_W271);
   not MGM_G327(MGM_W273,S);
   and MGM_G328(MGM_W274,MGM_W273,MGM_W272);
   and MGM_G329(ENABLE_NOT_D0_AND_D1_AND_NOT_S_AND_SE,SE,MGM_W274);
   not MGM_G330(MGM_W275,D0);
   and MGM_G331(MGM_W276,D1,MGM_W275);
   and MGM_G332(MGM_W277,S,MGM_W276);
   and MGM_G333(ENABLE_NOT_D0_AND_D1_AND_S_AND_SE,SE,MGM_W277);
   not MGM_G334(MGM_W278,D1);
   and MGM_G335(MGM_W279,MGM_W278,D0);
   not MGM_G336(MGM_W280,S);
   and MGM_G337(MGM_W281,MGM_W280,MGM_W279);
   and MGM_G338(ENABLE_D0_AND_NOT_D1_AND_NOT_S_AND_SE,SE,MGM_W281);
   not MGM_G339(MGM_W282,D1);
   and MGM_G340(MGM_W283,MGM_W282,D0);
   and MGM_G341(MGM_W284,S,MGM_W283);
   and MGM_G342(ENABLE_D0_AND_NOT_D1_AND_S_AND_SE,SE,MGM_W284);
   and MGM_G343(MGM_W285,D1,D0);
   not MGM_G344(MGM_W286,S);
   and MGM_G345(MGM_W287,MGM_W286,MGM_W285);
   and MGM_G346(ENABLE_D0_AND_D1_AND_NOT_S_AND_SE,SE,MGM_W287);
   and MGM_G347(MGM_W288,D1,D0);
   and MGM_G348(MGM_W289,S,MGM_W288);
   and MGM_G349(ENABLE_D0_AND_D1_AND_S_AND_SE,SE,MGM_W289);
   // spec_gates_end
   // specify_block_begin
   specify

      if(D0===1'b0 && D1===1'b0 && S===1'b0 && SI===1'b1)
      // seq arc CK --> Q
      (posedge CK => (Q : SE))  = (1.0,1.0);
      
      if(D0===1'b0 && D1===1'b0 && S===1'b1 && SI===1'b1)
      // seq arc CK --> Q
      (posedge CK => (Q : SE))  = (1.0,1.0);
      
      if(D0===1'b0 && D1===1'b1 && S===1'b0 && SI===1'b1)
      // seq arc CK --> Q
      (posedge CK => (Q : SE))  = (1.0,1.0);
      
      if(D0===1'b0 && D1===1'b1 && S===1'b1 && SE===1'b0 && SI===1'b1 || D0===1'b0 && D1===1'b0 && S===1'b0 && SE===1'b0 && SI===1'b0)
      // seq arc CK --> Q
      (posedge CK => (Q : S))  = (1.0,1.0);
      
      if(D0===1'b0 && D1===1'b1 && S===1'b1 && SE===1'b1)
      // seq arc CK --> Q
      (posedge CK => (Q : SI))  = (1.0,1.0);
      
      if(D0===1'b0 && S===1'b1 && SE===1'b0 && SI===1'b0)
      // seq arc CK --> Q
      (posedge CK => (Q : D1))  = (1.0,1.0);
      
      if(D0===1'b1 && D1===1'b0 && S===1'b0 && SI===1'b0)
      // seq arc CK --> Q
      (posedge CK => (Q : SE))  = (1.0,1.0);
      
      if(D0===1'b1 && D1===1'b0 && S===1'b0 && SE===1'b1 && SI===1'b1 || D0===1'b0 && D1===1'b0 && S===1'b0 && SE===1'b1 && SI===1'b0)
      // seq arc CK --> Q
      (posedge CK => (Q : D0))  = (1.0,1.0);
      
      if(D0===1'b1 && D1===1'b0 && SE===1'b0 && SI===1'b1)
      // seq arc CK --> Q
      (posedge CK => (Q : S))  = (1.0,1.0);
      
      if(D0===1'b1 && D1===1'b0 && S===1'b1 && SE===1'b1)
      // seq arc CK --> Q
      (posedge CK => (Q : SI))  = (1.0,1.0);
      
      if(D0===1'b1 && D1===1'b1 && S===1'b0 && SE===1'b0 && SI===1'b1 || D0===1'b0 && D1===1'b0 && S===1'b1 && SE===1'b1 && SI===1'b0)
      // seq arc CK --> Q
      (posedge CK => (Q : D0))  = (1.0,1.0);
      
      if(D0===1'b1 && D1===1'b1 && S===1'b0 && SE===1'b1)
      // seq arc CK --> Q
      (posedge CK => (Q : SI))  = (1.0,1.0);
      
      if(D0===1'b1 && D1===1'b1 && S===1'b1 && SE===1'b0 && SI===1'b1 || D0===1'b0 && D1===1'b1 && S===1'b0 && SE===1'b1 && SI===1'b0)
      // seq arc CK --> Q
      (posedge CK => (Q : D0))  = (1.0,1.0);
      
      if(D0===1'b1 && D1===1'b1 && S===1'b1 && SE===1'b1)
      // seq arc CK --> Q
      (posedge CK => (Q : SI))  = (1.0,1.0);
      
      if(D0===1'b1 && S===1'b1 && SE===1'b0 && SI===1'b0)
      // seq arc CK --> Q
      (posedge CK => (Q : D1))  = (1.0,1.0);
      
      if(D1===1'b1 && S===1'b0 && SE===1'b0 && SI===1'b0)
      // seq arc CK --> Q
      (posedge CK => (Q : D0))  = (1.0,1.0);
      
      ifnone
      // seq arc CK --> Q
      (posedge CK => (Q : D0))  = (1.0,1.0);
      
      $width(negedge CK &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_NOT_S_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_NOT_S_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_NOT_S_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_NOT_S_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_NOT_S_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_NOT_S_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_NOT_S_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_NOT_S_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_S_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_S_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_S_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_S_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_S_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_S_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_S_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_S_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D0_AND_D1_AND_NOT_S_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D0_AND_D1_AND_NOT_S_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D0_AND_D1_AND_NOT_S_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D0_AND_D1_AND_NOT_S_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D0_AND_D1_AND_NOT_S_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D0_AND_D1_AND_NOT_S_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D0_AND_D1_AND_NOT_S_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D0_AND_D1_AND_NOT_S_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D0_AND_D1_AND_S_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D0_AND_D1_AND_S_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D0_AND_D1_AND_S_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D0_AND_D1_AND_S_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D0_AND_D1_AND_S_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D0_AND_D1_AND_S_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D0_AND_D1_AND_S_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D0_AND_D1_AND_S_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D0_AND_NOT_D1_AND_NOT_S_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D0_AND_NOT_D1_AND_NOT_S_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D0_AND_NOT_D1_AND_NOT_S_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D0_AND_NOT_D1_AND_NOT_S_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D0_AND_NOT_D1_AND_NOT_S_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D0_AND_NOT_D1_AND_NOT_S_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D0_AND_NOT_D1_AND_NOT_S_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D0_AND_NOT_D1_AND_NOT_S_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D0_AND_NOT_D1_AND_S_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D0_AND_NOT_D1_AND_S_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D0_AND_NOT_D1_AND_S_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D0_AND_NOT_D1_AND_S_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D0_AND_NOT_D1_AND_S_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D0_AND_NOT_D1_AND_S_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D0_AND_NOT_D1_AND_S_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D0_AND_NOT_D1_AND_S_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D0_AND_D1_AND_NOT_S_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D0_AND_D1_AND_NOT_S_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D0_AND_D1_AND_NOT_S_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D0_AND_D1_AND_NOT_S_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D0_AND_D1_AND_NOT_S_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D0_AND_D1_AND_NOT_S_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D0_AND_D1_AND_NOT_S_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D0_AND_D1_AND_NOT_S_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D0_AND_D1_AND_S_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D0_AND_D1_AND_S_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D0_AND_D1_AND_S_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D0_AND_D1_AND_S_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D0_AND_D1_AND_S_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D0_AND_D1_AND_S_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D0_AND_D1_AND_S_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D0_AND_D1_AND_S_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      // hold D0-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D1_AND_NOT_S_AND_NOT_SE_AND_NOT_SI === 1'b1),
      negedge D0 &&& (ENABLE_NOT_D1_AND_NOT_S_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold D0-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D1_AND_NOT_S_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge D0 &&& (ENABLE_NOT_D1_AND_NOT_S_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup D0-HL CK-LH
      $setup(negedge D0 &&& (ENABLE_NOT_D1_AND_NOT_S_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D1_AND_NOT_S_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup D0-LH CK-LH
      $setup(posedge D0 &&& (ENABLE_NOT_D1_AND_NOT_S_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D1_AND_NOT_S_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold D0-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D1_AND_NOT_S_AND_NOT_SE_AND_SI === 1'b1),
      negedge D0 &&& (ENABLE_NOT_D1_AND_NOT_S_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // hold D0-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D1_AND_NOT_S_AND_NOT_SE_AND_SI === 1'b1),
      posedge D0 &&& (ENABLE_NOT_D1_AND_NOT_S_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // setup D0-HL CK-LH
      $setup(negedge D0 &&& (ENABLE_NOT_D1_AND_NOT_S_AND_NOT_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D1_AND_NOT_S_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // setup D0-LH CK-LH
      $setup(posedge D0 &&& (ENABLE_NOT_D1_AND_NOT_S_AND_NOT_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D1_AND_NOT_S_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // hold D0-HL CK-LH
      $hold(posedge CK &&& (ENABLE_D1_AND_NOT_S_AND_NOT_SE_AND_NOT_SI === 1'b1),
      negedge D0 &&& (ENABLE_D1_AND_NOT_S_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold D0-LH CK-LH
      $hold(posedge CK &&& (ENABLE_D1_AND_NOT_S_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge D0 &&& (ENABLE_D1_AND_NOT_S_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup D0-HL CK-LH
      $setup(negedge D0 &&& (ENABLE_D1_AND_NOT_S_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_D1_AND_NOT_S_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup D0-LH CK-LH
      $setup(posedge D0 &&& (ENABLE_D1_AND_NOT_S_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_D1_AND_NOT_S_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold D0-HL CK-LH
      $hold(posedge CK &&& (ENABLE_D1_AND_NOT_S_AND_NOT_SE_AND_SI === 1'b1),
      negedge D0 &&& (ENABLE_D1_AND_NOT_S_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // hold D0-LH CK-LH
      $hold(posedge CK &&& (ENABLE_D1_AND_NOT_S_AND_NOT_SE_AND_SI === 1'b1),
      posedge D0 &&& (ENABLE_D1_AND_NOT_S_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // setup D0-HL CK-LH
      $setup(negedge D0 &&& (ENABLE_D1_AND_NOT_S_AND_NOT_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_D1_AND_NOT_S_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // setup D0-LH CK-LH
      $setup(posedge D0 &&& (ENABLE_D1_AND_NOT_S_AND_NOT_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_D1_AND_NOT_S_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // hold D1-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D0_AND_S_AND_NOT_SE_AND_NOT_SI === 1'b1),
      negedge D1 &&& (ENABLE_NOT_D0_AND_S_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold D1-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D0_AND_S_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge D1 &&& (ENABLE_NOT_D0_AND_S_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup D1-HL CK-LH
      $setup(negedge D1 &&& (ENABLE_NOT_D0_AND_S_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D0_AND_S_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup D1-LH CK-LH
      $setup(posedge D1 &&& (ENABLE_NOT_D0_AND_S_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D0_AND_S_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold D1-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D0_AND_S_AND_NOT_SE_AND_SI === 1'b1),
      negedge D1 &&& (ENABLE_NOT_D0_AND_S_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // hold D1-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D0_AND_S_AND_NOT_SE_AND_SI === 1'b1),
      posedge D1 &&& (ENABLE_NOT_D0_AND_S_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // setup D1-HL CK-LH
      $setup(negedge D1 &&& (ENABLE_NOT_D0_AND_S_AND_NOT_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D0_AND_S_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // setup D1-LH CK-LH
      $setup(posedge D1 &&& (ENABLE_NOT_D0_AND_S_AND_NOT_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D0_AND_S_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // hold D1-HL CK-LH
      $hold(posedge CK &&& (ENABLE_D0_AND_S_AND_NOT_SE_AND_NOT_SI === 1'b1),
      negedge D1 &&& (ENABLE_D0_AND_S_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold D1-LH CK-LH
      $hold(posedge CK &&& (ENABLE_D0_AND_S_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge D1 &&& (ENABLE_D0_AND_S_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup D1-HL CK-LH
      $setup(negedge D1 &&& (ENABLE_D0_AND_S_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_D0_AND_S_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup D1-LH CK-LH
      $setup(posedge D1 &&& (ENABLE_D0_AND_S_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_D0_AND_S_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold D1-HL CK-LH
      $hold(posedge CK &&& (ENABLE_D0_AND_S_AND_NOT_SE_AND_SI === 1'b1),
      negedge D1 &&& (ENABLE_D0_AND_S_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // hold D1-LH CK-LH
      $hold(posedge CK &&& (ENABLE_D0_AND_S_AND_NOT_SE_AND_SI === 1'b1),
      posedge D1 &&& (ENABLE_D0_AND_S_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // setup D1-HL CK-LH
      $setup(negedge D1 &&& (ENABLE_D0_AND_S_AND_NOT_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_D0_AND_S_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // setup D1-LH CK-LH
      $setup(posedge D1 &&& (ENABLE_D0_AND_S_AND_NOT_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_D0_AND_S_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // hold S-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D0_AND_D1_AND_NOT_SE_AND_NOT_SI === 1'b1),
      negedge S &&& (ENABLE_NOT_D0_AND_D1_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold S-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D0_AND_D1_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge S &&& (ENABLE_NOT_D0_AND_D1_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup S-HL CK-LH
      $setup(negedge S &&& (ENABLE_NOT_D0_AND_D1_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D0_AND_D1_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup S-LH CK-LH
      $setup(posedge S &&& (ENABLE_NOT_D0_AND_D1_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D0_AND_D1_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold S-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D0_AND_D1_AND_NOT_SE_AND_SI === 1'b1),
      negedge S &&& (ENABLE_NOT_D0_AND_D1_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // hold S-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D0_AND_D1_AND_NOT_SE_AND_SI === 1'b1),
      posedge S &&& (ENABLE_NOT_D0_AND_D1_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // setup S-HL CK-LH
      $setup(negedge S &&& (ENABLE_NOT_D0_AND_D1_AND_NOT_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D0_AND_D1_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // setup S-LH CK-LH
      $setup(posedge S &&& (ENABLE_NOT_D0_AND_D1_AND_NOT_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D0_AND_D1_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // hold S-HL CK-LH
      $hold(posedge CK &&& (ENABLE_D0_AND_NOT_D1_AND_NOT_SE_AND_NOT_SI === 1'b1),
      negedge S &&& (ENABLE_D0_AND_NOT_D1_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold S-LH CK-LH
      $hold(posedge CK &&& (ENABLE_D0_AND_NOT_D1_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge S &&& (ENABLE_D0_AND_NOT_D1_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup S-HL CK-LH
      $setup(negedge S &&& (ENABLE_D0_AND_NOT_D1_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_D0_AND_NOT_D1_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup S-LH CK-LH
      $setup(posedge S &&& (ENABLE_D0_AND_NOT_D1_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_D0_AND_NOT_D1_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold S-HL CK-LH
      $hold(posedge CK &&& (ENABLE_D0_AND_NOT_D1_AND_NOT_SE_AND_SI === 1'b1),
      negedge S &&& (ENABLE_D0_AND_NOT_D1_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // hold S-LH CK-LH
      $hold(posedge CK &&& (ENABLE_D0_AND_NOT_D1_AND_NOT_SE_AND_SI === 1'b1),
      posedge S &&& (ENABLE_D0_AND_NOT_D1_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // setup S-HL CK-LH
      $setup(negedge S &&& (ENABLE_D0_AND_NOT_D1_AND_NOT_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_D0_AND_NOT_D1_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // setup S-LH CK-LH
      $setup(posedge S &&& (ENABLE_D0_AND_NOT_D1_AND_NOT_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_D0_AND_NOT_D1_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // hold SE-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_NOT_S_AND_SI === 1'b1),
      negedge SE &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_NOT_S_AND_SI === 1'b1),1.0);
      
      // hold SE-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_NOT_S_AND_SI === 1'b1),
      posedge SE &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_NOT_S_AND_SI === 1'b1),1.0);
      
      // setup SE-HL CK-LH
      $setup(negedge SE &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_NOT_S_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_NOT_S_AND_SI === 1'b1),1.0);
      
      // setup SE-LH CK-LH
      $setup(posedge SE &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_NOT_S_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_NOT_S_AND_SI === 1'b1),1.0);
      
      // hold SE-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_S_AND_SI === 1'b1),
      negedge SE &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_S_AND_SI === 1'b1),1.0);
      
      // hold SE-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_S_AND_SI === 1'b1),
      posedge SE &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_S_AND_SI === 1'b1),1.0);
      
      // setup SE-HL CK-LH
      $setup(negedge SE &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_S_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_S_AND_SI === 1'b1),1.0);
      
      // setup SE-LH CK-LH
      $setup(posedge SE &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_S_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_S_AND_SI === 1'b1),1.0);
      
      // hold SE-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D0_AND_D1_AND_NOT_S_AND_SI === 1'b1),
      negedge SE &&& (ENABLE_NOT_D0_AND_D1_AND_NOT_S_AND_SI === 1'b1),1.0);
      
      // hold SE-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D0_AND_D1_AND_NOT_S_AND_SI === 1'b1),
      posedge SE &&& (ENABLE_NOT_D0_AND_D1_AND_NOT_S_AND_SI === 1'b1),1.0);
      
      // setup SE-HL CK-LH
      $setup(negedge SE &&& (ENABLE_NOT_D0_AND_D1_AND_NOT_S_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D0_AND_D1_AND_NOT_S_AND_SI === 1'b1),1.0);
      
      // setup SE-LH CK-LH
      $setup(posedge SE &&& (ENABLE_NOT_D0_AND_D1_AND_NOT_S_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D0_AND_D1_AND_NOT_S_AND_SI === 1'b1),1.0);
      
      // hold SE-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D0_AND_D1_AND_S_AND_NOT_SI === 1'b1),
      negedge SE &&& (ENABLE_NOT_D0_AND_D1_AND_S_AND_NOT_SI === 1'b1),1.0);
      
      // hold SE-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D0_AND_D1_AND_S_AND_NOT_SI === 1'b1),
      posedge SE &&& (ENABLE_NOT_D0_AND_D1_AND_S_AND_NOT_SI === 1'b1),1.0);
      
      // setup SE-HL CK-LH
      $setup(negedge SE &&& (ENABLE_NOT_D0_AND_D1_AND_S_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D0_AND_D1_AND_S_AND_NOT_SI === 1'b1),1.0);
      
      // setup SE-LH CK-LH
      $setup(posedge SE &&& (ENABLE_NOT_D0_AND_D1_AND_S_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D0_AND_D1_AND_S_AND_NOT_SI === 1'b1),1.0);
      
      // hold SE-HL CK-LH
      $hold(posedge CK &&& (ENABLE_D0_AND_NOT_D1_AND_NOT_S_AND_NOT_SI === 1'b1),
      negedge SE &&& (ENABLE_D0_AND_NOT_D1_AND_NOT_S_AND_NOT_SI === 1'b1),1.0);
      
      // hold SE-LH CK-LH
      $hold(posedge CK &&& (ENABLE_D0_AND_NOT_D1_AND_NOT_S_AND_NOT_SI === 1'b1),
      posedge SE &&& (ENABLE_D0_AND_NOT_D1_AND_NOT_S_AND_NOT_SI === 1'b1),1.0);
      
      // setup SE-HL CK-LH
      $setup(negedge SE &&& (ENABLE_D0_AND_NOT_D1_AND_NOT_S_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_D0_AND_NOT_D1_AND_NOT_S_AND_NOT_SI === 1'b1),1.0);
      
      // setup SE-LH CK-LH
      $setup(posedge SE &&& (ENABLE_D0_AND_NOT_D1_AND_NOT_S_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_D0_AND_NOT_D1_AND_NOT_S_AND_NOT_SI === 1'b1),1.0);
      
      // hold SE-HL CK-LH
      $hold(posedge CK &&& (ENABLE_D0_AND_NOT_D1_AND_S_AND_SI === 1'b1),
      negedge SE &&& (ENABLE_D0_AND_NOT_D1_AND_S_AND_SI === 1'b1),1.0);
      
      // hold SE-LH CK-LH
      $hold(posedge CK &&& (ENABLE_D0_AND_NOT_D1_AND_S_AND_SI === 1'b1),
      posedge SE &&& (ENABLE_D0_AND_NOT_D1_AND_S_AND_SI === 1'b1),1.0);
      
      // setup SE-HL CK-LH
      $setup(negedge SE &&& (ENABLE_D0_AND_NOT_D1_AND_S_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_D0_AND_NOT_D1_AND_S_AND_SI === 1'b1),1.0);
      
      // setup SE-LH CK-LH
      $setup(posedge SE &&& (ENABLE_D0_AND_NOT_D1_AND_S_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_D0_AND_NOT_D1_AND_S_AND_SI === 1'b1),1.0);
      
      // hold SE-HL CK-LH
      $hold(posedge CK &&& (ENABLE_D0_AND_D1_AND_NOT_S_AND_NOT_SI === 1'b1),
      negedge SE &&& (ENABLE_D0_AND_D1_AND_NOT_S_AND_NOT_SI === 1'b1),1.0);
      
      // hold SE-LH CK-LH
      $hold(posedge CK &&& (ENABLE_D0_AND_D1_AND_NOT_S_AND_NOT_SI === 1'b1),
      posedge SE &&& (ENABLE_D0_AND_D1_AND_NOT_S_AND_NOT_SI === 1'b1),1.0);
      
      // setup SE-HL CK-LH
      $setup(negedge SE &&& (ENABLE_D0_AND_D1_AND_NOT_S_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_D0_AND_D1_AND_NOT_S_AND_NOT_SI === 1'b1),1.0);
      
      // setup SE-LH CK-LH
      $setup(posedge SE &&& (ENABLE_D0_AND_D1_AND_NOT_S_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_D0_AND_D1_AND_NOT_S_AND_NOT_SI === 1'b1),1.0);
      
      // hold SE-HL CK-LH
      $hold(posedge CK &&& (ENABLE_D0_AND_D1_AND_S_AND_NOT_SI === 1'b1),
      negedge SE &&& (ENABLE_D0_AND_D1_AND_S_AND_NOT_SI === 1'b1),1.0);
      
      // hold SE-LH CK-LH
      $hold(posedge CK &&& (ENABLE_D0_AND_D1_AND_S_AND_NOT_SI === 1'b1),
      posedge SE &&& (ENABLE_D0_AND_D1_AND_S_AND_NOT_SI === 1'b1),1.0);
      
      // setup SE-HL CK-LH
      $setup(negedge SE &&& (ENABLE_D0_AND_D1_AND_S_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_D0_AND_D1_AND_S_AND_NOT_SI === 1'b1),1.0);
      
      // setup SE-LH CK-LH
      $setup(posedge SE &&& (ENABLE_D0_AND_D1_AND_S_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_D0_AND_D1_AND_S_AND_NOT_SI === 1'b1),1.0);
      
      // hold SI-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_NOT_S_AND_SE === 1'b1),
      negedge SI &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_NOT_S_AND_SE === 1'b1),1.0);
      
      // hold SI-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_NOT_S_AND_SE === 1'b1),
      posedge SI &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_NOT_S_AND_SE === 1'b1),1.0);
      
      // setup SI-HL CK-LH
      $setup(negedge SI &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_NOT_S_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_NOT_S_AND_SE === 1'b1),1.0);
      
      // setup SI-LH CK-LH
      $setup(posedge SI &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_NOT_S_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_NOT_S_AND_SE === 1'b1),1.0);
      
      // hold SI-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_S_AND_SE === 1'b1),
      negedge SI &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_S_AND_SE === 1'b1),1.0);
      
      // hold SI-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_S_AND_SE === 1'b1),
      posedge SI &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_S_AND_SE === 1'b1),1.0);
      
      // setup SI-HL CK-LH
      $setup(negedge SI &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_S_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_S_AND_SE === 1'b1),1.0);
      
      // setup SI-LH CK-LH
      $setup(posedge SI &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_S_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_S_AND_SE === 1'b1),1.0);
      
      // hold SI-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D0_AND_D1_AND_NOT_S_AND_SE === 1'b1),
      negedge SI &&& (ENABLE_NOT_D0_AND_D1_AND_NOT_S_AND_SE === 1'b1),1.0);
      
      // hold SI-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D0_AND_D1_AND_NOT_S_AND_SE === 1'b1),
      posedge SI &&& (ENABLE_NOT_D0_AND_D1_AND_NOT_S_AND_SE === 1'b1),1.0);
      
      // setup SI-HL CK-LH
      $setup(negedge SI &&& (ENABLE_NOT_D0_AND_D1_AND_NOT_S_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_NOT_D0_AND_D1_AND_NOT_S_AND_SE === 1'b1),1.0);
      
      // setup SI-LH CK-LH
      $setup(posedge SI &&& (ENABLE_NOT_D0_AND_D1_AND_NOT_S_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_NOT_D0_AND_D1_AND_NOT_S_AND_SE === 1'b1),1.0);
      
      // hold SI-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D0_AND_D1_AND_S_AND_SE === 1'b1),
      negedge SI &&& (ENABLE_NOT_D0_AND_D1_AND_S_AND_SE === 1'b1),1.0);
      
      // hold SI-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D0_AND_D1_AND_S_AND_SE === 1'b1),
      posedge SI &&& (ENABLE_NOT_D0_AND_D1_AND_S_AND_SE === 1'b1),1.0);
      
      // setup SI-HL CK-LH
      $setup(negedge SI &&& (ENABLE_NOT_D0_AND_D1_AND_S_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_NOT_D0_AND_D1_AND_S_AND_SE === 1'b1),1.0);
      
      // setup SI-LH CK-LH
      $setup(posedge SI &&& (ENABLE_NOT_D0_AND_D1_AND_S_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_NOT_D0_AND_D1_AND_S_AND_SE === 1'b1),1.0);
      
      // hold SI-HL CK-LH
      $hold(posedge CK &&& (ENABLE_D0_AND_NOT_D1_AND_NOT_S_AND_SE === 1'b1),
      negedge SI &&& (ENABLE_D0_AND_NOT_D1_AND_NOT_S_AND_SE === 1'b1),1.0);
      
      // hold SI-LH CK-LH
      $hold(posedge CK &&& (ENABLE_D0_AND_NOT_D1_AND_NOT_S_AND_SE === 1'b1),
      posedge SI &&& (ENABLE_D0_AND_NOT_D1_AND_NOT_S_AND_SE === 1'b1),1.0);
      
      // setup SI-HL CK-LH
      $setup(negedge SI &&& (ENABLE_D0_AND_NOT_D1_AND_NOT_S_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_D0_AND_NOT_D1_AND_NOT_S_AND_SE === 1'b1),1.0);
      
      // setup SI-LH CK-LH
      $setup(posedge SI &&& (ENABLE_D0_AND_NOT_D1_AND_NOT_S_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_D0_AND_NOT_D1_AND_NOT_S_AND_SE === 1'b1),1.0);
      
      // hold SI-HL CK-LH
      $hold(posedge CK &&& (ENABLE_D0_AND_NOT_D1_AND_S_AND_SE === 1'b1),
      negedge SI &&& (ENABLE_D0_AND_NOT_D1_AND_S_AND_SE === 1'b1),1.0);
      
      // hold SI-LH CK-LH
      $hold(posedge CK &&& (ENABLE_D0_AND_NOT_D1_AND_S_AND_SE === 1'b1),
      posedge SI &&& (ENABLE_D0_AND_NOT_D1_AND_S_AND_SE === 1'b1),1.0);
      
      // setup SI-HL CK-LH
      $setup(negedge SI &&& (ENABLE_D0_AND_NOT_D1_AND_S_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_D0_AND_NOT_D1_AND_S_AND_SE === 1'b1),1.0);
      
      // setup SI-LH CK-LH
      $setup(posedge SI &&& (ENABLE_D0_AND_NOT_D1_AND_S_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_D0_AND_NOT_D1_AND_S_AND_SE === 1'b1),1.0);
      
      // hold SI-HL CK-LH
      $hold(posedge CK &&& (ENABLE_D0_AND_D1_AND_NOT_S_AND_SE === 1'b1),
      negedge SI &&& (ENABLE_D0_AND_D1_AND_NOT_S_AND_SE === 1'b1),1.0);
      
      // hold SI-LH CK-LH
      $hold(posedge CK &&& (ENABLE_D0_AND_D1_AND_NOT_S_AND_SE === 1'b1),
      posedge SI &&& (ENABLE_D0_AND_D1_AND_NOT_S_AND_SE === 1'b1),1.0);
      
      // setup SI-HL CK-LH
      $setup(negedge SI &&& (ENABLE_D0_AND_D1_AND_NOT_S_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_D0_AND_D1_AND_NOT_S_AND_SE === 1'b1),1.0);
      
      // setup SI-LH CK-LH
      $setup(posedge SI &&& (ENABLE_D0_AND_D1_AND_NOT_S_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_D0_AND_D1_AND_NOT_S_AND_SE === 1'b1),1.0);
      
      // hold SI-HL CK-LH
      $hold(posedge CK &&& (ENABLE_D0_AND_D1_AND_S_AND_SE === 1'b1),
      negedge SI &&& (ENABLE_D0_AND_D1_AND_S_AND_SE === 1'b1),1.0);
      
      // hold SI-LH CK-LH
      $hold(posedge CK &&& (ENABLE_D0_AND_D1_AND_S_AND_SE === 1'b1),
      posedge SI &&& (ENABLE_D0_AND_D1_AND_S_AND_SE === 1'b1),1.0);
      
      // setup SI-HL CK-LH
      $setup(negedge SI &&& (ENABLE_D0_AND_D1_AND_S_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_D0_AND_D1_AND_S_AND_SE === 1'b1),1.0);
      
      // setup SI-LH CK-LH
      $setup(posedge SI &&& (ENABLE_D0_AND_D1_AND_S_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_D0_AND_D1_AND_S_AND_SE === 1'b1),1.0);
      
      // mpw CK_lh 
      $width(posedge CK,1.0,0);
      
      // mpw CK_hl 
      $width(negedge CK,1.0,0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_FSDPMQ_4( Q, CK, D0, D1, S, SI, SE );
input CK, D0, D1, S, SE, SI;
output Q;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_FSDPMQ_4_func SAEDRVT14_FSDPMQ_4_behav_inst(.Q(Q),.CK(CK),.D0(D0),.D1(D1),.S(S),.SI(SI),.SE(SE));
`else
   SAEDRVT14_FSDPMQ_4_func SAEDRVT14_FSDPMQ_4_inst(.Q(Q),.CK(CK),.D0(D0),.D1(D1),.S(S),.SI(SI),.SE(SE));
   // spec_gates_begin
   not MGM_G0(MGM_W0,D0);
   not MGM_G1(MGM_W1,D1);
   and MGM_G2(MGM_W2,MGM_W1,MGM_W0);
   not MGM_G3(MGM_W3,S);
   and MGM_G4(MGM_W4,MGM_W3,MGM_W2);
   not MGM_G5(MGM_W5,SE);
   and MGM_G6(MGM_W6,MGM_W5,MGM_W4);
   not MGM_G7(MGM_W7,SI);
   and MGM_G8(ENABLE_NOT_D0_AND_NOT_D1_AND_NOT_S_AND_NOT_SE_AND_NOT_SI,MGM_W7,MGM_W6);
   not MGM_G9(MGM_W8,D0);
   not MGM_G10(MGM_W9,D1);
   and MGM_G11(MGM_W10,MGM_W9,MGM_W8);
   not MGM_G12(MGM_W11,S);
   and MGM_G13(MGM_W12,MGM_W11,MGM_W10);
   not MGM_G14(MGM_W13,SE);
   and MGM_G15(MGM_W14,MGM_W13,MGM_W12);
   and MGM_G16(ENABLE_NOT_D0_AND_NOT_D1_AND_NOT_S_AND_NOT_SE_AND_SI,SI,MGM_W14);
   not MGM_G17(MGM_W15,D0);
   not MGM_G18(MGM_W16,D1);
   and MGM_G19(MGM_W17,MGM_W16,MGM_W15);
   not MGM_G20(MGM_W18,S);
   and MGM_G21(MGM_W19,MGM_W18,MGM_W17);
   and MGM_G22(MGM_W20,SE,MGM_W19);
   not MGM_G23(MGM_W21,SI);
   and MGM_G24(ENABLE_NOT_D0_AND_NOT_D1_AND_NOT_S_AND_SE_AND_NOT_SI,MGM_W21,MGM_W20);
   not MGM_G25(MGM_W22,D0);
   not MGM_G26(MGM_W23,D1);
   and MGM_G27(MGM_W24,MGM_W23,MGM_W22);
   not MGM_G28(MGM_W25,S);
   and MGM_G29(MGM_W26,MGM_W25,MGM_W24);
   and MGM_G30(MGM_W27,SE,MGM_W26);
   and MGM_G31(ENABLE_NOT_D0_AND_NOT_D1_AND_NOT_S_AND_SE_AND_SI,SI,MGM_W27);
   not MGM_G32(MGM_W28,D0);
   not MGM_G33(MGM_W29,D1);
   and MGM_G34(MGM_W30,MGM_W29,MGM_W28);
   and MGM_G35(MGM_W31,S,MGM_W30);
   not MGM_G36(MGM_W32,SE);
   and MGM_G37(MGM_W33,MGM_W32,MGM_W31);
   not MGM_G38(MGM_W34,SI);
   and MGM_G39(ENABLE_NOT_D0_AND_NOT_D1_AND_S_AND_NOT_SE_AND_NOT_SI,MGM_W34,MGM_W33);
   not MGM_G40(MGM_W35,D0);
   not MGM_G41(MGM_W36,D1);
   and MGM_G42(MGM_W37,MGM_W36,MGM_W35);
   and MGM_G43(MGM_W38,S,MGM_W37);
   not MGM_G44(MGM_W39,SE);
   and MGM_G45(MGM_W40,MGM_W39,MGM_W38);
   and MGM_G46(ENABLE_NOT_D0_AND_NOT_D1_AND_S_AND_NOT_SE_AND_SI,SI,MGM_W40);
   not MGM_G47(MGM_W41,D0);
   not MGM_G48(MGM_W42,D1);
   and MGM_G49(MGM_W43,MGM_W42,MGM_W41);
   and MGM_G50(MGM_W44,S,MGM_W43);
   and MGM_G51(MGM_W45,SE,MGM_W44);
   not MGM_G52(MGM_W46,SI);
   and MGM_G53(ENABLE_NOT_D0_AND_NOT_D1_AND_S_AND_SE_AND_NOT_SI,MGM_W46,MGM_W45);
   not MGM_G54(MGM_W47,D0);
   not MGM_G55(MGM_W48,D1);
   and MGM_G56(MGM_W49,MGM_W48,MGM_W47);
   and MGM_G57(MGM_W50,S,MGM_W49);
   and MGM_G58(MGM_W51,SE,MGM_W50);
   and MGM_G59(ENABLE_NOT_D0_AND_NOT_D1_AND_S_AND_SE_AND_SI,SI,MGM_W51);
   not MGM_G60(MGM_W52,D0);
   and MGM_G61(MGM_W53,D1,MGM_W52);
   not MGM_G62(MGM_W54,S);
   and MGM_G63(MGM_W55,MGM_W54,MGM_W53);
   not MGM_G64(MGM_W56,SE);
   and MGM_G65(MGM_W57,MGM_W56,MGM_W55);
   not MGM_G66(MGM_W58,SI);
   and MGM_G67(ENABLE_NOT_D0_AND_D1_AND_NOT_S_AND_NOT_SE_AND_NOT_SI,MGM_W58,MGM_W57);
   not MGM_G68(MGM_W59,D0);
   and MGM_G69(MGM_W60,D1,MGM_W59);
   not MGM_G70(MGM_W61,S);
   and MGM_G71(MGM_W62,MGM_W61,MGM_W60);
   not MGM_G72(MGM_W63,SE);
   and MGM_G73(MGM_W64,MGM_W63,MGM_W62);
   and MGM_G74(ENABLE_NOT_D0_AND_D1_AND_NOT_S_AND_NOT_SE_AND_SI,SI,MGM_W64);
   not MGM_G75(MGM_W65,D0);
   and MGM_G76(MGM_W66,D1,MGM_W65);
   not MGM_G77(MGM_W67,S);
   and MGM_G78(MGM_W68,MGM_W67,MGM_W66);
   and MGM_G79(MGM_W69,SE,MGM_W68);
   not MGM_G80(MGM_W70,SI);
   and MGM_G81(ENABLE_NOT_D0_AND_D1_AND_NOT_S_AND_SE_AND_NOT_SI,MGM_W70,MGM_W69);
   not MGM_G82(MGM_W71,D0);
   and MGM_G83(MGM_W72,D1,MGM_W71);
   not MGM_G84(MGM_W73,S);
   and MGM_G85(MGM_W74,MGM_W73,MGM_W72);
   and MGM_G86(MGM_W75,SE,MGM_W74);
   and MGM_G87(ENABLE_NOT_D0_AND_D1_AND_NOT_S_AND_SE_AND_SI,SI,MGM_W75);
   not MGM_G88(MGM_W76,D0);
   and MGM_G89(MGM_W77,D1,MGM_W76);
   and MGM_G90(MGM_W78,S,MGM_W77);
   not MGM_G91(MGM_W79,SE);
   and MGM_G92(MGM_W80,MGM_W79,MGM_W78);
   not MGM_G93(MGM_W81,SI);
   and MGM_G94(ENABLE_NOT_D0_AND_D1_AND_S_AND_NOT_SE_AND_NOT_SI,MGM_W81,MGM_W80);
   not MGM_G95(MGM_W82,D0);
   and MGM_G96(MGM_W83,D1,MGM_W82);
   and MGM_G97(MGM_W84,S,MGM_W83);
   not MGM_G98(MGM_W85,SE);
   and MGM_G99(MGM_W86,MGM_W85,MGM_W84);
   and MGM_G100(ENABLE_NOT_D0_AND_D1_AND_S_AND_NOT_SE_AND_SI,SI,MGM_W86);
   not MGM_G101(MGM_W87,D0);
   and MGM_G102(MGM_W88,D1,MGM_W87);
   and MGM_G103(MGM_W89,S,MGM_W88);
   and MGM_G104(MGM_W90,SE,MGM_W89);
   not MGM_G105(MGM_W91,SI);
   and MGM_G106(ENABLE_NOT_D0_AND_D1_AND_S_AND_SE_AND_NOT_SI,MGM_W91,MGM_W90);
   not MGM_G107(MGM_W92,D0);
   and MGM_G108(MGM_W93,D1,MGM_W92);
   and MGM_G109(MGM_W94,S,MGM_W93);
   and MGM_G110(MGM_W95,SE,MGM_W94);
   and MGM_G111(ENABLE_NOT_D0_AND_D1_AND_S_AND_SE_AND_SI,SI,MGM_W95);
   not MGM_G112(MGM_W96,D1);
   and MGM_G113(MGM_W97,MGM_W96,D0);
   not MGM_G114(MGM_W98,S);
   and MGM_G115(MGM_W99,MGM_W98,MGM_W97);
   not MGM_G116(MGM_W100,SE);
   and MGM_G117(MGM_W101,MGM_W100,MGM_W99);
   not MGM_G118(MGM_W102,SI);
   and MGM_G119(ENABLE_D0_AND_NOT_D1_AND_NOT_S_AND_NOT_SE_AND_NOT_SI,MGM_W102,MGM_W101);
   not MGM_G120(MGM_W103,D1);
   and MGM_G121(MGM_W104,MGM_W103,D0);
   not MGM_G122(MGM_W105,S);
   and MGM_G123(MGM_W106,MGM_W105,MGM_W104);
   not MGM_G124(MGM_W107,SE);
   and MGM_G125(MGM_W108,MGM_W107,MGM_W106);
   and MGM_G126(ENABLE_D0_AND_NOT_D1_AND_NOT_S_AND_NOT_SE_AND_SI,SI,MGM_W108);
   not MGM_G127(MGM_W109,D1);
   and MGM_G128(MGM_W110,MGM_W109,D0);
   not MGM_G129(MGM_W111,S);
   and MGM_G130(MGM_W112,MGM_W111,MGM_W110);
   and MGM_G131(MGM_W113,SE,MGM_W112);
   not MGM_G132(MGM_W114,SI);
   and MGM_G133(ENABLE_D0_AND_NOT_D1_AND_NOT_S_AND_SE_AND_NOT_SI,MGM_W114,MGM_W113);
   not MGM_G134(MGM_W115,D1);
   and MGM_G135(MGM_W116,MGM_W115,D0);
   not MGM_G136(MGM_W117,S);
   and MGM_G137(MGM_W118,MGM_W117,MGM_W116);
   and MGM_G138(MGM_W119,SE,MGM_W118);
   and MGM_G139(ENABLE_D0_AND_NOT_D1_AND_NOT_S_AND_SE_AND_SI,SI,MGM_W119);
   not MGM_G140(MGM_W120,D1);
   and MGM_G141(MGM_W121,MGM_W120,D0);
   and MGM_G142(MGM_W122,S,MGM_W121);
   not MGM_G143(MGM_W123,SE);
   and MGM_G144(MGM_W124,MGM_W123,MGM_W122);
   not MGM_G145(MGM_W125,SI);
   and MGM_G146(ENABLE_D0_AND_NOT_D1_AND_S_AND_NOT_SE_AND_NOT_SI,MGM_W125,MGM_W124);
   not MGM_G147(MGM_W126,D1);
   and MGM_G148(MGM_W127,MGM_W126,D0);
   and MGM_G149(MGM_W128,S,MGM_W127);
   not MGM_G150(MGM_W129,SE);
   and MGM_G151(MGM_W130,MGM_W129,MGM_W128);
   and MGM_G152(ENABLE_D0_AND_NOT_D1_AND_S_AND_NOT_SE_AND_SI,SI,MGM_W130);
   not MGM_G153(MGM_W131,D1);
   and MGM_G154(MGM_W132,MGM_W131,D0);
   and MGM_G155(MGM_W133,S,MGM_W132);
   and MGM_G156(MGM_W134,SE,MGM_W133);
   not MGM_G157(MGM_W135,SI);
   and MGM_G158(ENABLE_D0_AND_NOT_D1_AND_S_AND_SE_AND_NOT_SI,MGM_W135,MGM_W134);
   not MGM_G159(MGM_W136,D1);
   and MGM_G160(MGM_W137,MGM_W136,D0);
   and MGM_G161(MGM_W138,S,MGM_W137);
   and MGM_G162(MGM_W139,SE,MGM_W138);
   and MGM_G163(ENABLE_D0_AND_NOT_D1_AND_S_AND_SE_AND_SI,SI,MGM_W139);
   and MGM_G164(MGM_W140,D1,D0);
   not MGM_G165(MGM_W141,S);
   and MGM_G166(MGM_W142,MGM_W141,MGM_W140);
   not MGM_G167(MGM_W143,SE);
   and MGM_G168(MGM_W144,MGM_W143,MGM_W142);
   not MGM_G169(MGM_W145,SI);
   and MGM_G170(ENABLE_D0_AND_D1_AND_NOT_S_AND_NOT_SE_AND_NOT_SI,MGM_W145,MGM_W144);
   and MGM_G171(MGM_W146,D1,D0);
   not MGM_G172(MGM_W147,S);
   and MGM_G173(MGM_W148,MGM_W147,MGM_W146);
   not MGM_G174(MGM_W149,SE);
   and MGM_G175(MGM_W150,MGM_W149,MGM_W148);
   and MGM_G176(ENABLE_D0_AND_D1_AND_NOT_S_AND_NOT_SE_AND_SI,SI,MGM_W150);
   and MGM_G177(MGM_W151,D1,D0);
   not MGM_G178(MGM_W152,S);
   and MGM_G179(MGM_W153,MGM_W152,MGM_W151);
   and MGM_G180(MGM_W154,SE,MGM_W153);
   not MGM_G181(MGM_W155,SI);
   and MGM_G182(ENABLE_D0_AND_D1_AND_NOT_S_AND_SE_AND_NOT_SI,MGM_W155,MGM_W154);
   and MGM_G183(MGM_W156,D1,D0);
   not MGM_G184(MGM_W157,S);
   and MGM_G185(MGM_W158,MGM_W157,MGM_W156);
   and MGM_G186(MGM_W159,SE,MGM_W158);
   and MGM_G187(ENABLE_D0_AND_D1_AND_NOT_S_AND_SE_AND_SI,SI,MGM_W159);
   and MGM_G188(MGM_W160,D1,D0);
   and MGM_G189(MGM_W161,S,MGM_W160);
   not MGM_G190(MGM_W162,SE);
   and MGM_G191(MGM_W163,MGM_W162,MGM_W161);
   not MGM_G192(MGM_W164,SI);
   and MGM_G193(ENABLE_D0_AND_D1_AND_S_AND_NOT_SE_AND_NOT_SI,MGM_W164,MGM_W163);
   and MGM_G194(MGM_W165,D1,D0);
   and MGM_G195(MGM_W166,S,MGM_W165);
   not MGM_G196(MGM_W167,SE);
   and MGM_G197(MGM_W168,MGM_W167,MGM_W166);
   and MGM_G198(ENABLE_D0_AND_D1_AND_S_AND_NOT_SE_AND_SI,SI,MGM_W168);
   and MGM_G199(MGM_W169,D1,D0);
   and MGM_G200(MGM_W170,S,MGM_W169);
   and MGM_G201(MGM_W171,SE,MGM_W170);
   not MGM_G202(MGM_W172,SI);
   and MGM_G203(ENABLE_D0_AND_D1_AND_S_AND_SE_AND_NOT_SI,MGM_W172,MGM_W171);
   and MGM_G204(MGM_W173,D1,D0);
   and MGM_G205(MGM_W174,S,MGM_W173);
   and MGM_G206(MGM_W175,SE,MGM_W174);
   and MGM_G207(ENABLE_D0_AND_D1_AND_S_AND_SE_AND_SI,SI,MGM_W175);
   not MGM_G208(MGM_W176,D1);
   not MGM_G209(MGM_W177,S);
   and MGM_G210(MGM_W178,MGM_W177,MGM_W176);
   not MGM_G211(MGM_W179,SE);
   and MGM_G212(MGM_W180,MGM_W179,MGM_W178);
   not MGM_G213(MGM_W181,SI);
   and MGM_G214(ENABLE_NOT_D1_AND_NOT_S_AND_NOT_SE_AND_NOT_SI,MGM_W181,MGM_W180);
   not MGM_G215(MGM_W182,D1);
   not MGM_G216(MGM_W183,S);
   and MGM_G217(MGM_W184,MGM_W183,MGM_W182);
   not MGM_G218(MGM_W185,SE);
   and MGM_G219(MGM_W186,MGM_W185,MGM_W184);
   and MGM_G220(ENABLE_NOT_D1_AND_NOT_S_AND_NOT_SE_AND_SI,SI,MGM_W186);
   not MGM_G221(MGM_W187,S);
   and MGM_G222(MGM_W188,MGM_W187,D1);
   not MGM_G223(MGM_W189,SE);
   and MGM_G224(MGM_W190,MGM_W189,MGM_W188);
   not MGM_G225(MGM_W191,SI);
   and MGM_G226(ENABLE_D1_AND_NOT_S_AND_NOT_SE_AND_NOT_SI,MGM_W191,MGM_W190);
   not MGM_G227(MGM_W192,S);
   and MGM_G228(MGM_W193,MGM_W192,D1);
   not MGM_G229(MGM_W194,SE);
   and MGM_G230(MGM_W195,MGM_W194,MGM_W193);
   and MGM_G231(ENABLE_D1_AND_NOT_S_AND_NOT_SE_AND_SI,SI,MGM_W195);
   not MGM_G232(MGM_W196,D0);
   and MGM_G233(MGM_W197,S,MGM_W196);
   not MGM_G234(MGM_W198,SE);
   and MGM_G235(MGM_W199,MGM_W198,MGM_W197);
   not MGM_G236(MGM_W200,SI);
   and MGM_G237(ENABLE_NOT_D0_AND_S_AND_NOT_SE_AND_NOT_SI,MGM_W200,MGM_W199);
   not MGM_G238(MGM_W201,D0);
   and MGM_G239(MGM_W202,S,MGM_W201);
   not MGM_G240(MGM_W203,SE);
   and MGM_G241(MGM_W204,MGM_W203,MGM_W202);
   and MGM_G242(ENABLE_NOT_D0_AND_S_AND_NOT_SE_AND_SI,SI,MGM_W204);
   and MGM_G243(MGM_W205,S,D0);
   not MGM_G244(MGM_W206,SE);
   and MGM_G245(MGM_W207,MGM_W206,MGM_W205);
   not MGM_G246(MGM_W208,SI);
   and MGM_G247(ENABLE_D0_AND_S_AND_NOT_SE_AND_NOT_SI,MGM_W208,MGM_W207);
   and MGM_G248(MGM_W209,S,D0);
   not MGM_G249(MGM_W210,SE);
   and MGM_G250(MGM_W211,MGM_W210,MGM_W209);
   and MGM_G251(ENABLE_D0_AND_S_AND_NOT_SE_AND_SI,SI,MGM_W211);
   not MGM_G252(MGM_W212,D0);
   and MGM_G253(MGM_W213,D1,MGM_W212);
   not MGM_G254(MGM_W214,SE);
   and MGM_G255(MGM_W215,MGM_W214,MGM_W213);
   not MGM_G256(MGM_W216,SI);
   and MGM_G257(ENABLE_NOT_D0_AND_D1_AND_NOT_SE_AND_NOT_SI,MGM_W216,MGM_W215);
   not MGM_G258(MGM_W217,D0);
   and MGM_G259(MGM_W218,D1,MGM_W217);
   not MGM_G260(MGM_W219,SE);
   and MGM_G261(MGM_W220,MGM_W219,MGM_W218);
   and MGM_G262(ENABLE_NOT_D0_AND_D1_AND_NOT_SE_AND_SI,SI,MGM_W220);
   not MGM_G263(MGM_W221,D1);
   and MGM_G264(MGM_W222,MGM_W221,D0);
   not MGM_G265(MGM_W223,SE);
   and MGM_G266(MGM_W224,MGM_W223,MGM_W222);
   not MGM_G267(MGM_W225,SI);
   and MGM_G268(ENABLE_D0_AND_NOT_D1_AND_NOT_SE_AND_NOT_SI,MGM_W225,MGM_W224);
   not MGM_G269(MGM_W226,D1);
   and MGM_G270(MGM_W227,MGM_W226,D0);
   not MGM_G271(MGM_W228,SE);
   and MGM_G272(MGM_W229,MGM_W228,MGM_W227);
   and MGM_G273(ENABLE_D0_AND_NOT_D1_AND_NOT_SE_AND_SI,SI,MGM_W229);
   not MGM_G274(MGM_W230,D0);
   not MGM_G275(MGM_W231,D1);
   and MGM_G276(MGM_W232,MGM_W231,MGM_W230);
   not MGM_G277(MGM_W233,S);
   and MGM_G278(MGM_W234,MGM_W233,MGM_W232);
   and MGM_G279(ENABLE_NOT_D0_AND_NOT_D1_AND_NOT_S_AND_SI,SI,MGM_W234);
   not MGM_G280(MGM_W235,D0);
   not MGM_G281(MGM_W236,D1);
   and MGM_G282(MGM_W237,MGM_W236,MGM_W235);
   and MGM_G283(MGM_W238,S,MGM_W237);
   and MGM_G284(ENABLE_NOT_D0_AND_NOT_D1_AND_S_AND_SI,SI,MGM_W238);
   not MGM_G285(MGM_W239,D0);
   and MGM_G286(MGM_W240,D1,MGM_W239);
   not MGM_G287(MGM_W241,S);
   and MGM_G288(MGM_W242,MGM_W241,MGM_W240);
   and MGM_G289(ENABLE_NOT_D0_AND_D1_AND_NOT_S_AND_SI,SI,MGM_W242);
   not MGM_G290(MGM_W243,D0);
   and MGM_G291(MGM_W244,D1,MGM_W243);
   and MGM_G292(MGM_W245,S,MGM_W244);
   not MGM_G293(MGM_W246,SI);
   and MGM_G294(ENABLE_NOT_D0_AND_D1_AND_S_AND_NOT_SI,MGM_W246,MGM_W245);
   not MGM_G295(MGM_W247,D1);
   and MGM_G296(MGM_W248,MGM_W247,D0);
   not MGM_G297(MGM_W249,S);
   and MGM_G298(MGM_W250,MGM_W249,MGM_W248);
   not MGM_G299(MGM_W251,SI);
   and MGM_G300(ENABLE_D0_AND_NOT_D1_AND_NOT_S_AND_NOT_SI,MGM_W251,MGM_W250);
   not MGM_G301(MGM_W252,D1);
   and MGM_G302(MGM_W253,MGM_W252,D0);
   and MGM_G303(MGM_W254,S,MGM_W253);
   and MGM_G304(ENABLE_D0_AND_NOT_D1_AND_S_AND_SI,SI,MGM_W254);
   and MGM_G305(MGM_W255,D1,D0);
   not MGM_G306(MGM_W256,S);
   and MGM_G307(MGM_W257,MGM_W256,MGM_W255);
   not MGM_G308(MGM_W258,SI);
   and MGM_G309(ENABLE_D0_AND_D1_AND_NOT_S_AND_NOT_SI,MGM_W258,MGM_W257);
   and MGM_G310(MGM_W259,D1,D0);
   and MGM_G311(MGM_W260,S,MGM_W259);
   not MGM_G312(MGM_W261,SI);
   and MGM_G313(ENABLE_D0_AND_D1_AND_S_AND_NOT_SI,MGM_W261,MGM_W260);
   not MGM_G314(MGM_W262,D0);
   not MGM_G315(MGM_W263,D1);
   and MGM_G316(MGM_W264,MGM_W263,MGM_W262);
   not MGM_G317(MGM_W265,S);
   and MGM_G318(MGM_W266,MGM_W265,MGM_W264);
   and MGM_G319(ENABLE_NOT_D0_AND_NOT_D1_AND_NOT_S_AND_SE,SE,MGM_W266);
   not MGM_G320(MGM_W267,D0);
   not MGM_G321(MGM_W268,D1);
   and MGM_G322(MGM_W269,MGM_W268,MGM_W267);
   and MGM_G323(MGM_W270,S,MGM_W269);
   and MGM_G324(ENABLE_NOT_D0_AND_NOT_D1_AND_S_AND_SE,SE,MGM_W270);
   not MGM_G325(MGM_W271,D0);
   and MGM_G326(MGM_W272,D1,MGM_W271);
   not MGM_G327(MGM_W273,S);
   and MGM_G328(MGM_W274,MGM_W273,MGM_W272);
   and MGM_G329(ENABLE_NOT_D0_AND_D1_AND_NOT_S_AND_SE,SE,MGM_W274);
   not MGM_G330(MGM_W275,D0);
   and MGM_G331(MGM_W276,D1,MGM_W275);
   and MGM_G332(MGM_W277,S,MGM_W276);
   and MGM_G333(ENABLE_NOT_D0_AND_D1_AND_S_AND_SE,SE,MGM_W277);
   not MGM_G334(MGM_W278,D1);
   and MGM_G335(MGM_W279,MGM_W278,D0);
   not MGM_G336(MGM_W280,S);
   and MGM_G337(MGM_W281,MGM_W280,MGM_W279);
   and MGM_G338(ENABLE_D0_AND_NOT_D1_AND_NOT_S_AND_SE,SE,MGM_W281);
   not MGM_G339(MGM_W282,D1);
   and MGM_G340(MGM_W283,MGM_W282,D0);
   and MGM_G341(MGM_W284,S,MGM_W283);
   and MGM_G342(ENABLE_D0_AND_NOT_D1_AND_S_AND_SE,SE,MGM_W284);
   and MGM_G343(MGM_W285,D1,D0);
   not MGM_G344(MGM_W286,S);
   and MGM_G345(MGM_W287,MGM_W286,MGM_W285);
   and MGM_G346(ENABLE_D0_AND_D1_AND_NOT_S_AND_SE,SE,MGM_W287);
   and MGM_G347(MGM_W288,D1,D0);
   and MGM_G348(MGM_W289,S,MGM_W288);
   and MGM_G349(ENABLE_D0_AND_D1_AND_S_AND_SE,SE,MGM_W289);
   // spec_gates_end
   // specify_block_begin
   specify

      if(D0===1'b0 && D1===1'b0 && S===1'b0 && SI===1'b1)
      // seq arc CK --> Q
      (posedge CK => (Q : SE))  = (1.0,1.0);
      
      if(D0===1'b0 && D1===1'b0 && S===1'b1 && SI===1'b1)
      // seq arc CK --> Q
      (posedge CK => (Q : SE))  = (1.0,1.0);
      
      if(D0===1'b0 && D1===1'b1 && S===1'b0 && SI===1'b1)
      // seq arc CK --> Q
      (posedge CK => (Q : SE))  = (1.0,1.0);
      
      if(D0===1'b0 && D1===1'b1 && S===1'b1 && SE===1'b0 && SI===1'b1 || D0===1'b0 && D1===1'b0 && S===1'b0 && SE===1'b0 && SI===1'b0)
      // seq arc CK --> Q
      (posedge CK => (Q : S))  = (1.0,1.0);
      
      if(D0===1'b0 && D1===1'b1 && S===1'b1 && SE===1'b1)
      // seq arc CK --> Q
      (posedge CK => (Q : SI))  = (1.0,1.0);
      
      if(D0===1'b0 && S===1'b1 && SE===1'b0 && SI===1'b0)
      // seq arc CK --> Q
      (posedge CK => (Q : D1))  = (1.0,1.0);
      
      if(D0===1'b1 && D1===1'b0 && S===1'b0 && SI===1'b0)
      // seq arc CK --> Q
      (posedge CK => (Q : SE))  = (1.0,1.0);
      
      if(D0===1'b1 && D1===1'b0 && S===1'b0 && SE===1'b1 && SI===1'b1 || D0===1'b0 && D1===1'b0 && S===1'b0 && SE===1'b1 && SI===1'b0)
      // seq arc CK --> Q
      (posedge CK => (Q : D0))  = (1.0,1.0);
      
      if(D0===1'b1 && D1===1'b0 && SE===1'b0 && SI===1'b1)
      // seq arc CK --> Q
      (posedge CK => (Q : S))  = (1.0,1.0);
      
      if(D0===1'b1 && D1===1'b0 && S===1'b1 && SE===1'b1)
      // seq arc CK --> Q
      (posedge CK => (Q : SI))  = (1.0,1.0);
      
      if(D0===1'b1 && D1===1'b1 && S===1'b0 && SE===1'b0 && SI===1'b1 || D0===1'b0 && D1===1'b0 && S===1'b1 && SE===1'b1 && SI===1'b0)
      // seq arc CK --> Q
      (posedge CK => (Q : D0))  = (1.0,1.0);
      
      if(D0===1'b1 && D1===1'b1 && S===1'b0 && SE===1'b1)
      // seq arc CK --> Q
      (posedge CK => (Q : SI))  = (1.0,1.0);
      
      if(D0===1'b1 && D1===1'b1 && S===1'b1 && SE===1'b0 && SI===1'b1 || D0===1'b0 && D1===1'b1 && S===1'b0 && SE===1'b1 && SI===1'b0)
      // seq arc CK --> Q
      (posedge CK => (Q : D0))  = (1.0,1.0);
      
      if(D0===1'b1 && D1===1'b1 && S===1'b1 && SE===1'b1)
      // seq arc CK --> Q
      (posedge CK => (Q : SI))  = (1.0,1.0);
      
      if(D0===1'b1 && S===1'b1 && SE===1'b0 && SI===1'b0)
      // seq arc CK --> Q
      (posedge CK => (Q : D1))  = (1.0,1.0);
      
      if(D1===1'b1 && S===1'b0 && SE===1'b0 && SI===1'b0)
      // seq arc CK --> Q
      (posedge CK => (Q : D0))  = (1.0,1.0);
      
      ifnone
      // seq arc CK --> Q
      (posedge CK => (Q : D0))  = (1.0,1.0);
      
      $width(negedge CK &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_NOT_S_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_NOT_S_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_NOT_S_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_NOT_S_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_NOT_S_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_NOT_S_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_NOT_S_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_NOT_S_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_S_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_S_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_S_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_S_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_S_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_S_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_S_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_S_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D0_AND_D1_AND_NOT_S_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D0_AND_D1_AND_NOT_S_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D0_AND_D1_AND_NOT_S_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D0_AND_D1_AND_NOT_S_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D0_AND_D1_AND_NOT_S_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D0_AND_D1_AND_NOT_S_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D0_AND_D1_AND_NOT_S_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D0_AND_D1_AND_NOT_S_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D0_AND_D1_AND_S_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D0_AND_D1_AND_S_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D0_AND_D1_AND_S_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D0_AND_D1_AND_S_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D0_AND_D1_AND_S_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D0_AND_D1_AND_S_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D0_AND_D1_AND_S_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D0_AND_D1_AND_S_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D0_AND_NOT_D1_AND_NOT_S_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D0_AND_NOT_D1_AND_NOT_S_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D0_AND_NOT_D1_AND_NOT_S_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D0_AND_NOT_D1_AND_NOT_S_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D0_AND_NOT_D1_AND_NOT_S_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D0_AND_NOT_D1_AND_NOT_S_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D0_AND_NOT_D1_AND_NOT_S_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D0_AND_NOT_D1_AND_NOT_S_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D0_AND_NOT_D1_AND_S_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D0_AND_NOT_D1_AND_S_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D0_AND_NOT_D1_AND_S_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D0_AND_NOT_D1_AND_S_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D0_AND_NOT_D1_AND_S_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D0_AND_NOT_D1_AND_S_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D0_AND_NOT_D1_AND_S_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D0_AND_NOT_D1_AND_S_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D0_AND_D1_AND_NOT_S_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D0_AND_D1_AND_NOT_S_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D0_AND_D1_AND_NOT_S_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D0_AND_D1_AND_NOT_S_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D0_AND_D1_AND_NOT_S_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D0_AND_D1_AND_NOT_S_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D0_AND_D1_AND_NOT_S_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D0_AND_D1_AND_NOT_S_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D0_AND_D1_AND_S_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D0_AND_D1_AND_S_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D0_AND_D1_AND_S_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D0_AND_D1_AND_S_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D0_AND_D1_AND_S_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D0_AND_D1_AND_S_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D0_AND_D1_AND_S_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D0_AND_D1_AND_S_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      // hold D0-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D1_AND_NOT_S_AND_NOT_SE_AND_NOT_SI === 1'b1),
      negedge D0 &&& (ENABLE_NOT_D1_AND_NOT_S_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold D0-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D1_AND_NOT_S_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge D0 &&& (ENABLE_NOT_D1_AND_NOT_S_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup D0-HL CK-LH
      $setup(negedge D0 &&& (ENABLE_NOT_D1_AND_NOT_S_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D1_AND_NOT_S_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup D0-LH CK-LH
      $setup(posedge D0 &&& (ENABLE_NOT_D1_AND_NOT_S_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D1_AND_NOT_S_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold D0-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D1_AND_NOT_S_AND_NOT_SE_AND_SI === 1'b1),
      negedge D0 &&& (ENABLE_NOT_D1_AND_NOT_S_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // hold D0-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D1_AND_NOT_S_AND_NOT_SE_AND_SI === 1'b1),
      posedge D0 &&& (ENABLE_NOT_D1_AND_NOT_S_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // setup D0-HL CK-LH
      $setup(negedge D0 &&& (ENABLE_NOT_D1_AND_NOT_S_AND_NOT_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D1_AND_NOT_S_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // setup D0-LH CK-LH
      $setup(posedge D0 &&& (ENABLE_NOT_D1_AND_NOT_S_AND_NOT_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D1_AND_NOT_S_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // hold D0-HL CK-LH
      $hold(posedge CK &&& (ENABLE_D1_AND_NOT_S_AND_NOT_SE_AND_NOT_SI === 1'b1),
      negedge D0 &&& (ENABLE_D1_AND_NOT_S_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold D0-LH CK-LH
      $hold(posedge CK &&& (ENABLE_D1_AND_NOT_S_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge D0 &&& (ENABLE_D1_AND_NOT_S_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup D0-HL CK-LH
      $setup(negedge D0 &&& (ENABLE_D1_AND_NOT_S_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_D1_AND_NOT_S_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup D0-LH CK-LH
      $setup(posedge D0 &&& (ENABLE_D1_AND_NOT_S_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_D1_AND_NOT_S_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold D0-HL CK-LH
      $hold(posedge CK &&& (ENABLE_D1_AND_NOT_S_AND_NOT_SE_AND_SI === 1'b1),
      negedge D0 &&& (ENABLE_D1_AND_NOT_S_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // hold D0-LH CK-LH
      $hold(posedge CK &&& (ENABLE_D1_AND_NOT_S_AND_NOT_SE_AND_SI === 1'b1),
      posedge D0 &&& (ENABLE_D1_AND_NOT_S_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // setup D0-HL CK-LH
      $setup(negedge D0 &&& (ENABLE_D1_AND_NOT_S_AND_NOT_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_D1_AND_NOT_S_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // setup D0-LH CK-LH
      $setup(posedge D0 &&& (ENABLE_D1_AND_NOT_S_AND_NOT_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_D1_AND_NOT_S_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // hold D1-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D0_AND_S_AND_NOT_SE_AND_NOT_SI === 1'b1),
      negedge D1 &&& (ENABLE_NOT_D0_AND_S_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold D1-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D0_AND_S_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge D1 &&& (ENABLE_NOT_D0_AND_S_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup D1-HL CK-LH
      $setup(negedge D1 &&& (ENABLE_NOT_D0_AND_S_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D0_AND_S_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup D1-LH CK-LH
      $setup(posedge D1 &&& (ENABLE_NOT_D0_AND_S_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D0_AND_S_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold D1-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D0_AND_S_AND_NOT_SE_AND_SI === 1'b1),
      negedge D1 &&& (ENABLE_NOT_D0_AND_S_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // hold D1-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D0_AND_S_AND_NOT_SE_AND_SI === 1'b1),
      posedge D1 &&& (ENABLE_NOT_D0_AND_S_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // setup D1-HL CK-LH
      $setup(negedge D1 &&& (ENABLE_NOT_D0_AND_S_AND_NOT_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D0_AND_S_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // setup D1-LH CK-LH
      $setup(posedge D1 &&& (ENABLE_NOT_D0_AND_S_AND_NOT_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D0_AND_S_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // hold D1-HL CK-LH
      $hold(posedge CK &&& (ENABLE_D0_AND_S_AND_NOT_SE_AND_NOT_SI === 1'b1),
      negedge D1 &&& (ENABLE_D0_AND_S_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold D1-LH CK-LH
      $hold(posedge CK &&& (ENABLE_D0_AND_S_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge D1 &&& (ENABLE_D0_AND_S_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup D1-HL CK-LH
      $setup(negedge D1 &&& (ENABLE_D0_AND_S_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_D0_AND_S_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup D1-LH CK-LH
      $setup(posedge D1 &&& (ENABLE_D0_AND_S_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_D0_AND_S_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold D1-HL CK-LH
      $hold(posedge CK &&& (ENABLE_D0_AND_S_AND_NOT_SE_AND_SI === 1'b1),
      negedge D1 &&& (ENABLE_D0_AND_S_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // hold D1-LH CK-LH
      $hold(posedge CK &&& (ENABLE_D0_AND_S_AND_NOT_SE_AND_SI === 1'b1),
      posedge D1 &&& (ENABLE_D0_AND_S_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // setup D1-HL CK-LH
      $setup(negedge D1 &&& (ENABLE_D0_AND_S_AND_NOT_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_D0_AND_S_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // setup D1-LH CK-LH
      $setup(posedge D1 &&& (ENABLE_D0_AND_S_AND_NOT_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_D0_AND_S_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // hold S-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D0_AND_D1_AND_NOT_SE_AND_NOT_SI === 1'b1),
      negedge S &&& (ENABLE_NOT_D0_AND_D1_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold S-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D0_AND_D1_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge S &&& (ENABLE_NOT_D0_AND_D1_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup S-HL CK-LH
      $setup(negedge S &&& (ENABLE_NOT_D0_AND_D1_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D0_AND_D1_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup S-LH CK-LH
      $setup(posedge S &&& (ENABLE_NOT_D0_AND_D1_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D0_AND_D1_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold S-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D0_AND_D1_AND_NOT_SE_AND_SI === 1'b1),
      negedge S &&& (ENABLE_NOT_D0_AND_D1_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // hold S-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D0_AND_D1_AND_NOT_SE_AND_SI === 1'b1),
      posedge S &&& (ENABLE_NOT_D0_AND_D1_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // setup S-HL CK-LH
      $setup(negedge S &&& (ENABLE_NOT_D0_AND_D1_AND_NOT_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D0_AND_D1_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // setup S-LH CK-LH
      $setup(posedge S &&& (ENABLE_NOT_D0_AND_D1_AND_NOT_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D0_AND_D1_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // hold S-HL CK-LH
      $hold(posedge CK &&& (ENABLE_D0_AND_NOT_D1_AND_NOT_SE_AND_NOT_SI === 1'b1),
      negedge S &&& (ENABLE_D0_AND_NOT_D1_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold S-LH CK-LH
      $hold(posedge CK &&& (ENABLE_D0_AND_NOT_D1_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge S &&& (ENABLE_D0_AND_NOT_D1_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup S-HL CK-LH
      $setup(negedge S &&& (ENABLE_D0_AND_NOT_D1_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_D0_AND_NOT_D1_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup S-LH CK-LH
      $setup(posedge S &&& (ENABLE_D0_AND_NOT_D1_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_D0_AND_NOT_D1_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold S-HL CK-LH
      $hold(posedge CK &&& (ENABLE_D0_AND_NOT_D1_AND_NOT_SE_AND_SI === 1'b1),
      negedge S &&& (ENABLE_D0_AND_NOT_D1_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // hold S-LH CK-LH
      $hold(posedge CK &&& (ENABLE_D0_AND_NOT_D1_AND_NOT_SE_AND_SI === 1'b1),
      posedge S &&& (ENABLE_D0_AND_NOT_D1_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // setup S-HL CK-LH
      $setup(negedge S &&& (ENABLE_D0_AND_NOT_D1_AND_NOT_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_D0_AND_NOT_D1_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // setup S-LH CK-LH
      $setup(posedge S &&& (ENABLE_D0_AND_NOT_D1_AND_NOT_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_D0_AND_NOT_D1_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // hold SE-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_NOT_S_AND_SI === 1'b1),
      negedge SE &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_NOT_S_AND_SI === 1'b1),1.0);
      
      // hold SE-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_NOT_S_AND_SI === 1'b1),
      posedge SE &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_NOT_S_AND_SI === 1'b1),1.0);
      
      // setup SE-HL CK-LH
      $setup(negedge SE &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_NOT_S_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_NOT_S_AND_SI === 1'b1),1.0);
      
      // setup SE-LH CK-LH
      $setup(posedge SE &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_NOT_S_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_NOT_S_AND_SI === 1'b1),1.0);
      
      // hold SE-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_S_AND_SI === 1'b1),
      negedge SE &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_S_AND_SI === 1'b1),1.0);
      
      // hold SE-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_S_AND_SI === 1'b1),
      posedge SE &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_S_AND_SI === 1'b1),1.0);
      
      // setup SE-HL CK-LH
      $setup(negedge SE &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_S_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_S_AND_SI === 1'b1),1.0);
      
      // setup SE-LH CK-LH
      $setup(posedge SE &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_S_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_S_AND_SI === 1'b1),1.0);
      
      // hold SE-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D0_AND_D1_AND_NOT_S_AND_SI === 1'b1),
      negedge SE &&& (ENABLE_NOT_D0_AND_D1_AND_NOT_S_AND_SI === 1'b1),1.0);
      
      // hold SE-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D0_AND_D1_AND_NOT_S_AND_SI === 1'b1),
      posedge SE &&& (ENABLE_NOT_D0_AND_D1_AND_NOT_S_AND_SI === 1'b1),1.0);
      
      // setup SE-HL CK-LH
      $setup(negedge SE &&& (ENABLE_NOT_D0_AND_D1_AND_NOT_S_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D0_AND_D1_AND_NOT_S_AND_SI === 1'b1),1.0);
      
      // setup SE-LH CK-LH
      $setup(posedge SE &&& (ENABLE_NOT_D0_AND_D1_AND_NOT_S_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D0_AND_D1_AND_NOT_S_AND_SI === 1'b1),1.0);
      
      // hold SE-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D0_AND_D1_AND_S_AND_NOT_SI === 1'b1),
      negedge SE &&& (ENABLE_NOT_D0_AND_D1_AND_S_AND_NOT_SI === 1'b1),1.0);
      
      // hold SE-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D0_AND_D1_AND_S_AND_NOT_SI === 1'b1),
      posedge SE &&& (ENABLE_NOT_D0_AND_D1_AND_S_AND_NOT_SI === 1'b1),1.0);
      
      // setup SE-HL CK-LH
      $setup(negedge SE &&& (ENABLE_NOT_D0_AND_D1_AND_S_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D0_AND_D1_AND_S_AND_NOT_SI === 1'b1),1.0);
      
      // setup SE-LH CK-LH
      $setup(posedge SE &&& (ENABLE_NOT_D0_AND_D1_AND_S_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D0_AND_D1_AND_S_AND_NOT_SI === 1'b1),1.0);
      
      // hold SE-HL CK-LH
      $hold(posedge CK &&& (ENABLE_D0_AND_NOT_D1_AND_NOT_S_AND_NOT_SI === 1'b1),
      negedge SE &&& (ENABLE_D0_AND_NOT_D1_AND_NOT_S_AND_NOT_SI === 1'b1),1.0);
      
      // hold SE-LH CK-LH
      $hold(posedge CK &&& (ENABLE_D0_AND_NOT_D1_AND_NOT_S_AND_NOT_SI === 1'b1),
      posedge SE &&& (ENABLE_D0_AND_NOT_D1_AND_NOT_S_AND_NOT_SI === 1'b1),1.0);
      
      // setup SE-HL CK-LH
      $setup(negedge SE &&& (ENABLE_D0_AND_NOT_D1_AND_NOT_S_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_D0_AND_NOT_D1_AND_NOT_S_AND_NOT_SI === 1'b1),1.0);
      
      // setup SE-LH CK-LH
      $setup(posedge SE &&& (ENABLE_D0_AND_NOT_D1_AND_NOT_S_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_D0_AND_NOT_D1_AND_NOT_S_AND_NOT_SI === 1'b1),1.0);
      
      // hold SE-HL CK-LH
      $hold(posedge CK &&& (ENABLE_D0_AND_NOT_D1_AND_S_AND_SI === 1'b1),
      negedge SE &&& (ENABLE_D0_AND_NOT_D1_AND_S_AND_SI === 1'b1),1.0);
      
      // hold SE-LH CK-LH
      $hold(posedge CK &&& (ENABLE_D0_AND_NOT_D1_AND_S_AND_SI === 1'b1),
      posedge SE &&& (ENABLE_D0_AND_NOT_D1_AND_S_AND_SI === 1'b1),1.0);
      
      // setup SE-HL CK-LH
      $setup(negedge SE &&& (ENABLE_D0_AND_NOT_D1_AND_S_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_D0_AND_NOT_D1_AND_S_AND_SI === 1'b1),1.0);
      
      // setup SE-LH CK-LH
      $setup(posedge SE &&& (ENABLE_D0_AND_NOT_D1_AND_S_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_D0_AND_NOT_D1_AND_S_AND_SI === 1'b1),1.0);
      
      // hold SE-HL CK-LH
      $hold(posedge CK &&& (ENABLE_D0_AND_D1_AND_NOT_S_AND_NOT_SI === 1'b1),
      negedge SE &&& (ENABLE_D0_AND_D1_AND_NOT_S_AND_NOT_SI === 1'b1),1.0);
      
      // hold SE-LH CK-LH
      $hold(posedge CK &&& (ENABLE_D0_AND_D1_AND_NOT_S_AND_NOT_SI === 1'b1),
      posedge SE &&& (ENABLE_D0_AND_D1_AND_NOT_S_AND_NOT_SI === 1'b1),1.0);
      
      // setup SE-HL CK-LH
      $setup(negedge SE &&& (ENABLE_D0_AND_D1_AND_NOT_S_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_D0_AND_D1_AND_NOT_S_AND_NOT_SI === 1'b1),1.0);
      
      // setup SE-LH CK-LH
      $setup(posedge SE &&& (ENABLE_D0_AND_D1_AND_NOT_S_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_D0_AND_D1_AND_NOT_S_AND_NOT_SI === 1'b1),1.0);
      
      // hold SE-HL CK-LH
      $hold(posedge CK &&& (ENABLE_D0_AND_D1_AND_S_AND_NOT_SI === 1'b1),
      negedge SE &&& (ENABLE_D0_AND_D1_AND_S_AND_NOT_SI === 1'b1),1.0);
      
      // hold SE-LH CK-LH
      $hold(posedge CK &&& (ENABLE_D0_AND_D1_AND_S_AND_NOT_SI === 1'b1),
      posedge SE &&& (ENABLE_D0_AND_D1_AND_S_AND_NOT_SI === 1'b1),1.0);
      
      // setup SE-HL CK-LH
      $setup(negedge SE &&& (ENABLE_D0_AND_D1_AND_S_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_D0_AND_D1_AND_S_AND_NOT_SI === 1'b1),1.0);
      
      // setup SE-LH CK-LH
      $setup(posedge SE &&& (ENABLE_D0_AND_D1_AND_S_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_D0_AND_D1_AND_S_AND_NOT_SI === 1'b1),1.0);
      
      // hold SI-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_NOT_S_AND_SE === 1'b1),
      negedge SI &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_NOT_S_AND_SE === 1'b1),1.0);
      
      // hold SI-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_NOT_S_AND_SE === 1'b1),
      posedge SI &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_NOT_S_AND_SE === 1'b1),1.0);
      
      // setup SI-HL CK-LH
      $setup(negedge SI &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_NOT_S_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_NOT_S_AND_SE === 1'b1),1.0);
      
      // setup SI-LH CK-LH
      $setup(posedge SI &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_NOT_S_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_NOT_S_AND_SE === 1'b1),1.0);
      
      // hold SI-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_S_AND_SE === 1'b1),
      negedge SI &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_S_AND_SE === 1'b1),1.0);
      
      // hold SI-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_S_AND_SE === 1'b1),
      posedge SI &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_S_AND_SE === 1'b1),1.0);
      
      // setup SI-HL CK-LH
      $setup(negedge SI &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_S_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_S_AND_SE === 1'b1),1.0);
      
      // setup SI-LH CK-LH
      $setup(posedge SI &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_S_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_S_AND_SE === 1'b1),1.0);
      
      // hold SI-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D0_AND_D1_AND_NOT_S_AND_SE === 1'b1),
      negedge SI &&& (ENABLE_NOT_D0_AND_D1_AND_NOT_S_AND_SE === 1'b1),1.0);
      
      // hold SI-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D0_AND_D1_AND_NOT_S_AND_SE === 1'b1),
      posedge SI &&& (ENABLE_NOT_D0_AND_D1_AND_NOT_S_AND_SE === 1'b1),1.0);
      
      // setup SI-HL CK-LH
      $setup(negedge SI &&& (ENABLE_NOT_D0_AND_D1_AND_NOT_S_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_NOT_D0_AND_D1_AND_NOT_S_AND_SE === 1'b1),1.0);
      
      // setup SI-LH CK-LH
      $setup(posedge SI &&& (ENABLE_NOT_D0_AND_D1_AND_NOT_S_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_NOT_D0_AND_D1_AND_NOT_S_AND_SE === 1'b1),1.0);
      
      // hold SI-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D0_AND_D1_AND_S_AND_SE === 1'b1),
      negedge SI &&& (ENABLE_NOT_D0_AND_D1_AND_S_AND_SE === 1'b1),1.0);
      
      // hold SI-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D0_AND_D1_AND_S_AND_SE === 1'b1),
      posedge SI &&& (ENABLE_NOT_D0_AND_D1_AND_S_AND_SE === 1'b1),1.0);
      
      // setup SI-HL CK-LH
      $setup(negedge SI &&& (ENABLE_NOT_D0_AND_D1_AND_S_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_NOT_D0_AND_D1_AND_S_AND_SE === 1'b1),1.0);
      
      // setup SI-LH CK-LH
      $setup(posedge SI &&& (ENABLE_NOT_D0_AND_D1_AND_S_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_NOT_D0_AND_D1_AND_S_AND_SE === 1'b1),1.0);
      
      // hold SI-HL CK-LH
      $hold(posedge CK &&& (ENABLE_D0_AND_NOT_D1_AND_NOT_S_AND_SE === 1'b1),
      negedge SI &&& (ENABLE_D0_AND_NOT_D1_AND_NOT_S_AND_SE === 1'b1),1.0);
      
      // hold SI-LH CK-LH
      $hold(posedge CK &&& (ENABLE_D0_AND_NOT_D1_AND_NOT_S_AND_SE === 1'b1),
      posedge SI &&& (ENABLE_D0_AND_NOT_D1_AND_NOT_S_AND_SE === 1'b1),1.0);
      
      // setup SI-HL CK-LH
      $setup(negedge SI &&& (ENABLE_D0_AND_NOT_D1_AND_NOT_S_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_D0_AND_NOT_D1_AND_NOT_S_AND_SE === 1'b1),1.0);
      
      // setup SI-LH CK-LH
      $setup(posedge SI &&& (ENABLE_D0_AND_NOT_D1_AND_NOT_S_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_D0_AND_NOT_D1_AND_NOT_S_AND_SE === 1'b1),1.0);
      
      // hold SI-HL CK-LH
      $hold(posedge CK &&& (ENABLE_D0_AND_NOT_D1_AND_S_AND_SE === 1'b1),
      negedge SI &&& (ENABLE_D0_AND_NOT_D1_AND_S_AND_SE === 1'b1),1.0);
      
      // hold SI-LH CK-LH
      $hold(posedge CK &&& (ENABLE_D0_AND_NOT_D1_AND_S_AND_SE === 1'b1),
      posedge SI &&& (ENABLE_D0_AND_NOT_D1_AND_S_AND_SE === 1'b1),1.0);
      
      // setup SI-HL CK-LH
      $setup(negedge SI &&& (ENABLE_D0_AND_NOT_D1_AND_S_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_D0_AND_NOT_D1_AND_S_AND_SE === 1'b1),1.0);
      
      // setup SI-LH CK-LH
      $setup(posedge SI &&& (ENABLE_D0_AND_NOT_D1_AND_S_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_D0_AND_NOT_D1_AND_S_AND_SE === 1'b1),1.0);
      
      // hold SI-HL CK-LH
      $hold(posedge CK &&& (ENABLE_D0_AND_D1_AND_NOT_S_AND_SE === 1'b1),
      negedge SI &&& (ENABLE_D0_AND_D1_AND_NOT_S_AND_SE === 1'b1),1.0);
      
      // hold SI-LH CK-LH
      $hold(posedge CK &&& (ENABLE_D0_AND_D1_AND_NOT_S_AND_SE === 1'b1),
      posedge SI &&& (ENABLE_D0_AND_D1_AND_NOT_S_AND_SE === 1'b1),1.0);
      
      // setup SI-HL CK-LH
      $setup(negedge SI &&& (ENABLE_D0_AND_D1_AND_NOT_S_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_D0_AND_D1_AND_NOT_S_AND_SE === 1'b1),1.0);
      
      // setup SI-LH CK-LH
      $setup(posedge SI &&& (ENABLE_D0_AND_D1_AND_NOT_S_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_D0_AND_D1_AND_NOT_S_AND_SE === 1'b1),1.0);
      
      // hold SI-HL CK-LH
      $hold(posedge CK &&& (ENABLE_D0_AND_D1_AND_S_AND_SE === 1'b1),
      negedge SI &&& (ENABLE_D0_AND_D1_AND_S_AND_SE === 1'b1),1.0);
      
      // hold SI-LH CK-LH
      $hold(posedge CK &&& (ENABLE_D0_AND_D1_AND_S_AND_SE === 1'b1),
      posedge SI &&& (ENABLE_D0_AND_D1_AND_S_AND_SE === 1'b1),1.0);
      
      // setup SI-HL CK-LH
      $setup(negedge SI &&& (ENABLE_D0_AND_D1_AND_S_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_D0_AND_D1_AND_S_AND_SE === 1'b1),1.0);
      
      // setup SI-LH CK-LH
      $setup(posedge SI &&& (ENABLE_D0_AND_D1_AND_S_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_D0_AND_D1_AND_S_AND_SE === 1'b1),1.0);
      
      // mpw CK_lh 
      $width(posedge CK,1.0,0);
      
      // mpw CK_hl 
      $width(negedge CK,1.0,0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_FSDPMQ_LP_0P5( Q, CK, D0, D1, S, SI, SE );
input CK, D0, D1, S, SE, SI;
output Q;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_FSDPMQ_LP_0P5_func SAEDRVT14_FSDPMQ_LP_0P5_behav_inst(.Q(Q),.CK(CK),.D0(D0),.D1(D1),.S(S),.SI(SI),.SE(SE));
`else
   SAEDRVT14_FSDPMQ_LP_0P5_func SAEDRVT14_FSDPMQ_LP_0P5_inst(.Q(Q),.CK(CK),.D0(D0),.D1(D1),.S(S),.SI(SI),.SE(SE));
   // spec_gates_begin
   not MGM_G0(MGM_W0,D0);
   not MGM_G1(MGM_W1,D1);
   and MGM_G2(MGM_W2,MGM_W1,MGM_W0);
   not MGM_G3(MGM_W3,S);
   and MGM_G4(MGM_W4,MGM_W3,MGM_W2);
   not MGM_G5(MGM_W5,SE);
   and MGM_G6(MGM_W6,MGM_W5,MGM_W4);
   not MGM_G7(MGM_W7,SI);
   and MGM_G8(ENABLE_NOT_D0_AND_NOT_D1_AND_NOT_S_AND_NOT_SE_AND_NOT_SI,MGM_W7,MGM_W6);
   not MGM_G9(MGM_W8,D0);
   not MGM_G10(MGM_W9,D1);
   and MGM_G11(MGM_W10,MGM_W9,MGM_W8);
   not MGM_G12(MGM_W11,S);
   and MGM_G13(MGM_W12,MGM_W11,MGM_W10);
   not MGM_G14(MGM_W13,SE);
   and MGM_G15(MGM_W14,MGM_W13,MGM_W12);
   and MGM_G16(ENABLE_NOT_D0_AND_NOT_D1_AND_NOT_S_AND_NOT_SE_AND_SI,SI,MGM_W14);
   not MGM_G17(MGM_W15,D0);
   not MGM_G18(MGM_W16,D1);
   and MGM_G19(MGM_W17,MGM_W16,MGM_W15);
   not MGM_G20(MGM_W18,S);
   and MGM_G21(MGM_W19,MGM_W18,MGM_W17);
   and MGM_G22(MGM_W20,SE,MGM_W19);
   not MGM_G23(MGM_W21,SI);
   and MGM_G24(ENABLE_NOT_D0_AND_NOT_D1_AND_NOT_S_AND_SE_AND_NOT_SI,MGM_W21,MGM_W20);
   not MGM_G25(MGM_W22,D0);
   not MGM_G26(MGM_W23,D1);
   and MGM_G27(MGM_W24,MGM_W23,MGM_W22);
   not MGM_G28(MGM_W25,S);
   and MGM_G29(MGM_W26,MGM_W25,MGM_W24);
   and MGM_G30(MGM_W27,SE,MGM_W26);
   and MGM_G31(ENABLE_NOT_D0_AND_NOT_D1_AND_NOT_S_AND_SE_AND_SI,SI,MGM_W27);
   not MGM_G32(MGM_W28,D0);
   not MGM_G33(MGM_W29,D1);
   and MGM_G34(MGM_W30,MGM_W29,MGM_W28);
   and MGM_G35(MGM_W31,S,MGM_W30);
   not MGM_G36(MGM_W32,SE);
   and MGM_G37(MGM_W33,MGM_W32,MGM_W31);
   not MGM_G38(MGM_W34,SI);
   and MGM_G39(ENABLE_NOT_D0_AND_NOT_D1_AND_S_AND_NOT_SE_AND_NOT_SI,MGM_W34,MGM_W33);
   not MGM_G40(MGM_W35,D0);
   not MGM_G41(MGM_W36,D1);
   and MGM_G42(MGM_W37,MGM_W36,MGM_W35);
   and MGM_G43(MGM_W38,S,MGM_W37);
   not MGM_G44(MGM_W39,SE);
   and MGM_G45(MGM_W40,MGM_W39,MGM_W38);
   and MGM_G46(ENABLE_NOT_D0_AND_NOT_D1_AND_S_AND_NOT_SE_AND_SI,SI,MGM_W40);
   not MGM_G47(MGM_W41,D0);
   not MGM_G48(MGM_W42,D1);
   and MGM_G49(MGM_W43,MGM_W42,MGM_W41);
   and MGM_G50(MGM_W44,S,MGM_W43);
   and MGM_G51(MGM_W45,SE,MGM_W44);
   not MGM_G52(MGM_W46,SI);
   and MGM_G53(ENABLE_NOT_D0_AND_NOT_D1_AND_S_AND_SE_AND_NOT_SI,MGM_W46,MGM_W45);
   not MGM_G54(MGM_W47,D0);
   not MGM_G55(MGM_W48,D1);
   and MGM_G56(MGM_W49,MGM_W48,MGM_W47);
   and MGM_G57(MGM_W50,S,MGM_W49);
   and MGM_G58(MGM_W51,SE,MGM_W50);
   and MGM_G59(ENABLE_NOT_D0_AND_NOT_D1_AND_S_AND_SE_AND_SI,SI,MGM_W51);
   not MGM_G60(MGM_W52,D0);
   and MGM_G61(MGM_W53,D1,MGM_W52);
   not MGM_G62(MGM_W54,S);
   and MGM_G63(MGM_W55,MGM_W54,MGM_W53);
   not MGM_G64(MGM_W56,SE);
   and MGM_G65(MGM_W57,MGM_W56,MGM_W55);
   not MGM_G66(MGM_W58,SI);
   and MGM_G67(ENABLE_NOT_D0_AND_D1_AND_NOT_S_AND_NOT_SE_AND_NOT_SI,MGM_W58,MGM_W57);
   not MGM_G68(MGM_W59,D0);
   and MGM_G69(MGM_W60,D1,MGM_W59);
   not MGM_G70(MGM_W61,S);
   and MGM_G71(MGM_W62,MGM_W61,MGM_W60);
   not MGM_G72(MGM_W63,SE);
   and MGM_G73(MGM_W64,MGM_W63,MGM_W62);
   and MGM_G74(ENABLE_NOT_D0_AND_D1_AND_NOT_S_AND_NOT_SE_AND_SI,SI,MGM_W64);
   not MGM_G75(MGM_W65,D0);
   and MGM_G76(MGM_W66,D1,MGM_W65);
   not MGM_G77(MGM_W67,S);
   and MGM_G78(MGM_W68,MGM_W67,MGM_W66);
   and MGM_G79(MGM_W69,SE,MGM_W68);
   not MGM_G80(MGM_W70,SI);
   and MGM_G81(ENABLE_NOT_D0_AND_D1_AND_NOT_S_AND_SE_AND_NOT_SI,MGM_W70,MGM_W69);
   not MGM_G82(MGM_W71,D0);
   and MGM_G83(MGM_W72,D1,MGM_W71);
   not MGM_G84(MGM_W73,S);
   and MGM_G85(MGM_W74,MGM_W73,MGM_W72);
   and MGM_G86(MGM_W75,SE,MGM_W74);
   and MGM_G87(ENABLE_NOT_D0_AND_D1_AND_NOT_S_AND_SE_AND_SI,SI,MGM_W75);
   not MGM_G88(MGM_W76,D0);
   and MGM_G89(MGM_W77,D1,MGM_W76);
   and MGM_G90(MGM_W78,S,MGM_W77);
   not MGM_G91(MGM_W79,SE);
   and MGM_G92(MGM_W80,MGM_W79,MGM_W78);
   not MGM_G93(MGM_W81,SI);
   and MGM_G94(ENABLE_NOT_D0_AND_D1_AND_S_AND_NOT_SE_AND_NOT_SI,MGM_W81,MGM_W80);
   not MGM_G95(MGM_W82,D0);
   and MGM_G96(MGM_W83,D1,MGM_W82);
   and MGM_G97(MGM_W84,S,MGM_W83);
   not MGM_G98(MGM_W85,SE);
   and MGM_G99(MGM_W86,MGM_W85,MGM_W84);
   and MGM_G100(ENABLE_NOT_D0_AND_D1_AND_S_AND_NOT_SE_AND_SI,SI,MGM_W86);
   not MGM_G101(MGM_W87,D0);
   and MGM_G102(MGM_W88,D1,MGM_W87);
   and MGM_G103(MGM_W89,S,MGM_W88);
   and MGM_G104(MGM_W90,SE,MGM_W89);
   not MGM_G105(MGM_W91,SI);
   and MGM_G106(ENABLE_NOT_D0_AND_D1_AND_S_AND_SE_AND_NOT_SI,MGM_W91,MGM_W90);
   not MGM_G107(MGM_W92,D0);
   and MGM_G108(MGM_W93,D1,MGM_W92);
   and MGM_G109(MGM_W94,S,MGM_W93);
   and MGM_G110(MGM_W95,SE,MGM_W94);
   and MGM_G111(ENABLE_NOT_D0_AND_D1_AND_S_AND_SE_AND_SI,SI,MGM_W95);
   not MGM_G112(MGM_W96,D1);
   and MGM_G113(MGM_W97,MGM_W96,D0);
   not MGM_G114(MGM_W98,S);
   and MGM_G115(MGM_W99,MGM_W98,MGM_W97);
   not MGM_G116(MGM_W100,SE);
   and MGM_G117(MGM_W101,MGM_W100,MGM_W99);
   not MGM_G118(MGM_W102,SI);
   and MGM_G119(ENABLE_D0_AND_NOT_D1_AND_NOT_S_AND_NOT_SE_AND_NOT_SI,MGM_W102,MGM_W101);
   not MGM_G120(MGM_W103,D1);
   and MGM_G121(MGM_W104,MGM_W103,D0);
   not MGM_G122(MGM_W105,S);
   and MGM_G123(MGM_W106,MGM_W105,MGM_W104);
   not MGM_G124(MGM_W107,SE);
   and MGM_G125(MGM_W108,MGM_W107,MGM_W106);
   and MGM_G126(ENABLE_D0_AND_NOT_D1_AND_NOT_S_AND_NOT_SE_AND_SI,SI,MGM_W108);
   not MGM_G127(MGM_W109,D1);
   and MGM_G128(MGM_W110,MGM_W109,D0);
   not MGM_G129(MGM_W111,S);
   and MGM_G130(MGM_W112,MGM_W111,MGM_W110);
   and MGM_G131(MGM_W113,SE,MGM_W112);
   not MGM_G132(MGM_W114,SI);
   and MGM_G133(ENABLE_D0_AND_NOT_D1_AND_NOT_S_AND_SE_AND_NOT_SI,MGM_W114,MGM_W113);
   not MGM_G134(MGM_W115,D1);
   and MGM_G135(MGM_W116,MGM_W115,D0);
   not MGM_G136(MGM_W117,S);
   and MGM_G137(MGM_W118,MGM_W117,MGM_W116);
   and MGM_G138(MGM_W119,SE,MGM_W118);
   and MGM_G139(ENABLE_D0_AND_NOT_D1_AND_NOT_S_AND_SE_AND_SI,SI,MGM_W119);
   not MGM_G140(MGM_W120,D1);
   and MGM_G141(MGM_W121,MGM_W120,D0);
   and MGM_G142(MGM_W122,S,MGM_W121);
   not MGM_G143(MGM_W123,SE);
   and MGM_G144(MGM_W124,MGM_W123,MGM_W122);
   not MGM_G145(MGM_W125,SI);
   and MGM_G146(ENABLE_D0_AND_NOT_D1_AND_S_AND_NOT_SE_AND_NOT_SI,MGM_W125,MGM_W124);
   not MGM_G147(MGM_W126,D1);
   and MGM_G148(MGM_W127,MGM_W126,D0);
   and MGM_G149(MGM_W128,S,MGM_W127);
   not MGM_G150(MGM_W129,SE);
   and MGM_G151(MGM_W130,MGM_W129,MGM_W128);
   and MGM_G152(ENABLE_D0_AND_NOT_D1_AND_S_AND_NOT_SE_AND_SI,SI,MGM_W130);
   not MGM_G153(MGM_W131,D1);
   and MGM_G154(MGM_W132,MGM_W131,D0);
   and MGM_G155(MGM_W133,S,MGM_W132);
   and MGM_G156(MGM_W134,SE,MGM_W133);
   not MGM_G157(MGM_W135,SI);
   and MGM_G158(ENABLE_D0_AND_NOT_D1_AND_S_AND_SE_AND_NOT_SI,MGM_W135,MGM_W134);
   not MGM_G159(MGM_W136,D1);
   and MGM_G160(MGM_W137,MGM_W136,D0);
   and MGM_G161(MGM_W138,S,MGM_W137);
   and MGM_G162(MGM_W139,SE,MGM_W138);
   and MGM_G163(ENABLE_D0_AND_NOT_D1_AND_S_AND_SE_AND_SI,SI,MGM_W139);
   and MGM_G164(MGM_W140,D1,D0);
   not MGM_G165(MGM_W141,S);
   and MGM_G166(MGM_W142,MGM_W141,MGM_W140);
   not MGM_G167(MGM_W143,SE);
   and MGM_G168(MGM_W144,MGM_W143,MGM_W142);
   not MGM_G169(MGM_W145,SI);
   and MGM_G170(ENABLE_D0_AND_D1_AND_NOT_S_AND_NOT_SE_AND_NOT_SI,MGM_W145,MGM_W144);
   and MGM_G171(MGM_W146,D1,D0);
   not MGM_G172(MGM_W147,S);
   and MGM_G173(MGM_W148,MGM_W147,MGM_W146);
   not MGM_G174(MGM_W149,SE);
   and MGM_G175(MGM_W150,MGM_W149,MGM_W148);
   and MGM_G176(ENABLE_D0_AND_D1_AND_NOT_S_AND_NOT_SE_AND_SI,SI,MGM_W150);
   and MGM_G177(MGM_W151,D1,D0);
   not MGM_G178(MGM_W152,S);
   and MGM_G179(MGM_W153,MGM_W152,MGM_W151);
   and MGM_G180(MGM_W154,SE,MGM_W153);
   not MGM_G181(MGM_W155,SI);
   and MGM_G182(ENABLE_D0_AND_D1_AND_NOT_S_AND_SE_AND_NOT_SI,MGM_W155,MGM_W154);
   and MGM_G183(MGM_W156,D1,D0);
   not MGM_G184(MGM_W157,S);
   and MGM_G185(MGM_W158,MGM_W157,MGM_W156);
   and MGM_G186(MGM_W159,SE,MGM_W158);
   and MGM_G187(ENABLE_D0_AND_D1_AND_NOT_S_AND_SE_AND_SI,SI,MGM_W159);
   and MGM_G188(MGM_W160,D1,D0);
   and MGM_G189(MGM_W161,S,MGM_W160);
   not MGM_G190(MGM_W162,SE);
   and MGM_G191(MGM_W163,MGM_W162,MGM_W161);
   not MGM_G192(MGM_W164,SI);
   and MGM_G193(ENABLE_D0_AND_D1_AND_S_AND_NOT_SE_AND_NOT_SI,MGM_W164,MGM_W163);
   and MGM_G194(MGM_W165,D1,D0);
   and MGM_G195(MGM_W166,S,MGM_W165);
   not MGM_G196(MGM_W167,SE);
   and MGM_G197(MGM_W168,MGM_W167,MGM_W166);
   and MGM_G198(ENABLE_D0_AND_D1_AND_S_AND_NOT_SE_AND_SI,SI,MGM_W168);
   and MGM_G199(MGM_W169,D1,D0);
   and MGM_G200(MGM_W170,S,MGM_W169);
   and MGM_G201(MGM_W171,SE,MGM_W170);
   not MGM_G202(MGM_W172,SI);
   and MGM_G203(ENABLE_D0_AND_D1_AND_S_AND_SE_AND_NOT_SI,MGM_W172,MGM_W171);
   and MGM_G204(MGM_W173,D1,D0);
   and MGM_G205(MGM_W174,S,MGM_W173);
   and MGM_G206(MGM_W175,SE,MGM_W174);
   and MGM_G207(ENABLE_D0_AND_D1_AND_S_AND_SE_AND_SI,SI,MGM_W175);
   not MGM_G208(MGM_W176,D1);
   not MGM_G209(MGM_W177,S);
   and MGM_G210(MGM_W178,MGM_W177,MGM_W176);
   not MGM_G211(MGM_W179,SE);
   and MGM_G212(MGM_W180,MGM_W179,MGM_W178);
   not MGM_G213(MGM_W181,SI);
   and MGM_G214(ENABLE_NOT_D1_AND_NOT_S_AND_NOT_SE_AND_NOT_SI,MGM_W181,MGM_W180);
   not MGM_G215(MGM_W182,D1);
   not MGM_G216(MGM_W183,S);
   and MGM_G217(MGM_W184,MGM_W183,MGM_W182);
   not MGM_G218(MGM_W185,SE);
   and MGM_G219(MGM_W186,MGM_W185,MGM_W184);
   and MGM_G220(ENABLE_NOT_D1_AND_NOT_S_AND_NOT_SE_AND_SI,SI,MGM_W186);
   not MGM_G221(MGM_W187,S);
   and MGM_G222(MGM_W188,MGM_W187,D1);
   not MGM_G223(MGM_W189,SE);
   and MGM_G224(MGM_W190,MGM_W189,MGM_W188);
   not MGM_G225(MGM_W191,SI);
   and MGM_G226(ENABLE_D1_AND_NOT_S_AND_NOT_SE_AND_NOT_SI,MGM_W191,MGM_W190);
   not MGM_G227(MGM_W192,S);
   and MGM_G228(MGM_W193,MGM_W192,D1);
   not MGM_G229(MGM_W194,SE);
   and MGM_G230(MGM_W195,MGM_W194,MGM_W193);
   and MGM_G231(ENABLE_D1_AND_NOT_S_AND_NOT_SE_AND_SI,SI,MGM_W195);
   not MGM_G232(MGM_W196,D0);
   and MGM_G233(MGM_W197,S,MGM_W196);
   not MGM_G234(MGM_W198,SE);
   and MGM_G235(MGM_W199,MGM_W198,MGM_W197);
   not MGM_G236(MGM_W200,SI);
   and MGM_G237(ENABLE_NOT_D0_AND_S_AND_NOT_SE_AND_NOT_SI,MGM_W200,MGM_W199);
   not MGM_G238(MGM_W201,D0);
   and MGM_G239(MGM_W202,S,MGM_W201);
   not MGM_G240(MGM_W203,SE);
   and MGM_G241(MGM_W204,MGM_W203,MGM_W202);
   and MGM_G242(ENABLE_NOT_D0_AND_S_AND_NOT_SE_AND_SI,SI,MGM_W204);
   and MGM_G243(MGM_W205,S,D0);
   not MGM_G244(MGM_W206,SE);
   and MGM_G245(MGM_W207,MGM_W206,MGM_W205);
   not MGM_G246(MGM_W208,SI);
   and MGM_G247(ENABLE_D0_AND_S_AND_NOT_SE_AND_NOT_SI,MGM_W208,MGM_W207);
   and MGM_G248(MGM_W209,S,D0);
   not MGM_G249(MGM_W210,SE);
   and MGM_G250(MGM_W211,MGM_W210,MGM_W209);
   and MGM_G251(ENABLE_D0_AND_S_AND_NOT_SE_AND_SI,SI,MGM_W211);
   not MGM_G252(MGM_W212,D0);
   and MGM_G253(MGM_W213,D1,MGM_W212);
   not MGM_G254(MGM_W214,SE);
   and MGM_G255(MGM_W215,MGM_W214,MGM_W213);
   not MGM_G256(MGM_W216,SI);
   and MGM_G257(ENABLE_NOT_D0_AND_D1_AND_NOT_SE_AND_NOT_SI,MGM_W216,MGM_W215);
   not MGM_G258(MGM_W217,D0);
   and MGM_G259(MGM_W218,D1,MGM_W217);
   not MGM_G260(MGM_W219,SE);
   and MGM_G261(MGM_W220,MGM_W219,MGM_W218);
   and MGM_G262(ENABLE_NOT_D0_AND_D1_AND_NOT_SE_AND_SI,SI,MGM_W220);
   not MGM_G263(MGM_W221,D1);
   and MGM_G264(MGM_W222,MGM_W221,D0);
   not MGM_G265(MGM_W223,SE);
   and MGM_G266(MGM_W224,MGM_W223,MGM_W222);
   not MGM_G267(MGM_W225,SI);
   and MGM_G268(ENABLE_D0_AND_NOT_D1_AND_NOT_SE_AND_NOT_SI,MGM_W225,MGM_W224);
   not MGM_G269(MGM_W226,D1);
   and MGM_G270(MGM_W227,MGM_W226,D0);
   not MGM_G271(MGM_W228,SE);
   and MGM_G272(MGM_W229,MGM_W228,MGM_W227);
   and MGM_G273(ENABLE_D0_AND_NOT_D1_AND_NOT_SE_AND_SI,SI,MGM_W229);
   not MGM_G274(MGM_W230,D0);
   not MGM_G275(MGM_W231,D1);
   and MGM_G276(MGM_W232,MGM_W231,MGM_W230);
   not MGM_G277(MGM_W233,S);
   and MGM_G278(MGM_W234,MGM_W233,MGM_W232);
   and MGM_G279(ENABLE_NOT_D0_AND_NOT_D1_AND_NOT_S_AND_SI,SI,MGM_W234);
   not MGM_G280(MGM_W235,D0);
   not MGM_G281(MGM_W236,D1);
   and MGM_G282(MGM_W237,MGM_W236,MGM_W235);
   and MGM_G283(MGM_W238,S,MGM_W237);
   and MGM_G284(ENABLE_NOT_D0_AND_NOT_D1_AND_S_AND_SI,SI,MGM_W238);
   not MGM_G285(MGM_W239,D0);
   and MGM_G286(MGM_W240,D1,MGM_W239);
   not MGM_G287(MGM_W241,S);
   and MGM_G288(MGM_W242,MGM_W241,MGM_W240);
   and MGM_G289(ENABLE_NOT_D0_AND_D1_AND_NOT_S_AND_SI,SI,MGM_W242);
   not MGM_G290(MGM_W243,D0);
   and MGM_G291(MGM_W244,D1,MGM_W243);
   and MGM_G292(MGM_W245,S,MGM_W244);
   not MGM_G293(MGM_W246,SI);
   and MGM_G294(ENABLE_NOT_D0_AND_D1_AND_S_AND_NOT_SI,MGM_W246,MGM_W245);
   not MGM_G295(MGM_W247,D1);
   and MGM_G296(MGM_W248,MGM_W247,D0);
   not MGM_G297(MGM_W249,S);
   and MGM_G298(MGM_W250,MGM_W249,MGM_W248);
   not MGM_G299(MGM_W251,SI);
   and MGM_G300(ENABLE_D0_AND_NOT_D1_AND_NOT_S_AND_NOT_SI,MGM_W251,MGM_W250);
   not MGM_G301(MGM_W252,D1);
   and MGM_G302(MGM_W253,MGM_W252,D0);
   and MGM_G303(MGM_W254,S,MGM_W253);
   and MGM_G304(ENABLE_D0_AND_NOT_D1_AND_S_AND_SI,SI,MGM_W254);
   and MGM_G305(MGM_W255,D1,D0);
   not MGM_G306(MGM_W256,S);
   and MGM_G307(MGM_W257,MGM_W256,MGM_W255);
   not MGM_G308(MGM_W258,SI);
   and MGM_G309(ENABLE_D0_AND_D1_AND_NOT_S_AND_NOT_SI,MGM_W258,MGM_W257);
   and MGM_G310(MGM_W259,D1,D0);
   and MGM_G311(MGM_W260,S,MGM_W259);
   not MGM_G312(MGM_W261,SI);
   and MGM_G313(ENABLE_D0_AND_D1_AND_S_AND_NOT_SI,MGM_W261,MGM_W260);
   not MGM_G314(MGM_W262,D0);
   not MGM_G315(MGM_W263,D1);
   and MGM_G316(MGM_W264,MGM_W263,MGM_W262);
   not MGM_G317(MGM_W265,S);
   and MGM_G318(MGM_W266,MGM_W265,MGM_W264);
   and MGM_G319(ENABLE_NOT_D0_AND_NOT_D1_AND_NOT_S_AND_SE,SE,MGM_W266);
   not MGM_G320(MGM_W267,D0);
   not MGM_G321(MGM_W268,D1);
   and MGM_G322(MGM_W269,MGM_W268,MGM_W267);
   and MGM_G323(MGM_W270,S,MGM_W269);
   and MGM_G324(ENABLE_NOT_D0_AND_NOT_D1_AND_S_AND_SE,SE,MGM_W270);
   not MGM_G325(MGM_W271,D0);
   and MGM_G326(MGM_W272,D1,MGM_W271);
   not MGM_G327(MGM_W273,S);
   and MGM_G328(MGM_W274,MGM_W273,MGM_W272);
   and MGM_G329(ENABLE_NOT_D0_AND_D1_AND_NOT_S_AND_SE,SE,MGM_W274);
   not MGM_G330(MGM_W275,D0);
   and MGM_G331(MGM_W276,D1,MGM_W275);
   and MGM_G332(MGM_W277,S,MGM_W276);
   and MGM_G333(ENABLE_NOT_D0_AND_D1_AND_S_AND_SE,SE,MGM_W277);
   not MGM_G334(MGM_W278,D1);
   and MGM_G335(MGM_W279,MGM_W278,D0);
   not MGM_G336(MGM_W280,S);
   and MGM_G337(MGM_W281,MGM_W280,MGM_W279);
   and MGM_G338(ENABLE_D0_AND_NOT_D1_AND_NOT_S_AND_SE,SE,MGM_W281);
   not MGM_G339(MGM_W282,D1);
   and MGM_G340(MGM_W283,MGM_W282,D0);
   and MGM_G341(MGM_W284,S,MGM_W283);
   and MGM_G342(ENABLE_D0_AND_NOT_D1_AND_S_AND_SE,SE,MGM_W284);
   and MGM_G343(MGM_W285,D1,D0);
   not MGM_G344(MGM_W286,S);
   and MGM_G345(MGM_W287,MGM_W286,MGM_W285);
   and MGM_G346(ENABLE_D0_AND_D1_AND_NOT_S_AND_SE,SE,MGM_W287);
   and MGM_G347(MGM_W288,D1,D0);
   and MGM_G348(MGM_W289,S,MGM_W288);
   and MGM_G349(ENABLE_D0_AND_D1_AND_S_AND_SE,SE,MGM_W289);
   // spec_gates_end
   // specify_block_begin
   specify

      if(D0===1'b0 && D1===1'b0 && S===1'b0 && SI===1'b1)
      // seq arc CK --> Q
      (posedge CK => (Q : SE))  = (1.0,1.0);
      
      if(D0===1'b0 && D1===1'b0 && S===1'b1 && SI===1'b1)
      // seq arc CK --> Q
      (posedge CK => (Q : SE))  = (1.0,1.0);
      
      if(D0===1'b0 && D1===1'b1 && S===1'b0 && SI===1'b1)
      // seq arc CK --> Q
      (posedge CK => (Q : SE))  = (1.0,1.0);
      
      if(D0===1'b0 && D1===1'b1 && S===1'b1 && SE===1'b0 && SI===1'b1 || D0===1'b0 && D1===1'b0 && S===1'b0 && SE===1'b0 && SI===1'b0)
      // seq arc CK --> Q
      (posedge CK => (Q : S))  = (1.0,1.0);
      
      if(D0===1'b0 && D1===1'b1 && S===1'b1 && SE===1'b1)
      // seq arc CK --> Q
      (posedge CK => (Q : SI))  = (1.0,1.0);
      
      if(D0===1'b0 && S===1'b1 && SE===1'b0 && SI===1'b0)
      // seq arc CK --> Q
      (posedge CK => (Q : D1))  = (1.0,1.0);
      
      if(D0===1'b1 && D1===1'b0 && S===1'b0 && SI===1'b0)
      // seq arc CK --> Q
      (posedge CK => (Q : SE))  = (1.0,1.0);
      
      if(D0===1'b1 && D1===1'b0 && S===1'b0 && SE===1'b1 && SI===1'b1 || D0===1'b0 && D1===1'b0 && S===1'b0 && SE===1'b1 && SI===1'b0)
      // seq arc CK --> Q
      (posedge CK => (Q : D0))  = (1.0,1.0);
      
      if(D0===1'b1 && D1===1'b0 && SE===1'b0 && SI===1'b1)
      // seq arc CK --> Q
      (posedge CK => (Q : S))  = (1.0,1.0);
      
      if(D0===1'b1 && D1===1'b0 && S===1'b1 && SE===1'b1)
      // seq arc CK --> Q
      (posedge CK => (Q : SI))  = (1.0,1.0);
      
      if(D0===1'b1 && D1===1'b1 && S===1'b0 && SE===1'b0 && SI===1'b1 || D0===1'b0 && D1===1'b0 && S===1'b1 && SE===1'b1 && SI===1'b0)
      // seq arc CK --> Q
      (posedge CK => (Q : D0))  = (1.0,1.0);
      
      if(D0===1'b1 && D1===1'b1 && S===1'b0 && SE===1'b1)
      // seq arc CK --> Q
      (posedge CK => (Q : SI))  = (1.0,1.0);
      
      if(D0===1'b1 && D1===1'b1 && S===1'b1 && SE===1'b0 && SI===1'b1 || D0===1'b0 && D1===1'b1 && S===1'b0 && SE===1'b1 && SI===1'b0)
      // seq arc CK --> Q
      (posedge CK => (Q : D0))  = (1.0,1.0);
      
      if(D0===1'b1 && D1===1'b1 && S===1'b1 && SE===1'b1)
      // seq arc CK --> Q
      (posedge CK => (Q : SI))  = (1.0,1.0);
      
      if(D0===1'b1 && S===1'b1 && SE===1'b0 && SI===1'b0)
      // seq arc CK --> Q
      (posedge CK => (Q : D1))  = (1.0,1.0);
      
      if(D1===1'b1 && S===1'b0 && SE===1'b0 && SI===1'b0)
      // seq arc CK --> Q
      (posedge CK => (Q : D0))  = (1.0,1.0);
      
      ifnone
      // seq arc CK --> Q
      (posedge CK => (Q : D0))  = (1.0,1.0);
      
      $width(negedge CK &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_NOT_S_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_NOT_S_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_NOT_S_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_NOT_S_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_NOT_S_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_NOT_S_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_NOT_S_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_NOT_S_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_S_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_S_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_S_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_S_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_S_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_S_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_S_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_S_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D0_AND_D1_AND_NOT_S_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D0_AND_D1_AND_NOT_S_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D0_AND_D1_AND_NOT_S_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D0_AND_D1_AND_NOT_S_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D0_AND_D1_AND_NOT_S_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D0_AND_D1_AND_NOT_S_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D0_AND_D1_AND_NOT_S_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D0_AND_D1_AND_NOT_S_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D0_AND_D1_AND_S_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D0_AND_D1_AND_S_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D0_AND_D1_AND_S_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D0_AND_D1_AND_S_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D0_AND_D1_AND_S_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D0_AND_D1_AND_S_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D0_AND_D1_AND_S_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D0_AND_D1_AND_S_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D0_AND_NOT_D1_AND_NOT_S_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D0_AND_NOT_D1_AND_NOT_S_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D0_AND_NOT_D1_AND_NOT_S_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D0_AND_NOT_D1_AND_NOT_S_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D0_AND_NOT_D1_AND_NOT_S_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D0_AND_NOT_D1_AND_NOT_S_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D0_AND_NOT_D1_AND_NOT_S_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D0_AND_NOT_D1_AND_NOT_S_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D0_AND_NOT_D1_AND_S_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D0_AND_NOT_D1_AND_S_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D0_AND_NOT_D1_AND_S_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D0_AND_NOT_D1_AND_S_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D0_AND_NOT_D1_AND_S_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D0_AND_NOT_D1_AND_S_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D0_AND_NOT_D1_AND_S_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D0_AND_NOT_D1_AND_S_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D0_AND_D1_AND_NOT_S_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D0_AND_D1_AND_NOT_S_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D0_AND_D1_AND_NOT_S_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D0_AND_D1_AND_NOT_S_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D0_AND_D1_AND_NOT_S_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D0_AND_D1_AND_NOT_S_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D0_AND_D1_AND_NOT_S_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D0_AND_D1_AND_NOT_S_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D0_AND_D1_AND_S_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D0_AND_D1_AND_S_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D0_AND_D1_AND_S_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D0_AND_D1_AND_S_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D0_AND_D1_AND_S_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D0_AND_D1_AND_S_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D0_AND_D1_AND_S_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D0_AND_D1_AND_S_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      // hold D0-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D1_AND_NOT_S_AND_NOT_SE_AND_NOT_SI === 1'b1),
      negedge D0 &&& (ENABLE_NOT_D1_AND_NOT_S_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold D0-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D1_AND_NOT_S_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge D0 &&& (ENABLE_NOT_D1_AND_NOT_S_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup D0-HL CK-LH
      $setup(negedge D0 &&& (ENABLE_NOT_D1_AND_NOT_S_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D1_AND_NOT_S_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup D0-LH CK-LH
      $setup(posedge D0 &&& (ENABLE_NOT_D1_AND_NOT_S_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D1_AND_NOT_S_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold D0-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D1_AND_NOT_S_AND_NOT_SE_AND_SI === 1'b1),
      negedge D0 &&& (ENABLE_NOT_D1_AND_NOT_S_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // hold D0-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D1_AND_NOT_S_AND_NOT_SE_AND_SI === 1'b1),
      posedge D0 &&& (ENABLE_NOT_D1_AND_NOT_S_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // setup D0-HL CK-LH
      $setup(negedge D0 &&& (ENABLE_NOT_D1_AND_NOT_S_AND_NOT_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D1_AND_NOT_S_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // setup D0-LH CK-LH
      $setup(posedge D0 &&& (ENABLE_NOT_D1_AND_NOT_S_AND_NOT_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D1_AND_NOT_S_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // hold D0-HL CK-LH
      $hold(posedge CK &&& (ENABLE_D1_AND_NOT_S_AND_NOT_SE_AND_NOT_SI === 1'b1),
      negedge D0 &&& (ENABLE_D1_AND_NOT_S_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold D0-LH CK-LH
      $hold(posedge CK &&& (ENABLE_D1_AND_NOT_S_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge D0 &&& (ENABLE_D1_AND_NOT_S_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup D0-HL CK-LH
      $setup(negedge D0 &&& (ENABLE_D1_AND_NOT_S_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_D1_AND_NOT_S_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup D0-LH CK-LH
      $setup(posedge D0 &&& (ENABLE_D1_AND_NOT_S_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_D1_AND_NOT_S_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold D0-HL CK-LH
      $hold(posedge CK &&& (ENABLE_D1_AND_NOT_S_AND_NOT_SE_AND_SI === 1'b1),
      negedge D0 &&& (ENABLE_D1_AND_NOT_S_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // hold D0-LH CK-LH
      $hold(posedge CK &&& (ENABLE_D1_AND_NOT_S_AND_NOT_SE_AND_SI === 1'b1),
      posedge D0 &&& (ENABLE_D1_AND_NOT_S_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // setup D0-HL CK-LH
      $setup(negedge D0 &&& (ENABLE_D1_AND_NOT_S_AND_NOT_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_D1_AND_NOT_S_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // setup D0-LH CK-LH
      $setup(posedge D0 &&& (ENABLE_D1_AND_NOT_S_AND_NOT_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_D1_AND_NOT_S_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // hold D1-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D0_AND_S_AND_NOT_SE_AND_NOT_SI === 1'b1),
      negedge D1 &&& (ENABLE_NOT_D0_AND_S_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold D1-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D0_AND_S_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge D1 &&& (ENABLE_NOT_D0_AND_S_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup D1-HL CK-LH
      $setup(negedge D1 &&& (ENABLE_NOT_D0_AND_S_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D0_AND_S_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup D1-LH CK-LH
      $setup(posedge D1 &&& (ENABLE_NOT_D0_AND_S_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D0_AND_S_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold D1-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D0_AND_S_AND_NOT_SE_AND_SI === 1'b1),
      negedge D1 &&& (ENABLE_NOT_D0_AND_S_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // hold D1-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D0_AND_S_AND_NOT_SE_AND_SI === 1'b1),
      posedge D1 &&& (ENABLE_NOT_D0_AND_S_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // setup D1-HL CK-LH
      $setup(negedge D1 &&& (ENABLE_NOT_D0_AND_S_AND_NOT_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D0_AND_S_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // setup D1-LH CK-LH
      $setup(posedge D1 &&& (ENABLE_NOT_D0_AND_S_AND_NOT_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D0_AND_S_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // hold D1-HL CK-LH
      $hold(posedge CK &&& (ENABLE_D0_AND_S_AND_NOT_SE_AND_NOT_SI === 1'b1),
      negedge D1 &&& (ENABLE_D0_AND_S_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold D1-LH CK-LH
      $hold(posedge CK &&& (ENABLE_D0_AND_S_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge D1 &&& (ENABLE_D0_AND_S_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup D1-HL CK-LH
      $setup(negedge D1 &&& (ENABLE_D0_AND_S_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_D0_AND_S_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup D1-LH CK-LH
      $setup(posedge D1 &&& (ENABLE_D0_AND_S_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_D0_AND_S_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold D1-HL CK-LH
      $hold(posedge CK &&& (ENABLE_D0_AND_S_AND_NOT_SE_AND_SI === 1'b1),
      negedge D1 &&& (ENABLE_D0_AND_S_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // hold D1-LH CK-LH
      $hold(posedge CK &&& (ENABLE_D0_AND_S_AND_NOT_SE_AND_SI === 1'b1),
      posedge D1 &&& (ENABLE_D0_AND_S_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // setup D1-HL CK-LH
      $setup(negedge D1 &&& (ENABLE_D0_AND_S_AND_NOT_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_D0_AND_S_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // setup D1-LH CK-LH
      $setup(posedge D1 &&& (ENABLE_D0_AND_S_AND_NOT_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_D0_AND_S_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // hold S-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D0_AND_D1_AND_NOT_SE_AND_NOT_SI === 1'b1),
      negedge S &&& (ENABLE_NOT_D0_AND_D1_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold S-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D0_AND_D1_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge S &&& (ENABLE_NOT_D0_AND_D1_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup S-HL CK-LH
      $setup(negedge S &&& (ENABLE_NOT_D0_AND_D1_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D0_AND_D1_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup S-LH CK-LH
      $setup(posedge S &&& (ENABLE_NOT_D0_AND_D1_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D0_AND_D1_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold S-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D0_AND_D1_AND_NOT_SE_AND_SI === 1'b1),
      negedge S &&& (ENABLE_NOT_D0_AND_D1_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // hold S-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D0_AND_D1_AND_NOT_SE_AND_SI === 1'b1),
      posedge S &&& (ENABLE_NOT_D0_AND_D1_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // setup S-HL CK-LH
      $setup(negedge S &&& (ENABLE_NOT_D0_AND_D1_AND_NOT_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D0_AND_D1_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // setup S-LH CK-LH
      $setup(posedge S &&& (ENABLE_NOT_D0_AND_D1_AND_NOT_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D0_AND_D1_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // hold S-HL CK-LH
      $hold(posedge CK &&& (ENABLE_D0_AND_NOT_D1_AND_NOT_SE_AND_NOT_SI === 1'b1),
      negedge S &&& (ENABLE_D0_AND_NOT_D1_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold S-LH CK-LH
      $hold(posedge CK &&& (ENABLE_D0_AND_NOT_D1_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge S &&& (ENABLE_D0_AND_NOT_D1_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup S-HL CK-LH
      $setup(negedge S &&& (ENABLE_D0_AND_NOT_D1_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_D0_AND_NOT_D1_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup S-LH CK-LH
      $setup(posedge S &&& (ENABLE_D0_AND_NOT_D1_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_D0_AND_NOT_D1_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold S-HL CK-LH
      $hold(posedge CK &&& (ENABLE_D0_AND_NOT_D1_AND_NOT_SE_AND_SI === 1'b1),
      negedge S &&& (ENABLE_D0_AND_NOT_D1_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // hold S-LH CK-LH
      $hold(posedge CK &&& (ENABLE_D0_AND_NOT_D1_AND_NOT_SE_AND_SI === 1'b1),
      posedge S &&& (ENABLE_D0_AND_NOT_D1_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // setup S-HL CK-LH
      $setup(negedge S &&& (ENABLE_D0_AND_NOT_D1_AND_NOT_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_D0_AND_NOT_D1_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // setup S-LH CK-LH
      $setup(posedge S &&& (ENABLE_D0_AND_NOT_D1_AND_NOT_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_D0_AND_NOT_D1_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // hold SE-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_NOT_S_AND_SI === 1'b1),
      negedge SE &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_NOT_S_AND_SI === 1'b1),1.0);
      
      // hold SE-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_NOT_S_AND_SI === 1'b1),
      posedge SE &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_NOT_S_AND_SI === 1'b1),1.0);
      
      // setup SE-HL CK-LH
      $setup(negedge SE &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_NOT_S_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_NOT_S_AND_SI === 1'b1),1.0);
      
      // setup SE-LH CK-LH
      $setup(posedge SE &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_NOT_S_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_NOT_S_AND_SI === 1'b1),1.0);
      
      // hold SE-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_S_AND_SI === 1'b1),
      negedge SE &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_S_AND_SI === 1'b1),1.0);
      
      // hold SE-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_S_AND_SI === 1'b1),
      posedge SE &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_S_AND_SI === 1'b1),1.0);
      
      // setup SE-HL CK-LH
      $setup(negedge SE &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_S_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_S_AND_SI === 1'b1),1.0);
      
      // setup SE-LH CK-LH
      $setup(posedge SE &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_S_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_S_AND_SI === 1'b1),1.0);
      
      // hold SE-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D0_AND_D1_AND_NOT_S_AND_SI === 1'b1),
      negedge SE &&& (ENABLE_NOT_D0_AND_D1_AND_NOT_S_AND_SI === 1'b1),1.0);
      
      // hold SE-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D0_AND_D1_AND_NOT_S_AND_SI === 1'b1),
      posedge SE &&& (ENABLE_NOT_D0_AND_D1_AND_NOT_S_AND_SI === 1'b1),1.0);
      
      // setup SE-HL CK-LH
      $setup(negedge SE &&& (ENABLE_NOT_D0_AND_D1_AND_NOT_S_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D0_AND_D1_AND_NOT_S_AND_SI === 1'b1),1.0);
      
      // setup SE-LH CK-LH
      $setup(posedge SE &&& (ENABLE_NOT_D0_AND_D1_AND_NOT_S_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D0_AND_D1_AND_NOT_S_AND_SI === 1'b1),1.0);
      
      // hold SE-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D0_AND_D1_AND_S_AND_NOT_SI === 1'b1),
      negedge SE &&& (ENABLE_NOT_D0_AND_D1_AND_S_AND_NOT_SI === 1'b1),1.0);
      
      // hold SE-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D0_AND_D1_AND_S_AND_NOT_SI === 1'b1),
      posedge SE &&& (ENABLE_NOT_D0_AND_D1_AND_S_AND_NOT_SI === 1'b1),1.0);
      
      // setup SE-HL CK-LH
      $setup(negedge SE &&& (ENABLE_NOT_D0_AND_D1_AND_S_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D0_AND_D1_AND_S_AND_NOT_SI === 1'b1),1.0);
      
      // setup SE-LH CK-LH
      $setup(posedge SE &&& (ENABLE_NOT_D0_AND_D1_AND_S_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D0_AND_D1_AND_S_AND_NOT_SI === 1'b1),1.0);
      
      // hold SE-HL CK-LH
      $hold(posedge CK &&& (ENABLE_D0_AND_NOT_D1_AND_NOT_S_AND_NOT_SI === 1'b1),
      negedge SE &&& (ENABLE_D0_AND_NOT_D1_AND_NOT_S_AND_NOT_SI === 1'b1),1.0);
      
      // hold SE-LH CK-LH
      $hold(posedge CK &&& (ENABLE_D0_AND_NOT_D1_AND_NOT_S_AND_NOT_SI === 1'b1),
      posedge SE &&& (ENABLE_D0_AND_NOT_D1_AND_NOT_S_AND_NOT_SI === 1'b1),1.0);
      
      // setup SE-HL CK-LH
      $setup(negedge SE &&& (ENABLE_D0_AND_NOT_D1_AND_NOT_S_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_D0_AND_NOT_D1_AND_NOT_S_AND_NOT_SI === 1'b1),1.0);
      
      // setup SE-LH CK-LH
      $setup(posedge SE &&& (ENABLE_D0_AND_NOT_D1_AND_NOT_S_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_D0_AND_NOT_D1_AND_NOT_S_AND_NOT_SI === 1'b1),1.0);
      
      // hold SE-HL CK-LH
      $hold(posedge CK &&& (ENABLE_D0_AND_NOT_D1_AND_S_AND_SI === 1'b1),
      negedge SE &&& (ENABLE_D0_AND_NOT_D1_AND_S_AND_SI === 1'b1),1.0);
      
      // hold SE-LH CK-LH
      $hold(posedge CK &&& (ENABLE_D0_AND_NOT_D1_AND_S_AND_SI === 1'b1),
      posedge SE &&& (ENABLE_D0_AND_NOT_D1_AND_S_AND_SI === 1'b1),1.0);
      
      // setup SE-HL CK-LH
      $setup(negedge SE &&& (ENABLE_D0_AND_NOT_D1_AND_S_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_D0_AND_NOT_D1_AND_S_AND_SI === 1'b1),1.0);
      
      // setup SE-LH CK-LH
      $setup(posedge SE &&& (ENABLE_D0_AND_NOT_D1_AND_S_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_D0_AND_NOT_D1_AND_S_AND_SI === 1'b1),1.0);
      
      // hold SE-HL CK-LH
      $hold(posedge CK &&& (ENABLE_D0_AND_D1_AND_NOT_S_AND_NOT_SI === 1'b1),
      negedge SE &&& (ENABLE_D0_AND_D1_AND_NOT_S_AND_NOT_SI === 1'b1),1.0);
      
      // hold SE-LH CK-LH
      $hold(posedge CK &&& (ENABLE_D0_AND_D1_AND_NOT_S_AND_NOT_SI === 1'b1),
      posedge SE &&& (ENABLE_D0_AND_D1_AND_NOT_S_AND_NOT_SI === 1'b1),1.0);
      
      // setup SE-HL CK-LH
      $setup(negedge SE &&& (ENABLE_D0_AND_D1_AND_NOT_S_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_D0_AND_D1_AND_NOT_S_AND_NOT_SI === 1'b1),1.0);
      
      // setup SE-LH CK-LH
      $setup(posedge SE &&& (ENABLE_D0_AND_D1_AND_NOT_S_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_D0_AND_D1_AND_NOT_S_AND_NOT_SI === 1'b1),1.0);
      
      // hold SE-HL CK-LH
      $hold(posedge CK &&& (ENABLE_D0_AND_D1_AND_S_AND_NOT_SI === 1'b1),
      negedge SE &&& (ENABLE_D0_AND_D1_AND_S_AND_NOT_SI === 1'b1),1.0);
      
      // hold SE-LH CK-LH
      $hold(posedge CK &&& (ENABLE_D0_AND_D1_AND_S_AND_NOT_SI === 1'b1),
      posedge SE &&& (ENABLE_D0_AND_D1_AND_S_AND_NOT_SI === 1'b1),1.0);
      
      // setup SE-HL CK-LH
      $setup(negedge SE &&& (ENABLE_D0_AND_D1_AND_S_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_D0_AND_D1_AND_S_AND_NOT_SI === 1'b1),1.0);
      
      // setup SE-LH CK-LH
      $setup(posedge SE &&& (ENABLE_D0_AND_D1_AND_S_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_D0_AND_D1_AND_S_AND_NOT_SI === 1'b1),1.0);
      
      // hold SI-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_NOT_S_AND_SE === 1'b1),
      negedge SI &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_NOT_S_AND_SE === 1'b1),1.0);
      
      // hold SI-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_NOT_S_AND_SE === 1'b1),
      posedge SI &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_NOT_S_AND_SE === 1'b1),1.0);
      
      // setup SI-HL CK-LH
      $setup(negedge SI &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_NOT_S_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_NOT_S_AND_SE === 1'b1),1.0);
      
      // setup SI-LH CK-LH
      $setup(posedge SI &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_NOT_S_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_NOT_S_AND_SE === 1'b1),1.0);
      
      // hold SI-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_S_AND_SE === 1'b1),
      negedge SI &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_S_AND_SE === 1'b1),1.0);
      
      // hold SI-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_S_AND_SE === 1'b1),
      posedge SI &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_S_AND_SE === 1'b1),1.0);
      
      // setup SI-HL CK-LH
      $setup(negedge SI &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_S_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_S_AND_SE === 1'b1),1.0);
      
      // setup SI-LH CK-LH
      $setup(posedge SI &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_S_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_S_AND_SE === 1'b1),1.0);
      
      // hold SI-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D0_AND_D1_AND_NOT_S_AND_SE === 1'b1),
      negedge SI &&& (ENABLE_NOT_D0_AND_D1_AND_NOT_S_AND_SE === 1'b1),1.0);
      
      // hold SI-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D0_AND_D1_AND_NOT_S_AND_SE === 1'b1),
      posedge SI &&& (ENABLE_NOT_D0_AND_D1_AND_NOT_S_AND_SE === 1'b1),1.0);
      
      // setup SI-HL CK-LH
      $setup(negedge SI &&& (ENABLE_NOT_D0_AND_D1_AND_NOT_S_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_NOT_D0_AND_D1_AND_NOT_S_AND_SE === 1'b1),1.0);
      
      // setup SI-LH CK-LH
      $setup(posedge SI &&& (ENABLE_NOT_D0_AND_D1_AND_NOT_S_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_NOT_D0_AND_D1_AND_NOT_S_AND_SE === 1'b1),1.0);
      
      // hold SI-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D0_AND_D1_AND_S_AND_SE === 1'b1),
      negedge SI &&& (ENABLE_NOT_D0_AND_D1_AND_S_AND_SE === 1'b1),1.0);
      
      // hold SI-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D0_AND_D1_AND_S_AND_SE === 1'b1),
      posedge SI &&& (ENABLE_NOT_D0_AND_D1_AND_S_AND_SE === 1'b1),1.0);
      
      // setup SI-HL CK-LH
      $setup(negedge SI &&& (ENABLE_NOT_D0_AND_D1_AND_S_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_NOT_D0_AND_D1_AND_S_AND_SE === 1'b1),1.0);
      
      // setup SI-LH CK-LH
      $setup(posedge SI &&& (ENABLE_NOT_D0_AND_D1_AND_S_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_NOT_D0_AND_D1_AND_S_AND_SE === 1'b1),1.0);
      
      // hold SI-HL CK-LH
      $hold(posedge CK &&& (ENABLE_D0_AND_NOT_D1_AND_NOT_S_AND_SE === 1'b1),
      negedge SI &&& (ENABLE_D0_AND_NOT_D1_AND_NOT_S_AND_SE === 1'b1),1.0);
      
      // hold SI-LH CK-LH
      $hold(posedge CK &&& (ENABLE_D0_AND_NOT_D1_AND_NOT_S_AND_SE === 1'b1),
      posedge SI &&& (ENABLE_D0_AND_NOT_D1_AND_NOT_S_AND_SE === 1'b1),1.0);
      
      // setup SI-HL CK-LH
      $setup(negedge SI &&& (ENABLE_D0_AND_NOT_D1_AND_NOT_S_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_D0_AND_NOT_D1_AND_NOT_S_AND_SE === 1'b1),1.0);
      
      // setup SI-LH CK-LH
      $setup(posedge SI &&& (ENABLE_D0_AND_NOT_D1_AND_NOT_S_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_D0_AND_NOT_D1_AND_NOT_S_AND_SE === 1'b1),1.0);
      
      // hold SI-HL CK-LH
      $hold(posedge CK &&& (ENABLE_D0_AND_NOT_D1_AND_S_AND_SE === 1'b1),
      negedge SI &&& (ENABLE_D0_AND_NOT_D1_AND_S_AND_SE === 1'b1),1.0);
      
      // hold SI-LH CK-LH
      $hold(posedge CK &&& (ENABLE_D0_AND_NOT_D1_AND_S_AND_SE === 1'b1),
      posedge SI &&& (ENABLE_D0_AND_NOT_D1_AND_S_AND_SE === 1'b1),1.0);
      
      // setup SI-HL CK-LH
      $setup(negedge SI &&& (ENABLE_D0_AND_NOT_D1_AND_S_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_D0_AND_NOT_D1_AND_S_AND_SE === 1'b1),1.0);
      
      // setup SI-LH CK-LH
      $setup(posedge SI &&& (ENABLE_D0_AND_NOT_D1_AND_S_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_D0_AND_NOT_D1_AND_S_AND_SE === 1'b1),1.0);
      
      // hold SI-HL CK-LH
      $hold(posedge CK &&& (ENABLE_D0_AND_D1_AND_NOT_S_AND_SE === 1'b1),
      negedge SI &&& (ENABLE_D0_AND_D1_AND_NOT_S_AND_SE === 1'b1),1.0);
      
      // hold SI-LH CK-LH
      $hold(posedge CK &&& (ENABLE_D0_AND_D1_AND_NOT_S_AND_SE === 1'b1),
      posedge SI &&& (ENABLE_D0_AND_D1_AND_NOT_S_AND_SE === 1'b1),1.0);
      
      // setup SI-HL CK-LH
      $setup(negedge SI &&& (ENABLE_D0_AND_D1_AND_NOT_S_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_D0_AND_D1_AND_NOT_S_AND_SE === 1'b1),1.0);
      
      // setup SI-LH CK-LH
      $setup(posedge SI &&& (ENABLE_D0_AND_D1_AND_NOT_S_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_D0_AND_D1_AND_NOT_S_AND_SE === 1'b1),1.0);
      
      // hold SI-HL CK-LH
      $hold(posedge CK &&& (ENABLE_D0_AND_D1_AND_S_AND_SE === 1'b1),
      negedge SI &&& (ENABLE_D0_AND_D1_AND_S_AND_SE === 1'b1),1.0);
      
      // hold SI-LH CK-LH
      $hold(posedge CK &&& (ENABLE_D0_AND_D1_AND_S_AND_SE === 1'b1),
      posedge SI &&& (ENABLE_D0_AND_D1_AND_S_AND_SE === 1'b1),1.0);
      
      // setup SI-HL CK-LH
      $setup(negedge SI &&& (ENABLE_D0_AND_D1_AND_S_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_D0_AND_D1_AND_S_AND_SE === 1'b1),1.0);
      
      // setup SI-LH CK-LH
      $setup(posedge SI &&& (ENABLE_D0_AND_D1_AND_S_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_D0_AND_D1_AND_S_AND_SE === 1'b1),1.0);
      
      // mpw CK_lh 
      $width(posedge CK,1.0,0);
      
      // mpw CK_hl 
      $width(negedge CK,1.0,0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_FSDPMQ_LP_1( Q, CK, D0, D1, S, SI, SE );
input CK, D0, D1, S, SE, SI;
output Q;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_FSDPMQ_LP_1_func SAEDRVT14_FSDPMQ_LP_1_behav_inst(.Q(Q),.CK(CK),.D0(D0),.D1(D1),.S(S),.SI(SI),.SE(SE));
`else
   SAEDRVT14_FSDPMQ_LP_1_func SAEDRVT14_FSDPMQ_LP_1_inst(.Q(Q),.CK(CK),.D0(D0),.D1(D1),.S(S),.SI(SI),.SE(SE));
   // spec_gates_begin
   not MGM_G0(MGM_W0,D0);
   not MGM_G1(MGM_W1,D1);
   and MGM_G2(MGM_W2,MGM_W1,MGM_W0);
   not MGM_G3(MGM_W3,S);
   and MGM_G4(MGM_W4,MGM_W3,MGM_W2);
   not MGM_G5(MGM_W5,SE);
   and MGM_G6(MGM_W6,MGM_W5,MGM_W4);
   not MGM_G7(MGM_W7,SI);
   and MGM_G8(ENABLE_NOT_D0_AND_NOT_D1_AND_NOT_S_AND_NOT_SE_AND_NOT_SI,MGM_W7,MGM_W6);
   not MGM_G9(MGM_W8,D0);
   not MGM_G10(MGM_W9,D1);
   and MGM_G11(MGM_W10,MGM_W9,MGM_W8);
   not MGM_G12(MGM_W11,S);
   and MGM_G13(MGM_W12,MGM_W11,MGM_W10);
   not MGM_G14(MGM_W13,SE);
   and MGM_G15(MGM_W14,MGM_W13,MGM_W12);
   and MGM_G16(ENABLE_NOT_D0_AND_NOT_D1_AND_NOT_S_AND_NOT_SE_AND_SI,SI,MGM_W14);
   not MGM_G17(MGM_W15,D0);
   not MGM_G18(MGM_W16,D1);
   and MGM_G19(MGM_W17,MGM_W16,MGM_W15);
   not MGM_G20(MGM_W18,S);
   and MGM_G21(MGM_W19,MGM_W18,MGM_W17);
   and MGM_G22(MGM_W20,SE,MGM_W19);
   not MGM_G23(MGM_W21,SI);
   and MGM_G24(ENABLE_NOT_D0_AND_NOT_D1_AND_NOT_S_AND_SE_AND_NOT_SI,MGM_W21,MGM_W20);
   not MGM_G25(MGM_W22,D0);
   not MGM_G26(MGM_W23,D1);
   and MGM_G27(MGM_W24,MGM_W23,MGM_W22);
   not MGM_G28(MGM_W25,S);
   and MGM_G29(MGM_W26,MGM_W25,MGM_W24);
   and MGM_G30(MGM_W27,SE,MGM_W26);
   and MGM_G31(ENABLE_NOT_D0_AND_NOT_D1_AND_NOT_S_AND_SE_AND_SI,SI,MGM_W27);
   not MGM_G32(MGM_W28,D0);
   not MGM_G33(MGM_W29,D1);
   and MGM_G34(MGM_W30,MGM_W29,MGM_W28);
   and MGM_G35(MGM_W31,S,MGM_W30);
   not MGM_G36(MGM_W32,SE);
   and MGM_G37(MGM_W33,MGM_W32,MGM_W31);
   not MGM_G38(MGM_W34,SI);
   and MGM_G39(ENABLE_NOT_D0_AND_NOT_D1_AND_S_AND_NOT_SE_AND_NOT_SI,MGM_W34,MGM_W33);
   not MGM_G40(MGM_W35,D0);
   not MGM_G41(MGM_W36,D1);
   and MGM_G42(MGM_W37,MGM_W36,MGM_W35);
   and MGM_G43(MGM_W38,S,MGM_W37);
   not MGM_G44(MGM_W39,SE);
   and MGM_G45(MGM_W40,MGM_W39,MGM_W38);
   and MGM_G46(ENABLE_NOT_D0_AND_NOT_D1_AND_S_AND_NOT_SE_AND_SI,SI,MGM_W40);
   not MGM_G47(MGM_W41,D0);
   not MGM_G48(MGM_W42,D1);
   and MGM_G49(MGM_W43,MGM_W42,MGM_W41);
   and MGM_G50(MGM_W44,S,MGM_W43);
   and MGM_G51(MGM_W45,SE,MGM_W44);
   not MGM_G52(MGM_W46,SI);
   and MGM_G53(ENABLE_NOT_D0_AND_NOT_D1_AND_S_AND_SE_AND_NOT_SI,MGM_W46,MGM_W45);
   not MGM_G54(MGM_W47,D0);
   not MGM_G55(MGM_W48,D1);
   and MGM_G56(MGM_W49,MGM_W48,MGM_W47);
   and MGM_G57(MGM_W50,S,MGM_W49);
   and MGM_G58(MGM_W51,SE,MGM_W50);
   and MGM_G59(ENABLE_NOT_D0_AND_NOT_D1_AND_S_AND_SE_AND_SI,SI,MGM_W51);
   not MGM_G60(MGM_W52,D0);
   and MGM_G61(MGM_W53,D1,MGM_W52);
   not MGM_G62(MGM_W54,S);
   and MGM_G63(MGM_W55,MGM_W54,MGM_W53);
   not MGM_G64(MGM_W56,SE);
   and MGM_G65(MGM_W57,MGM_W56,MGM_W55);
   not MGM_G66(MGM_W58,SI);
   and MGM_G67(ENABLE_NOT_D0_AND_D1_AND_NOT_S_AND_NOT_SE_AND_NOT_SI,MGM_W58,MGM_W57);
   not MGM_G68(MGM_W59,D0);
   and MGM_G69(MGM_W60,D1,MGM_W59);
   not MGM_G70(MGM_W61,S);
   and MGM_G71(MGM_W62,MGM_W61,MGM_W60);
   not MGM_G72(MGM_W63,SE);
   and MGM_G73(MGM_W64,MGM_W63,MGM_W62);
   and MGM_G74(ENABLE_NOT_D0_AND_D1_AND_NOT_S_AND_NOT_SE_AND_SI,SI,MGM_W64);
   not MGM_G75(MGM_W65,D0);
   and MGM_G76(MGM_W66,D1,MGM_W65);
   not MGM_G77(MGM_W67,S);
   and MGM_G78(MGM_W68,MGM_W67,MGM_W66);
   and MGM_G79(MGM_W69,SE,MGM_W68);
   not MGM_G80(MGM_W70,SI);
   and MGM_G81(ENABLE_NOT_D0_AND_D1_AND_NOT_S_AND_SE_AND_NOT_SI,MGM_W70,MGM_W69);
   not MGM_G82(MGM_W71,D0);
   and MGM_G83(MGM_W72,D1,MGM_W71);
   not MGM_G84(MGM_W73,S);
   and MGM_G85(MGM_W74,MGM_W73,MGM_W72);
   and MGM_G86(MGM_W75,SE,MGM_W74);
   and MGM_G87(ENABLE_NOT_D0_AND_D1_AND_NOT_S_AND_SE_AND_SI,SI,MGM_W75);
   not MGM_G88(MGM_W76,D0);
   and MGM_G89(MGM_W77,D1,MGM_W76);
   and MGM_G90(MGM_W78,S,MGM_W77);
   not MGM_G91(MGM_W79,SE);
   and MGM_G92(MGM_W80,MGM_W79,MGM_W78);
   not MGM_G93(MGM_W81,SI);
   and MGM_G94(ENABLE_NOT_D0_AND_D1_AND_S_AND_NOT_SE_AND_NOT_SI,MGM_W81,MGM_W80);
   not MGM_G95(MGM_W82,D0);
   and MGM_G96(MGM_W83,D1,MGM_W82);
   and MGM_G97(MGM_W84,S,MGM_W83);
   not MGM_G98(MGM_W85,SE);
   and MGM_G99(MGM_W86,MGM_W85,MGM_W84);
   and MGM_G100(ENABLE_NOT_D0_AND_D1_AND_S_AND_NOT_SE_AND_SI,SI,MGM_W86);
   not MGM_G101(MGM_W87,D0);
   and MGM_G102(MGM_W88,D1,MGM_W87);
   and MGM_G103(MGM_W89,S,MGM_W88);
   and MGM_G104(MGM_W90,SE,MGM_W89);
   not MGM_G105(MGM_W91,SI);
   and MGM_G106(ENABLE_NOT_D0_AND_D1_AND_S_AND_SE_AND_NOT_SI,MGM_W91,MGM_W90);
   not MGM_G107(MGM_W92,D0);
   and MGM_G108(MGM_W93,D1,MGM_W92);
   and MGM_G109(MGM_W94,S,MGM_W93);
   and MGM_G110(MGM_W95,SE,MGM_W94);
   and MGM_G111(ENABLE_NOT_D0_AND_D1_AND_S_AND_SE_AND_SI,SI,MGM_W95);
   not MGM_G112(MGM_W96,D1);
   and MGM_G113(MGM_W97,MGM_W96,D0);
   not MGM_G114(MGM_W98,S);
   and MGM_G115(MGM_W99,MGM_W98,MGM_W97);
   not MGM_G116(MGM_W100,SE);
   and MGM_G117(MGM_W101,MGM_W100,MGM_W99);
   not MGM_G118(MGM_W102,SI);
   and MGM_G119(ENABLE_D0_AND_NOT_D1_AND_NOT_S_AND_NOT_SE_AND_NOT_SI,MGM_W102,MGM_W101);
   not MGM_G120(MGM_W103,D1);
   and MGM_G121(MGM_W104,MGM_W103,D0);
   not MGM_G122(MGM_W105,S);
   and MGM_G123(MGM_W106,MGM_W105,MGM_W104);
   not MGM_G124(MGM_W107,SE);
   and MGM_G125(MGM_W108,MGM_W107,MGM_W106);
   and MGM_G126(ENABLE_D0_AND_NOT_D1_AND_NOT_S_AND_NOT_SE_AND_SI,SI,MGM_W108);
   not MGM_G127(MGM_W109,D1);
   and MGM_G128(MGM_W110,MGM_W109,D0);
   not MGM_G129(MGM_W111,S);
   and MGM_G130(MGM_W112,MGM_W111,MGM_W110);
   and MGM_G131(MGM_W113,SE,MGM_W112);
   not MGM_G132(MGM_W114,SI);
   and MGM_G133(ENABLE_D0_AND_NOT_D1_AND_NOT_S_AND_SE_AND_NOT_SI,MGM_W114,MGM_W113);
   not MGM_G134(MGM_W115,D1);
   and MGM_G135(MGM_W116,MGM_W115,D0);
   not MGM_G136(MGM_W117,S);
   and MGM_G137(MGM_W118,MGM_W117,MGM_W116);
   and MGM_G138(MGM_W119,SE,MGM_W118);
   and MGM_G139(ENABLE_D0_AND_NOT_D1_AND_NOT_S_AND_SE_AND_SI,SI,MGM_W119);
   not MGM_G140(MGM_W120,D1);
   and MGM_G141(MGM_W121,MGM_W120,D0);
   and MGM_G142(MGM_W122,S,MGM_W121);
   not MGM_G143(MGM_W123,SE);
   and MGM_G144(MGM_W124,MGM_W123,MGM_W122);
   not MGM_G145(MGM_W125,SI);
   and MGM_G146(ENABLE_D0_AND_NOT_D1_AND_S_AND_NOT_SE_AND_NOT_SI,MGM_W125,MGM_W124);
   not MGM_G147(MGM_W126,D1);
   and MGM_G148(MGM_W127,MGM_W126,D0);
   and MGM_G149(MGM_W128,S,MGM_W127);
   not MGM_G150(MGM_W129,SE);
   and MGM_G151(MGM_W130,MGM_W129,MGM_W128);
   and MGM_G152(ENABLE_D0_AND_NOT_D1_AND_S_AND_NOT_SE_AND_SI,SI,MGM_W130);
   not MGM_G153(MGM_W131,D1);
   and MGM_G154(MGM_W132,MGM_W131,D0);
   and MGM_G155(MGM_W133,S,MGM_W132);
   and MGM_G156(MGM_W134,SE,MGM_W133);
   not MGM_G157(MGM_W135,SI);
   and MGM_G158(ENABLE_D0_AND_NOT_D1_AND_S_AND_SE_AND_NOT_SI,MGM_W135,MGM_W134);
   not MGM_G159(MGM_W136,D1);
   and MGM_G160(MGM_W137,MGM_W136,D0);
   and MGM_G161(MGM_W138,S,MGM_W137);
   and MGM_G162(MGM_W139,SE,MGM_W138);
   and MGM_G163(ENABLE_D0_AND_NOT_D1_AND_S_AND_SE_AND_SI,SI,MGM_W139);
   and MGM_G164(MGM_W140,D1,D0);
   not MGM_G165(MGM_W141,S);
   and MGM_G166(MGM_W142,MGM_W141,MGM_W140);
   not MGM_G167(MGM_W143,SE);
   and MGM_G168(MGM_W144,MGM_W143,MGM_W142);
   not MGM_G169(MGM_W145,SI);
   and MGM_G170(ENABLE_D0_AND_D1_AND_NOT_S_AND_NOT_SE_AND_NOT_SI,MGM_W145,MGM_W144);
   and MGM_G171(MGM_W146,D1,D0);
   not MGM_G172(MGM_W147,S);
   and MGM_G173(MGM_W148,MGM_W147,MGM_W146);
   not MGM_G174(MGM_W149,SE);
   and MGM_G175(MGM_W150,MGM_W149,MGM_W148);
   and MGM_G176(ENABLE_D0_AND_D1_AND_NOT_S_AND_NOT_SE_AND_SI,SI,MGM_W150);
   and MGM_G177(MGM_W151,D1,D0);
   not MGM_G178(MGM_W152,S);
   and MGM_G179(MGM_W153,MGM_W152,MGM_W151);
   and MGM_G180(MGM_W154,SE,MGM_W153);
   not MGM_G181(MGM_W155,SI);
   and MGM_G182(ENABLE_D0_AND_D1_AND_NOT_S_AND_SE_AND_NOT_SI,MGM_W155,MGM_W154);
   and MGM_G183(MGM_W156,D1,D0);
   not MGM_G184(MGM_W157,S);
   and MGM_G185(MGM_W158,MGM_W157,MGM_W156);
   and MGM_G186(MGM_W159,SE,MGM_W158);
   and MGM_G187(ENABLE_D0_AND_D1_AND_NOT_S_AND_SE_AND_SI,SI,MGM_W159);
   and MGM_G188(MGM_W160,D1,D0);
   and MGM_G189(MGM_W161,S,MGM_W160);
   not MGM_G190(MGM_W162,SE);
   and MGM_G191(MGM_W163,MGM_W162,MGM_W161);
   not MGM_G192(MGM_W164,SI);
   and MGM_G193(ENABLE_D0_AND_D1_AND_S_AND_NOT_SE_AND_NOT_SI,MGM_W164,MGM_W163);
   and MGM_G194(MGM_W165,D1,D0);
   and MGM_G195(MGM_W166,S,MGM_W165);
   not MGM_G196(MGM_W167,SE);
   and MGM_G197(MGM_W168,MGM_W167,MGM_W166);
   and MGM_G198(ENABLE_D0_AND_D1_AND_S_AND_NOT_SE_AND_SI,SI,MGM_W168);
   and MGM_G199(MGM_W169,D1,D0);
   and MGM_G200(MGM_W170,S,MGM_W169);
   and MGM_G201(MGM_W171,SE,MGM_W170);
   not MGM_G202(MGM_W172,SI);
   and MGM_G203(ENABLE_D0_AND_D1_AND_S_AND_SE_AND_NOT_SI,MGM_W172,MGM_W171);
   and MGM_G204(MGM_W173,D1,D0);
   and MGM_G205(MGM_W174,S,MGM_W173);
   and MGM_G206(MGM_W175,SE,MGM_W174);
   and MGM_G207(ENABLE_D0_AND_D1_AND_S_AND_SE_AND_SI,SI,MGM_W175);
   not MGM_G208(MGM_W176,D1);
   not MGM_G209(MGM_W177,S);
   and MGM_G210(MGM_W178,MGM_W177,MGM_W176);
   not MGM_G211(MGM_W179,SE);
   and MGM_G212(MGM_W180,MGM_W179,MGM_W178);
   not MGM_G213(MGM_W181,SI);
   and MGM_G214(ENABLE_NOT_D1_AND_NOT_S_AND_NOT_SE_AND_NOT_SI,MGM_W181,MGM_W180);
   not MGM_G215(MGM_W182,D1);
   not MGM_G216(MGM_W183,S);
   and MGM_G217(MGM_W184,MGM_W183,MGM_W182);
   not MGM_G218(MGM_W185,SE);
   and MGM_G219(MGM_W186,MGM_W185,MGM_W184);
   and MGM_G220(ENABLE_NOT_D1_AND_NOT_S_AND_NOT_SE_AND_SI,SI,MGM_W186);
   not MGM_G221(MGM_W187,S);
   and MGM_G222(MGM_W188,MGM_W187,D1);
   not MGM_G223(MGM_W189,SE);
   and MGM_G224(MGM_W190,MGM_W189,MGM_W188);
   not MGM_G225(MGM_W191,SI);
   and MGM_G226(ENABLE_D1_AND_NOT_S_AND_NOT_SE_AND_NOT_SI,MGM_W191,MGM_W190);
   not MGM_G227(MGM_W192,S);
   and MGM_G228(MGM_W193,MGM_W192,D1);
   not MGM_G229(MGM_W194,SE);
   and MGM_G230(MGM_W195,MGM_W194,MGM_W193);
   and MGM_G231(ENABLE_D1_AND_NOT_S_AND_NOT_SE_AND_SI,SI,MGM_W195);
   not MGM_G232(MGM_W196,D0);
   and MGM_G233(MGM_W197,S,MGM_W196);
   not MGM_G234(MGM_W198,SE);
   and MGM_G235(MGM_W199,MGM_W198,MGM_W197);
   not MGM_G236(MGM_W200,SI);
   and MGM_G237(ENABLE_NOT_D0_AND_S_AND_NOT_SE_AND_NOT_SI,MGM_W200,MGM_W199);
   not MGM_G238(MGM_W201,D0);
   and MGM_G239(MGM_W202,S,MGM_W201);
   not MGM_G240(MGM_W203,SE);
   and MGM_G241(MGM_W204,MGM_W203,MGM_W202);
   and MGM_G242(ENABLE_NOT_D0_AND_S_AND_NOT_SE_AND_SI,SI,MGM_W204);
   and MGM_G243(MGM_W205,S,D0);
   not MGM_G244(MGM_W206,SE);
   and MGM_G245(MGM_W207,MGM_W206,MGM_W205);
   not MGM_G246(MGM_W208,SI);
   and MGM_G247(ENABLE_D0_AND_S_AND_NOT_SE_AND_NOT_SI,MGM_W208,MGM_W207);
   and MGM_G248(MGM_W209,S,D0);
   not MGM_G249(MGM_W210,SE);
   and MGM_G250(MGM_W211,MGM_W210,MGM_W209);
   and MGM_G251(ENABLE_D0_AND_S_AND_NOT_SE_AND_SI,SI,MGM_W211);
   not MGM_G252(MGM_W212,D0);
   and MGM_G253(MGM_W213,D1,MGM_W212);
   not MGM_G254(MGM_W214,SE);
   and MGM_G255(MGM_W215,MGM_W214,MGM_W213);
   not MGM_G256(MGM_W216,SI);
   and MGM_G257(ENABLE_NOT_D0_AND_D1_AND_NOT_SE_AND_NOT_SI,MGM_W216,MGM_W215);
   not MGM_G258(MGM_W217,D0);
   and MGM_G259(MGM_W218,D1,MGM_W217);
   not MGM_G260(MGM_W219,SE);
   and MGM_G261(MGM_W220,MGM_W219,MGM_W218);
   and MGM_G262(ENABLE_NOT_D0_AND_D1_AND_NOT_SE_AND_SI,SI,MGM_W220);
   not MGM_G263(MGM_W221,D1);
   and MGM_G264(MGM_W222,MGM_W221,D0);
   not MGM_G265(MGM_W223,SE);
   and MGM_G266(MGM_W224,MGM_W223,MGM_W222);
   not MGM_G267(MGM_W225,SI);
   and MGM_G268(ENABLE_D0_AND_NOT_D1_AND_NOT_SE_AND_NOT_SI,MGM_W225,MGM_W224);
   not MGM_G269(MGM_W226,D1);
   and MGM_G270(MGM_W227,MGM_W226,D0);
   not MGM_G271(MGM_W228,SE);
   and MGM_G272(MGM_W229,MGM_W228,MGM_W227);
   and MGM_G273(ENABLE_D0_AND_NOT_D1_AND_NOT_SE_AND_SI,SI,MGM_W229);
   not MGM_G274(MGM_W230,D0);
   not MGM_G275(MGM_W231,D1);
   and MGM_G276(MGM_W232,MGM_W231,MGM_W230);
   not MGM_G277(MGM_W233,S);
   and MGM_G278(MGM_W234,MGM_W233,MGM_W232);
   and MGM_G279(ENABLE_NOT_D0_AND_NOT_D1_AND_NOT_S_AND_SI,SI,MGM_W234);
   not MGM_G280(MGM_W235,D0);
   not MGM_G281(MGM_W236,D1);
   and MGM_G282(MGM_W237,MGM_W236,MGM_W235);
   and MGM_G283(MGM_W238,S,MGM_W237);
   and MGM_G284(ENABLE_NOT_D0_AND_NOT_D1_AND_S_AND_SI,SI,MGM_W238);
   not MGM_G285(MGM_W239,D0);
   and MGM_G286(MGM_W240,D1,MGM_W239);
   not MGM_G287(MGM_W241,S);
   and MGM_G288(MGM_W242,MGM_W241,MGM_W240);
   and MGM_G289(ENABLE_NOT_D0_AND_D1_AND_NOT_S_AND_SI,SI,MGM_W242);
   not MGM_G290(MGM_W243,D0);
   and MGM_G291(MGM_W244,D1,MGM_W243);
   and MGM_G292(MGM_W245,S,MGM_W244);
   not MGM_G293(MGM_W246,SI);
   and MGM_G294(ENABLE_NOT_D0_AND_D1_AND_S_AND_NOT_SI,MGM_W246,MGM_W245);
   not MGM_G295(MGM_W247,D1);
   and MGM_G296(MGM_W248,MGM_W247,D0);
   not MGM_G297(MGM_W249,S);
   and MGM_G298(MGM_W250,MGM_W249,MGM_W248);
   not MGM_G299(MGM_W251,SI);
   and MGM_G300(ENABLE_D0_AND_NOT_D1_AND_NOT_S_AND_NOT_SI,MGM_W251,MGM_W250);
   not MGM_G301(MGM_W252,D1);
   and MGM_G302(MGM_W253,MGM_W252,D0);
   and MGM_G303(MGM_W254,S,MGM_W253);
   and MGM_G304(ENABLE_D0_AND_NOT_D1_AND_S_AND_SI,SI,MGM_W254);
   and MGM_G305(MGM_W255,D1,D0);
   not MGM_G306(MGM_W256,S);
   and MGM_G307(MGM_W257,MGM_W256,MGM_W255);
   not MGM_G308(MGM_W258,SI);
   and MGM_G309(ENABLE_D0_AND_D1_AND_NOT_S_AND_NOT_SI,MGM_W258,MGM_W257);
   and MGM_G310(MGM_W259,D1,D0);
   and MGM_G311(MGM_W260,S,MGM_W259);
   not MGM_G312(MGM_W261,SI);
   and MGM_G313(ENABLE_D0_AND_D1_AND_S_AND_NOT_SI,MGM_W261,MGM_W260);
   not MGM_G314(MGM_W262,D0);
   not MGM_G315(MGM_W263,D1);
   and MGM_G316(MGM_W264,MGM_W263,MGM_W262);
   not MGM_G317(MGM_W265,S);
   and MGM_G318(MGM_W266,MGM_W265,MGM_W264);
   and MGM_G319(ENABLE_NOT_D0_AND_NOT_D1_AND_NOT_S_AND_SE,SE,MGM_W266);
   not MGM_G320(MGM_W267,D0);
   not MGM_G321(MGM_W268,D1);
   and MGM_G322(MGM_W269,MGM_W268,MGM_W267);
   and MGM_G323(MGM_W270,S,MGM_W269);
   and MGM_G324(ENABLE_NOT_D0_AND_NOT_D1_AND_S_AND_SE,SE,MGM_W270);
   not MGM_G325(MGM_W271,D0);
   and MGM_G326(MGM_W272,D1,MGM_W271);
   not MGM_G327(MGM_W273,S);
   and MGM_G328(MGM_W274,MGM_W273,MGM_W272);
   and MGM_G329(ENABLE_NOT_D0_AND_D1_AND_NOT_S_AND_SE,SE,MGM_W274);
   not MGM_G330(MGM_W275,D0);
   and MGM_G331(MGM_W276,D1,MGM_W275);
   and MGM_G332(MGM_W277,S,MGM_W276);
   and MGM_G333(ENABLE_NOT_D0_AND_D1_AND_S_AND_SE,SE,MGM_W277);
   not MGM_G334(MGM_W278,D1);
   and MGM_G335(MGM_W279,MGM_W278,D0);
   not MGM_G336(MGM_W280,S);
   and MGM_G337(MGM_W281,MGM_W280,MGM_W279);
   and MGM_G338(ENABLE_D0_AND_NOT_D1_AND_NOT_S_AND_SE,SE,MGM_W281);
   not MGM_G339(MGM_W282,D1);
   and MGM_G340(MGM_W283,MGM_W282,D0);
   and MGM_G341(MGM_W284,S,MGM_W283);
   and MGM_G342(ENABLE_D0_AND_NOT_D1_AND_S_AND_SE,SE,MGM_W284);
   and MGM_G343(MGM_W285,D1,D0);
   not MGM_G344(MGM_W286,S);
   and MGM_G345(MGM_W287,MGM_W286,MGM_W285);
   and MGM_G346(ENABLE_D0_AND_D1_AND_NOT_S_AND_SE,SE,MGM_W287);
   and MGM_G347(MGM_W288,D1,D0);
   and MGM_G348(MGM_W289,S,MGM_W288);
   and MGM_G349(ENABLE_D0_AND_D1_AND_S_AND_SE,SE,MGM_W289);
   // spec_gates_end
   // specify_block_begin
   specify

      if(D0===1'b0 && D1===1'b0 && S===1'b0 && SI===1'b1)
      // seq arc CK --> Q
      (posedge CK => (Q : SE))  = (1.0,1.0);
      
      if(D0===1'b0 && D1===1'b0 && S===1'b1 && SI===1'b1)
      // seq arc CK --> Q
      (posedge CK => (Q : SE))  = (1.0,1.0);
      
      if(D0===1'b0 && D1===1'b1 && S===1'b0 && SI===1'b1)
      // seq arc CK --> Q
      (posedge CK => (Q : SE))  = (1.0,1.0);
      
      if(D0===1'b0 && D1===1'b1 && S===1'b1 && SE===1'b0 && SI===1'b1 || D0===1'b0 && D1===1'b0 && S===1'b0 && SE===1'b0 && SI===1'b0)
      // seq arc CK --> Q
      (posedge CK => (Q : S))  = (1.0,1.0);
      
      if(D0===1'b0 && D1===1'b1 && S===1'b1 && SE===1'b1)
      // seq arc CK --> Q
      (posedge CK => (Q : SI))  = (1.0,1.0);
      
      if(D0===1'b0 && S===1'b1 && SE===1'b0 && SI===1'b0)
      // seq arc CK --> Q
      (posedge CK => (Q : D1))  = (1.0,1.0);
      
      if(D0===1'b1 && D1===1'b0 && S===1'b0 && SI===1'b0)
      // seq arc CK --> Q
      (posedge CK => (Q : SE))  = (1.0,1.0);
      
      if(D0===1'b1 && D1===1'b0 && S===1'b0 && SE===1'b1 && SI===1'b1 || D0===1'b0 && D1===1'b0 && S===1'b0 && SE===1'b1 && SI===1'b0)
      // seq arc CK --> Q
      (posedge CK => (Q : D0))  = (1.0,1.0);
      
      if(D0===1'b1 && D1===1'b0 && SE===1'b0 && SI===1'b1)
      // seq arc CK --> Q
      (posedge CK => (Q : S))  = (1.0,1.0);
      
      if(D0===1'b1 && D1===1'b0 && S===1'b1 && SE===1'b1)
      // seq arc CK --> Q
      (posedge CK => (Q : SI))  = (1.0,1.0);
      
      if(D0===1'b1 && D1===1'b1 && S===1'b0 && SE===1'b0 && SI===1'b1 || D0===1'b0 && D1===1'b0 && S===1'b1 && SE===1'b1 && SI===1'b0)
      // seq arc CK --> Q
      (posedge CK => (Q : D0))  = (1.0,1.0);
      
      if(D0===1'b1 && D1===1'b1 && S===1'b0 && SE===1'b1)
      // seq arc CK --> Q
      (posedge CK => (Q : SI))  = (1.0,1.0);
      
      if(D0===1'b1 && D1===1'b1 && S===1'b1 && SE===1'b0 && SI===1'b1 || D0===1'b0 && D1===1'b1 && S===1'b0 && SE===1'b1 && SI===1'b0)
      // seq arc CK --> Q
      (posedge CK => (Q : D0))  = (1.0,1.0);
      
      if(D0===1'b1 && D1===1'b1 && S===1'b1 && SE===1'b1)
      // seq arc CK --> Q
      (posedge CK => (Q : SI))  = (1.0,1.0);
      
      if(D0===1'b1 && S===1'b1 && SE===1'b0 && SI===1'b0)
      // seq arc CK --> Q
      (posedge CK => (Q : D1))  = (1.0,1.0);
      
      if(D1===1'b1 && S===1'b0 && SE===1'b0 && SI===1'b0)
      // seq arc CK --> Q
      (posedge CK => (Q : D0))  = (1.0,1.0);
      
      ifnone
      // seq arc CK --> Q
      (posedge CK => (Q : D0))  = (1.0,1.0);
      
      $width(negedge CK &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_NOT_S_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_NOT_S_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_NOT_S_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_NOT_S_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_NOT_S_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_NOT_S_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_NOT_S_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_NOT_S_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_S_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_S_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_S_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_S_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_S_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_S_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_S_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_S_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D0_AND_D1_AND_NOT_S_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D0_AND_D1_AND_NOT_S_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D0_AND_D1_AND_NOT_S_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D0_AND_D1_AND_NOT_S_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D0_AND_D1_AND_NOT_S_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D0_AND_D1_AND_NOT_S_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D0_AND_D1_AND_NOT_S_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D0_AND_D1_AND_NOT_S_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D0_AND_D1_AND_S_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D0_AND_D1_AND_S_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D0_AND_D1_AND_S_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D0_AND_D1_AND_S_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D0_AND_D1_AND_S_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D0_AND_D1_AND_S_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D0_AND_D1_AND_S_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D0_AND_D1_AND_S_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D0_AND_NOT_D1_AND_NOT_S_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D0_AND_NOT_D1_AND_NOT_S_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D0_AND_NOT_D1_AND_NOT_S_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D0_AND_NOT_D1_AND_NOT_S_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D0_AND_NOT_D1_AND_NOT_S_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D0_AND_NOT_D1_AND_NOT_S_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D0_AND_NOT_D1_AND_NOT_S_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D0_AND_NOT_D1_AND_NOT_S_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D0_AND_NOT_D1_AND_S_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D0_AND_NOT_D1_AND_S_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D0_AND_NOT_D1_AND_S_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D0_AND_NOT_D1_AND_S_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D0_AND_NOT_D1_AND_S_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D0_AND_NOT_D1_AND_S_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D0_AND_NOT_D1_AND_S_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D0_AND_NOT_D1_AND_S_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D0_AND_D1_AND_NOT_S_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D0_AND_D1_AND_NOT_S_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D0_AND_D1_AND_NOT_S_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D0_AND_D1_AND_NOT_S_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D0_AND_D1_AND_NOT_S_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D0_AND_D1_AND_NOT_S_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D0_AND_D1_AND_NOT_S_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D0_AND_D1_AND_NOT_S_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D0_AND_D1_AND_S_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D0_AND_D1_AND_S_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D0_AND_D1_AND_S_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D0_AND_D1_AND_S_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D0_AND_D1_AND_S_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D0_AND_D1_AND_S_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D0_AND_D1_AND_S_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D0_AND_D1_AND_S_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      // hold D0-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D1_AND_NOT_S_AND_NOT_SE_AND_NOT_SI === 1'b1),
      negedge D0 &&& (ENABLE_NOT_D1_AND_NOT_S_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold D0-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D1_AND_NOT_S_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge D0 &&& (ENABLE_NOT_D1_AND_NOT_S_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup D0-HL CK-LH
      $setup(negedge D0 &&& (ENABLE_NOT_D1_AND_NOT_S_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D1_AND_NOT_S_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup D0-LH CK-LH
      $setup(posedge D0 &&& (ENABLE_NOT_D1_AND_NOT_S_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D1_AND_NOT_S_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold D0-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D1_AND_NOT_S_AND_NOT_SE_AND_SI === 1'b1),
      negedge D0 &&& (ENABLE_NOT_D1_AND_NOT_S_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // hold D0-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D1_AND_NOT_S_AND_NOT_SE_AND_SI === 1'b1),
      posedge D0 &&& (ENABLE_NOT_D1_AND_NOT_S_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // setup D0-HL CK-LH
      $setup(negedge D0 &&& (ENABLE_NOT_D1_AND_NOT_S_AND_NOT_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D1_AND_NOT_S_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // setup D0-LH CK-LH
      $setup(posedge D0 &&& (ENABLE_NOT_D1_AND_NOT_S_AND_NOT_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D1_AND_NOT_S_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // hold D0-HL CK-LH
      $hold(posedge CK &&& (ENABLE_D1_AND_NOT_S_AND_NOT_SE_AND_NOT_SI === 1'b1),
      negedge D0 &&& (ENABLE_D1_AND_NOT_S_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold D0-LH CK-LH
      $hold(posedge CK &&& (ENABLE_D1_AND_NOT_S_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge D0 &&& (ENABLE_D1_AND_NOT_S_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup D0-HL CK-LH
      $setup(negedge D0 &&& (ENABLE_D1_AND_NOT_S_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_D1_AND_NOT_S_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup D0-LH CK-LH
      $setup(posedge D0 &&& (ENABLE_D1_AND_NOT_S_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_D1_AND_NOT_S_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold D0-HL CK-LH
      $hold(posedge CK &&& (ENABLE_D1_AND_NOT_S_AND_NOT_SE_AND_SI === 1'b1),
      negedge D0 &&& (ENABLE_D1_AND_NOT_S_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // hold D0-LH CK-LH
      $hold(posedge CK &&& (ENABLE_D1_AND_NOT_S_AND_NOT_SE_AND_SI === 1'b1),
      posedge D0 &&& (ENABLE_D1_AND_NOT_S_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // setup D0-HL CK-LH
      $setup(negedge D0 &&& (ENABLE_D1_AND_NOT_S_AND_NOT_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_D1_AND_NOT_S_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // setup D0-LH CK-LH
      $setup(posedge D0 &&& (ENABLE_D1_AND_NOT_S_AND_NOT_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_D1_AND_NOT_S_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // hold D1-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D0_AND_S_AND_NOT_SE_AND_NOT_SI === 1'b1),
      negedge D1 &&& (ENABLE_NOT_D0_AND_S_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold D1-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D0_AND_S_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge D1 &&& (ENABLE_NOT_D0_AND_S_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup D1-HL CK-LH
      $setup(negedge D1 &&& (ENABLE_NOT_D0_AND_S_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D0_AND_S_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup D1-LH CK-LH
      $setup(posedge D1 &&& (ENABLE_NOT_D0_AND_S_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D0_AND_S_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold D1-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D0_AND_S_AND_NOT_SE_AND_SI === 1'b1),
      negedge D1 &&& (ENABLE_NOT_D0_AND_S_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // hold D1-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D0_AND_S_AND_NOT_SE_AND_SI === 1'b1),
      posedge D1 &&& (ENABLE_NOT_D0_AND_S_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // setup D1-HL CK-LH
      $setup(negedge D1 &&& (ENABLE_NOT_D0_AND_S_AND_NOT_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D0_AND_S_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // setup D1-LH CK-LH
      $setup(posedge D1 &&& (ENABLE_NOT_D0_AND_S_AND_NOT_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D0_AND_S_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // hold D1-HL CK-LH
      $hold(posedge CK &&& (ENABLE_D0_AND_S_AND_NOT_SE_AND_NOT_SI === 1'b1),
      negedge D1 &&& (ENABLE_D0_AND_S_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold D1-LH CK-LH
      $hold(posedge CK &&& (ENABLE_D0_AND_S_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge D1 &&& (ENABLE_D0_AND_S_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup D1-HL CK-LH
      $setup(negedge D1 &&& (ENABLE_D0_AND_S_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_D0_AND_S_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup D1-LH CK-LH
      $setup(posedge D1 &&& (ENABLE_D0_AND_S_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_D0_AND_S_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold D1-HL CK-LH
      $hold(posedge CK &&& (ENABLE_D0_AND_S_AND_NOT_SE_AND_SI === 1'b1),
      negedge D1 &&& (ENABLE_D0_AND_S_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // hold D1-LH CK-LH
      $hold(posedge CK &&& (ENABLE_D0_AND_S_AND_NOT_SE_AND_SI === 1'b1),
      posedge D1 &&& (ENABLE_D0_AND_S_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // setup D1-HL CK-LH
      $setup(negedge D1 &&& (ENABLE_D0_AND_S_AND_NOT_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_D0_AND_S_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // setup D1-LH CK-LH
      $setup(posedge D1 &&& (ENABLE_D0_AND_S_AND_NOT_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_D0_AND_S_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // hold S-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D0_AND_D1_AND_NOT_SE_AND_NOT_SI === 1'b1),
      negedge S &&& (ENABLE_NOT_D0_AND_D1_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold S-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D0_AND_D1_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge S &&& (ENABLE_NOT_D0_AND_D1_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup S-HL CK-LH
      $setup(negedge S &&& (ENABLE_NOT_D0_AND_D1_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D0_AND_D1_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup S-LH CK-LH
      $setup(posedge S &&& (ENABLE_NOT_D0_AND_D1_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D0_AND_D1_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold S-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D0_AND_D1_AND_NOT_SE_AND_SI === 1'b1),
      negedge S &&& (ENABLE_NOT_D0_AND_D1_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // hold S-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D0_AND_D1_AND_NOT_SE_AND_SI === 1'b1),
      posedge S &&& (ENABLE_NOT_D0_AND_D1_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // setup S-HL CK-LH
      $setup(negedge S &&& (ENABLE_NOT_D0_AND_D1_AND_NOT_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D0_AND_D1_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // setup S-LH CK-LH
      $setup(posedge S &&& (ENABLE_NOT_D0_AND_D1_AND_NOT_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D0_AND_D1_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // hold S-HL CK-LH
      $hold(posedge CK &&& (ENABLE_D0_AND_NOT_D1_AND_NOT_SE_AND_NOT_SI === 1'b1),
      negedge S &&& (ENABLE_D0_AND_NOT_D1_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold S-LH CK-LH
      $hold(posedge CK &&& (ENABLE_D0_AND_NOT_D1_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge S &&& (ENABLE_D0_AND_NOT_D1_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup S-HL CK-LH
      $setup(negedge S &&& (ENABLE_D0_AND_NOT_D1_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_D0_AND_NOT_D1_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup S-LH CK-LH
      $setup(posedge S &&& (ENABLE_D0_AND_NOT_D1_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_D0_AND_NOT_D1_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold S-HL CK-LH
      $hold(posedge CK &&& (ENABLE_D0_AND_NOT_D1_AND_NOT_SE_AND_SI === 1'b1),
      negedge S &&& (ENABLE_D0_AND_NOT_D1_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // hold S-LH CK-LH
      $hold(posedge CK &&& (ENABLE_D0_AND_NOT_D1_AND_NOT_SE_AND_SI === 1'b1),
      posedge S &&& (ENABLE_D0_AND_NOT_D1_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // setup S-HL CK-LH
      $setup(negedge S &&& (ENABLE_D0_AND_NOT_D1_AND_NOT_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_D0_AND_NOT_D1_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // setup S-LH CK-LH
      $setup(posedge S &&& (ENABLE_D0_AND_NOT_D1_AND_NOT_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_D0_AND_NOT_D1_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // hold SE-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_NOT_S_AND_SI === 1'b1),
      negedge SE &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_NOT_S_AND_SI === 1'b1),1.0);
      
      // hold SE-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_NOT_S_AND_SI === 1'b1),
      posedge SE &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_NOT_S_AND_SI === 1'b1),1.0);
      
      // setup SE-HL CK-LH
      $setup(negedge SE &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_NOT_S_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_NOT_S_AND_SI === 1'b1),1.0);
      
      // setup SE-LH CK-LH
      $setup(posedge SE &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_NOT_S_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_NOT_S_AND_SI === 1'b1),1.0);
      
      // hold SE-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_S_AND_SI === 1'b1),
      negedge SE &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_S_AND_SI === 1'b1),1.0);
      
      // hold SE-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_S_AND_SI === 1'b1),
      posedge SE &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_S_AND_SI === 1'b1),1.0);
      
      // setup SE-HL CK-LH
      $setup(negedge SE &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_S_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_S_AND_SI === 1'b1),1.0);
      
      // setup SE-LH CK-LH
      $setup(posedge SE &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_S_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_S_AND_SI === 1'b1),1.0);
      
      // hold SE-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D0_AND_D1_AND_NOT_S_AND_SI === 1'b1),
      negedge SE &&& (ENABLE_NOT_D0_AND_D1_AND_NOT_S_AND_SI === 1'b1),1.0);
      
      // hold SE-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D0_AND_D1_AND_NOT_S_AND_SI === 1'b1),
      posedge SE &&& (ENABLE_NOT_D0_AND_D1_AND_NOT_S_AND_SI === 1'b1),1.0);
      
      // setup SE-HL CK-LH
      $setup(negedge SE &&& (ENABLE_NOT_D0_AND_D1_AND_NOT_S_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D0_AND_D1_AND_NOT_S_AND_SI === 1'b1),1.0);
      
      // setup SE-LH CK-LH
      $setup(posedge SE &&& (ENABLE_NOT_D0_AND_D1_AND_NOT_S_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D0_AND_D1_AND_NOT_S_AND_SI === 1'b1),1.0);
      
      // hold SE-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D0_AND_D1_AND_S_AND_NOT_SI === 1'b1),
      negedge SE &&& (ENABLE_NOT_D0_AND_D1_AND_S_AND_NOT_SI === 1'b1),1.0);
      
      // hold SE-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D0_AND_D1_AND_S_AND_NOT_SI === 1'b1),
      posedge SE &&& (ENABLE_NOT_D0_AND_D1_AND_S_AND_NOT_SI === 1'b1),1.0);
      
      // setup SE-HL CK-LH
      $setup(negedge SE &&& (ENABLE_NOT_D0_AND_D1_AND_S_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D0_AND_D1_AND_S_AND_NOT_SI === 1'b1),1.0);
      
      // setup SE-LH CK-LH
      $setup(posedge SE &&& (ENABLE_NOT_D0_AND_D1_AND_S_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D0_AND_D1_AND_S_AND_NOT_SI === 1'b1),1.0);
      
      // hold SE-HL CK-LH
      $hold(posedge CK &&& (ENABLE_D0_AND_NOT_D1_AND_NOT_S_AND_NOT_SI === 1'b1),
      negedge SE &&& (ENABLE_D0_AND_NOT_D1_AND_NOT_S_AND_NOT_SI === 1'b1),1.0);
      
      // hold SE-LH CK-LH
      $hold(posedge CK &&& (ENABLE_D0_AND_NOT_D1_AND_NOT_S_AND_NOT_SI === 1'b1),
      posedge SE &&& (ENABLE_D0_AND_NOT_D1_AND_NOT_S_AND_NOT_SI === 1'b1),1.0);
      
      // setup SE-HL CK-LH
      $setup(negedge SE &&& (ENABLE_D0_AND_NOT_D1_AND_NOT_S_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_D0_AND_NOT_D1_AND_NOT_S_AND_NOT_SI === 1'b1),1.0);
      
      // setup SE-LH CK-LH
      $setup(posedge SE &&& (ENABLE_D0_AND_NOT_D1_AND_NOT_S_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_D0_AND_NOT_D1_AND_NOT_S_AND_NOT_SI === 1'b1),1.0);
      
      // hold SE-HL CK-LH
      $hold(posedge CK &&& (ENABLE_D0_AND_NOT_D1_AND_S_AND_SI === 1'b1),
      negedge SE &&& (ENABLE_D0_AND_NOT_D1_AND_S_AND_SI === 1'b1),1.0);
      
      // hold SE-LH CK-LH
      $hold(posedge CK &&& (ENABLE_D0_AND_NOT_D1_AND_S_AND_SI === 1'b1),
      posedge SE &&& (ENABLE_D0_AND_NOT_D1_AND_S_AND_SI === 1'b1),1.0);
      
      // setup SE-HL CK-LH
      $setup(negedge SE &&& (ENABLE_D0_AND_NOT_D1_AND_S_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_D0_AND_NOT_D1_AND_S_AND_SI === 1'b1),1.0);
      
      // setup SE-LH CK-LH
      $setup(posedge SE &&& (ENABLE_D0_AND_NOT_D1_AND_S_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_D0_AND_NOT_D1_AND_S_AND_SI === 1'b1),1.0);
      
      // hold SE-HL CK-LH
      $hold(posedge CK &&& (ENABLE_D0_AND_D1_AND_NOT_S_AND_NOT_SI === 1'b1),
      negedge SE &&& (ENABLE_D0_AND_D1_AND_NOT_S_AND_NOT_SI === 1'b1),1.0);
      
      // hold SE-LH CK-LH
      $hold(posedge CK &&& (ENABLE_D0_AND_D1_AND_NOT_S_AND_NOT_SI === 1'b1),
      posedge SE &&& (ENABLE_D0_AND_D1_AND_NOT_S_AND_NOT_SI === 1'b1),1.0);
      
      // setup SE-HL CK-LH
      $setup(negedge SE &&& (ENABLE_D0_AND_D1_AND_NOT_S_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_D0_AND_D1_AND_NOT_S_AND_NOT_SI === 1'b1),1.0);
      
      // setup SE-LH CK-LH
      $setup(posedge SE &&& (ENABLE_D0_AND_D1_AND_NOT_S_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_D0_AND_D1_AND_NOT_S_AND_NOT_SI === 1'b1),1.0);
      
      // hold SE-HL CK-LH
      $hold(posedge CK &&& (ENABLE_D0_AND_D1_AND_S_AND_NOT_SI === 1'b1),
      negedge SE &&& (ENABLE_D0_AND_D1_AND_S_AND_NOT_SI === 1'b1),1.0);
      
      // hold SE-LH CK-LH
      $hold(posedge CK &&& (ENABLE_D0_AND_D1_AND_S_AND_NOT_SI === 1'b1),
      posedge SE &&& (ENABLE_D0_AND_D1_AND_S_AND_NOT_SI === 1'b1),1.0);
      
      // setup SE-HL CK-LH
      $setup(negedge SE &&& (ENABLE_D0_AND_D1_AND_S_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_D0_AND_D1_AND_S_AND_NOT_SI === 1'b1),1.0);
      
      // setup SE-LH CK-LH
      $setup(posedge SE &&& (ENABLE_D0_AND_D1_AND_S_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_D0_AND_D1_AND_S_AND_NOT_SI === 1'b1),1.0);
      
      // hold SI-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_NOT_S_AND_SE === 1'b1),
      negedge SI &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_NOT_S_AND_SE === 1'b1),1.0);
      
      // hold SI-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_NOT_S_AND_SE === 1'b1),
      posedge SI &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_NOT_S_AND_SE === 1'b1),1.0);
      
      // setup SI-HL CK-LH
      $setup(negedge SI &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_NOT_S_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_NOT_S_AND_SE === 1'b1),1.0);
      
      // setup SI-LH CK-LH
      $setup(posedge SI &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_NOT_S_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_NOT_S_AND_SE === 1'b1),1.0);
      
      // hold SI-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_S_AND_SE === 1'b1),
      negedge SI &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_S_AND_SE === 1'b1),1.0);
      
      // hold SI-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_S_AND_SE === 1'b1),
      posedge SI &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_S_AND_SE === 1'b1),1.0);
      
      // setup SI-HL CK-LH
      $setup(negedge SI &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_S_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_S_AND_SE === 1'b1),1.0);
      
      // setup SI-LH CK-LH
      $setup(posedge SI &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_S_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_S_AND_SE === 1'b1),1.0);
      
      // hold SI-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D0_AND_D1_AND_NOT_S_AND_SE === 1'b1),
      negedge SI &&& (ENABLE_NOT_D0_AND_D1_AND_NOT_S_AND_SE === 1'b1),1.0);
      
      // hold SI-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D0_AND_D1_AND_NOT_S_AND_SE === 1'b1),
      posedge SI &&& (ENABLE_NOT_D0_AND_D1_AND_NOT_S_AND_SE === 1'b1),1.0);
      
      // setup SI-HL CK-LH
      $setup(negedge SI &&& (ENABLE_NOT_D0_AND_D1_AND_NOT_S_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_NOT_D0_AND_D1_AND_NOT_S_AND_SE === 1'b1),1.0);
      
      // setup SI-LH CK-LH
      $setup(posedge SI &&& (ENABLE_NOT_D0_AND_D1_AND_NOT_S_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_NOT_D0_AND_D1_AND_NOT_S_AND_SE === 1'b1),1.0);
      
      // hold SI-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D0_AND_D1_AND_S_AND_SE === 1'b1),
      negedge SI &&& (ENABLE_NOT_D0_AND_D1_AND_S_AND_SE === 1'b1),1.0);
      
      // hold SI-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D0_AND_D1_AND_S_AND_SE === 1'b1),
      posedge SI &&& (ENABLE_NOT_D0_AND_D1_AND_S_AND_SE === 1'b1),1.0);
      
      // setup SI-HL CK-LH
      $setup(negedge SI &&& (ENABLE_NOT_D0_AND_D1_AND_S_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_NOT_D0_AND_D1_AND_S_AND_SE === 1'b1),1.0);
      
      // setup SI-LH CK-LH
      $setup(posedge SI &&& (ENABLE_NOT_D0_AND_D1_AND_S_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_NOT_D0_AND_D1_AND_S_AND_SE === 1'b1),1.0);
      
      // hold SI-HL CK-LH
      $hold(posedge CK &&& (ENABLE_D0_AND_NOT_D1_AND_NOT_S_AND_SE === 1'b1),
      negedge SI &&& (ENABLE_D0_AND_NOT_D1_AND_NOT_S_AND_SE === 1'b1),1.0);
      
      // hold SI-LH CK-LH
      $hold(posedge CK &&& (ENABLE_D0_AND_NOT_D1_AND_NOT_S_AND_SE === 1'b1),
      posedge SI &&& (ENABLE_D0_AND_NOT_D1_AND_NOT_S_AND_SE === 1'b1),1.0);
      
      // setup SI-HL CK-LH
      $setup(negedge SI &&& (ENABLE_D0_AND_NOT_D1_AND_NOT_S_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_D0_AND_NOT_D1_AND_NOT_S_AND_SE === 1'b1),1.0);
      
      // setup SI-LH CK-LH
      $setup(posedge SI &&& (ENABLE_D0_AND_NOT_D1_AND_NOT_S_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_D0_AND_NOT_D1_AND_NOT_S_AND_SE === 1'b1),1.0);
      
      // hold SI-HL CK-LH
      $hold(posedge CK &&& (ENABLE_D0_AND_NOT_D1_AND_S_AND_SE === 1'b1),
      negedge SI &&& (ENABLE_D0_AND_NOT_D1_AND_S_AND_SE === 1'b1),1.0);
      
      // hold SI-LH CK-LH
      $hold(posedge CK &&& (ENABLE_D0_AND_NOT_D1_AND_S_AND_SE === 1'b1),
      posedge SI &&& (ENABLE_D0_AND_NOT_D1_AND_S_AND_SE === 1'b1),1.0);
      
      // setup SI-HL CK-LH
      $setup(negedge SI &&& (ENABLE_D0_AND_NOT_D1_AND_S_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_D0_AND_NOT_D1_AND_S_AND_SE === 1'b1),1.0);
      
      // setup SI-LH CK-LH
      $setup(posedge SI &&& (ENABLE_D0_AND_NOT_D1_AND_S_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_D0_AND_NOT_D1_AND_S_AND_SE === 1'b1),1.0);
      
      // hold SI-HL CK-LH
      $hold(posedge CK &&& (ENABLE_D0_AND_D1_AND_NOT_S_AND_SE === 1'b1),
      negedge SI &&& (ENABLE_D0_AND_D1_AND_NOT_S_AND_SE === 1'b1),1.0);
      
      // hold SI-LH CK-LH
      $hold(posedge CK &&& (ENABLE_D0_AND_D1_AND_NOT_S_AND_SE === 1'b1),
      posedge SI &&& (ENABLE_D0_AND_D1_AND_NOT_S_AND_SE === 1'b1),1.0);
      
      // setup SI-HL CK-LH
      $setup(negedge SI &&& (ENABLE_D0_AND_D1_AND_NOT_S_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_D0_AND_D1_AND_NOT_S_AND_SE === 1'b1),1.0);
      
      // setup SI-LH CK-LH
      $setup(posedge SI &&& (ENABLE_D0_AND_D1_AND_NOT_S_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_D0_AND_D1_AND_NOT_S_AND_SE === 1'b1),1.0);
      
      // hold SI-HL CK-LH
      $hold(posedge CK &&& (ENABLE_D0_AND_D1_AND_S_AND_SE === 1'b1),
      negedge SI &&& (ENABLE_D0_AND_D1_AND_S_AND_SE === 1'b1),1.0);
      
      // hold SI-LH CK-LH
      $hold(posedge CK &&& (ENABLE_D0_AND_D1_AND_S_AND_SE === 1'b1),
      posedge SI &&& (ENABLE_D0_AND_D1_AND_S_AND_SE === 1'b1),1.0);
      
      // setup SI-HL CK-LH
      $setup(negedge SI &&& (ENABLE_D0_AND_D1_AND_S_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_D0_AND_D1_AND_S_AND_SE === 1'b1),1.0);
      
      // setup SI-LH CK-LH
      $setup(posedge SI &&& (ENABLE_D0_AND_D1_AND_S_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_D0_AND_D1_AND_S_AND_SE === 1'b1),1.0);
      
      // mpw CK_lh 
      $width(posedge CK,1.0,0);
      
      // mpw CK_hl 
      $width(negedge CK,1.0,0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_FSDPMQ_LP_2( Q, CK, D0, D1, S, SI, SE );
input CK, D0, D1, S, SE, SI;
output Q;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_FSDPMQ_LP_2_func SAEDRVT14_FSDPMQ_LP_2_behav_inst(.Q(Q),.CK(CK),.D0(D0),.D1(D1),.S(S),.SI(SI),.SE(SE));
`else
   SAEDRVT14_FSDPMQ_LP_2_func SAEDRVT14_FSDPMQ_LP_2_inst(.Q(Q),.CK(CK),.D0(D0),.D1(D1),.S(S),.SI(SI),.SE(SE));
   // spec_gates_begin
   not MGM_G0(MGM_W0,D0);
   not MGM_G1(MGM_W1,D1);
   and MGM_G2(MGM_W2,MGM_W1,MGM_W0);
   not MGM_G3(MGM_W3,S);
   and MGM_G4(MGM_W4,MGM_W3,MGM_W2);
   not MGM_G5(MGM_W5,SE);
   and MGM_G6(MGM_W6,MGM_W5,MGM_W4);
   not MGM_G7(MGM_W7,SI);
   and MGM_G8(ENABLE_NOT_D0_AND_NOT_D1_AND_NOT_S_AND_NOT_SE_AND_NOT_SI,MGM_W7,MGM_W6);
   not MGM_G9(MGM_W8,D0);
   not MGM_G10(MGM_W9,D1);
   and MGM_G11(MGM_W10,MGM_W9,MGM_W8);
   not MGM_G12(MGM_W11,S);
   and MGM_G13(MGM_W12,MGM_W11,MGM_W10);
   not MGM_G14(MGM_W13,SE);
   and MGM_G15(MGM_W14,MGM_W13,MGM_W12);
   and MGM_G16(ENABLE_NOT_D0_AND_NOT_D1_AND_NOT_S_AND_NOT_SE_AND_SI,SI,MGM_W14);
   not MGM_G17(MGM_W15,D0);
   not MGM_G18(MGM_W16,D1);
   and MGM_G19(MGM_W17,MGM_W16,MGM_W15);
   not MGM_G20(MGM_W18,S);
   and MGM_G21(MGM_W19,MGM_W18,MGM_W17);
   and MGM_G22(MGM_W20,SE,MGM_W19);
   not MGM_G23(MGM_W21,SI);
   and MGM_G24(ENABLE_NOT_D0_AND_NOT_D1_AND_NOT_S_AND_SE_AND_NOT_SI,MGM_W21,MGM_W20);
   not MGM_G25(MGM_W22,D0);
   not MGM_G26(MGM_W23,D1);
   and MGM_G27(MGM_W24,MGM_W23,MGM_W22);
   not MGM_G28(MGM_W25,S);
   and MGM_G29(MGM_W26,MGM_W25,MGM_W24);
   and MGM_G30(MGM_W27,SE,MGM_W26);
   and MGM_G31(ENABLE_NOT_D0_AND_NOT_D1_AND_NOT_S_AND_SE_AND_SI,SI,MGM_W27);
   not MGM_G32(MGM_W28,D0);
   not MGM_G33(MGM_W29,D1);
   and MGM_G34(MGM_W30,MGM_W29,MGM_W28);
   and MGM_G35(MGM_W31,S,MGM_W30);
   not MGM_G36(MGM_W32,SE);
   and MGM_G37(MGM_W33,MGM_W32,MGM_W31);
   not MGM_G38(MGM_W34,SI);
   and MGM_G39(ENABLE_NOT_D0_AND_NOT_D1_AND_S_AND_NOT_SE_AND_NOT_SI,MGM_W34,MGM_W33);
   not MGM_G40(MGM_W35,D0);
   not MGM_G41(MGM_W36,D1);
   and MGM_G42(MGM_W37,MGM_W36,MGM_W35);
   and MGM_G43(MGM_W38,S,MGM_W37);
   not MGM_G44(MGM_W39,SE);
   and MGM_G45(MGM_W40,MGM_W39,MGM_W38);
   and MGM_G46(ENABLE_NOT_D0_AND_NOT_D1_AND_S_AND_NOT_SE_AND_SI,SI,MGM_W40);
   not MGM_G47(MGM_W41,D0);
   not MGM_G48(MGM_W42,D1);
   and MGM_G49(MGM_W43,MGM_W42,MGM_W41);
   and MGM_G50(MGM_W44,S,MGM_W43);
   and MGM_G51(MGM_W45,SE,MGM_W44);
   not MGM_G52(MGM_W46,SI);
   and MGM_G53(ENABLE_NOT_D0_AND_NOT_D1_AND_S_AND_SE_AND_NOT_SI,MGM_W46,MGM_W45);
   not MGM_G54(MGM_W47,D0);
   not MGM_G55(MGM_W48,D1);
   and MGM_G56(MGM_W49,MGM_W48,MGM_W47);
   and MGM_G57(MGM_W50,S,MGM_W49);
   and MGM_G58(MGM_W51,SE,MGM_W50);
   and MGM_G59(ENABLE_NOT_D0_AND_NOT_D1_AND_S_AND_SE_AND_SI,SI,MGM_W51);
   not MGM_G60(MGM_W52,D0);
   and MGM_G61(MGM_W53,D1,MGM_W52);
   not MGM_G62(MGM_W54,S);
   and MGM_G63(MGM_W55,MGM_W54,MGM_W53);
   not MGM_G64(MGM_W56,SE);
   and MGM_G65(MGM_W57,MGM_W56,MGM_W55);
   not MGM_G66(MGM_W58,SI);
   and MGM_G67(ENABLE_NOT_D0_AND_D1_AND_NOT_S_AND_NOT_SE_AND_NOT_SI,MGM_W58,MGM_W57);
   not MGM_G68(MGM_W59,D0);
   and MGM_G69(MGM_W60,D1,MGM_W59);
   not MGM_G70(MGM_W61,S);
   and MGM_G71(MGM_W62,MGM_W61,MGM_W60);
   not MGM_G72(MGM_W63,SE);
   and MGM_G73(MGM_W64,MGM_W63,MGM_W62);
   and MGM_G74(ENABLE_NOT_D0_AND_D1_AND_NOT_S_AND_NOT_SE_AND_SI,SI,MGM_W64);
   not MGM_G75(MGM_W65,D0);
   and MGM_G76(MGM_W66,D1,MGM_W65);
   not MGM_G77(MGM_W67,S);
   and MGM_G78(MGM_W68,MGM_W67,MGM_W66);
   and MGM_G79(MGM_W69,SE,MGM_W68);
   not MGM_G80(MGM_W70,SI);
   and MGM_G81(ENABLE_NOT_D0_AND_D1_AND_NOT_S_AND_SE_AND_NOT_SI,MGM_W70,MGM_W69);
   not MGM_G82(MGM_W71,D0);
   and MGM_G83(MGM_W72,D1,MGM_W71);
   not MGM_G84(MGM_W73,S);
   and MGM_G85(MGM_W74,MGM_W73,MGM_W72);
   and MGM_G86(MGM_W75,SE,MGM_W74);
   and MGM_G87(ENABLE_NOT_D0_AND_D1_AND_NOT_S_AND_SE_AND_SI,SI,MGM_W75);
   not MGM_G88(MGM_W76,D0);
   and MGM_G89(MGM_W77,D1,MGM_W76);
   and MGM_G90(MGM_W78,S,MGM_W77);
   not MGM_G91(MGM_W79,SE);
   and MGM_G92(MGM_W80,MGM_W79,MGM_W78);
   not MGM_G93(MGM_W81,SI);
   and MGM_G94(ENABLE_NOT_D0_AND_D1_AND_S_AND_NOT_SE_AND_NOT_SI,MGM_W81,MGM_W80);
   not MGM_G95(MGM_W82,D0);
   and MGM_G96(MGM_W83,D1,MGM_W82);
   and MGM_G97(MGM_W84,S,MGM_W83);
   not MGM_G98(MGM_W85,SE);
   and MGM_G99(MGM_W86,MGM_W85,MGM_W84);
   and MGM_G100(ENABLE_NOT_D0_AND_D1_AND_S_AND_NOT_SE_AND_SI,SI,MGM_W86);
   not MGM_G101(MGM_W87,D0);
   and MGM_G102(MGM_W88,D1,MGM_W87);
   and MGM_G103(MGM_W89,S,MGM_W88);
   and MGM_G104(MGM_W90,SE,MGM_W89);
   not MGM_G105(MGM_W91,SI);
   and MGM_G106(ENABLE_NOT_D0_AND_D1_AND_S_AND_SE_AND_NOT_SI,MGM_W91,MGM_W90);
   not MGM_G107(MGM_W92,D0);
   and MGM_G108(MGM_W93,D1,MGM_W92);
   and MGM_G109(MGM_W94,S,MGM_W93);
   and MGM_G110(MGM_W95,SE,MGM_W94);
   and MGM_G111(ENABLE_NOT_D0_AND_D1_AND_S_AND_SE_AND_SI,SI,MGM_W95);
   not MGM_G112(MGM_W96,D1);
   and MGM_G113(MGM_W97,MGM_W96,D0);
   not MGM_G114(MGM_W98,S);
   and MGM_G115(MGM_W99,MGM_W98,MGM_W97);
   not MGM_G116(MGM_W100,SE);
   and MGM_G117(MGM_W101,MGM_W100,MGM_W99);
   not MGM_G118(MGM_W102,SI);
   and MGM_G119(ENABLE_D0_AND_NOT_D1_AND_NOT_S_AND_NOT_SE_AND_NOT_SI,MGM_W102,MGM_W101);
   not MGM_G120(MGM_W103,D1);
   and MGM_G121(MGM_W104,MGM_W103,D0);
   not MGM_G122(MGM_W105,S);
   and MGM_G123(MGM_W106,MGM_W105,MGM_W104);
   not MGM_G124(MGM_W107,SE);
   and MGM_G125(MGM_W108,MGM_W107,MGM_W106);
   and MGM_G126(ENABLE_D0_AND_NOT_D1_AND_NOT_S_AND_NOT_SE_AND_SI,SI,MGM_W108);
   not MGM_G127(MGM_W109,D1);
   and MGM_G128(MGM_W110,MGM_W109,D0);
   not MGM_G129(MGM_W111,S);
   and MGM_G130(MGM_W112,MGM_W111,MGM_W110);
   and MGM_G131(MGM_W113,SE,MGM_W112);
   not MGM_G132(MGM_W114,SI);
   and MGM_G133(ENABLE_D0_AND_NOT_D1_AND_NOT_S_AND_SE_AND_NOT_SI,MGM_W114,MGM_W113);
   not MGM_G134(MGM_W115,D1);
   and MGM_G135(MGM_W116,MGM_W115,D0);
   not MGM_G136(MGM_W117,S);
   and MGM_G137(MGM_W118,MGM_W117,MGM_W116);
   and MGM_G138(MGM_W119,SE,MGM_W118);
   and MGM_G139(ENABLE_D0_AND_NOT_D1_AND_NOT_S_AND_SE_AND_SI,SI,MGM_W119);
   not MGM_G140(MGM_W120,D1);
   and MGM_G141(MGM_W121,MGM_W120,D0);
   and MGM_G142(MGM_W122,S,MGM_W121);
   not MGM_G143(MGM_W123,SE);
   and MGM_G144(MGM_W124,MGM_W123,MGM_W122);
   not MGM_G145(MGM_W125,SI);
   and MGM_G146(ENABLE_D0_AND_NOT_D1_AND_S_AND_NOT_SE_AND_NOT_SI,MGM_W125,MGM_W124);
   not MGM_G147(MGM_W126,D1);
   and MGM_G148(MGM_W127,MGM_W126,D0);
   and MGM_G149(MGM_W128,S,MGM_W127);
   not MGM_G150(MGM_W129,SE);
   and MGM_G151(MGM_W130,MGM_W129,MGM_W128);
   and MGM_G152(ENABLE_D0_AND_NOT_D1_AND_S_AND_NOT_SE_AND_SI,SI,MGM_W130);
   not MGM_G153(MGM_W131,D1);
   and MGM_G154(MGM_W132,MGM_W131,D0);
   and MGM_G155(MGM_W133,S,MGM_W132);
   and MGM_G156(MGM_W134,SE,MGM_W133);
   not MGM_G157(MGM_W135,SI);
   and MGM_G158(ENABLE_D0_AND_NOT_D1_AND_S_AND_SE_AND_NOT_SI,MGM_W135,MGM_W134);
   not MGM_G159(MGM_W136,D1);
   and MGM_G160(MGM_W137,MGM_W136,D0);
   and MGM_G161(MGM_W138,S,MGM_W137);
   and MGM_G162(MGM_W139,SE,MGM_W138);
   and MGM_G163(ENABLE_D0_AND_NOT_D1_AND_S_AND_SE_AND_SI,SI,MGM_W139);
   and MGM_G164(MGM_W140,D1,D0);
   not MGM_G165(MGM_W141,S);
   and MGM_G166(MGM_W142,MGM_W141,MGM_W140);
   not MGM_G167(MGM_W143,SE);
   and MGM_G168(MGM_W144,MGM_W143,MGM_W142);
   not MGM_G169(MGM_W145,SI);
   and MGM_G170(ENABLE_D0_AND_D1_AND_NOT_S_AND_NOT_SE_AND_NOT_SI,MGM_W145,MGM_W144);
   and MGM_G171(MGM_W146,D1,D0);
   not MGM_G172(MGM_W147,S);
   and MGM_G173(MGM_W148,MGM_W147,MGM_W146);
   not MGM_G174(MGM_W149,SE);
   and MGM_G175(MGM_W150,MGM_W149,MGM_W148);
   and MGM_G176(ENABLE_D0_AND_D1_AND_NOT_S_AND_NOT_SE_AND_SI,SI,MGM_W150);
   and MGM_G177(MGM_W151,D1,D0);
   not MGM_G178(MGM_W152,S);
   and MGM_G179(MGM_W153,MGM_W152,MGM_W151);
   and MGM_G180(MGM_W154,SE,MGM_W153);
   not MGM_G181(MGM_W155,SI);
   and MGM_G182(ENABLE_D0_AND_D1_AND_NOT_S_AND_SE_AND_NOT_SI,MGM_W155,MGM_W154);
   and MGM_G183(MGM_W156,D1,D0);
   not MGM_G184(MGM_W157,S);
   and MGM_G185(MGM_W158,MGM_W157,MGM_W156);
   and MGM_G186(MGM_W159,SE,MGM_W158);
   and MGM_G187(ENABLE_D0_AND_D1_AND_NOT_S_AND_SE_AND_SI,SI,MGM_W159);
   and MGM_G188(MGM_W160,D1,D0);
   and MGM_G189(MGM_W161,S,MGM_W160);
   not MGM_G190(MGM_W162,SE);
   and MGM_G191(MGM_W163,MGM_W162,MGM_W161);
   not MGM_G192(MGM_W164,SI);
   and MGM_G193(ENABLE_D0_AND_D1_AND_S_AND_NOT_SE_AND_NOT_SI,MGM_W164,MGM_W163);
   and MGM_G194(MGM_W165,D1,D0);
   and MGM_G195(MGM_W166,S,MGM_W165);
   not MGM_G196(MGM_W167,SE);
   and MGM_G197(MGM_W168,MGM_W167,MGM_W166);
   and MGM_G198(ENABLE_D0_AND_D1_AND_S_AND_NOT_SE_AND_SI,SI,MGM_W168);
   and MGM_G199(MGM_W169,D1,D0);
   and MGM_G200(MGM_W170,S,MGM_W169);
   and MGM_G201(MGM_W171,SE,MGM_W170);
   not MGM_G202(MGM_W172,SI);
   and MGM_G203(ENABLE_D0_AND_D1_AND_S_AND_SE_AND_NOT_SI,MGM_W172,MGM_W171);
   and MGM_G204(MGM_W173,D1,D0);
   and MGM_G205(MGM_W174,S,MGM_W173);
   and MGM_G206(MGM_W175,SE,MGM_W174);
   and MGM_G207(ENABLE_D0_AND_D1_AND_S_AND_SE_AND_SI,SI,MGM_W175);
   not MGM_G208(MGM_W176,D1);
   not MGM_G209(MGM_W177,S);
   and MGM_G210(MGM_W178,MGM_W177,MGM_W176);
   not MGM_G211(MGM_W179,SE);
   and MGM_G212(MGM_W180,MGM_W179,MGM_W178);
   not MGM_G213(MGM_W181,SI);
   and MGM_G214(ENABLE_NOT_D1_AND_NOT_S_AND_NOT_SE_AND_NOT_SI,MGM_W181,MGM_W180);
   not MGM_G215(MGM_W182,D1);
   not MGM_G216(MGM_W183,S);
   and MGM_G217(MGM_W184,MGM_W183,MGM_W182);
   not MGM_G218(MGM_W185,SE);
   and MGM_G219(MGM_W186,MGM_W185,MGM_W184);
   and MGM_G220(ENABLE_NOT_D1_AND_NOT_S_AND_NOT_SE_AND_SI,SI,MGM_W186);
   not MGM_G221(MGM_W187,S);
   and MGM_G222(MGM_W188,MGM_W187,D1);
   not MGM_G223(MGM_W189,SE);
   and MGM_G224(MGM_W190,MGM_W189,MGM_W188);
   not MGM_G225(MGM_W191,SI);
   and MGM_G226(ENABLE_D1_AND_NOT_S_AND_NOT_SE_AND_NOT_SI,MGM_W191,MGM_W190);
   not MGM_G227(MGM_W192,S);
   and MGM_G228(MGM_W193,MGM_W192,D1);
   not MGM_G229(MGM_W194,SE);
   and MGM_G230(MGM_W195,MGM_W194,MGM_W193);
   and MGM_G231(ENABLE_D1_AND_NOT_S_AND_NOT_SE_AND_SI,SI,MGM_W195);
   not MGM_G232(MGM_W196,D0);
   and MGM_G233(MGM_W197,S,MGM_W196);
   not MGM_G234(MGM_W198,SE);
   and MGM_G235(MGM_W199,MGM_W198,MGM_W197);
   not MGM_G236(MGM_W200,SI);
   and MGM_G237(ENABLE_NOT_D0_AND_S_AND_NOT_SE_AND_NOT_SI,MGM_W200,MGM_W199);
   not MGM_G238(MGM_W201,D0);
   and MGM_G239(MGM_W202,S,MGM_W201);
   not MGM_G240(MGM_W203,SE);
   and MGM_G241(MGM_W204,MGM_W203,MGM_W202);
   and MGM_G242(ENABLE_NOT_D0_AND_S_AND_NOT_SE_AND_SI,SI,MGM_W204);
   and MGM_G243(MGM_W205,S,D0);
   not MGM_G244(MGM_W206,SE);
   and MGM_G245(MGM_W207,MGM_W206,MGM_W205);
   not MGM_G246(MGM_W208,SI);
   and MGM_G247(ENABLE_D0_AND_S_AND_NOT_SE_AND_NOT_SI,MGM_W208,MGM_W207);
   and MGM_G248(MGM_W209,S,D0);
   not MGM_G249(MGM_W210,SE);
   and MGM_G250(MGM_W211,MGM_W210,MGM_W209);
   and MGM_G251(ENABLE_D0_AND_S_AND_NOT_SE_AND_SI,SI,MGM_W211);
   not MGM_G252(MGM_W212,D0);
   and MGM_G253(MGM_W213,D1,MGM_W212);
   not MGM_G254(MGM_W214,SE);
   and MGM_G255(MGM_W215,MGM_W214,MGM_W213);
   not MGM_G256(MGM_W216,SI);
   and MGM_G257(ENABLE_NOT_D0_AND_D1_AND_NOT_SE_AND_NOT_SI,MGM_W216,MGM_W215);
   not MGM_G258(MGM_W217,D0);
   and MGM_G259(MGM_W218,D1,MGM_W217);
   not MGM_G260(MGM_W219,SE);
   and MGM_G261(MGM_W220,MGM_W219,MGM_W218);
   and MGM_G262(ENABLE_NOT_D0_AND_D1_AND_NOT_SE_AND_SI,SI,MGM_W220);
   not MGM_G263(MGM_W221,D1);
   and MGM_G264(MGM_W222,MGM_W221,D0);
   not MGM_G265(MGM_W223,SE);
   and MGM_G266(MGM_W224,MGM_W223,MGM_W222);
   not MGM_G267(MGM_W225,SI);
   and MGM_G268(ENABLE_D0_AND_NOT_D1_AND_NOT_SE_AND_NOT_SI,MGM_W225,MGM_W224);
   not MGM_G269(MGM_W226,D1);
   and MGM_G270(MGM_W227,MGM_W226,D0);
   not MGM_G271(MGM_W228,SE);
   and MGM_G272(MGM_W229,MGM_W228,MGM_W227);
   and MGM_G273(ENABLE_D0_AND_NOT_D1_AND_NOT_SE_AND_SI,SI,MGM_W229);
   not MGM_G274(MGM_W230,D0);
   not MGM_G275(MGM_W231,D1);
   and MGM_G276(MGM_W232,MGM_W231,MGM_W230);
   not MGM_G277(MGM_W233,S);
   and MGM_G278(MGM_W234,MGM_W233,MGM_W232);
   and MGM_G279(ENABLE_NOT_D0_AND_NOT_D1_AND_NOT_S_AND_SI,SI,MGM_W234);
   not MGM_G280(MGM_W235,D0);
   not MGM_G281(MGM_W236,D1);
   and MGM_G282(MGM_W237,MGM_W236,MGM_W235);
   and MGM_G283(MGM_W238,S,MGM_W237);
   and MGM_G284(ENABLE_NOT_D0_AND_NOT_D1_AND_S_AND_SI,SI,MGM_W238);
   not MGM_G285(MGM_W239,D0);
   and MGM_G286(MGM_W240,D1,MGM_W239);
   not MGM_G287(MGM_W241,S);
   and MGM_G288(MGM_W242,MGM_W241,MGM_W240);
   and MGM_G289(ENABLE_NOT_D0_AND_D1_AND_NOT_S_AND_SI,SI,MGM_W242);
   not MGM_G290(MGM_W243,D0);
   and MGM_G291(MGM_W244,D1,MGM_W243);
   and MGM_G292(MGM_W245,S,MGM_W244);
   not MGM_G293(MGM_W246,SI);
   and MGM_G294(ENABLE_NOT_D0_AND_D1_AND_S_AND_NOT_SI,MGM_W246,MGM_W245);
   not MGM_G295(MGM_W247,D1);
   and MGM_G296(MGM_W248,MGM_W247,D0);
   not MGM_G297(MGM_W249,S);
   and MGM_G298(MGM_W250,MGM_W249,MGM_W248);
   not MGM_G299(MGM_W251,SI);
   and MGM_G300(ENABLE_D0_AND_NOT_D1_AND_NOT_S_AND_NOT_SI,MGM_W251,MGM_W250);
   not MGM_G301(MGM_W252,D1);
   and MGM_G302(MGM_W253,MGM_W252,D0);
   and MGM_G303(MGM_W254,S,MGM_W253);
   and MGM_G304(ENABLE_D0_AND_NOT_D1_AND_S_AND_SI,SI,MGM_W254);
   and MGM_G305(MGM_W255,D1,D0);
   not MGM_G306(MGM_W256,S);
   and MGM_G307(MGM_W257,MGM_W256,MGM_W255);
   not MGM_G308(MGM_W258,SI);
   and MGM_G309(ENABLE_D0_AND_D1_AND_NOT_S_AND_NOT_SI,MGM_W258,MGM_W257);
   and MGM_G310(MGM_W259,D1,D0);
   and MGM_G311(MGM_W260,S,MGM_W259);
   not MGM_G312(MGM_W261,SI);
   and MGM_G313(ENABLE_D0_AND_D1_AND_S_AND_NOT_SI,MGM_W261,MGM_W260);
   not MGM_G314(MGM_W262,D0);
   not MGM_G315(MGM_W263,D1);
   and MGM_G316(MGM_W264,MGM_W263,MGM_W262);
   not MGM_G317(MGM_W265,S);
   and MGM_G318(MGM_W266,MGM_W265,MGM_W264);
   and MGM_G319(ENABLE_NOT_D0_AND_NOT_D1_AND_NOT_S_AND_SE,SE,MGM_W266);
   not MGM_G320(MGM_W267,D0);
   not MGM_G321(MGM_W268,D1);
   and MGM_G322(MGM_W269,MGM_W268,MGM_W267);
   and MGM_G323(MGM_W270,S,MGM_W269);
   and MGM_G324(ENABLE_NOT_D0_AND_NOT_D1_AND_S_AND_SE,SE,MGM_W270);
   not MGM_G325(MGM_W271,D0);
   and MGM_G326(MGM_W272,D1,MGM_W271);
   not MGM_G327(MGM_W273,S);
   and MGM_G328(MGM_W274,MGM_W273,MGM_W272);
   and MGM_G329(ENABLE_NOT_D0_AND_D1_AND_NOT_S_AND_SE,SE,MGM_W274);
   not MGM_G330(MGM_W275,D0);
   and MGM_G331(MGM_W276,D1,MGM_W275);
   and MGM_G332(MGM_W277,S,MGM_W276);
   and MGM_G333(ENABLE_NOT_D0_AND_D1_AND_S_AND_SE,SE,MGM_W277);
   not MGM_G334(MGM_W278,D1);
   and MGM_G335(MGM_W279,MGM_W278,D0);
   not MGM_G336(MGM_W280,S);
   and MGM_G337(MGM_W281,MGM_W280,MGM_W279);
   and MGM_G338(ENABLE_D0_AND_NOT_D1_AND_NOT_S_AND_SE,SE,MGM_W281);
   not MGM_G339(MGM_W282,D1);
   and MGM_G340(MGM_W283,MGM_W282,D0);
   and MGM_G341(MGM_W284,S,MGM_W283);
   and MGM_G342(ENABLE_D0_AND_NOT_D1_AND_S_AND_SE,SE,MGM_W284);
   and MGM_G343(MGM_W285,D1,D0);
   not MGM_G344(MGM_W286,S);
   and MGM_G345(MGM_W287,MGM_W286,MGM_W285);
   and MGM_G346(ENABLE_D0_AND_D1_AND_NOT_S_AND_SE,SE,MGM_W287);
   and MGM_G347(MGM_W288,D1,D0);
   and MGM_G348(MGM_W289,S,MGM_W288);
   and MGM_G349(ENABLE_D0_AND_D1_AND_S_AND_SE,SE,MGM_W289);
   // spec_gates_end
   // specify_block_begin
   specify

      if(D0===1'b0 && D1===1'b0 && S===1'b0 && SI===1'b1)
      // seq arc CK --> Q
      (posedge CK => (Q : SE))  = (1.0,1.0);
      
      if(D0===1'b0 && D1===1'b0 && S===1'b1 && SI===1'b1)
      // seq arc CK --> Q
      (posedge CK => (Q : SE))  = (1.0,1.0);
      
      if(D0===1'b0 && D1===1'b1 && S===1'b0 && SI===1'b1)
      // seq arc CK --> Q
      (posedge CK => (Q : SE))  = (1.0,1.0);
      
      if(D0===1'b0 && D1===1'b1 && S===1'b1 && SE===1'b0 && SI===1'b1 || D0===1'b0 && D1===1'b0 && S===1'b0 && SE===1'b0 && SI===1'b0)
      // seq arc CK --> Q
      (posedge CK => (Q : S))  = (1.0,1.0);
      
      if(D0===1'b0 && D1===1'b1 && S===1'b1 && SE===1'b1)
      // seq arc CK --> Q
      (posedge CK => (Q : SI))  = (1.0,1.0);
      
      if(D0===1'b0 && S===1'b1 && SE===1'b0 && SI===1'b0)
      // seq arc CK --> Q
      (posedge CK => (Q : D1))  = (1.0,1.0);
      
      if(D0===1'b1 && D1===1'b0 && S===1'b0 && SI===1'b0)
      // seq arc CK --> Q
      (posedge CK => (Q : SE))  = (1.0,1.0);
      
      if(D0===1'b1 && D1===1'b0 && S===1'b0 && SE===1'b1 && SI===1'b1 || D0===1'b0 && D1===1'b0 && S===1'b0 && SE===1'b1 && SI===1'b0)
      // seq arc CK --> Q
      (posedge CK => (Q : D0))  = (1.0,1.0);
      
      if(D0===1'b1 && D1===1'b0 && SE===1'b0 && SI===1'b1)
      // seq arc CK --> Q
      (posedge CK => (Q : S))  = (1.0,1.0);
      
      if(D0===1'b1 && D1===1'b0 && S===1'b1 && SE===1'b1)
      // seq arc CK --> Q
      (posedge CK => (Q : SI))  = (1.0,1.0);
      
      if(D0===1'b1 && D1===1'b1 && S===1'b0 && SE===1'b0 && SI===1'b1 || D0===1'b0 && D1===1'b0 && S===1'b1 && SE===1'b1 && SI===1'b0)
      // seq arc CK --> Q
      (posedge CK => (Q : D0))  = (1.0,1.0);
      
      if(D0===1'b1 && D1===1'b1 && S===1'b0 && SE===1'b1)
      // seq arc CK --> Q
      (posedge CK => (Q : SI))  = (1.0,1.0);
      
      if(D0===1'b1 && D1===1'b1 && S===1'b1 && SE===1'b0 && SI===1'b1 || D0===1'b0 && D1===1'b1 && S===1'b0 && SE===1'b1 && SI===1'b0)
      // seq arc CK --> Q
      (posedge CK => (Q : D0))  = (1.0,1.0);
      
      if(D0===1'b1 && D1===1'b1 && S===1'b1 && SE===1'b1)
      // seq arc CK --> Q
      (posedge CK => (Q : SI))  = (1.0,1.0);
      
      if(D0===1'b1 && S===1'b1 && SE===1'b0 && SI===1'b0)
      // seq arc CK --> Q
      (posedge CK => (Q : D1))  = (1.0,1.0);
      
      if(D1===1'b1 && S===1'b0 && SE===1'b0 && SI===1'b0)
      // seq arc CK --> Q
      (posedge CK => (Q : D0))  = (1.0,1.0);
      
      ifnone
      // seq arc CK --> Q
      (posedge CK => (Q : D0))  = (1.0,1.0);
      
      $width(negedge CK &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_NOT_S_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_NOT_S_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_NOT_S_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_NOT_S_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_NOT_S_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_NOT_S_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_NOT_S_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_NOT_S_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_S_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_S_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_S_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_S_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_S_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_S_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_S_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_S_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D0_AND_D1_AND_NOT_S_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D0_AND_D1_AND_NOT_S_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D0_AND_D1_AND_NOT_S_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D0_AND_D1_AND_NOT_S_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D0_AND_D1_AND_NOT_S_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D0_AND_D1_AND_NOT_S_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D0_AND_D1_AND_NOT_S_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D0_AND_D1_AND_NOT_S_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D0_AND_D1_AND_S_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D0_AND_D1_AND_S_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D0_AND_D1_AND_S_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D0_AND_D1_AND_S_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D0_AND_D1_AND_S_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D0_AND_D1_AND_S_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D0_AND_D1_AND_S_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D0_AND_D1_AND_S_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D0_AND_NOT_D1_AND_NOT_S_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D0_AND_NOT_D1_AND_NOT_S_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D0_AND_NOT_D1_AND_NOT_S_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D0_AND_NOT_D1_AND_NOT_S_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D0_AND_NOT_D1_AND_NOT_S_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D0_AND_NOT_D1_AND_NOT_S_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D0_AND_NOT_D1_AND_NOT_S_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D0_AND_NOT_D1_AND_NOT_S_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D0_AND_NOT_D1_AND_S_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D0_AND_NOT_D1_AND_S_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D0_AND_NOT_D1_AND_S_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D0_AND_NOT_D1_AND_S_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D0_AND_NOT_D1_AND_S_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D0_AND_NOT_D1_AND_S_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D0_AND_NOT_D1_AND_S_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D0_AND_NOT_D1_AND_S_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D0_AND_D1_AND_NOT_S_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D0_AND_D1_AND_NOT_S_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D0_AND_D1_AND_NOT_S_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D0_AND_D1_AND_NOT_S_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D0_AND_D1_AND_NOT_S_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D0_AND_D1_AND_NOT_S_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D0_AND_D1_AND_NOT_S_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D0_AND_D1_AND_NOT_S_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D0_AND_D1_AND_S_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D0_AND_D1_AND_S_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D0_AND_D1_AND_S_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D0_AND_D1_AND_S_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D0_AND_D1_AND_S_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D0_AND_D1_AND_S_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D0_AND_D1_AND_S_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D0_AND_D1_AND_S_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      // hold D0-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D1_AND_NOT_S_AND_NOT_SE_AND_NOT_SI === 1'b1),
      negedge D0 &&& (ENABLE_NOT_D1_AND_NOT_S_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold D0-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D1_AND_NOT_S_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge D0 &&& (ENABLE_NOT_D1_AND_NOT_S_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup D0-HL CK-LH
      $setup(negedge D0 &&& (ENABLE_NOT_D1_AND_NOT_S_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D1_AND_NOT_S_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup D0-LH CK-LH
      $setup(posedge D0 &&& (ENABLE_NOT_D1_AND_NOT_S_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D1_AND_NOT_S_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold D0-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D1_AND_NOT_S_AND_NOT_SE_AND_SI === 1'b1),
      negedge D0 &&& (ENABLE_NOT_D1_AND_NOT_S_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // hold D0-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D1_AND_NOT_S_AND_NOT_SE_AND_SI === 1'b1),
      posedge D0 &&& (ENABLE_NOT_D1_AND_NOT_S_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // setup D0-HL CK-LH
      $setup(negedge D0 &&& (ENABLE_NOT_D1_AND_NOT_S_AND_NOT_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D1_AND_NOT_S_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // setup D0-LH CK-LH
      $setup(posedge D0 &&& (ENABLE_NOT_D1_AND_NOT_S_AND_NOT_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D1_AND_NOT_S_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // hold D0-HL CK-LH
      $hold(posedge CK &&& (ENABLE_D1_AND_NOT_S_AND_NOT_SE_AND_NOT_SI === 1'b1),
      negedge D0 &&& (ENABLE_D1_AND_NOT_S_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold D0-LH CK-LH
      $hold(posedge CK &&& (ENABLE_D1_AND_NOT_S_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge D0 &&& (ENABLE_D1_AND_NOT_S_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup D0-HL CK-LH
      $setup(negedge D0 &&& (ENABLE_D1_AND_NOT_S_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_D1_AND_NOT_S_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup D0-LH CK-LH
      $setup(posedge D0 &&& (ENABLE_D1_AND_NOT_S_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_D1_AND_NOT_S_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold D0-HL CK-LH
      $hold(posedge CK &&& (ENABLE_D1_AND_NOT_S_AND_NOT_SE_AND_SI === 1'b1),
      negedge D0 &&& (ENABLE_D1_AND_NOT_S_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // hold D0-LH CK-LH
      $hold(posedge CK &&& (ENABLE_D1_AND_NOT_S_AND_NOT_SE_AND_SI === 1'b1),
      posedge D0 &&& (ENABLE_D1_AND_NOT_S_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // setup D0-HL CK-LH
      $setup(negedge D0 &&& (ENABLE_D1_AND_NOT_S_AND_NOT_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_D1_AND_NOT_S_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // setup D0-LH CK-LH
      $setup(posedge D0 &&& (ENABLE_D1_AND_NOT_S_AND_NOT_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_D1_AND_NOT_S_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // hold D1-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D0_AND_S_AND_NOT_SE_AND_NOT_SI === 1'b1),
      negedge D1 &&& (ENABLE_NOT_D0_AND_S_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold D1-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D0_AND_S_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge D1 &&& (ENABLE_NOT_D0_AND_S_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup D1-HL CK-LH
      $setup(negedge D1 &&& (ENABLE_NOT_D0_AND_S_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D0_AND_S_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup D1-LH CK-LH
      $setup(posedge D1 &&& (ENABLE_NOT_D0_AND_S_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D0_AND_S_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold D1-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D0_AND_S_AND_NOT_SE_AND_SI === 1'b1),
      negedge D1 &&& (ENABLE_NOT_D0_AND_S_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // hold D1-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D0_AND_S_AND_NOT_SE_AND_SI === 1'b1),
      posedge D1 &&& (ENABLE_NOT_D0_AND_S_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // setup D1-HL CK-LH
      $setup(negedge D1 &&& (ENABLE_NOT_D0_AND_S_AND_NOT_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D0_AND_S_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // setup D1-LH CK-LH
      $setup(posedge D1 &&& (ENABLE_NOT_D0_AND_S_AND_NOT_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D0_AND_S_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // hold D1-HL CK-LH
      $hold(posedge CK &&& (ENABLE_D0_AND_S_AND_NOT_SE_AND_NOT_SI === 1'b1),
      negedge D1 &&& (ENABLE_D0_AND_S_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold D1-LH CK-LH
      $hold(posedge CK &&& (ENABLE_D0_AND_S_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge D1 &&& (ENABLE_D0_AND_S_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup D1-HL CK-LH
      $setup(negedge D1 &&& (ENABLE_D0_AND_S_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_D0_AND_S_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup D1-LH CK-LH
      $setup(posedge D1 &&& (ENABLE_D0_AND_S_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_D0_AND_S_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold D1-HL CK-LH
      $hold(posedge CK &&& (ENABLE_D0_AND_S_AND_NOT_SE_AND_SI === 1'b1),
      negedge D1 &&& (ENABLE_D0_AND_S_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // hold D1-LH CK-LH
      $hold(posedge CK &&& (ENABLE_D0_AND_S_AND_NOT_SE_AND_SI === 1'b1),
      posedge D1 &&& (ENABLE_D0_AND_S_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // setup D1-HL CK-LH
      $setup(negedge D1 &&& (ENABLE_D0_AND_S_AND_NOT_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_D0_AND_S_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // setup D1-LH CK-LH
      $setup(posedge D1 &&& (ENABLE_D0_AND_S_AND_NOT_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_D0_AND_S_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // hold S-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D0_AND_D1_AND_NOT_SE_AND_NOT_SI === 1'b1),
      negedge S &&& (ENABLE_NOT_D0_AND_D1_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold S-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D0_AND_D1_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge S &&& (ENABLE_NOT_D0_AND_D1_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup S-HL CK-LH
      $setup(negedge S &&& (ENABLE_NOT_D0_AND_D1_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D0_AND_D1_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup S-LH CK-LH
      $setup(posedge S &&& (ENABLE_NOT_D0_AND_D1_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D0_AND_D1_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold S-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D0_AND_D1_AND_NOT_SE_AND_SI === 1'b1),
      negedge S &&& (ENABLE_NOT_D0_AND_D1_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // hold S-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D0_AND_D1_AND_NOT_SE_AND_SI === 1'b1),
      posedge S &&& (ENABLE_NOT_D0_AND_D1_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // setup S-HL CK-LH
      $setup(negedge S &&& (ENABLE_NOT_D0_AND_D1_AND_NOT_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D0_AND_D1_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // setup S-LH CK-LH
      $setup(posedge S &&& (ENABLE_NOT_D0_AND_D1_AND_NOT_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D0_AND_D1_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // hold S-HL CK-LH
      $hold(posedge CK &&& (ENABLE_D0_AND_NOT_D1_AND_NOT_SE_AND_NOT_SI === 1'b1),
      negedge S &&& (ENABLE_D0_AND_NOT_D1_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold S-LH CK-LH
      $hold(posedge CK &&& (ENABLE_D0_AND_NOT_D1_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge S &&& (ENABLE_D0_AND_NOT_D1_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup S-HL CK-LH
      $setup(negedge S &&& (ENABLE_D0_AND_NOT_D1_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_D0_AND_NOT_D1_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup S-LH CK-LH
      $setup(posedge S &&& (ENABLE_D0_AND_NOT_D1_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_D0_AND_NOT_D1_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold S-HL CK-LH
      $hold(posedge CK &&& (ENABLE_D0_AND_NOT_D1_AND_NOT_SE_AND_SI === 1'b1),
      negedge S &&& (ENABLE_D0_AND_NOT_D1_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // hold S-LH CK-LH
      $hold(posedge CK &&& (ENABLE_D0_AND_NOT_D1_AND_NOT_SE_AND_SI === 1'b1),
      posedge S &&& (ENABLE_D0_AND_NOT_D1_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // setup S-HL CK-LH
      $setup(negedge S &&& (ENABLE_D0_AND_NOT_D1_AND_NOT_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_D0_AND_NOT_D1_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // setup S-LH CK-LH
      $setup(posedge S &&& (ENABLE_D0_AND_NOT_D1_AND_NOT_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_D0_AND_NOT_D1_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // hold SE-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_NOT_S_AND_SI === 1'b1),
      negedge SE &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_NOT_S_AND_SI === 1'b1),1.0);
      
      // hold SE-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_NOT_S_AND_SI === 1'b1),
      posedge SE &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_NOT_S_AND_SI === 1'b1),1.0);
      
      // setup SE-HL CK-LH
      $setup(negedge SE &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_NOT_S_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_NOT_S_AND_SI === 1'b1),1.0);
      
      // setup SE-LH CK-LH
      $setup(posedge SE &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_NOT_S_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_NOT_S_AND_SI === 1'b1),1.0);
      
      // hold SE-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_S_AND_SI === 1'b1),
      negedge SE &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_S_AND_SI === 1'b1),1.0);
      
      // hold SE-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_S_AND_SI === 1'b1),
      posedge SE &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_S_AND_SI === 1'b1),1.0);
      
      // setup SE-HL CK-LH
      $setup(negedge SE &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_S_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_S_AND_SI === 1'b1),1.0);
      
      // setup SE-LH CK-LH
      $setup(posedge SE &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_S_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_S_AND_SI === 1'b1),1.0);
      
      // hold SE-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D0_AND_D1_AND_NOT_S_AND_SI === 1'b1),
      negedge SE &&& (ENABLE_NOT_D0_AND_D1_AND_NOT_S_AND_SI === 1'b1),1.0);
      
      // hold SE-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D0_AND_D1_AND_NOT_S_AND_SI === 1'b1),
      posedge SE &&& (ENABLE_NOT_D0_AND_D1_AND_NOT_S_AND_SI === 1'b1),1.0);
      
      // setup SE-HL CK-LH
      $setup(negedge SE &&& (ENABLE_NOT_D0_AND_D1_AND_NOT_S_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D0_AND_D1_AND_NOT_S_AND_SI === 1'b1),1.0);
      
      // setup SE-LH CK-LH
      $setup(posedge SE &&& (ENABLE_NOT_D0_AND_D1_AND_NOT_S_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D0_AND_D1_AND_NOT_S_AND_SI === 1'b1),1.0);
      
      // hold SE-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D0_AND_D1_AND_S_AND_NOT_SI === 1'b1),
      negedge SE &&& (ENABLE_NOT_D0_AND_D1_AND_S_AND_NOT_SI === 1'b1),1.0);
      
      // hold SE-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D0_AND_D1_AND_S_AND_NOT_SI === 1'b1),
      posedge SE &&& (ENABLE_NOT_D0_AND_D1_AND_S_AND_NOT_SI === 1'b1),1.0);
      
      // setup SE-HL CK-LH
      $setup(negedge SE &&& (ENABLE_NOT_D0_AND_D1_AND_S_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D0_AND_D1_AND_S_AND_NOT_SI === 1'b1),1.0);
      
      // setup SE-LH CK-LH
      $setup(posedge SE &&& (ENABLE_NOT_D0_AND_D1_AND_S_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D0_AND_D1_AND_S_AND_NOT_SI === 1'b1),1.0);
      
      // hold SE-HL CK-LH
      $hold(posedge CK &&& (ENABLE_D0_AND_NOT_D1_AND_NOT_S_AND_NOT_SI === 1'b1),
      negedge SE &&& (ENABLE_D0_AND_NOT_D1_AND_NOT_S_AND_NOT_SI === 1'b1),1.0);
      
      // hold SE-LH CK-LH
      $hold(posedge CK &&& (ENABLE_D0_AND_NOT_D1_AND_NOT_S_AND_NOT_SI === 1'b1),
      posedge SE &&& (ENABLE_D0_AND_NOT_D1_AND_NOT_S_AND_NOT_SI === 1'b1),1.0);
      
      // setup SE-HL CK-LH
      $setup(negedge SE &&& (ENABLE_D0_AND_NOT_D1_AND_NOT_S_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_D0_AND_NOT_D1_AND_NOT_S_AND_NOT_SI === 1'b1),1.0);
      
      // setup SE-LH CK-LH
      $setup(posedge SE &&& (ENABLE_D0_AND_NOT_D1_AND_NOT_S_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_D0_AND_NOT_D1_AND_NOT_S_AND_NOT_SI === 1'b1),1.0);
      
      // hold SE-HL CK-LH
      $hold(posedge CK &&& (ENABLE_D0_AND_NOT_D1_AND_S_AND_SI === 1'b1),
      negedge SE &&& (ENABLE_D0_AND_NOT_D1_AND_S_AND_SI === 1'b1),1.0);
      
      // hold SE-LH CK-LH
      $hold(posedge CK &&& (ENABLE_D0_AND_NOT_D1_AND_S_AND_SI === 1'b1),
      posedge SE &&& (ENABLE_D0_AND_NOT_D1_AND_S_AND_SI === 1'b1),1.0);
      
      // setup SE-HL CK-LH
      $setup(negedge SE &&& (ENABLE_D0_AND_NOT_D1_AND_S_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_D0_AND_NOT_D1_AND_S_AND_SI === 1'b1),1.0);
      
      // setup SE-LH CK-LH
      $setup(posedge SE &&& (ENABLE_D0_AND_NOT_D1_AND_S_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_D0_AND_NOT_D1_AND_S_AND_SI === 1'b1),1.0);
      
      // hold SE-HL CK-LH
      $hold(posedge CK &&& (ENABLE_D0_AND_D1_AND_NOT_S_AND_NOT_SI === 1'b1),
      negedge SE &&& (ENABLE_D0_AND_D1_AND_NOT_S_AND_NOT_SI === 1'b1),1.0);
      
      // hold SE-LH CK-LH
      $hold(posedge CK &&& (ENABLE_D0_AND_D1_AND_NOT_S_AND_NOT_SI === 1'b1),
      posedge SE &&& (ENABLE_D0_AND_D1_AND_NOT_S_AND_NOT_SI === 1'b1),1.0);
      
      // setup SE-HL CK-LH
      $setup(negedge SE &&& (ENABLE_D0_AND_D1_AND_NOT_S_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_D0_AND_D1_AND_NOT_S_AND_NOT_SI === 1'b1),1.0);
      
      // setup SE-LH CK-LH
      $setup(posedge SE &&& (ENABLE_D0_AND_D1_AND_NOT_S_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_D0_AND_D1_AND_NOT_S_AND_NOT_SI === 1'b1),1.0);
      
      // hold SE-HL CK-LH
      $hold(posedge CK &&& (ENABLE_D0_AND_D1_AND_S_AND_NOT_SI === 1'b1),
      negedge SE &&& (ENABLE_D0_AND_D1_AND_S_AND_NOT_SI === 1'b1),1.0);
      
      // hold SE-LH CK-LH
      $hold(posedge CK &&& (ENABLE_D0_AND_D1_AND_S_AND_NOT_SI === 1'b1),
      posedge SE &&& (ENABLE_D0_AND_D1_AND_S_AND_NOT_SI === 1'b1),1.0);
      
      // setup SE-HL CK-LH
      $setup(negedge SE &&& (ENABLE_D0_AND_D1_AND_S_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_D0_AND_D1_AND_S_AND_NOT_SI === 1'b1),1.0);
      
      // setup SE-LH CK-LH
      $setup(posedge SE &&& (ENABLE_D0_AND_D1_AND_S_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_D0_AND_D1_AND_S_AND_NOT_SI === 1'b1),1.0);
      
      // hold SI-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_NOT_S_AND_SE === 1'b1),
      negedge SI &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_NOT_S_AND_SE === 1'b1),1.0);
      
      // hold SI-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_NOT_S_AND_SE === 1'b1),
      posedge SI &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_NOT_S_AND_SE === 1'b1),1.0);
      
      // setup SI-HL CK-LH
      $setup(negedge SI &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_NOT_S_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_NOT_S_AND_SE === 1'b1),1.0);
      
      // setup SI-LH CK-LH
      $setup(posedge SI &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_NOT_S_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_NOT_S_AND_SE === 1'b1),1.0);
      
      // hold SI-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_S_AND_SE === 1'b1),
      negedge SI &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_S_AND_SE === 1'b1),1.0);
      
      // hold SI-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_S_AND_SE === 1'b1),
      posedge SI &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_S_AND_SE === 1'b1),1.0);
      
      // setup SI-HL CK-LH
      $setup(negedge SI &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_S_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_S_AND_SE === 1'b1),1.0);
      
      // setup SI-LH CK-LH
      $setup(posedge SI &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_S_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_S_AND_SE === 1'b1),1.0);
      
      // hold SI-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D0_AND_D1_AND_NOT_S_AND_SE === 1'b1),
      negedge SI &&& (ENABLE_NOT_D0_AND_D1_AND_NOT_S_AND_SE === 1'b1),1.0);
      
      // hold SI-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D0_AND_D1_AND_NOT_S_AND_SE === 1'b1),
      posedge SI &&& (ENABLE_NOT_D0_AND_D1_AND_NOT_S_AND_SE === 1'b1),1.0);
      
      // setup SI-HL CK-LH
      $setup(negedge SI &&& (ENABLE_NOT_D0_AND_D1_AND_NOT_S_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_NOT_D0_AND_D1_AND_NOT_S_AND_SE === 1'b1),1.0);
      
      // setup SI-LH CK-LH
      $setup(posedge SI &&& (ENABLE_NOT_D0_AND_D1_AND_NOT_S_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_NOT_D0_AND_D1_AND_NOT_S_AND_SE === 1'b1),1.0);
      
      // hold SI-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D0_AND_D1_AND_S_AND_SE === 1'b1),
      negedge SI &&& (ENABLE_NOT_D0_AND_D1_AND_S_AND_SE === 1'b1),1.0);
      
      // hold SI-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D0_AND_D1_AND_S_AND_SE === 1'b1),
      posedge SI &&& (ENABLE_NOT_D0_AND_D1_AND_S_AND_SE === 1'b1),1.0);
      
      // setup SI-HL CK-LH
      $setup(negedge SI &&& (ENABLE_NOT_D0_AND_D1_AND_S_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_NOT_D0_AND_D1_AND_S_AND_SE === 1'b1),1.0);
      
      // setup SI-LH CK-LH
      $setup(posedge SI &&& (ENABLE_NOT_D0_AND_D1_AND_S_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_NOT_D0_AND_D1_AND_S_AND_SE === 1'b1),1.0);
      
      // hold SI-HL CK-LH
      $hold(posedge CK &&& (ENABLE_D0_AND_NOT_D1_AND_NOT_S_AND_SE === 1'b1),
      negedge SI &&& (ENABLE_D0_AND_NOT_D1_AND_NOT_S_AND_SE === 1'b1),1.0);
      
      // hold SI-LH CK-LH
      $hold(posedge CK &&& (ENABLE_D0_AND_NOT_D1_AND_NOT_S_AND_SE === 1'b1),
      posedge SI &&& (ENABLE_D0_AND_NOT_D1_AND_NOT_S_AND_SE === 1'b1),1.0);
      
      // setup SI-HL CK-LH
      $setup(negedge SI &&& (ENABLE_D0_AND_NOT_D1_AND_NOT_S_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_D0_AND_NOT_D1_AND_NOT_S_AND_SE === 1'b1),1.0);
      
      // setup SI-LH CK-LH
      $setup(posedge SI &&& (ENABLE_D0_AND_NOT_D1_AND_NOT_S_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_D0_AND_NOT_D1_AND_NOT_S_AND_SE === 1'b1),1.0);
      
      // hold SI-HL CK-LH
      $hold(posedge CK &&& (ENABLE_D0_AND_NOT_D1_AND_S_AND_SE === 1'b1),
      negedge SI &&& (ENABLE_D0_AND_NOT_D1_AND_S_AND_SE === 1'b1),1.0);
      
      // hold SI-LH CK-LH
      $hold(posedge CK &&& (ENABLE_D0_AND_NOT_D1_AND_S_AND_SE === 1'b1),
      posedge SI &&& (ENABLE_D0_AND_NOT_D1_AND_S_AND_SE === 1'b1),1.0);
      
      // setup SI-HL CK-LH
      $setup(negedge SI &&& (ENABLE_D0_AND_NOT_D1_AND_S_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_D0_AND_NOT_D1_AND_S_AND_SE === 1'b1),1.0);
      
      // setup SI-LH CK-LH
      $setup(posedge SI &&& (ENABLE_D0_AND_NOT_D1_AND_S_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_D0_AND_NOT_D1_AND_S_AND_SE === 1'b1),1.0);
      
      // hold SI-HL CK-LH
      $hold(posedge CK &&& (ENABLE_D0_AND_D1_AND_NOT_S_AND_SE === 1'b1),
      negedge SI &&& (ENABLE_D0_AND_D1_AND_NOT_S_AND_SE === 1'b1),1.0);
      
      // hold SI-LH CK-LH
      $hold(posedge CK &&& (ENABLE_D0_AND_D1_AND_NOT_S_AND_SE === 1'b1),
      posedge SI &&& (ENABLE_D0_AND_D1_AND_NOT_S_AND_SE === 1'b1),1.0);
      
      // setup SI-HL CK-LH
      $setup(negedge SI &&& (ENABLE_D0_AND_D1_AND_NOT_S_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_D0_AND_D1_AND_NOT_S_AND_SE === 1'b1),1.0);
      
      // setup SI-LH CK-LH
      $setup(posedge SI &&& (ENABLE_D0_AND_D1_AND_NOT_S_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_D0_AND_D1_AND_NOT_S_AND_SE === 1'b1),1.0);
      
      // hold SI-HL CK-LH
      $hold(posedge CK &&& (ENABLE_D0_AND_D1_AND_S_AND_SE === 1'b1),
      negedge SI &&& (ENABLE_D0_AND_D1_AND_S_AND_SE === 1'b1),1.0);
      
      // hold SI-LH CK-LH
      $hold(posedge CK &&& (ENABLE_D0_AND_D1_AND_S_AND_SE === 1'b1),
      posedge SI &&& (ENABLE_D0_AND_D1_AND_S_AND_SE === 1'b1),1.0);
      
      // setup SI-HL CK-LH
      $setup(negedge SI &&& (ENABLE_D0_AND_D1_AND_S_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_D0_AND_D1_AND_S_AND_SE === 1'b1),1.0);
      
      // setup SI-LH CK-LH
      $setup(posedge SI &&& (ENABLE_D0_AND_D1_AND_S_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_D0_AND_D1_AND_S_AND_SE === 1'b1),1.0);
      
      // mpw CK_lh 
      $width(posedge CK,1.0,0);
      
      // mpw CK_hl 
      $width(negedge CK,1.0,0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_FSDPQB_V2LP_0P5( QN, CK, D, SI, SE );
input CK, D, SE, SI;
output QN;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_FSDPQB_V2LP_0P5_func SAEDRVT14_FSDPQB_V2LP_0P5_behav_inst(.QN(QN),.CK(CK),.D(D),.SI(SI),.SE(SE));
`else
   SAEDRVT14_FSDPQB_V2LP_0P5_func SAEDRVT14_FSDPQB_V2LP_0P5_inst(.QN(QN),.CK(CK),.D(D),.SI(SI),.SE(SE));
   // spec_gates_begin
   not MGM_G0(MGM_W0,D);
   not MGM_G1(MGM_W1,SE);
   and MGM_G2(MGM_W2,MGM_W1,MGM_W0);
   not MGM_G3(MGM_W3,SI);
   and MGM_G4(ENABLE_NOT_D_AND_NOT_SE_AND_NOT_SI,MGM_W3,MGM_W2);
   not MGM_G5(MGM_W4,D);
   not MGM_G6(MGM_W5,SE);
   and MGM_G7(MGM_W6,MGM_W5,MGM_W4);
   and MGM_G8(ENABLE_NOT_D_AND_NOT_SE_AND_SI,SI,MGM_W6);
   not MGM_G9(MGM_W7,D);
   and MGM_G10(MGM_W8,SE,MGM_W7);
   not MGM_G11(MGM_W9,SI);
   and MGM_G12(ENABLE_NOT_D_AND_SE_AND_NOT_SI,MGM_W9,MGM_W8);
   not MGM_G13(MGM_W10,D);
   and MGM_G14(MGM_W11,SE,MGM_W10);
   and MGM_G15(ENABLE_NOT_D_AND_SE_AND_SI,SI,MGM_W11);
   not MGM_G16(MGM_W12,SE);
   and MGM_G17(MGM_W13,MGM_W12,D);
   not MGM_G18(MGM_W14,SI);
   and MGM_G19(ENABLE_D_AND_NOT_SE_AND_NOT_SI,MGM_W14,MGM_W13);
   not MGM_G20(MGM_W15,SE);
   and MGM_G21(MGM_W16,MGM_W15,D);
   and MGM_G22(ENABLE_D_AND_NOT_SE_AND_SI,SI,MGM_W16);
   and MGM_G23(MGM_W17,SE,D);
   not MGM_G24(MGM_W18,SI);
   and MGM_G25(ENABLE_D_AND_SE_AND_NOT_SI,MGM_W18,MGM_W17);
   and MGM_G26(MGM_W19,SE,D);
   and MGM_G27(ENABLE_D_AND_SE_AND_SI,SI,MGM_W19);
   not MGM_G28(MGM_W20,SE);
   not MGM_G29(MGM_W21,SI);
   and MGM_G30(ENABLE_NOT_SE_AND_NOT_SI,MGM_W21,MGM_W20);
   not MGM_G31(MGM_W22,SE);
   and MGM_G32(ENABLE_NOT_SE_AND_SI,SI,MGM_W22);
   not MGM_G33(MGM_W23,D);
   and MGM_G34(ENABLE_NOT_D_AND_SI,SI,MGM_W23);
   not MGM_G35(MGM_W24,SI);
   and MGM_G36(ENABLE_D_AND_NOT_SI,MGM_W24,D);
   not MGM_G37(MGM_W25,D);
   and MGM_G38(ENABLE_NOT_D_AND_SE,SE,MGM_W25);
   and MGM_G39(ENABLE_D_AND_SE,SE,D);
   // spec_gates_end
   // specify_block_begin
   specify

      if(D===1'b0 && SI===1'b1)
      // seq arc CK --> QN
      (posedge CK => (QN : SE))  = (1.0,1.0);
      
      if(SE===1'b0 && SI===1'b0)
      // seq arc CK --> QN
      (posedge CK => (QN : D))  = (1.0,1.0);
      
      if(D===1'b1 && SE===1'b0 && SI===1'b1 || D===1'b0 && SE===1'b1 && SI===1'b0)
      // seq arc CK --> QN
      (posedge CK => (QN : D))  = (1.0,1.0);
      
      if(D===1'b1 && SE===1'b1)
      // seq arc CK --> QN
      (posedge CK => (QN : SI))  = (1.0,1.0);
      
      ifnone
      // seq arc CK --> QN
      (posedge CK => (QN : D))  = (1.0,1.0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      // hold D-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),
      negedge D &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold D-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),
      posedge D &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup D-HL CK-LH
      $setup(negedge D &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup D-LH CK-LH
      $setup(posedge D &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold D-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_SE_AND_SI === 1'b1),
      negedge D &&& (ENABLE_NOT_SE_AND_SI === 1'b1),1.0);
      
      // hold D-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_SE_AND_SI === 1'b1),
      posedge D &&& (ENABLE_NOT_SE_AND_SI === 1'b1),1.0);
      
      // setup D-HL CK-LH
      $setup(negedge D &&& (ENABLE_NOT_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_SE_AND_SI === 1'b1),1.0);
      
      // setup D-LH CK-LH
      $setup(posedge D &&& (ENABLE_NOT_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_SE_AND_SI === 1'b1),1.0);
      
      // hold SE-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D_AND_SI === 1'b1),
      negedge SE &&& (ENABLE_NOT_D_AND_SI === 1'b1),1.0);
      
      // hold SE-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D_AND_SI === 1'b1),
      posedge SE &&& (ENABLE_NOT_D_AND_SI === 1'b1),1.0);
      
      // setup SE-HL CK-LH
      $setup(negedge SE &&& (ENABLE_NOT_D_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_SI === 1'b1),1.0);
      
      // setup SE-LH CK-LH
      $setup(posedge SE &&& (ENABLE_NOT_D_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_SI === 1'b1),1.0);
      
      // hold SE-HL CK-LH
      $hold(posedge CK &&& (ENABLE_D_AND_NOT_SI === 1'b1),
      negedge SE &&& (ENABLE_D_AND_NOT_SI === 1'b1),1.0);
      
      // hold SE-LH CK-LH
      $hold(posedge CK &&& (ENABLE_D_AND_NOT_SI === 1'b1),
      posedge SE &&& (ENABLE_D_AND_NOT_SI === 1'b1),1.0);
      
      // setup SE-HL CK-LH
      $setup(negedge SE &&& (ENABLE_D_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_D_AND_NOT_SI === 1'b1),1.0);
      
      // setup SE-LH CK-LH
      $setup(posedge SE &&& (ENABLE_D_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_D_AND_NOT_SI === 1'b1),1.0);
      
      // hold SI-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D_AND_SE === 1'b1),
      negedge SI &&& (ENABLE_NOT_D_AND_SE === 1'b1),1.0);
      
      // hold SI-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D_AND_SE === 1'b1),
      posedge SI &&& (ENABLE_NOT_D_AND_SE === 1'b1),1.0);
      
      // setup SI-HL CK-LH
      $setup(negedge SI &&& (ENABLE_NOT_D_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_SE === 1'b1),1.0);
      
      // setup SI-LH CK-LH
      $setup(posedge SI &&& (ENABLE_NOT_D_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_SE === 1'b1),1.0);
      
      // hold SI-HL CK-LH
      $hold(posedge CK &&& (ENABLE_D_AND_SE === 1'b1),
      negedge SI &&& (ENABLE_D_AND_SE === 1'b1),1.0);
      
      // hold SI-LH CK-LH
      $hold(posedge CK &&& (ENABLE_D_AND_SE === 1'b1),
      posedge SI &&& (ENABLE_D_AND_SE === 1'b1),1.0);
      
      // setup SI-HL CK-LH
      $setup(negedge SI &&& (ENABLE_D_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_D_AND_SE === 1'b1),1.0);
      
      // setup SI-LH CK-LH
      $setup(posedge SI &&& (ENABLE_D_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_D_AND_SE === 1'b1),1.0);
      
      // mpw CK_lh 
      $width(posedge CK,1.0,0);
      
      // mpw CK_hl 
      $width(negedge CK,1.0,0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_FSDPQB_V2LP_1( QN, CK, D, SI, SE );
input CK, D, SE, SI;
output QN;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_FSDPQB_V2LP_1_func SAEDRVT14_FSDPQB_V2LP_1_behav_inst(.QN(QN),.CK(CK),.D(D),.SI(SI),.SE(SE));
`else
   SAEDRVT14_FSDPQB_V2LP_1_func SAEDRVT14_FSDPQB_V2LP_1_inst(.QN(QN),.CK(CK),.D(D),.SI(SI),.SE(SE));
   // spec_gates_begin
   not MGM_G0(MGM_W0,D);
   not MGM_G1(MGM_W1,SE);
   and MGM_G2(MGM_W2,MGM_W1,MGM_W0);
   not MGM_G3(MGM_W3,SI);
   and MGM_G4(ENABLE_NOT_D_AND_NOT_SE_AND_NOT_SI,MGM_W3,MGM_W2);
   not MGM_G5(MGM_W4,D);
   not MGM_G6(MGM_W5,SE);
   and MGM_G7(MGM_W6,MGM_W5,MGM_W4);
   and MGM_G8(ENABLE_NOT_D_AND_NOT_SE_AND_SI,SI,MGM_W6);
   not MGM_G9(MGM_W7,D);
   and MGM_G10(MGM_W8,SE,MGM_W7);
   not MGM_G11(MGM_W9,SI);
   and MGM_G12(ENABLE_NOT_D_AND_SE_AND_NOT_SI,MGM_W9,MGM_W8);
   not MGM_G13(MGM_W10,D);
   and MGM_G14(MGM_W11,SE,MGM_W10);
   and MGM_G15(ENABLE_NOT_D_AND_SE_AND_SI,SI,MGM_W11);
   not MGM_G16(MGM_W12,SE);
   and MGM_G17(MGM_W13,MGM_W12,D);
   not MGM_G18(MGM_W14,SI);
   and MGM_G19(ENABLE_D_AND_NOT_SE_AND_NOT_SI,MGM_W14,MGM_W13);
   not MGM_G20(MGM_W15,SE);
   and MGM_G21(MGM_W16,MGM_W15,D);
   and MGM_G22(ENABLE_D_AND_NOT_SE_AND_SI,SI,MGM_W16);
   and MGM_G23(MGM_W17,SE,D);
   not MGM_G24(MGM_W18,SI);
   and MGM_G25(ENABLE_D_AND_SE_AND_NOT_SI,MGM_W18,MGM_W17);
   and MGM_G26(MGM_W19,SE,D);
   and MGM_G27(ENABLE_D_AND_SE_AND_SI,SI,MGM_W19);
   not MGM_G28(MGM_W20,SE);
   not MGM_G29(MGM_W21,SI);
   and MGM_G30(ENABLE_NOT_SE_AND_NOT_SI,MGM_W21,MGM_W20);
   not MGM_G31(MGM_W22,SE);
   and MGM_G32(ENABLE_NOT_SE_AND_SI,SI,MGM_W22);
   not MGM_G33(MGM_W23,D);
   and MGM_G34(ENABLE_NOT_D_AND_SI,SI,MGM_W23);
   not MGM_G35(MGM_W24,SI);
   and MGM_G36(ENABLE_D_AND_NOT_SI,MGM_W24,D);
   not MGM_G37(MGM_W25,D);
   and MGM_G38(ENABLE_NOT_D_AND_SE,SE,MGM_W25);
   and MGM_G39(ENABLE_D_AND_SE,SE,D);
   // spec_gates_end
   // specify_block_begin
   specify

      if(D===1'b0 && SI===1'b1)
      // seq arc CK --> QN
      (posedge CK => (QN : SE))  = (1.0,1.0);
      
      if(SE===1'b0 && SI===1'b0)
      // seq arc CK --> QN
      (posedge CK => (QN : D))  = (1.0,1.0);
      
      if(D===1'b1 && SE===1'b0 && SI===1'b1 || D===1'b0 && SE===1'b1 && SI===1'b0)
      // seq arc CK --> QN
      (posedge CK => (QN : D))  = (1.0,1.0);
      
      if(D===1'b1 && SE===1'b1)
      // seq arc CK --> QN
      (posedge CK => (QN : SI))  = (1.0,1.0);
      
      ifnone
      // seq arc CK --> QN
      (posedge CK => (QN : D))  = (1.0,1.0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      // hold D-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),
      negedge D &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold D-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),
      posedge D &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup D-HL CK-LH
      $setup(negedge D &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup D-LH CK-LH
      $setup(posedge D &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold D-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_SE_AND_SI === 1'b1),
      negedge D &&& (ENABLE_NOT_SE_AND_SI === 1'b1),1.0);
      
      // hold D-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_SE_AND_SI === 1'b1),
      posedge D &&& (ENABLE_NOT_SE_AND_SI === 1'b1),1.0);
      
      // setup D-HL CK-LH
      $setup(negedge D &&& (ENABLE_NOT_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_SE_AND_SI === 1'b1),1.0);
      
      // setup D-LH CK-LH
      $setup(posedge D &&& (ENABLE_NOT_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_SE_AND_SI === 1'b1),1.0);
      
      // hold SE-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D_AND_SI === 1'b1),
      negedge SE &&& (ENABLE_NOT_D_AND_SI === 1'b1),1.0);
      
      // hold SE-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D_AND_SI === 1'b1),
      posedge SE &&& (ENABLE_NOT_D_AND_SI === 1'b1),1.0);
      
      // setup SE-HL CK-LH
      $setup(negedge SE &&& (ENABLE_NOT_D_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_SI === 1'b1),1.0);
      
      // setup SE-LH CK-LH
      $setup(posedge SE &&& (ENABLE_NOT_D_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_SI === 1'b1),1.0);
      
      // hold SE-HL CK-LH
      $hold(posedge CK &&& (ENABLE_D_AND_NOT_SI === 1'b1),
      negedge SE &&& (ENABLE_D_AND_NOT_SI === 1'b1),1.0);
      
      // hold SE-LH CK-LH
      $hold(posedge CK &&& (ENABLE_D_AND_NOT_SI === 1'b1),
      posedge SE &&& (ENABLE_D_AND_NOT_SI === 1'b1),1.0);
      
      // setup SE-HL CK-LH
      $setup(negedge SE &&& (ENABLE_D_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_D_AND_NOT_SI === 1'b1),1.0);
      
      // setup SE-LH CK-LH
      $setup(posedge SE &&& (ENABLE_D_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_D_AND_NOT_SI === 1'b1),1.0);
      
      // hold SI-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D_AND_SE === 1'b1),
      negedge SI &&& (ENABLE_NOT_D_AND_SE === 1'b1),1.0);
      
      // hold SI-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D_AND_SE === 1'b1),
      posedge SI &&& (ENABLE_NOT_D_AND_SE === 1'b1),1.0);
      
      // setup SI-HL CK-LH
      $setup(negedge SI &&& (ENABLE_NOT_D_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_SE === 1'b1),1.0);
      
      // setup SI-LH CK-LH
      $setup(posedge SI &&& (ENABLE_NOT_D_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_SE === 1'b1),1.0);
      
      // hold SI-HL CK-LH
      $hold(posedge CK &&& (ENABLE_D_AND_SE === 1'b1),
      negedge SI &&& (ENABLE_D_AND_SE === 1'b1),1.0);
      
      // hold SI-LH CK-LH
      $hold(posedge CK &&& (ENABLE_D_AND_SE === 1'b1),
      posedge SI &&& (ENABLE_D_AND_SE === 1'b1),1.0);
      
      // setup SI-HL CK-LH
      $setup(negedge SI &&& (ENABLE_D_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_D_AND_SE === 1'b1),1.0);
      
      // setup SI-LH CK-LH
      $setup(posedge SI &&& (ENABLE_D_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_D_AND_SE === 1'b1),1.0);
      
      // mpw CK_lh 
      $width(posedge CK,1.0,0);
      
      // mpw CK_hl 
      $width(negedge CK,1.0,0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_FSDPQB_V2LP_2( QN, CK, D, SI, SE );
input CK, D, SE, SI;
output QN;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_FSDPQB_V2LP_2_func SAEDRVT14_FSDPQB_V2LP_2_behav_inst(.QN(QN),.CK(CK),.D(D),.SI(SI),.SE(SE));
`else
   SAEDRVT14_FSDPQB_V2LP_2_func SAEDRVT14_FSDPQB_V2LP_2_inst(.QN(QN),.CK(CK),.D(D),.SI(SI),.SE(SE));
   // spec_gates_begin
   not MGM_G0(MGM_W0,D);
   not MGM_G1(MGM_W1,SE);
   and MGM_G2(MGM_W2,MGM_W1,MGM_W0);
   not MGM_G3(MGM_W3,SI);
   and MGM_G4(ENABLE_NOT_D_AND_NOT_SE_AND_NOT_SI,MGM_W3,MGM_W2);
   not MGM_G5(MGM_W4,D);
   not MGM_G6(MGM_W5,SE);
   and MGM_G7(MGM_W6,MGM_W5,MGM_W4);
   and MGM_G8(ENABLE_NOT_D_AND_NOT_SE_AND_SI,SI,MGM_W6);
   not MGM_G9(MGM_W7,D);
   and MGM_G10(MGM_W8,SE,MGM_W7);
   not MGM_G11(MGM_W9,SI);
   and MGM_G12(ENABLE_NOT_D_AND_SE_AND_NOT_SI,MGM_W9,MGM_W8);
   not MGM_G13(MGM_W10,D);
   and MGM_G14(MGM_W11,SE,MGM_W10);
   and MGM_G15(ENABLE_NOT_D_AND_SE_AND_SI,SI,MGM_W11);
   not MGM_G16(MGM_W12,SE);
   and MGM_G17(MGM_W13,MGM_W12,D);
   not MGM_G18(MGM_W14,SI);
   and MGM_G19(ENABLE_D_AND_NOT_SE_AND_NOT_SI,MGM_W14,MGM_W13);
   not MGM_G20(MGM_W15,SE);
   and MGM_G21(MGM_W16,MGM_W15,D);
   and MGM_G22(ENABLE_D_AND_NOT_SE_AND_SI,SI,MGM_W16);
   and MGM_G23(MGM_W17,SE,D);
   not MGM_G24(MGM_W18,SI);
   and MGM_G25(ENABLE_D_AND_SE_AND_NOT_SI,MGM_W18,MGM_W17);
   and MGM_G26(MGM_W19,SE,D);
   and MGM_G27(ENABLE_D_AND_SE_AND_SI,SI,MGM_W19);
   not MGM_G28(MGM_W20,SE);
   not MGM_G29(MGM_W21,SI);
   and MGM_G30(ENABLE_NOT_SE_AND_NOT_SI,MGM_W21,MGM_W20);
   not MGM_G31(MGM_W22,SE);
   and MGM_G32(ENABLE_NOT_SE_AND_SI,SI,MGM_W22);
   not MGM_G33(MGM_W23,D);
   and MGM_G34(ENABLE_NOT_D_AND_SI,SI,MGM_W23);
   not MGM_G35(MGM_W24,SI);
   and MGM_G36(ENABLE_D_AND_NOT_SI,MGM_W24,D);
   not MGM_G37(MGM_W25,D);
   and MGM_G38(ENABLE_NOT_D_AND_SE,SE,MGM_W25);
   and MGM_G39(ENABLE_D_AND_SE,SE,D);
   // spec_gates_end
   // specify_block_begin
   specify

      if(D===1'b0 && SI===1'b1)
      // seq arc CK --> QN
      (posedge CK => (QN : SE))  = (1.0,1.0);
      
      if(SE===1'b0 && SI===1'b0)
      // seq arc CK --> QN
      (posedge CK => (QN : D))  = (1.0,1.0);
      
      if(D===1'b1 && SE===1'b0 && SI===1'b1 || D===1'b0 && SE===1'b1 && SI===1'b0)
      // seq arc CK --> QN
      (posedge CK => (QN : D))  = (1.0,1.0);
      
      if(D===1'b1 && SE===1'b1)
      // seq arc CK --> QN
      (posedge CK => (QN : SI))  = (1.0,1.0);
      
      ifnone
      // seq arc CK --> QN
      (posedge CK => (QN : D))  = (1.0,1.0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      // hold D-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),
      negedge D &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold D-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),
      posedge D &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup D-HL CK-LH
      $setup(negedge D &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup D-LH CK-LH
      $setup(posedge D &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold D-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_SE_AND_SI === 1'b1),
      negedge D &&& (ENABLE_NOT_SE_AND_SI === 1'b1),1.0);
      
      // hold D-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_SE_AND_SI === 1'b1),
      posedge D &&& (ENABLE_NOT_SE_AND_SI === 1'b1),1.0);
      
      // setup D-HL CK-LH
      $setup(negedge D &&& (ENABLE_NOT_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_SE_AND_SI === 1'b1),1.0);
      
      // setup D-LH CK-LH
      $setup(posedge D &&& (ENABLE_NOT_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_SE_AND_SI === 1'b1),1.0);
      
      // hold SE-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D_AND_SI === 1'b1),
      negedge SE &&& (ENABLE_NOT_D_AND_SI === 1'b1),1.0);
      
      // hold SE-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D_AND_SI === 1'b1),
      posedge SE &&& (ENABLE_NOT_D_AND_SI === 1'b1),1.0);
      
      // setup SE-HL CK-LH
      $setup(negedge SE &&& (ENABLE_NOT_D_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_SI === 1'b1),1.0);
      
      // setup SE-LH CK-LH
      $setup(posedge SE &&& (ENABLE_NOT_D_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_SI === 1'b1),1.0);
      
      // hold SE-HL CK-LH
      $hold(posedge CK &&& (ENABLE_D_AND_NOT_SI === 1'b1),
      negedge SE &&& (ENABLE_D_AND_NOT_SI === 1'b1),1.0);
      
      // hold SE-LH CK-LH
      $hold(posedge CK &&& (ENABLE_D_AND_NOT_SI === 1'b1),
      posedge SE &&& (ENABLE_D_AND_NOT_SI === 1'b1),1.0);
      
      // setup SE-HL CK-LH
      $setup(negedge SE &&& (ENABLE_D_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_D_AND_NOT_SI === 1'b1),1.0);
      
      // setup SE-LH CK-LH
      $setup(posedge SE &&& (ENABLE_D_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_D_AND_NOT_SI === 1'b1),1.0);
      
      // hold SI-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D_AND_SE === 1'b1),
      negedge SI &&& (ENABLE_NOT_D_AND_SE === 1'b1),1.0);
      
      // hold SI-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D_AND_SE === 1'b1),
      posedge SI &&& (ENABLE_NOT_D_AND_SE === 1'b1),1.0);
      
      // setup SI-HL CK-LH
      $setup(negedge SI &&& (ENABLE_NOT_D_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_SE === 1'b1),1.0);
      
      // setup SI-LH CK-LH
      $setup(posedge SI &&& (ENABLE_NOT_D_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_SE === 1'b1),1.0);
      
      // hold SI-HL CK-LH
      $hold(posedge CK &&& (ENABLE_D_AND_SE === 1'b1),
      negedge SI &&& (ENABLE_D_AND_SE === 1'b1),1.0);
      
      // hold SI-LH CK-LH
      $hold(posedge CK &&& (ENABLE_D_AND_SE === 1'b1),
      posedge SI &&& (ENABLE_D_AND_SE === 1'b1),1.0);
      
      // setup SI-HL CK-LH
      $setup(negedge SI &&& (ENABLE_D_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_D_AND_SE === 1'b1),1.0);
      
      // setup SI-LH CK-LH
      $setup(posedge SI &&& (ENABLE_D_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_D_AND_SE === 1'b1),1.0);
      
      // mpw CK_lh 
      $width(posedge CK,1.0,0);
      
      // mpw CK_hl 
      $width(negedge CK,1.0,0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_FSDPQB_V2_0P5( QN, CK, D, SI, SE );
input CK, D, SE, SI;
output QN;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_FSDPQB_V2_0P5_func SAEDRVT14_FSDPQB_V2_0P5_behav_inst(.QN(QN),.CK(CK),.D(D),.SI(SI),.SE(SE));
`else
   SAEDRVT14_FSDPQB_V2_0P5_func SAEDRVT14_FSDPQB_V2_0P5_inst(.QN(QN),.CK(CK),.D(D),.SI(SI),.SE(SE));
   // spec_gates_begin
   not MGM_G0(MGM_W0,D);
   not MGM_G1(MGM_W1,SE);
   and MGM_G2(MGM_W2,MGM_W1,MGM_W0);
   not MGM_G3(MGM_W3,SI);
   and MGM_G4(ENABLE_NOT_D_AND_NOT_SE_AND_NOT_SI,MGM_W3,MGM_W2);
   not MGM_G5(MGM_W4,D);
   not MGM_G6(MGM_W5,SE);
   and MGM_G7(MGM_W6,MGM_W5,MGM_W4);
   and MGM_G8(ENABLE_NOT_D_AND_NOT_SE_AND_SI,SI,MGM_W6);
   not MGM_G9(MGM_W7,D);
   and MGM_G10(MGM_W8,SE,MGM_W7);
   not MGM_G11(MGM_W9,SI);
   and MGM_G12(ENABLE_NOT_D_AND_SE_AND_NOT_SI,MGM_W9,MGM_W8);
   not MGM_G13(MGM_W10,D);
   and MGM_G14(MGM_W11,SE,MGM_W10);
   and MGM_G15(ENABLE_NOT_D_AND_SE_AND_SI,SI,MGM_W11);
   not MGM_G16(MGM_W12,SE);
   and MGM_G17(MGM_W13,MGM_W12,D);
   not MGM_G18(MGM_W14,SI);
   and MGM_G19(ENABLE_D_AND_NOT_SE_AND_NOT_SI,MGM_W14,MGM_W13);
   not MGM_G20(MGM_W15,SE);
   and MGM_G21(MGM_W16,MGM_W15,D);
   and MGM_G22(ENABLE_D_AND_NOT_SE_AND_SI,SI,MGM_W16);
   and MGM_G23(MGM_W17,SE,D);
   not MGM_G24(MGM_W18,SI);
   and MGM_G25(ENABLE_D_AND_SE_AND_NOT_SI,MGM_W18,MGM_W17);
   and MGM_G26(MGM_W19,SE,D);
   and MGM_G27(ENABLE_D_AND_SE_AND_SI,SI,MGM_W19);
   not MGM_G28(MGM_W20,SE);
   not MGM_G29(MGM_W21,SI);
   and MGM_G30(ENABLE_NOT_SE_AND_NOT_SI,MGM_W21,MGM_W20);
   not MGM_G31(MGM_W22,SE);
   and MGM_G32(ENABLE_NOT_SE_AND_SI,SI,MGM_W22);
   not MGM_G33(MGM_W23,D);
   and MGM_G34(ENABLE_NOT_D_AND_SI,SI,MGM_W23);
   not MGM_G35(MGM_W24,SI);
   and MGM_G36(ENABLE_D_AND_NOT_SI,MGM_W24,D);
   not MGM_G37(MGM_W25,D);
   and MGM_G38(ENABLE_NOT_D_AND_SE,SE,MGM_W25);
   and MGM_G39(ENABLE_D_AND_SE,SE,D);
   // spec_gates_end
   // specify_block_begin
   specify

      if(D===1'b0 && SI===1'b1)
      // seq arc CK --> QN
      (posedge CK => (QN : SE))  = (1.0,1.0);
      
      if(SE===1'b0 && SI===1'b0)
      // seq arc CK --> QN
      (posedge CK => (QN : D))  = (1.0,1.0);
      
      if(D===1'b1 && SE===1'b0 && SI===1'b1 || D===1'b0 && SE===1'b1 && SI===1'b0)
      // seq arc CK --> QN
      (posedge CK => (QN : D))  = (1.0,1.0);
      
      if(D===1'b1 && SE===1'b1)
      // seq arc CK --> QN
      (posedge CK => (QN : SI))  = (1.0,1.0);
      
      ifnone
      // seq arc CK --> QN
      (posedge CK => (QN : D))  = (1.0,1.0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      // hold D-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),
      negedge D &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold D-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),
      posedge D &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup D-HL CK-LH
      $setup(negedge D &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup D-LH CK-LH
      $setup(posedge D &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold D-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_SE_AND_SI === 1'b1),
      negedge D &&& (ENABLE_NOT_SE_AND_SI === 1'b1),1.0);
      
      // hold D-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_SE_AND_SI === 1'b1),
      posedge D &&& (ENABLE_NOT_SE_AND_SI === 1'b1),1.0);
      
      // setup D-HL CK-LH
      $setup(negedge D &&& (ENABLE_NOT_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_SE_AND_SI === 1'b1),1.0);
      
      // setup D-LH CK-LH
      $setup(posedge D &&& (ENABLE_NOT_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_SE_AND_SI === 1'b1),1.0);
      
      // hold SE-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D_AND_SI === 1'b1),
      negedge SE &&& (ENABLE_NOT_D_AND_SI === 1'b1),1.0);
      
      // hold SE-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D_AND_SI === 1'b1),
      posedge SE &&& (ENABLE_NOT_D_AND_SI === 1'b1),1.0);
      
      // setup SE-HL CK-LH
      $setup(negedge SE &&& (ENABLE_NOT_D_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_SI === 1'b1),1.0);
      
      // setup SE-LH CK-LH
      $setup(posedge SE &&& (ENABLE_NOT_D_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_SI === 1'b1),1.0);
      
      // hold SE-HL CK-LH
      $hold(posedge CK &&& (ENABLE_D_AND_NOT_SI === 1'b1),
      negedge SE &&& (ENABLE_D_AND_NOT_SI === 1'b1),1.0);
      
      // hold SE-LH CK-LH
      $hold(posedge CK &&& (ENABLE_D_AND_NOT_SI === 1'b1),
      posedge SE &&& (ENABLE_D_AND_NOT_SI === 1'b1),1.0);
      
      // setup SE-HL CK-LH
      $setup(negedge SE &&& (ENABLE_D_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_D_AND_NOT_SI === 1'b1),1.0);
      
      // setup SE-LH CK-LH
      $setup(posedge SE &&& (ENABLE_D_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_D_AND_NOT_SI === 1'b1),1.0);
      
      // hold SI-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D_AND_SE === 1'b1),
      negedge SI &&& (ENABLE_NOT_D_AND_SE === 1'b1),1.0);
      
      // hold SI-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D_AND_SE === 1'b1),
      posedge SI &&& (ENABLE_NOT_D_AND_SE === 1'b1),1.0);
      
      // setup SI-HL CK-LH
      $setup(negedge SI &&& (ENABLE_NOT_D_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_SE === 1'b1),1.0);
      
      // setup SI-LH CK-LH
      $setup(posedge SI &&& (ENABLE_NOT_D_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_SE === 1'b1),1.0);
      
      // hold SI-HL CK-LH
      $hold(posedge CK &&& (ENABLE_D_AND_SE === 1'b1),
      negedge SI &&& (ENABLE_D_AND_SE === 1'b1),1.0);
      
      // hold SI-LH CK-LH
      $hold(posedge CK &&& (ENABLE_D_AND_SE === 1'b1),
      posedge SI &&& (ENABLE_D_AND_SE === 1'b1),1.0);
      
      // setup SI-HL CK-LH
      $setup(negedge SI &&& (ENABLE_D_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_D_AND_SE === 1'b1),1.0);
      
      // setup SI-LH CK-LH
      $setup(posedge SI &&& (ENABLE_D_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_D_AND_SE === 1'b1),1.0);
      
      // mpw CK_lh 
      $width(posedge CK,1.0,0);
      
      // mpw CK_hl 
      $width(negedge CK,1.0,0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_FSDPQB_V2_1( QN, CK, D, SI, SE );
input CK, D, SE, SI;
output QN;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_FSDPQB_V2_1_func SAEDRVT14_FSDPQB_V2_1_behav_inst(.QN(QN),.CK(CK),.D(D),.SI(SI),.SE(SE));
`else
   SAEDRVT14_FSDPQB_V2_1_func SAEDRVT14_FSDPQB_V2_1_inst(.QN(QN),.CK(CK),.D(D),.SI(SI),.SE(SE));
   // spec_gates_begin
   not MGM_G0(MGM_W0,D);
   not MGM_G1(MGM_W1,SE);
   and MGM_G2(MGM_W2,MGM_W1,MGM_W0);
   not MGM_G3(MGM_W3,SI);
   and MGM_G4(ENABLE_NOT_D_AND_NOT_SE_AND_NOT_SI,MGM_W3,MGM_W2);
   not MGM_G5(MGM_W4,D);
   not MGM_G6(MGM_W5,SE);
   and MGM_G7(MGM_W6,MGM_W5,MGM_W4);
   and MGM_G8(ENABLE_NOT_D_AND_NOT_SE_AND_SI,SI,MGM_W6);
   not MGM_G9(MGM_W7,D);
   and MGM_G10(MGM_W8,SE,MGM_W7);
   not MGM_G11(MGM_W9,SI);
   and MGM_G12(ENABLE_NOT_D_AND_SE_AND_NOT_SI,MGM_W9,MGM_W8);
   not MGM_G13(MGM_W10,D);
   and MGM_G14(MGM_W11,SE,MGM_W10);
   and MGM_G15(ENABLE_NOT_D_AND_SE_AND_SI,SI,MGM_W11);
   not MGM_G16(MGM_W12,SE);
   and MGM_G17(MGM_W13,MGM_W12,D);
   not MGM_G18(MGM_W14,SI);
   and MGM_G19(ENABLE_D_AND_NOT_SE_AND_NOT_SI,MGM_W14,MGM_W13);
   not MGM_G20(MGM_W15,SE);
   and MGM_G21(MGM_W16,MGM_W15,D);
   and MGM_G22(ENABLE_D_AND_NOT_SE_AND_SI,SI,MGM_W16);
   and MGM_G23(MGM_W17,SE,D);
   not MGM_G24(MGM_W18,SI);
   and MGM_G25(ENABLE_D_AND_SE_AND_NOT_SI,MGM_W18,MGM_W17);
   and MGM_G26(MGM_W19,SE,D);
   and MGM_G27(ENABLE_D_AND_SE_AND_SI,SI,MGM_W19);
   not MGM_G28(MGM_W20,SE);
   not MGM_G29(MGM_W21,SI);
   and MGM_G30(ENABLE_NOT_SE_AND_NOT_SI,MGM_W21,MGM_W20);
   not MGM_G31(MGM_W22,SE);
   and MGM_G32(ENABLE_NOT_SE_AND_SI,SI,MGM_W22);
   not MGM_G33(MGM_W23,D);
   and MGM_G34(ENABLE_NOT_D_AND_SI,SI,MGM_W23);
   not MGM_G35(MGM_W24,SI);
   and MGM_G36(ENABLE_D_AND_NOT_SI,MGM_W24,D);
   not MGM_G37(MGM_W25,D);
   and MGM_G38(ENABLE_NOT_D_AND_SE,SE,MGM_W25);
   and MGM_G39(ENABLE_D_AND_SE,SE,D);
   // spec_gates_end
   // specify_block_begin
   specify

      if(D===1'b0 && SI===1'b1)
      // seq arc CK --> QN
      (posedge CK => (QN : SE))  = (1.0,1.0);
      
      if(SE===1'b0 && SI===1'b0)
      // seq arc CK --> QN
      (posedge CK => (QN : D))  = (1.0,1.0);
      
      if(D===1'b1 && SE===1'b0 && SI===1'b1 || D===1'b0 && SE===1'b1 && SI===1'b0)
      // seq arc CK --> QN
      (posedge CK => (QN : D))  = (1.0,1.0);
      
      if(D===1'b1 && SE===1'b1)
      // seq arc CK --> QN
      (posedge CK => (QN : SI))  = (1.0,1.0);
      
      ifnone
      // seq arc CK --> QN
      (posedge CK => (QN : D))  = (1.0,1.0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      // hold D-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),
      negedge D &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold D-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),
      posedge D &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup D-HL CK-LH
      $setup(negedge D &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup D-LH CK-LH
      $setup(posedge D &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold D-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_SE_AND_SI === 1'b1),
      negedge D &&& (ENABLE_NOT_SE_AND_SI === 1'b1),1.0);
      
      // hold D-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_SE_AND_SI === 1'b1),
      posedge D &&& (ENABLE_NOT_SE_AND_SI === 1'b1),1.0);
      
      // setup D-HL CK-LH
      $setup(negedge D &&& (ENABLE_NOT_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_SE_AND_SI === 1'b1),1.0);
      
      // setup D-LH CK-LH
      $setup(posedge D &&& (ENABLE_NOT_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_SE_AND_SI === 1'b1),1.0);
      
      // hold SE-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D_AND_SI === 1'b1),
      negedge SE &&& (ENABLE_NOT_D_AND_SI === 1'b1),1.0);
      
      // hold SE-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D_AND_SI === 1'b1),
      posedge SE &&& (ENABLE_NOT_D_AND_SI === 1'b1),1.0);
      
      // setup SE-HL CK-LH
      $setup(negedge SE &&& (ENABLE_NOT_D_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_SI === 1'b1),1.0);
      
      // setup SE-LH CK-LH
      $setup(posedge SE &&& (ENABLE_NOT_D_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_SI === 1'b1),1.0);
      
      // hold SE-HL CK-LH
      $hold(posedge CK &&& (ENABLE_D_AND_NOT_SI === 1'b1),
      negedge SE &&& (ENABLE_D_AND_NOT_SI === 1'b1),1.0);
      
      // hold SE-LH CK-LH
      $hold(posedge CK &&& (ENABLE_D_AND_NOT_SI === 1'b1),
      posedge SE &&& (ENABLE_D_AND_NOT_SI === 1'b1),1.0);
      
      // setup SE-HL CK-LH
      $setup(negedge SE &&& (ENABLE_D_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_D_AND_NOT_SI === 1'b1),1.0);
      
      // setup SE-LH CK-LH
      $setup(posedge SE &&& (ENABLE_D_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_D_AND_NOT_SI === 1'b1),1.0);
      
      // hold SI-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D_AND_SE === 1'b1),
      negedge SI &&& (ENABLE_NOT_D_AND_SE === 1'b1),1.0);
      
      // hold SI-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D_AND_SE === 1'b1),
      posedge SI &&& (ENABLE_NOT_D_AND_SE === 1'b1),1.0);
      
      // setup SI-HL CK-LH
      $setup(negedge SI &&& (ENABLE_NOT_D_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_SE === 1'b1),1.0);
      
      // setup SI-LH CK-LH
      $setup(posedge SI &&& (ENABLE_NOT_D_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_SE === 1'b1),1.0);
      
      // hold SI-HL CK-LH
      $hold(posedge CK &&& (ENABLE_D_AND_SE === 1'b1),
      negedge SI &&& (ENABLE_D_AND_SE === 1'b1),1.0);
      
      // hold SI-LH CK-LH
      $hold(posedge CK &&& (ENABLE_D_AND_SE === 1'b1),
      posedge SI &&& (ENABLE_D_AND_SE === 1'b1),1.0);
      
      // setup SI-HL CK-LH
      $setup(negedge SI &&& (ENABLE_D_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_D_AND_SE === 1'b1),1.0);
      
      // setup SI-LH CK-LH
      $setup(posedge SI &&& (ENABLE_D_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_D_AND_SE === 1'b1),1.0);
      
      // mpw CK_lh 
      $width(posedge CK,1.0,0);
      
      // mpw CK_hl 
      $width(negedge CK,1.0,0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_FSDPQB_V2_2( QN, CK, D, SI, SE );
input CK, D, SE, SI;
output QN;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_FSDPQB_V2_2_func SAEDRVT14_FSDPQB_V2_2_behav_inst(.QN(QN),.CK(CK),.D(D),.SI(SI),.SE(SE));
`else
   SAEDRVT14_FSDPQB_V2_2_func SAEDRVT14_FSDPQB_V2_2_inst(.QN(QN),.CK(CK),.D(D),.SI(SI),.SE(SE));
   // spec_gates_begin
   not MGM_G0(MGM_W0,D);
   not MGM_G1(MGM_W1,SE);
   and MGM_G2(MGM_W2,MGM_W1,MGM_W0);
   not MGM_G3(MGM_W3,SI);
   and MGM_G4(ENABLE_NOT_D_AND_NOT_SE_AND_NOT_SI,MGM_W3,MGM_W2);
   not MGM_G5(MGM_W4,D);
   not MGM_G6(MGM_W5,SE);
   and MGM_G7(MGM_W6,MGM_W5,MGM_W4);
   and MGM_G8(ENABLE_NOT_D_AND_NOT_SE_AND_SI,SI,MGM_W6);
   not MGM_G9(MGM_W7,D);
   and MGM_G10(MGM_W8,SE,MGM_W7);
   not MGM_G11(MGM_W9,SI);
   and MGM_G12(ENABLE_NOT_D_AND_SE_AND_NOT_SI,MGM_W9,MGM_W8);
   not MGM_G13(MGM_W10,D);
   and MGM_G14(MGM_W11,SE,MGM_W10);
   and MGM_G15(ENABLE_NOT_D_AND_SE_AND_SI,SI,MGM_W11);
   not MGM_G16(MGM_W12,SE);
   and MGM_G17(MGM_W13,MGM_W12,D);
   not MGM_G18(MGM_W14,SI);
   and MGM_G19(ENABLE_D_AND_NOT_SE_AND_NOT_SI,MGM_W14,MGM_W13);
   not MGM_G20(MGM_W15,SE);
   and MGM_G21(MGM_W16,MGM_W15,D);
   and MGM_G22(ENABLE_D_AND_NOT_SE_AND_SI,SI,MGM_W16);
   and MGM_G23(MGM_W17,SE,D);
   not MGM_G24(MGM_W18,SI);
   and MGM_G25(ENABLE_D_AND_SE_AND_NOT_SI,MGM_W18,MGM_W17);
   and MGM_G26(MGM_W19,SE,D);
   and MGM_G27(ENABLE_D_AND_SE_AND_SI,SI,MGM_W19);
   not MGM_G28(MGM_W20,SE);
   not MGM_G29(MGM_W21,SI);
   and MGM_G30(ENABLE_NOT_SE_AND_NOT_SI,MGM_W21,MGM_W20);
   not MGM_G31(MGM_W22,SE);
   and MGM_G32(ENABLE_NOT_SE_AND_SI,SI,MGM_W22);
   not MGM_G33(MGM_W23,D);
   and MGM_G34(ENABLE_NOT_D_AND_SI,SI,MGM_W23);
   not MGM_G35(MGM_W24,SI);
   and MGM_G36(ENABLE_D_AND_NOT_SI,MGM_W24,D);
   not MGM_G37(MGM_W25,D);
   and MGM_G38(ENABLE_NOT_D_AND_SE,SE,MGM_W25);
   and MGM_G39(ENABLE_D_AND_SE,SE,D);
   // spec_gates_end
   // specify_block_begin
   specify

      if(D===1'b0 && SI===1'b1)
      // seq arc CK --> QN
      (posedge CK => (QN : SE))  = (1.0,1.0);
      
      if(SE===1'b0 && SI===1'b0)
      // seq arc CK --> QN
      (posedge CK => (QN : D))  = (1.0,1.0);
      
      if(D===1'b1 && SE===1'b0 && SI===1'b1 || D===1'b0 && SE===1'b1 && SI===1'b0)
      // seq arc CK --> QN
      (posedge CK => (QN : D))  = (1.0,1.0);
      
      if(D===1'b1 && SE===1'b1)
      // seq arc CK --> QN
      (posedge CK => (QN : SI))  = (1.0,1.0);
      
      ifnone
      // seq arc CK --> QN
      (posedge CK => (QN : D))  = (1.0,1.0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      // hold D-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),
      negedge D &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold D-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),
      posedge D &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup D-HL CK-LH
      $setup(negedge D &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup D-LH CK-LH
      $setup(posedge D &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold D-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_SE_AND_SI === 1'b1),
      negedge D &&& (ENABLE_NOT_SE_AND_SI === 1'b1),1.0);
      
      // hold D-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_SE_AND_SI === 1'b1),
      posedge D &&& (ENABLE_NOT_SE_AND_SI === 1'b1),1.0);
      
      // setup D-HL CK-LH
      $setup(negedge D &&& (ENABLE_NOT_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_SE_AND_SI === 1'b1),1.0);
      
      // setup D-LH CK-LH
      $setup(posedge D &&& (ENABLE_NOT_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_SE_AND_SI === 1'b1),1.0);
      
      // hold SE-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D_AND_SI === 1'b1),
      negedge SE &&& (ENABLE_NOT_D_AND_SI === 1'b1),1.0);
      
      // hold SE-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D_AND_SI === 1'b1),
      posedge SE &&& (ENABLE_NOT_D_AND_SI === 1'b1),1.0);
      
      // setup SE-HL CK-LH
      $setup(negedge SE &&& (ENABLE_NOT_D_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_SI === 1'b1),1.0);
      
      // setup SE-LH CK-LH
      $setup(posedge SE &&& (ENABLE_NOT_D_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_SI === 1'b1),1.0);
      
      // hold SE-HL CK-LH
      $hold(posedge CK &&& (ENABLE_D_AND_NOT_SI === 1'b1),
      negedge SE &&& (ENABLE_D_AND_NOT_SI === 1'b1),1.0);
      
      // hold SE-LH CK-LH
      $hold(posedge CK &&& (ENABLE_D_AND_NOT_SI === 1'b1),
      posedge SE &&& (ENABLE_D_AND_NOT_SI === 1'b1),1.0);
      
      // setup SE-HL CK-LH
      $setup(negedge SE &&& (ENABLE_D_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_D_AND_NOT_SI === 1'b1),1.0);
      
      // setup SE-LH CK-LH
      $setup(posedge SE &&& (ENABLE_D_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_D_AND_NOT_SI === 1'b1),1.0);
      
      // hold SI-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D_AND_SE === 1'b1),
      negedge SI &&& (ENABLE_NOT_D_AND_SE === 1'b1),1.0);
      
      // hold SI-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D_AND_SE === 1'b1),
      posedge SI &&& (ENABLE_NOT_D_AND_SE === 1'b1),1.0);
      
      // setup SI-HL CK-LH
      $setup(negedge SI &&& (ENABLE_NOT_D_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_SE === 1'b1),1.0);
      
      // setup SI-LH CK-LH
      $setup(posedge SI &&& (ENABLE_NOT_D_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_SE === 1'b1),1.0);
      
      // hold SI-HL CK-LH
      $hold(posedge CK &&& (ENABLE_D_AND_SE === 1'b1),
      negedge SI &&& (ENABLE_D_AND_SE === 1'b1),1.0);
      
      // hold SI-LH CK-LH
      $hold(posedge CK &&& (ENABLE_D_AND_SE === 1'b1),
      posedge SI &&& (ENABLE_D_AND_SE === 1'b1),1.0);
      
      // setup SI-HL CK-LH
      $setup(negedge SI &&& (ENABLE_D_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_D_AND_SE === 1'b1),1.0);
      
      // setup SI-LH CK-LH
      $setup(posedge SI &&& (ENABLE_D_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_D_AND_SE === 1'b1),1.0);
      
      // mpw CK_lh 
      $width(posedge CK,1.0,0);
      
      // mpw CK_hl 
      $width(negedge CK,1.0,0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_FSDPQB_V2_4( QN, CK, D, SI, SE );
input CK, D, SE, SI;
output QN;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_FSDPQB_V2_4_func SAEDRVT14_FSDPQB_V2_4_behav_inst(.QN(QN),.CK(CK),.D(D),.SI(SI),.SE(SE));
`else
   SAEDRVT14_FSDPQB_V2_4_func SAEDRVT14_FSDPQB_V2_4_inst(.QN(QN),.CK(CK),.D(D),.SI(SI),.SE(SE));
   // spec_gates_begin
   not MGM_G0(MGM_W0,D);
   not MGM_G1(MGM_W1,SE);
   and MGM_G2(MGM_W2,MGM_W1,MGM_W0);
   not MGM_G3(MGM_W3,SI);
   and MGM_G4(ENABLE_NOT_D_AND_NOT_SE_AND_NOT_SI,MGM_W3,MGM_W2);
   not MGM_G5(MGM_W4,D);
   not MGM_G6(MGM_W5,SE);
   and MGM_G7(MGM_W6,MGM_W5,MGM_W4);
   and MGM_G8(ENABLE_NOT_D_AND_NOT_SE_AND_SI,SI,MGM_W6);
   not MGM_G9(MGM_W7,D);
   and MGM_G10(MGM_W8,SE,MGM_W7);
   not MGM_G11(MGM_W9,SI);
   and MGM_G12(ENABLE_NOT_D_AND_SE_AND_NOT_SI,MGM_W9,MGM_W8);
   not MGM_G13(MGM_W10,D);
   and MGM_G14(MGM_W11,SE,MGM_W10);
   and MGM_G15(ENABLE_NOT_D_AND_SE_AND_SI,SI,MGM_W11);
   not MGM_G16(MGM_W12,SE);
   and MGM_G17(MGM_W13,MGM_W12,D);
   not MGM_G18(MGM_W14,SI);
   and MGM_G19(ENABLE_D_AND_NOT_SE_AND_NOT_SI,MGM_W14,MGM_W13);
   not MGM_G20(MGM_W15,SE);
   and MGM_G21(MGM_W16,MGM_W15,D);
   and MGM_G22(ENABLE_D_AND_NOT_SE_AND_SI,SI,MGM_W16);
   and MGM_G23(MGM_W17,SE,D);
   not MGM_G24(MGM_W18,SI);
   and MGM_G25(ENABLE_D_AND_SE_AND_NOT_SI,MGM_W18,MGM_W17);
   and MGM_G26(MGM_W19,SE,D);
   and MGM_G27(ENABLE_D_AND_SE_AND_SI,SI,MGM_W19);
   not MGM_G28(MGM_W20,SE);
   not MGM_G29(MGM_W21,SI);
   and MGM_G30(ENABLE_NOT_SE_AND_NOT_SI,MGM_W21,MGM_W20);
   not MGM_G31(MGM_W22,SE);
   and MGM_G32(ENABLE_NOT_SE_AND_SI,SI,MGM_W22);
   not MGM_G33(MGM_W23,D);
   and MGM_G34(ENABLE_NOT_D_AND_SI,SI,MGM_W23);
   not MGM_G35(MGM_W24,SI);
   and MGM_G36(ENABLE_D_AND_NOT_SI,MGM_W24,D);
   not MGM_G37(MGM_W25,D);
   and MGM_G38(ENABLE_NOT_D_AND_SE,SE,MGM_W25);
   and MGM_G39(ENABLE_D_AND_SE,SE,D);
   // spec_gates_end
   // specify_block_begin
   specify

      if(D===1'b0 && SI===1'b1)
      // seq arc CK --> QN
      (posedge CK => (QN : SE))  = (1.0,1.0);
      
      if(SE===1'b0 && SI===1'b0)
      // seq arc CK --> QN
      (posedge CK => (QN : D))  = (1.0,1.0);
      
      if(D===1'b1 && SE===1'b0 && SI===1'b1 || D===1'b0 && SE===1'b1 && SI===1'b0)
      // seq arc CK --> QN
      (posedge CK => (QN : D))  = (1.0,1.0);
      
      if(D===1'b1 && SE===1'b1)
      // seq arc CK --> QN
      (posedge CK => (QN : SI))  = (1.0,1.0);
      
      ifnone
      // seq arc CK --> QN
      (posedge CK => (QN : D))  = (1.0,1.0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      // hold D-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),
      negedge D &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold D-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),
      posedge D &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup D-HL CK-LH
      $setup(negedge D &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup D-LH CK-LH
      $setup(posedge D &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold D-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_SE_AND_SI === 1'b1),
      negedge D &&& (ENABLE_NOT_SE_AND_SI === 1'b1),1.0);
      
      // hold D-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_SE_AND_SI === 1'b1),
      posedge D &&& (ENABLE_NOT_SE_AND_SI === 1'b1),1.0);
      
      // setup D-HL CK-LH
      $setup(negedge D &&& (ENABLE_NOT_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_SE_AND_SI === 1'b1),1.0);
      
      // setup D-LH CK-LH
      $setup(posedge D &&& (ENABLE_NOT_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_SE_AND_SI === 1'b1),1.0);
      
      // hold SE-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D_AND_SI === 1'b1),
      negedge SE &&& (ENABLE_NOT_D_AND_SI === 1'b1),1.0);
      
      // hold SE-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D_AND_SI === 1'b1),
      posedge SE &&& (ENABLE_NOT_D_AND_SI === 1'b1),1.0);
      
      // setup SE-HL CK-LH
      $setup(negedge SE &&& (ENABLE_NOT_D_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_SI === 1'b1),1.0);
      
      // setup SE-LH CK-LH
      $setup(posedge SE &&& (ENABLE_NOT_D_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_SI === 1'b1),1.0);
      
      // hold SE-HL CK-LH
      $hold(posedge CK &&& (ENABLE_D_AND_NOT_SI === 1'b1),
      negedge SE &&& (ENABLE_D_AND_NOT_SI === 1'b1),1.0);
      
      // hold SE-LH CK-LH
      $hold(posedge CK &&& (ENABLE_D_AND_NOT_SI === 1'b1),
      posedge SE &&& (ENABLE_D_AND_NOT_SI === 1'b1),1.0);
      
      // setup SE-HL CK-LH
      $setup(negedge SE &&& (ENABLE_D_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_D_AND_NOT_SI === 1'b1),1.0);
      
      // setup SE-LH CK-LH
      $setup(posedge SE &&& (ENABLE_D_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_D_AND_NOT_SI === 1'b1),1.0);
      
      // hold SI-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D_AND_SE === 1'b1),
      negedge SI &&& (ENABLE_NOT_D_AND_SE === 1'b1),1.0);
      
      // hold SI-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D_AND_SE === 1'b1),
      posedge SI &&& (ENABLE_NOT_D_AND_SE === 1'b1),1.0);
      
      // setup SI-HL CK-LH
      $setup(negedge SI &&& (ENABLE_NOT_D_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_SE === 1'b1),1.0);
      
      // setup SI-LH CK-LH
      $setup(posedge SI &&& (ENABLE_NOT_D_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_SE === 1'b1),1.0);
      
      // hold SI-HL CK-LH
      $hold(posedge CK &&& (ENABLE_D_AND_SE === 1'b1),
      negedge SI &&& (ENABLE_D_AND_SE === 1'b1),1.0);
      
      // hold SI-LH CK-LH
      $hold(posedge CK &&& (ENABLE_D_AND_SE === 1'b1),
      posedge SI &&& (ENABLE_D_AND_SE === 1'b1),1.0);
      
      // setup SI-HL CK-LH
      $setup(negedge SI &&& (ENABLE_D_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_D_AND_SE === 1'b1),1.0);
      
      // setup SI-LH CK-LH
      $setup(posedge SI &&& (ENABLE_D_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_D_AND_SE === 1'b1),1.0);
      
      // mpw CK_lh 
      $width(posedge CK,1.0,0);
      
      // mpw CK_hl 
      $width(negedge CK,1.0,0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_FSDPQB_V2_8( QN, CK, D, SI, SE );
input CK, D, SE, SI;
output QN;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_FSDPQB_V2_8_func SAEDRVT14_FSDPQB_V2_8_behav_inst(.QN(QN),.CK(CK),.D(D),.SI(SI),.SE(SE));
`else
   SAEDRVT14_FSDPQB_V2_8_func SAEDRVT14_FSDPQB_V2_8_inst(.QN(QN),.CK(CK),.D(D),.SI(SI),.SE(SE));
   // spec_gates_begin
   not MGM_G0(MGM_W0,D);
   not MGM_G1(MGM_W1,SE);
   and MGM_G2(MGM_W2,MGM_W1,MGM_W0);
   not MGM_G3(MGM_W3,SI);
   and MGM_G4(ENABLE_NOT_D_AND_NOT_SE_AND_NOT_SI,MGM_W3,MGM_W2);
   not MGM_G5(MGM_W4,D);
   not MGM_G6(MGM_W5,SE);
   and MGM_G7(MGM_W6,MGM_W5,MGM_W4);
   and MGM_G8(ENABLE_NOT_D_AND_NOT_SE_AND_SI,SI,MGM_W6);
   not MGM_G9(MGM_W7,D);
   and MGM_G10(MGM_W8,SE,MGM_W7);
   not MGM_G11(MGM_W9,SI);
   and MGM_G12(ENABLE_NOT_D_AND_SE_AND_NOT_SI,MGM_W9,MGM_W8);
   not MGM_G13(MGM_W10,D);
   and MGM_G14(MGM_W11,SE,MGM_W10);
   and MGM_G15(ENABLE_NOT_D_AND_SE_AND_SI,SI,MGM_W11);
   not MGM_G16(MGM_W12,SE);
   and MGM_G17(MGM_W13,MGM_W12,D);
   not MGM_G18(MGM_W14,SI);
   and MGM_G19(ENABLE_D_AND_NOT_SE_AND_NOT_SI,MGM_W14,MGM_W13);
   not MGM_G20(MGM_W15,SE);
   and MGM_G21(MGM_W16,MGM_W15,D);
   and MGM_G22(ENABLE_D_AND_NOT_SE_AND_SI,SI,MGM_W16);
   and MGM_G23(MGM_W17,SE,D);
   not MGM_G24(MGM_W18,SI);
   and MGM_G25(ENABLE_D_AND_SE_AND_NOT_SI,MGM_W18,MGM_W17);
   and MGM_G26(MGM_W19,SE,D);
   and MGM_G27(ENABLE_D_AND_SE_AND_SI,SI,MGM_W19);
   not MGM_G28(MGM_W20,SE);
   not MGM_G29(MGM_W21,SI);
   and MGM_G30(ENABLE_NOT_SE_AND_NOT_SI,MGM_W21,MGM_W20);
   not MGM_G31(MGM_W22,SE);
   and MGM_G32(ENABLE_NOT_SE_AND_SI,SI,MGM_W22);
   not MGM_G33(MGM_W23,D);
   and MGM_G34(ENABLE_NOT_D_AND_SI,SI,MGM_W23);
   not MGM_G35(MGM_W24,SI);
   and MGM_G36(ENABLE_D_AND_NOT_SI,MGM_W24,D);
   not MGM_G37(MGM_W25,D);
   and MGM_G38(ENABLE_NOT_D_AND_SE,SE,MGM_W25);
   and MGM_G39(ENABLE_D_AND_SE,SE,D);
   // spec_gates_end
   // specify_block_begin
   specify

      if(D===1'b0 && SI===1'b1)
      // seq arc CK --> QN
      (posedge CK => (QN : SE))  = (1.0,1.0);
      
      if(SE===1'b0 && SI===1'b0)
      // seq arc CK --> QN
      (posedge CK => (QN : D))  = (1.0,1.0);
      
      if(D===1'b1 && SE===1'b0 && SI===1'b1 || D===1'b0 && SE===1'b1 && SI===1'b0)
      // seq arc CK --> QN
      (posedge CK => (QN : D))  = (1.0,1.0);
      
      if(D===1'b1 && SE===1'b1)
      // seq arc CK --> QN
      (posedge CK => (QN : SI))  = (1.0,1.0);
      
      ifnone
      // seq arc CK --> QN
      (posedge CK => (QN : D))  = (1.0,1.0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      // hold D-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),
      negedge D &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold D-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),
      posedge D &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup D-HL CK-LH
      $setup(negedge D &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup D-LH CK-LH
      $setup(posedge D &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold D-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_SE_AND_SI === 1'b1),
      negedge D &&& (ENABLE_NOT_SE_AND_SI === 1'b1),1.0);
      
      // hold D-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_SE_AND_SI === 1'b1),
      posedge D &&& (ENABLE_NOT_SE_AND_SI === 1'b1),1.0);
      
      // setup D-HL CK-LH
      $setup(negedge D &&& (ENABLE_NOT_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_SE_AND_SI === 1'b1),1.0);
      
      // setup D-LH CK-LH
      $setup(posedge D &&& (ENABLE_NOT_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_SE_AND_SI === 1'b1),1.0);
      
      // hold SE-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D_AND_SI === 1'b1),
      negedge SE &&& (ENABLE_NOT_D_AND_SI === 1'b1),1.0);
      
      // hold SE-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D_AND_SI === 1'b1),
      posedge SE &&& (ENABLE_NOT_D_AND_SI === 1'b1),1.0);
      
      // setup SE-HL CK-LH
      $setup(negedge SE &&& (ENABLE_NOT_D_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_SI === 1'b1),1.0);
      
      // setup SE-LH CK-LH
      $setup(posedge SE &&& (ENABLE_NOT_D_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_SI === 1'b1),1.0);
      
      // hold SE-HL CK-LH
      $hold(posedge CK &&& (ENABLE_D_AND_NOT_SI === 1'b1),
      negedge SE &&& (ENABLE_D_AND_NOT_SI === 1'b1),1.0);
      
      // hold SE-LH CK-LH
      $hold(posedge CK &&& (ENABLE_D_AND_NOT_SI === 1'b1),
      posedge SE &&& (ENABLE_D_AND_NOT_SI === 1'b1),1.0);
      
      // setup SE-HL CK-LH
      $setup(negedge SE &&& (ENABLE_D_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_D_AND_NOT_SI === 1'b1),1.0);
      
      // setup SE-LH CK-LH
      $setup(posedge SE &&& (ENABLE_D_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_D_AND_NOT_SI === 1'b1),1.0);
      
      // hold SI-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D_AND_SE === 1'b1),
      negedge SI &&& (ENABLE_NOT_D_AND_SE === 1'b1),1.0);
      
      // hold SI-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D_AND_SE === 1'b1),
      posedge SI &&& (ENABLE_NOT_D_AND_SE === 1'b1),1.0);
      
      // setup SI-HL CK-LH
      $setup(negedge SI &&& (ENABLE_NOT_D_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_SE === 1'b1),1.0);
      
      // setup SI-LH CK-LH
      $setup(posedge SI &&& (ENABLE_NOT_D_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_SE === 1'b1),1.0);
      
      // hold SI-HL CK-LH
      $hold(posedge CK &&& (ENABLE_D_AND_SE === 1'b1),
      negedge SI &&& (ENABLE_D_AND_SE === 1'b1),1.0);
      
      // hold SI-LH CK-LH
      $hold(posedge CK &&& (ENABLE_D_AND_SE === 1'b1),
      posedge SI &&& (ENABLE_D_AND_SE === 1'b1),1.0);
      
      // setup SI-HL CK-LH
      $setup(negedge SI &&& (ENABLE_D_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_D_AND_SE === 1'b1),1.0);
      
      // setup SI-LH CK-LH
      $setup(posedge SI &&& (ENABLE_D_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_D_AND_SE === 1'b1),1.0);
      
      // mpw CK_lh 
      $width(posedge CK,1.0,0);
      
      // mpw CK_hl 
      $width(negedge CK,1.0,0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_FSDPQB_V3_1( QN, CK, D, SI, SE );
input CK, D, SE, SI;
output QN;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_FSDPQB_V3_1_func SAEDRVT14_FSDPQB_V3_1_behav_inst(.QN(QN),.CK(CK),.D(D),.SI(SI),.SE(SE));
`else
   SAEDRVT14_FSDPQB_V3_1_func SAEDRVT14_FSDPQB_V3_1_inst(.QN(QN),.CK(CK),.D(D),.SI(SI),.SE(SE));
   // spec_gates_begin
   not MGM_G0(MGM_W0,D);
   not MGM_G1(MGM_W1,SE);
   and MGM_G2(MGM_W2,MGM_W1,MGM_W0);
   not MGM_G3(MGM_W3,SI);
   and MGM_G4(ENABLE_NOT_D_AND_NOT_SE_AND_NOT_SI,MGM_W3,MGM_W2);
   not MGM_G5(MGM_W4,D);
   not MGM_G6(MGM_W5,SE);
   and MGM_G7(MGM_W6,MGM_W5,MGM_W4);
   and MGM_G8(ENABLE_NOT_D_AND_NOT_SE_AND_SI,SI,MGM_W6);
   not MGM_G9(MGM_W7,D);
   and MGM_G10(MGM_W8,SE,MGM_W7);
   not MGM_G11(MGM_W9,SI);
   and MGM_G12(ENABLE_NOT_D_AND_SE_AND_NOT_SI,MGM_W9,MGM_W8);
   not MGM_G13(MGM_W10,D);
   and MGM_G14(MGM_W11,SE,MGM_W10);
   and MGM_G15(ENABLE_NOT_D_AND_SE_AND_SI,SI,MGM_W11);
   not MGM_G16(MGM_W12,SE);
   and MGM_G17(MGM_W13,MGM_W12,D);
   not MGM_G18(MGM_W14,SI);
   and MGM_G19(ENABLE_D_AND_NOT_SE_AND_NOT_SI,MGM_W14,MGM_W13);
   not MGM_G20(MGM_W15,SE);
   and MGM_G21(MGM_W16,MGM_W15,D);
   and MGM_G22(ENABLE_D_AND_NOT_SE_AND_SI,SI,MGM_W16);
   and MGM_G23(MGM_W17,SE,D);
   not MGM_G24(MGM_W18,SI);
   and MGM_G25(ENABLE_D_AND_SE_AND_NOT_SI,MGM_W18,MGM_W17);
   and MGM_G26(MGM_W19,SE,D);
   and MGM_G27(ENABLE_D_AND_SE_AND_SI,SI,MGM_W19);
   not MGM_G28(MGM_W20,SE);
   not MGM_G29(MGM_W21,SI);
   and MGM_G30(ENABLE_NOT_SE_AND_NOT_SI,MGM_W21,MGM_W20);
   not MGM_G31(MGM_W22,SE);
   and MGM_G32(ENABLE_NOT_SE_AND_SI,SI,MGM_W22);
   not MGM_G33(MGM_W23,D);
   and MGM_G34(ENABLE_NOT_D_AND_SI,SI,MGM_W23);
   not MGM_G35(MGM_W24,SI);
   and MGM_G36(ENABLE_D_AND_NOT_SI,MGM_W24,D);
   not MGM_G37(MGM_W25,D);
   and MGM_G38(ENABLE_NOT_D_AND_SE,SE,MGM_W25);
   and MGM_G39(ENABLE_D_AND_SE,SE,D);
   // spec_gates_end
   // specify_block_begin
   specify

      if(D===1'b0 && SI===1'b1)
      // seq arc CK --> QN
      (posedge CK => (QN : SE))  = (1.0,1.0);
      
      if(SE===1'b0 && SI===1'b0)
      // seq arc CK --> QN
      (posedge CK => (QN : D))  = (1.0,1.0);
      
      if(D===1'b1 && SE===1'b0 && SI===1'b1 || D===1'b0 && SE===1'b1 && SI===1'b0)
      // seq arc CK --> QN
      (posedge CK => (QN : D))  = (1.0,1.0);
      
      if(D===1'b1 && SE===1'b1)
      // seq arc CK --> QN
      (posedge CK => (QN : SI))  = (1.0,1.0);
      
      ifnone
      // seq arc CK --> QN
      (posedge CK => (QN : D))  = (1.0,1.0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      // hold D-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),
      negedge D &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold D-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),
      posedge D &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup D-HL CK-LH
      $setup(negedge D &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup D-LH CK-LH
      $setup(posedge D &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold D-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_SE_AND_SI === 1'b1),
      negedge D &&& (ENABLE_NOT_SE_AND_SI === 1'b1),1.0);
      
      // hold D-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_SE_AND_SI === 1'b1),
      posedge D &&& (ENABLE_NOT_SE_AND_SI === 1'b1),1.0);
      
      // setup D-HL CK-LH
      $setup(negedge D &&& (ENABLE_NOT_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_SE_AND_SI === 1'b1),1.0);
      
      // setup D-LH CK-LH
      $setup(posedge D &&& (ENABLE_NOT_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_SE_AND_SI === 1'b1),1.0);
      
      // hold SE-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D_AND_SI === 1'b1),
      negedge SE &&& (ENABLE_NOT_D_AND_SI === 1'b1),1.0);
      
      // hold SE-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D_AND_SI === 1'b1),
      posedge SE &&& (ENABLE_NOT_D_AND_SI === 1'b1),1.0);
      
      // setup SE-HL CK-LH
      $setup(negedge SE &&& (ENABLE_NOT_D_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_SI === 1'b1),1.0);
      
      // setup SE-LH CK-LH
      $setup(posedge SE &&& (ENABLE_NOT_D_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_SI === 1'b1),1.0);
      
      // hold SE-HL CK-LH
      $hold(posedge CK &&& (ENABLE_D_AND_NOT_SI === 1'b1),
      negedge SE &&& (ENABLE_D_AND_NOT_SI === 1'b1),1.0);
      
      // hold SE-LH CK-LH
      $hold(posedge CK &&& (ENABLE_D_AND_NOT_SI === 1'b1),
      posedge SE &&& (ENABLE_D_AND_NOT_SI === 1'b1),1.0);
      
      // setup SE-HL CK-LH
      $setup(negedge SE &&& (ENABLE_D_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_D_AND_NOT_SI === 1'b1),1.0);
      
      // setup SE-LH CK-LH
      $setup(posedge SE &&& (ENABLE_D_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_D_AND_NOT_SI === 1'b1),1.0);
      
      // hold SI-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D_AND_SE === 1'b1),
      negedge SI &&& (ENABLE_NOT_D_AND_SE === 1'b1),1.0);
      
      // hold SI-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D_AND_SE === 1'b1),
      posedge SI &&& (ENABLE_NOT_D_AND_SE === 1'b1),1.0);
      
      // setup SI-HL CK-LH
      $setup(negedge SI &&& (ENABLE_NOT_D_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_SE === 1'b1),1.0);
      
      // setup SI-LH CK-LH
      $setup(posedge SI &&& (ENABLE_NOT_D_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_SE === 1'b1),1.0);
      
      // hold SI-HL CK-LH
      $hold(posedge CK &&& (ENABLE_D_AND_SE === 1'b1),
      negedge SI &&& (ENABLE_D_AND_SE === 1'b1),1.0);
      
      // hold SI-LH CK-LH
      $hold(posedge CK &&& (ENABLE_D_AND_SE === 1'b1),
      posedge SI &&& (ENABLE_D_AND_SE === 1'b1),1.0);
      
      // setup SI-HL CK-LH
      $setup(negedge SI &&& (ENABLE_D_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_D_AND_SE === 1'b1),1.0);
      
      // setup SI-LH CK-LH
      $setup(posedge SI &&& (ENABLE_D_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_D_AND_SE === 1'b1),1.0);
      
      // mpw CK_lh 
      $width(posedge CK,1.0,0);
      
      // mpw CK_hl 
      $width(negedge CK,1.0,0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_FSDPQB_V3_2( QN, CK, D, SI, SE );
input CK, D, SE, SI;
output QN;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_FSDPQB_V3_2_func SAEDRVT14_FSDPQB_V3_2_behav_inst(.QN(QN),.CK(CK),.D(D),.SI(SI),.SE(SE));
`else
   SAEDRVT14_FSDPQB_V3_2_func SAEDRVT14_FSDPQB_V3_2_inst(.QN(QN),.CK(CK),.D(D),.SI(SI),.SE(SE));
   // spec_gates_begin
   not MGM_G0(MGM_W0,D);
   not MGM_G1(MGM_W1,SE);
   and MGM_G2(MGM_W2,MGM_W1,MGM_W0);
   not MGM_G3(MGM_W3,SI);
   and MGM_G4(ENABLE_NOT_D_AND_NOT_SE_AND_NOT_SI,MGM_W3,MGM_W2);
   not MGM_G5(MGM_W4,D);
   not MGM_G6(MGM_W5,SE);
   and MGM_G7(MGM_W6,MGM_W5,MGM_W4);
   and MGM_G8(ENABLE_NOT_D_AND_NOT_SE_AND_SI,SI,MGM_W6);
   not MGM_G9(MGM_W7,D);
   and MGM_G10(MGM_W8,SE,MGM_W7);
   not MGM_G11(MGM_W9,SI);
   and MGM_G12(ENABLE_NOT_D_AND_SE_AND_NOT_SI,MGM_W9,MGM_W8);
   not MGM_G13(MGM_W10,D);
   and MGM_G14(MGM_W11,SE,MGM_W10);
   and MGM_G15(ENABLE_NOT_D_AND_SE_AND_SI,SI,MGM_W11);
   not MGM_G16(MGM_W12,SE);
   and MGM_G17(MGM_W13,MGM_W12,D);
   not MGM_G18(MGM_W14,SI);
   and MGM_G19(ENABLE_D_AND_NOT_SE_AND_NOT_SI,MGM_W14,MGM_W13);
   not MGM_G20(MGM_W15,SE);
   and MGM_G21(MGM_W16,MGM_W15,D);
   and MGM_G22(ENABLE_D_AND_NOT_SE_AND_SI,SI,MGM_W16);
   and MGM_G23(MGM_W17,SE,D);
   not MGM_G24(MGM_W18,SI);
   and MGM_G25(ENABLE_D_AND_SE_AND_NOT_SI,MGM_W18,MGM_W17);
   and MGM_G26(MGM_W19,SE,D);
   and MGM_G27(ENABLE_D_AND_SE_AND_SI,SI,MGM_W19);
   not MGM_G28(MGM_W20,SE);
   not MGM_G29(MGM_W21,SI);
   and MGM_G30(ENABLE_NOT_SE_AND_NOT_SI,MGM_W21,MGM_W20);
   not MGM_G31(MGM_W22,SE);
   and MGM_G32(ENABLE_NOT_SE_AND_SI,SI,MGM_W22);
   not MGM_G33(MGM_W23,D);
   and MGM_G34(ENABLE_NOT_D_AND_SI,SI,MGM_W23);
   not MGM_G35(MGM_W24,SI);
   and MGM_G36(ENABLE_D_AND_NOT_SI,MGM_W24,D);
   not MGM_G37(MGM_W25,D);
   and MGM_G38(ENABLE_NOT_D_AND_SE,SE,MGM_W25);
   and MGM_G39(ENABLE_D_AND_SE,SE,D);
   // spec_gates_end
   // specify_block_begin
   specify

      if(D===1'b0 && SI===1'b1)
      // seq arc CK --> QN
      (posedge CK => (QN : SE))  = (1.0,1.0);
      
      if(SE===1'b0 && SI===1'b0)
      // seq arc CK --> QN
      (posedge CK => (QN : D))  = (1.0,1.0);
      
      if(D===1'b1 && SE===1'b0 && SI===1'b1 || D===1'b0 && SE===1'b1 && SI===1'b0)
      // seq arc CK --> QN
      (posedge CK => (QN : D))  = (1.0,1.0);
      
      if(D===1'b1 && SE===1'b1)
      // seq arc CK --> QN
      (posedge CK => (QN : SI))  = (1.0,1.0);
      
      ifnone
      // seq arc CK --> QN
      (posedge CK => (QN : D))  = (1.0,1.0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      // hold D-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),
      negedge D &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold D-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),
      posedge D &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup D-HL CK-LH
      $setup(negedge D &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup D-LH CK-LH
      $setup(posedge D &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold D-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_SE_AND_SI === 1'b1),
      negedge D &&& (ENABLE_NOT_SE_AND_SI === 1'b1),1.0);
      
      // hold D-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_SE_AND_SI === 1'b1),
      posedge D &&& (ENABLE_NOT_SE_AND_SI === 1'b1),1.0);
      
      // setup D-HL CK-LH
      $setup(negedge D &&& (ENABLE_NOT_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_SE_AND_SI === 1'b1),1.0);
      
      // setup D-LH CK-LH
      $setup(posedge D &&& (ENABLE_NOT_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_SE_AND_SI === 1'b1),1.0);
      
      // hold SE-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D_AND_SI === 1'b1),
      negedge SE &&& (ENABLE_NOT_D_AND_SI === 1'b1),1.0);
      
      // hold SE-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D_AND_SI === 1'b1),
      posedge SE &&& (ENABLE_NOT_D_AND_SI === 1'b1),1.0);
      
      // setup SE-HL CK-LH
      $setup(negedge SE &&& (ENABLE_NOT_D_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_SI === 1'b1),1.0);
      
      // setup SE-LH CK-LH
      $setup(posedge SE &&& (ENABLE_NOT_D_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_SI === 1'b1),1.0);
      
      // hold SE-HL CK-LH
      $hold(posedge CK &&& (ENABLE_D_AND_NOT_SI === 1'b1),
      negedge SE &&& (ENABLE_D_AND_NOT_SI === 1'b1),1.0);
      
      // hold SE-LH CK-LH
      $hold(posedge CK &&& (ENABLE_D_AND_NOT_SI === 1'b1),
      posedge SE &&& (ENABLE_D_AND_NOT_SI === 1'b1),1.0);
      
      // setup SE-HL CK-LH
      $setup(negedge SE &&& (ENABLE_D_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_D_AND_NOT_SI === 1'b1),1.0);
      
      // setup SE-LH CK-LH
      $setup(posedge SE &&& (ENABLE_D_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_D_AND_NOT_SI === 1'b1),1.0);
      
      // hold SI-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D_AND_SE === 1'b1),
      negedge SI &&& (ENABLE_NOT_D_AND_SE === 1'b1),1.0);
      
      // hold SI-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D_AND_SE === 1'b1),
      posedge SI &&& (ENABLE_NOT_D_AND_SE === 1'b1),1.0);
      
      // setup SI-HL CK-LH
      $setup(negedge SI &&& (ENABLE_NOT_D_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_SE === 1'b1),1.0);
      
      // setup SI-LH CK-LH
      $setup(posedge SI &&& (ENABLE_NOT_D_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_SE === 1'b1),1.0);
      
      // hold SI-HL CK-LH
      $hold(posedge CK &&& (ENABLE_D_AND_SE === 1'b1),
      negedge SI &&& (ENABLE_D_AND_SE === 1'b1),1.0);
      
      // hold SI-LH CK-LH
      $hold(posedge CK &&& (ENABLE_D_AND_SE === 1'b1),
      posedge SI &&& (ENABLE_D_AND_SE === 1'b1),1.0);
      
      // setup SI-HL CK-LH
      $setup(negedge SI &&& (ENABLE_D_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_D_AND_SE === 1'b1),1.0);
      
      // setup SI-LH CK-LH
      $setup(posedge SI &&& (ENABLE_D_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_D_AND_SE === 1'b1),1.0);
      
      // mpw CK_lh 
      $width(posedge CK,1.0,0);
      
      // mpw CK_hl 
      $width(negedge CK,1.0,0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_FSDPQB_V3_4( QN, CK, D, SI, SE );
input CK, D, SE, SI;
output QN;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_FSDPQB_V3_4_func SAEDRVT14_FSDPQB_V3_4_behav_inst(.QN(QN),.CK(CK),.D(D),.SI(SI),.SE(SE));
`else
   SAEDRVT14_FSDPQB_V3_4_func SAEDRVT14_FSDPQB_V3_4_inst(.QN(QN),.CK(CK),.D(D),.SI(SI),.SE(SE));
   // spec_gates_begin
   not MGM_G0(MGM_W0,D);
   not MGM_G1(MGM_W1,SE);
   and MGM_G2(MGM_W2,MGM_W1,MGM_W0);
   not MGM_G3(MGM_W3,SI);
   and MGM_G4(ENABLE_NOT_D_AND_NOT_SE_AND_NOT_SI,MGM_W3,MGM_W2);
   not MGM_G5(MGM_W4,D);
   not MGM_G6(MGM_W5,SE);
   and MGM_G7(MGM_W6,MGM_W5,MGM_W4);
   and MGM_G8(ENABLE_NOT_D_AND_NOT_SE_AND_SI,SI,MGM_W6);
   not MGM_G9(MGM_W7,D);
   and MGM_G10(MGM_W8,SE,MGM_W7);
   not MGM_G11(MGM_W9,SI);
   and MGM_G12(ENABLE_NOT_D_AND_SE_AND_NOT_SI,MGM_W9,MGM_W8);
   not MGM_G13(MGM_W10,D);
   and MGM_G14(MGM_W11,SE,MGM_W10);
   and MGM_G15(ENABLE_NOT_D_AND_SE_AND_SI,SI,MGM_W11);
   not MGM_G16(MGM_W12,SE);
   and MGM_G17(MGM_W13,MGM_W12,D);
   not MGM_G18(MGM_W14,SI);
   and MGM_G19(ENABLE_D_AND_NOT_SE_AND_NOT_SI,MGM_W14,MGM_W13);
   not MGM_G20(MGM_W15,SE);
   and MGM_G21(MGM_W16,MGM_W15,D);
   and MGM_G22(ENABLE_D_AND_NOT_SE_AND_SI,SI,MGM_W16);
   and MGM_G23(MGM_W17,SE,D);
   not MGM_G24(MGM_W18,SI);
   and MGM_G25(ENABLE_D_AND_SE_AND_NOT_SI,MGM_W18,MGM_W17);
   and MGM_G26(MGM_W19,SE,D);
   and MGM_G27(ENABLE_D_AND_SE_AND_SI,SI,MGM_W19);
   not MGM_G28(MGM_W20,SE);
   not MGM_G29(MGM_W21,SI);
   and MGM_G30(ENABLE_NOT_SE_AND_NOT_SI,MGM_W21,MGM_W20);
   not MGM_G31(MGM_W22,SE);
   and MGM_G32(ENABLE_NOT_SE_AND_SI,SI,MGM_W22);
   not MGM_G33(MGM_W23,D);
   and MGM_G34(ENABLE_NOT_D_AND_SI,SI,MGM_W23);
   not MGM_G35(MGM_W24,SI);
   and MGM_G36(ENABLE_D_AND_NOT_SI,MGM_W24,D);
   not MGM_G37(MGM_W25,D);
   and MGM_G38(ENABLE_NOT_D_AND_SE,SE,MGM_W25);
   and MGM_G39(ENABLE_D_AND_SE,SE,D);
   // spec_gates_end
   // specify_block_begin
   specify

      if(D===1'b0 && SI===1'b1)
      // seq arc CK --> QN
      (posedge CK => (QN : SE))  = (1.0,1.0);
      
      if(SE===1'b0 && SI===1'b0)
      // seq arc CK --> QN
      (posedge CK => (QN : D))  = (1.0,1.0);
      
      if(D===1'b1 && SE===1'b0 && SI===1'b1 || D===1'b0 && SE===1'b1 && SI===1'b0)
      // seq arc CK --> QN
      (posedge CK => (QN : D))  = (1.0,1.0);
      
      if(D===1'b1 && SE===1'b1)
      // seq arc CK --> QN
      (posedge CK => (QN : SI))  = (1.0,1.0);
      
      ifnone
      // seq arc CK --> QN
      (posedge CK => (QN : D))  = (1.0,1.0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      // hold D-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),
      negedge D &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold D-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),
      posedge D &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup D-HL CK-LH
      $setup(negedge D &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup D-LH CK-LH
      $setup(posedge D &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold D-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_SE_AND_SI === 1'b1),
      negedge D &&& (ENABLE_NOT_SE_AND_SI === 1'b1),1.0);
      
      // hold D-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_SE_AND_SI === 1'b1),
      posedge D &&& (ENABLE_NOT_SE_AND_SI === 1'b1),1.0);
      
      // setup D-HL CK-LH
      $setup(negedge D &&& (ENABLE_NOT_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_SE_AND_SI === 1'b1),1.0);
      
      // setup D-LH CK-LH
      $setup(posedge D &&& (ENABLE_NOT_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_SE_AND_SI === 1'b1),1.0);
      
      // hold SE-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D_AND_SI === 1'b1),
      negedge SE &&& (ENABLE_NOT_D_AND_SI === 1'b1),1.0);
      
      // hold SE-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D_AND_SI === 1'b1),
      posedge SE &&& (ENABLE_NOT_D_AND_SI === 1'b1),1.0);
      
      // setup SE-HL CK-LH
      $setup(negedge SE &&& (ENABLE_NOT_D_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_SI === 1'b1),1.0);
      
      // setup SE-LH CK-LH
      $setup(posedge SE &&& (ENABLE_NOT_D_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_SI === 1'b1),1.0);
      
      // hold SE-HL CK-LH
      $hold(posedge CK &&& (ENABLE_D_AND_NOT_SI === 1'b1),
      negedge SE &&& (ENABLE_D_AND_NOT_SI === 1'b1),1.0);
      
      // hold SE-LH CK-LH
      $hold(posedge CK &&& (ENABLE_D_AND_NOT_SI === 1'b1),
      posedge SE &&& (ENABLE_D_AND_NOT_SI === 1'b1),1.0);
      
      // setup SE-HL CK-LH
      $setup(negedge SE &&& (ENABLE_D_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_D_AND_NOT_SI === 1'b1),1.0);
      
      // setup SE-LH CK-LH
      $setup(posedge SE &&& (ENABLE_D_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_D_AND_NOT_SI === 1'b1),1.0);
      
      // hold SI-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D_AND_SE === 1'b1),
      negedge SI &&& (ENABLE_NOT_D_AND_SE === 1'b1),1.0);
      
      // hold SI-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D_AND_SE === 1'b1),
      posedge SI &&& (ENABLE_NOT_D_AND_SE === 1'b1),1.0);
      
      // setup SI-HL CK-LH
      $setup(negedge SI &&& (ENABLE_NOT_D_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_SE === 1'b1),1.0);
      
      // setup SI-LH CK-LH
      $setup(posedge SI &&& (ENABLE_NOT_D_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_SE === 1'b1),1.0);
      
      // hold SI-HL CK-LH
      $hold(posedge CK &&& (ENABLE_D_AND_SE === 1'b1),
      negedge SI &&& (ENABLE_D_AND_SE === 1'b1),1.0);
      
      // hold SI-LH CK-LH
      $hold(posedge CK &&& (ENABLE_D_AND_SE === 1'b1),
      posedge SI &&& (ENABLE_D_AND_SE === 1'b1),1.0);
      
      // setup SI-HL CK-LH
      $setup(negedge SI &&& (ENABLE_D_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_D_AND_SE === 1'b1),1.0);
      
      // setup SI-LH CK-LH
      $setup(posedge SI &&& (ENABLE_D_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_D_AND_SE === 1'b1),1.0);
      
      // mpw CK_lh 
      $width(posedge CK,1.0,0);
      
      // mpw CK_hl 
      $width(negedge CK,1.0,0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_FSDPQB_V3_8( QN, CK, D, SI, SE );
input CK, D, SE, SI;
output QN;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_FSDPQB_V3_8_func SAEDRVT14_FSDPQB_V3_8_behav_inst(.QN(QN),.CK(CK),.D(D),.SI(SI),.SE(SE));
`else
   SAEDRVT14_FSDPQB_V3_8_func SAEDRVT14_FSDPQB_V3_8_inst(.QN(QN),.CK(CK),.D(D),.SI(SI),.SE(SE));
   // spec_gates_begin
   not MGM_G0(MGM_W0,D);
   not MGM_G1(MGM_W1,SE);
   and MGM_G2(MGM_W2,MGM_W1,MGM_W0);
   not MGM_G3(MGM_W3,SI);
   and MGM_G4(ENABLE_NOT_D_AND_NOT_SE_AND_NOT_SI,MGM_W3,MGM_W2);
   not MGM_G5(MGM_W4,D);
   not MGM_G6(MGM_W5,SE);
   and MGM_G7(MGM_W6,MGM_W5,MGM_W4);
   and MGM_G8(ENABLE_NOT_D_AND_NOT_SE_AND_SI,SI,MGM_W6);
   not MGM_G9(MGM_W7,D);
   and MGM_G10(MGM_W8,SE,MGM_W7);
   not MGM_G11(MGM_W9,SI);
   and MGM_G12(ENABLE_NOT_D_AND_SE_AND_NOT_SI,MGM_W9,MGM_W8);
   not MGM_G13(MGM_W10,D);
   and MGM_G14(MGM_W11,SE,MGM_W10);
   and MGM_G15(ENABLE_NOT_D_AND_SE_AND_SI,SI,MGM_W11);
   not MGM_G16(MGM_W12,SE);
   and MGM_G17(MGM_W13,MGM_W12,D);
   not MGM_G18(MGM_W14,SI);
   and MGM_G19(ENABLE_D_AND_NOT_SE_AND_NOT_SI,MGM_W14,MGM_W13);
   not MGM_G20(MGM_W15,SE);
   and MGM_G21(MGM_W16,MGM_W15,D);
   and MGM_G22(ENABLE_D_AND_NOT_SE_AND_SI,SI,MGM_W16);
   and MGM_G23(MGM_W17,SE,D);
   not MGM_G24(MGM_W18,SI);
   and MGM_G25(ENABLE_D_AND_SE_AND_NOT_SI,MGM_W18,MGM_W17);
   and MGM_G26(MGM_W19,SE,D);
   and MGM_G27(ENABLE_D_AND_SE_AND_SI,SI,MGM_W19);
   not MGM_G28(MGM_W20,SE);
   not MGM_G29(MGM_W21,SI);
   and MGM_G30(ENABLE_NOT_SE_AND_NOT_SI,MGM_W21,MGM_W20);
   not MGM_G31(MGM_W22,SE);
   and MGM_G32(ENABLE_NOT_SE_AND_SI,SI,MGM_W22);
   not MGM_G33(MGM_W23,D);
   and MGM_G34(ENABLE_NOT_D_AND_SI,SI,MGM_W23);
   not MGM_G35(MGM_W24,SI);
   and MGM_G36(ENABLE_D_AND_NOT_SI,MGM_W24,D);
   not MGM_G37(MGM_W25,D);
   and MGM_G38(ENABLE_NOT_D_AND_SE,SE,MGM_W25);
   and MGM_G39(ENABLE_D_AND_SE,SE,D);
   // spec_gates_end
   // specify_block_begin
   specify

      if(D===1'b0 && SI===1'b1)
      // seq arc CK --> QN
      (posedge CK => (QN : SE))  = (1.0,1.0);
      
      if(SE===1'b0 && SI===1'b0)
      // seq arc CK --> QN
      (posedge CK => (QN : D))  = (1.0,1.0);
      
      if(D===1'b1 && SE===1'b0 && SI===1'b1 || D===1'b0 && SE===1'b1 && SI===1'b0)
      // seq arc CK --> QN
      (posedge CK => (QN : D))  = (1.0,1.0);
      
      if(D===1'b1 && SE===1'b1)
      // seq arc CK --> QN
      (posedge CK => (QN : SI))  = (1.0,1.0);
      
      ifnone
      // seq arc CK --> QN
      (posedge CK => (QN : D))  = (1.0,1.0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      // hold D-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),
      negedge D &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold D-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),
      posedge D &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup D-HL CK-LH
      $setup(negedge D &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup D-LH CK-LH
      $setup(posedge D &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold D-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_SE_AND_SI === 1'b1),
      negedge D &&& (ENABLE_NOT_SE_AND_SI === 1'b1),1.0);
      
      // hold D-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_SE_AND_SI === 1'b1),
      posedge D &&& (ENABLE_NOT_SE_AND_SI === 1'b1),1.0);
      
      // setup D-HL CK-LH
      $setup(negedge D &&& (ENABLE_NOT_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_SE_AND_SI === 1'b1),1.0);
      
      // setup D-LH CK-LH
      $setup(posedge D &&& (ENABLE_NOT_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_SE_AND_SI === 1'b1),1.0);
      
      // hold SE-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D_AND_SI === 1'b1),
      negedge SE &&& (ENABLE_NOT_D_AND_SI === 1'b1),1.0);
      
      // hold SE-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D_AND_SI === 1'b1),
      posedge SE &&& (ENABLE_NOT_D_AND_SI === 1'b1),1.0);
      
      // setup SE-HL CK-LH
      $setup(negedge SE &&& (ENABLE_NOT_D_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_SI === 1'b1),1.0);
      
      // setup SE-LH CK-LH
      $setup(posedge SE &&& (ENABLE_NOT_D_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_SI === 1'b1),1.0);
      
      // hold SE-HL CK-LH
      $hold(posedge CK &&& (ENABLE_D_AND_NOT_SI === 1'b1),
      negedge SE &&& (ENABLE_D_AND_NOT_SI === 1'b1),1.0);
      
      // hold SE-LH CK-LH
      $hold(posedge CK &&& (ENABLE_D_AND_NOT_SI === 1'b1),
      posedge SE &&& (ENABLE_D_AND_NOT_SI === 1'b1),1.0);
      
      // setup SE-HL CK-LH
      $setup(negedge SE &&& (ENABLE_D_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_D_AND_NOT_SI === 1'b1),1.0);
      
      // setup SE-LH CK-LH
      $setup(posedge SE &&& (ENABLE_D_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_D_AND_NOT_SI === 1'b1),1.0);
      
      // hold SI-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D_AND_SE === 1'b1),
      negedge SI &&& (ENABLE_NOT_D_AND_SE === 1'b1),1.0);
      
      // hold SI-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D_AND_SE === 1'b1),
      posedge SI &&& (ENABLE_NOT_D_AND_SE === 1'b1),1.0);
      
      // setup SI-HL CK-LH
      $setup(negedge SI &&& (ENABLE_NOT_D_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_SE === 1'b1),1.0);
      
      // setup SI-LH CK-LH
      $setup(posedge SI &&& (ENABLE_NOT_D_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_SE === 1'b1),1.0);
      
      // hold SI-HL CK-LH
      $hold(posedge CK &&& (ENABLE_D_AND_SE === 1'b1),
      negedge SI &&& (ENABLE_D_AND_SE === 1'b1),1.0);
      
      // hold SI-LH CK-LH
      $hold(posedge CK &&& (ENABLE_D_AND_SE === 1'b1),
      posedge SI &&& (ENABLE_D_AND_SE === 1'b1),1.0);
      
      // setup SI-HL CK-LH
      $setup(negedge SI &&& (ENABLE_D_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_D_AND_SE === 1'b1),1.0);
      
      // setup SI-LH CK-LH
      $setup(posedge SI &&& (ENABLE_D_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_D_AND_SE === 1'b1),1.0);
      
      // mpw CK_lh 
      $width(posedge CK,1.0,0);
      
      // mpw CK_hl 
      $width(negedge CK,1.0,0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_FSDPQ_V2LP_0P5( Q, CK, D, SI, SE );
input CK, D, SE, SI;
output Q;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_FSDPQ_V2LP_0P5_func SAEDRVT14_FSDPQ_V2LP_0P5_behav_inst(.Q(Q),.CK(CK),.D(D),.SI(SI),.SE(SE));
`else
   SAEDRVT14_FSDPQ_V2LP_0P5_func SAEDRVT14_FSDPQ_V2LP_0P5_inst(.Q(Q),.CK(CK),.D(D),.SI(SI),.SE(SE));
   // spec_gates_begin
   not MGM_G0(MGM_W0,D);
   not MGM_G1(MGM_W1,SE);
   and MGM_G2(MGM_W2,MGM_W1,MGM_W0);
   not MGM_G3(MGM_W3,SI);
   and MGM_G4(ENABLE_NOT_D_AND_NOT_SE_AND_NOT_SI,MGM_W3,MGM_W2);
   not MGM_G5(MGM_W4,D);
   not MGM_G6(MGM_W5,SE);
   and MGM_G7(MGM_W6,MGM_W5,MGM_W4);
   and MGM_G8(ENABLE_NOT_D_AND_NOT_SE_AND_SI,SI,MGM_W6);
   not MGM_G9(MGM_W7,D);
   and MGM_G10(MGM_W8,SE,MGM_W7);
   not MGM_G11(MGM_W9,SI);
   and MGM_G12(ENABLE_NOT_D_AND_SE_AND_NOT_SI,MGM_W9,MGM_W8);
   not MGM_G13(MGM_W10,D);
   and MGM_G14(MGM_W11,SE,MGM_W10);
   and MGM_G15(ENABLE_NOT_D_AND_SE_AND_SI,SI,MGM_W11);
   not MGM_G16(MGM_W12,SE);
   and MGM_G17(MGM_W13,MGM_W12,D);
   not MGM_G18(MGM_W14,SI);
   and MGM_G19(ENABLE_D_AND_NOT_SE_AND_NOT_SI,MGM_W14,MGM_W13);
   not MGM_G20(MGM_W15,SE);
   and MGM_G21(MGM_W16,MGM_W15,D);
   and MGM_G22(ENABLE_D_AND_NOT_SE_AND_SI,SI,MGM_W16);
   and MGM_G23(MGM_W17,SE,D);
   not MGM_G24(MGM_W18,SI);
   and MGM_G25(ENABLE_D_AND_SE_AND_NOT_SI,MGM_W18,MGM_W17);
   and MGM_G26(MGM_W19,SE,D);
   and MGM_G27(ENABLE_D_AND_SE_AND_SI,SI,MGM_W19);
   not MGM_G28(MGM_W20,SE);
   not MGM_G29(MGM_W21,SI);
   and MGM_G30(ENABLE_NOT_SE_AND_NOT_SI,MGM_W21,MGM_W20);
   not MGM_G31(MGM_W22,SE);
   and MGM_G32(ENABLE_NOT_SE_AND_SI,SI,MGM_W22);
   not MGM_G33(MGM_W23,D);
   and MGM_G34(ENABLE_NOT_D_AND_SI,SI,MGM_W23);
   not MGM_G35(MGM_W24,SI);
   and MGM_G36(ENABLE_D_AND_NOT_SI,MGM_W24,D);
   not MGM_G37(MGM_W25,D);
   and MGM_G38(ENABLE_NOT_D_AND_SE,SE,MGM_W25);
   and MGM_G39(ENABLE_D_AND_SE,SE,D);
   // spec_gates_end
   // specify_block_begin
   specify

      if(D===1'b0 && SI===1'b1)
      // seq arc CK --> Q
      (posedge CK => (Q : SE))  = (1.0,1.0);
      
      if(SE===1'b0 && SI===1'b0)
      // seq arc CK --> Q
      (posedge CK => (Q : D))  = (1.0,1.0);
      
      if(D===1'b1 && SE===1'b0 && SI===1'b1 || D===1'b0 && SE===1'b1 && SI===1'b0)
      // seq arc CK --> Q
      (posedge CK => (Q : D))  = (1.0,1.0);
      
      if(D===1'b1 && SE===1'b1)
      // seq arc CK --> Q
      (posedge CK => (Q : SI))  = (1.0,1.0);
      
      ifnone
      // seq arc CK --> Q
      (posedge CK => (Q : D))  = (1.0,1.0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      // hold D-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),
      negedge D &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold D-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),
      posedge D &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup D-HL CK-LH
      $setup(negedge D &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup D-LH CK-LH
      $setup(posedge D &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold D-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_SE_AND_SI === 1'b1),
      negedge D &&& (ENABLE_NOT_SE_AND_SI === 1'b1),1.0);
      
      // hold D-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_SE_AND_SI === 1'b1),
      posedge D &&& (ENABLE_NOT_SE_AND_SI === 1'b1),1.0);
      
      // setup D-HL CK-LH
      $setup(negedge D &&& (ENABLE_NOT_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_SE_AND_SI === 1'b1),1.0);
      
      // setup D-LH CK-LH
      $setup(posedge D &&& (ENABLE_NOT_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_SE_AND_SI === 1'b1),1.0);
      
      // hold SE-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D_AND_SI === 1'b1),
      negedge SE &&& (ENABLE_NOT_D_AND_SI === 1'b1),1.0);
      
      // hold SE-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D_AND_SI === 1'b1),
      posedge SE &&& (ENABLE_NOT_D_AND_SI === 1'b1),1.0);
      
      // setup SE-HL CK-LH
      $setup(negedge SE &&& (ENABLE_NOT_D_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_SI === 1'b1),1.0);
      
      // setup SE-LH CK-LH
      $setup(posedge SE &&& (ENABLE_NOT_D_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_SI === 1'b1),1.0);
      
      // hold SE-HL CK-LH
      $hold(posedge CK &&& (ENABLE_D_AND_NOT_SI === 1'b1),
      negedge SE &&& (ENABLE_D_AND_NOT_SI === 1'b1),1.0);
      
      // hold SE-LH CK-LH
      $hold(posedge CK &&& (ENABLE_D_AND_NOT_SI === 1'b1),
      posedge SE &&& (ENABLE_D_AND_NOT_SI === 1'b1),1.0);
      
      // setup SE-HL CK-LH
      $setup(negedge SE &&& (ENABLE_D_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_D_AND_NOT_SI === 1'b1),1.0);
      
      // setup SE-LH CK-LH
      $setup(posedge SE &&& (ENABLE_D_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_D_AND_NOT_SI === 1'b1),1.0);
      
      // hold SI-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D_AND_SE === 1'b1),
      negedge SI &&& (ENABLE_NOT_D_AND_SE === 1'b1),1.0);
      
      // hold SI-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D_AND_SE === 1'b1),
      posedge SI &&& (ENABLE_NOT_D_AND_SE === 1'b1),1.0);
      
      // setup SI-HL CK-LH
      $setup(negedge SI &&& (ENABLE_NOT_D_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_SE === 1'b1),1.0);
      
      // setup SI-LH CK-LH
      $setup(posedge SI &&& (ENABLE_NOT_D_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_SE === 1'b1),1.0);
      
      // hold SI-HL CK-LH
      $hold(posedge CK &&& (ENABLE_D_AND_SE === 1'b1),
      negedge SI &&& (ENABLE_D_AND_SE === 1'b1),1.0);
      
      // hold SI-LH CK-LH
      $hold(posedge CK &&& (ENABLE_D_AND_SE === 1'b1),
      posedge SI &&& (ENABLE_D_AND_SE === 1'b1),1.0);
      
      // setup SI-HL CK-LH
      $setup(negedge SI &&& (ENABLE_D_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_D_AND_SE === 1'b1),1.0);
      
      // setup SI-LH CK-LH
      $setup(posedge SI &&& (ENABLE_D_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_D_AND_SE === 1'b1),1.0);
      
      // mpw CK_lh 
      $width(posedge CK,1.0,0);
      
      // mpw CK_hl 
      $width(negedge CK,1.0,0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_FSDPQ_V2LP_1( Q, CK, D, SI, SE );
input CK, D, SE, SI;
output Q;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_FSDPQ_V2LP_1_func SAEDRVT14_FSDPQ_V2LP_1_behav_inst(.Q(Q),.CK(CK),.D(D),.SI(SI),.SE(SE));
`else
   SAEDRVT14_FSDPQ_V2LP_1_func SAEDRVT14_FSDPQ_V2LP_1_inst(.Q(Q),.CK(CK),.D(D),.SI(SI),.SE(SE));
   // spec_gates_begin
   not MGM_G0(MGM_W0,D);
   not MGM_G1(MGM_W1,SE);
   and MGM_G2(MGM_W2,MGM_W1,MGM_W0);
   not MGM_G3(MGM_W3,SI);
   and MGM_G4(ENABLE_NOT_D_AND_NOT_SE_AND_NOT_SI,MGM_W3,MGM_W2);
   not MGM_G5(MGM_W4,D);
   not MGM_G6(MGM_W5,SE);
   and MGM_G7(MGM_W6,MGM_W5,MGM_W4);
   and MGM_G8(ENABLE_NOT_D_AND_NOT_SE_AND_SI,SI,MGM_W6);
   not MGM_G9(MGM_W7,D);
   and MGM_G10(MGM_W8,SE,MGM_W7);
   not MGM_G11(MGM_W9,SI);
   and MGM_G12(ENABLE_NOT_D_AND_SE_AND_NOT_SI,MGM_W9,MGM_W8);
   not MGM_G13(MGM_W10,D);
   and MGM_G14(MGM_W11,SE,MGM_W10);
   and MGM_G15(ENABLE_NOT_D_AND_SE_AND_SI,SI,MGM_W11);
   not MGM_G16(MGM_W12,SE);
   and MGM_G17(MGM_W13,MGM_W12,D);
   not MGM_G18(MGM_W14,SI);
   and MGM_G19(ENABLE_D_AND_NOT_SE_AND_NOT_SI,MGM_W14,MGM_W13);
   not MGM_G20(MGM_W15,SE);
   and MGM_G21(MGM_W16,MGM_W15,D);
   and MGM_G22(ENABLE_D_AND_NOT_SE_AND_SI,SI,MGM_W16);
   and MGM_G23(MGM_W17,SE,D);
   not MGM_G24(MGM_W18,SI);
   and MGM_G25(ENABLE_D_AND_SE_AND_NOT_SI,MGM_W18,MGM_W17);
   and MGM_G26(MGM_W19,SE,D);
   and MGM_G27(ENABLE_D_AND_SE_AND_SI,SI,MGM_W19);
   not MGM_G28(MGM_W20,SE);
   not MGM_G29(MGM_W21,SI);
   and MGM_G30(ENABLE_NOT_SE_AND_NOT_SI,MGM_W21,MGM_W20);
   not MGM_G31(MGM_W22,SE);
   and MGM_G32(ENABLE_NOT_SE_AND_SI,SI,MGM_W22);
   not MGM_G33(MGM_W23,D);
   and MGM_G34(ENABLE_NOT_D_AND_SI,SI,MGM_W23);
   not MGM_G35(MGM_W24,SI);
   and MGM_G36(ENABLE_D_AND_NOT_SI,MGM_W24,D);
   not MGM_G37(MGM_W25,D);
   and MGM_G38(ENABLE_NOT_D_AND_SE,SE,MGM_W25);
   and MGM_G39(ENABLE_D_AND_SE,SE,D);
   // spec_gates_end
   // specify_block_begin
   specify

      if(D===1'b0 && SI===1'b1)
      // seq arc CK --> Q
      (posedge CK => (Q : SE))  = (1.0,1.0);
      
      if(SE===1'b0 && SI===1'b0)
      // seq arc CK --> Q
      (posedge CK => (Q : D))  = (1.0,1.0);
      
      if(D===1'b1 && SE===1'b0 && SI===1'b1 || D===1'b0 && SE===1'b1 && SI===1'b0)
      // seq arc CK --> Q
      (posedge CK => (Q : D))  = (1.0,1.0);
      
      if(D===1'b1 && SE===1'b1)
      // seq arc CK --> Q
      (posedge CK => (Q : SI))  = (1.0,1.0);
      
      ifnone
      // seq arc CK --> Q
      (posedge CK => (Q : D))  = (1.0,1.0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      // hold D-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),
      negedge D &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold D-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),
      posedge D &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup D-HL CK-LH
      $setup(negedge D &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup D-LH CK-LH
      $setup(posedge D &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold D-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_SE_AND_SI === 1'b1),
      negedge D &&& (ENABLE_NOT_SE_AND_SI === 1'b1),1.0);
      
      // hold D-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_SE_AND_SI === 1'b1),
      posedge D &&& (ENABLE_NOT_SE_AND_SI === 1'b1),1.0);
      
      // setup D-HL CK-LH
      $setup(negedge D &&& (ENABLE_NOT_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_SE_AND_SI === 1'b1),1.0);
      
      // setup D-LH CK-LH
      $setup(posedge D &&& (ENABLE_NOT_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_SE_AND_SI === 1'b1),1.0);
      
      // hold SE-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D_AND_SI === 1'b1),
      negedge SE &&& (ENABLE_NOT_D_AND_SI === 1'b1),1.0);
      
      // hold SE-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D_AND_SI === 1'b1),
      posedge SE &&& (ENABLE_NOT_D_AND_SI === 1'b1),1.0);
      
      // setup SE-HL CK-LH
      $setup(negedge SE &&& (ENABLE_NOT_D_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_SI === 1'b1),1.0);
      
      // setup SE-LH CK-LH
      $setup(posedge SE &&& (ENABLE_NOT_D_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_SI === 1'b1),1.0);
      
      // hold SE-HL CK-LH
      $hold(posedge CK &&& (ENABLE_D_AND_NOT_SI === 1'b1),
      negedge SE &&& (ENABLE_D_AND_NOT_SI === 1'b1),1.0);
      
      // hold SE-LH CK-LH
      $hold(posedge CK &&& (ENABLE_D_AND_NOT_SI === 1'b1),
      posedge SE &&& (ENABLE_D_AND_NOT_SI === 1'b1),1.0);
      
      // setup SE-HL CK-LH
      $setup(negedge SE &&& (ENABLE_D_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_D_AND_NOT_SI === 1'b1),1.0);
      
      // setup SE-LH CK-LH
      $setup(posedge SE &&& (ENABLE_D_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_D_AND_NOT_SI === 1'b1),1.0);
      
      // hold SI-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D_AND_SE === 1'b1),
      negedge SI &&& (ENABLE_NOT_D_AND_SE === 1'b1),1.0);
      
      // hold SI-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D_AND_SE === 1'b1),
      posedge SI &&& (ENABLE_NOT_D_AND_SE === 1'b1),1.0);
      
      // setup SI-HL CK-LH
      $setup(negedge SI &&& (ENABLE_NOT_D_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_SE === 1'b1),1.0);
      
      // setup SI-LH CK-LH
      $setup(posedge SI &&& (ENABLE_NOT_D_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_SE === 1'b1),1.0);
      
      // hold SI-HL CK-LH
      $hold(posedge CK &&& (ENABLE_D_AND_SE === 1'b1),
      negedge SI &&& (ENABLE_D_AND_SE === 1'b1),1.0);
      
      // hold SI-LH CK-LH
      $hold(posedge CK &&& (ENABLE_D_AND_SE === 1'b1),
      posedge SI &&& (ENABLE_D_AND_SE === 1'b1),1.0);
      
      // setup SI-HL CK-LH
      $setup(negedge SI &&& (ENABLE_D_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_D_AND_SE === 1'b1),1.0);
      
      // setup SI-LH CK-LH
      $setup(posedge SI &&& (ENABLE_D_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_D_AND_SE === 1'b1),1.0);
      
      // mpw CK_lh 
      $width(posedge CK,1.0,0);
      
      // mpw CK_hl 
      $width(negedge CK,1.0,0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_FSDPQ_V2LP_2( Q, CK, D, SI, SE );
input CK, D, SE, SI;
output Q;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_FSDPQ_V2LP_2_func SAEDRVT14_FSDPQ_V2LP_2_behav_inst(.Q(Q),.CK(CK),.D(D),.SI(SI),.SE(SE));
`else
   SAEDRVT14_FSDPQ_V2LP_2_func SAEDRVT14_FSDPQ_V2LP_2_inst(.Q(Q),.CK(CK),.D(D),.SI(SI),.SE(SE));
   // spec_gates_begin
   not MGM_G0(MGM_W0,D);
   not MGM_G1(MGM_W1,SE);
   and MGM_G2(MGM_W2,MGM_W1,MGM_W0);
   not MGM_G3(MGM_W3,SI);
   and MGM_G4(ENABLE_NOT_D_AND_NOT_SE_AND_NOT_SI,MGM_W3,MGM_W2);
   not MGM_G5(MGM_W4,D);
   not MGM_G6(MGM_W5,SE);
   and MGM_G7(MGM_W6,MGM_W5,MGM_W4);
   and MGM_G8(ENABLE_NOT_D_AND_NOT_SE_AND_SI,SI,MGM_W6);
   not MGM_G9(MGM_W7,D);
   and MGM_G10(MGM_W8,SE,MGM_W7);
   not MGM_G11(MGM_W9,SI);
   and MGM_G12(ENABLE_NOT_D_AND_SE_AND_NOT_SI,MGM_W9,MGM_W8);
   not MGM_G13(MGM_W10,D);
   and MGM_G14(MGM_W11,SE,MGM_W10);
   and MGM_G15(ENABLE_NOT_D_AND_SE_AND_SI,SI,MGM_W11);
   not MGM_G16(MGM_W12,SE);
   and MGM_G17(MGM_W13,MGM_W12,D);
   not MGM_G18(MGM_W14,SI);
   and MGM_G19(ENABLE_D_AND_NOT_SE_AND_NOT_SI,MGM_W14,MGM_W13);
   not MGM_G20(MGM_W15,SE);
   and MGM_G21(MGM_W16,MGM_W15,D);
   and MGM_G22(ENABLE_D_AND_NOT_SE_AND_SI,SI,MGM_W16);
   and MGM_G23(MGM_W17,SE,D);
   not MGM_G24(MGM_W18,SI);
   and MGM_G25(ENABLE_D_AND_SE_AND_NOT_SI,MGM_W18,MGM_W17);
   and MGM_G26(MGM_W19,SE,D);
   and MGM_G27(ENABLE_D_AND_SE_AND_SI,SI,MGM_W19);
   not MGM_G28(MGM_W20,SE);
   not MGM_G29(MGM_W21,SI);
   and MGM_G30(ENABLE_NOT_SE_AND_NOT_SI,MGM_W21,MGM_W20);
   not MGM_G31(MGM_W22,SE);
   and MGM_G32(ENABLE_NOT_SE_AND_SI,SI,MGM_W22);
   not MGM_G33(MGM_W23,D);
   and MGM_G34(ENABLE_NOT_D_AND_SI,SI,MGM_W23);
   not MGM_G35(MGM_W24,SI);
   and MGM_G36(ENABLE_D_AND_NOT_SI,MGM_W24,D);
   not MGM_G37(MGM_W25,D);
   and MGM_G38(ENABLE_NOT_D_AND_SE,SE,MGM_W25);
   and MGM_G39(ENABLE_D_AND_SE,SE,D);
   // spec_gates_end
   // specify_block_begin
   specify

      if(D===1'b0 && SI===1'b1)
      // seq arc CK --> Q
      (posedge CK => (Q : SE))  = (1.0,1.0);
      
      if(SE===1'b0 && SI===1'b0)
      // seq arc CK --> Q
      (posedge CK => (Q : D))  = (1.0,1.0);
      
      if(D===1'b1 && SE===1'b0 && SI===1'b1 || D===1'b0 && SE===1'b1 && SI===1'b0)
      // seq arc CK --> Q
      (posedge CK => (Q : D))  = (1.0,1.0);
      
      if(D===1'b1 && SE===1'b1)
      // seq arc CK --> Q
      (posedge CK => (Q : SI))  = (1.0,1.0);
      
      ifnone
      // seq arc CK --> Q
      (posedge CK => (Q : D))  = (1.0,1.0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      // hold D-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),
      negedge D &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold D-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),
      posedge D &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup D-HL CK-LH
      $setup(negedge D &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup D-LH CK-LH
      $setup(posedge D &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold D-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_SE_AND_SI === 1'b1),
      negedge D &&& (ENABLE_NOT_SE_AND_SI === 1'b1),1.0);
      
      // hold D-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_SE_AND_SI === 1'b1),
      posedge D &&& (ENABLE_NOT_SE_AND_SI === 1'b1),1.0);
      
      // setup D-HL CK-LH
      $setup(negedge D &&& (ENABLE_NOT_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_SE_AND_SI === 1'b1),1.0);
      
      // setup D-LH CK-LH
      $setup(posedge D &&& (ENABLE_NOT_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_SE_AND_SI === 1'b1),1.0);
      
      // hold SE-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D_AND_SI === 1'b1),
      negedge SE &&& (ENABLE_NOT_D_AND_SI === 1'b1),1.0);
      
      // hold SE-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D_AND_SI === 1'b1),
      posedge SE &&& (ENABLE_NOT_D_AND_SI === 1'b1),1.0);
      
      // setup SE-HL CK-LH
      $setup(negedge SE &&& (ENABLE_NOT_D_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_SI === 1'b1),1.0);
      
      // setup SE-LH CK-LH
      $setup(posedge SE &&& (ENABLE_NOT_D_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_SI === 1'b1),1.0);
      
      // hold SE-HL CK-LH
      $hold(posedge CK &&& (ENABLE_D_AND_NOT_SI === 1'b1),
      negedge SE &&& (ENABLE_D_AND_NOT_SI === 1'b1),1.0);
      
      // hold SE-LH CK-LH
      $hold(posedge CK &&& (ENABLE_D_AND_NOT_SI === 1'b1),
      posedge SE &&& (ENABLE_D_AND_NOT_SI === 1'b1),1.0);
      
      // setup SE-HL CK-LH
      $setup(negedge SE &&& (ENABLE_D_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_D_AND_NOT_SI === 1'b1),1.0);
      
      // setup SE-LH CK-LH
      $setup(posedge SE &&& (ENABLE_D_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_D_AND_NOT_SI === 1'b1),1.0);
      
      // hold SI-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D_AND_SE === 1'b1),
      negedge SI &&& (ENABLE_NOT_D_AND_SE === 1'b1),1.0);
      
      // hold SI-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D_AND_SE === 1'b1),
      posedge SI &&& (ENABLE_NOT_D_AND_SE === 1'b1),1.0);
      
      // setup SI-HL CK-LH
      $setup(negedge SI &&& (ENABLE_NOT_D_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_SE === 1'b1),1.0);
      
      // setup SI-LH CK-LH
      $setup(posedge SI &&& (ENABLE_NOT_D_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_SE === 1'b1),1.0);
      
      // hold SI-HL CK-LH
      $hold(posedge CK &&& (ENABLE_D_AND_SE === 1'b1),
      negedge SI &&& (ENABLE_D_AND_SE === 1'b1),1.0);
      
      // hold SI-LH CK-LH
      $hold(posedge CK &&& (ENABLE_D_AND_SE === 1'b1),
      posedge SI &&& (ENABLE_D_AND_SE === 1'b1),1.0);
      
      // setup SI-HL CK-LH
      $setup(negedge SI &&& (ENABLE_D_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_D_AND_SE === 1'b1),1.0);
      
      // setup SI-LH CK-LH
      $setup(posedge SI &&& (ENABLE_D_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_D_AND_SE === 1'b1),1.0);
      
      // mpw CK_lh 
      $width(posedge CK,1.0,0);
      
      // mpw CK_hl 
      $width(negedge CK,1.0,0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_FSDPQ_V2_0P5( Q, CK, D, SI, SE );
input CK, D, SE, SI;
output Q;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_FSDPQ_V2_0P5_func SAEDRVT14_FSDPQ_V2_0P5_behav_inst(.Q(Q),.CK(CK),.D(D),.SI(SI),.SE(SE));
`else
   SAEDRVT14_FSDPQ_V2_0P5_func SAEDRVT14_FSDPQ_V2_0P5_inst(.Q(Q),.CK(CK),.D(D),.SI(SI),.SE(SE));
   // spec_gates_begin
   not MGM_G0(MGM_W0,D);
   not MGM_G1(MGM_W1,SE);
   and MGM_G2(MGM_W2,MGM_W1,MGM_W0);
   not MGM_G3(MGM_W3,SI);
   and MGM_G4(ENABLE_NOT_D_AND_NOT_SE_AND_NOT_SI,MGM_W3,MGM_W2);
   not MGM_G5(MGM_W4,D);
   not MGM_G6(MGM_W5,SE);
   and MGM_G7(MGM_W6,MGM_W5,MGM_W4);
   and MGM_G8(ENABLE_NOT_D_AND_NOT_SE_AND_SI,SI,MGM_W6);
   not MGM_G9(MGM_W7,D);
   and MGM_G10(MGM_W8,SE,MGM_W7);
   not MGM_G11(MGM_W9,SI);
   and MGM_G12(ENABLE_NOT_D_AND_SE_AND_NOT_SI,MGM_W9,MGM_W8);
   not MGM_G13(MGM_W10,D);
   and MGM_G14(MGM_W11,SE,MGM_W10);
   and MGM_G15(ENABLE_NOT_D_AND_SE_AND_SI,SI,MGM_W11);
   not MGM_G16(MGM_W12,SE);
   and MGM_G17(MGM_W13,MGM_W12,D);
   not MGM_G18(MGM_W14,SI);
   and MGM_G19(ENABLE_D_AND_NOT_SE_AND_NOT_SI,MGM_W14,MGM_W13);
   not MGM_G20(MGM_W15,SE);
   and MGM_G21(MGM_W16,MGM_W15,D);
   and MGM_G22(ENABLE_D_AND_NOT_SE_AND_SI,SI,MGM_W16);
   and MGM_G23(MGM_W17,SE,D);
   not MGM_G24(MGM_W18,SI);
   and MGM_G25(ENABLE_D_AND_SE_AND_NOT_SI,MGM_W18,MGM_W17);
   and MGM_G26(MGM_W19,SE,D);
   and MGM_G27(ENABLE_D_AND_SE_AND_SI,SI,MGM_W19);
   not MGM_G28(MGM_W20,SE);
   not MGM_G29(MGM_W21,SI);
   and MGM_G30(ENABLE_NOT_SE_AND_NOT_SI,MGM_W21,MGM_W20);
   not MGM_G31(MGM_W22,SE);
   and MGM_G32(ENABLE_NOT_SE_AND_SI,SI,MGM_W22);
   not MGM_G33(MGM_W23,D);
   and MGM_G34(ENABLE_NOT_D_AND_SI,SI,MGM_W23);
   not MGM_G35(MGM_W24,SI);
   and MGM_G36(ENABLE_D_AND_NOT_SI,MGM_W24,D);
   not MGM_G37(MGM_W25,D);
   and MGM_G38(ENABLE_NOT_D_AND_SE,SE,MGM_W25);
   and MGM_G39(ENABLE_D_AND_SE,SE,D);
   // spec_gates_end
   // specify_block_begin
   specify

      if(D===1'b0 && SI===1'b1)
      // seq arc CK --> Q
      (posedge CK => (Q : SE))  = (1.0,1.0);
      
      if(SE===1'b0 && SI===1'b0)
      // seq arc CK --> Q
      (posedge CK => (Q : D))  = (1.0,1.0);
      
      if(D===1'b1 && SE===1'b0 && SI===1'b1 || D===1'b0 && SE===1'b1 && SI===1'b0)
      // seq arc CK --> Q
      (posedge CK => (Q : D))  = (1.0,1.0);
      
      if(D===1'b1 && SE===1'b1)
      // seq arc CK --> Q
      (posedge CK => (Q : SI))  = (1.0,1.0);
      
      ifnone
      // seq arc CK --> Q
      (posedge CK => (Q : D))  = (1.0,1.0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      // hold D-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),
      negedge D &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold D-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),
      posedge D &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup D-HL CK-LH
      $setup(negedge D &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup D-LH CK-LH
      $setup(posedge D &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold D-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_SE_AND_SI === 1'b1),
      negedge D &&& (ENABLE_NOT_SE_AND_SI === 1'b1),1.0);
      
      // hold D-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_SE_AND_SI === 1'b1),
      posedge D &&& (ENABLE_NOT_SE_AND_SI === 1'b1),1.0);
      
      // setup D-HL CK-LH
      $setup(negedge D &&& (ENABLE_NOT_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_SE_AND_SI === 1'b1),1.0);
      
      // setup D-LH CK-LH
      $setup(posedge D &&& (ENABLE_NOT_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_SE_AND_SI === 1'b1),1.0);
      
      // hold SE-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D_AND_SI === 1'b1),
      negedge SE &&& (ENABLE_NOT_D_AND_SI === 1'b1),1.0);
      
      // hold SE-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D_AND_SI === 1'b1),
      posedge SE &&& (ENABLE_NOT_D_AND_SI === 1'b1),1.0);
      
      // setup SE-HL CK-LH
      $setup(negedge SE &&& (ENABLE_NOT_D_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_SI === 1'b1),1.0);
      
      // setup SE-LH CK-LH
      $setup(posedge SE &&& (ENABLE_NOT_D_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_SI === 1'b1),1.0);
      
      // hold SE-HL CK-LH
      $hold(posedge CK &&& (ENABLE_D_AND_NOT_SI === 1'b1),
      negedge SE &&& (ENABLE_D_AND_NOT_SI === 1'b1),1.0);
      
      // hold SE-LH CK-LH
      $hold(posedge CK &&& (ENABLE_D_AND_NOT_SI === 1'b1),
      posedge SE &&& (ENABLE_D_AND_NOT_SI === 1'b1),1.0);
      
      // setup SE-HL CK-LH
      $setup(negedge SE &&& (ENABLE_D_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_D_AND_NOT_SI === 1'b1),1.0);
      
      // setup SE-LH CK-LH
      $setup(posedge SE &&& (ENABLE_D_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_D_AND_NOT_SI === 1'b1),1.0);
      
      // hold SI-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D_AND_SE === 1'b1),
      negedge SI &&& (ENABLE_NOT_D_AND_SE === 1'b1),1.0);
      
      // hold SI-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D_AND_SE === 1'b1),
      posedge SI &&& (ENABLE_NOT_D_AND_SE === 1'b1),1.0);
      
      // setup SI-HL CK-LH
      $setup(negedge SI &&& (ENABLE_NOT_D_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_SE === 1'b1),1.0);
      
      // setup SI-LH CK-LH
      $setup(posedge SI &&& (ENABLE_NOT_D_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_SE === 1'b1),1.0);
      
      // hold SI-HL CK-LH
      $hold(posedge CK &&& (ENABLE_D_AND_SE === 1'b1),
      negedge SI &&& (ENABLE_D_AND_SE === 1'b1),1.0);
      
      // hold SI-LH CK-LH
      $hold(posedge CK &&& (ENABLE_D_AND_SE === 1'b1),
      posedge SI &&& (ENABLE_D_AND_SE === 1'b1),1.0);
      
      // setup SI-HL CK-LH
      $setup(negedge SI &&& (ENABLE_D_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_D_AND_SE === 1'b1),1.0);
      
      // setup SI-LH CK-LH
      $setup(posedge SI &&& (ENABLE_D_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_D_AND_SE === 1'b1),1.0);
      
      // mpw CK_lh 
      $width(posedge CK,1.0,0);
      
      // mpw CK_hl 
      $width(negedge CK,1.0,0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_FSDPQ_V2_1( Q, CK, D, SI, SE );
input CK, D, SE, SI;
output Q;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_FSDPQ_V2_1_func SAEDRVT14_FSDPQ_V2_1_behav_inst(.Q(Q),.CK(CK),.D(D),.SI(SI),.SE(SE));
`else
   SAEDRVT14_FSDPQ_V2_1_func SAEDRVT14_FSDPQ_V2_1_inst(.Q(Q),.CK(CK),.D(D),.SI(SI),.SE(SE));
   // spec_gates_begin
   not MGM_G0(MGM_W0,D);
   not MGM_G1(MGM_W1,SE);
   and MGM_G2(MGM_W2,MGM_W1,MGM_W0);
   not MGM_G3(MGM_W3,SI);
   and MGM_G4(ENABLE_NOT_D_AND_NOT_SE_AND_NOT_SI,MGM_W3,MGM_W2);
   not MGM_G5(MGM_W4,D);
   not MGM_G6(MGM_W5,SE);
   and MGM_G7(MGM_W6,MGM_W5,MGM_W4);
   and MGM_G8(ENABLE_NOT_D_AND_NOT_SE_AND_SI,SI,MGM_W6);
   not MGM_G9(MGM_W7,D);
   and MGM_G10(MGM_W8,SE,MGM_W7);
   not MGM_G11(MGM_W9,SI);
   and MGM_G12(ENABLE_NOT_D_AND_SE_AND_NOT_SI,MGM_W9,MGM_W8);
   not MGM_G13(MGM_W10,D);
   and MGM_G14(MGM_W11,SE,MGM_W10);
   and MGM_G15(ENABLE_NOT_D_AND_SE_AND_SI,SI,MGM_W11);
   not MGM_G16(MGM_W12,SE);
   and MGM_G17(MGM_W13,MGM_W12,D);
   not MGM_G18(MGM_W14,SI);
   and MGM_G19(ENABLE_D_AND_NOT_SE_AND_NOT_SI,MGM_W14,MGM_W13);
   not MGM_G20(MGM_W15,SE);
   and MGM_G21(MGM_W16,MGM_W15,D);
   and MGM_G22(ENABLE_D_AND_NOT_SE_AND_SI,SI,MGM_W16);
   and MGM_G23(MGM_W17,SE,D);
   not MGM_G24(MGM_W18,SI);
   and MGM_G25(ENABLE_D_AND_SE_AND_NOT_SI,MGM_W18,MGM_W17);
   and MGM_G26(MGM_W19,SE,D);
   and MGM_G27(ENABLE_D_AND_SE_AND_SI,SI,MGM_W19);
   not MGM_G28(MGM_W20,SE);
   not MGM_G29(MGM_W21,SI);
   and MGM_G30(ENABLE_NOT_SE_AND_NOT_SI,MGM_W21,MGM_W20);
   not MGM_G31(MGM_W22,SE);
   and MGM_G32(ENABLE_NOT_SE_AND_SI,SI,MGM_W22);
   not MGM_G33(MGM_W23,D);
   and MGM_G34(ENABLE_NOT_D_AND_SI,SI,MGM_W23);
   not MGM_G35(MGM_W24,SI);
   and MGM_G36(ENABLE_D_AND_NOT_SI,MGM_W24,D);
   not MGM_G37(MGM_W25,D);
   and MGM_G38(ENABLE_NOT_D_AND_SE,SE,MGM_W25);
   and MGM_G39(ENABLE_D_AND_SE,SE,D);
   // spec_gates_end
   // specify_block_begin
   specify

      if(D===1'b0 && SI===1'b1)
      // seq arc CK --> Q
      (posedge CK => (Q : SE))  = (1.0,1.0);
      
      if(SE===1'b0 && SI===1'b0)
      // seq arc CK --> Q
      (posedge CK => (Q : D))  = (1.0,1.0);
      
      if(D===1'b1 && SE===1'b0 && SI===1'b1 || D===1'b0 && SE===1'b1 && SI===1'b0)
      // seq arc CK --> Q
      (posedge CK => (Q : D))  = (1.0,1.0);
      
      if(D===1'b1 && SE===1'b1)
      // seq arc CK --> Q
      (posedge CK => (Q : SI))  = (1.0,1.0);
      
      ifnone
      // seq arc CK --> Q
      (posedge CK => (Q : D))  = (1.0,1.0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      // hold D-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),
      negedge D &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold D-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),
      posedge D &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup D-HL CK-LH
      $setup(negedge D &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup D-LH CK-LH
      $setup(posedge D &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold D-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_SE_AND_SI === 1'b1),
      negedge D &&& (ENABLE_NOT_SE_AND_SI === 1'b1),1.0);
      
      // hold D-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_SE_AND_SI === 1'b1),
      posedge D &&& (ENABLE_NOT_SE_AND_SI === 1'b1),1.0);
      
      // setup D-HL CK-LH
      $setup(negedge D &&& (ENABLE_NOT_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_SE_AND_SI === 1'b1),1.0);
      
      // setup D-LH CK-LH
      $setup(posedge D &&& (ENABLE_NOT_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_SE_AND_SI === 1'b1),1.0);
      
      // hold SE-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D_AND_SI === 1'b1),
      negedge SE &&& (ENABLE_NOT_D_AND_SI === 1'b1),1.0);
      
      // hold SE-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D_AND_SI === 1'b1),
      posedge SE &&& (ENABLE_NOT_D_AND_SI === 1'b1),1.0);
      
      // setup SE-HL CK-LH
      $setup(negedge SE &&& (ENABLE_NOT_D_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_SI === 1'b1),1.0);
      
      // setup SE-LH CK-LH
      $setup(posedge SE &&& (ENABLE_NOT_D_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_SI === 1'b1),1.0);
      
      // hold SE-HL CK-LH
      $hold(posedge CK &&& (ENABLE_D_AND_NOT_SI === 1'b1),
      negedge SE &&& (ENABLE_D_AND_NOT_SI === 1'b1),1.0);
      
      // hold SE-LH CK-LH
      $hold(posedge CK &&& (ENABLE_D_AND_NOT_SI === 1'b1),
      posedge SE &&& (ENABLE_D_AND_NOT_SI === 1'b1),1.0);
      
      // setup SE-HL CK-LH
      $setup(negedge SE &&& (ENABLE_D_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_D_AND_NOT_SI === 1'b1),1.0);
      
      // setup SE-LH CK-LH
      $setup(posedge SE &&& (ENABLE_D_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_D_AND_NOT_SI === 1'b1),1.0);
      
      // hold SI-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D_AND_SE === 1'b1),
      negedge SI &&& (ENABLE_NOT_D_AND_SE === 1'b1),1.0);
      
      // hold SI-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D_AND_SE === 1'b1),
      posedge SI &&& (ENABLE_NOT_D_AND_SE === 1'b1),1.0);
      
      // setup SI-HL CK-LH
      $setup(negedge SI &&& (ENABLE_NOT_D_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_SE === 1'b1),1.0);
      
      // setup SI-LH CK-LH
      $setup(posedge SI &&& (ENABLE_NOT_D_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_SE === 1'b1),1.0);
      
      // hold SI-HL CK-LH
      $hold(posedge CK &&& (ENABLE_D_AND_SE === 1'b1),
      negedge SI &&& (ENABLE_D_AND_SE === 1'b1),1.0);
      
      // hold SI-LH CK-LH
      $hold(posedge CK &&& (ENABLE_D_AND_SE === 1'b1),
      posedge SI &&& (ENABLE_D_AND_SE === 1'b1),1.0);
      
      // setup SI-HL CK-LH
      $setup(negedge SI &&& (ENABLE_D_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_D_AND_SE === 1'b1),1.0);
      
      // setup SI-LH CK-LH
      $setup(posedge SI &&& (ENABLE_D_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_D_AND_SE === 1'b1),1.0);
      
      // mpw CK_lh 
      $width(posedge CK,1.0,0);
      
      // mpw CK_hl 
      $width(negedge CK,1.0,0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_FSDPQ_V2_2( Q, CK, D, SI, SE );
input CK, D, SE, SI;
output Q;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_FSDPQ_V2_2_func SAEDRVT14_FSDPQ_V2_2_behav_inst(.Q(Q),.CK(CK),.D(D),.SI(SI),.SE(SE));
`else
   SAEDRVT14_FSDPQ_V2_2_func SAEDRVT14_FSDPQ_V2_2_inst(.Q(Q),.CK(CK),.D(D),.SI(SI),.SE(SE));
   // spec_gates_begin
   not MGM_G0(MGM_W0,D);
   not MGM_G1(MGM_W1,SE);
   and MGM_G2(MGM_W2,MGM_W1,MGM_W0);
   not MGM_G3(MGM_W3,SI);
   and MGM_G4(ENABLE_NOT_D_AND_NOT_SE_AND_NOT_SI,MGM_W3,MGM_W2);
   not MGM_G5(MGM_W4,D);
   not MGM_G6(MGM_W5,SE);
   and MGM_G7(MGM_W6,MGM_W5,MGM_W4);
   and MGM_G8(ENABLE_NOT_D_AND_NOT_SE_AND_SI,SI,MGM_W6);
   not MGM_G9(MGM_W7,D);
   and MGM_G10(MGM_W8,SE,MGM_W7);
   not MGM_G11(MGM_W9,SI);
   and MGM_G12(ENABLE_NOT_D_AND_SE_AND_NOT_SI,MGM_W9,MGM_W8);
   not MGM_G13(MGM_W10,D);
   and MGM_G14(MGM_W11,SE,MGM_W10);
   and MGM_G15(ENABLE_NOT_D_AND_SE_AND_SI,SI,MGM_W11);
   not MGM_G16(MGM_W12,SE);
   and MGM_G17(MGM_W13,MGM_W12,D);
   not MGM_G18(MGM_W14,SI);
   and MGM_G19(ENABLE_D_AND_NOT_SE_AND_NOT_SI,MGM_W14,MGM_W13);
   not MGM_G20(MGM_W15,SE);
   and MGM_G21(MGM_W16,MGM_W15,D);
   and MGM_G22(ENABLE_D_AND_NOT_SE_AND_SI,SI,MGM_W16);
   and MGM_G23(MGM_W17,SE,D);
   not MGM_G24(MGM_W18,SI);
   and MGM_G25(ENABLE_D_AND_SE_AND_NOT_SI,MGM_W18,MGM_W17);
   and MGM_G26(MGM_W19,SE,D);
   and MGM_G27(ENABLE_D_AND_SE_AND_SI,SI,MGM_W19);
   not MGM_G28(MGM_W20,SE);
   not MGM_G29(MGM_W21,SI);
   and MGM_G30(ENABLE_NOT_SE_AND_NOT_SI,MGM_W21,MGM_W20);
   not MGM_G31(MGM_W22,SE);
   and MGM_G32(ENABLE_NOT_SE_AND_SI,SI,MGM_W22);
   not MGM_G33(MGM_W23,D);
   and MGM_G34(ENABLE_NOT_D_AND_SI,SI,MGM_W23);
   not MGM_G35(MGM_W24,SI);
   and MGM_G36(ENABLE_D_AND_NOT_SI,MGM_W24,D);
   not MGM_G37(MGM_W25,D);
   and MGM_G38(ENABLE_NOT_D_AND_SE,SE,MGM_W25);
   and MGM_G39(ENABLE_D_AND_SE,SE,D);
   // spec_gates_end
   // specify_block_begin
   specify

      if(D===1'b0 && SI===1'b1)
      // seq arc CK --> Q
      (posedge CK => (Q : SE))  = (1.0,1.0);
      
      if(SE===1'b0 && SI===1'b0)
      // seq arc CK --> Q
      (posedge CK => (Q : D))  = (1.0,1.0);
      
      if(D===1'b1 && SE===1'b0 && SI===1'b1 || D===1'b0 && SE===1'b1 && SI===1'b0)
      // seq arc CK --> Q
      (posedge CK => (Q : D))  = (1.0,1.0);
      
      if(D===1'b1 && SE===1'b1)
      // seq arc CK --> Q
      (posedge CK => (Q : SI))  = (1.0,1.0);
      
      ifnone
      // seq arc CK --> Q
      (posedge CK => (Q : D))  = (1.0,1.0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      // hold D-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),
      negedge D &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold D-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),
      posedge D &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup D-HL CK-LH
      $setup(negedge D &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup D-LH CK-LH
      $setup(posedge D &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold D-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_SE_AND_SI === 1'b1),
      negedge D &&& (ENABLE_NOT_SE_AND_SI === 1'b1),1.0);
      
      // hold D-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_SE_AND_SI === 1'b1),
      posedge D &&& (ENABLE_NOT_SE_AND_SI === 1'b1),1.0);
      
      // setup D-HL CK-LH
      $setup(negedge D &&& (ENABLE_NOT_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_SE_AND_SI === 1'b1),1.0);
      
      // setup D-LH CK-LH
      $setup(posedge D &&& (ENABLE_NOT_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_SE_AND_SI === 1'b1),1.0);
      
      // hold SE-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D_AND_SI === 1'b1),
      negedge SE &&& (ENABLE_NOT_D_AND_SI === 1'b1),1.0);
      
      // hold SE-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D_AND_SI === 1'b1),
      posedge SE &&& (ENABLE_NOT_D_AND_SI === 1'b1),1.0);
      
      // setup SE-HL CK-LH
      $setup(negedge SE &&& (ENABLE_NOT_D_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_SI === 1'b1),1.0);
      
      // setup SE-LH CK-LH
      $setup(posedge SE &&& (ENABLE_NOT_D_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_SI === 1'b1),1.0);
      
      // hold SE-HL CK-LH
      $hold(posedge CK &&& (ENABLE_D_AND_NOT_SI === 1'b1),
      negedge SE &&& (ENABLE_D_AND_NOT_SI === 1'b1),1.0);
      
      // hold SE-LH CK-LH
      $hold(posedge CK &&& (ENABLE_D_AND_NOT_SI === 1'b1),
      posedge SE &&& (ENABLE_D_AND_NOT_SI === 1'b1),1.0);
      
      // setup SE-HL CK-LH
      $setup(negedge SE &&& (ENABLE_D_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_D_AND_NOT_SI === 1'b1),1.0);
      
      // setup SE-LH CK-LH
      $setup(posedge SE &&& (ENABLE_D_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_D_AND_NOT_SI === 1'b1),1.0);
      
      // hold SI-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D_AND_SE === 1'b1),
      negedge SI &&& (ENABLE_NOT_D_AND_SE === 1'b1),1.0);
      
      // hold SI-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D_AND_SE === 1'b1),
      posedge SI &&& (ENABLE_NOT_D_AND_SE === 1'b1),1.0);
      
      // setup SI-HL CK-LH
      $setup(negedge SI &&& (ENABLE_NOT_D_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_SE === 1'b1),1.0);
      
      // setup SI-LH CK-LH
      $setup(posedge SI &&& (ENABLE_NOT_D_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_SE === 1'b1),1.0);
      
      // hold SI-HL CK-LH
      $hold(posedge CK &&& (ENABLE_D_AND_SE === 1'b1),
      negedge SI &&& (ENABLE_D_AND_SE === 1'b1),1.0);
      
      // hold SI-LH CK-LH
      $hold(posedge CK &&& (ENABLE_D_AND_SE === 1'b1),
      posedge SI &&& (ENABLE_D_AND_SE === 1'b1),1.0);
      
      // setup SI-HL CK-LH
      $setup(negedge SI &&& (ENABLE_D_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_D_AND_SE === 1'b1),1.0);
      
      // setup SI-LH CK-LH
      $setup(posedge SI &&& (ENABLE_D_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_D_AND_SE === 1'b1),1.0);
      
      // mpw CK_lh 
      $width(posedge CK,1.0,0);
      
      // mpw CK_hl 
      $width(negedge CK,1.0,0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_FSDPQ_V2_4( Q, CK, D, SI, SE );
input CK, D, SE, SI;
output Q;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_FSDPQ_V2_4_func SAEDRVT14_FSDPQ_V2_4_behav_inst(.Q(Q),.CK(CK),.D(D),.SI(SI),.SE(SE));
`else
   SAEDRVT14_FSDPQ_V2_4_func SAEDRVT14_FSDPQ_V2_4_inst(.Q(Q),.CK(CK),.D(D),.SI(SI),.SE(SE));
   // spec_gates_begin
   not MGM_G0(MGM_W0,D);
   not MGM_G1(MGM_W1,SE);
   and MGM_G2(MGM_W2,MGM_W1,MGM_W0);
   not MGM_G3(MGM_W3,SI);
   and MGM_G4(ENABLE_NOT_D_AND_NOT_SE_AND_NOT_SI,MGM_W3,MGM_W2);
   not MGM_G5(MGM_W4,D);
   not MGM_G6(MGM_W5,SE);
   and MGM_G7(MGM_W6,MGM_W5,MGM_W4);
   and MGM_G8(ENABLE_NOT_D_AND_NOT_SE_AND_SI,SI,MGM_W6);
   not MGM_G9(MGM_W7,D);
   and MGM_G10(MGM_W8,SE,MGM_W7);
   not MGM_G11(MGM_W9,SI);
   and MGM_G12(ENABLE_NOT_D_AND_SE_AND_NOT_SI,MGM_W9,MGM_W8);
   not MGM_G13(MGM_W10,D);
   and MGM_G14(MGM_W11,SE,MGM_W10);
   and MGM_G15(ENABLE_NOT_D_AND_SE_AND_SI,SI,MGM_W11);
   not MGM_G16(MGM_W12,SE);
   and MGM_G17(MGM_W13,MGM_W12,D);
   not MGM_G18(MGM_W14,SI);
   and MGM_G19(ENABLE_D_AND_NOT_SE_AND_NOT_SI,MGM_W14,MGM_W13);
   not MGM_G20(MGM_W15,SE);
   and MGM_G21(MGM_W16,MGM_W15,D);
   and MGM_G22(ENABLE_D_AND_NOT_SE_AND_SI,SI,MGM_W16);
   and MGM_G23(MGM_W17,SE,D);
   not MGM_G24(MGM_W18,SI);
   and MGM_G25(ENABLE_D_AND_SE_AND_NOT_SI,MGM_W18,MGM_W17);
   and MGM_G26(MGM_W19,SE,D);
   and MGM_G27(ENABLE_D_AND_SE_AND_SI,SI,MGM_W19);
   not MGM_G28(MGM_W20,SE);
   not MGM_G29(MGM_W21,SI);
   and MGM_G30(ENABLE_NOT_SE_AND_NOT_SI,MGM_W21,MGM_W20);
   not MGM_G31(MGM_W22,SE);
   and MGM_G32(ENABLE_NOT_SE_AND_SI,SI,MGM_W22);
   not MGM_G33(MGM_W23,D);
   and MGM_G34(ENABLE_NOT_D_AND_SI,SI,MGM_W23);
   not MGM_G35(MGM_W24,SI);
   and MGM_G36(ENABLE_D_AND_NOT_SI,MGM_W24,D);
   not MGM_G37(MGM_W25,D);
   and MGM_G38(ENABLE_NOT_D_AND_SE,SE,MGM_W25);
   and MGM_G39(ENABLE_D_AND_SE,SE,D);
   // spec_gates_end
   // specify_block_begin
   specify

      if(D===1'b0 && SI===1'b1)
      // seq arc CK --> Q
      (posedge CK => (Q : SE))  = (1.0,1.0);
      
      if(SE===1'b0 && SI===1'b0)
      // seq arc CK --> Q
      (posedge CK => (Q : D))  = (1.0,1.0);
      
      if(D===1'b1 && SE===1'b0 && SI===1'b1 || D===1'b0 && SE===1'b1 && SI===1'b0)
      // seq arc CK --> Q
      (posedge CK => (Q : D))  = (1.0,1.0);
      
      if(D===1'b1 && SE===1'b1)
      // seq arc CK --> Q
      (posedge CK => (Q : SI))  = (1.0,1.0);
      
      ifnone
      // seq arc CK --> Q
      (posedge CK => (Q : D))  = (1.0,1.0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      // hold D-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),
      negedge D &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold D-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),
      posedge D &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup D-HL CK-LH
      $setup(negedge D &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup D-LH CK-LH
      $setup(posedge D &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold D-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_SE_AND_SI === 1'b1),
      negedge D &&& (ENABLE_NOT_SE_AND_SI === 1'b1),1.0);
      
      // hold D-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_SE_AND_SI === 1'b1),
      posedge D &&& (ENABLE_NOT_SE_AND_SI === 1'b1),1.0);
      
      // setup D-HL CK-LH
      $setup(negedge D &&& (ENABLE_NOT_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_SE_AND_SI === 1'b1),1.0);
      
      // setup D-LH CK-LH
      $setup(posedge D &&& (ENABLE_NOT_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_SE_AND_SI === 1'b1),1.0);
      
      // hold SE-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D_AND_SI === 1'b1),
      negedge SE &&& (ENABLE_NOT_D_AND_SI === 1'b1),1.0);
      
      // hold SE-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D_AND_SI === 1'b1),
      posedge SE &&& (ENABLE_NOT_D_AND_SI === 1'b1),1.0);
      
      // setup SE-HL CK-LH
      $setup(negedge SE &&& (ENABLE_NOT_D_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_SI === 1'b1),1.0);
      
      // setup SE-LH CK-LH
      $setup(posedge SE &&& (ENABLE_NOT_D_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_SI === 1'b1),1.0);
      
      // hold SE-HL CK-LH
      $hold(posedge CK &&& (ENABLE_D_AND_NOT_SI === 1'b1),
      negedge SE &&& (ENABLE_D_AND_NOT_SI === 1'b1),1.0);
      
      // hold SE-LH CK-LH
      $hold(posedge CK &&& (ENABLE_D_AND_NOT_SI === 1'b1),
      posedge SE &&& (ENABLE_D_AND_NOT_SI === 1'b1),1.0);
      
      // setup SE-HL CK-LH
      $setup(negedge SE &&& (ENABLE_D_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_D_AND_NOT_SI === 1'b1),1.0);
      
      // setup SE-LH CK-LH
      $setup(posedge SE &&& (ENABLE_D_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_D_AND_NOT_SI === 1'b1),1.0);
      
      // hold SI-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D_AND_SE === 1'b1),
      negedge SI &&& (ENABLE_NOT_D_AND_SE === 1'b1),1.0);
      
      // hold SI-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D_AND_SE === 1'b1),
      posedge SI &&& (ENABLE_NOT_D_AND_SE === 1'b1),1.0);
      
      // setup SI-HL CK-LH
      $setup(negedge SI &&& (ENABLE_NOT_D_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_SE === 1'b1),1.0);
      
      // setup SI-LH CK-LH
      $setup(posedge SI &&& (ENABLE_NOT_D_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_SE === 1'b1),1.0);
      
      // hold SI-HL CK-LH
      $hold(posedge CK &&& (ENABLE_D_AND_SE === 1'b1),
      negedge SI &&& (ENABLE_D_AND_SE === 1'b1),1.0);
      
      // hold SI-LH CK-LH
      $hold(posedge CK &&& (ENABLE_D_AND_SE === 1'b1),
      posedge SI &&& (ENABLE_D_AND_SE === 1'b1),1.0);
      
      // setup SI-HL CK-LH
      $setup(negedge SI &&& (ENABLE_D_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_D_AND_SE === 1'b1),1.0);
      
      // setup SI-LH CK-LH
      $setup(posedge SI &&& (ENABLE_D_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_D_AND_SE === 1'b1),1.0);
      
      // mpw CK_lh 
      $width(posedge CK,1.0,0);
      
      // mpw CK_hl 
      $width(negedge CK,1.0,0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_FSDPQ_V3_1( Q, CK, D, SI, SE );
input CK, D, SE, SI;
output Q;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_FSDPQ_V3_1_func SAEDRVT14_FSDPQ_V3_1_behav_inst(.Q(Q),.CK(CK),.D(D),.SI(SI),.SE(SE));
`else
   SAEDRVT14_FSDPQ_V3_1_func SAEDRVT14_FSDPQ_V3_1_inst(.Q(Q),.CK(CK),.D(D),.SI(SI),.SE(SE));
   // spec_gates_begin
   not MGM_G0(MGM_W0,D);
   not MGM_G1(MGM_W1,SE);
   and MGM_G2(MGM_W2,MGM_W1,MGM_W0);
   not MGM_G3(MGM_W3,SI);
   and MGM_G4(ENABLE_NOT_D_AND_NOT_SE_AND_NOT_SI,MGM_W3,MGM_W2);
   not MGM_G5(MGM_W4,D);
   not MGM_G6(MGM_W5,SE);
   and MGM_G7(MGM_W6,MGM_W5,MGM_W4);
   and MGM_G8(ENABLE_NOT_D_AND_NOT_SE_AND_SI,SI,MGM_W6);
   not MGM_G9(MGM_W7,D);
   and MGM_G10(MGM_W8,SE,MGM_W7);
   not MGM_G11(MGM_W9,SI);
   and MGM_G12(ENABLE_NOT_D_AND_SE_AND_NOT_SI,MGM_W9,MGM_W8);
   not MGM_G13(MGM_W10,D);
   and MGM_G14(MGM_W11,SE,MGM_W10);
   and MGM_G15(ENABLE_NOT_D_AND_SE_AND_SI,SI,MGM_W11);
   not MGM_G16(MGM_W12,SE);
   and MGM_G17(MGM_W13,MGM_W12,D);
   not MGM_G18(MGM_W14,SI);
   and MGM_G19(ENABLE_D_AND_NOT_SE_AND_NOT_SI,MGM_W14,MGM_W13);
   not MGM_G20(MGM_W15,SE);
   and MGM_G21(MGM_W16,MGM_W15,D);
   and MGM_G22(ENABLE_D_AND_NOT_SE_AND_SI,SI,MGM_W16);
   and MGM_G23(MGM_W17,SE,D);
   not MGM_G24(MGM_W18,SI);
   and MGM_G25(ENABLE_D_AND_SE_AND_NOT_SI,MGM_W18,MGM_W17);
   and MGM_G26(MGM_W19,SE,D);
   and MGM_G27(ENABLE_D_AND_SE_AND_SI,SI,MGM_W19);
   not MGM_G28(MGM_W20,SE);
   not MGM_G29(MGM_W21,SI);
   and MGM_G30(ENABLE_NOT_SE_AND_NOT_SI,MGM_W21,MGM_W20);
   not MGM_G31(MGM_W22,SE);
   and MGM_G32(ENABLE_NOT_SE_AND_SI,SI,MGM_W22);
   not MGM_G33(MGM_W23,D);
   and MGM_G34(ENABLE_NOT_D_AND_SI,SI,MGM_W23);
   not MGM_G35(MGM_W24,SI);
   and MGM_G36(ENABLE_D_AND_NOT_SI,MGM_W24,D);
   not MGM_G37(MGM_W25,D);
   and MGM_G38(ENABLE_NOT_D_AND_SE,SE,MGM_W25);
   and MGM_G39(ENABLE_D_AND_SE,SE,D);
   // spec_gates_end
   // specify_block_begin
   specify

      if(D===1'b0 && SI===1'b1)
      // seq arc CK --> Q
      (posedge CK => (Q : SE))  = (1.0,1.0);
      
      if(SE===1'b0 && SI===1'b0)
      // seq arc CK --> Q
      (posedge CK => (Q : D))  = (1.0,1.0);
      
      if(D===1'b1 && SE===1'b0 && SI===1'b1 || D===1'b0 && SE===1'b1 && SI===1'b0)
      // seq arc CK --> Q
      (posedge CK => (Q : D))  = (1.0,1.0);
      
      if(D===1'b1 && SE===1'b1)
      // seq arc CK --> Q
      (posedge CK => (Q : SI))  = (1.0,1.0);
      
      ifnone
      // seq arc CK --> Q
      (posedge CK => (Q : D))  = (1.0,1.0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      // hold D-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),
      negedge D &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold D-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),
      posedge D &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup D-HL CK-LH
      $setup(negedge D &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup D-LH CK-LH
      $setup(posedge D &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold D-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_SE_AND_SI === 1'b1),
      negedge D &&& (ENABLE_NOT_SE_AND_SI === 1'b1),1.0);
      
      // hold D-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_SE_AND_SI === 1'b1),
      posedge D &&& (ENABLE_NOT_SE_AND_SI === 1'b1),1.0);
      
      // setup D-HL CK-LH
      $setup(negedge D &&& (ENABLE_NOT_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_SE_AND_SI === 1'b1),1.0);
      
      // setup D-LH CK-LH
      $setup(posedge D &&& (ENABLE_NOT_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_SE_AND_SI === 1'b1),1.0);
      
      // hold SE-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D_AND_SI === 1'b1),
      negedge SE &&& (ENABLE_NOT_D_AND_SI === 1'b1),1.0);
      
      // hold SE-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D_AND_SI === 1'b1),
      posedge SE &&& (ENABLE_NOT_D_AND_SI === 1'b1),1.0);
      
      // setup SE-HL CK-LH
      $setup(negedge SE &&& (ENABLE_NOT_D_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_SI === 1'b1),1.0);
      
      // setup SE-LH CK-LH
      $setup(posedge SE &&& (ENABLE_NOT_D_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_SI === 1'b1),1.0);
      
      // hold SE-HL CK-LH
      $hold(posedge CK &&& (ENABLE_D_AND_NOT_SI === 1'b1),
      negedge SE &&& (ENABLE_D_AND_NOT_SI === 1'b1),1.0);
      
      // hold SE-LH CK-LH
      $hold(posedge CK &&& (ENABLE_D_AND_NOT_SI === 1'b1),
      posedge SE &&& (ENABLE_D_AND_NOT_SI === 1'b1),1.0);
      
      // setup SE-HL CK-LH
      $setup(negedge SE &&& (ENABLE_D_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_D_AND_NOT_SI === 1'b1),1.0);
      
      // setup SE-LH CK-LH
      $setup(posedge SE &&& (ENABLE_D_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_D_AND_NOT_SI === 1'b1),1.0);
      
      // hold SI-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D_AND_SE === 1'b1),
      negedge SI &&& (ENABLE_NOT_D_AND_SE === 1'b1),1.0);
      
      // hold SI-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D_AND_SE === 1'b1),
      posedge SI &&& (ENABLE_NOT_D_AND_SE === 1'b1),1.0);
      
      // setup SI-HL CK-LH
      $setup(negedge SI &&& (ENABLE_NOT_D_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_SE === 1'b1),1.0);
      
      // setup SI-LH CK-LH
      $setup(posedge SI &&& (ENABLE_NOT_D_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_SE === 1'b1),1.0);
      
      // hold SI-HL CK-LH
      $hold(posedge CK &&& (ENABLE_D_AND_SE === 1'b1),
      negedge SI &&& (ENABLE_D_AND_SE === 1'b1),1.0);
      
      // hold SI-LH CK-LH
      $hold(posedge CK &&& (ENABLE_D_AND_SE === 1'b1),
      posedge SI &&& (ENABLE_D_AND_SE === 1'b1),1.0);
      
      // setup SI-HL CK-LH
      $setup(negedge SI &&& (ENABLE_D_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_D_AND_SE === 1'b1),1.0);
      
      // setup SI-LH CK-LH
      $setup(posedge SI &&& (ENABLE_D_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_D_AND_SE === 1'b1),1.0);
      
      // mpw CK_lh 
      $width(posedge CK,1.0,0);
      
      // mpw CK_hl 
      $width(negedge CK,1.0,0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_FSDPQ_V3_2( Q, CK, D, SI, SE );
input CK, D, SE, SI;
output Q;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_FSDPQ_V3_2_func SAEDRVT14_FSDPQ_V3_2_behav_inst(.Q(Q),.CK(CK),.D(D),.SI(SI),.SE(SE));
`else
   SAEDRVT14_FSDPQ_V3_2_func SAEDRVT14_FSDPQ_V3_2_inst(.Q(Q),.CK(CK),.D(D),.SI(SI),.SE(SE));
   // spec_gates_begin
   not MGM_G0(MGM_W0,D);
   not MGM_G1(MGM_W1,SE);
   and MGM_G2(MGM_W2,MGM_W1,MGM_W0);
   not MGM_G3(MGM_W3,SI);
   and MGM_G4(ENABLE_NOT_D_AND_NOT_SE_AND_NOT_SI,MGM_W3,MGM_W2);
   not MGM_G5(MGM_W4,D);
   not MGM_G6(MGM_W5,SE);
   and MGM_G7(MGM_W6,MGM_W5,MGM_W4);
   and MGM_G8(ENABLE_NOT_D_AND_NOT_SE_AND_SI,SI,MGM_W6);
   not MGM_G9(MGM_W7,D);
   and MGM_G10(MGM_W8,SE,MGM_W7);
   not MGM_G11(MGM_W9,SI);
   and MGM_G12(ENABLE_NOT_D_AND_SE_AND_NOT_SI,MGM_W9,MGM_W8);
   not MGM_G13(MGM_W10,D);
   and MGM_G14(MGM_W11,SE,MGM_W10);
   and MGM_G15(ENABLE_NOT_D_AND_SE_AND_SI,SI,MGM_W11);
   not MGM_G16(MGM_W12,SE);
   and MGM_G17(MGM_W13,MGM_W12,D);
   not MGM_G18(MGM_W14,SI);
   and MGM_G19(ENABLE_D_AND_NOT_SE_AND_NOT_SI,MGM_W14,MGM_W13);
   not MGM_G20(MGM_W15,SE);
   and MGM_G21(MGM_W16,MGM_W15,D);
   and MGM_G22(ENABLE_D_AND_NOT_SE_AND_SI,SI,MGM_W16);
   and MGM_G23(MGM_W17,SE,D);
   not MGM_G24(MGM_W18,SI);
   and MGM_G25(ENABLE_D_AND_SE_AND_NOT_SI,MGM_W18,MGM_W17);
   and MGM_G26(MGM_W19,SE,D);
   and MGM_G27(ENABLE_D_AND_SE_AND_SI,SI,MGM_W19);
   not MGM_G28(MGM_W20,SE);
   not MGM_G29(MGM_W21,SI);
   and MGM_G30(ENABLE_NOT_SE_AND_NOT_SI,MGM_W21,MGM_W20);
   not MGM_G31(MGM_W22,SE);
   and MGM_G32(ENABLE_NOT_SE_AND_SI,SI,MGM_W22);
   not MGM_G33(MGM_W23,D);
   and MGM_G34(ENABLE_NOT_D_AND_SI,SI,MGM_W23);
   not MGM_G35(MGM_W24,SI);
   and MGM_G36(ENABLE_D_AND_NOT_SI,MGM_W24,D);
   not MGM_G37(MGM_W25,D);
   and MGM_G38(ENABLE_NOT_D_AND_SE,SE,MGM_W25);
   and MGM_G39(ENABLE_D_AND_SE,SE,D);
   // spec_gates_end
   // specify_block_begin
   specify

      if(D===1'b0 && SI===1'b1)
      // seq arc CK --> Q
      (posedge CK => (Q : SE))  = (1.0,1.0);
      
      if(SE===1'b0 && SI===1'b0)
      // seq arc CK --> Q
      (posedge CK => (Q : D))  = (1.0,1.0);
      
      if(D===1'b1 && SE===1'b0 && SI===1'b1 || D===1'b0 && SE===1'b1 && SI===1'b0)
      // seq arc CK --> Q
      (posedge CK => (Q : D))  = (1.0,1.0);
      
      if(D===1'b1 && SE===1'b1)
      // seq arc CK --> Q
      (posedge CK => (Q : SI))  = (1.0,1.0);
      
      ifnone
      // seq arc CK --> Q
      (posedge CK => (Q : D))  = (1.0,1.0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      // hold D-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),
      negedge D &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold D-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),
      posedge D &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup D-HL CK-LH
      $setup(negedge D &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup D-LH CK-LH
      $setup(posedge D &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold D-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_SE_AND_SI === 1'b1),
      negedge D &&& (ENABLE_NOT_SE_AND_SI === 1'b1),1.0);
      
      // hold D-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_SE_AND_SI === 1'b1),
      posedge D &&& (ENABLE_NOT_SE_AND_SI === 1'b1),1.0);
      
      // setup D-HL CK-LH
      $setup(negedge D &&& (ENABLE_NOT_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_SE_AND_SI === 1'b1),1.0);
      
      // setup D-LH CK-LH
      $setup(posedge D &&& (ENABLE_NOT_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_SE_AND_SI === 1'b1),1.0);
      
      // hold SE-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D_AND_SI === 1'b1),
      negedge SE &&& (ENABLE_NOT_D_AND_SI === 1'b1),1.0);
      
      // hold SE-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D_AND_SI === 1'b1),
      posedge SE &&& (ENABLE_NOT_D_AND_SI === 1'b1),1.0);
      
      // setup SE-HL CK-LH
      $setup(negedge SE &&& (ENABLE_NOT_D_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_SI === 1'b1),1.0);
      
      // setup SE-LH CK-LH
      $setup(posedge SE &&& (ENABLE_NOT_D_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_SI === 1'b1),1.0);
      
      // hold SE-HL CK-LH
      $hold(posedge CK &&& (ENABLE_D_AND_NOT_SI === 1'b1),
      negedge SE &&& (ENABLE_D_AND_NOT_SI === 1'b1),1.0);
      
      // hold SE-LH CK-LH
      $hold(posedge CK &&& (ENABLE_D_AND_NOT_SI === 1'b1),
      posedge SE &&& (ENABLE_D_AND_NOT_SI === 1'b1),1.0);
      
      // setup SE-HL CK-LH
      $setup(negedge SE &&& (ENABLE_D_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_D_AND_NOT_SI === 1'b1),1.0);
      
      // setup SE-LH CK-LH
      $setup(posedge SE &&& (ENABLE_D_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_D_AND_NOT_SI === 1'b1),1.0);
      
      // hold SI-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D_AND_SE === 1'b1),
      negedge SI &&& (ENABLE_NOT_D_AND_SE === 1'b1),1.0);
      
      // hold SI-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D_AND_SE === 1'b1),
      posedge SI &&& (ENABLE_NOT_D_AND_SE === 1'b1),1.0);
      
      // setup SI-HL CK-LH
      $setup(negedge SI &&& (ENABLE_NOT_D_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_SE === 1'b1),1.0);
      
      // setup SI-LH CK-LH
      $setup(posedge SI &&& (ENABLE_NOT_D_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_SE === 1'b1),1.0);
      
      // hold SI-HL CK-LH
      $hold(posedge CK &&& (ENABLE_D_AND_SE === 1'b1),
      negedge SI &&& (ENABLE_D_AND_SE === 1'b1),1.0);
      
      // hold SI-LH CK-LH
      $hold(posedge CK &&& (ENABLE_D_AND_SE === 1'b1),
      posedge SI &&& (ENABLE_D_AND_SE === 1'b1),1.0);
      
      // setup SI-HL CK-LH
      $setup(negedge SI &&& (ENABLE_D_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_D_AND_SE === 1'b1),1.0);
      
      // setup SI-LH CK-LH
      $setup(posedge SI &&& (ENABLE_D_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_D_AND_SE === 1'b1),1.0);
      
      // mpw CK_lh 
      $width(posedge CK,1.0,0);
      
      // mpw CK_hl 
      $width(negedge CK,1.0,0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_FSDPQ_V3_4( Q, CK, D, SI, SE );
input CK, D, SE, SI;
output Q;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_FSDPQ_V3_4_func SAEDRVT14_FSDPQ_V3_4_behav_inst(.Q(Q),.CK(CK),.D(D),.SI(SI),.SE(SE));
`else
   SAEDRVT14_FSDPQ_V3_4_func SAEDRVT14_FSDPQ_V3_4_inst(.Q(Q),.CK(CK),.D(D),.SI(SI),.SE(SE));
   // spec_gates_begin
   not MGM_G0(MGM_W0,D);
   not MGM_G1(MGM_W1,SE);
   and MGM_G2(MGM_W2,MGM_W1,MGM_W0);
   not MGM_G3(MGM_W3,SI);
   and MGM_G4(ENABLE_NOT_D_AND_NOT_SE_AND_NOT_SI,MGM_W3,MGM_W2);
   not MGM_G5(MGM_W4,D);
   not MGM_G6(MGM_W5,SE);
   and MGM_G7(MGM_W6,MGM_W5,MGM_W4);
   and MGM_G8(ENABLE_NOT_D_AND_NOT_SE_AND_SI,SI,MGM_W6);
   not MGM_G9(MGM_W7,D);
   and MGM_G10(MGM_W8,SE,MGM_W7);
   not MGM_G11(MGM_W9,SI);
   and MGM_G12(ENABLE_NOT_D_AND_SE_AND_NOT_SI,MGM_W9,MGM_W8);
   not MGM_G13(MGM_W10,D);
   and MGM_G14(MGM_W11,SE,MGM_W10);
   and MGM_G15(ENABLE_NOT_D_AND_SE_AND_SI,SI,MGM_W11);
   not MGM_G16(MGM_W12,SE);
   and MGM_G17(MGM_W13,MGM_W12,D);
   not MGM_G18(MGM_W14,SI);
   and MGM_G19(ENABLE_D_AND_NOT_SE_AND_NOT_SI,MGM_W14,MGM_W13);
   not MGM_G20(MGM_W15,SE);
   and MGM_G21(MGM_W16,MGM_W15,D);
   and MGM_G22(ENABLE_D_AND_NOT_SE_AND_SI,SI,MGM_W16);
   and MGM_G23(MGM_W17,SE,D);
   not MGM_G24(MGM_W18,SI);
   and MGM_G25(ENABLE_D_AND_SE_AND_NOT_SI,MGM_W18,MGM_W17);
   and MGM_G26(MGM_W19,SE,D);
   and MGM_G27(ENABLE_D_AND_SE_AND_SI,SI,MGM_W19);
   not MGM_G28(MGM_W20,SE);
   not MGM_G29(MGM_W21,SI);
   and MGM_G30(ENABLE_NOT_SE_AND_NOT_SI,MGM_W21,MGM_W20);
   not MGM_G31(MGM_W22,SE);
   and MGM_G32(ENABLE_NOT_SE_AND_SI,SI,MGM_W22);
   not MGM_G33(MGM_W23,D);
   and MGM_G34(ENABLE_NOT_D_AND_SI,SI,MGM_W23);
   not MGM_G35(MGM_W24,SI);
   and MGM_G36(ENABLE_D_AND_NOT_SI,MGM_W24,D);
   not MGM_G37(MGM_W25,D);
   and MGM_G38(ENABLE_NOT_D_AND_SE,SE,MGM_W25);
   and MGM_G39(ENABLE_D_AND_SE,SE,D);
   // spec_gates_end
   // specify_block_begin
   specify

      if(D===1'b0 && SI===1'b1)
      // seq arc CK --> Q
      (posedge CK => (Q : SE))  = (1.0,1.0);
      
      if(SE===1'b0 && SI===1'b0)
      // seq arc CK --> Q
      (posedge CK => (Q : D))  = (1.0,1.0);
      
      if(D===1'b1 && SE===1'b0 && SI===1'b1 || D===1'b0 && SE===1'b1 && SI===1'b0)
      // seq arc CK --> Q
      (posedge CK => (Q : D))  = (1.0,1.0);
      
      if(D===1'b1 && SE===1'b1)
      // seq arc CK --> Q
      (posedge CK => (Q : SI))  = (1.0,1.0);
      
      ifnone
      // seq arc CK --> Q
      (posedge CK => (Q : D))  = (1.0,1.0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      // hold D-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),
      negedge D &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold D-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),
      posedge D &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup D-HL CK-LH
      $setup(negedge D &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup D-LH CK-LH
      $setup(posedge D &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold D-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_SE_AND_SI === 1'b1),
      negedge D &&& (ENABLE_NOT_SE_AND_SI === 1'b1),1.0);
      
      // hold D-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_SE_AND_SI === 1'b1),
      posedge D &&& (ENABLE_NOT_SE_AND_SI === 1'b1),1.0);
      
      // setup D-HL CK-LH
      $setup(negedge D &&& (ENABLE_NOT_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_SE_AND_SI === 1'b1),1.0);
      
      // setup D-LH CK-LH
      $setup(posedge D &&& (ENABLE_NOT_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_SE_AND_SI === 1'b1),1.0);
      
      // hold SE-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D_AND_SI === 1'b1),
      negedge SE &&& (ENABLE_NOT_D_AND_SI === 1'b1),1.0);
      
      // hold SE-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D_AND_SI === 1'b1),
      posedge SE &&& (ENABLE_NOT_D_AND_SI === 1'b1),1.0);
      
      // setup SE-HL CK-LH
      $setup(negedge SE &&& (ENABLE_NOT_D_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_SI === 1'b1),1.0);
      
      // setup SE-LH CK-LH
      $setup(posedge SE &&& (ENABLE_NOT_D_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_SI === 1'b1),1.0);
      
      // hold SE-HL CK-LH
      $hold(posedge CK &&& (ENABLE_D_AND_NOT_SI === 1'b1),
      negedge SE &&& (ENABLE_D_AND_NOT_SI === 1'b1),1.0);
      
      // hold SE-LH CK-LH
      $hold(posedge CK &&& (ENABLE_D_AND_NOT_SI === 1'b1),
      posedge SE &&& (ENABLE_D_AND_NOT_SI === 1'b1),1.0);
      
      // setup SE-HL CK-LH
      $setup(negedge SE &&& (ENABLE_D_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_D_AND_NOT_SI === 1'b1),1.0);
      
      // setup SE-LH CK-LH
      $setup(posedge SE &&& (ENABLE_D_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_D_AND_NOT_SI === 1'b1),1.0);
      
      // hold SI-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D_AND_SE === 1'b1),
      negedge SI &&& (ENABLE_NOT_D_AND_SE === 1'b1),1.0);
      
      // hold SI-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D_AND_SE === 1'b1),
      posedge SI &&& (ENABLE_NOT_D_AND_SE === 1'b1),1.0);
      
      // setup SI-HL CK-LH
      $setup(negedge SI &&& (ENABLE_NOT_D_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_SE === 1'b1),1.0);
      
      // setup SI-LH CK-LH
      $setup(posedge SI &&& (ENABLE_NOT_D_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_SE === 1'b1),1.0);
      
      // hold SI-HL CK-LH
      $hold(posedge CK &&& (ENABLE_D_AND_SE === 1'b1),
      negedge SI &&& (ENABLE_D_AND_SE === 1'b1),1.0);
      
      // hold SI-LH CK-LH
      $hold(posedge CK &&& (ENABLE_D_AND_SE === 1'b1),
      posedge SI &&& (ENABLE_D_AND_SE === 1'b1),1.0);
      
      // setup SI-HL CK-LH
      $setup(negedge SI &&& (ENABLE_D_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_D_AND_SE === 1'b1),1.0);
      
      // setup SI-LH CK-LH
      $setup(posedge SI &&& (ENABLE_D_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_D_AND_SE === 1'b1),1.0);
      
      // mpw CK_lh 
      $width(posedge CK,1.0,0);
      
      // mpw CK_hl 
      $width(negedge CK,1.0,0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_FSDPRBQ_V2LP_0P5( Q, CK, D, SI, SE, RD );
input CK, D, RD, SE, SI;
output Q;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_FSDPRBQ_V2LP_0P5_func SAEDRVT14_FSDPRBQ_V2LP_0P5_behav_inst(.Q(Q),.CK(CK),.D(D),.SI(SI),.SE(SE),.RD(RD));
`else
   SAEDRVT14_FSDPRBQ_V2LP_0P5_func SAEDRVT14_FSDPRBQ_V2LP_0P5_inst(.Q(Q),.CK(CK),.D(D),.SI(SI),.SE(SE),.RD(RD));
   // spec_gates_begin
   not MGM_G0(MGM_W0,D);
   and MGM_G1(MGM_W1,RD,MGM_W0);
   not MGM_G2(MGM_W2,SE);
   and MGM_G3(MGM_W3,MGM_W2,MGM_W1);
   not MGM_G4(MGM_W4,SI);
   and MGM_G5(ENABLE_NOT_D_AND_RD_AND_NOT_SE_AND_NOT_SI,MGM_W4,MGM_W3);
   not MGM_G6(MGM_W5,D);
   and MGM_G7(MGM_W6,RD,MGM_W5);
   not MGM_G8(MGM_W7,SE);
   and MGM_G9(MGM_W8,MGM_W7,MGM_W6);
   and MGM_G10(ENABLE_NOT_D_AND_RD_AND_NOT_SE_AND_SI,SI,MGM_W8);
   not MGM_G11(MGM_W9,D);
   and MGM_G12(MGM_W10,RD,MGM_W9);
   and MGM_G13(MGM_W11,SE,MGM_W10);
   not MGM_G14(MGM_W12,SI);
   and MGM_G15(ENABLE_NOT_D_AND_RD_AND_SE_AND_NOT_SI,MGM_W12,MGM_W11);
   not MGM_G16(MGM_W13,D);
   and MGM_G17(MGM_W14,RD,MGM_W13);
   and MGM_G18(MGM_W15,SE,MGM_W14);
   and MGM_G19(ENABLE_NOT_D_AND_RD_AND_SE_AND_SI,SI,MGM_W15);
   and MGM_G20(MGM_W16,RD,D);
   not MGM_G21(MGM_W17,SE);
   and MGM_G22(MGM_W18,MGM_W17,MGM_W16);
   not MGM_G23(MGM_W19,SI);
   and MGM_G24(ENABLE_D_AND_RD_AND_NOT_SE_AND_NOT_SI,MGM_W19,MGM_W18);
   and MGM_G25(MGM_W20,RD,D);
   not MGM_G26(MGM_W21,SE);
   and MGM_G27(MGM_W22,MGM_W21,MGM_W20);
   and MGM_G28(ENABLE_D_AND_RD_AND_NOT_SE_AND_SI,SI,MGM_W22);
   and MGM_G29(MGM_W23,RD,D);
   and MGM_G30(MGM_W24,SE,MGM_W23);
   not MGM_G31(MGM_W25,SI);
   and MGM_G32(ENABLE_D_AND_RD_AND_SE_AND_NOT_SI,MGM_W25,MGM_W24);
   and MGM_G33(MGM_W26,RD,D);
   and MGM_G34(MGM_W27,SE,MGM_W26);
   and MGM_G35(ENABLE_D_AND_RD_AND_SE_AND_SI,SI,MGM_W27);
   not MGM_G36(MGM_W28,SE);
   and MGM_G37(MGM_W29,MGM_W28,RD);
   not MGM_G38(MGM_W30,SI);
   and MGM_G39(ENABLE_RD_AND_NOT_SE_AND_NOT_SI,MGM_W30,MGM_W29);
   not MGM_G40(MGM_W31,SE);
   and MGM_G41(MGM_W32,MGM_W31,RD);
   and MGM_G42(ENABLE_RD_AND_NOT_SE_AND_SI,SI,MGM_W32);
   not MGM_G43(MGM_W33,D);
   and MGM_G44(MGM_W34,SE,MGM_W33);
   and MGM_G45(ENABLE_NOT_D_AND_SE_AND_SI,SI,MGM_W34);
   not MGM_G46(MGM_W35,SE);
   and MGM_G47(MGM_W36,MGM_W35,D);
   not MGM_G48(MGM_W37,SI);
   and MGM_G49(ENABLE_D_AND_NOT_SE_AND_NOT_SI,MGM_W37,MGM_W36);
   not MGM_G50(MGM_W38,SE);
   and MGM_G51(MGM_W39,MGM_W38,D);
   and MGM_G52(ENABLE_D_AND_NOT_SE_AND_SI,SI,MGM_W39);
   and MGM_G53(MGM_W40,SE,D);
   and MGM_G54(ENABLE_D_AND_SE_AND_SI,SI,MGM_W40);
   not MGM_G55(MGM_W41,CK);
   not MGM_G56(MGM_W42,D);
   and MGM_G57(MGM_W43,MGM_W42,MGM_W41);
   not MGM_G58(MGM_W44,SE);
   and MGM_G59(MGM_W45,MGM_W44,MGM_W43);
   not MGM_G60(MGM_W46,SI);
   and MGM_G61(ENABLE_NOT_CK_AND_NOT_D_AND_NOT_SE_AND_NOT_SI,MGM_W46,MGM_W45);
   not MGM_G62(MGM_W47,CK);
   not MGM_G63(MGM_W48,D);
   and MGM_G64(MGM_W49,MGM_W48,MGM_W47);
   not MGM_G65(MGM_W50,SE);
   and MGM_G66(MGM_W51,MGM_W50,MGM_W49);
   and MGM_G67(ENABLE_NOT_CK_AND_NOT_D_AND_NOT_SE_AND_SI,SI,MGM_W51);
   not MGM_G68(MGM_W52,CK);
   not MGM_G69(MGM_W53,D);
   and MGM_G70(MGM_W54,MGM_W53,MGM_W52);
   and MGM_G71(MGM_W55,SE,MGM_W54);
   not MGM_G72(MGM_W56,SI);
   and MGM_G73(ENABLE_NOT_CK_AND_NOT_D_AND_SE_AND_NOT_SI,MGM_W56,MGM_W55);
   not MGM_G74(MGM_W57,CK);
   not MGM_G75(MGM_W58,D);
   and MGM_G76(MGM_W59,MGM_W58,MGM_W57);
   and MGM_G77(MGM_W60,SE,MGM_W59);
   and MGM_G78(ENABLE_NOT_CK_AND_NOT_D_AND_SE_AND_SI,SI,MGM_W60);
   not MGM_G79(MGM_W61,CK);
   and MGM_G80(MGM_W62,D,MGM_W61);
   not MGM_G81(MGM_W63,SE);
   and MGM_G82(MGM_W64,MGM_W63,MGM_W62);
   not MGM_G83(MGM_W65,SI);
   and MGM_G84(ENABLE_NOT_CK_AND_D_AND_NOT_SE_AND_NOT_SI,MGM_W65,MGM_W64);
   not MGM_G85(MGM_W66,CK);
   and MGM_G86(MGM_W67,D,MGM_W66);
   not MGM_G87(MGM_W68,SE);
   and MGM_G88(MGM_W69,MGM_W68,MGM_W67);
   and MGM_G89(ENABLE_NOT_CK_AND_D_AND_NOT_SE_AND_SI,SI,MGM_W69);
   not MGM_G90(MGM_W70,CK);
   and MGM_G91(MGM_W71,D,MGM_W70);
   and MGM_G92(MGM_W72,SE,MGM_W71);
   not MGM_G93(MGM_W73,SI);
   and MGM_G94(ENABLE_NOT_CK_AND_D_AND_SE_AND_NOT_SI,MGM_W73,MGM_W72);
   not MGM_G95(MGM_W74,CK);
   and MGM_G96(MGM_W75,D,MGM_W74);
   and MGM_G97(MGM_W76,SE,MGM_W75);
   and MGM_G98(ENABLE_NOT_CK_AND_D_AND_SE_AND_SI,SI,MGM_W76);
   not MGM_G99(MGM_W77,D);
   and MGM_G100(MGM_W78,MGM_W77,CK);
   not MGM_G101(MGM_W79,SE);
   and MGM_G102(MGM_W80,MGM_W79,MGM_W78);
   not MGM_G103(MGM_W81,SI);
   and MGM_G104(ENABLE_CK_AND_NOT_D_AND_NOT_SE_AND_NOT_SI,MGM_W81,MGM_W80);
   not MGM_G105(MGM_W82,D);
   and MGM_G106(MGM_W83,MGM_W82,CK);
   not MGM_G107(MGM_W84,SE);
   and MGM_G108(MGM_W85,MGM_W84,MGM_W83);
   and MGM_G109(ENABLE_CK_AND_NOT_D_AND_NOT_SE_AND_SI,SI,MGM_W85);
   not MGM_G110(MGM_W86,D);
   and MGM_G111(MGM_W87,MGM_W86,CK);
   and MGM_G112(MGM_W88,SE,MGM_W87);
   not MGM_G113(MGM_W89,SI);
   and MGM_G114(ENABLE_CK_AND_NOT_D_AND_SE_AND_NOT_SI,MGM_W89,MGM_W88);
   not MGM_G115(MGM_W90,D);
   and MGM_G116(MGM_W91,MGM_W90,CK);
   and MGM_G117(MGM_W92,SE,MGM_W91);
   and MGM_G118(ENABLE_CK_AND_NOT_D_AND_SE_AND_SI,SI,MGM_W92);
   and MGM_G119(MGM_W93,D,CK);
   not MGM_G120(MGM_W94,SE);
   and MGM_G121(MGM_W95,MGM_W94,MGM_W93);
   not MGM_G122(MGM_W96,SI);
   and MGM_G123(ENABLE_CK_AND_D_AND_NOT_SE_AND_NOT_SI,MGM_W96,MGM_W95);
   and MGM_G124(MGM_W97,D,CK);
   not MGM_G125(MGM_W98,SE);
   and MGM_G126(MGM_W99,MGM_W98,MGM_W97);
   and MGM_G127(ENABLE_CK_AND_D_AND_NOT_SE_AND_SI,SI,MGM_W99);
   and MGM_G128(MGM_W100,D,CK);
   and MGM_G129(MGM_W101,SE,MGM_W100);
   not MGM_G130(MGM_W102,SI);
   and MGM_G131(ENABLE_CK_AND_D_AND_SE_AND_NOT_SI,MGM_W102,MGM_W101);
   and MGM_G132(MGM_W103,D,CK);
   and MGM_G133(MGM_W104,SE,MGM_W103);
   and MGM_G134(ENABLE_CK_AND_D_AND_SE_AND_SI,SI,MGM_W104);
   not MGM_G135(MGM_W105,D);
   and MGM_G136(MGM_W106,RD,MGM_W105);
   and MGM_G137(ENABLE_NOT_D_AND_RD_AND_SI,SI,MGM_W106);
   and MGM_G138(MGM_W107,RD,D);
   not MGM_G139(MGM_W108,SI);
   and MGM_G140(ENABLE_D_AND_RD_AND_NOT_SI,MGM_W108,MGM_W107);
   not MGM_G141(MGM_W109,D);
   and MGM_G142(MGM_W110,RD,MGM_W109);
   and MGM_G143(ENABLE_NOT_D_AND_RD_AND_SE,SE,MGM_W110);
   and MGM_G144(MGM_W111,RD,D);
   and MGM_G145(ENABLE_D_AND_RD_AND_SE,SE,MGM_W111);
   // spec_gates_end
   // specify_block_begin
   specify

      if(D===1'b0 && SI===1'b1)
      // seq arc CK --> Q
      (posedge CK => (Q : SE))  = (1.0,1.0);
      
      if(SE===1'b0 && SI===1'b0)
      // seq arc CK --> Q
      (posedge CK => (Q : D))  = (1.0,1.0);
      
      if(D===1'b1 && SE===1'b0 && SI===1'b1 || D===1'b0 && SE===1'b1 && SI===1'b0)
      // seq arc CK --> Q
      (posedge CK => (Q : D))  = (1.0,1.0);
      
      if(D===1'b1 && SE===1'b1)
      // seq arc CK --> Q
      (posedge CK => (Q : SI))  = (1.0,1.0);
      
      ifnone
      // seq arc CK --> Q
      (posedge CK => (Q : D))  = (1.0,1.0);
      
      if(CK===1'b0 && D===1'b0 && SE===1'b0 && SI===1'b0)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b0 && D===1'b0 && SE===1'b0 && SI===1'b1)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b0 && D===1'b0 && SE===1'b1 && SI===1'b0)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b0 && D===1'b0 && SE===1'b1 && SI===1'b1)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b0 && D===1'b1 && SE===1'b0 && SI===1'b0)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b0 && D===1'b1 && SE===1'b0 && SI===1'b1)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b0 && D===1'b1 && SE===1'b1 && SI===1'b0)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b0 && D===1'b1 && SE===1'b1 && SI===1'b1)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b1 && D===1'b0 && SE===1'b0 && SI===1'b0)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b1 && D===1'b0 && SE===1'b0 && SI===1'b1)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b1 && D===1'b0 && SE===1'b1 && SI===1'b0)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b1 && D===1'b0 && SE===1'b1 && SI===1'b1)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b1 && D===1'b1 && SE===1'b0 && SI===1'b0)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b1 && D===1'b1 && SE===1'b0 && SI===1'b1)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b1 && D===1'b1 && SE===1'b1 && SI===1'b0)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b1 && D===1'b1 && SE===1'b1 && SI===1'b1)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      ifnone
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_RD_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_RD_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_RD_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_RD_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_RD_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_RD_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_RD_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_RD_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_RD_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_RD_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_RD_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_RD_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_RD_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_RD_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_RD_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_RD_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      // hold D-HL CK-LH
      $hold(posedge CK &&& (ENABLE_RD_AND_NOT_SE_AND_NOT_SI === 1'b1),
      negedge D &&& (ENABLE_RD_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold D-LH CK-LH
      $hold(posedge CK &&& (ENABLE_RD_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge D &&& (ENABLE_RD_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup D-HL CK-LH
      $setup(negedge D &&& (ENABLE_RD_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_RD_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup D-LH CK-LH
      $setup(posedge D &&& (ENABLE_RD_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_RD_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold D-HL CK-LH
      $hold(posedge CK &&& (ENABLE_RD_AND_NOT_SE_AND_SI === 1'b1),
      negedge D &&& (ENABLE_RD_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // hold D-LH CK-LH
      $hold(posedge CK &&& (ENABLE_RD_AND_NOT_SE_AND_SI === 1'b1),
      posedge D &&& (ENABLE_RD_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // setup D-HL CK-LH
      $setup(negedge D &&& (ENABLE_RD_AND_NOT_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_RD_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // setup D-LH CK-LH
      $setup(posedge D &&& (ENABLE_RD_AND_NOT_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_RD_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // recovery RD-LH CK-LH
      $recovery(posedge RD &&& (ENABLE_NOT_D_AND_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_SE_AND_SI === 1'b1),1.0);
      
      // removal RD-LH CK-LH
      $removal(posedge RD &&& (ENABLE_NOT_D_AND_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_SE_AND_SI === 1'b1),1.0);
      
      // recovery RD-LH CK-LH
      $recovery(posedge RD &&& (ENABLE_D_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_D_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // removal RD-LH CK-LH
      $removal(posedge RD &&& (ENABLE_D_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_D_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // recovery RD-LH CK-LH
      $recovery(posedge RD &&& (ENABLE_D_AND_NOT_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_D_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // removal RD-LH CK-LH
      $removal(posedge RD &&& (ENABLE_D_AND_NOT_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_D_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // recovery RD-LH CK-LH
      $recovery(posedge RD &&& (ENABLE_D_AND_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_D_AND_SE_AND_SI === 1'b1),1.0);
      
      // removal RD-LH CK-LH
      $removal(posedge RD &&& (ENABLE_D_AND_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_D_AND_SE_AND_SI === 1'b1),1.0);
      
      $width(negedge RD &&& (ENABLE_NOT_CK_AND_NOT_D_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge RD &&& (ENABLE_NOT_CK_AND_NOT_D_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge RD &&& (ENABLE_NOT_CK_AND_NOT_D_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge RD &&& (ENABLE_NOT_CK_AND_NOT_D_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge RD &&& (ENABLE_NOT_CK_AND_D_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge RD &&& (ENABLE_NOT_CK_AND_D_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge RD &&& (ENABLE_NOT_CK_AND_D_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge RD &&& (ENABLE_NOT_CK_AND_D_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge RD &&& (ENABLE_CK_AND_NOT_D_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge RD &&& (ENABLE_CK_AND_NOT_D_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge RD &&& (ENABLE_CK_AND_NOT_D_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge RD &&& (ENABLE_CK_AND_NOT_D_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge RD &&& (ENABLE_CK_AND_D_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge RD &&& (ENABLE_CK_AND_D_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge RD &&& (ENABLE_CK_AND_D_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge RD &&& (ENABLE_CK_AND_D_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      // hold SE-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D_AND_RD_AND_SI === 1'b1),
      negedge SE &&& (ENABLE_NOT_D_AND_RD_AND_SI === 1'b1),1.0);
      
      // hold SE-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D_AND_RD_AND_SI === 1'b1),
      posedge SE &&& (ENABLE_NOT_D_AND_RD_AND_SI === 1'b1),1.0);
      
      // setup SE-HL CK-LH
      $setup(negedge SE &&& (ENABLE_NOT_D_AND_RD_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_RD_AND_SI === 1'b1),1.0);
      
      // setup SE-LH CK-LH
      $setup(posedge SE &&& (ENABLE_NOT_D_AND_RD_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_RD_AND_SI === 1'b1),1.0);
      
      // hold SE-HL CK-LH
      $hold(posedge CK &&& (ENABLE_D_AND_RD_AND_NOT_SI === 1'b1),
      negedge SE &&& (ENABLE_D_AND_RD_AND_NOT_SI === 1'b1),1.0);
      
      // hold SE-LH CK-LH
      $hold(posedge CK &&& (ENABLE_D_AND_RD_AND_NOT_SI === 1'b1),
      posedge SE &&& (ENABLE_D_AND_RD_AND_NOT_SI === 1'b1),1.0);
      
      // setup SE-HL CK-LH
      $setup(negedge SE &&& (ENABLE_D_AND_RD_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_D_AND_RD_AND_NOT_SI === 1'b1),1.0);
      
      // setup SE-LH CK-LH
      $setup(posedge SE &&& (ENABLE_D_AND_RD_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_D_AND_RD_AND_NOT_SI === 1'b1),1.0);
      
      // hold SI-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D_AND_RD_AND_SE === 1'b1),
      negedge SI &&& (ENABLE_NOT_D_AND_RD_AND_SE === 1'b1),1.0);
      
      // hold SI-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D_AND_RD_AND_SE === 1'b1),
      posedge SI &&& (ENABLE_NOT_D_AND_RD_AND_SE === 1'b1),1.0);
      
      // setup SI-HL CK-LH
      $setup(negedge SI &&& (ENABLE_NOT_D_AND_RD_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_RD_AND_SE === 1'b1),1.0);
      
      // setup SI-LH CK-LH
      $setup(posedge SI &&& (ENABLE_NOT_D_AND_RD_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_RD_AND_SE === 1'b1),1.0);
      
      // hold SI-HL CK-LH
      $hold(posedge CK &&& (ENABLE_D_AND_RD_AND_SE === 1'b1),
      negedge SI &&& (ENABLE_D_AND_RD_AND_SE === 1'b1),1.0);
      
      // hold SI-LH CK-LH
      $hold(posedge CK &&& (ENABLE_D_AND_RD_AND_SE === 1'b1),
      posedge SI &&& (ENABLE_D_AND_RD_AND_SE === 1'b1),1.0);
      
      // setup SI-HL CK-LH
      $setup(negedge SI &&& (ENABLE_D_AND_RD_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_D_AND_RD_AND_SE === 1'b1),1.0);
      
      // setup SI-LH CK-LH
      $setup(posedge SI &&& (ENABLE_D_AND_RD_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_D_AND_RD_AND_SE === 1'b1),1.0);
      
      // mpw CK_lh 
      $width(posedge CK,1.0,0);
      
      // mpw CK_hl 
      $width(negedge CK,1.0,0);
      
      // mpw RD_hl 
      $width(negedge RD,1.0,0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_FSDPRBQ_V2LP_1( Q, CK, D, SI, SE, RD );
input CK, D, RD, SE, SI;
output Q;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_FSDPRBQ_V2LP_1_func SAEDRVT14_FSDPRBQ_V2LP_1_behav_inst(.Q(Q),.CK(CK),.D(D),.SI(SI),.SE(SE),.RD(RD));
`else
   SAEDRVT14_FSDPRBQ_V2LP_1_func SAEDRVT14_FSDPRBQ_V2LP_1_inst(.Q(Q),.CK(CK),.D(D),.SI(SI),.SE(SE),.RD(RD));
   // spec_gates_begin
   not MGM_G0(MGM_W0,D);
   and MGM_G1(MGM_W1,RD,MGM_W0);
   not MGM_G2(MGM_W2,SE);
   and MGM_G3(MGM_W3,MGM_W2,MGM_W1);
   not MGM_G4(MGM_W4,SI);
   and MGM_G5(ENABLE_NOT_D_AND_RD_AND_NOT_SE_AND_NOT_SI,MGM_W4,MGM_W3);
   not MGM_G6(MGM_W5,D);
   and MGM_G7(MGM_W6,RD,MGM_W5);
   not MGM_G8(MGM_W7,SE);
   and MGM_G9(MGM_W8,MGM_W7,MGM_W6);
   and MGM_G10(ENABLE_NOT_D_AND_RD_AND_NOT_SE_AND_SI,SI,MGM_W8);
   not MGM_G11(MGM_W9,D);
   and MGM_G12(MGM_W10,RD,MGM_W9);
   and MGM_G13(MGM_W11,SE,MGM_W10);
   not MGM_G14(MGM_W12,SI);
   and MGM_G15(ENABLE_NOT_D_AND_RD_AND_SE_AND_NOT_SI,MGM_W12,MGM_W11);
   not MGM_G16(MGM_W13,D);
   and MGM_G17(MGM_W14,RD,MGM_W13);
   and MGM_G18(MGM_W15,SE,MGM_W14);
   and MGM_G19(ENABLE_NOT_D_AND_RD_AND_SE_AND_SI,SI,MGM_W15);
   and MGM_G20(MGM_W16,RD,D);
   not MGM_G21(MGM_W17,SE);
   and MGM_G22(MGM_W18,MGM_W17,MGM_W16);
   not MGM_G23(MGM_W19,SI);
   and MGM_G24(ENABLE_D_AND_RD_AND_NOT_SE_AND_NOT_SI,MGM_W19,MGM_W18);
   and MGM_G25(MGM_W20,RD,D);
   not MGM_G26(MGM_W21,SE);
   and MGM_G27(MGM_W22,MGM_W21,MGM_W20);
   and MGM_G28(ENABLE_D_AND_RD_AND_NOT_SE_AND_SI,SI,MGM_W22);
   and MGM_G29(MGM_W23,RD,D);
   and MGM_G30(MGM_W24,SE,MGM_W23);
   not MGM_G31(MGM_W25,SI);
   and MGM_G32(ENABLE_D_AND_RD_AND_SE_AND_NOT_SI,MGM_W25,MGM_W24);
   and MGM_G33(MGM_W26,RD,D);
   and MGM_G34(MGM_W27,SE,MGM_W26);
   and MGM_G35(ENABLE_D_AND_RD_AND_SE_AND_SI,SI,MGM_W27);
   not MGM_G36(MGM_W28,SE);
   and MGM_G37(MGM_W29,MGM_W28,RD);
   not MGM_G38(MGM_W30,SI);
   and MGM_G39(ENABLE_RD_AND_NOT_SE_AND_NOT_SI,MGM_W30,MGM_W29);
   not MGM_G40(MGM_W31,SE);
   and MGM_G41(MGM_W32,MGM_W31,RD);
   and MGM_G42(ENABLE_RD_AND_NOT_SE_AND_SI,SI,MGM_W32);
   not MGM_G43(MGM_W33,D);
   and MGM_G44(MGM_W34,SE,MGM_W33);
   and MGM_G45(ENABLE_NOT_D_AND_SE_AND_SI,SI,MGM_W34);
   not MGM_G46(MGM_W35,SE);
   and MGM_G47(MGM_W36,MGM_W35,D);
   not MGM_G48(MGM_W37,SI);
   and MGM_G49(ENABLE_D_AND_NOT_SE_AND_NOT_SI,MGM_W37,MGM_W36);
   not MGM_G50(MGM_W38,SE);
   and MGM_G51(MGM_W39,MGM_W38,D);
   and MGM_G52(ENABLE_D_AND_NOT_SE_AND_SI,SI,MGM_W39);
   and MGM_G53(MGM_W40,SE,D);
   and MGM_G54(ENABLE_D_AND_SE_AND_SI,SI,MGM_W40);
   not MGM_G55(MGM_W41,CK);
   not MGM_G56(MGM_W42,D);
   and MGM_G57(MGM_W43,MGM_W42,MGM_W41);
   not MGM_G58(MGM_W44,SE);
   and MGM_G59(MGM_W45,MGM_W44,MGM_W43);
   not MGM_G60(MGM_W46,SI);
   and MGM_G61(ENABLE_NOT_CK_AND_NOT_D_AND_NOT_SE_AND_NOT_SI,MGM_W46,MGM_W45);
   not MGM_G62(MGM_W47,CK);
   not MGM_G63(MGM_W48,D);
   and MGM_G64(MGM_W49,MGM_W48,MGM_W47);
   not MGM_G65(MGM_W50,SE);
   and MGM_G66(MGM_W51,MGM_W50,MGM_W49);
   and MGM_G67(ENABLE_NOT_CK_AND_NOT_D_AND_NOT_SE_AND_SI,SI,MGM_W51);
   not MGM_G68(MGM_W52,CK);
   not MGM_G69(MGM_W53,D);
   and MGM_G70(MGM_W54,MGM_W53,MGM_W52);
   and MGM_G71(MGM_W55,SE,MGM_W54);
   not MGM_G72(MGM_W56,SI);
   and MGM_G73(ENABLE_NOT_CK_AND_NOT_D_AND_SE_AND_NOT_SI,MGM_W56,MGM_W55);
   not MGM_G74(MGM_W57,CK);
   not MGM_G75(MGM_W58,D);
   and MGM_G76(MGM_W59,MGM_W58,MGM_W57);
   and MGM_G77(MGM_W60,SE,MGM_W59);
   and MGM_G78(ENABLE_NOT_CK_AND_NOT_D_AND_SE_AND_SI,SI,MGM_W60);
   not MGM_G79(MGM_W61,CK);
   and MGM_G80(MGM_W62,D,MGM_W61);
   not MGM_G81(MGM_W63,SE);
   and MGM_G82(MGM_W64,MGM_W63,MGM_W62);
   not MGM_G83(MGM_W65,SI);
   and MGM_G84(ENABLE_NOT_CK_AND_D_AND_NOT_SE_AND_NOT_SI,MGM_W65,MGM_W64);
   not MGM_G85(MGM_W66,CK);
   and MGM_G86(MGM_W67,D,MGM_W66);
   not MGM_G87(MGM_W68,SE);
   and MGM_G88(MGM_W69,MGM_W68,MGM_W67);
   and MGM_G89(ENABLE_NOT_CK_AND_D_AND_NOT_SE_AND_SI,SI,MGM_W69);
   not MGM_G90(MGM_W70,CK);
   and MGM_G91(MGM_W71,D,MGM_W70);
   and MGM_G92(MGM_W72,SE,MGM_W71);
   not MGM_G93(MGM_W73,SI);
   and MGM_G94(ENABLE_NOT_CK_AND_D_AND_SE_AND_NOT_SI,MGM_W73,MGM_W72);
   not MGM_G95(MGM_W74,CK);
   and MGM_G96(MGM_W75,D,MGM_W74);
   and MGM_G97(MGM_W76,SE,MGM_W75);
   and MGM_G98(ENABLE_NOT_CK_AND_D_AND_SE_AND_SI,SI,MGM_W76);
   not MGM_G99(MGM_W77,D);
   and MGM_G100(MGM_W78,MGM_W77,CK);
   not MGM_G101(MGM_W79,SE);
   and MGM_G102(MGM_W80,MGM_W79,MGM_W78);
   not MGM_G103(MGM_W81,SI);
   and MGM_G104(ENABLE_CK_AND_NOT_D_AND_NOT_SE_AND_NOT_SI,MGM_W81,MGM_W80);
   not MGM_G105(MGM_W82,D);
   and MGM_G106(MGM_W83,MGM_W82,CK);
   not MGM_G107(MGM_W84,SE);
   and MGM_G108(MGM_W85,MGM_W84,MGM_W83);
   and MGM_G109(ENABLE_CK_AND_NOT_D_AND_NOT_SE_AND_SI,SI,MGM_W85);
   not MGM_G110(MGM_W86,D);
   and MGM_G111(MGM_W87,MGM_W86,CK);
   and MGM_G112(MGM_W88,SE,MGM_W87);
   not MGM_G113(MGM_W89,SI);
   and MGM_G114(ENABLE_CK_AND_NOT_D_AND_SE_AND_NOT_SI,MGM_W89,MGM_W88);
   not MGM_G115(MGM_W90,D);
   and MGM_G116(MGM_W91,MGM_W90,CK);
   and MGM_G117(MGM_W92,SE,MGM_W91);
   and MGM_G118(ENABLE_CK_AND_NOT_D_AND_SE_AND_SI,SI,MGM_W92);
   and MGM_G119(MGM_W93,D,CK);
   not MGM_G120(MGM_W94,SE);
   and MGM_G121(MGM_W95,MGM_W94,MGM_W93);
   not MGM_G122(MGM_W96,SI);
   and MGM_G123(ENABLE_CK_AND_D_AND_NOT_SE_AND_NOT_SI,MGM_W96,MGM_W95);
   and MGM_G124(MGM_W97,D,CK);
   not MGM_G125(MGM_W98,SE);
   and MGM_G126(MGM_W99,MGM_W98,MGM_W97);
   and MGM_G127(ENABLE_CK_AND_D_AND_NOT_SE_AND_SI,SI,MGM_W99);
   and MGM_G128(MGM_W100,D,CK);
   and MGM_G129(MGM_W101,SE,MGM_W100);
   not MGM_G130(MGM_W102,SI);
   and MGM_G131(ENABLE_CK_AND_D_AND_SE_AND_NOT_SI,MGM_W102,MGM_W101);
   and MGM_G132(MGM_W103,D,CK);
   and MGM_G133(MGM_W104,SE,MGM_W103);
   and MGM_G134(ENABLE_CK_AND_D_AND_SE_AND_SI,SI,MGM_W104);
   not MGM_G135(MGM_W105,D);
   and MGM_G136(MGM_W106,RD,MGM_W105);
   and MGM_G137(ENABLE_NOT_D_AND_RD_AND_SI,SI,MGM_W106);
   and MGM_G138(MGM_W107,RD,D);
   not MGM_G139(MGM_W108,SI);
   and MGM_G140(ENABLE_D_AND_RD_AND_NOT_SI,MGM_W108,MGM_W107);
   not MGM_G141(MGM_W109,D);
   and MGM_G142(MGM_W110,RD,MGM_W109);
   and MGM_G143(ENABLE_NOT_D_AND_RD_AND_SE,SE,MGM_W110);
   and MGM_G144(MGM_W111,RD,D);
   and MGM_G145(ENABLE_D_AND_RD_AND_SE,SE,MGM_W111);
   // spec_gates_end
   // specify_block_begin
   specify

      if(D===1'b0 && SI===1'b1)
      // seq arc CK --> Q
      (posedge CK => (Q : SE))  = (1.0,1.0);
      
      if(SE===1'b0 && SI===1'b0)
      // seq arc CK --> Q
      (posedge CK => (Q : D))  = (1.0,1.0);
      
      if(D===1'b1 && SE===1'b0 && SI===1'b1 || D===1'b0 && SE===1'b1 && SI===1'b0)
      // seq arc CK --> Q
      (posedge CK => (Q : D))  = (1.0,1.0);
      
      if(D===1'b1 && SE===1'b1)
      // seq arc CK --> Q
      (posedge CK => (Q : SI))  = (1.0,1.0);
      
      ifnone
      // seq arc CK --> Q
      (posedge CK => (Q : D))  = (1.0,1.0);
      
      if(CK===1'b0 && D===1'b0 && SE===1'b0 && SI===1'b0)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b0 && D===1'b0 && SE===1'b0 && SI===1'b1)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b0 && D===1'b0 && SE===1'b1 && SI===1'b0)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b0 && D===1'b0 && SE===1'b1 && SI===1'b1)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b0 && D===1'b1 && SE===1'b0 && SI===1'b0)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b0 && D===1'b1 && SE===1'b0 && SI===1'b1)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b0 && D===1'b1 && SE===1'b1 && SI===1'b0)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b0 && D===1'b1 && SE===1'b1 && SI===1'b1)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b1 && D===1'b0 && SE===1'b0 && SI===1'b0)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b1 && D===1'b0 && SE===1'b0 && SI===1'b1)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b1 && D===1'b0 && SE===1'b1 && SI===1'b0)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b1 && D===1'b0 && SE===1'b1 && SI===1'b1)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b1 && D===1'b1 && SE===1'b0 && SI===1'b0)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b1 && D===1'b1 && SE===1'b0 && SI===1'b1)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b1 && D===1'b1 && SE===1'b1 && SI===1'b0)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b1 && D===1'b1 && SE===1'b1 && SI===1'b1)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      ifnone
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_RD_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_RD_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_RD_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_RD_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_RD_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_RD_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_RD_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_RD_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_RD_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_RD_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_RD_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_RD_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_RD_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_RD_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_RD_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_RD_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      // hold D-HL CK-LH
      $hold(posedge CK &&& (ENABLE_RD_AND_NOT_SE_AND_NOT_SI === 1'b1),
      negedge D &&& (ENABLE_RD_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold D-LH CK-LH
      $hold(posedge CK &&& (ENABLE_RD_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge D &&& (ENABLE_RD_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup D-HL CK-LH
      $setup(negedge D &&& (ENABLE_RD_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_RD_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup D-LH CK-LH
      $setup(posedge D &&& (ENABLE_RD_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_RD_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold D-HL CK-LH
      $hold(posedge CK &&& (ENABLE_RD_AND_NOT_SE_AND_SI === 1'b1),
      negedge D &&& (ENABLE_RD_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // hold D-LH CK-LH
      $hold(posedge CK &&& (ENABLE_RD_AND_NOT_SE_AND_SI === 1'b1),
      posedge D &&& (ENABLE_RD_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // setup D-HL CK-LH
      $setup(negedge D &&& (ENABLE_RD_AND_NOT_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_RD_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // setup D-LH CK-LH
      $setup(posedge D &&& (ENABLE_RD_AND_NOT_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_RD_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // recovery RD-LH CK-LH
      $recovery(posedge RD &&& (ENABLE_NOT_D_AND_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_SE_AND_SI === 1'b1),1.0);
      
      // removal RD-LH CK-LH
      $removal(posedge RD &&& (ENABLE_NOT_D_AND_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_SE_AND_SI === 1'b1),1.0);
      
      // recovery RD-LH CK-LH
      $recovery(posedge RD &&& (ENABLE_D_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_D_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // removal RD-LH CK-LH
      $removal(posedge RD &&& (ENABLE_D_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_D_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // recovery RD-LH CK-LH
      $recovery(posedge RD &&& (ENABLE_D_AND_NOT_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_D_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // removal RD-LH CK-LH
      $removal(posedge RD &&& (ENABLE_D_AND_NOT_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_D_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // recovery RD-LH CK-LH
      $recovery(posedge RD &&& (ENABLE_D_AND_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_D_AND_SE_AND_SI === 1'b1),1.0);
      
      // removal RD-LH CK-LH
      $removal(posedge RD &&& (ENABLE_D_AND_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_D_AND_SE_AND_SI === 1'b1),1.0);
      
      $width(negedge RD &&& (ENABLE_NOT_CK_AND_NOT_D_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge RD &&& (ENABLE_NOT_CK_AND_NOT_D_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge RD &&& (ENABLE_NOT_CK_AND_NOT_D_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge RD &&& (ENABLE_NOT_CK_AND_NOT_D_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge RD &&& (ENABLE_NOT_CK_AND_D_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge RD &&& (ENABLE_NOT_CK_AND_D_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge RD &&& (ENABLE_NOT_CK_AND_D_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge RD &&& (ENABLE_NOT_CK_AND_D_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge RD &&& (ENABLE_CK_AND_NOT_D_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge RD &&& (ENABLE_CK_AND_NOT_D_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge RD &&& (ENABLE_CK_AND_NOT_D_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge RD &&& (ENABLE_CK_AND_NOT_D_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge RD &&& (ENABLE_CK_AND_D_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge RD &&& (ENABLE_CK_AND_D_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge RD &&& (ENABLE_CK_AND_D_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge RD &&& (ENABLE_CK_AND_D_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      // hold SE-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D_AND_RD_AND_SI === 1'b1),
      negedge SE &&& (ENABLE_NOT_D_AND_RD_AND_SI === 1'b1),1.0);
      
      // hold SE-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D_AND_RD_AND_SI === 1'b1),
      posedge SE &&& (ENABLE_NOT_D_AND_RD_AND_SI === 1'b1),1.0);
      
      // setup SE-HL CK-LH
      $setup(negedge SE &&& (ENABLE_NOT_D_AND_RD_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_RD_AND_SI === 1'b1),1.0);
      
      // setup SE-LH CK-LH
      $setup(posedge SE &&& (ENABLE_NOT_D_AND_RD_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_RD_AND_SI === 1'b1),1.0);
      
      // hold SE-HL CK-LH
      $hold(posedge CK &&& (ENABLE_D_AND_RD_AND_NOT_SI === 1'b1),
      negedge SE &&& (ENABLE_D_AND_RD_AND_NOT_SI === 1'b1),1.0);
      
      // hold SE-LH CK-LH
      $hold(posedge CK &&& (ENABLE_D_AND_RD_AND_NOT_SI === 1'b1),
      posedge SE &&& (ENABLE_D_AND_RD_AND_NOT_SI === 1'b1),1.0);
      
      // setup SE-HL CK-LH
      $setup(negedge SE &&& (ENABLE_D_AND_RD_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_D_AND_RD_AND_NOT_SI === 1'b1),1.0);
      
      // setup SE-LH CK-LH
      $setup(posedge SE &&& (ENABLE_D_AND_RD_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_D_AND_RD_AND_NOT_SI === 1'b1),1.0);
      
      // hold SI-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D_AND_RD_AND_SE === 1'b1),
      negedge SI &&& (ENABLE_NOT_D_AND_RD_AND_SE === 1'b1),1.0);
      
      // hold SI-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D_AND_RD_AND_SE === 1'b1),
      posedge SI &&& (ENABLE_NOT_D_AND_RD_AND_SE === 1'b1),1.0);
      
      // setup SI-HL CK-LH
      $setup(negedge SI &&& (ENABLE_NOT_D_AND_RD_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_RD_AND_SE === 1'b1),1.0);
      
      // setup SI-LH CK-LH
      $setup(posedge SI &&& (ENABLE_NOT_D_AND_RD_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_RD_AND_SE === 1'b1),1.0);
      
      // hold SI-HL CK-LH
      $hold(posedge CK &&& (ENABLE_D_AND_RD_AND_SE === 1'b1),
      negedge SI &&& (ENABLE_D_AND_RD_AND_SE === 1'b1),1.0);
      
      // hold SI-LH CK-LH
      $hold(posedge CK &&& (ENABLE_D_AND_RD_AND_SE === 1'b1),
      posedge SI &&& (ENABLE_D_AND_RD_AND_SE === 1'b1),1.0);
      
      // setup SI-HL CK-LH
      $setup(negedge SI &&& (ENABLE_D_AND_RD_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_D_AND_RD_AND_SE === 1'b1),1.0);
      
      // setup SI-LH CK-LH
      $setup(posedge SI &&& (ENABLE_D_AND_RD_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_D_AND_RD_AND_SE === 1'b1),1.0);
      
      // mpw CK_lh 
      $width(posedge CK,1.0,0);
      
      // mpw CK_hl 
      $width(negedge CK,1.0,0);
      
      // mpw RD_hl 
      $width(negedge RD,1.0,0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_FSDPRBQ_V2LP_2( Q, CK, D, SI, SE, RD );
input CK, D, RD, SE, SI;
output Q;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_FSDPRBQ_V2LP_2_func SAEDRVT14_FSDPRBQ_V2LP_2_behav_inst(.Q(Q),.CK(CK),.D(D),.SI(SI),.SE(SE),.RD(RD));
`else
   SAEDRVT14_FSDPRBQ_V2LP_2_func SAEDRVT14_FSDPRBQ_V2LP_2_inst(.Q(Q),.CK(CK),.D(D),.SI(SI),.SE(SE),.RD(RD));
   // spec_gates_begin
   not MGM_G0(MGM_W0,D);
   and MGM_G1(MGM_W1,RD,MGM_W0);
   not MGM_G2(MGM_W2,SE);
   and MGM_G3(MGM_W3,MGM_W2,MGM_W1);
   not MGM_G4(MGM_W4,SI);
   and MGM_G5(ENABLE_NOT_D_AND_RD_AND_NOT_SE_AND_NOT_SI,MGM_W4,MGM_W3);
   not MGM_G6(MGM_W5,D);
   and MGM_G7(MGM_W6,RD,MGM_W5);
   not MGM_G8(MGM_W7,SE);
   and MGM_G9(MGM_W8,MGM_W7,MGM_W6);
   and MGM_G10(ENABLE_NOT_D_AND_RD_AND_NOT_SE_AND_SI,SI,MGM_W8);
   not MGM_G11(MGM_W9,D);
   and MGM_G12(MGM_W10,RD,MGM_W9);
   and MGM_G13(MGM_W11,SE,MGM_W10);
   not MGM_G14(MGM_W12,SI);
   and MGM_G15(ENABLE_NOT_D_AND_RD_AND_SE_AND_NOT_SI,MGM_W12,MGM_W11);
   not MGM_G16(MGM_W13,D);
   and MGM_G17(MGM_W14,RD,MGM_W13);
   and MGM_G18(MGM_W15,SE,MGM_W14);
   and MGM_G19(ENABLE_NOT_D_AND_RD_AND_SE_AND_SI,SI,MGM_W15);
   and MGM_G20(MGM_W16,RD,D);
   not MGM_G21(MGM_W17,SE);
   and MGM_G22(MGM_W18,MGM_W17,MGM_W16);
   not MGM_G23(MGM_W19,SI);
   and MGM_G24(ENABLE_D_AND_RD_AND_NOT_SE_AND_NOT_SI,MGM_W19,MGM_W18);
   and MGM_G25(MGM_W20,RD,D);
   not MGM_G26(MGM_W21,SE);
   and MGM_G27(MGM_W22,MGM_W21,MGM_W20);
   and MGM_G28(ENABLE_D_AND_RD_AND_NOT_SE_AND_SI,SI,MGM_W22);
   and MGM_G29(MGM_W23,RD,D);
   and MGM_G30(MGM_W24,SE,MGM_W23);
   not MGM_G31(MGM_W25,SI);
   and MGM_G32(ENABLE_D_AND_RD_AND_SE_AND_NOT_SI,MGM_W25,MGM_W24);
   and MGM_G33(MGM_W26,RD,D);
   and MGM_G34(MGM_W27,SE,MGM_W26);
   and MGM_G35(ENABLE_D_AND_RD_AND_SE_AND_SI,SI,MGM_W27);
   not MGM_G36(MGM_W28,SE);
   and MGM_G37(MGM_W29,MGM_W28,RD);
   not MGM_G38(MGM_W30,SI);
   and MGM_G39(ENABLE_RD_AND_NOT_SE_AND_NOT_SI,MGM_W30,MGM_W29);
   not MGM_G40(MGM_W31,SE);
   and MGM_G41(MGM_W32,MGM_W31,RD);
   and MGM_G42(ENABLE_RD_AND_NOT_SE_AND_SI,SI,MGM_W32);
   not MGM_G43(MGM_W33,D);
   and MGM_G44(MGM_W34,SE,MGM_W33);
   and MGM_G45(ENABLE_NOT_D_AND_SE_AND_SI,SI,MGM_W34);
   not MGM_G46(MGM_W35,SE);
   and MGM_G47(MGM_W36,MGM_W35,D);
   not MGM_G48(MGM_W37,SI);
   and MGM_G49(ENABLE_D_AND_NOT_SE_AND_NOT_SI,MGM_W37,MGM_W36);
   not MGM_G50(MGM_W38,SE);
   and MGM_G51(MGM_W39,MGM_W38,D);
   and MGM_G52(ENABLE_D_AND_NOT_SE_AND_SI,SI,MGM_W39);
   and MGM_G53(MGM_W40,SE,D);
   and MGM_G54(ENABLE_D_AND_SE_AND_SI,SI,MGM_W40);
   not MGM_G55(MGM_W41,CK);
   not MGM_G56(MGM_W42,D);
   and MGM_G57(MGM_W43,MGM_W42,MGM_W41);
   not MGM_G58(MGM_W44,SE);
   and MGM_G59(MGM_W45,MGM_W44,MGM_W43);
   not MGM_G60(MGM_W46,SI);
   and MGM_G61(ENABLE_NOT_CK_AND_NOT_D_AND_NOT_SE_AND_NOT_SI,MGM_W46,MGM_W45);
   not MGM_G62(MGM_W47,CK);
   not MGM_G63(MGM_W48,D);
   and MGM_G64(MGM_W49,MGM_W48,MGM_W47);
   not MGM_G65(MGM_W50,SE);
   and MGM_G66(MGM_W51,MGM_W50,MGM_W49);
   and MGM_G67(ENABLE_NOT_CK_AND_NOT_D_AND_NOT_SE_AND_SI,SI,MGM_W51);
   not MGM_G68(MGM_W52,CK);
   not MGM_G69(MGM_W53,D);
   and MGM_G70(MGM_W54,MGM_W53,MGM_W52);
   and MGM_G71(MGM_W55,SE,MGM_W54);
   not MGM_G72(MGM_W56,SI);
   and MGM_G73(ENABLE_NOT_CK_AND_NOT_D_AND_SE_AND_NOT_SI,MGM_W56,MGM_W55);
   not MGM_G74(MGM_W57,CK);
   not MGM_G75(MGM_W58,D);
   and MGM_G76(MGM_W59,MGM_W58,MGM_W57);
   and MGM_G77(MGM_W60,SE,MGM_W59);
   and MGM_G78(ENABLE_NOT_CK_AND_NOT_D_AND_SE_AND_SI,SI,MGM_W60);
   not MGM_G79(MGM_W61,CK);
   and MGM_G80(MGM_W62,D,MGM_W61);
   not MGM_G81(MGM_W63,SE);
   and MGM_G82(MGM_W64,MGM_W63,MGM_W62);
   not MGM_G83(MGM_W65,SI);
   and MGM_G84(ENABLE_NOT_CK_AND_D_AND_NOT_SE_AND_NOT_SI,MGM_W65,MGM_W64);
   not MGM_G85(MGM_W66,CK);
   and MGM_G86(MGM_W67,D,MGM_W66);
   not MGM_G87(MGM_W68,SE);
   and MGM_G88(MGM_W69,MGM_W68,MGM_W67);
   and MGM_G89(ENABLE_NOT_CK_AND_D_AND_NOT_SE_AND_SI,SI,MGM_W69);
   not MGM_G90(MGM_W70,CK);
   and MGM_G91(MGM_W71,D,MGM_W70);
   and MGM_G92(MGM_W72,SE,MGM_W71);
   not MGM_G93(MGM_W73,SI);
   and MGM_G94(ENABLE_NOT_CK_AND_D_AND_SE_AND_NOT_SI,MGM_W73,MGM_W72);
   not MGM_G95(MGM_W74,CK);
   and MGM_G96(MGM_W75,D,MGM_W74);
   and MGM_G97(MGM_W76,SE,MGM_W75);
   and MGM_G98(ENABLE_NOT_CK_AND_D_AND_SE_AND_SI,SI,MGM_W76);
   not MGM_G99(MGM_W77,D);
   and MGM_G100(MGM_W78,MGM_W77,CK);
   not MGM_G101(MGM_W79,SE);
   and MGM_G102(MGM_W80,MGM_W79,MGM_W78);
   not MGM_G103(MGM_W81,SI);
   and MGM_G104(ENABLE_CK_AND_NOT_D_AND_NOT_SE_AND_NOT_SI,MGM_W81,MGM_W80);
   not MGM_G105(MGM_W82,D);
   and MGM_G106(MGM_W83,MGM_W82,CK);
   not MGM_G107(MGM_W84,SE);
   and MGM_G108(MGM_W85,MGM_W84,MGM_W83);
   and MGM_G109(ENABLE_CK_AND_NOT_D_AND_NOT_SE_AND_SI,SI,MGM_W85);
   not MGM_G110(MGM_W86,D);
   and MGM_G111(MGM_W87,MGM_W86,CK);
   and MGM_G112(MGM_W88,SE,MGM_W87);
   not MGM_G113(MGM_W89,SI);
   and MGM_G114(ENABLE_CK_AND_NOT_D_AND_SE_AND_NOT_SI,MGM_W89,MGM_W88);
   not MGM_G115(MGM_W90,D);
   and MGM_G116(MGM_W91,MGM_W90,CK);
   and MGM_G117(MGM_W92,SE,MGM_W91);
   and MGM_G118(ENABLE_CK_AND_NOT_D_AND_SE_AND_SI,SI,MGM_W92);
   and MGM_G119(MGM_W93,D,CK);
   not MGM_G120(MGM_W94,SE);
   and MGM_G121(MGM_W95,MGM_W94,MGM_W93);
   not MGM_G122(MGM_W96,SI);
   and MGM_G123(ENABLE_CK_AND_D_AND_NOT_SE_AND_NOT_SI,MGM_W96,MGM_W95);
   and MGM_G124(MGM_W97,D,CK);
   not MGM_G125(MGM_W98,SE);
   and MGM_G126(MGM_W99,MGM_W98,MGM_W97);
   and MGM_G127(ENABLE_CK_AND_D_AND_NOT_SE_AND_SI,SI,MGM_W99);
   and MGM_G128(MGM_W100,D,CK);
   and MGM_G129(MGM_W101,SE,MGM_W100);
   not MGM_G130(MGM_W102,SI);
   and MGM_G131(ENABLE_CK_AND_D_AND_SE_AND_NOT_SI,MGM_W102,MGM_W101);
   and MGM_G132(MGM_W103,D,CK);
   and MGM_G133(MGM_W104,SE,MGM_W103);
   and MGM_G134(ENABLE_CK_AND_D_AND_SE_AND_SI,SI,MGM_W104);
   not MGM_G135(MGM_W105,D);
   and MGM_G136(MGM_W106,RD,MGM_W105);
   and MGM_G137(ENABLE_NOT_D_AND_RD_AND_SI,SI,MGM_W106);
   and MGM_G138(MGM_W107,RD,D);
   not MGM_G139(MGM_W108,SI);
   and MGM_G140(ENABLE_D_AND_RD_AND_NOT_SI,MGM_W108,MGM_W107);
   not MGM_G141(MGM_W109,D);
   and MGM_G142(MGM_W110,RD,MGM_W109);
   and MGM_G143(ENABLE_NOT_D_AND_RD_AND_SE,SE,MGM_W110);
   and MGM_G144(MGM_W111,RD,D);
   and MGM_G145(ENABLE_D_AND_RD_AND_SE,SE,MGM_W111);
   // spec_gates_end
   // specify_block_begin
   specify

      if(D===1'b0 && SI===1'b1)
      // seq arc CK --> Q
      (posedge CK => (Q : SE))  = (1.0,1.0);
      
      if(SE===1'b0 && SI===1'b0)
      // seq arc CK --> Q
      (posedge CK => (Q : D))  = (1.0,1.0);
      
      if(D===1'b1 && SE===1'b0 && SI===1'b1 || D===1'b0 && SE===1'b1 && SI===1'b0)
      // seq arc CK --> Q
      (posedge CK => (Q : D))  = (1.0,1.0);
      
      if(D===1'b1 && SE===1'b1)
      // seq arc CK --> Q
      (posedge CK => (Q : SI))  = (1.0,1.0);
      
      ifnone
      // seq arc CK --> Q
      (posedge CK => (Q : D))  = (1.0,1.0);
      
      if(CK===1'b0 && D===1'b0 && SE===1'b0 && SI===1'b0)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b0 && D===1'b0 && SE===1'b0 && SI===1'b1)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b0 && D===1'b0 && SE===1'b1 && SI===1'b0)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b0 && D===1'b0 && SE===1'b1 && SI===1'b1)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b0 && D===1'b1 && SE===1'b0 && SI===1'b0)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b0 && D===1'b1 && SE===1'b0 && SI===1'b1)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b0 && D===1'b1 && SE===1'b1 && SI===1'b0)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b0 && D===1'b1 && SE===1'b1 && SI===1'b1)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b1 && D===1'b0 && SE===1'b0 && SI===1'b0)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b1 && D===1'b0 && SE===1'b0 && SI===1'b1)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b1 && D===1'b0 && SE===1'b1 && SI===1'b0)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b1 && D===1'b0 && SE===1'b1 && SI===1'b1)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b1 && D===1'b1 && SE===1'b0 && SI===1'b0)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b1 && D===1'b1 && SE===1'b0 && SI===1'b1)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b1 && D===1'b1 && SE===1'b1 && SI===1'b0)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b1 && D===1'b1 && SE===1'b1 && SI===1'b1)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      ifnone
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_RD_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_RD_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_RD_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_RD_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_RD_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_RD_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_RD_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_RD_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_RD_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_RD_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_RD_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_RD_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_RD_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_RD_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_RD_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_RD_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      // hold D-HL CK-LH
      $hold(posedge CK &&& (ENABLE_RD_AND_NOT_SE_AND_NOT_SI === 1'b1),
      negedge D &&& (ENABLE_RD_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold D-LH CK-LH
      $hold(posedge CK &&& (ENABLE_RD_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge D &&& (ENABLE_RD_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup D-HL CK-LH
      $setup(negedge D &&& (ENABLE_RD_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_RD_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup D-LH CK-LH
      $setup(posedge D &&& (ENABLE_RD_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_RD_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold D-HL CK-LH
      $hold(posedge CK &&& (ENABLE_RD_AND_NOT_SE_AND_SI === 1'b1),
      negedge D &&& (ENABLE_RD_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // hold D-LH CK-LH
      $hold(posedge CK &&& (ENABLE_RD_AND_NOT_SE_AND_SI === 1'b1),
      posedge D &&& (ENABLE_RD_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // setup D-HL CK-LH
      $setup(negedge D &&& (ENABLE_RD_AND_NOT_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_RD_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // setup D-LH CK-LH
      $setup(posedge D &&& (ENABLE_RD_AND_NOT_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_RD_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // recovery RD-LH CK-LH
      $recovery(posedge RD &&& (ENABLE_NOT_D_AND_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_SE_AND_SI === 1'b1),1.0);
      
      // removal RD-LH CK-LH
      $removal(posedge RD &&& (ENABLE_NOT_D_AND_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_SE_AND_SI === 1'b1),1.0);
      
      // recovery RD-LH CK-LH
      $recovery(posedge RD &&& (ENABLE_D_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_D_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // removal RD-LH CK-LH
      $removal(posedge RD &&& (ENABLE_D_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_D_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // recovery RD-LH CK-LH
      $recovery(posedge RD &&& (ENABLE_D_AND_NOT_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_D_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // removal RD-LH CK-LH
      $removal(posedge RD &&& (ENABLE_D_AND_NOT_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_D_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // recovery RD-LH CK-LH
      $recovery(posedge RD &&& (ENABLE_D_AND_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_D_AND_SE_AND_SI === 1'b1),1.0);
      
      // removal RD-LH CK-LH
      $removal(posedge RD &&& (ENABLE_D_AND_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_D_AND_SE_AND_SI === 1'b1),1.0);
      
      $width(negedge RD &&& (ENABLE_NOT_CK_AND_NOT_D_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge RD &&& (ENABLE_NOT_CK_AND_NOT_D_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge RD &&& (ENABLE_NOT_CK_AND_NOT_D_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge RD &&& (ENABLE_NOT_CK_AND_NOT_D_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge RD &&& (ENABLE_NOT_CK_AND_D_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge RD &&& (ENABLE_NOT_CK_AND_D_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge RD &&& (ENABLE_NOT_CK_AND_D_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge RD &&& (ENABLE_NOT_CK_AND_D_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge RD &&& (ENABLE_CK_AND_NOT_D_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge RD &&& (ENABLE_CK_AND_NOT_D_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge RD &&& (ENABLE_CK_AND_NOT_D_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge RD &&& (ENABLE_CK_AND_NOT_D_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge RD &&& (ENABLE_CK_AND_D_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge RD &&& (ENABLE_CK_AND_D_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge RD &&& (ENABLE_CK_AND_D_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge RD &&& (ENABLE_CK_AND_D_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      // hold SE-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D_AND_RD_AND_SI === 1'b1),
      negedge SE &&& (ENABLE_NOT_D_AND_RD_AND_SI === 1'b1),1.0);
      
      // hold SE-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D_AND_RD_AND_SI === 1'b1),
      posedge SE &&& (ENABLE_NOT_D_AND_RD_AND_SI === 1'b1),1.0);
      
      // setup SE-HL CK-LH
      $setup(negedge SE &&& (ENABLE_NOT_D_AND_RD_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_RD_AND_SI === 1'b1),1.0);
      
      // setup SE-LH CK-LH
      $setup(posedge SE &&& (ENABLE_NOT_D_AND_RD_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_RD_AND_SI === 1'b1),1.0);
      
      // hold SE-HL CK-LH
      $hold(posedge CK &&& (ENABLE_D_AND_RD_AND_NOT_SI === 1'b1),
      negedge SE &&& (ENABLE_D_AND_RD_AND_NOT_SI === 1'b1),1.0);
      
      // hold SE-LH CK-LH
      $hold(posedge CK &&& (ENABLE_D_AND_RD_AND_NOT_SI === 1'b1),
      posedge SE &&& (ENABLE_D_AND_RD_AND_NOT_SI === 1'b1),1.0);
      
      // setup SE-HL CK-LH
      $setup(negedge SE &&& (ENABLE_D_AND_RD_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_D_AND_RD_AND_NOT_SI === 1'b1),1.0);
      
      // setup SE-LH CK-LH
      $setup(posedge SE &&& (ENABLE_D_AND_RD_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_D_AND_RD_AND_NOT_SI === 1'b1),1.0);
      
      // hold SI-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D_AND_RD_AND_SE === 1'b1),
      negedge SI &&& (ENABLE_NOT_D_AND_RD_AND_SE === 1'b1),1.0);
      
      // hold SI-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D_AND_RD_AND_SE === 1'b1),
      posedge SI &&& (ENABLE_NOT_D_AND_RD_AND_SE === 1'b1),1.0);
      
      // setup SI-HL CK-LH
      $setup(negedge SI &&& (ENABLE_NOT_D_AND_RD_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_RD_AND_SE === 1'b1),1.0);
      
      // setup SI-LH CK-LH
      $setup(posedge SI &&& (ENABLE_NOT_D_AND_RD_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_RD_AND_SE === 1'b1),1.0);
      
      // hold SI-HL CK-LH
      $hold(posedge CK &&& (ENABLE_D_AND_RD_AND_SE === 1'b1),
      negedge SI &&& (ENABLE_D_AND_RD_AND_SE === 1'b1),1.0);
      
      // hold SI-LH CK-LH
      $hold(posedge CK &&& (ENABLE_D_AND_RD_AND_SE === 1'b1),
      posedge SI &&& (ENABLE_D_AND_RD_AND_SE === 1'b1),1.0);
      
      // setup SI-HL CK-LH
      $setup(negedge SI &&& (ENABLE_D_AND_RD_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_D_AND_RD_AND_SE === 1'b1),1.0);
      
      // setup SI-LH CK-LH
      $setup(posedge SI &&& (ENABLE_D_AND_RD_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_D_AND_RD_AND_SE === 1'b1),1.0);
      
      // mpw CK_lh 
      $width(posedge CK,1.0,0);
      
      // mpw CK_hl 
      $width(negedge CK,1.0,0);
      
      // mpw RD_hl 
      $width(negedge RD,1.0,0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_FSDPRBQ_V2_0P5( Q, CK, D, SI, SE, RD );
input CK, D, RD, SE, SI;
output Q;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_FSDPRBQ_V2_0P5_func SAEDRVT14_FSDPRBQ_V2_0P5_behav_inst(.Q(Q),.CK(CK),.D(D),.SI(SI),.SE(SE),.RD(RD));
`else
   SAEDRVT14_FSDPRBQ_V2_0P5_func SAEDRVT14_FSDPRBQ_V2_0P5_inst(.Q(Q),.CK(CK),.D(D),.SI(SI),.SE(SE),.RD(RD));
   // spec_gates_begin
   not MGM_G0(MGM_W0,D);
   and MGM_G1(MGM_W1,RD,MGM_W0);
   not MGM_G2(MGM_W2,SE);
   and MGM_G3(MGM_W3,MGM_W2,MGM_W1);
   not MGM_G4(MGM_W4,SI);
   and MGM_G5(ENABLE_NOT_D_AND_RD_AND_NOT_SE_AND_NOT_SI,MGM_W4,MGM_W3);
   not MGM_G6(MGM_W5,D);
   and MGM_G7(MGM_W6,RD,MGM_W5);
   not MGM_G8(MGM_W7,SE);
   and MGM_G9(MGM_W8,MGM_W7,MGM_W6);
   and MGM_G10(ENABLE_NOT_D_AND_RD_AND_NOT_SE_AND_SI,SI,MGM_W8);
   not MGM_G11(MGM_W9,D);
   and MGM_G12(MGM_W10,RD,MGM_W9);
   and MGM_G13(MGM_W11,SE,MGM_W10);
   not MGM_G14(MGM_W12,SI);
   and MGM_G15(ENABLE_NOT_D_AND_RD_AND_SE_AND_NOT_SI,MGM_W12,MGM_W11);
   not MGM_G16(MGM_W13,D);
   and MGM_G17(MGM_W14,RD,MGM_W13);
   and MGM_G18(MGM_W15,SE,MGM_W14);
   and MGM_G19(ENABLE_NOT_D_AND_RD_AND_SE_AND_SI,SI,MGM_W15);
   and MGM_G20(MGM_W16,RD,D);
   not MGM_G21(MGM_W17,SE);
   and MGM_G22(MGM_W18,MGM_W17,MGM_W16);
   not MGM_G23(MGM_W19,SI);
   and MGM_G24(ENABLE_D_AND_RD_AND_NOT_SE_AND_NOT_SI,MGM_W19,MGM_W18);
   and MGM_G25(MGM_W20,RD,D);
   not MGM_G26(MGM_W21,SE);
   and MGM_G27(MGM_W22,MGM_W21,MGM_W20);
   and MGM_G28(ENABLE_D_AND_RD_AND_NOT_SE_AND_SI,SI,MGM_W22);
   and MGM_G29(MGM_W23,RD,D);
   and MGM_G30(MGM_W24,SE,MGM_W23);
   not MGM_G31(MGM_W25,SI);
   and MGM_G32(ENABLE_D_AND_RD_AND_SE_AND_NOT_SI,MGM_W25,MGM_W24);
   and MGM_G33(MGM_W26,RD,D);
   and MGM_G34(MGM_W27,SE,MGM_W26);
   and MGM_G35(ENABLE_D_AND_RD_AND_SE_AND_SI,SI,MGM_W27);
   not MGM_G36(MGM_W28,SE);
   and MGM_G37(MGM_W29,MGM_W28,RD);
   not MGM_G38(MGM_W30,SI);
   and MGM_G39(ENABLE_RD_AND_NOT_SE_AND_NOT_SI,MGM_W30,MGM_W29);
   not MGM_G40(MGM_W31,SE);
   and MGM_G41(MGM_W32,MGM_W31,RD);
   and MGM_G42(ENABLE_RD_AND_NOT_SE_AND_SI,SI,MGM_W32);
   not MGM_G43(MGM_W33,D);
   and MGM_G44(MGM_W34,SE,MGM_W33);
   and MGM_G45(ENABLE_NOT_D_AND_SE_AND_SI,SI,MGM_W34);
   not MGM_G46(MGM_W35,SE);
   and MGM_G47(MGM_W36,MGM_W35,D);
   not MGM_G48(MGM_W37,SI);
   and MGM_G49(ENABLE_D_AND_NOT_SE_AND_NOT_SI,MGM_W37,MGM_W36);
   not MGM_G50(MGM_W38,SE);
   and MGM_G51(MGM_W39,MGM_W38,D);
   and MGM_G52(ENABLE_D_AND_NOT_SE_AND_SI,SI,MGM_W39);
   and MGM_G53(MGM_W40,SE,D);
   and MGM_G54(ENABLE_D_AND_SE_AND_SI,SI,MGM_W40);
   not MGM_G55(MGM_W41,CK);
   not MGM_G56(MGM_W42,D);
   and MGM_G57(MGM_W43,MGM_W42,MGM_W41);
   not MGM_G58(MGM_W44,SE);
   and MGM_G59(MGM_W45,MGM_W44,MGM_W43);
   not MGM_G60(MGM_W46,SI);
   and MGM_G61(ENABLE_NOT_CK_AND_NOT_D_AND_NOT_SE_AND_NOT_SI,MGM_W46,MGM_W45);
   not MGM_G62(MGM_W47,CK);
   not MGM_G63(MGM_W48,D);
   and MGM_G64(MGM_W49,MGM_W48,MGM_W47);
   not MGM_G65(MGM_W50,SE);
   and MGM_G66(MGM_W51,MGM_W50,MGM_W49);
   and MGM_G67(ENABLE_NOT_CK_AND_NOT_D_AND_NOT_SE_AND_SI,SI,MGM_W51);
   not MGM_G68(MGM_W52,CK);
   not MGM_G69(MGM_W53,D);
   and MGM_G70(MGM_W54,MGM_W53,MGM_W52);
   and MGM_G71(MGM_W55,SE,MGM_W54);
   not MGM_G72(MGM_W56,SI);
   and MGM_G73(ENABLE_NOT_CK_AND_NOT_D_AND_SE_AND_NOT_SI,MGM_W56,MGM_W55);
   not MGM_G74(MGM_W57,CK);
   not MGM_G75(MGM_W58,D);
   and MGM_G76(MGM_W59,MGM_W58,MGM_W57);
   and MGM_G77(MGM_W60,SE,MGM_W59);
   and MGM_G78(ENABLE_NOT_CK_AND_NOT_D_AND_SE_AND_SI,SI,MGM_W60);
   not MGM_G79(MGM_W61,CK);
   and MGM_G80(MGM_W62,D,MGM_W61);
   not MGM_G81(MGM_W63,SE);
   and MGM_G82(MGM_W64,MGM_W63,MGM_W62);
   not MGM_G83(MGM_W65,SI);
   and MGM_G84(ENABLE_NOT_CK_AND_D_AND_NOT_SE_AND_NOT_SI,MGM_W65,MGM_W64);
   not MGM_G85(MGM_W66,CK);
   and MGM_G86(MGM_W67,D,MGM_W66);
   not MGM_G87(MGM_W68,SE);
   and MGM_G88(MGM_W69,MGM_W68,MGM_W67);
   and MGM_G89(ENABLE_NOT_CK_AND_D_AND_NOT_SE_AND_SI,SI,MGM_W69);
   not MGM_G90(MGM_W70,CK);
   and MGM_G91(MGM_W71,D,MGM_W70);
   and MGM_G92(MGM_W72,SE,MGM_W71);
   not MGM_G93(MGM_W73,SI);
   and MGM_G94(ENABLE_NOT_CK_AND_D_AND_SE_AND_NOT_SI,MGM_W73,MGM_W72);
   not MGM_G95(MGM_W74,CK);
   and MGM_G96(MGM_W75,D,MGM_W74);
   and MGM_G97(MGM_W76,SE,MGM_W75);
   and MGM_G98(ENABLE_NOT_CK_AND_D_AND_SE_AND_SI,SI,MGM_W76);
   not MGM_G99(MGM_W77,D);
   and MGM_G100(MGM_W78,MGM_W77,CK);
   not MGM_G101(MGM_W79,SE);
   and MGM_G102(MGM_W80,MGM_W79,MGM_W78);
   not MGM_G103(MGM_W81,SI);
   and MGM_G104(ENABLE_CK_AND_NOT_D_AND_NOT_SE_AND_NOT_SI,MGM_W81,MGM_W80);
   not MGM_G105(MGM_W82,D);
   and MGM_G106(MGM_W83,MGM_W82,CK);
   not MGM_G107(MGM_W84,SE);
   and MGM_G108(MGM_W85,MGM_W84,MGM_W83);
   and MGM_G109(ENABLE_CK_AND_NOT_D_AND_NOT_SE_AND_SI,SI,MGM_W85);
   not MGM_G110(MGM_W86,D);
   and MGM_G111(MGM_W87,MGM_W86,CK);
   and MGM_G112(MGM_W88,SE,MGM_W87);
   not MGM_G113(MGM_W89,SI);
   and MGM_G114(ENABLE_CK_AND_NOT_D_AND_SE_AND_NOT_SI,MGM_W89,MGM_W88);
   not MGM_G115(MGM_W90,D);
   and MGM_G116(MGM_W91,MGM_W90,CK);
   and MGM_G117(MGM_W92,SE,MGM_W91);
   and MGM_G118(ENABLE_CK_AND_NOT_D_AND_SE_AND_SI,SI,MGM_W92);
   and MGM_G119(MGM_W93,D,CK);
   not MGM_G120(MGM_W94,SE);
   and MGM_G121(MGM_W95,MGM_W94,MGM_W93);
   not MGM_G122(MGM_W96,SI);
   and MGM_G123(ENABLE_CK_AND_D_AND_NOT_SE_AND_NOT_SI,MGM_W96,MGM_W95);
   and MGM_G124(MGM_W97,D,CK);
   not MGM_G125(MGM_W98,SE);
   and MGM_G126(MGM_W99,MGM_W98,MGM_W97);
   and MGM_G127(ENABLE_CK_AND_D_AND_NOT_SE_AND_SI,SI,MGM_W99);
   and MGM_G128(MGM_W100,D,CK);
   and MGM_G129(MGM_W101,SE,MGM_W100);
   not MGM_G130(MGM_W102,SI);
   and MGM_G131(ENABLE_CK_AND_D_AND_SE_AND_NOT_SI,MGM_W102,MGM_W101);
   and MGM_G132(MGM_W103,D,CK);
   and MGM_G133(MGM_W104,SE,MGM_W103);
   and MGM_G134(ENABLE_CK_AND_D_AND_SE_AND_SI,SI,MGM_W104);
   not MGM_G135(MGM_W105,D);
   and MGM_G136(MGM_W106,RD,MGM_W105);
   and MGM_G137(ENABLE_NOT_D_AND_RD_AND_SI,SI,MGM_W106);
   and MGM_G138(MGM_W107,RD,D);
   not MGM_G139(MGM_W108,SI);
   and MGM_G140(ENABLE_D_AND_RD_AND_NOT_SI,MGM_W108,MGM_W107);
   not MGM_G141(MGM_W109,D);
   and MGM_G142(MGM_W110,RD,MGM_W109);
   and MGM_G143(ENABLE_NOT_D_AND_RD_AND_SE,SE,MGM_W110);
   and MGM_G144(MGM_W111,RD,D);
   and MGM_G145(ENABLE_D_AND_RD_AND_SE,SE,MGM_W111);
   // spec_gates_end
   // specify_block_begin
   specify

      if(D===1'b0 && SI===1'b1)
      // seq arc CK --> Q
      (posedge CK => (Q : SE))  = (1.0,1.0);
      
      if(SE===1'b0 && SI===1'b0)
      // seq arc CK --> Q
      (posedge CK => (Q : D))  = (1.0,1.0);
      
      if(D===1'b1 && SE===1'b0 && SI===1'b1 || D===1'b0 && SE===1'b1 && SI===1'b0)
      // seq arc CK --> Q
      (posedge CK => (Q : D))  = (1.0,1.0);
      
      if(D===1'b1 && SE===1'b1)
      // seq arc CK --> Q
      (posedge CK => (Q : SI))  = (1.0,1.0);
      
      ifnone
      // seq arc CK --> Q
      (posedge CK => (Q : D))  = (1.0,1.0);
      
      if(CK===1'b0 && D===1'b0 && SE===1'b0 && SI===1'b0)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b0 && D===1'b0 && SE===1'b0 && SI===1'b1)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b0 && D===1'b0 && SE===1'b1 && SI===1'b0)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b0 && D===1'b0 && SE===1'b1 && SI===1'b1)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b0 && D===1'b1 && SE===1'b0 && SI===1'b0)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b0 && D===1'b1 && SE===1'b0 && SI===1'b1)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b0 && D===1'b1 && SE===1'b1 && SI===1'b0)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b0 && D===1'b1 && SE===1'b1 && SI===1'b1)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b1 && D===1'b0 && SE===1'b0 && SI===1'b0)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b1 && D===1'b0 && SE===1'b0 && SI===1'b1)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b1 && D===1'b0 && SE===1'b1 && SI===1'b0)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b1 && D===1'b0 && SE===1'b1 && SI===1'b1)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b1 && D===1'b1 && SE===1'b0 && SI===1'b0)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b1 && D===1'b1 && SE===1'b0 && SI===1'b1)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b1 && D===1'b1 && SE===1'b1 && SI===1'b0)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b1 && D===1'b1 && SE===1'b1 && SI===1'b1)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      ifnone
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_RD_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_RD_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_RD_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_RD_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_RD_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_RD_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_RD_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_RD_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_RD_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_RD_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_RD_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_RD_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_RD_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_RD_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_RD_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_RD_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      // hold D-HL CK-LH
      $hold(posedge CK &&& (ENABLE_RD_AND_NOT_SE_AND_NOT_SI === 1'b1),
      negedge D &&& (ENABLE_RD_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold D-LH CK-LH
      $hold(posedge CK &&& (ENABLE_RD_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge D &&& (ENABLE_RD_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup D-HL CK-LH
      $setup(negedge D &&& (ENABLE_RD_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_RD_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup D-LH CK-LH
      $setup(posedge D &&& (ENABLE_RD_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_RD_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold D-HL CK-LH
      $hold(posedge CK &&& (ENABLE_RD_AND_NOT_SE_AND_SI === 1'b1),
      negedge D &&& (ENABLE_RD_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // hold D-LH CK-LH
      $hold(posedge CK &&& (ENABLE_RD_AND_NOT_SE_AND_SI === 1'b1),
      posedge D &&& (ENABLE_RD_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // setup D-HL CK-LH
      $setup(negedge D &&& (ENABLE_RD_AND_NOT_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_RD_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // setup D-LH CK-LH
      $setup(posedge D &&& (ENABLE_RD_AND_NOT_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_RD_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // recovery RD-LH CK-LH
      $recovery(posedge RD &&& (ENABLE_NOT_D_AND_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_SE_AND_SI === 1'b1),1.0);
      
      // removal RD-LH CK-LH
      $removal(posedge RD &&& (ENABLE_NOT_D_AND_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_SE_AND_SI === 1'b1),1.0);
      
      // recovery RD-LH CK-LH
      $recovery(posedge RD &&& (ENABLE_D_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_D_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // removal RD-LH CK-LH
      $removal(posedge RD &&& (ENABLE_D_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_D_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // recovery RD-LH CK-LH
      $recovery(posedge RD &&& (ENABLE_D_AND_NOT_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_D_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // removal RD-LH CK-LH
      $removal(posedge RD &&& (ENABLE_D_AND_NOT_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_D_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // recovery RD-LH CK-LH
      $recovery(posedge RD &&& (ENABLE_D_AND_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_D_AND_SE_AND_SI === 1'b1),1.0);
      
      // removal RD-LH CK-LH
      $removal(posedge RD &&& (ENABLE_D_AND_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_D_AND_SE_AND_SI === 1'b1),1.0);
      
      $width(negedge RD &&& (ENABLE_NOT_CK_AND_NOT_D_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge RD &&& (ENABLE_NOT_CK_AND_NOT_D_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge RD &&& (ENABLE_NOT_CK_AND_NOT_D_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge RD &&& (ENABLE_NOT_CK_AND_NOT_D_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge RD &&& (ENABLE_NOT_CK_AND_D_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge RD &&& (ENABLE_NOT_CK_AND_D_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge RD &&& (ENABLE_NOT_CK_AND_D_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge RD &&& (ENABLE_NOT_CK_AND_D_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge RD &&& (ENABLE_CK_AND_NOT_D_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge RD &&& (ENABLE_CK_AND_NOT_D_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge RD &&& (ENABLE_CK_AND_NOT_D_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge RD &&& (ENABLE_CK_AND_NOT_D_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge RD &&& (ENABLE_CK_AND_D_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge RD &&& (ENABLE_CK_AND_D_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge RD &&& (ENABLE_CK_AND_D_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge RD &&& (ENABLE_CK_AND_D_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      // hold SE-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D_AND_RD_AND_SI === 1'b1),
      negedge SE &&& (ENABLE_NOT_D_AND_RD_AND_SI === 1'b1),1.0);
      
      // hold SE-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D_AND_RD_AND_SI === 1'b1),
      posedge SE &&& (ENABLE_NOT_D_AND_RD_AND_SI === 1'b1),1.0);
      
      // setup SE-HL CK-LH
      $setup(negedge SE &&& (ENABLE_NOT_D_AND_RD_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_RD_AND_SI === 1'b1),1.0);
      
      // setup SE-LH CK-LH
      $setup(posedge SE &&& (ENABLE_NOT_D_AND_RD_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_RD_AND_SI === 1'b1),1.0);
      
      // hold SE-HL CK-LH
      $hold(posedge CK &&& (ENABLE_D_AND_RD_AND_NOT_SI === 1'b1),
      negedge SE &&& (ENABLE_D_AND_RD_AND_NOT_SI === 1'b1),1.0);
      
      // hold SE-LH CK-LH
      $hold(posedge CK &&& (ENABLE_D_AND_RD_AND_NOT_SI === 1'b1),
      posedge SE &&& (ENABLE_D_AND_RD_AND_NOT_SI === 1'b1),1.0);
      
      // setup SE-HL CK-LH
      $setup(negedge SE &&& (ENABLE_D_AND_RD_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_D_AND_RD_AND_NOT_SI === 1'b1),1.0);
      
      // setup SE-LH CK-LH
      $setup(posedge SE &&& (ENABLE_D_AND_RD_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_D_AND_RD_AND_NOT_SI === 1'b1),1.0);
      
      // hold SI-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D_AND_RD_AND_SE === 1'b1),
      negedge SI &&& (ENABLE_NOT_D_AND_RD_AND_SE === 1'b1),1.0);
      
      // hold SI-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D_AND_RD_AND_SE === 1'b1),
      posedge SI &&& (ENABLE_NOT_D_AND_RD_AND_SE === 1'b1),1.0);
      
      // setup SI-HL CK-LH
      $setup(negedge SI &&& (ENABLE_NOT_D_AND_RD_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_RD_AND_SE === 1'b1),1.0);
      
      // setup SI-LH CK-LH
      $setup(posedge SI &&& (ENABLE_NOT_D_AND_RD_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_RD_AND_SE === 1'b1),1.0);
      
      // hold SI-HL CK-LH
      $hold(posedge CK &&& (ENABLE_D_AND_RD_AND_SE === 1'b1),
      negedge SI &&& (ENABLE_D_AND_RD_AND_SE === 1'b1),1.0);
      
      // hold SI-LH CK-LH
      $hold(posedge CK &&& (ENABLE_D_AND_RD_AND_SE === 1'b1),
      posedge SI &&& (ENABLE_D_AND_RD_AND_SE === 1'b1),1.0);
      
      // setup SI-HL CK-LH
      $setup(negedge SI &&& (ENABLE_D_AND_RD_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_D_AND_RD_AND_SE === 1'b1),1.0);
      
      // setup SI-LH CK-LH
      $setup(posedge SI &&& (ENABLE_D_AND_RD_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_D_AND_RD_AND_SE === 1'b1),1.0);
      
      // mpw CK_lh 
      $width(posedge CK,1.0,0);
      
      // mpw CK_hl 
      $width(negedge CK,1.0,0);
      
      // mpw RD_hl 
      $width(negedge RD,1.0,0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_FSDPRBQ_V2_1( Q, CK, D, SI, SE, RD );
input CK, D, RD, SE, SI;
output Q;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_FSDPRBQ_V2_1_func SAEDRVT14_FSDPRBQ_V2_1_behav_inst(.Q(Q),.CK(CK),.D(D),.SI(SI),.SE(SE),.RD(RD));
`else
   SAEDRVT14_FSDPRBQ_V2_1_func SAEDRVT14_FSDPRBQ_V2_1_inst(.Q(Q),.CK(CK),.D(D),.SI(SI),.SE(SE),.RD(RD));
   // spec_gates_begin
   not MGM_G0(MGM_W0,D);
   and MGM_G1(MGM_W1,RD,MGM_W0);
   not MGM_G2(MGM_W2,SE);
   and MGM_G3(MGM_W3,MGM_W2,MGM_W1);
   not MGM_G4(MGM_W4,SI);
   and MGM_G5(ENABLE_NOT_D_AND_RD_AND_NOT_SE_AND_NOT_SI,MGM_W4,MGM_W3);
   not MGM_G6(MGM_W5,D);
   and MGM_G7(MGM_W6,RD,MGM_W5);
   not MGM_G8(MGM_W7,SE);
   and MGM_G9(MGM_W8,MGM_W7,MGM_W6);
   and MGM_G10(ENABLE_NOT_D_AND_RD_AND_NOT_SE_AND_SI,SI,MGM_W8);
   not MGM_G11(MGM_W9,D);
   and MGM_G12(MGM_W10,RD,MGM_W9);
   and MGM_G13(MGM_W11,SE,MGM_W10);
   not MGM_G14(MGM_W12,SI);
   and MGM_G15(ENABLE_NOT_D_AND_RD_AND_SE_AND_NOT_SI,MGM_W12,MGM_W11);
   not MGM_G16(MGM_W13,D);
   and MGM_G17(MGM_W14,RD,MGM_W13);
   and MGM_G18(MGM_W15,SE,MGM_W14);
   and MGM_G19(ENABLE_NOT_D_AND_RD_AND_SE_AND_SI,SI,MGM_W15);
   and MGM_G20(MGM_W16,RD,D);
   not MGM_G21(MGM_W17,SE);
   and MGM_G22(MGM_W18,MGM_W17,MGM_W16);
   not MGM_G23(MGM_W19,SI);
   and MGM_G24(ENABLE_D_AND_RD_AND_NOT_SE_AND_NOT_SI,MGM_W19,MGM_W18);
   and MGM_G25(MGM_W20,RD,D);
   not MGM_G26(MGM_W21,SE);
   and MGM_G27(MGM_W22,MGM_W21,MGM_W20);
   and MGM_G28(ENABLE_D_AND_RD_AND_NOT_SE_AND_SI,SI,MGM_W22);
   and MGM_G29(MGM_W23,RD,D);
   and MGM_G30(MGM_W24,SE,MGM_W23);
   not MGM_G31(MGM_W25,SI);
   and MGM_G32(ENABLE_D_AND_RD_AND_SE_AND_NOT_SI,MGM_W25,MGM_W24);
   and MGM_G33(MGM_W26,RD,D);
   and MGM_G34(MGM_W27,SE,MGM_W26);
   and MGM_G35(ENABLE_D_AND_RD_AND_SE_AND_SI,SI,MGM_W27);
   not MGM_G36(MGM_W28,SE);
   and MGM_G37(MGM_W29,MGM_W28,RD);
   not MGM_G38(MGM_W30,SI);
   and MGM_G39(ENABLE_RD_AND_NOT_SE_AND_NOT_SI,MGM_W30,MGM_W29);
   not MGM_G40(MGM_W31,SE);
   and MGM_G41(MGM_W32,MGM_W31,RD);
   and MGM_G42(ENABLE_RD_AND_NOT_SE_AND_SI,SI,MGM_W32);
   not MGM_G43(MGM_W33,D);
   and MGM_G44(MGM_W34,SE,MGM_W33);
   and MGM_G45(ENABLE_NOT_D_AND_SE_AND_SI,SI,MGM_W34);
   not MGM_G46(MGM_W35,SE);
   and MGM_G47(MGM_W36,MGM_W35,D);
   not MGM_G48(MGM_W37,SI);
   and MGM_G49(ENABLE_D_AND_NOT_SE_AND_NOT_SI,MGM_W37,MGM_W36);
   not MGM_G50(MGM_W38,SE);
   and MGM_G51(MGM_W39,MGM_W38,D);
   and MGM_G52(ENABLE_D_AND_NOT_SE_AND_SI,SI,MGM_W39);
   and MGM_G53(MGM_W40,SE,D);
   and MGM_G54(ENABLE_D_AND_SE_AND_SI,SI,MGM_W40);
   not MGM_G55(MGM_W41,CK);
   not MGM_G56(MGM_W42,D);
   and MGM_G57(MGM_W43,MGM_W42,MGM_W41);
   not MGM_G58(MGM_W44,SE);
   and MGM_G59(MGM_W45,MGM_W44,MGM_W43);
   not MGM_G60(MGM_W46,SI);
   and MGM_G61(ENABLE_NOT_CK_AND_NOT_D_AND_NOT_SE_AND_NOT_SI,MGM_W46,MGM_W45);
   not MGM_G62(MGM_W47,CK);
   not MGM_G63(MGM_W48,D);
   and MGM_G64(MGM_W49,MGM_W48,MGM_W47);
   not MGM_G65(MGM_W50,SE);
   and MGM_G66(MGM_W51,MGM_W50,MGM_W49);
   and MGM_G67(ENABLE_NOT_CK_AND_NOT_D_AND_NOT_SE_AND_SI,SI,MGM_W51);
   not MGM_G68(MGM_W52,CK);
   not MGM_G69(MGM_W53,D);
   and MGM_G70(MGM_W54,MGM_W53,MGM_W52);
   and MGM_G71(MGM_W55,SE,MGM_W54);
   not MGM_G72(MGM_W56,SI);
   and MGM_G73(ENABLE_NOT_CK_AND_NOT_D_AND_SE_AND_NOT_SI,MGM_W56,MGM_W55);
   not MGM_G74(MGM_W57,CK);
   not MGM_G75(MGM_W58,D);
   and MGM_G76(MGM_W59,MGM_W58,MGM_W57);
   and MGM_G77(MGM_W60,SE,MGM_W59);
   and MGM_G78(ENABLE_NOT_CK_AND_NOT_D_AND_SE_AND_SI,SI,MGM_W60);
   not MGM_G79(MGM_W61,CK);
   and MGM_G80(MGM_W62,D,MGM_W61);
   not MGM_G81(MGM_W63,SE);
   and MGM_G82(MGM_W64,MGM_W63,MGM_W62);
   not MGM_G83(MGM_W65,SI);
   and MGM_G84(ENABLE_NOT_CK_AND_D_AND_NOT_SE_AND_NOT_SI,MGM_W65,MGM_W64);
   not MGM_G85(MGM_W66,CK);
   and MGM_G86(MGM_W67,D,MGM_W66);
   not MGM_G87(MGM_W68,SE);
   and MGM_G88(MGM_W69,MGM_W68,MGM_W67);
   and MGM_G89(ENABLE_NOT_CK_AND_D_AND_NOT_SE_AND_SI,SI,MGM_W69);
   not MGM_G90(MGM_W70,CK);
   and MGM_G91(MGM_W71,D,MGM_W70);
   and MGM_G92(MGM_W72,SE,MGM_W71);
   not MGM_G93(MGM_W73,SI);
   and MGM_G94(ENABLE_NOT_CK_AND_D_AND_SE_AND_NOT_SI,MGM_W73,MGM_W72);
   not MGM_G95(MGM_W74,CK);
   and MGM_G96(MGM_W75,D,MGM_W74);
   and MGM_G97(MGM_W76,SE,MGM_W75);
   and MGM_G98(ENABLE_NOT_CK_AND_D_AND_SE_AND_SI,SI,MGM_W76);
   not MGM_G99(MGM_W77,D);
   and MGM_G100(MGM_W78,MGM_W77,CK);
   not MGM_G101(MGM_W79,SE);
   and MGM_G102(MGM_W80,MGM_W79,MGM_W78);
   not MGM_G103(MGM_W81,SI);
   and MGM_G104(ENABLE_CK_AND_NOT_D_AND_NOT_SE_AND_NOT_SI,MGM_W81,MGM_W80);
   not MGM_G105(MGM_W82,D);
   and MGM_G106(MGM_W83,MGM_W82,CK);
   not MGM_G107(MGM_W84,SE);
   and MGM_G108(MGM_W85,MGM_W84,MGM_W83);
   and MGM_G109(ENABLE_CK_AND_NOT_D_AND_NOT_SE_AND_SI,SI,MGM_W85);
   not MGM_G110(MGM_W86,D);
   and MGM_G111(MGM_W87,MGM_W86,CK);
   and MGM_G112(MGM_W88,SE,MGM_W87);
   not MGM_G113(MGM_W89,SI);
   and MGM_G114(ENABLE_CK_AND_NOT_D_AND_SE_AND_NOT_SI,MGM_W89,MGM_W88);
   not MGM_G115(MGM_W90,D);
   and MGM_G116(MGM_W91,MGM_W90,CK);
   and MGM_G117(MGM_W92,SE,MGM_W91);
   and MGM_G118(ENABLE_CK_AND_NOT_D_AND_SE_AND_SI,SI,MGM_W92);
   and MGM_G119(MGM_W93,D,CK);
   not MGM_G120(MGM_W94,SE);
   and MGM_G121(MGM_W95,MGM_W94,MGM_W93);
   not MGM_G122(MGM_W96,SI);
   and MGM_G123(ENABLE_CK_AND_D_AND_NOT_SE_AND_NOT_SI,MGM_W96,MGM_W95);
   and MGM_G124(MGM_W97,D,CK);
   not MGM_G125(MGM_W98,SE);
   and MGM_G126(MGM_W99,MGM_W98,MGM_W97);
   and MGM_G127(ENABLE_CK_AND_D_AND_NOT_SE_AND_SI,SI,MGM_W99);
   and MGM_G128(MGM_W100,D,CK);
   and MGM_G129(MGM_W101,SE,MGM_W100);
   not MGM_G130(MGM_W102,SI);
   and MGM_G131(ENABLE_CK_AND_D_AND_SE_AND_NOT_SI,MGM_W102,MGM_W101);
   and MGM_G132(MGM_W103,D,CK);
   and MGM_G133(MGM_W104,SE,MGM_W103);
   and MGM_G134(ENABLE_CK_AND_D_AND_SE_AND_SI,SI,MGM_W104);
   not MGM_G135(MGM_W105,D);
   and MGM_G136(MGM_W106,RD,MGM_W105);
   and MGM_G137(ENABLE_NOT_D_AND_RD_AND_SI,SI,MGM_W106);
   and MGM_G138(MGM_W107,RD,D);
   not MGM_G139(MGM_W108,SI);
   and MGM_G140(ENABLE_D_AND_RD_AND_NOT_SI,MGM_W108,MGM_W107);
   not MGM_G141(MGM_W109,D);
   and MGM_G142(MGM_W110,RD,MGM_W109);
   and MGM_G143(ENABLE_NOT_D_AND_RD_AND_SE,SE,MGM_W110);
   and MGM_G144(MGM_W111,RD,D);
   and MGM_G145(ENABLE_D_AND_RD_AND_SE,SE,MGM_W111);
   // spec_gates_end
   // specify_block_begin
   specify

      if(D===1'b0 && SI===1'b1)
      // seq arc CK --> Q
      (posedge CK => (Q : SE))  = (1.0,1.0);
      
      if(SE===1'b0 && SI===1'b0)
      // seq arc CK --> Q
      (posedge CK => (Q : D))  = (1.0,1.0);
      
      if(D===1'b1 && SE===1'b0 && SI===1'b1 || D===1'b0 && SE===1'b1 && SI===1'b0)
      // seq arc CK --> Q
      (posedge CK => (Q : D))  = (1.0,1.0);
      
      if(D===1'b1 && SE===1'b1)
      // seq arc CK --> Q
      (posedge CK => (Q : SI))  = (1.0,1.0);
      
      ifnone
      // seq arc CK --> Q
      (posedge CK => (Q : D))  = (1.0,1.0);
      
      if(CK===1'b0 && D===1'b0 && SE===1'b0 && SI===1'b0)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b0 && D===1'b0 && SE===1'b0 && SI===1'b1)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b0 && D===1'b0 && SE===1'b1 && SI===1'b0)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b0 && D===1'b0 && SE===1'b1 && SI===1'b1)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b0 && D===1'b1 && SE===1'b0 && SI===1'b0)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b0 && D===1'b1 && SE===1'b0 && SI===1'b1)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b0 && D===1'b1 && SE===1'b1 && SI===1'b0)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b0 && D===1'b1 && SE===1'b1 && SI===1'b1)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b1 && D===1'b0 && SE===1'b0 && SI===1'b0)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b1 && D===1'b0 && SE===1'b0 && SI===1'b1)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b1 && D===1'b0 && SE===1'b1 && SI===1'b0)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b1 && D===1'b0 && SE===1'b1 && SI===1'b1)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b1 && D===1'b1 && SE===1'b0 && SI===1'b0)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b1 && D===1'b1 && SE===1'b0 && SI===1'b1)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b1 && D===1'b1 && SE===1'b1 && SI===1'b0)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b1 && D===1'b1 && SE===1'b1 && SI===1'b1)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      ifnone
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_RD_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_RD_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_RD_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_RD_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_RD_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_RD_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_RD_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_RD_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_RD_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_RD_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_RD_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_RD_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_RD_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_RD_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_RD_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_RD_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      // hold D-HL CK-LH
      $hold(posedge CK &&& (ENABLE_RD_AND_NOT_SE_AND_NOT_SI === 1'b1),
      negedge D &&& (ENABLE_RD_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold D-LH CK-LH
      $hold(posedge CK &&& (ENABLE_RD_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge D &&& (ENABLE_RD_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup D-HL CK-LH
      $setup(negedge D &&& (ENABLE_RD_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_RD_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup D-LH CK-LH
      $setup(posedge D &&& (ENABLE_RD_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_RD_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold D-HL CK-LH
      $hold(posedge CK &&& (ENABLE_RD_AND_NOT_SE_AND_SI === 1'b1),
      negedge D &&& (ENABLE_RD_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // hold D-LH CK-LH
      $hold(posedge CK &&& (ENABLE_RD_AND_NOT_SE_AND_SI === 1'b1),
      posedge D &&& (ENABLE_RD_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // setup D-HL CK-LH
      $setup(negedge D &&& (ENABLE_RD_AND_NOT_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_RD_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // setup D-LH CK-LH
      $setup(posedge D &&& (ENABLE_RD_AND_NOT_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_RD_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // recovery RD-LH CK-LH
      $recovery(posedge RD &&& (ENABLE_NOT_D_AND_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_SE_AND_SI === 1'b1),1.0);
      
      // removal RD-LH CK-LH
      $removal(posedge RD &&& (ENABLE_NOT_D_AND_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_SE_AND_SI === 1'b1),1.0);
      
      // recovery RD-LH CK-LH
      $recovery(posedge RD &&& (ENABLE_D_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_D_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // removal RD-LH CK-LH
      $removal(posedge RD &&& (ENABLE_D_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_D_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // recovery RD-LH CK-LH
      $recovery(posedge RD &&& (ENABLE_D_AND_NOT_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_D_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // removal RD-LH CK-LH
      $removal(posedge RD &&& (ENABLE_D_AND_NOT_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_D_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // recovery RD-LH CK-LH
      $recovery(posedge RD &&& (ENABLE_D_AND_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_D_AND_SE_AND_SI === 1'b1),1.0);
      
      // removal RD-LH CK-LH
      $removal(posedge RD &&& (ENABLE_D_AND_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_D_AND_SE_AND_SI === 1'b1),1.0);
      
      $width(negedge RD &&& (ENABLE_NOT_CK_AND_NOT_D_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge RD &&& (ENABLE_NOT_CK_AND_NOT_D_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge RD &&& (ENABLE_NOT_CK_AND_NOT_D_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge RD &&& (ENABLE_NOT_CK_AND_NOT_D_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge RD &&& (ENABLE_NOT_CK_AND_D_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge RD &&& (ENABLE_NOT_CK_AND_D_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge RD &&& (ENABLE_NOT_CK_AND_D_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge RD &&& (ENABLE_NOT_CK_AND_D_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge RD &&& (ENABLE_CK_AND_NOT_D_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge RD &&& (ENABLE_CK_AND_NOT_D_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge RD &&& (ENABLE_CK_AND_NOT_D_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge RD &&& (ENABLE_CK_AND_NOT_D_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge RD &&& (ENABLE_CK_AND_D_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge RD &&& (ENABLE_CK_AND_D_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge RD &&& (ENABLE_CK_AND_D_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge RD &&& (ENABLE_CK_AND_D_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      // hold SE-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D_AND_RD_AND_SI === 1'b1),
      negedge SE &&& (ENABLE_NOT_D_AND_RD_AND_SI === 1'b1),1.0);
      
      // hold SE-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D_AND_RD_AND_SI === 1'b1),
      posedge SE &&& (ENABLE_NOT_D_AND_RD_AND_SI === 1'b1),1.0);
      
      // setup SE-HL CK-LH
      $setup(negedge SE &&& (ENABLE_NOT_D_AND_RD_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_RD_AND_SI === 1'b1),1.0);
      
      // setup SE-LH CK-LH
      $setup(posedge SE &&& (ENABLE_NOT_D_AND_RD_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_RD_AND_SI === 1'b1),1.0);
      
      // hold SE-HL CK-LH
      $hold(posedge CK &&& (ENABLE_D_AND_RD_AND_NOT_SI === 1'b1),
      negedge SE &&& (ENABLE_D_AND_RD_AND_NOT_SI === 1'b1),1.0);
      
      // hold SE-LH CK-LH
      $hold(posedge CK &&& (ENABLE_D_AND_RD_AND_NOT_SI === 1'b1),
      posedge SE &&& (ENABLE_D_AND_RD_AND_NOT_SI === 1'b1),1.0);
      
      // setup SE-HL CK-LH
      $setup(negedge SE &&& (ENABLE_D_AND_RD_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_D_AND_RD_AND_NOT_SI === 1'b1),1.0);
      
      // setup SE-LH CK-LH
      $setup(posedge SE &&& (ENABLE_D_AND_RD_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_D_AND_RD_AND_NOT_SI === 1'b1),1.0);
      
      // hold SI-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D_AND_RD_AND_SE === 1'b1),
      negedge SI &&& (ENABLE_NOT_D_AND_RD_AND_SE === 1'b1),1.0);
      
      // hold SI-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D_AND_RD_AND_SE === 1'b1),
      posedge SI &&& (ENABLE_NOT_D_AND_RD_AND_SE === 1'b1),1.0);
      
      // setup SI-HL CK-LH
      $setup(negedge SI &&& (ENABLE_NOT_D_AND_RD_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_RD_AND_SE === 1'b1),1.0);
      
      // setup SI-LH CK-LH
      $setup(posedge SI &&& (ENABLE_NOT_D_AND_RD_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_RD_AND_SE === 1'b1),1.0);
      
      // hold SI-HL CK-LH
      $hold(posedge CK &&& (ENABLE_D_AND_RD_AND_SE === 1'b1),
      negedge SI &&& (ENABLE_D_AND_RD_AND_SE === 1'b1),1.0);
      
      // hold SI-LH CK-LH
      $hold(posedge CK &&& (ENABLE_D_AND_RD_AND_SE === 1'b1),
      posedge SI &&& (ENABLE_D_AND_RD_AND_SE === 1'b1),1.0);
      
      // setup SI-HL CK-LH
      $setup(negedge SI &&& (ENABLE_D_AND_RD_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_D_AND_RD_AND_SE === 1'b1),1.0);
      
      // setup SI-LH CK-LH
      $setup(posedge SI &&& (ENABLE_D_AND_RD_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_D_AND_RD_AND_SE === 1'b1),1.0);
      
      // mpw CK_lh 
      $width(posedge CK,1.0,0);
      
      // mpw CK_hl 
      $width(negedge CK,1.0,0);
      
      // mpw RD_hl 
      $width(negedge RD,1.0,0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_FSDPRBQ_V2_2( Q, CK, D, SI, SE, RD );
input CK, D, RD, SE, SI;
output Q;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_FSDPRBQ_V2_2_func SAEDRVT14_FSDPRBQ_V2_2_behav_inst(.Q(Q),.CK(CK),.D(D),.SI(SI),.SE(SE),.RD(RD));
`else
   SAEDRVT14_FSDPRBQ_V2_2_func SAEDRVT14_FSDPRBQ_V2_2_inst(.Q(Q),.CK(CK),.D(D),.SI(SI),.SE(SE),.RD(RD));
   // spec_gates_begin
   not MGM_G0(MGM_W0,D);
   and MGM_G1(MGM_W1,RD,MGM_W0);
   not MGM_G2(MGM_W2,SE);
   and MGM_G3(MGM_W3,MGM_W2,MGM_W1);
   not MGM_G4(MGM_W4,SI);
   and MGM_G5(ENABLE_NOT_D_AND_RD_AND_NOT_SE_AND_NOT_SI,MGM_W4,MGM_W3);
   not MGM_G6(MGM_W5,D);
   and MGM_G7(MGM_W6,RD,MGM_W5);
   not MGM_G8(MGM_W7,SE);
   and MGM_G9(MGM_W8,MGM_W7,MGM_W6);
   and MGM_G10(ENABLE_NOT_D_AND_RD_AND_NOT_SE_AND_SI,SI,MGM_W8);
   not MGM_G11(MGM_W9,D);
   and MGM_G12(MGM_W10,RD,MGM_W9);
   and MGM_G13(MGM_W11,SE,MGM_W10);
   not MGM_G14(MGM_W12,SI);
   and MGM_G15(ENABLE_NOT_D_AND_RD_AND_SE_AND_NOT_SI,MGM_W12,MGM_W11);
   not MGM_G16(MGM_W13,D);
   and MGM_G17(MGM_W14,RD,MGM_W13);
   and MGM_G18(MGM_W15,SE,MGM_W14);
   and MGM_G19(ENABLE_NOT_D_AND_RD_AND_SE_AND_SI,SI,MGM_W15);
   and MGM_G20(MGM_W16,RD,D);
   not MGM_G21(MGM_W17,SE);
   and MGM_G22(MGM_W18,MGM_W17,MGM_W16);
   not MGM_G23(MGM_W19,SI);
   and MGM_G24(ENABLE_D_AND_RD_AND_NOT_SE_AND_NOT_SI,MGM_W19,MGM_W18);
   and MGM_G25(MGM_W20,RD,D);
   not MGM_G26(MGM_W21,SE);
   and MGM_G27(MGM_W22,MGM_W21,MGM_W20);
   and MGM_G28(ENABLE_D_AND_RD_AND_NOT_SE_AND_SI,SI,MGM_W22);
   and MGM_G29(MGM_W23,RD,D);
   and MGM_G30(MGM_W24,SE,MGM_W23);
   not MGM_G31(MGM_W25,SI);
   and MGM_G32(ENABLE_D_AND_RD_AND_SE_AND_NOT_SI,MGM_W25,MGM_W24);
   and MGM_G33(MGM_W26,RD,D);
   and MGM_G34(MGM_W27,SE,MGM_W26);
   and MGM_G35(ENABLE_D_AND_RD_AND_SE_AND_SI,SI,MGM_W27);
   not MGM_G36(MGM_W28,SE);
   and MGM_G37(MGM_W29,MGM_W28,RD);
   not MGM_G38(MGM_W30,SI);
   and MGM_G39(ENABLE_RD_AND_NOT_SE_AND_NOT_SI,MGM_W30,MGM_W29);
   not MGM_G40(MGM_W31,SE);
   and MGM_G41(MGM_W32,MGM_W31,RD);
   and MGM_G42(ENABLE_RD_AND_NOT_SE_AND_SI,SI,MGM_W32);
   not MGM_G43(MGM_W33,D);
   and MGM_G44(MGM_W34,SE,MGM_W33);
   and MGM_G45(ENABLE_NOT_D_AND_SE_AND_SI,SI,MGM_W34);
   not MGM_G46(MGM_W35,SE);
   and MGM_G47(MGM_W36,MGM_W35,D);
   not MGM_G48(MGM_W37,SI);
   and MGM_G49(ENABLE_D_AND_NOT_SE_AND_NOT_SI,MGM_W37,MGM_W36);
   not MGM_G50(MGM_W38,SE);
   and MGM_G51(MGM_W39,MGM_W38,D);
   and MGM_G52(ENABLE_D_AND_NOT_SE_AND_SI,SI,MGM_W39);
   and MGM_G53(MGM_W40,SE,D);
   and MGM_G54(ENABLE_D_AND_SE_AND_SI,SI,MGM_W40);
   not MGM_G55(MGM_W41,CK);
   not MGM_G56(MGM_W42,D);
   and MGM_G57(MGM_W43,MGM_W42,MGM_W41);
   not MGM_G58(MGM_W44,SE);
   and MGM_G59(MGM_W45,MGM_W44,MGM_W43);
   not MGM_G60(MGM_W46,SI);
   and MGM_G61(ENABLE_NOT_CK_AND_NOT_D_AND_NOT_SE_AND_NOT_SI,MGM_W46,MGM_W45);
   not MGM_G62(MGM_W47,CK);
   not MGM_G63(MGM_W48,D);
   and MGM_G64(MGM_W49,MGM_W48,MGM_W47);
   not MGM_G65(MGM_W50,SE);
   and MGM_G66(MGM_W51,MGM_W50,MGM_W49);
   and MGM_G67(ENABLE_NOT_CK_AND_NOT_D_AND_NOT_SE_AND_SI,SI,MGM_W51);
   not MGM_G68(MGM_W52,CK);
   not MGM_G69(MGM_W53,D);
   and MGM_G70(MGM_W54,MGM_W53,MGM_W52);
   and MGM_G71(MGM_W55,SE,MGM_W54);
   not MGM_G72(MGM_W56,SI);
   and MGM_G73(ENABLE_NOT_CK_AND_NOT_D_AND_SE_AND_NOT_SI,MGM_W56,MGM_W55);
   not MGM_G74(MGM_W57,CK);
   not MGM_G75(MGM_W58,D);
   and MGM_G76(MGM_W59,MGM_W58,MGM_W57);
   and MGM_G77(MGM_W60,SE,MGM_W59);
   and MGM_G78(ENABLE_NOT_CK_AND_NOT_D_AND_SE_AND_SI,SI,MGM_W60);
   not MGM_G79(MGM_W61,CK);
   and MGM_G80(MGM_W62,D,MGM_W61);
   not MGM_G81(MGM_W63,SE);
   and MGM_G82(MGM_W64,MGM_W63,MGM_W62);
   not MGM_G83(MGM_W65,SI);
   and MGM_G84(ENABLE_NOT_CK_AND_D_AND_NOT_SE_AND_NOT_SI,MGM_W65,MGM_W64);
   not MGM_G85(MGM_W66,CK);
   and MGM_G86(MGM_W67,D,MGM_W66);
   not MGM_G87(MGM_W68,SE);
   and MGM_G88(MGM_W69,MGM_W68,MGM_W67);
   and MGM_G89(ENABLE_NOT_CK_AND_D_AND_NOT_SE_AND_SI,SI,MGM_W69);
   not MGM_G90(MGM_W70,CK);
   and MGM_G91(MGM_W71,D,MGM_W70);
   and MGM_G92(MGM_W72,SE,MGM_W71);
   not MGM_G93(MGM_W73,SI);
   and MGM_G94(ENABLE_NOT_CK_AND_D_AND_SE_AND_NOT_SI,MGM_W73,MGM_W72);
   not MGM_G95(MGM_W74,CK);
   and MGM_G96(MGM_W75,D,MGM_W74);
   and MGM_G97(MGM_W76,SE,MGM_W75);
   and MGM_G98(ENABLE_NOT_CK_AND_D_AND_SE_AND_SI,SI,MGM_W76);
   not MGM_G99(MGM_W77,D);
   and MGM_G100(MGM_W78,MGM_W77,CK);
   not MGM_G101(MGM_W79,SE);
   and MGM_G102(MGM_W80,MGM_W79,MGM_W78);
   not MGM_G103(MGM_W81,SI);
   and MGM_G104(ENABLE_CK_AND_NOT_D_AND_NOT_SE_AND_NOT_SI,MGM_W81,MGM_W80);
   not MGM_G105(MGM_W82,D);
   and MGM_G106(MGM_W83,MGM_W82,CK);
   not MGM_G107(MGM_W84,SE);
   and MGM_G108(MGM_W85,MGM_W84,MGM_W83);
   and MGM_G109(ENABLE_CK_AND_NOT_D_AND_NOT_SE_AND_SI,SI,MGM_W85);
   not MGM_G110(MGM_W86,D);
   and MGM_G111(MGM_W87,MGM_W86,CK);
   and MGM_G112(MGM_W88,SE,MGM_W87);
   not MGM_G113(MGM_W89,SI);
   and MGM_G114(ENABLE_CK_AND_NOT_D_AND_SE_AND_NOT_SI,MGM_W89,MGM_W88);
   not MGM_G115(MGM_W90,D);
   and MGM_G116(MGM_W91,MGM_W90,CK);
   and MGM_G117(MGM_W92,SE,MGM_W91);
   and MGM_G118(ENABLE_CK_AND_NOT_D_AND_SE_AND_SI,SI,MGM_W92);
   and MGM_G119(MGM_W93,D,CK);
   not MGM_G120(MGM_W94,SE);
   and MGM_G121(MGM_W95,MGM_W94,MGM_W93);
   not MGM_G122(MGM_W96,SI);
   and MGM_G123(ENABLE_CK_AND_D_AND_NOT_SE_AND_NOT_SI,MGM_W96,MGM_W95);
   and MGM_G124(MGM_W97,D,CK);
   not MGM_G125(MGM_W98,SE);
   and MGM_G126(MGM_W99,MGM_W98,MGM_W97);
   and MGM_G127(ENABLE_CK_AND_D_AND_NOT_SE_AND_SI,SI,MGM_W99);
   and MGM_G128(MGM_W100,D,CK);
   and MGM_G129(MGM_W101,SE,MGM_W100);
   not MGM_G130(MGM_W102,SI);
   and MGM_G131(ENABLE_CK_AND_D_AND_SE_AND_NOT_SI,MGM_W102,MGM_W101);
   and MGM_G132(MGM_W103,D,CK);
   and MGM_G133(MGM_W104,SE,MGM_W103);
   and MGM_G134(ENABLE_CK_AND_D_AND_SE_AND_SI,SI,MGM_W104);
   not MGM_G135(MGM_W105,D);
   and MGM_G136(MGM_W106,RD,MGM_W105);
   and MGM_G137(ENABLE_NOT_D_AND_RD_AND_SI,SI,MGM_W106);
   and MGM_G138(MGM_W107,RD,D);
   not MGM_G139(MGM_W108,SI);
   and MGM_G140(ENABLE_D_AND_RD_AND_NOT_SI,MGM_W108,MGM_W107);
   not MGM_G141(MGM_W109,D);
   and MGM_G142(MGM_W110,RD,MGM_W109);
   and MGM_G143(ENABLE_NOT_D_AND_RD_AND_SE,SE,MGM_W110);
   and MGM_G144(MGM_W111,RD,D);
   and MGM_G145(ENABLE_D_AND_RD_AND_SE,SE,MGM_W111);
   // spec_gates_end
   // specify_block_begin
   specify

      if(D===1'b0 && SI===1'b1)
      // seq arc CK --> Q
      (posedge CK => (Q : SE))  = (1.0,1.0);
      
      if(SE===1'b0 && SI===1'b0)
      // seq arc CK --> Q
      (posedge CK => (Q : D))  = (1.0,1.0);
      
      if(D===1'b1 && SE===1'b0 && SI===1'b1 || D===1'b0 && SE===1'b1 && SI===1'b0)
      // seq arc CK --> Q
      (posedge CK => (Q : D))  = (1.0,1.0);
      
      if(D===1'b1 && SE===1'b1)
      // seq arc CK --> Q
      (posedge CK => (Q : SI))  = (1.0,1.0);
      
      ifnone
      // seq arc CK --> Q
      (posedge CK => (Q : D))  = (1.0,1.0);
      
      if(CK===1'b0 && D===1'b0 && SE===1'b0 && SI===1'b0)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b0 && D===1'b0 && SE===1'b0 && SI===1'b1)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b0 && D===1'b0 && SE===1'b1 && SI===1'b0)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b0 && D===1'b0 && SE===1'b1 && SI===1'b1)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b0 && D===1'b1 && SE===1'b0 && SI===1'b0)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b0 && D===1'b1 && SE===1'b0 && SI===1'b1)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b0 && D===1'b1 && SE===1'b1 && SI===1'b0)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b0 && D===1'b1 && SE===1'b1 && SI===1'b1)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b1 && D===1'b0 && SE===1'b0 && SI===1'b0)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b1 && D===1'b0 && SE===1'b0 && SI===1'b1)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b1 && D===1'b0 && SE===1'b1 && SI===1'b0)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b1 && D===1'b0 && SE===1'b1 && SI===1'b1)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b1 && D===1'b1 && SE===1'b0 && SI===1'b0)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b1 && D===1'b1 && SE===1'b0 && SI===1'b1)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b1 && D===1'b1 && SE===1'b1 && SI===1'b0)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b1 && D===1'b1 && SE===1'b1 && SI===1'b1)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      ifnone
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_RD_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_RD_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_RD_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_RD_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_RD_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_RD_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_RD_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_RD_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_RD_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_RD_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_RD_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_RD_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_RD_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_RD_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_RD_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_RD_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      // hold D-HL CK-LH
      $hold(posedge CK &&& (ENABLE_RD_AND_NOT_SE_AND_NOT_SI === 1'b1),
      negedge D &&& (ENABLE_RD_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold D-LH CK-LH
      $hold(posedge CK &&& (ENABLE_RD_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge D &&& (ENABLE_RD_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup D-HL CK-LH
      $setup(negedge D &&& (ENABLE_RD_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_RD_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup D-LH CK-LH
      $setup(posedge D &&& (ENABLE_RD_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_RD_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold D-HL CK-LH
      $hold(posedge CK &&& (ENABLE_RD_AND_NOT_SE_AND_SI === 1'b1),
      negedge D &&& (ENABLE_RD_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // hold D-LH CK-LH
      $hold(posedge CK &&& (ENABLE_RD_AND_NOT_SE_AND_SI === 1'b1),
      posedge D &&& (ENABLE_RD_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // setup D-HL CK-LH
      $setup(negedge D &&& (ENABLE_RD_AND_NOT_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_RD_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // setup D-LH CK-LH
      $setup(posedge D &&& (ENABLE_RD_AND_NOT_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_RD_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // recovery RD-LH CK-LH
      $recovery(posedge RD &&& (ENABLE_NOT_D_AND_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_SE_AND_SI === 1'b1),1.0);
      
      // removal RD-LH CK-LH
      $removal(posedge RD &&& (ENABLE_NOT_D_AND_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_SE_AND_SI === 1'b1),1.0);
      
      // recovery RD-LH CK-LH
      $recovery(posedge RD &&& (ENABLE_D_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_D_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // removal RD-LH CK-LH
      $removal(posedge RD &&& (ENABLE_D_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_D_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // recovery RD-LH CK-LH
      $recovery(posedge RD &&& (ENABLE_D_AND_NOT_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_D_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // removal RD-LH CK-LH
      $removal(posedge RD &&& (ENABLE_D_AND_NOT_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_D_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // recovery RD-LH CK-LH
      $recovery(posedge RD &&& (ENABLE_D_AND_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_D_AND_SE_AND_SI === 1'b1),1.0);
      
      // removal RD-LH CK-LH
      $removal(posedge RD &&& (ENABLE_D_AND_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_D_AND_SE_AND_SI === 1'b1),1.0);
      
      $width(negedge RD &&& (ENABLE_NOT_CK_AND_NOT_D_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge RD &&& (ENABLE_NOT_CK_AND_NOT_D_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge RD &&& (ENABLE_NOT_CK_AND_NOT_D_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge RD &&& (ENABLE_NOT_CK_AND_NOT_D_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge RD &&& (ENABLE_NOT_CK_AND_D_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge RD &&& (ENABLE_NOT_CK_AND_D_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge RD &&& (ENABLE_NOT_CK_AND_D_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge RD &&& (ENABLE_NOT_CK_AND_D_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge RD &&& (ENABLE_CK_AND_NOT_D_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge RD &&& (ENABLE_CK_AND_NOT_D_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge RD &&& (ENABLE_CK_AND_NOT_D_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge RD &&& (ENABLE_CK_AND_NOT_D_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge RD &&& (ENABLE_CK_AND_D_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge RD &&& (ENABLE_CK_AND_D_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge RD &&& (ENABLE_CK_AND_D_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge RD &&& (ENABLE_CK_AND_D_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      // hold SE-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D_AND_RD_AND_SI === 1'b1),
      negedge SE &&& (ENABLE_NOT_D_AND_RD_AND_SI === 1'b1),1.0);
      
      // hold SE-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D_AND_RD_AND_SI === 1'b1),
      posedge SE &&& (ENABLE_NOT_D_AND_RD_AND_SI === 1'b1),1.0);
      
      // setup SE-HL CK-LH
      $setup(negedge SE &&& (ENABLE_NOT_D_AND_RD_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_RD_AND_SI === 1'b1),1.0);
      
      // setup SE-LH CK-LH
      $setup(posedge SE &&& (ENABLE_NOT_D_AND_RD_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_RD_AND_SI === 1'b1),1.0);
      
      // hold SE-HL CK-LH
      $hold(posedge CK &&& (ENABLE_D_AND_RD_AND_NOT_SI === 1'b1),
      negedge SE &&& (ENABLE_D_AND_RD_AND_NOT_SI === 1'b1),1.0);
      
      // hold SE-LH CK-LH
      $hold(posedge CK &&& (ENABLE_D_AND_RD_AND_NOT_SI === 1'b1),
      posedge SE &&& (ENABLE_D_AND_RD_AND_NOT_SI === 1'b1),1.0);
      
      // setup SE-HL CK-LH
      $setup(negedge SE &&& (ENABLE_D_AND_RD_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_D_AND_RD_AND_NOT_SI === 1'b1),1.0);
      
      // setup SE-LH CK-LH
      $setup(posedge SE &&& (ENABLE_D_AND_RD_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_D_AND_RD_AND_NOT_SI === 1'b1),1.0);
      
      // hold SI-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D_AND_RD_AND_SE === 1'b1),
      negedge SI &&& (ENABLE_NOT_D_AND_RD_AND_SE === 1'b1),1.0);
      
      // hold SI-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D_AND_RD_AND_SE === 1'b1),
      posedge SI &&& (ENABLE_NOT_D_AND_RD_AND_SE === 1'b1),1.0);
      
      // setup SI-HL CK-LH
      $setup(negedge SI &&& (ENABLE_NOT_D_AND_RD_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_RD_AND_SE === 1'b1),1.0);
      
      // setup SI-LH CK-LH
      $setup(posedge SI &&& (ENABLE_NOT_D_AND_RD_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_RD_AND_SE === 1'b1),1.0);
      
      // hold SI-HL CK-LH
      $hold(posedge CK &&& (ENABLE_D_AND_RD_AND_SE === 1'b1),
      negedge SI &&& (ENABLE_D_AND_RD_AND_SE === 1'b1),1.0);
      
      // hold SI-LH CK-LH
      $hold(posedge CK &&& (ENABLE_D_AND_RD_AND_SE === 1'b1),
      posedge SI &&& (ENABLE_D_AND_RD_AND_SE === 1'b1),1.0);
      
      // setup SI-HL CK-LH
      $setup(negedge SI &&& (ENABLE_D_AND_RD_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_D_AND_RD_AND_SE === 1'b1),1.0);
      
      // setup SI-LH CK-LH
      $setup(posedge SI &&& (ENABLE_D_AND_RD_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_D_AND_RD_AND_SE === 1'b1),1.0);
      
      // mpw CK_lh 
      $width(posedge CK,1.0,0);
      
      // mpw CK_hl 
      $width(negedge CK,1.0,0);
      
      // mpw RD_hl 
      $width(negedge RD,1.0,0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_FSDPRBQ_V2_4( Q, CK, D, SI, SE, RD );
input CK, D, RD, SE, SI;
output Q;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_FSDPRBQ_V2_4_func SAEDRVT14_FSDPRBQ_V2_4_behav_inst(.Q(Q),.CK(CK),.D(D),.SI(SI),.SE(SE),.RD(RD));
`else
   SAEDRVT14_FSDPRBQ_V2_4_func SAEDRVT14_FSDPRBQ_V2_4_inst(.Q(Q),.CK(CK),.D(D),.SI(SI),.SE(SE),.RD(RD));
   // spec_gates_begin
   not MGM_G0(MGM_W0,D);
   and MGM_G1(MGM_W1,RD,MGM_W0);
   not MGM_G2(MGM_W2,SE);
   and MGM_G3(MGM_W3,MGM_W2,MGM_W1);
   not MGM_G4(MGM_W4,SI);
   and MGM_G5(ENABLE_NOT_D_AND_RD_AND_NOT_SE_AND_NOT_SI,MGM_W4,MGM_W3);
   not MGM_G6(MGM_W5,D);
   and MGM_G7(MGM_W6,RD,MGM_W5);
   not MGM_G8(MGM_W7,SE);
   and MGM_G9(MGM_W8,MGM_W7,MGM_W6);
   and MGM_G10(ENABLE_NOT_D_AND_RD_AND_NOT_SE_AND_SI,SI,MGM_W8);
   not MGM_G11(MGM_W9,D);
   and MGM_G12(MGM_W10,RD,MGM_W9);
   and MGM_G13(MGM_W11,SE,MGM_W10);
   not MGM_G14(MGM_W12,SI);
   and MGM_G15(ENABLE_NOT_D_AND_RD_AND_SE_AND_NOT_SI,MGM_W12,MGM_W11);
   not MGM_G16(MGM_W13,D);
   and MGM_G17(MGM_W14,RD,MGM_W13);
   and MGM_G18(MGM_W15,SE,MGM_W14);
   and MGM_G19(ENABLE_NOT_D_AND_RD_AND_SE_AND_SI,SI,MGM_W15);
   and MGM_G20(MGM_W16,RD,D);
   not MGM_G21(MGM_W17,SE);
   and MGM_G22(MGM_W18,MGM_W17,MGM_W16);
   not MGM_G23(MGM_W19,SI);
   and MGM_G24(ENABLE_D_AND_RD_AND_NOT_SE_AND_NOT_SI,MGM_W19,MGM_W18);
   and MGM_G25(MGM_W20,RD,D);
   not MGM_G26(MGM_W21,SE);
   and MGM_G27(MGM_W22,MGM_W21,MGM_W20);
   and MGM_G28(ENABLE_D_AND_RD_AND_NOT_SE_AND_SI,SI,MGM_W22);
   and MGM_G29(MGM_W23,RD,D);
   and MGM_G30(MGM_W24,SE,MGM_W23);
   not MGM_G31(MGM_W25,SI);
   and MGM_G32(ENABLE_D_AND_RD_AND_SE_AND_NOT_SI,MGM_W25,MGM_W24);
   and MGM_G33(MGM_W26,RD,D);
   and MGM_G34(MGM_W27,SE,MGM_W26);
   and MGM_G35(ENABLE_D_AND_RD_AND_SE_AND_SI,SI,MGM_W27);
   not MGM_G36(MGM_W28,SE);
   and MGM_G37(MGM_W29,MGM_W28,RD);
   not MGM_G38(MGM_W30,SI);
   and MGM_G39(ENABLE_RD_AND_NOT_SE_AND_NOT_SI,MGM_W30,MGM_W29);
   not MGM_G40(MGM_W31,SE);
   and MGM_G41(MGM_W32,MGM_W31,RD);
   and MGM_G42(ENABLE_RD_AND_NOT_SE_AND_SI,SI,MGM_W32);
   not MGM_G43(MGM_W33,D);
   and MGM_G44(MGM_W34,SE,MGM_W33);
   and MGM_G45(ENABLE_NOT_D_AND_SE_AND_SI,SI,MGM_W34);
   not MGM_G46(MGM_W35,SE);
   and MGM_G47(MGM_W36,MGM_W35,D);
   not MGM_G48(MGM_W37,SI);
   and MGM_G49(ENABLE_D_AND_NOT_SE_AND_NOT_SI,MGM_W37,MGM_W36);
   not MGM_G50(MGM_W38,SE);
   and MGM_G51(MGM_W39,MGM_W38,D);
   and MGM_G52(ENABLE_D_AND_NOT_SE_AND_SI,SI,MGM_W39);
   and MGM_G53(MGM_W40,SE,D);
   and MGM_G54(ENABLE_D_AND_SE_AND_SI,SI,MGM_W40);
   not MGM_G55(MGM_W41,CK);
   not MGM_G56(MGM_W42,D);
   and MGM_G57(MGM_W43,MGM_W42,MGM_W41);
   not MGM_G58(MGM_W44,SE);
   and MGM_G59(MGM_W45,MGM_W44,MGM_W43);
   not MGM_G60(MGM_W46,SI);
   and MGM_G61(ENABLE_NOT_CK_AND_NOT_D_AND_NOT_SE_AND_NOT_SI,MGM_W46,MGM_W45);
   not MGM_G62(MGM_W47,CK);
   not MGM_G63(MGM_W48,D);
   and MGM_G64(MGM_W49,MGM_W48,MGM_W47);
   not MGM_G65(MGM_W50,SE);
   and MGM_G66(MGM_W51,MGM_W50,MGM_W49);
   and MGM_G67(ENABLE_NOT_CK_AND_NOT_D_AND_NOT_SE_AND_SI,SI,MGM_W51);
   not MGM_G68(MGM_W52,CK);
   not MGM_G69(MGM_W53,D);
   and MGM_G70(MGM_W54,MGM_W53,MGM_W52);
   and MGM_G71(MGM_W55,SE,MGM_W54);
   not MGM_G72(MGM_W56,SI);
   and MGM_G73(ENABLE_NOT_CK_AND_NOT_D_AND_SE_AND_NOT_SI,MGM_W56,MGM_W55);
   not MGM_G74(MGM_W57,CK);
   not MGM_G75(MGM_W58,D);
   and MGM_G76(MGM_W59,MGM_W58,MGM_W57);
   and MGM_G77(MGM_W60,SE,MGM_W59);
   and MGM_G78(ENABLE_NOT_CK_AND_NOT_D_AND_SE_AND_SI,SI,MGM_W60);
   not MGM_G79(MGM_W61,CK);
   and MGM_G80(MGM_W62,D,MGM_W61);
   not MGM_G81(MGM_W63,SE);
   and MGM_G82(MGM_W64,MGM_W63,MGM_W62);
   not MGM_G83(MGM_W65,SI);
   and MGM_G84(ENABLE_NOT_CK_AND_D_AND_NOT_SE_AND_NOT_SI,MGM_W65,MGM_W64);
   not MGM_G85(MGM_W66,CK);
   and MGM_G86(MGM_W67,D,MGM_W66);
   not MGM_G87(MGM_W68,SE);
   and MGM_G88(MGM_W69,MGM_W68,MGM_W67);
   and MGM_G89(ENABLE_NOT_CK_AND_D_AND_NOT_SE_AND_SI,SI,MGM_W69);
   not MGM_G90(MGM_W70,CK);
   and MGM_G91(MGM_W71,D,MGM_W70);
   and MGM_G92(MGM_W72,SE,MGM_W71);
   not MGM_G93(MGM_W73,SI);
   and MGM_G94(ENABLE_NOT_CK_AND_D_AND_SE_AND_NOT_SI,MGM_W73,MGM_W72);
   not MGM_G95(MGM_W74,CK);
   and MGM_G96(MGM_W75,D,MGM_W74);
   and MGM_G97(MGM_W76,SE,MGM_W75);
   and MGM_G98(ENABLE_NOT_CK_AND_D_AND_SE_AND_SI,SI,MGM_W76);
   not MGM_G99(MGM_W77,D);
   and MGM_G100(MGM_W78,MGM_W77,CK);
   not MGM_G101(MGM_W79,SE);
   and MGM_G102(MGM_W80,MGM_W79,MGM_W78);
   not MGM_G103(MGM_W81,SI);
   and MGM_G104(ENABLE_CK_AND_NOT_D_AND_NOT_SE_AND_NOT_SI,MGM_W81,MGM_W80);
   not MGM_G105(MGM_W82,D);
   and MGM_G106(MGM_W83,MGM_W82,CK);
   not MGM_G107(MGM_W84,SE);
   and MGM_G108(MGM_W85,MGM_W84,MGM_W83);
   and MGM_G109(ENABLE_CK_AND_NOT_D_AND_NOT_SE_AND_SI,SI,MGM_W85);
   not MGM_G110(MGM_W86,D);
   and MGM_G111(MGM_W87,MGM_W86,CK);
   and MGM_G112(MGM_W88,SE,MGM_W87);
   not MGM_G113(MGM_W89,SI);
   and MGM_G114(ENABLE_CK_AND_NOT_D_AND_SE_AND_NOT_SI,MGM_W89,MGM_W88);
   not MGM_G115(MGM_W90,D);
   and MGM_G116(MGM_W91,MGM_W90,CK);
   and MGM_G117(MGM_W92,SE,MGM_W91);
   and MGM_G118(ENABLE_CK_AND_NOT_D_AND_SE_AND_SI,SI,MGM_W92);
   and MGM_G119(MGM_W93,D,CK);
   not MGM_G120(MGM_W94,SE);
   and MGM_G121(MGM_W95,MGM_W94,MGM_W93);
   not MGM_G122(MGM_W96,SI);
   and MGM_G123(ENABLE_CK_AND_D_AND_NOT_SE_AND_NOT_SI,MGM_W96,MGM_W95);
   and MGM_G124(MGM_W97,D,CK);
   not MGM_G125(MGM_W98,SE);
   and MGM_G126(MGM_W99,MGM_W98,MGM_W97);
   and MGM_G127(ENABLE_CK_AND_D_AND_NOT_SE_AND_SI,SI,MGM_W99);
   and MGM_G128(MGM_W100,D,CK);
   and MGM_G129(MGM_W101,SE,MGM_W100);
   not MGM_G130(MGM_W102,SI);
   and MGM_G131(ENABLE_CK_AND_D_AND_SE_AND_NOT_SI,MGM_W102,MGM_W101);
   and MGM_G132(MGM_W103,D,CK);
   and MGM_G133(MGM_W104,SE,MGM_W103);
   and MGM_G134(ENABLE_CK_AND_D_AND_SE_AND_SI,SI,MGM_W104);
   not MGM_G135(MGM_W105,D);
   and MGM_G136(MGM_W106,RD,MGM_W105);
   and MGM_G137(ENABLE_NOT_D_AND_RD_AND_SI,SI,MGM_W106);
   and MGM_G138(MGM_W107,RD,D);
   not MGM_G139(MGM_W108,SI);
   and MGM_G140(ENABLE_D_AND_RD_AND_NOT_SI,MGM_W108,MGM_W107);
   not MGM_G141(MGM_W109,D);
   and MGM_G142(MGM_W110,RD,MGM_W109);
   and MGM_G143(ENABLE_NOT_D_AND_RD_AND_SE,SE,MGM_W110);
   and MGM_G144(MGM_W111,RD,D);
   and MGM_G145(ENABLE_D_AND_RD_AND_SE,SE,MGM_W111);
   // spec_gates_end
   // specify_block_begin
   specify

      if(D===1'b0 && SI===1'b1)
      // seq arc CK --> Q
      (posedge CK => (Q : SE))  = (1.0,1.0);
      
      if(SE===1'b0 && SI===1'b0)
      // seq arc CK --> Q
      (posedge CK => (Q : D))  = (1.0,1.0);
      
      if(D===1'b1 && SE===1'b0 && SI===1'b1 || D===1'b0 && SE===1'b1 && SI===1'b0)
      // seq arc CK --> Q
      (posedge CK => (Q : D))  = (1.0,1.0);
      
      if(D===1'b1 && SE===1'b1)
      // seq arc CK --> Q
      (posedge CK => (Q : SI))  = (1.0,1.0);
      
      ifnone
      // seq arc CK --> Q
      (posedge CK => (Q : D))  = (1.0,1.0);
      
      if(CK===1'b0 && D===1'b0 && SE===1'b0 && SI===1'b0)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b0 && D===1'b0 && SE===1'b0 && SI===1'b1)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b0 && D===1'b0 && SE===1'b1 && SI===1'b0)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b0 && D===1'b0 && SE===1'b1 && SI===1'b1)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b0 && D===1'b1 && SE===1'b0 && SI===1'b0)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b0 && D===1'b1 && SE===1'b0 && SI===1'b1)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b0 && D===1'b1 && SE===1'b1 && SI===1'b0)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b0 && D===1'b1 && SE===1'b1 && SI===1'b1)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b1 && D===1'b0 && SE===1'b0 && SI===1'b0)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b1 && D===1'b0 && SE===1'b0 && SI===1'b1)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b1 && D===1'b0 && SE===1'b1 && SI===1'b0)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b1 && D===1'b0 && SE===1'b1 && SI===1'b1)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b1 && D===1'b1 && SE===1'b0 && SI===1'b0)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b1 && D===1'b1 && SE===1'b0 && SI===1'b1)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b1 && D===1'b1 && SE===1'b1 && SI===1'b0)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b1 && D===1'b1 && SE===1'b1 && SI===1'b1)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      ifnone
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_RD_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_RD_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_RD_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_RD_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_RD_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_RD_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_RD_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_RD_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_RD_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_RD_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_RD_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_RD_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_RD_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_RD_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_RD_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_RD_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      // hold D-HL CK-LH
      $hold(posedge CK &&& (ENABLE_RD_AND_NOT_SE_AND_NOT_SI === 1'b1),
      negedge D &&& (ENABLE_RD_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold D-LH CK-LH
      $hold(posedge CK &&& (ENABLE_RD_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge D &&& (ENABLE_RD_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup D-HL CK-LH
      $setup(negedge D &&& (ENABLE_RD_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_RD_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup D-LH CK-LH
      $setup(posedge D &&& (ENABLE_RD_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_RD_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold D-HL CK-LH
      $hold(posedge CK &&& (ENABLE_RD_AND_NOT_SE_AND_SI === 1'b1),
      negedge D &&& (ENABLE_RD_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // hold D-LH CK-LH
      $hold(posedge CK &&& (ENABLE_RD_AND_NOT_SE_AND_SI === 1'b1),
      posedge D &&& (ENABLE_RD_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // setup D-HL CK-LH
      $setup(negedge D &&& (ENABLE_RD_AND_NOT_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_RD_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // setup D-LH CK-LH
      $setup(posedge D &&& (ENABLE_RD_AND_NOT_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_RD_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // recovery RD-LH CK-LH
      $recovery(posedge RD &&& (ENABLE_NOT_D_AND_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_SE_AND_SI === 1'b1),1.0);
      
      // removal RD-LH CK-LH
      $removal(posedge RD &&& (ENABLE_NOT_D_AND_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_SE_AND_SI === 1'b1),1.0);
      
      // recovery RD-LH CK-LH
      $recovery(posedge RD &&& (ENABLE_D_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_D_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // removal RD-LH CK-LH
      $removal(posedge RD &&& (ENABLE_D_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_D_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // recovery RD-LH CK-LH
      $recovery(posedge RD &&& (ENABLE_D_AND_NOT_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_D_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // removal RD-LH CK-LH
      $removal(posedge RD &&& (ENABLE_D_AND_NOT_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_D_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // recovery RD-LH CK-LH
      $recovery(posedge RD &&& (ENABLE_D_AND_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_D_AND_SE_AND_SI === 1'b1),1.0);
      
      // removal RD-LH CK-LH
      $removal(posedge RD &&& (ENABLE_D_AND_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_D_AND_SE_AND_SI === 1'b1),1.0);
      
      $width(negedge RD &&& (ENABLE_NOT_CK_AND_NOT_D_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge RD &&& (ENABLE_NOT_CK_AND_NOT_D_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge RD &&& (ENABLE_NOT_CK_AND_NOT_D_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge RD &&& (ENABLE_NOT_CK_AND_NOT_D_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge RD &&& (ENABLE_NOT_CK_AND_D_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge RD &&& (ENABLE_NOT_CK_AND_D_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge RD &&& (ENABLE_NOT_CK_AND_D_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge RD &&& (ENABLE_NOT_CK_AND_D_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge RD &&& (ENABLE_CK_AND_NOT_D_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge RD &&& (ENABLE_CK_AND_NOT_D_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge RD &&& (ENABLE_CK_AND_NOT_D_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge RD &&& (ENABLE_CK_AND_NOT_D_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge RD &&& (ENABLE_CK_AND_D_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge RD &&& (ENABLE_CK_AND_D_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge RD &&& (ENABLE_CK_AND_D_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge RD &&& (ENABLE_CK_AND_D_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      // hold SE-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D_AND_RD_AND_SI === 1'b1),
      negedge SE &&& (ENABLE_NOT_D_AND_RD_AND_SI === 1'b1),1.0);
      
      // hold SE-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D_AND_RD_AND_SI === 1'b1),
      posedge SE &&& (ENABLE_NOT_D_AND_RD_AND_SI === 1'b1),1.0);
      
      // setup SE-HL CK-LH
      $setup(negedge SE &&& (ENABLE_NOT_D_AND_RD_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_RD_AND_SI === 1'b1),1.0);
      
      // setup SE-LH CK-LH
      $setup(posedge SE &&& (ENABLE_NOT_D_AND_RD_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_RD_AND_SI === 1'b1),1.0);
      
      // hold SE-HL CK-LH
      $hold(posedge CK &&& (ENABLE_D_AND_RD_AND_NOT_SI === 1'b1),
      negedge SE &&& (ENABLE_D_AND_RD_AND_NOT_SI === 1'b1),1.0);
      
      // hold SE-LH CK-LH
      $hold(posedge CK &&& (ENABLE_D_AND_RD_AND_NOT_SI === 1'b1),
      posedge SE &&& (ENABLE_D_AND_RD_AND_NOT_SI === 1'b1),1.0);
      
      // setup SE-HL CK-LH
      $setup(negedge SE &&& (ENABLE_D_AND_RD_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_D_AND_RD_AND_NOT_SI === 1'b1),1.0);
      
      // setup SE-LH CK-LH
      $setup(posedge SE &&& (ENABLE_D_AND_RD_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_D_AND_RD_AND_NOT_SI === 1'b1),1.0);
      
      // hold SI-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D_AND_RD_AND_SE === 1'b1),
      negedge SI &&& (ENABLE_NOT_D_AND_RD_AND_SE === 1'b1),1.0);
      
      // hold SI-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D_AND_RD_AND_SE === 1'b1),
      posedge SI &&& (ENABLE_NOT_D_AND_RD_AND_SE === 1'b1),1.0);
      
      // setup SI-HL CK-LH
      $setup(negedge SI &&& (ENABLE_NOT_D_AND_RD_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_RD_AND_SE === 1'b1),1.0);
      
      // setup SI-LH CK-LH
      $setup(posedge SI &&& (ENABLE_NOT_D_AND_RD_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_RD_AND_SE === 1'b1),1.0);
      
      // hold SI-HL CK-LH
      $hold(posedge CK &&& (ENABLE_D_AND_RD_AND_SE === 1'b1),
      negedge SI &&& (ENABLE_D_AND_RD_AND_SE === 1'b1),1.0);
      
      // hold SI-LH CK-LH
      $hold(posedge CK &&& (ENABLE_D_AND_RD_AND_SE === 1'b1),
      posedge SI &&& (ENABLE_D_AND_RD_AND_SE === 1'b1),1.0);
      
      // setup SI-HL CK-LH
      $setup(negedge SI &&& (ENABLE_D_AND_RD_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_D_AND_RD_AND_SE === 1'b1),1.0);
      
      // setup SI-LH CK-LH
      $setup(posedge SI &&& (ENABLE_D_AND_RD_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_D_AND_RD_AND_SE === 1'b1),1.0);
      
      // mpw CK_lh 
      $width(posedge CK,1.0,0);
      
      // mpw CK_hl 
      $width(negedge CK,1.0,0);
      
      // mpw RD_hl 
      $width(negedge RD,1.0,0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_FSDPRBQ_V3_1( Q, CK, D, SI, SE, RD );
input CK, D, RD, SE, SI;
output Q;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_FSDPRBQ_V3_1_func SAEDRVT14_FSDPRBQ_V3_1_behav_inst(.Q(Q),.CK(CK),.D(D),.SI(SI),.SE(SE),.RD(RD));
`else
   SAEDRVT14_FSDPRBQ_V3_1_func SAEDRVT14_FSDPRBQ_V3_1_inst(.Q(Q),.CK(CK),.D(D),.SI(SI),.SE(SE),.RD(RD));
   // spec_gates_begin
   not MGM_G0(MGM_W0,D);
   and MGM_G1(MGM_W1,RD,MGM_W0);
   not MGM_G2(MGM_W2,SE);
   and MGM_G3(MGM_W3,MGM_W2,MGM_W1);
   not MGM_G4(MGM_W4,SI);
   and MGM_G5(ENABLE_NOT_D_AND_RD_AND_NOT_SE_AND_NOT_SI,MGM_W4,MGM_W3);
   not MGM_G6(MGM_W5,D);
   and MGM_G7(MGM_W6,RD,MGM_W5);
   not MGM_G8(MGM_W7,SE);
   and MGM_G9(MGM_W8,MGM_W7,MGM_W6);
   and MGM_G10(ENABLE_NOT_D_AND_RD_AND_NOT_SE_AND_SI,SI,MGM_W8);
   not MGM_G11(MGM_W9,D);
   and MGM_G12(MGM_W10,RD,MGM_W9);
   and MGM_G13(MGM_W11,SE,MGM_W10);
   not MGM_G14(MGM_W12,SI);
   and MGM_G15(ENABLE_NOT_D_AND_RD_AND_SE_AND_NOT_SI,MGM_W12,MGM_W11);
   not MGM_G16(MGM_W13,D);
   and MGM_G17(MGM_W14,RD,MGM_W13);
   and MGM_G18(MGM_W15,SE,MGM_W14);
   and MGM_G19(ENABLE_NOT_D_AND_RD_AND_SE_AND_SI,SI,MGM_W15);
   and MGM_G20(MGM_W16,RD,D);
   not MGM_G21(MGM_W17,SE);
   and MGM_G22(MGM_W18,MGM_W17,MGM_W16);
   not MGM_G23(MGM_W19,SI);
   and MGM_G24(ENABLE_D_AND_RD_AND_NOT_SE_AND_NOT_SI,MGM_W19,MGM_W18);
   and MGM_G25(MGM_W20,RD,D);
   not MGM_G26(MGM_W21,SE);
   and MGM_G27(MGM_W22,MGM_W21,MGM_W20);
   and MGM_G28(ENABLE_D_AND_RD_AND_NOT_SE_AND_SI,SI,MGM_W22);
   and MGM_G29(MGM_W23,RD,D);
   and MGM_G30(MGM_W24,SE,MGM_W23);
   not MGM_G31(MGM_W25,SI);
   and MGM_G32(ENABLE_D_AND_RD_AND_SE_AND_NOT_SI,MGM_W25,MGM_W24);
   and MGM_G33(MGM_W26,RD,D);
   and MGM_G34(MGM_W27,SE,MGM_W26);
   and MGM_G35(ENABLE_D_AND_RD_AND_SE_AND_SI,SI,MGM_W27);
   not MGM_G36(MGM_W28,SE);
   and MGM_G37(MGM_W29,MGM_W28,RD);
   not MGM_G38(MGM_W30,SI);
   and MGM_G39(ENABLE_RD_AND_NOT_SE_AND_NOT_SI,MGM_W30,MGM_W29);
   not MGM_G40(MGM_W31,SE);
   and MGM_G41(MGM_W32,MGM_W31,RD);
   and MGM_G42(ENABLE_RD_AND_NOT_SE_AND_SI,SI,MGM_W32);
   not MGM_G43(MGM_W33,D);
   and MGM_G44(MGM_W34,SE,MGM_W33);
   and MGM_G45(ENABLE_NOT_D_AND_SE_AND_SI,SI,MGM_W34);
   not MGM_G46(MGM_W35,SE);
   and MGM_G47(MGM_W36,MGM_W35,D);
   not MGM_G48(MGM_W37,SI);
   and MGM_G49(ENABLE_D_AND_NOT_SE_AND_NOT_SI,MGM_W37,MGM_W36);
   not MGM_G50(MGM_W38,SE);
   and MGM_G51(MGM_W39,MGM_W38,D);
   and MGM_G52(ENABLE_D_AND_NOT_SE_AND_SI,SI,MGM_W39);
   and MGM_G53(MGM_W40,SE,D);
   and MGM_G54(ENABLE_D_AND_SE_AND_SI,SI,MGM_W40);
   not MGM_G55(MGM_W41,CK);
   not MGM_G56(MGM_W42,D);
   and MGM_G57(MGM_W43,MGM_W42,MGM_W41);
   not MGM_G58(MGM_W44,SE);
   and MGM_G59(MGM_W45,MGM_W44,MGM_W43);
   not MGM_G60(MGM_W46,SI);
   and MGM_G61(ENABLE_NOT_CK_AND_NOT_D_AND_NOT_SE_AND_NOT_SI,MGM_W46,MGM_W45);
   not MGM_G62(MGM_W47,CK);
   not MGM_G63(MGM_W48,D);
   and MGM_G64(MGM_W49,MGM_W48,MGM_W47);
   not MGM_G65(MGM_W50,SE);
   and MGM_G66(MGM_W51,MGM_W50,MGM_W49);
   and MGM_G67(ENABLE_NOT_CK_AND_NOT_D_AND_NOT_SE_AND_SI,SI,MGM_W51);
   not MGM_G68(MGM_W52,CK);
   not MGM_G69(MGM_W53,D);
   and MGM_G70(MGM_W54,MGM_W53,MGM_W52);
   and MGM_G71(MGM_W55,SE,MGM_W54);
   not MGM_G72(MGM_W56,SI);
   and MGM_G73(ENABLE_NOT_CK_AND_NOT_D_AND_SE_AND_NOT_SI,MGM_W56,MGM_W55);
   not MGM_G74(MGM_W57,CK);
   not MGM_G75(MGM_W58,D);
   and MGM_G76(MGM_W59,MGM_W58,MGM_W57);
   and MGM_G77(MGM_W60,SE,MGM_W59);
   and MGM_G78(ENABLE_NOT_CK_AND_NOT_D_AND_SE_AND_SI,SI,MGM_W60);
   not MGM_G79(MGM_W61,CK);
   and MGM_G80(MGM_W62,D,MGM_W61);
   not MGM_G81(MGM_W63,SE);
   and MGM_G82(MGM_W64,MGM_W63,MGM_W62);
   not MGM_G83(MGM_W65,SI);
   and MGM_G84(ENABLE_NOT_CK_AND_D_AND_NOT_SE_AND_NOT_SI,MGM_W65,MGM_W64);
   not MGM_G85(MGM_W66,CK);
   and MGM_G86(MGM_W67,D,MGM_W66);
   not MGM_G87(MGM_W68,SE);
   and MGM_G88(MGM_W69,MGM_W68,MGM_W67);
   and MGM_G89(ENABLE_NOT_CK_AND_D_AND_NOT_SE_AND_SI,SI,MGM_W69);
   not MGM_G90(MGM_W70,CK);
   and MGM_G91(MGM_W71,D,MGM_W70);
   and MGM_G92(MGM_W72,SE,MGM_W71);
   not MGM_G93(MGM_W73,SI);
   and MGM_G94(ENABLE_NOT_CK_AND_D_AND_SE_AND_NOT_SI,MGM_W73,MGM_W72);
   not MGM_G95(MGM_W74,CK);
   and MGM_G96(MGM_W75,D,MGM_W74);
   and MGM_G97(MGM_W76,SE,MGM_W75);
   and MGM_G98(ENABLE_NOT_CK_AND_D_AND_SE_AND_SI,SI,MGM_W76);
   not MGM_G99(MGM_W77,D);
   and MGM_G100(MGM_W78,MGM_W77,CK);
   not MGM_G101(MGM_W79,SE);
   and MGM_G102(MGM_W80,MGM_W79,MGM_W78);
   not MGM_G103(MGM_W81,SI);
   and MGM_G104(ENABLE_CK_AND_NOT_D_AND_NOT_SE_AND_NOT_SI,MGM_W81,MGM_W80);
   not MGM_G105(MGM_W82,D);
   and MGM_G106(MGM_W83,MGM_W82,CK);
   not MGM_G107(MGM_W84,SE);
   and MGM_G108(MGM_W85,MGM_W84,MGM_W83);
   and MGM_G109(ENABLE_CK_AND_NOT_D_AND_NOT_SE_AND_SI,SI,MGM_W85);
   not MGM_G110(MGM_W86,D);
   and MGM_G111(MGM_W87,MGM_W86,CK);
   and MGM_G112(MGM_W88,SE,MGM_W87);
   not MGM_G113(MGM_W89,SI);
   and MGM_G114(ENABLE_CK_AND_NOT_D_AND_SE_AND_NOT_SI,MGM_W89,MGM_W88);
   not MGM_G115(MGM_W90,D);
   and MGM_G116(MGM_W91,MGM_W90,CK);
   and MGM_G117(MGM_W92,SE,MGM_W91);
   and MGM_G118(ENABLE_CK_AND_NOT_D_AND_SE_AND_SI,SI,MGM_W92);
   and MGM_G119(MGM_W93,D,CK);
   not MGM_G120(MGM_W94,SE);
   and MGM_G121(MGM_W95,MGM_W94,MGM_W93);
   not MGM_G122(MGM_W96,SI);
   and MGM_G123(ENABLE_CK_AND_D_AND_NOT_SE_AND_NOT_SI,MGM_W96,MGM_W95);
   and MGM_G124(MGM_W97,D,CK);
   not MGM_G125(MGM_W98,SE);
   and MGM_G126(MGM_W99,MGM_W98,MGM_W97);
   and MGM_G127(ENABLE_CK_AND_D_AND_NOT_SE_AND_SI,SI,MGM_W99);
   and MGM_G128(MGM_W100,D,CK);
   and MGM_G129(MGM_W101,SE,MGM_W100);
   not MGM_G130(MGM_W102,SI);
   and MGM_G131(ENABLE_CK_AND_D_AND_SE_AND_NOT_SI,MGM_W102,MGM_W101);
   and MGM_G132(MGM_W103,D,CK);
   and MGM_G133(MGM_W104,SE,MGM_W103);
   and MGM_G134(ENABLE_CK_AND_D_AND_SE_AND_SI,SI,MGM_W104);
   not MGM_G135(MGM_W105,D);
   and MGM_G136(MGM_W106,RD,MGM_W105);
   and MGM_G137(ENABLE_NOT_D_AND_RD_AND_SI,SI,MGM_W106);
   and MGM_G138(MGM_W107,RD,D);
   not MGM_G139(MGM_W108,SI);
   and MGM_G140(ENABLE_D_AND_RD_AND_NOT_SI,MGM_W108,MGM_W107);
   not MGM_G141(MGM_W109,D);
   and MGM_G142(MGM_W110,RD,MGM_W109);
   and MGM_G143(ENABLE_NOT_D_AND_RD_AND_SE,SE,MGM_W110);
   and MGM_G144(MGM_W111,RD,D);
   and MGM_G145(ENABLE_D_AND_RD_AND_SE,SE,MGM_W111);
   // spec_gates_end
   // specify_block_begin
   specify

      if(D===1'b0 && SI===1'b1)
      // seq arc CK --> Q
      (posedge CK => (Q : SE))  = (1.0,1.0);
      
      if(SE===1'b0 && SI===1'b0)
      // seq arc CK --> Q
      (posedge CK => (Q : D))  = (1.0,1.0);
      
      if(D===1'b1 && SE===1'b0 && SI===1'b1 || D===1'b0 && SE===1'b1 && SI===1'b0)
      // seq arc CK --> Q
      (posedge CK => (Q : D))  = (1.0,1.0);
      
      if(D===1'b1 && SE===1'b1)
      // seq arc CK --> Q
      (posedge CK => (Q : SI))  = (1.0,1.0);
      
      ifnone
      // seq arc CK --> Q
      (posedge CK => (Q : D))  = (1.0,1.0);
      
      if(CK===1'b0 && D===1'b0 && SE===1'b0 && SI===1'b0)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b0 && D===1'b0 && SE===1'b0 && SI===1'b1)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b0 && D===1'b0 && SE===1'b1 && SI===1'b0)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b0 && D===1'b0 && SE===1'b1 && SI===1'b1)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b0 && D===1'b1 && SE===1'b0 && SI===1'b0)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b0 && D===1'b1 && SE===1'b0 && SI===1'b1)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b0 && D===1'b1 && SE===1'b1 && SI===1'b0)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b0 && D===1'b1 && SE===1'b1 && SI===1'b1)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b1 && D===1'b0 && SE===1'b0 && SI===1'b0)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b1 && D===1'b0 && SE===1'b0 && SI===1'b1)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b1 && D===1'b0 && SE===1'b1 && SI===1'b0)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b1 && D===1'b0 && SE===1'b1 && SI===1'b1)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b1 && D===1'b1 && SE===1'b0 && SI===1'b0)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b1 && D===1'b1 && SE===1'b0 && SI===1'b1)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b1 && D===1'b1 && SE===1'b1 && SI===1'b0)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b1 && D===1'b1 && SE===1'b1 && SI===1'b1)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      ifnone
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_RD_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_RD_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_RD_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_RD_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_RD_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_RD_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_RD_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_RD_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_RD_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_RD_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_RD_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_RD_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_RD_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_RD_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_RD_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_RD_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      // hold D-HL CK-LH
      $hold(posedge CK &&& (ENABLE_RD_AND_NOT_SE_AND_NOT_SI === 1'b1),
      negedge D &&& (ENABLE_RD_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold D-LH CK-LH
      $hold(posedge CK &&& (ENABLE_RD_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge D &&& (ENABLE_RD_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup D-HL CK-LH
      $setup(negedge D &&& (ENABLE_RD_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_RD_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup D-LH CK-LH
      $setup(posedge D &&& (ENABLE_RD_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_RD_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold D-HL CK-LH
      $hold(posedge CK &&& (ENABLE_RD_AND_NOT_SE_AND_SI === 1'b1),
      negedge D &&& (ENABLE_RD_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // hold D-LH CK-LH
      $hold(posedge CK &&& (ENABLE_RD_AND_NOT_SE_AND_SI === 1'b1),
      posedge D &&& (ENABLE_RD_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // setup D-HL CK-LH
      $setup(negedge D &&& (ENABLE_RD_AND_NOT_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_RD_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // setup D-LH CK-LH
      $setup(posedge D &&& (ENABLE_RD_AND_NOT_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_RD_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // recovery RD-LH CK-LH
      $recovery(posedge RD &&& (ENABLE_NOT_D_AND_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_SE_AND_SI === 1'b1),1.0);
      
      // removal RD-LH CK-LH
      $removal(posedge RD &&& (ENABLE_NOT_D_AND_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_SE_AND_SI === 1'b1),1.0);
      
      // recovery RD-LH CK-LH
      $recovery(posedge RD &&& (ENABLE_D_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_D_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // removal RD-LH CK-LH
      $removal(posedge RD &&& (ENABLE_D_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_D_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // recovery RD-LH CK-LH
      $recovery(posedge RD &&& (ENABLE_D_AND_NOT_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_D_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // removal RD-LH CK-LH
      $removal(posedge RD &&& (ENABLE_D_AND_NOT_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_D_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // recovery RD-LH CK-LH
      $recovery(posedge RD &&& (ENABLE_D_AND_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_D_AND_SE_AND_SI === 1'b1),1.0);
      
      // removal RD-LH CK-LH
      $removal(posedge RD &&& (ENABLE_D_AND_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_D_AND_SE_AND_SI === 1'b1),1.0);
      
      $width(negedge RD &&& (ENABLE_NOT_CK_AND_NOT_D_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge RD &&& (ENABLE_NOT_CK_AND_NOT_D_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge RD &&& (ENABLE_NOT_CK_AND_NOT_D_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge RD &&& (ENABLE_NOT_CK_AND_NOT_D_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge RD &&& (ENABLE_NOT_CK_AND_D_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge RD &&& (ENABLE_NOT_CK_AND_D_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge RD &&& (ENABLE_NOT_CK_AND_D_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge RD &&& (ENABLE_NOT_CK_AND_D_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge RD &&& (ENABLE_CK_AND_NOT_D_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge RD &&& (ENABLE_CK_AND_NOT_D_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge RD &&& (ENABLE_CK_AND_NOT_D_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge RD &&& (ENABLE_CK_AND_NOT_D_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge RD &&& (ENABLE_CK_AND_D_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge RD &&& (ENABLE_CK_AND_D_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge RD &&& (ENABLE_CK_AND_D_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge RD &&& (ENABLE_CK_AND_D_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      // hold SE-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D_AND_RD_AND_SI === 1'b1),
      negedge SE &&& (ENABLE_NOT_D_AND_RD_AND_SI === 1'b1),1.0);
      
      // hold SE-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D_AND_RD_AND_SI === 1'b1),
      posedge SE &&& (ENABLE_NOT_D_AND_RD_AND_SI === 1'b1),1.0);
      
      // setup SE-HL CK-LH
      $setup(negedge SE &&& (ENABLE_NOT_D_AND_RD_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_RD_AND_SI === 1'b1),1.0);
      
      // setup SE-LH CK-LH
      $setup(posedge SE &&& (ENABLE_NOT_D_AND_RD_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_RD_AND_SI === 1'b1),1.0);
      
      // hold SE-HL CK-LH
      $hold(posedge CK &&& (ENABLE_D_AND_RD_AND_NOT_SI === 1'b1),
      negedge SE &&& (ENABLE_D_AND_RD_AND_NOT_SI === 1'b1),1.0);
      
      // hold SE-LH CK-LH
      $hold(posedge CK &&& (ENABLE_D_AND_RD_AND_NOT_SI === 1'b1),
      posedge SE &&& (ENABLE_D_AND_RD_AND_NOT_SI === 1'b1),1.0);
      
      // setup SE-HL CK-LH
      $setup(negedge SE &&& (ENABLE_D_AND_RD_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_D_AND_RD_AND_NOT_SI === 1'b1),1.0);
      
      // setup SE-LH CK-LH
      $setup(posedge SE &&& (ENABLE_D_AND_RD_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_D_AND_RD_AND_NOT_SI === 1'b1),1.0);
      
      // hold SI-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D_AND_RD_AND_SE === 1'b1),
      negedge SI &&& (ENABLE_NOT_D_AND_RD_AND_SE === 1'b1),1.0);
      
      // hold SI-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D_AND_RD_AND_SE === 1'b1),
      posedge SI &&& (ENABLE_NOT_D_AND_RD_AND_SE === 1'b1),1.0);
      
      // setup SI-HL CK-LH
      $setup(negedge SI &&& (ENABLE_NOT_D_AND_RD_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_RD_AND_SE === 1'b1),1.0);
      
      // setup SI-LH CK-LH
      $setup(posedge SI &&& (ENABLE_NOT_D_AND_RD_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_RD_AND_SE === 1'b1),1.0);
      
      // hold SI-HL CK-LH
      $hold(posedge CK &&& (ENABLE_D_AND_RD_AND_SE === 1'b1),
      negedge SI &&& (ENABLE_D_AND_RD_AND_SE === 1'b1),1.0);
      
      // hold SI-LH CK-LH
      $hold(posedge CK &&& (ENABLE_D_AND_RD_AND_SE === 1'b1),
      posedge SI &&& (ENABLE_D_AND_RD_AND_SE === 1'b1),1.0);
      
      // setup SI-HL CK-LH
      $setup(negedge SI &&& (ENABLE_D_AND_RD_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_D_AND_RD_AND_SE === 1'b1),1.0);
      
      // setup SI-LH CK-LH
      $setup(posedge SI &&& (ENABLE_D_AND_RD_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_D_AND_RD_AND_SE === 1'b1),1.0);
      
      // mpw CK_lh 
      $width(posedge CK,1.0,0);
      
      // mpw CK_hl 
      $width(negedge CK,1.0,0);
      
      // mpw RD_hl 
      $width(negedge RD,1.0,0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_FSDPRBQ_V3_2( Q, CK, D, SI, SE, RD );
input CK, D, RD, SE, SI;
output Q;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_FSDPRBQ_V3_2_func SAEDRVT14_FSDPRBQ_V3_2_behav_inst(.Q(Q),.CK(CK),.D(D),.SI(SI),.SE(SE),.RD(RD));
`else
   SAEDRVT14_FSDPRBQ_V3_2_func SAEDRVT14_FSDPRBQ_V3_2_inst(.Q(Q),.CK(CK),.D(D),.SI(SI),.SE(SE),.RD(RD));
   // spec_gates_begin
   not MGM_G0(MGM_W0,D);
   and MGM_G1(MGM_W1,RD,MGM_W0);
   not MGM_G2(MGM_W2,SE);
   and MGM_G3(MGM_W3,MGM_W2,MGM_W1);
   not MGM_G4(MGM_W4,SI);
   and MGM_G5(ENABLE_NOT_D_AND_RD_AND_NOT_SE_AND_NOT_SI,MGM_W4,MGM_W3);
   not MGM_G6(MGM_W5,D);
   and MGM_G7(MGM_W6,RD,MGM_W5);
   not MGM_G8(MGM_W7,SE);
   and MGM_G9(MGM_W8,MGM_W7,MGM_W6);
   and MGM_G10(ENABLE_NOT_D_AND_RD_AND_NOT_SE_AND_SI,SI,MGM_W8);
   not MGM_G11(MGM_W9,D);
   and MGM_G12(MGM_W10,RD,MGM_W9);
   and MGM_G13(MGM_W11,SE,MGM_W10);
   not MGM_G14(MGM_W12,SI);
   and MGM_G15(ENABLE_NOT_D_AND_RD_AND_SE_AND_NOT_SI,MGM_W12,MGM_W11);
   not MGM_G16(MGM_W13,D);
   and MGM_G17(MGM_W14,RD,MGM_W13);
   and MGM_G18(MGM_W15,SE,MGM_W14);
   and MGM_G19(ENABLE_NOT_D_AND_RD_AND_SE_AND_SI,SI,MGM_W15);
   and MGM_G20(MGM_W16,RD,D);
   not MGM_G21(MGM_W17,SE);
   and MGM_G22(MGM_W18,MGM_W17,MGM_W16);
   not MGM_G23(MGM_W19,SI);
   and MGM_G24(ENABLE_D_AND_RD_AND_NOT_SE_AND_NOT_SI,MGM_W19,MGM_W18);
   and MGM_G25(MGM_W20,RD,D);
   not MGM_G26(MGM_W21,SE);
   and MGM_G27(MGM_W22,MGM_W21,MGM_W20);
   and MGM_G28(ENABLE_D_AND_RD_AND_NOT_SE_AND_SI,SI,MGM_W22);
   and MGM_G29(MGM_W23,RD,D);
   and MGM_G30(MGM_W24,SE,MGM_W23);
   not MGM_G31(MGM_W25,SI);
   and MGM_G32(ENABLE_D_AND_RD_AND_SE_AND_NOT_SI,MGM_W25,MGM_W24);
   and MGM_G33(MGM_W26,RD,D);
   and MGM_G34(MGM_W27,SE,MGM_W26);
   and MGM_G35(ENABLE_D_AND_RD_AND_SE_AND_SI,SI,MGM_W27);
   not MGM_G36(MGM_W28,SE);
   and MGM_G37(MGM_W29,MGM_W28,RD);
   not MGM_G38(MGM_W30,SI);
   and MGM_G39(ENABLE_RD_AND_NOT_SE_AND_NOT_SI,MGM_W30,MGM_W29);
   not MGM_G40(MGM_W31,SE);
   and MGM_G41(MGM_W32,MGM_W31,RD);
   and MGM_G42(ENABLE_RD_AND_NOT_SE_AND_SI,SI,MGM_W32);
   not MGM_G43(MGM_W33,D);
   and MGM_G44(MGM_W34,SE,MGM_W33);
   and MGM_G45(ENABLE_NOT_D_AND_SE_AND_SI,SI,MGM_W34);
   not MGM_G46(MGM_W35,SE);
   and MGM_G47(MGM_W36,MGM_W35,D);
   not MGM_G48(MGM_W37,SI);
   and MGM_G49(ENABLE_D_AND_NOT_SE_AND_NOT_SI,MGM_W37,MGM_W36);
   not MGM_G50(MGM_W38,SE);
   and MGM_G51(MGM_W39,MGM_W38,D);
   and MGM_G52(ENABLE_D_AND_NOT_SE_AND_SI,SI,MGM_W39);
   and MGM_G53(MGM_W40,SE,D);
   and MGM_G54(ENABLE_D_AND_SE_AND_SI,SI,MGM_W40);
   not MGM_G55(MGM_W41,CK);
   not MGM_G56(MGM_W42,D);
   and MGM_G57(MGM_W43,MGM_W42,MGM_W41);
   not MGM_G58(MGM_W44,SE);
   and MGM_G59(MGM_W45,MGM_W44,MGM_W43);
   not MGM_G60(MGM_W46,SI);
   and MGM_G61(ENABLE_NOT_CK_AND_NOT_D_AND_NOT_SE_AND_NOT_SI,MGM_W46,MGM_W45);
   not MGM_G62(MGM_W47,CK);
   not MGM_G63(MGM_W48,D);
   and MGM_G64(MGM_W49,MGM_W48,MGM_W47);
   not MGM_G65(MGM_W50,SE);
   and MGM_G66(MGM_W51,MGM_W50,MGM_W49);
   and MGM_G67(ENABLE_NOT_CK_AND_NOT_D_AND_NOT_SE_AND_SI,SI,MGM_W51);
   not MGM_G68(MGM_W52,CK);
   not MGM_G69(MGM_W53,D);
   and MGM_G70(MGM_W54,MGM_W53,MGM_W52);
   and MGM_G71(MGM_W55,SE,MGM_W54);
   not MGM_G72(MGM_W56,SI);
   and MGM_G73(ENABLE_NOT_CK_AND_NOT_D_AND_SE_AND_NOT_SI,MGM_W56,MGM_W55);
   not MGM_G74(MGM_W57,CK);
   not MGM_G75(MGM_W58,D);
   and MGM_G76(MGM_W59,MGM_W58,MGM_W57);
   and MGM_G77(MGM_W60,SE,MGM_W59);
   and MGM_G78(ENABLE_NOT_CK_AND_NOT_D_AND_SE_AND_SI,SI,MGM_W60);
   not MGM_G79(MGM_W61,CK);
   and MGM_G80(MGM_W62,D,MGM_W61);
   not MGM_G81(MGM_W63,SE);
   and MGM_G82(MGM_W64,MGM_W63,MGM_W62);
   not MGM_G83(MGM_W65,SI);
   and MGM_G84(ENABLE_NOT_CK_AND_D_AND_NOT_SE_AND_NOT_SI,MGM_W65,MGM_W64);
   not MGM_G85(MGM_W66,CK);
   and MGM_G86(MGM_W67,D,MGM_W66);
   not MGM_G87(MGM_W68,SE);
   and MGM_G88(MGM_W69,MGM_W68,MGM_W67);
   and MGM_G89(ENABLE_NOT_CK_AND_D_AND_NOT_SE_AND_SI,SI,MGM_W69);
   not MGM_G90(MGM_W70,CK);
   and MGM_G91(MGM_W71,D,MGM_W70);
   and MGM_G92(MGM_W72,SE,MGM_W71);
   not MGM_G93(MGM_W73,SI);
   and MGM_G94(ENABLE_NOT_CK_AND_D_AND_SE_AND_NOT_SI,MGM_W73,MGM_W72);
   not MGM_G95(MGM_W74,CK);
   and MGM_G96(MGM_W75,D,MGM_W74);
   and MGM_G97(MGM_W76,SE,MGM_W75);
   and MGM_G98(ENABLE_NOT_CK_AND_D_AND_SE_AND_SI,SI,MGM_W76);
   not MGM_G99(MGM_W77,D);
   and MGM_G100(MGM_W78,MGM_W77,CK);
   not MGM_G101(MGM_W79,SE);
   and MGM_G102(MGM_W80,MGM_W79,MGM_W78);
   not MGM_G103(MGM_W81,SI);
   and MGM_G104(ENABLE_CK_AND_NOT_D_AND_NOT_SE_AND_NOT_SI,MGM_W81,MGM_W80);
   not MGM_G105(MGM_W82,D);
   and MGM_G106(MGM_W83,MGM_W82,CK);
   not MGM_G107(MGM_W84,SE);
   and MGM_G108(MGM_W85,MGM_W84,MGM_W83);
   and MGM_G109(ENABLE_CK_AND_NOT_D_AND_NOT_SE_AND_SI,SI,MGM_W85);
   not MGM_G110(MGM_W86,D);
   and MGM_G111(MGM_W87,MGM_W86,CK);
   and MGM_G112(MGM_W88,SE,MGM_W87);
   not MGM_G113(MGM_W89,SI);
   and MGM_G114(ENABLE_CK_AND_NOT_D_AND_SE_AND_NOT_SI,MGM_W89,MGM_W88);
   not MGM_G115(MGM_W90,D);
   and MGM_G116(MGM_W91,MGM_W90,CK);
   and MGM_G117(MGM_W92,SE,MGM_W91);
   and MGM_G118(ENABLE_CK_AND_NOT_D_AND_SE_AND_SI,SI,MGM_W92);
   and MGM_G119(MGM_W93,D,CK);
   not MGM_G120(MGM_W94,SE);
   and MGM_G121(MGM_W95,MGM_W94,MGM_W93);
   not MGM_G122(MGM_W96,SI);
   and MGM_G123(ENABLE_CK_AND_D_AND_NOT_SE_AND_NOT_SI,MGM_W96,MGM_W95);
   and MGM_G124(MGM_W97,D,CK);
   not MGM_G125(MGM_W98,SE);
   and MGM_G126(MGM_W99,MGM_W98,MGM_W97);
   and MGM_G127(ENABLE_CK_AND_D_AND_NOT_SE_AND_SI,SI,MGM_W99);
   and MGM_G128(MGM_W100,D,CK);
   and MGM_G129(MGM_W101,SE,MGM_W100);
   not MGM_G130(MGM_W102,SI);
   and MGM_G131(ENABLE_CK_AND_D_AND_SE_AND_NOT_SI,MGM_W102,MGM_W101);
   and MGM_G132(MGM_W103,D,CK);
   and MGM_G133(MGM_W104,SE,MGM_W103);
   and MGM_G134(ENABLE_CK_AND_D_AND_SE_AND_SI,SI,MGM_W104);
   not MGM_G135(MGM_W105,D);
   and MGM_G136(MGM_W106,RD,MGM_W105);
   and MGM_G137(ENABLE_NOT_D_AND_RD_AND_SI,SI,MGM_W106);
   and MGM_G138(MGM_W107,RD,D);
   not MGM_G139(MGM_W108,SI);
   and MGM_G140(ENABLE_D_AND_RD_AND_NOT_SI,MGM_W108,MGM_W107);
   not MGM_G141(MGM_W109,D);
   and MGM_G142(MGM_W110,RD,MGM_W109);
   and MGM_G143(ENABLE_NOT_D_AND_RD_AND_SE,SE,MGM_W110);
   and MGM_G144(MGM_W111,RD,D);
   and MGM_G145(ENABLE_D_AND_RD_AND_SE,SE,MGM_W111);
   // spec_gates_end
   // specify_block_begin
   specify

      if(D===1'b0 && SI===1'b1)
      // seq arc CK --> Q
      (posedge CK => (Q : SE))  = (1.0,1.0);
      
      if(SE===1'b0 && SI===1'b0)
      // seq arc CK --> Q
      (posedge CK => (Q : D))  = (1.0,1.0);
      
      if(D===1'b1 && SE===1'b0 && SI===1'b1 || D===1'b0 && SE===1'b1 && SI===1'b0)
      // seq arc CK --> Q
      (posedge CK => (Q : D))  = (1.0,1.0);
      
      if(D===1'b1 && SE===1'b1)
      // seq arc CK --> Q
      (posedge CK => (Q : SI))  = (1.0,1.0);
      
      ifnone
      // seq arc CK --> Q
      (posedge CK => (Q : D))  = (1.0,1.0);
      
      if(CK===1'b0 && D===1'b0 && SE===1'b0 && SI===1'b0)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b0 && D===1'b0 && SE===1'b0 && SI===1'b1)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b0 && D===1'b0 && SE===1'b1 && SI===1'b0)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b0 && D===1'b0 && SE===1'b1 && SI===1'b1)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b0 && D===1'b1 && SE===1'b0 && SI===1'b0)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b0 && D===1'b1 && SE===1'b0 && SI===1'b1)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b0 && D===1'b1 && SE===1'b1 && SI===1'b0)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b0 && D===1'b1 && SE===1'b1 && SI===1'b1)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b1 && D===1'b0 && SE===1'b0 && SI===1'b0)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b1 && D===1'b0 && SE===1'b0 && SI===1'b1)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b1 && D===1'b0 && SE===1'b1 && SI===1'b0)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b1 && D===1'b0 && SE===1'b1 && SI===1'b1)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b1 && D===1'b1 && SE===1'b0 && SI===1'b0)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b1 && D===1'b1 && SE===1'b0 && SI===1'b1)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b1 && D===1'b1 && SE===1'b1 && SI===1'b0)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b1 && D===1'b1 && SE===1'b1 && SI===1'b1)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      ifnone
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_RD_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_RD_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_RD_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_RD_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_RD_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_RD_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_RD_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_RD_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_RD_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_RD_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_RD_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_RD_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_RD_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_RD_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_RD_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_RD_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      // hold D-HL CK-LH
      $hold(posedge CK &&& (ENABLE_RD_AND_NOT_SE_AND_NOT_SI === 1'b1),
      negedge D &&& (ENABLE_RD_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold D-LH CK-LH
      $hold(posedge CK &&& (ENABLE_RD_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge D &&& (ENABLE_RD_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup D-HL CK-LH
      $setup(negedge D &&& (ENABLE_RD_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_RD_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup D-LH CK-LH
      $setup(posedge D &&& (ENABLE_RD_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_RD_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold D-HL CK-LH
      $hold(posedge CK &&& (ENABLE_RD_AND_NOT_SE_AND_SI === 1'b1),
      negedge D &&& (ENABLE_RD_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // hold D-LH CK-LH
      $hold(posedge CK &&& (ENABLE_RD_AND_NOT_SE_AND_SI === 1'b1),
      posedge D &&& (ENABLE_RD_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // setup D-HL CK-LH
      $setup(negedge D &&& (ENABLE_RD_AND_NOT_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_RD_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // setup D-LH CK-LH
      $setup(posedge D &&& (ENABLE_RD_AND_NOT_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_RD_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // recovery RD-LH CK-LH
      $recovery(posedge RD &&& (ENABLE_NOT_D_AND_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_SE_AND_SI === 1'b1),1.0);
      
      // removal RD-LH CK-LH
      $removal(posedge RD &&& (ENABLE_NOT_D_AND_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_SE_AND_SI === 1'b1),1.0);
      
      // recovery RD-LH CK-LH
      $recovery(posedge RD &&& (ENABLE_D_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_D_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // removal RD-LH CK-LH
      $removal(posedge RD &&& (ENABLE_D_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_D_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // recovery RD-LH CK-LH
      $recovery(posedge RD &&& (ENABLE_D_AND_NOT_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_D_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // removal RD-LH CK-LH
      $removal(posedge RD &&& (ENABLE_D_AND_NOT_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_D_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // recovery RD-LH CK-LH
      $recovery(posedge RD &&& (ENABLE_D_AND_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_D_AND_SE_AND_SI === 1'b1),1.0);
      
      // removal RD-LH CK-LH
      $removal(posedge RD &&& (ENABLE_D_AND_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_D_AND_SE_AND_SI === 1'b1),1.0);
      
      $width(negedge RD &&& (ENABLE_NOT_CK_AND_NOT_D_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge RD &&& (ENABLE_NOT_CK_AND_NOT_D_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge RD &&& (ENABLE_NOT_CK_AND_NOT_D_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge RD &&& (ENABLE_NOT_CK_AND_NOT_D_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge RD &&& (ENABLE_NOT_CK_AND_D_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge RD &&& (ENABLE_NOT_CK_AND_D_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge RD &&& (ENABLE_NOT_CK_AND_D_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge RD &&& (ENABLE_NOT_CK_AND_D_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge RD &&& (ENABLE_CK_AND_NOT_D_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge RD &&& (ENABLE_CK_AND_NOT_D_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge RD &&& (ENABLE_CK_AND_NOT_D_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge RD &&& (ENABLE_CK_AND_NOT_D_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge RD &&& (ENABLE_CK_AND_D_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge RD &&& (ENABLE_CK_AND_D_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge RD &&& (ENABLE_CK_AND_D_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge RD &&& (ENABLE_CK_AND_D_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      // hold SE-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D_AND_RD_AND_SI === 1'b1),
      negedge SE &&& (ENABLE_NOT_D_AND_RD_AND_SI === 1'b1),1.0);
      
      // hold SE-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D_AND_RD_AND_SI === 1'b1),
      posedge SE &&& (ENABLE_NOT_D_AND_RD_AND_SI === 1'b1),1.0);
      
      // setup SE-HL CK-LH
      $setup(negedge SE &&& (ENABLE_NOT_D_AND_RD_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_RD_AND_SI === 1'b1),1.0);
      
      // setup SE-LH CK-LH
      $setup(posedge SE &&& (ENABLE_NOT_D_AND_RD_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_RD_AND_SI === 1'b1),1.0);
      
      // hold SE-HL CK-LH
      $hold(posedge CK &&& (ENABLE_D_AND_RD_AND_NOT_SI === 1'b1),
      negedge SE &&& (ENABLE_D_AND_RD_AND_NOT_SI === 1'b1),1.0);
      
      // hold SE-LH CK-LH
      $hold(posedge CK &&& (ENABLE_D_AND_RD_AND_NOT_SI === 1'b1),
      posedge SE &&& (ENABLE_D_AND_RD_AND_NOT_SI === 1'b1),1.0);
      
      // setup SE-HL CK-LH
      $setup(negedge SE &&& (ENABLE_D_AND_RD_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_D_AND_RD_AND_NOT_SI === 1'b1),1.0);
      
      // setup SE-LH CK-LH
      $setup(posedge SE &&& (ENABLE_D_AND_RD_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_D_AND_RD_AND_NOT_SI === 1'b1),1.0);
      
      // hold SI-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D_AND_RD_AND_SE === 1'b1),
      negedge SI &&& (ENABLE_NOT_D_AND_RD_AND_SE === 1'b1),1.0);
      
      // hold SI-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D_AND_RD_AND_SE === 1'b1),
      posedge SI &&& (ENABLE_NOT_D_AND_RD_AND_SE === 1'b1),1.0);
      
      // setup SI-HL CK-LH
      $setup(negedge SI &&& (ENABLE_NOT_D_AND_RD_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_RD_AND_SE === 1'b1),1.0);
      
      // setup SI-LH CK-LH
      $setup(posedge SI &&& (ENABLE_NOT_D_AND_RD_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_RD_AND_SE === 1'b1),1.0);
      
      // hold SI-HL CK-LH
      $hold(posedge CK &&& (ENABLE_D_AND_RD_AND_SE === 1'b1),
      negedge SI &&& (ENABLE_D_AND_RD_AND_SE === 1'b1),1.0);
      
      // hold SI-LH CK-LH
      $hold(posedge CK &&& (ENABLE_D_AND_RD_AND_SE === 1'b1),
      posedge SI &&& (ENABLE_D_AND_RD_AND_SE === 1'b1),1.0);
      
      // setup SI-HL CK-LH
      $setup(negedge SI &&& (ENABLE_D_AND_RD_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_D_AND_RD_AND_SE === 1'b1),1.0);
      
      // setup SI-LH CK-LH
      $setup(posedge SI &&& (ENABLE_D_AND_RD_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_D_AND_RD_AND_SE === 1'b1),1.0);
      
      // mpw CK_lh 
      $width(posedge CK,1.0,0);
      
      // mpw CK_hl 
      $width(negedge CK,1.0,0);
      
      // mpw RD_hl 
      $width(negedge RD,1.0,0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_FSDPRBQ_V3_4( Q, CK, D, SI, SE, RD );
input CK, D, RD, SE, SI;
output Q;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_FSDPRBQ_V3_4_func SAEDRVT14_FSDPRBQ_V3_4_behav_inst(.Q(Q),.CK(CK),.D(D),.SI(SI),.SE(SE),.RD(RD));
`else
   SAEDRVT14_FSDPRBQ_V3_4_func SAEDRVT14_FSDPRBQ_V3_4_inst(.Q(Q),.CK(CK),.D(D),.SI(SI),.SE(SE),.RD(RD));
   // spec_gates_begin
   not MGM_G0(MGM_W0,D);
   and MGM_G1(MGM_W1,RD,MGM_W0);
   not MGM_G2(MGM_W2,SE);
   and MGM_G3(MGM_W3,MGM_W2,MGM_W1);
   not MGM_G4(MGM_W4,SI);
   and MGM_G5(ENABLE_NOT_D_AND_RD_AND_NOT_SE_AND_NOT_SI,MGM_W4,MGM_W3);
   not MGM_G6(MGM_W5,D);
   and MGM_G7(MGM_W6,RD,MGM_W5);
   not MGM_G8(MGM_W7,SE);
   and MGM_G9(MGM_W8,MGM_W7,MGM_W6);
   and MGM_G10(ENABLE_NOT_D_AND_RD_AND_NOT_SE_AND_SI,SI,MGM_W8);
   not MGM_G11(MGM_W9,D);
   and MGM_G12(MGM_W10,RD,MGM_W9);
   and MGM_G13(MGM_W11,SE,MGM_W10);
   not MGM_G14(MGM_W12,SI);
   and MGM_G15(ENABLE_NOT_D_AND_RD_AND_SE_AND_NOT_SI,MGM_W12,MGM_W11);
   not MGM_G16(MGM_W13,D);
   and MGM_G17(MGM_W14,RD,MGM_W13);
   and MGM_G18(MGM_W15,SE,MGM_W14);
   and MGM_G19(ENABLE_NOT_D_AND_RD_AND_SE_AND_SI,SI,MGM_W15);
   and MGM_G20(MGM_W16,RD,D);
   not MGM_G21(MGM_W17,SE);
   and MGM_G22(MGM_W18,MGM_W17,MGM_W16);
   not MGM_G23(MGM_W19,SI);
   and MGM_G24(ENABLE_D_AND_RD_AND_NOT_SE_AND_NOT_SI,MGM_W19,MGM_W18);
   and MGM_G25(MGM_W20,RD,D);
   not MGM_G26(MGM_W21,SE);
   and MGM_G27(MGM_W22,MGM_W21,MGM_W20);
   and MGM_G28(ENABLE_D_AND_RD_AND_NOT_SE_AND_SI,SI,MGM_W22);
   and MGM_G29(MGM_W23,RD,D);
   and MGM_G30(MGM_W24,SE,MGM_W23);
   not MGM_G31(MGM_W25,SI);
   and MGM_G32(ENABLE_D_AND_RD_AND_SE_AND_NOT_SI,MGM_W25,MGM_W24);
   and MGM_G33(MGM_W26,RD,D);
   and MGM_G34(MGM_W27,SE,MGM_W26);
   and MGM_G35(ENABLE_D_AND_RD_AND_SE_AND_SI,SI,MGM_W27);
   not MGM_G36(MGM_W28,SE);
   and MGM_G37(MGM_W29,MGM_W28,RD);
   not MGM_G38(MGM_W30,SI);
   and MGM_G39(ENABLE_RD_AND_NOT_SE_AND_NOT_SI,MGM_W30,MGM_W29);
   not MGM_G40(MGM_W31,SE);
   and MGM_G41(MGM_W32,MGM_W31,RD);
   and MGM_G42(ENABLE_RD_AND_NOT_SE_AND_SI,SI,MGM_W32);
   not MGM_G43(MGM_W33,D);
   and MGM_G44(MGM_W34,SE,MGM_W33);
   and MGM_G45(ENABLE_NOT_D_AND_SE_AND_SI,SI,MGM_W34);
   not MGM_G46(MGM_W35,SE);
   and MGM_G47(MGM_W36,MGM_W35,D);
   not MGM_G48(MGM_W37,SI);
   and MGM_G49(ENABLE_D_AND_NOT_SE_AND_NOT_SI,MGM_W37,MGM_W36);
   not MGM_G50(MGM_W38,SE);
   and MGM_G51(MGM_W39,MGM_W38,D);
   and MGM_G52(ENABLE_D_AND_NOT_SE_AND_SI,SI,MGM_W39);
   and MGM_G53(MGM_W40,SE,D);
   and MGM_G54(ENABLE_D_AND_SE_AND_SI,SI,MGM_W40);
   not MGM_G55(MGM_W41,CK);
   not MGM_G56(MGM_W42,D);
   and MGM_G57(MGM_W43,MGM_W42,MGM_W41);
   not MGM_G58(MGM_W44,SE);
   and MGM_G59(MGM_W45,MGM_W44,MGM_W43);
   not MGM_G60(MGM_W46,SI);
   and MGM_G61(ENABLE_NOT_CK_AND_NOT_D_AND_NOT_SE_AND_NOT_SI,MGM_W46,MGM_W45);
   not MGM_G62(MGM_W47,CK);
   not MGM_G63(MGM_W48,D);
   and MGM_G64(MGM_W49,MGM_W48,MGM_W47);
   not MGM_G65(MGM_W50,SE);
   and MGM_G66(MGM_W51,MGM_W50,MGM_W49);
   and MGM_G67(ENABLE_NOT_CK_AND_NOT_D_AND_NOT_SE_AND_SI,SI,MGM_W51);
   not MGM_G68(MGM_W52,CK);
   not MGM_G69(MGM_W53,D);
   and MGM_G70(MGM_W54,MGM_W53,MGM_W52);
   and MGM_G71(MGM_W55,SE,MGM_W54);
   not MGM_G72(MGM_W56,SI);
   and MGM_G73(ENABLE_NOT_CK_AND_NOT_D_AND_SE_AND_NOT_SI,MGM_W56,MGM_W55);
   not MGM_G74(MGM_W57,CK);
   not MGM_G75(MGM_W58,D);
   and MGM_G76(MGM_W59,MGM_W58,MGM_W57);
   and MGM_G77(MGM_W60,SE,MGM_W59);
   and MGM_G78(ENABLE_NOT_CK_AND_NOT_D_AND_SE_AND_SI,SI,MGM_W60);
   not MGM_G79(MGM_W61,CK);
   and MGM_G80(MGM_W62,D,MGM_W61);
   not MGM_G81(MGM_W63,SE);
   and MGM_G82(MGM_W64,MGM_W63,MGM_W62);
   not MGM_G83(MGM_W65,SI);
   and MGM_G84(ENABLE_NOT_CK_AND_D_AND_NOT_SE_AND_NOT_SI,MGM_W65,MGM_W64);
   not MGM_G85(MGM_W66,CK);
   and MGM_G86(MGM_W67,D,MGM_W66);
   not MGM_G87(MGM_W68,SE);
   and MGM_G88(MGM_W69,MGM_W68,MGM_W67);
   and MGM_G89(ENABLE_NOT_CK_AND_D_AND_NOT_SE_AND_SI,SI,MGM_W69);
   not MGM_G90(MGM_W70,CK);
   and MGM_G91(MGM_W71,D,MGM_W70);
   and MGM_G92(MGM_W72,SE,MGM_W71);
   not MGM_G93(MGM_W73,SI);
   and MGM_G94(ENABLE_NOT_CK_AND_D_AND_SE_AND_NOT_SI,MGM_W73,MGM_W72);
   not MGM_G95(MGM_W74,CK);
   and MGM_G96(MGM_W75,D,MGM_W74);
   and MGM_G97(MGM_W76,SE,MGM_W75);
   and MGM_G98(ENABLE_NOT_CK_AND_D_AND_SE_AND_SI,SI,MGM_W76);
   not MGM_G99(MGM_W77,D);
   and MGM_G100(MGM_W78,MGM_W77,CK);
   not MGM_G101(MGM_W79,SE);
   and MGM_G102(MGM_W80,MGM_W79,MGM_W78);
   not MGM_G103(MGM_W81,SI);
   and MGM_G104(ENABLE_CK_AND_NOT_D_AND_NOT_SE_AND_NOT_SI,MGM_W81,MGM_W80);
   not MGM_G105(MGM_W82,D);
   and MGM_G106(MGM_W83,MGM_W82,CK);
   not MGM_G107(MGM_W84,SE);
   and MGM_G108(MGM_W85,MGM_W84,MGM_W83);
   and MGM_G109(ENABLE_CK_AND_NOT_D_AND_NOT_SE_AND_SI,SI,MGM_W85);
   not MGM_G110(MGM_W86,D);
   and MGM_G111(MGM_W87,MGM_W86,CK);
   and MGM_G112(MGM_W88,SE,MGM_W87);
   not MGM_G113(MGM_W89,SI);
   and MGM_G114(ENABLE_CK_AND_NOT_D_AND_SE_AND_NOT_SI,MGM_W89,MGM_W88);
   not MGM_G115(MGM_W90,D);
   and MGM_G116(MGM_W91,MGM_W90,CK);
   and MGM_G117(MGM_W92,SE,MGM_W91);
   and MGM_G118(ENABLE_CK_AND_NOT_D_AND_SE_AND_SI,SI,MGM_W92);
   and MGM_G119(MGM_W93,D,CK);
   not MGM_G120(MGM_W94,SE);
   and MGM_G121(MGM_W95,MGM_W94,MGM_W93);
   not MGM_G122(MGM_W96,SI);
   and MGM_G123(ENABLE_CK_AND_D_AND_NOT_SE_AND_NOT_SI,MGM_W96,MGM_W95);
   and MGM_G124(MGM_W97,D,CK);
   not MGM_G125(MGM_W98,SE);
   and MGM_G126(MGM_W99,MGM_W98,MGM_W97);
   and MGM_G127(ENABLE_CK_AND_D_AND_NOT_SE_AND_SI,SI,MGM_W99);
   and MGM_G128(MGM_W100,D,CK);
   and MGM_G129(MGM_W101,SE,MGM_W100);
   not MGM_G130(MGM_W102,SI);
   and MGM_G131(ENABLE_CK_AND_D_AND_SE_AND_NOT_SI,MGM_W102,MGM_W101);
   and MGM_G132(MGM_W103,D,CK);
   and MGM_G133(MGM_W104,SE,MGM_W103);
   and MGM_G134(ENABLE_CK_AND_D_AND_SE_AND_SI,SI,MGM_W104);
   not MGM_G135(MGM_W105,D);
   and MGM_G136(MGM_W106,RD,MGM_W105);
   and MGM_G137(ENABLE_NOT_D_AND_RD_AND_SI,SI,MGM_W106);
   and MGM_G138(MGM_W107,RD,D);
   not MGM_G139(MGM_W108,SI);
   and MGM_G140(ENABLE_D_AND_RD_AND_NOT_SI,MGM_W108,MGM_W107);
   not MGM_G141(MGM_W109,D);
   and MGM_G142(MGM_W110,RD,MGM_W109);
   and MGM_G143(ENABLE_NOT_D_AND_RD_AND_SE,SE,MGM_W110);
   and MGM_G144(MGM_W111,RD,D);
   and MGM_G145(ENABLE_D_AND_RD_AND_SE,SE,MGM_W111);
   // spec_gates_end
   // specify_block_begin
   specify

      if(D===1'b0 && SI===1'b1)
      // seq arc CK --> Q
      (posedge CK => (Q : SE))  = (1.0,1.0);
      
      if(SE===1'b0 && SI===1'b0)
      // seq arc CK --> Q
      (posedge CK => (Q : D))  = (1.0,1.0);
      
      if(D===1'b1 && SE===1'b0 && SI===1'b1 || D===1'b0 && SE===1'b1 && SI===1'b0)
      // seq arc CK --> Q
      (posedge CK => (Q : D))  = (1.0,1.0);
      
      if(D===1'b1 && SE===1'b1)
      // seq arc CK --> Q
      (posedge CK => (Q : SI))  = (1.0,1.0);
      
      ifnone
      // seq arc CK --> Q
      (posedge CK => (Q : D))  = (1.0,1.0);
      
      if(CK===1'b0 && D===1'b0 && SE===1'b0 && SI===1'b0)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b0 && D===1'b0 && SE===1'b0 && SI===1'b1)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b0 && D===1'b0 && SE===1'b1 && SI===1'b0)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b0 && D===1'b0 && SE===1'b1 && SI===1'b1)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b0 && D===1'b1 && SE===1'b0 && SI===1'b0)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b0 && D===1'b1 && SE===1'b0 && SI===1'b1)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b0 && D===1'b1 && SE===1'b1 && SI===1'b0)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b0 && D===1'b1 && SE===1'b1 && SI===1'b1)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b1 && D===1'b0 && SE===1'b0 && SI===1'b0)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b1 && D===1'b0 && SE===1'b0 && SI===1'b1)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b1 && D===1'b0 && SE===1'b1 && SI===1'b0)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b1 && D===1'b0 && SE===1'b1 && SI===1'b1)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b1 && D===1'b1 && SE===1'b0 && SI===1'b0)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b1 && D===1'b1 && SE===1'b0 && SI===1'b1)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b1 && D===1'b1 && SE===1'b1 && SI===1'b0)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b1 && D===1'b1 && SE===1'b1 && SI===1'b1)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      ifnone
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_RD_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_RD_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_RD_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_RD_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_RD_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_RD_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_RD_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_RD_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_RD_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_RD_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_RD_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_RD_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_RD_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_RD_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_RD_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_RD_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      // hold D-HL CK-LH
      $hold(posedge CK &&& (ENABLE_RD_AND_NOT_SE_AND_NOT_SI === 1'b1),
      negedge D &&& (ENABLE_RD_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold D-LH CK-LH
      $hold(posedge CK &&& (ENABLE_RD_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge D &&& (ENABLE_RD_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup D-HL CK-LH
      $setup(negedge D &&& (ENABLE_RD_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_RD_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup D-LH CK-LH
      $setup(posedge D &&& (ENABLE_RD_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_RD_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold D-HL CK-LH
      $hold(posedge CK &&& (ENABLE_RD_AND_NOT_SE_AND_SI === 1'b1),
      negedge D &&& (ENABLE_RD_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // hold D-LH CK-LH
      $hold(posedge CK &&& (ENABLE_RD_AND_NOT_SE_AND_SI === 1'b1),
      posedge D &&& (ENABLE_RD_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // setup D-HL CK-LH
      $setup(negedge D &&& (ENABLE_RD_AND_NOT_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_RD_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // setup D-LH CK-LH
      $setup(posedge D &&& (ENABLE_RD_AND_NOT_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_RD_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // recovery RD-LH CK-LH
      $recovery(posedge RD &&& (ENABLE_NOT_D_AND_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_SE_AND_SI === 1'b1),1.0);
      
      // removal RD-LH CK-LH
      $removal(posedge RD &&& (ENABLE_NOT_D_AND_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_SE_AND_SI === 1'b1),1.0);
      
      // recovery RD-LH CK-LH
      $recovery(posedge RD &&& (ENABLE_D_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_D_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // removal RD-LH CK-LH
      $removal(posedge RD &&& (ENABLE_D_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_D_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // recovery RD-LH CK-LH
      $recovery(posedge RD &&& (ENABLE_D_AND_NOT_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_D_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // removal RD-LH CK-LH
      $removal(posedge RD &&& (ENABLE_D_AND_NOT_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_D_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // recovery RD-LH CK-LH
      $recovery(posedge RD &&& (ENABLE_D_AND_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_D_AND_SE_AND_SI === 1'b1),1.0);
      
      // removal RD-LH CK-LH
      $removal(posedge RD &&& (ENABLE_D_AND_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_D_AND_SE_AND_SI === 1'b1),1.0);
      
      $width(negedge RD &&& (ENABLE_NOT_CK_AND_NOT_D_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge RD &&& (ENABLE_NOT_CK_AND_NOT_D_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge RD &&& (ENABLE_NOT_CK_AND_NOT_D_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge RD &&& (ENABLE_NOT_CK_AND_NOT_D_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge RD &&& (ENABLE_NOT_CK_AND_D_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge RD &&& (ENABLE_NOT_CK_AND_D_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge RD &&& (ENABLE_NOT_CK_AND_D_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge RD &&& (ENABLE_NOT_CK_AND_D_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge RD &&& (ENABLE_CK_AND_NOT_D_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge RD &&& (ENABLE_CK_AND_NOT_D_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge RD &&& (ENABLE_CK_AND_NOT_D_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge RD &&& (ENABLE_CK_AND_NOT_D_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge RD &&& (ENABLE_CK_AND_D_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge RD &&& (ENABLE_CK_AND_D_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge RD &&& (ENABLE_CK_AND_D_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge RD &&& (ENABLE_CK_AND_D_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      // hold SE-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D_AND_RD_AND_SI === 1'b1),
      negedge SE &&& (ENABLE_NOT_D_AND_RD_AND_SI === 1'b1),1.0);
      
      // hold SE-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D_AND_RD_AND_SI === 1'b1),
      posedge SE &&& (ENABLE_NOT_D_AND_RD_AND_SI === 1'b1),1.0);
      
      // setup SE-HL CK-LH
      $setup(negedge SE &&& (ENABLE_NOT_D_AND_RD_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_RD_AND_SI === 1'b1),1.0);
      
      // setup SE-LH CK-LH
      $setup(posedge SE &&& (ENABLE_NOT_D_AND_RD_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_RD_AND_SI === 1'b1),1.0);
      
      // hold SE-HL CK-LH
      $hold(posedge CK &&& (ENABLE_D_AND_RD_AND_NOT_SI === 1'b1),
      negedge SE &&& (ENABLE_D_AND_RD_AND_NOT_SI === 1'b1),1.0);
      
      // hold SE-LH CK-LH
      $hold(posedge CK &&& (ENABLE_D_AND_RD_AND_NOT_SI === 1'b1),
      posedge SE &&& (ENABLE_D_AND_RD_AND_NOT_SI === 1'b1),1.0);
      
      // setup SE-HL CK-LH
      $setup(negedge SE &&& (ENABLE_D_AND_RD_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_D_AND_RD_AND_NOT_SI === 1'b1),1.0);
      
      // setup SE-LH CK-LH
      $setup(posedge SE &&& (ENABLE_D_AND_RD_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_D_AND_RD_AND_NOT_SI === 1'b1),1.0);
      
      // hold SI-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D_AND_RD_AND_SE === 1'b1),
      negedge SI &&& (ENABLE_NOT_D_AND_RD_AND_SE === 1'b1),1.0);
      
      // hold SI-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D_AND_RD_AND_SE === 1'b1),
      posedge SI &&& (ENABLE_NOT_D_AND_RD_AND_SE === 1'b1),1.0);
      
      // setup SI-HL CK-LH
      $setup(negedge SI &&& (ENABLE_NOT_D_AND_RD_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_RD_AND_SE === 1'b1),1.0);
      
      // setup SI-LH CK-LH
      $setup(posedge SI &&& (ENABLE_NOT_D_AND_RD_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_RD_AND_SE === 1'b1),1.0);
      
      // hold SI-HL CK-LH
      $hold(posedge CK &&& (ENABLE_D_AND_RD_AND_SE === 1'b1),
      negedge SI &&& (ENABLE_D_AND_RD_AND_SE === 1'b1),1.0);
      
      // hold SI-LH CK-LH
      $hold(posedge CK &&& (ENABLE_D_AND_RD_AND_SE === 1'b1),
      posedge SI &&& (ENABLE_D_AND_RD_AND_SE === 1'b1),1.0);
      
      // setup SI-HL CK-LH
      $setup(negedge SI &&& (ENABLE_D_AND_RD_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_D_AND_RD_AND_SE === 1'b1),1.0);
      
      // setup SI-LH CK-LH
      $setup(posedge SI &&& (ENABLE_D_AND_RD_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_D_AND_RD_AND_SE === 1'b1),1.0);
      
      // mpw CK_lh 
      $width(posedge CK,1.0,0);
      
      // mpw CK_hl 
      $width(negedge CK,1.0,0);
      
      // mpw RD_hl 
      $width(negedge RD,1.0,0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_FSDPRBSBQ_V2LP_0P5( Q, CK, D, SI, SE, RD, SD );
input CK, D, RD, SD, SE, SI;
output Q;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_FSDPRBSBQ_V2LP_0P5_func SAEDRVT14_FSDPRBSBQ_V2LP_0P5_behav_inst(.Q(Q),.CK(CK),.D(D),.SI(SI),.SE(SE),.RD(RD),.SD(SD));
`else
   SAEDRVT14_FSDPRBSBQ_V2LP_0P5_func SAEDRVT14_FSDPRBSBQ_V2LP_0P5_inst(.Q(Q),.CK(CK),.D(D),.SI(SI),.SE(SE),.RD(RD),.SD(SD));
   // spec_gates_begin
   not MGM_G0(MGM_W0,D);
   and MGM_G1(MGM_W1,RD,MGM_W0);
   and MGM_G2(MGM_W2,SD,MGM_W1);
   not MGM_G3(MGM_W3,SE);
   and MGM_G4(MGM_W4,MGM_W3,MGM_W2);
   not MGM_G5(MGM_W5,SI);
   and MGM_G6(ENABLE_NOT_D_AND_RD_AND_SD_AND_NOT_SE_AND_NOT_SI,MGM_W5,MGM_W4);
   not MGM_G7(MGM_W6,D);
   and MGM_G8(MGM_W7,RD,MGM_W6);
   and MGM_G9(MGM_W8,SD,MGM_W7);
   not MGM_G10(MGM_W9,SE);
   and MGM_G11(MGM_W10,MGM_W9,MGM_W8);
   and MGM_G12(ENABLE_NOT_D_AND_RD_AND_SD_AND_NOT_SE_AND_SI,SI,MGM_W10);
   not MGM_G13(MGM_W11,D);
   and MGM_G14(MGM_W12,RD,MGM_W11);
   and MGM_G15(MGM_W13,SD,MGM_W12);
   and MGM_G16(MGM_W14,SE,MGM_W13);
   not MGM_G17(MGM_W15,SI);
   and MGM_G18(ENABLE_NOT_D_AND_RD_AND_SD_AND_SE_AND_NOT_SI,MGM_W15,MGM_W14);
   not MGM_G19(MGM_W16,D);
   and MGM_G20(MGM_W17,RD,MGM_W16);
   and MGM_G21(MGM_W18,SD,MGM_W17);
   and MGM_G22(MGM_W19,SE,MGM_W18);
   and MGM_G23(ENABLE_NOT_D_AND_RD_AND_SD_AND_SE_AND_SI,SI,MGM_W19);
   and MGM_G24(MGM_W20,RD,D);
   and MGM_G25(MGM_W21,SD,MGM_W20);
   not MGM_G26(MGM_W22,SE);
   and MGM_G27(MGM_W23,MGM_W22,MGM_W21);
   not MGM_G28(MGM_W24,SI);
   and MGM_G29(ENABLE_D_AND_RD_AND_SD_AND_NOT_SE_AND_NOT_SI,MGM_W24,MGM_W23);
   and MGM_G30(MGM_W25,RD,D);
   and MGM_G31(MGM_W26,SD,MGM_W25);
   not MGM_G32(MGM_W27,SE);
   and MGM_G33(MGM_W28,MGM_W27,MGM_W26);
   and MGM_G34(ENABLE_D_AND_RD_AND_SD_AND_NOT_SE_AND_SI,SI,MGM_W28);
   and MGM_G35(MGM_W29,RD,D);
   and MGM_G36(MGM_W30,SD,MGM_W29);
   and MGM_G37(MGM_W31,SE,MGM_W30);
   not MGM_G38(MGM_W32,SI);
   and MGM_G39(ENABLE_D_AND_RD_AND_SD_AND_SE_AND_NOT_SI,MGM_W32,MGM_W31);
   and MGM_G40(MGM_W33,RD,D);
   and MGM_G41(MGM_W34,SD,MGM_W33);
   and MGM_G42(MGM_W35,SE,MGM_W34);
   and MGM_G43(ENABLE_D_AND_RD_AND_SD_AND_SE_AND_SI,SI,MGM_W35);
   and MGM_G44(MGM_W36,SD,RD);
   not MGM_G45(MGM_W37,SE);
   and MGM_G46(MGM_W38,MGM_W37,MGM_W36);
   not MGM_G47(MGM_W39,SI);
   and MGM_G48(ENABLE_RD_AND_SD_AND_NOT_SE_AND_NOT_SI,MGM_W39,MGM_W38);
   and MGM_G49(MGM_W40,SD,RD);
   not MGM_G50(MGM_W41,SE);
   and MGM_G51(MGM_W42,MGM_W41,MGM_W40);
   and MGM_G52(ENABLE_RD_AND_SD_AND_NOT_SE_AND_SI,SI,MGM_W42);
   not MGM_G53(MGM_W43,D);
   and MGM_G54(MGM_W44,SD,MGM_W43);
   and MGM_G55(MGM_W45,SE,MGM_W44);
   and MGM_G56(ENABLE_NOT_D_AND_SD_AND_SE_AND_SI,SI,MGM_W45);
   and MGM_G57(MGM_W46,SD,D);
   not MGM_G58(MGM_W47,SE);
   and MGM_G59(MGM_W48,MGM_W47,MGM_W46);
   not MGM_G60(MGM_W49,SI);
   and MGM_G61(ENABLE_D_AND_SD_AND_NOT_SE_AND_NOT_SI,MGM_W49,MGM_W48);
   and MGM_G62(MGM_W50,SD,D);
   not MGM_G63(MGM_W51,SE);
   and MGM_G64(MGM_W52,MGM_W51,MGM_W50);
   and MGM_G65(ENABLE_D_AND_SD_AND_NOT_SE_AND_SI,SI,MGM_W52);
   and MGM_G66(MGM_W53,SD,D);
   and MGM_G67(MGM_W54,SE,MGM_W53);
   and MGM_G68(ENABLE_D_AND_SD_AND_SE_AND_SI,SI,MGM_W54);
   not MGM_G69(MGM_W55,CK);
   not MGM_G70(MGM_W56,D);
   and MGM_G71(MGM_W57,MGM_W56,MGM_W55);
   and MGM_G72(MGM_W58,SD,MGM_W57);
   not MGM_G73(MGM_W59,SE);
   and MGM_G74(MGM_W60,MGM_W59,MGM_W58);
   not MGM_G75(MGM_W61,SI);
   and MGM_G76(ENABLE_NOT_CK_AND_NOT_D_AND_SD_AND_NOT_SE_AND_NOT_SI,MGM_W61,MGM_W60);
   not MGM_G77(MGM_W62,CK);
   not MGM_G78(MGM_W63,D);
   and MGM_G79(MGM_W64,MGM_W63,MGM_W62);
   and MGM_G80(MGM_W65,SD,MGM_W64);
   not MGM_G81(MGM_W66,SE);
   and MGM_G82(MGM_W67,MGM_W66,MGM_W65);
   and MGM_G83(ENABLE_NOT_CK_AND_NOT_D_AND_SD_AND_NOT_SE_AND_SI,SI,MGM_W67);
   not MGM_G84(MGM_W68,CK);
   not MGM_G85(MGM_W69,D);
   and MGM_G86(MGM_W70,MGM_W69,MGM_W68);
   and MGM_G87(MGM_W71,SD,MGM_W70);
   and MGM_G88(MGM_W72,SE,MGM_W71);
   not MGM_G89(MGM_W73,SI);
   and MGM_G90(ENABLE_NOT_CK_AND_NOT_D_AND_SD_AND_SE_AND_NOT_SI,MGM_W73,MGM_W72);
   not MGM_G91(MGM_W74,CK);
   not MGM_G92(MGM_W75,D);
   and MGM_G93(MGM_W76,MGM_W75,MGM_W74);
   and MGM_G94(MGM_W77,SD,MGM_W76);
   and MGM_G95(MGM_W78,SE,MGM_W77);
   and MGM_G96(ENABLE_NOT_CK_AND_NOT_D_AND_SD_AND_SE_AND_SI,SI,MGM_W78);
   not MGM_G97(MGM_W79,CK);
   and MGM_G98(MGM_W80,D,MGM_W79);
   and MGM_G99(MGM_W81,SD,MGM_W80);
   not MGM_G100(MGM_W82,SE);
   and MGM_G101(MGM_W83,MGM_W82,MGM_W81);
   not MGM_G102(MGM_W84,SI);
   and MGM_G103(ENABLE_NOT_CK_AND_D_AND_SD_AND_NOT_SE_AND_NOT_SI,MGM_W84,MGM_W83);
   not MGM_G104(MGM_W85,CK);
   and MGM_G105(MGM_W86,D,MGM_W85);
   and MGM_G106(MGM_W87,SD,MGM_W86);
   not MGM_G107(MGM_W88,SE);
   and MGM_G108(MGM_W89,MGM_W88,MGM_W87);
   and MGM_G109(ENABLE_NOT_CK_AND_D_AND_SD_AND_NOT_SE_AND_SI,SI,MGM_W89);
   not MGM_G110(MGM_W90,CK);
   and MGM_G111(MGM_W91,D,MGM_W90);
   and MGM_G112(MGM_W92,SD,MGM_W91);
   and MGM_G113(MGM_W93,SE,MGM_W92);
   not MGM_G114(MGM_W94,SI);
   and MGM_G115(ENABLE_NOT_CK_AND_D_AND_SD_AND_SE_AND_NOT_SI,MGM_W94,MGM_W93);
   not MGM_G116(MGM_W95,CK);
   and MGM_G117(MGM_W96,D,MGM_W95);
   and MGM_G118(MGM_W97,SD,MGM_W96);
   and MGM_G119(MGM_W98,SE,MGM_W97);
   and MGM_G120(ENABLE_NOT_CK_AND_D_AND_SD_AND_SE_AND_SI,SI,MGM_W98);
   not MGM_G121(MGM_W99,D);
   and MGM_G122(MGM_W100,MGM_W99,CK);
   and MGM_G123(MGM_W101,SD,MGM_W100);
   not MGM_G124(MGM_W102,SE);
   and MGM_G125(MGM_W103,MGM_W102,MGM_W101);
   not MGM_G126(MGM_W104,SI);
   and MGM_G127(ENABLE_CK_AND_NOT_D_AND_SD_AND_NOT_SE_AND_NOT_SI,MGM_W104,MGM_W103);
   not MGM_G128(MGM_W105,D);
   and MGM_G129(MGM_W106,MGM_W105,CK);
   and MGM_G130(MGM_W107,SD,MGM_W106);
   not MGM_G131(MGM_W108,SE);
   and MGM_G132(MGM_W109,MGM_W108,MGM_W107);
   and MGM_G133(ENABLE_CK_AND_NOT_D_AND_SD_AND_NOT_SE_AND_SI,SI,MGM_W109);
   not MGM_G134(MGM_W110,D);
   and MGM_G135(MGM_W111,MGM_W110,CK);
   and MGM_G136(MGM_W112,SD,MGM_W111);
   and MGM_G137(MGM_W113,SE,MGM_W112);
   not MGM_G138(MGM_W114,SI);
   and MGM_G139(ENABLE_CK_AND_NOT_D_AND_SD_AND_SE_AND_NOT_SI,MGM_W114,MGM_W113);
   not MGM_G140(MGM_W115,D);
   and MGM_G141(MGM_W116,MGM_W115,CK);
   and MGM_G142(MGM_W117,SD,MGM_W116);
   and MGM_G143(MGM_W118,SE,MGM_W117);
   and MGM_G144(ENABLE_CK_AND_NOT_D_AND_SD_AND_SE_AND_SI,SI,MGM_W118);
   and MGM_G145(MGM_W119,D,CK);
   and MGM_G146(MGM_W120,SD,MGM_W119);
   not MGM_G147(MGM_W121,SE);
   and MGM_G148(MGM_W122,MGM_W121,MGM_W120);
   not MGM_G149(MGM_W123,SI);
   and MGM_G150(ENABLE_CK_AND_D_AND_SD_AND_NOT_SE_AND_NOT_SI,MGM_W123,MGM_W122);
   and MGM_G151(MGM_W124,D,CK);
   and MGM_G152(MGM_W125,SD,MGM_W124);
   not MGM_G153(MGM_W126,SE);
   and MGM_G154(MGM_W127,MGM_W126,MGM_W125);
   and MGM_G155(ENABLE_CK_AND_D_AND_SD_AND_NOT_SE_AND_SI,SI,MGM_W127);
   and MGM_G156(MGM_W128,D,CK);
   and MGM_G157(MGM_W129,SD,MGM_W128);
   and MGM_G158(MGM_W130,SE,MGM_W129);
   not MGM_G159(MGM_W131,SI);
   and MGM_G160(ENABLE_CK_AND_D_AND_SD_AND_SE_AND_NOT_SI,MGM_W131,MGM_W130);
   and MGM_G161(MGM_W132,D,CK);
   and MGM_G162(MGM_W133,SD,MGM_W132);
   and MGM_G163(MGM_W134,SE,MGM_W133);
   and MGM_G164(ENABLE_CK_AND_D_AND_SD_AND_SE_AND_SI,SI,MGM_W134);
   not MGM_G165(MGM_W135,CK);
   not MGM_G166(MGM_W136,D);
   and MGM_G167(MGM_W137,MGM_W136,MGM_W135);
   not MGM_G168(MGM_W138,SE);
   and MGM_G169(MGM_W139,MGM_W138,MGM_W137);
   not MGM_G170(MGM_W140,SI);
   and MGM_G171(ENABLE_NOT_CK_AND_NOT_D_AND_NOT_SE_AND_NOT_SI,MGM_W140,MGM_W139);
   not MGM_G172(MGM_W141,CK);
   not MGM_G173(MGM_W142,D);
   and MGM_G174(MGM_W143,MGM_W142,MGM_W141);
   not MGM_G175(MGM_W144,SE);
   and MGM_G176(MGM_W145,MGM_W144,MGM_W143);
   and MGM_G177(ENABLE_NOT_CK_AND_NOT_D_AND_NOT_SE_AND_SI,SI,MGM_W145);
   not MGM_G178(MGM_W146,CK);
   not MGM_G179(MGM_W147,D);
   and MGM_G180(MGM_W148,MGM_W147,MGM_W146);
   and MGM_G181(MGM_W149,SE,MGM_W148);
   not MGM_G182(MGM_W150,SI);
   and MGM_G183(ENABLE_NOT_CK_AND_NOT_D_AND_SE_AND_NOT_SI,MGM_W150,MGM_W149);
   not MGM_G184(MGM_W151,CK);
   not MGM_G185(MGM_W152,D);
   and MGM_G186(MGM_W153,MGM_W152,MGM_W151);
   and MGM_G187(MGM_W154,SE,MGM_W153);
   and MGM_G188(ENABLE_NOT_CK_AND_NOT_D_AND_SE_AND_SI,SI,MGM_W154);
   not MGM_G189(MGM_W155,CK);
   and MGM_G190(MGM_W156,D,MGM_W155);
   not MGM_G191(MGM_W157,SE);
   and MGM_G192(MGM_W158,MGM_W157,MGM_W156);
   not MGM_G193(MGM_W159,SI);
   and MGM_G194(ENABLE_NOT_CK_AND_D_AND_NOT_SE_AND_NOT_SI,MGM_W159,MGM_W158);
   not MGM_G195(MGM_W160,CK);
   and MGM_G196(MGM_W161,D,MGM_W160);
   not MGM_G197(MGM_W162,SE);
   and MGM_G198(MGM_W163,MGM_W162,MGM_W161);
   and MGM_G199(ENABLE_NOT_CK_AND_D_AND_NOT_SE_AND_SI,SI,MGM_W163);
   not MGM_G200(MGM_W164,CK);
   and MGM_G201(MGM_W165,D,MGM_W164);
   and MGM_G202(MGM_W166,SE,MGM_W165);
   not MGM_G203(MGM_W167,SI);
   and MGM_G204(ENABLE_NOT_CK_AND_D_AND_SE_AND_NOT_SI,MGM_W167,MGM_W166);
   not MGM_G205(MGM_W168,CK);
   and MGM_G206(MGM_W169,D,MGM_W168);
   and MGM_G207(MGM_W170,SE,MGM_W169);
   and MGM_G208(ENABLE_NOT_CK_AND_D_AND_SE_AND_SI,SI,MGM_W170);
   not MGM_G209(MGM_W171,D);
   and MGM_G210(MGM_W172,MGM_W171,CK);
   not MGM_G211(MGM_W173,SE);
   and MGM_G212(MGM_W174,MGM_W173,MGM_W172);
   not MGM_G213(MGM_W175,SI);
   and MGM_G214(ENABLE_CK_AND_NOT_D_AND_NOT_SE_AND_NOT_SI,MGM_W175,MGM_W174);
   not MGM_G215(MGM_W176,D);
   and MGM_G216(MGM_W177,MGM_W176,CK);
   not MGM_G217(MGM_W178,SE);
   and MGM_G218(MGM_W179,MGM_W178,MGM_W177);
   and MGM_G219(ENABLE_CK_AND_NOT_D_AND_NOT_SE_AND_SI,SI,MGM_W179);
   not MGM_G220(MGM_W180,D);
   and MGM_G221(MGM_W181,MGM_W180,CK);
   and MGM_G222(MGM_W182,SE,MGM_W181);
   not MGM_G223(MGM_W183,SI);
   and MGM_G224(ENABLE_CK_AND_NOT_D_AND_SE_AND_NOT_SI,MGM_W183,MGM_W182);
   not MGM_G225(MGM_W184,D);
   and MGM_G226(MGM_W185,MGM_W184,CK);
   and MGM_G227(MGM_W186,SE,MGM_W185);
   and MGM_G228(ENABLE_CK_AND_NOT_D_AND_SE_AND_SI,SI,MGM_W186);
   and MGM_G229(MGM_W187,D,CK);
   not MGM_G230(MGM_W188,SE);
   and MGM_G231(MGM_W189,MGM_W188,MGM_W187);
   not MGM_G232(MGM_W190,SI);
   and MGM_G233(ENABLE_CK_AND_D_AND_NOT_SE_AND_NOT_SI,MGM_W190,MGM_W189);
   and MGM_G234(MGM_W191,D,CK);
   not MGM_G235(MGM_W192,SE);
   and MGM_G236(MGM_W193,MGM_W192,MGM_W191);
   and MGM_G237(ENABLE_CK_AND_D_AND_NOT_SE_AND_SI,SI,MGM_W193);
   and MGM_G238(MGM_W194,D,CK);
   and MGM_G239(MGM_W195,SE,MGM_W194);
   not MGM_G240(MGM_W196,SI);
   and MGM_G241(ENABLE_CK_AND_D_AND_SE_AND_NOT_SI,MGM_W196,MGM_W195);
   and MGM_G242(MGM_W197,D,CK);
   and MGM_G243(MGM_W198,SE,MGM_W197);
   and MGM_G244(ENABLE_CK_AND_D_AND_SE_AND_SI,SI,MGM_W198);
   not MGM_G245(MGM_W199,D);
   and MGM_G246(MGM_W200,RD,MGM_W199);
   not MGM_G247(MGM_W201,SE);
   and MGM_G248(MGM_W202,MGM_W201,MGM_W200);
   not MGM_G249(MGM_W203,SI);
   and MGM_G250(ENABLE_NOT_D_AND_RD_AND_NOT_SE_AND_NOT_SI,MGM_W203,MGM_W202);
   not MGM_G251(MGM_W204,D);
   and MGM_G252(MGM_W205,RD,MGM_W204);
   not MGM_G253(MGM_W206,SE);
   and MGM_G254(MGM_W207,MGM_W206,MGM_W205);
   and MGM_G255(ENABLE_NOT_D_AND_RD_AND_NOT_SE_AND_SI,SI,MGM_W207);
   not MGM_G256(MGM_W208,D);
   and MGM_G257(MGM_W209,RD,MGM_W208);
   and MGM_G258(MGM_W210,SE,MGM_W209);
   not MGM_G259(MGM_W211,SI);
   and MGM_G260(ENABLE_NOT_D_AND_RD_AND_SE_AND_NOT_SI,MGM_W211,MGM_W210);
   and MGM_G261(MGM_W212,RD,D);
   and MGM_G262(MGM_W213,SE,MGM_W212);
   not MGM_G263(MGM_W214,SI);
   and MGM_G264(ENABLE_D_AND_RD_AND_SE_AND_NOT_SI,MGM_W214,MGM_W213);
   not MGM_G265(MGM_W215,CK);
   not MGM_G266(MGM_W216,D);
   and MGM_G267(MGM_W217,MGM_W216,MGM_W215);
   and MGM_G268(MGM_W218,RD,MGM_W217);
   not MGM_G269(MGM_W219,SE);
   and MGM_G270(MGM_W220,MGM_W219,MGM_W218);
   not MGM_G271(MGM_W221,SI);
   and MGM_G272(ENABLE_NOT_CK_AND_NOT_D_AND_RD_AND_NOT_SE_AND_NOT_SI,MGM_W221,MGM_W220);
   not MGM_G273(MGM_W222,CK);
   not MGM_G274(MGM_W223,D);
   and MGM_G275(MGM_W224,MGM_W223,MGM_W222);
   and MGM_G276(MGM_W225,RD,MGM_W224);
   not MGM_G277(MGM_W226,SE);
   and MGM_G278(MGM_W227,MGM_W226,MGM_W225);
   and MGM_G279(ENABLE_NOT_CK_AND_NOT_D_AND_RD_AND_NOT_SE_AND_SI,SI,MGM_W227);
   not MGM_G280(MGM_W228,CK);
   not MGM_G281(MGM_W229,D);
   and MGM_G282(MGM_W230,MGM_W229,MGM_W228);
   and MGM_G283(MGM_W231,RD,MGM_W230);
   and MGM_G284(MGM_W232,SE,MGM_W231);
   not MGM_G285(MGM_W233,SI);
   and MGM_G286(ENABLE_NOT_CK_AND_NOT_D_AND_RD_AND_SE_AND_NOT_SI,MGM_W233,MGM_W232);
   not MGM_G287(MGM_W234,CK);
   not MGM_G288(MGM_W235,D);
   and MGM_G289(MGM_W236,MGM_W235,MGM_W234);
   and MGM_G290(MGM_W237,RD,MGM_W236);
   and MGM_G291(MGM_W238,SE,MGM_W237);
   and MGM_G292(ENABLE_NOT_CK_AND_NOT_D_AND_RD_AND_SE_AND_SI,SI,MGM_W238);
   not MGM_G293(MGM_W239,CK);
   and MGM_G294(MGM_W240,D,MGM_W239);
   and MGM_G295(MGM_W241,RD,MGM_W240);
   not MGM_G296(MGM_W242,SE);
   and MGM_G297(MGM_W243,MGM_W242,MGM_W241);
   not MGM_G298(MGM_W244,SI);
   and MGM_G299(ENABLE_NOT_CK_AND_D_AND_RD_AND_NOT_SE_AND_NOT_SI,MGM_W244,MGM_W243);
   not MGM_G300(MGM_W245,CK);
   and MGM_G301(MGM_W246,D,MGM_W245);
   and MGM_G302(MGM_W247,RD,MGM_W246);
   not MGM_G303(MGM_W248,SE);
   and MGM_G304(MGM_W249,MGM_W248,MGM_W247);
   and MGM_G305(ENABLE_NOT_CK_AND_D_AND_RD_AND_NOT_SE_AND_SI,SI,MGM_W249);
   not MGM_G306(MGM_W250,CK);
   and MGM_G307(MGM_W251,D,MGM_W250);
   and MGM_G308(MGM_W252,RD,MGM_W251);
   and MGM_G309(MGM_W253,SE,MGM_W252);
   not MGM_G310(MGM_W254,SI);
   and MGM_G311(ENABLE_NOT_CK_AND_D_AND_RD_AND_SE_AND_NOT_SI,MGM_W254,MGM_W253);
   not MGM_G312(MGM_W255,CK);
   and MGM_G313(MGM_W256,D,MGM_W255);
   and MGM_G314(MGM_W257,RD,MGM_W256);
   and MGM_G315(MGM_W258,SE,MGM_W257);
   and MGM_G316(ENABLE_NOT_CK_AND_D_AND_RD_AND_SE_AND_SI,SI,MGM_W258);
   not MGM_G317(MGM_W259,D);
   and MGM_G318(MGM_W260,MGM_W259,CK);
   and MGM_G319(MGM_W261,RD,MGM_W260);
   not MGM_G320(MGM_W262,SE);
   and MGM_G321(MGM_W263,MGM_W262,MGM_W261);
   not MGM_G322(MGM_W264,SI);
   and MGM_G323(ENABLE_CK_AND_NOT_D_AND_RD_AND_NOT_SE_AND_NOT_SI,MGM_W264,MGM_W263);
   not MGM_G324(MGM_W265,D);
   and MGM_G325(MGM_W266,MGM_W265,CK);
   and MGM_G326(MGM_W267,RD,MGM_W266);
   not MGM_G327(MGM_W268,SE);
   and MGM_G328(MGM_W269,MGM_W268,MGM_W267);
   and MGM_G329(ENABLE_CK_AND_NOT_D_AND_RD_AND_NOT_SE_AND_SI,SI,MGM_W269);
   not MGM_G330(MGM_W270,D);
   and MGM_G331(MGM_W271,MGM_W270,CK);
   and MGM_G332(MGM_W272,RD,MGM_W271);
   and MGM_G333(MGM_W273,SE,MGM_W272);
   not MGM_G334(MGM_W274,SI);
   and MGM_G335(ENABLE_CK_AND_NOT_D_AND_RD_AND_SE_AND_NOT_SI,MGM_W274,MGM_W273);
   not MGM_G336(MGM_W275,D);
   and MGM_G337(MGM_W276,MGM_W275,CK);
   and MGM_G338(MGM_W277,RD,MGM_W276);
   and MGM_G339(MGM_W278,SE,MGM_W277);
   and MGM_G340(ENABLE_CK_AND_NOT_D_AND_RD_AND_SE_AND_SI,SI,MGM_W278);
   and MGM_G341(MGM_W279,D,CK);
   and MGM_G342(MGM_W280,RD,MGM_W279);
   not MGM_G343(MGM_W281,SE);
   and MGM_G344(MGM_W282,MGM_W281,MGM_W280);
   not MGM_G345(MGM_W283,SI);
   and MGM_G346(ENABLE_CK_AND_D_AND_RD_AND_NOT_SE_AND_NOT_SI,MGM_W283,MGM_W282);
   and MGM_G347(MGM_W284,D,CK);
   and MGM_G348(MGM_W285,RD,MGM_W284);
   not MGM_G349(MGM_W286,SE);
   and MGM_G350(MGM_W287,MGM_W286,MGM_W285);
   and MGM_G351(ENABLE_CK_AND_D_AND_RD_AND_NOT_SE_AND_SI,SI,MGM_W287);
   and MGM_G352(MGM_W288,D,CK);
   and MGM_G353(MGM_W289,RD,MGM_W288);
   and MGM_G354(MGM_W290,SE,MGM_W289);
   not MGM_G355(MGM_W291,SI);
   and MGM_G356(ENABLE_CK_AND_D_AND_RD_AND_SE_AND_NOT_SI,MGM_W291,MGM_W290);
   and MGM_G357(MGM_W292,D,CK);
   and MGM_G358(MGM_W293,RD,MGM_W292);
   and MGM_G359(MGM_W294,SE,MGM_W293);
   and MGM_G360(ENABLE_CK_AND_D_AND_RD_AND_SE_AND_SI,SI,MGM_W294);
   not MGM_G361(MGM_W295,D);
   and MGM_G362(MGM_W296,RD,MGM_W295);
   and MGM_G363(MGM_W297,SD,MGM_W296);
   and MGM_G364(ENABLE_NOT_D_AND_RD_AND_SD_AND_SI,SI,MGM_W297);
   and MGM_G365(MGM_W298,RD,D);
   and MGM_G366(MGM_W299,SD,MGM_W298);
   not MGM_G367(MGM_W300,SI);
   and MGM_G368(ENABLE_D_AND_RD_AND_SD_AND_NOT_SI,MGM_W300,MGM_W299);
   not MGM_G369(MGM_W301,D);
   and MGM_G370(MGM_W302,RD,MGM_W301);
   and MGM_G371(MGM_W303,SD,MGM_W302);
   and MGM_G372(ENABLE_NOT_D_AND_RD_AND_SD_AND_SE,SE,MGM_W303);
   and MGM_G373(MGM_W304,RD,D);
   and MGM_G374(MGM_W305,SD,MGM_W304);
   and MGM_G375(ENABLE_D_AND_RD_AND_SD_AND_SE,SE,MGM_W305);
   // spec_gates_end
   // specify_block_begin
   specify

      if(D===1'b0 && SI===1'b1)
      // seq arc CK --> Q
      (posedge CK => (Q : SE))  = (1.0,1.0);
      
      if(SE===1'b0 && SI===1'b0)
      // seq arc CK --> Q
      (posedge CK => (Q : D))  = (1.0,1.0);
      
      if(D===1'b1 && SE===1'b0 && SI===1'b1 || D===1'b0 && SE===1'b1 && SI===1'b0)
      // seq arc CK --> Q
      (posedge CK => (Q : D))  = (1.0,1.0);
      
      if(D===1'b1 && SE===1'b1)
      // seq arc CK --> Q
      (posedge CK => (Q : SI))  = (1.0,1.0);
      
      ifnone
      // seq arc CK --> Q
      (posedge CK => (Q : D))  = (1.0,1.0);
      
      if(CK===1'b0 && D===1'b0 && SD===1'b0 && SE===1'b0 && SI===1'b0)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b0 && D===1'b0 && SD===1'b0 && SE===1'b0 && SI===1'b1)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b0 && D===1'b0 && SD===1'b0 && SE===1'b1 && SI===1'b0)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b0 && D===1'b0 && SD===1'b0 && SE===1'b1 && SI===1'b1)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b0 && D===1'b0 && SD===1'b1 && SE===1'b0 && SI===1'b0)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b0 && D===1'b0 && SD===1'b1 && SE===1'b0 && SI===1'b1)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b0 && D===1'b0 && SD===1'b1 && SE===1'b1 && SI===1'b0)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b0 && D===1'b0 && SD===1'b1 && SE===1'b1 && SI===1'b1)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b0 && D===1'b1 && SD===1'b0 && SE===1'b0 && SI===1'b0)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b0 && D===1'b1 && SD===1'b0 && SE===1'b0 && SI===1'b1)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b0 && D===1'b1 && SD===1'b0 && SE===1'b1 && SI===1'b0)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b0 && D===1'b1 && SD===1'b0 && SE===1'b1 && SI===1'b1)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b0 && D===1'b1 && SD===1'b1 && SE===1'b0 && SI===1'b0)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b0 && D===1'b1 && SD===1'b1 && SE===1'b0 && SI===1'b1)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b0 && D===1'b1 && SD===1'b1 && SE===1'b1 && SI===1'b0)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b0 && D===1'b1 && SD===1'b1 && SE===1'b1 && SI===1'b1)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b1 && D===1'b0 && SD===1'b0 && SE===1'b0 && SI===1'b0)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b1 && D===1'b0 && SD===1'b0 && SE===1'b0 && SI===1'b1)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b1 && D===1'b0 && SD===1'b0 && SE===1'b1 && SI===1'b0)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b1 && D===1'b0 && SD===1'b0 && SE===1'b1 && SI===1'b1)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b1 && D===1'b0 && SD===1'b1 && SE===1'b0 && SI===1'b0)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b1 && D===1'b0 && SD===1'b1 && SE===1'b0 && SI===1'b1)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b1 && D===1'b0 && SD===1'b1 && SE===1'b1 && SI===1'b0)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b1 && D===1'b0 && SD===1'b1 && SE===1'b1 && SI===1'b1)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b1 && D===1'b1 && SD===1'b0 && SE===1'b0 && SI===1'b0)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b1 && D===1'b1 && SD===1'b0 && SE===1'b0 && SI===1'b1)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b1 && D===1'b1 && SD===1'b0 && SE===1'b1 && SI===1'b0)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b1 && D===1'b1 && SD===1'b0 && SE===1'b1 && SI===1'b1)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b1 && D===1'b1 && SD===1'b1 && SE===1'b0 && SI===1'b0)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b1 && D===1'b1 && SD===1'b1 && SE===1'b0 && SI===1'b1)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b1 && D===1'b1 && SD===1'b1 && SE===1'b1 && SI===1'b0)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b1 && D===1'b1 && SD===1'b1 && SE===1'b1 && SI===1'b1)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      ifnone
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b0 && D===1'b0 && SE===1'b0 && SI===1'b0)
      // seq arc SD --> Q
      (SD => Q)  = (1.0,1.0);
      
      if(CK===1'b0 && D===1'b0 && SE===1'b0 && SI===1'b1)
      // seq arc SD --> Q
      (SD => Q)  = (1.0,1.0);
      
      if(CK===1'b0 && D===1'b0 && SE===1'b1 && SI===1'b0)
      // seq arc SD --> Q
      (SD => Q)  = (1.0,1.0);
      
      if(CK===1'b0 && D===1'b0 && SE===1'b1 && SI===1'b1)
      // seq arc SD --> Q
      (SD => Q)  = (1.0,1.0);
      
      if(CK===1'b0 && D===1'b1 && SE===1'b0 && SI===1'b0)
      // seq arc SD --> Q
      (SD => Q)  = (1.0,1.0);
      
      if(CK===1'b0 && D===1'b1 && SE===1'b0 && SI===1'b1)
      // seq arc SD --> Q
      (SD => Q)  = (1.0,1.0);
      
      if(CK===1'b0 && D===1'b1 && SE===1'b1 && SI===1'b0)
      // seq arc SD --> Q
      (SD => Q)  = (1.0,1.0);
      
      if(CK===1'b0 && D===1'b1 && SE===1'b1 && SI===1'b1)
      // seq arc SD --> Q
      (SD => Q)  = (1.0,1.0);
      
      if(CK===1'b1 && D===1'b0 && SE===1'b0 && SI===1'b0)
      // seq arc SD --> Q
      (SD => Q)  = (1.0,1.0);
      
      if(CK===1'b1 && D===1'b0 && SE===1'b0 && SI===1'b1)
      // seq arc SD --> Q
      (SD => Q)  = (1.0,1.0);
      
      if(CK===1'b1 && D===1'b0 && SE===1'b1 && SI===1'b0)
      // seq arc SD --> Q
      (SD => Q)  = (1.0,1.0);
      
      if(CK===1'b1 && D===1'b0 && SE===1'b1 && SI===1'b1)
      // seq arc SD --> Q
      (SD => Q)  = (1.0,1.0);
      
      if(CK===1'b1 && D===1'b1 && SE===1'b0 && SI===1'b0)
      // seq arc SD --> Q
      (SD => Q)  = (1.0,1.0);
      
      if(CK===1'b1 && D===1'b1 && SE===1'b0 && SI===1'b1)
      // seq arc SD --> Q
      (SD => Q)  = (1.0,1.0);
      
      if(CK===1'b1 && D===1'b1 && SE===1'b1 && SI===1'b0)
      // seq arc SD --> Q
      (SD => Q)  = (1.0,1.0);
      
      if(CK===1'b1 && D===1'b1 && SE===1'b1 && SI===1'b1)
      // seq arc SD --> Q
      (SD => Q)  = (1.0,1.0);
      
      ifnone
      // seq arc SD --> Q
      (SD => Q)  = (1.0,1.0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_RD_AND_SD_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_RD_AND_SD_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_RD_AND_SD_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_RD_AND_SD_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_RD_AND_SD_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_RD_AND_SD_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_RD_AND_SD_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_RD_AND_SD_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_RD_AND_SD_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_RD_AND_SD_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_RD_AND_SD_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_RD_AND_SD_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_RD_AND_SD_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_RD_AND_SD_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_RD_AND_SD_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_RD_AND_SD_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      // hold D-HL CK-LH
      $hold(posedge CK &&& (ENABLE_RD_AND_SD_AND_NOT_SE_AND_NOT_SI === 1'b1),
      negedge D &&& (ENABLE_RD_AND_SD_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold D-LH CK-LH
      $hold(posedge CK &&& (ENABLE_RD_AND_SD_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge D &&& (ENABLE_RD_AND_SD_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup D-HL CK-LH
      $setup(negedge D &&& (ENABLE_RD_AND_SD_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_RD_AND_SD_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup D-LH CK-LH
      $setup(posedge D &&& (ENABLE_RD_AND_SD_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_RD_AND_SD_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold D-HL CK-LH
      $hold(posedge CK &&& (ENABLE_RD_AND_SD_AND_NOT_SE_AND_SI === 1'b1),
      negedge D &&& (ENABLE_RD_AND_SD_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // hold D-LH CK-LH
      $hold(posedge CK &&& (ENABLE_RD_AND_SD_AND_NOT_SE_AND_SI === 1'b1),
      posedge D &&& (ENABLE_RD_AND_SD_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // setup D-HL CK-LH
      $setup(negedge D &&& (ENABLE_RD_AND_SD_AND_NOT_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_RD_AND_SD_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // setup D-LH CK-LH
      $setup(posedge D &&& (ENABLE_RD_AND_SD_AND_NOT_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_RD_AND_SD_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // recovery RD-LH CK-LH
      $recovery(posedge RD &&& (ENABLE_NOT_D_AND_SD_AND_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_SD_AND_SE_AND_SI === 1'b1),1.0);
      
      // removal RD-LH CK-LH
      $removal(posedge RD &&& (ENABLE_NOT_D_AND_SD_AND_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_SD_AND_SE_AND_SI === 1'b1),1.0);
      
      // recovery RD-LH CK-LH
      $recovery(posedge RD &&& (ENABLE_D_AND_SD_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_D_AND_SD_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // removal RD-LH CK-LH
      $removal(posedge RD &&& (ENABLE_D_AND_SD_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_D_AND_SD_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // recovery RD-LH CK-LH
      $recovery(posedge RD &&& (ENABLE_D_AND_SD_AND_NOT_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_D_AND_SD_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // removal RD-LH CK-LH
      $removal(posedge RD &&& (ENABLE_D_AND_SD_AND_NOT_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_D_AND_SD_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // recovery RD-LH CK-LH
      $recovery(posedge RD &&& (ENABLE_D_AND_SD_AND_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_D_AND_SD_AND_SE_AND_SI === 1'b1),1.0);
      
      // removal RD-LH CK-LH
      $removal(posedge RD &&& (ENABLE_D_AND_SD_AND_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_D_AND_SD_AND_SE_AND_SI === 1'b1),1.0);
      
      $width(negedge RD &&& (ENABLE_NOT_CK_AND_NOT_D_AND_SD_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge RD &&& (ENABLE_NOT_CK_AND_NOT_D_AND_SD_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge RD &&& (ENABLE_NOT_CK_AND_NOT_D_AND_SD_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge RD &&& (ENABLE_NOT_CK_AND_NOT_D_AND_SD_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge RD &&& (ENABLE_NOT_CK_AND_D_AND_SD_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge RD &&& (ENABLE_NOT_CK_AND_D_AND_SD_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge RD &&& (ENABLE_NOT_CK_AND_D_AND_SD_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge RD &&& (ENABLE_NOT_CK_AND_D_AND_SD_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge RD &&& (ENABLE_CK_AND_NOT_D_AND_SD_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge RD &&& (ENABLE_CK_AND_NOT_D_AND_SD_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge RD &&& (ENABLE_CK_AND_NOT_D_AND_SD_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge RD &&& (ENABLE_CK_AND_NOT_D_AND_SD_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge RD &&& (ENABLE_CK_AND_D_AND_SD_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge RD &&& (ENABLE_CK_AND_D_AND_SD_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge RD &&& (ENABLE_CK_AND_D_AND_SD_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge RD &&& (ENABLE_CK_AND_D_AND_SD_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      // hold RD-LH SD-LH
      $hold(posedge SD &&& (ENABLE_NOT_CK_AND_NOT_D_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge RD &&& (ENABLE_NOT_CK_AND_NOT_D_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup RD-LH SD-LH
      $setup(posedge RD &&& (ENABLE_NOT_CK_AND_NOT_D_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge SD &&& (ENABLE_NOT_CK_AND_NOT_D_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold RD-LH SD-LH
      $hold(posedge SD &&& (ENABLE_NOT_CK_AND_NOT_D_AND_NOT_SE_AND_SI === 1'b1),
      posedge RD &&& (ENABLE_NOT_CK_AND_NOT_D_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // setup RD-LH SD-LH
      $setup(posedge RD &&& (ENABLE_NOT_CK_AND_NOT_D_AND_NOT_SE_AND_SI === 1'b1),
      posedge SD &&& (ENABLE_NOT_CK_AND_NOT_D_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // hold RD-LH SD-LH
      $hold(posedge SD &&& (ENABLE_NOT_CK_AND_NOT_D_AND_SE_AND_NOT_SI === 1'b1),
      posedge RD &&& (ENABLE_NOT_CK_AND_NOT_D_AND_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup RD-LH SD-LH
      $setup(posedge RD &&& (ENABLE_NOT_CK_AND_NOT_D_AND_SE_AND_NOT_SI === 1'b1),
      posedge SD &&& (ENABLE_NOT_CK_AND_NOT_D_AND_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold RD-LH SD-LH
      $hold(posedge SD &&& (ENABLE_NOT_CK_AND_NOT_D_AND_SE_AND_SI === 1'b1),
      posedge RD &&& (ENABLE_NOT_CK_AND_NOT_D_AND_SE_AND_SI === 1'b1),1.0);
      
      // setup RD-LH SD-LH
      $setup(posedge RD &&& (ENABLE_NOT_CK_AND_NOT_D_AND_SE_AND_SI === 1'b1),
      posedge SD &&& (ENABLE_NOT_CK_AND_NOT_D_AND_SE_AND_SI === 1'b1),1.0);
      
      // hold RD-LH SD-LH
      $hold(posedge SD &&& (ENABLE_NOT_CK_AND_D_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge RD &&& (ENABLE_NOT_CK_AND_D_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup RD-LH SD-LH
      $setup(posedge RD &&& (ENABLE_NOT_CK_AND_D_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge SD &&& (ENABLE_NOT_CK_AND_D_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold RD-LH SD-LH
      $hold(posedge SD &&& (ENABLE_NOT_CK_AND_D_AND_NOT_SE_AND_SI === 1'b1),
      posedge RD &&& (ENABLE_NOT_CK_AND_D_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // setup RD-LH SD-LH
      $setup(posedge RD &&& (ENABLE_NOT_CK_AND_D_AND_NOT_SE_AND_SI === 1'b1),
      posedge SD &&& (ENABLE_NOT_CK_AND_D_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // hold RD-LH SD-LH
      $hold(posedge SD &&& (ENABLE_NOT_CK_AND_D_AND_SE_AND_NOT_SI === 1'b1),
      posedge RD &&& (ENABLE_NOT_CK_AND_D_AND_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup RD-LH SD-LH
      $setup(posedge RD &&& (ENABLE_NOT_CK_AND_D_AND_SE_AND_NOT_SI === 1'b1),
      posedge SD &&& (ENABLE_NOT_CK_AND_D_AND_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold RD-LH SD-LH
      $hold(posedge SD &&& (ENABLE_NOT_CK_AND_D_AND_SE_AND_SI === 1'b1),
      posedge RD &&& (ENABLE_NOT_CK_AND_D_AND_SE_AND_SI === 1'b1),1.0);
      
      // setup RD-LH SD-LH
      $setup(posedge RD &&& (ENABLE_NOT_CK_AND_D_AND_SE_AND_SI === 1'b1),
      posedge SD &&& (ENABLE_NOT_CK_AND_D_AND_SE_AND_SI === 1'b1),1.0);
      
      // hold RD-LH SD-LH
      $hold(posedge SD &&& (ENABLE_CK_AND_NOT_D_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge RD &&& (ENABLE_CK_AND_NOT_D_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup RD-LH SD-LH
      $setup(posedge RD &&& (ENABLE_CK_AND_NOT_D_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge SD &&& (ENABLE_CK_AND_NOT_D_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold RD-LH SD-LH
      $hold(posedge SD &&& (ENABLE_CK_AND_NOT_D_AND_NOT_SE_AND_SI === 1'b1),
      posedge RD &&& (ENABLE_CK_AND_NOT_D_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // setup RD-LH SD-LH
      $setup(posedge RD &&& (ENABLE_CK_AND_NOT_D_AND_NOT_SE_AND_SI === 1'b1),
      posedge SD &&& (ENABLE_CK_AND_NOT_D_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // hold RD-LH SD-LH
      $hold(posedge SD &&& (ENABLE_CK_AND_NOT_D_AND_SE_AND_NOT_SI === 1'b1),
      posedge RD &&& (ENABLE_CK_AND_NOT_D_AND_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup RD-LH SD-LH
      $setup(posedge RD &&& (ENABLE_CK_AND_NOT_D_AND_SE_AND_NOT_SI === 1'b1),
      posedge SD &&& (ENABLE_CK_AND_NOT_D_AND_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold RD-LH SD-LH
      $hold(posedge SD &&& (ENABLE_CK_AND_NOT_D_AND_SE_AND_SI === 1'b1),
      posedge RD &&& (ENABLE_CK_AND_NOT_D_AND_SE_AND_SI === 1'b1),1.0);
      
      // setup RD-LH SD-LH
      $setup(posedge RD &&& (ENABLE_CK_AND_NOT_D_AND_SE_AND_SI === 1'b1),
      posedge SD &&& (ENABLE_CK_AND_NOT_D_AND_SE_AND_SI === 1'b1),1.0);
      
      // hold RD-LH SD-LH
      $hold(posedge SD &&& (ENABLE_CK_AND_D_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge RD &&& (ENABLE_CK_AND_D_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup RD-LH SD-LH
      $setup(posedge RD &&& (ENABLE_CK_AND_D_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge SD &&& (ENABLE_CK_AND_D_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold RD-LH SD-LH
      $hold(posedge SD &&& (ENABLE_CK_AND_D_AND_NOT_SE_AND_SI === 1'b1),
      posedge RD &&& (ENABLE_CK_AND_D_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // setup RD-LH SD-LH
      $setup(posedge RD &&& (ENABLE_CK_AND_D_AND_NOT_SE_AND_SI === 1'b1),
      posedge SD &&& (ENABLE_CK_AND_D_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // hold RD-LH SD-LH
      $hold(posedge SD &&& (ENABLE_CK_AND_D_AND_SE_AND_NOT_SI === 1'b1),
      posedge RD &&& (ENABLE_CK_AND_D_AND_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup RD-LH SD-LH
      $setup(posedge RD &&& (ENABLE_CK_AND_D_AND_SE_AND_NOT_SI === 1'b1),
      posedge SD &&& (ENABLE_CK_AND_D_AND_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold RD-LH SD-LH
      $hold(posedge SD &&& (ENABLE_CK_AND_D_AND_SE_AND_SI === 1'b1),
      posedge RD &&& (ENABLE_CK_AND_D_AND_SE_AND_SI === 1'b1),1.0);
      
      // setup RD-LH SD-LH
      $setup(posedge RD &&& (ENABLE_CK_AND_D_AND_SE_AND_SI === 1'b1),
      posedge SD &&& (ENABLE_CK_AND_D_AND_SE_AND_SI === 1'b1),1.0);
      
      // recovery SD-LH CK-LH
      $recovery(posedge SD &&& (ENABLE_NOT_D_AND_RD_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_RD_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // removal SD-LH CK-LH
      $removal(posedge SD &&& (ENABLE_NOT_D_AND_RD_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_RD_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // recovery SD-LH CK-LH
      $recovery(posedge SD &&& (ENABLE_NOT_D_AND_RD_AND_NOT_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_RD_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // removal SD-LH CK-LH
      $removal(posedge SD &&& (ENABLE_NOT_D_AND_RD_AND_NOT_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_RD_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // recovery SD-LH CK-LH
      $recovery(posedge SD &&& (ENABLE_NOT_D_AND_RD_AND_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_RD_AND_SE_AND_NOT_SI === 1'b1),1.0);
      
      // removal SD-LH CK-LH
      $removal(posedge SD &&& (ENABLE_NOT_D_AND_RD_AND_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_RD_AND_SE_AND_NOT_SI === 1'b1),1.0);
      
      // recovery SD-LH CK-LH
      $recovery(posedge SD &&& (ENABLE_D_AND_RD_AND_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_D_AND_RD_AND_SE_AND_NOT_SI === 1'b1),1.0);
      
      // removal SD-LH CK-LH
      $removal(posedge SD &&& (ENABLE_D_AND_RD_AND_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_D_AND_RD_AND_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold SD-LH RD-LH
      $hold(posedge RD &&& (ENABLE_NOT_CK_AND_NOT_D_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge SD &&& (ENABLE_NOT_CK_AND_NOT_D_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup SD-LH RD-LH
      $setup(posedge SD &&& (ENABLE_NOT_CK_AND_NOT_D_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge RD &&& (ENABLE_NOT_CK_AND_NOT_D_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold SD-LH RD-LH
      $hold(posedge RD &&& (ENABLE_NOT_CK_AND_NOT_D_AND_NOT_SE_AND_SI === 1'b1),
      posedge SD &&& (ENABLE_NOT_CK_AND_NOT_D_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // setup SD-LH RD-LH
      $setup(posedge SD &&& (ENABLE_NOT_CK_AND_NOT_D_AND_NOT_SE_AND_SI === 1'b1),
      posedge RD &&& (ENABLE_NOT_CK_AND_NOT_D_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // hold SD-LH RD-LH
      $hold(posedge RD &&& (ENABLE_NOT_CK_AND_NOT_D_AND_SE_AND_NOT_SI === 1'b1),
      posedge SD &&& (ENABLE_NOT_CK_AND_NOT_D_AND_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup SD-LH RD-LH
      $setup(posedge SD &&& (ENABLE_NOT_CK_AND_NOT_D_AND_SE_AND_NOT_SI === 1'b1),
      posedge RD &&& (ENABLE_NOT_CK_AND_NOT_D_AND_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold SD-LH RD-LH
      $hold(posedge RD &&& (ENABLE_NOT_CK_AND_NOT_D_AND_SE_AND_SI === 1'b1),
      posedge SD &&& (ENABLE_NOT_CK_AND_NOT_D_AND_SE_AND_SI === 1'b1),1.0);
      
      // setup SD-LH RD-LH
      $setup(posedge SD &&& (ENABLE_NOT_CK_AND_NOT_D_AND_SE_AND_SI === 1'b1),
      posedge RD &&& (ENABLE_NOT_CK_AND_NOT_D_AND_SE_AND_SI === 1'b1),1.0);
      
      // hold SD-LH RD-LH
      $hold(posedge RD &&& (ENABLE_NOT_CK_AND_D_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge SD &&& (ENABLE_NOT_CK_AND_D_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup SD-LH RD-LH
      $setup(posedge SD &&& (ENABLE_NOT_CK_AND_D_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge RD &&& (ENABLE_NOT_CK_AND_D_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold SD-LH RD-LH
      $hold(posedge RD &&& (ENABLE_NOT_CK_AND_D_AND_NOT_SE_AND_SI === 1'b1),
      posedge SD &&& (ENABLE_NOT_CK_AND_D_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // setup SD-LH RD-LH
      $setup(posedge SD &&& (ENABLE_NOT_CK_AND_D_AND_NOT_SE_AND_SI === 1'b1),
      posedge RD &&& (ENABLE_NOT_CK_AND_D_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // hold SD-LH RD-LH
      $hold(posedge RD &&& (ENABLE_NOT_CK_AND_D_AND_SE_AND_NOT_SI === 1'b1),
      posedge SD &&& (ENABLE_NOT_CK_AND_D_AND_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup SD-LH RD-LH
      $setup(posedge SD &&& (ENABLE_NOT_CK_AND_D_AND_SE_AND_NOT_SI === 1'b1),
      posedge RD &&& (ENABLE_NOT_CK_AND_D_AND_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold SD-LH RD-LH
      $hold(posedge RD &&& (ENABLE_NOT_CK_AND_D_AND_SE_AND_SI === 1'b1),
      posedge SD &&& (ENABLE_NOT_CK_AND_D_AND_SE_AND_SI === 1'b1),1.0);
      
      // setup SD-LH RD-LH
      $setup(posedge SD &&& (ENABLE_NOT_CK_AND_D_AND_SE_AND_SI === 1'b1),
      posedge RD &&& (ENABLE_NOT_CK_AND_D_AND_SE_AND_SI === 1'b1),1.0);
      
      // hold SD-LH RD-LH
      $hold(posedge RD &&& (ENABLE_CK_AND_NOT_D_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge SD &&& (ENABLE_CK_AND_NOT_D_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup SD-LH RD-LH
      $setup(posedge SD &&& (ENABLE_CK_AND_NOT_D_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge RD &&& (ENABLE_CK_AND_NOT_D_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold SD-LH RD-LH
      $hold(posedge RD &&& (ENABLE_CK_AND_NOT_D_AND_NOT_SE_AND_SI === 1'b1),
      posedge SD &&& (ENABLE_CK_AND_NOT_D_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // setup SD-LH RD-LH
      $setup(posedge SD &&& (ENABLE_CK_AND_NOT_D_AND_NOT_SE_AND_SI === 1'b1),
      posedge RD &&& (ENABLE_CK_AND_NOT_D_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // hold SD-LH RD-LH
      $hold(posedge RD &&& (ENABLE_CK_AND_NOT_D_AND_SE_AND_NOT_SI === 1'b1),
      posedge SD &&& (ENABLE_CK_AND_NOT_D_AND_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup SD-LH RD-LH
      $setup(posedge SD &&& (ENABLE_CK_AND_NOT_D_AND_SE_AND_NOT_SI === 1'b1),
      posedge RD &&& (ENABLE_CK_AND_NOT_D_AND_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold SD-LH RD-LH
      $hold(posedge RD &&& (ENABLE_CK_AND_NOT_D_AND_SE_AND_SI === 1'b1),
      posedge SD &&& (ENABLE_CK_AND_NOT_D_AND_SE_AND_SI === 1'b1),1.0);
      
      // setup SD-LH RD-LH
      $setup(posedge SD &&& (ENABLE_CK_AND_NOT_D_AND_SE_AND_SI === 1'b1),
      posedge RD &&& (ENABLE_CK_AND_NOT_D_AND_SE_AND_SI === 1'b1),1.0);
      
      // hold SD-LH RD-LH
      $hold(posedge RD &&& (ENABLE_CK_AND_D_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge SD &&& (ENABLE_CK_AND_D_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup SD-LH RD-LH
      $setup(posedge SD &&& (ENABLE_CK_AND_D_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge RD &&& (ENABLE_CK_AND_D_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold SD-LH RD-LH
      $hold(posedge RD &&& (ENABLE_CK_AND_D_AND_NOT_SE_AND_SI === 1'b1),
      posedge SD &&& (ENABLE_CK_AND_D_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // setup SD-LH RD-LH
      $setup(posedge SD &&& (ENABLE_CK_AND_D_AND_NOT_SE_AND_SI === 1'b1),
      posedge RD &&& (ENABLE_CK_AND_D_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // hold SD-LH RD-LH
      $hold(posedge RD &&& (ENABLE_CK_AND_D_AND_SE_AND_NOT_SI === 1'b1),
      posedge SD &&& (ENABLE_CK_AND_D_AND_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup SD-LH RD-LH
      $setup(posedge SD &&& (ENABLE_CK_AND_D_AND_SE_AND_NOT_SI === 1'b1),
      posedge RD &&& (ENABLE_CK_AND_D_AND_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold SD-LH RD-LH
      $hold(posedge RD &&& (ENABLE_CK_AND_D_AND_SE_AND_SI === 1'b1),
      posedge SD &&& (ENABLE_CK_AND_D_AND_SE_AND_SI === 1'b1),1.0);
      
      // setup SD-LH RD-LH
      $setup(posedge SD &&& (ENABLE_CK_AND_D_AND_SE_AND_SI === 1'b1),
      posedge RD &&& (ENABLE_CK_AND_D_AND_SE_AND_SI === 1'b1),1.0);
      
      $width(negedge SD &&& (ENABLE_NOT_CK_AND_NOT_D_AND_RD_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge SD &&& (ENABLE_NOT_CK_AND_NOT_D_AND_RD_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge SD &&& (ENABLE_NOT_CK_AND_NOT_D_AND_RD_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge SD &&& (ENABLE_NOT_CK_AND_NOT_D_AND_RD_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge SD &&& (ENABLE_NOT_CK_AND_D_AND_RD_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge SD &&& (ENABLE_NOT_CK_AND_D_AND_RD_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge SD &&& (ENABLE_NOT_CK_AND_D_AND_RD_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge SD &&& (ENABLE_NOT_CK_AND_D_AND_RD_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge SD &&& (ENABLE_CK_AND_NOT_D_AND_RD_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge SD &&& (ENABLE_CK_AND_NOT_D_AND_RD_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge SD &&& (ENABLE_CK_AND_NOT_D_AND_RD_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge SD &&& (ENABLE_CK_AND_NOT_D_AND_RD_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge SD &&& (ENABLE_CK_AND_D_AND_RD_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge SD &&& (ENABLE_CK_AND_D_AND_RD_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge SD &&& (ENABLE_CK_AND_D_AND_RD_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge SD &&& (ENABLE_CK_AND_D_AND_RD_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      // hold SE-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D_AND_RD_AND_SD_AND_SI === 1'b1),
      negedge SE &&& (ENABLE_NOT_D_AND_RD_AND_SD_AND_SI === 1'b1),1.0);
      
      // hold SE-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D_AND_RD_AND_SD_AND_SI === 1'b1),
      posedge SE &&& (ENABLE_NOT_D_AND_RD_AND_SD_AND_SI === 1'b1),1.0);
      
      // setup SE-HL CK-LH
      $setup(negedge SE &&& (ENABLE_NOT_D_AND_RD_AND_SD_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_RD_AND_SD_AND_SI === 1'b1),1.0);
      
      // setup SE-LH CK-LH
      $setup(posedge SE &&& (ENABLE_NOT_D_AND_RD_AND_SD_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_RD_AND_SD_AND_SI === 1'b1),1.0);
      
      // hold SE-HL CK-LH
      $hold(posedge CK &&& (ENABLE_D_AND_RD_AND_SD_AND_NOT_SI === 1'b1),
      negedge SE &&& (ENABLE_D_AND_RD_AND_SD_AND_NOT_SI === 1'b1),1.0);
      
      // hold SE-LH CK-LH
      $hold(posedge CK &&& (ENABLE_D_AND_RD_AND_SD_AND_NOT_SI === 1'b1),
      posedge SE &&& (ENABLE_D_AND_RD_AND_SD_AND_NOT_SI === 1'b1),1.0);
      
      // setup SE-HL CK-LH
      $setup(negedge SE &&& (ENABLE_D_AND_RD_AND_SD_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_D_AND_RD_AND_SD_AND_NOT_SI === 1'b1),1.0);
      
      // setup SE-LH CK-LH
      $setup(posedge SE &&& (ENABLE_D_AND_RD_AND_SD_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_D_AND_RD_AND_SD_AND_NOT_SI === 1'b1),1.0);
      
      // hold SI-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D_AND_RD_AND_SD_AND_SE === 1'b1),
      negedge SI &&& (ENABLE_NOT_D_AND_RD_AND_SD_AND_SE === 1'b1),1.0);
      
      // hold SI-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D_AND_RD_AND_SD_AND_SE === 1'b1),
      posedge SI &&& (ENABLE_NOT_D_AND_RD_AND_SD_AND_SE === 1'b1),1.0);
      
      // setup SI-HL CK-LH
      $setup(negedge SI &&& (ENABLE_NOT_D_AND_RD_AND_SD_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_RD_AND_SD_AND_SE === 1'b1),1.0);
      
      // setup SI-LH CK-LH
      $setup(posedge SI &&& (ENABLE_NOT_D_AND_RD_AND_SD_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_RD_AND_SD_AND_SE === 1'b1),1.0);
      
      // hold SI-HL CK-LH
      $hold(posedge CK &&& (ENABLE_D_AND_RD_AND_SD_AND_SE === 1'b1),
      negedge SI &&& (ENABLE_D_AND_RD_AND_SD_AND_SE === 1'b1),1.0);
      
      // hold SI-LH CK-LH
      $hold(posedge CK &&& (ENABLE_D_AND_RD_AND_SD_AND_SE === 1'b1),
      posedge SI &&& (ENABLE_D_AND_RD_AND_SD_AND_SE === 1'b1),1.0);
      
      // setup SI-HL CK-LH
      $setup(negedge SI &&& (ENABLE_D_AND_RD_AND_SD_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_D_AND_RD_AND_SD_AND_SE === 1'b1),1.0);
      
      // setup SI-LH CK-LH
      $setup(posedge SI &&& (ENABLE_D_AND_RD_AND_SD_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_D_AND_RD_AND_SD_AND_SE === 1'b1),1.0);
      
      // mpw CK_lh 
      $width(posedge CK,1.0,0);
      
      // mpw CK_hl 
      $width(negedge CK,1.0,0);
      
      // mpw RD_hl 
      $width(negedge RD,1.0,0);
      
      // mpw SD_hl 
      $width(negedge SD,1.0,0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_FSDPRBSBQ_V2LP_1( Q, CK, D, SI, SE, RD, SD );
input CK, D, RD, SD, SE, SI;
output Q;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_FSDPRBSBQ_V2LP_1_func SAEDRVT14_FSDPRBSBQ_V2LP_1_behav_inst(.Q(Q),.CK(CK),.D(D),.SI(SI),.SE(SE),.RD(RD),.SD(SD));
`else
   SAEDRVT14_FSDPRBSBQ_V2LP_1_func SAEDRVT14_FSDPRBSBQ_V2LP_1_inst(.Q(Q),.CK(CK),.D(D),.SI(SI),.SE(SE),.RD(RD),.SD(SD));
   // spec_gates_begin
   not MGM_G0(MGM_W0,D);
   and MGM_G1(MGM_W1,RD,MGM_W0);
   and MGM_G2(MGM_W2,SD,MGM_W1);
   not MGM_G3(MGM_W3,SE);
   and MGM_G4(MGM_W4,MGM_W3,MGM_W2);
   not MGM_G5(MGM_W5,SI);
   and MGM_G6(ENABLE_NOT_D_AND_RD_AND_SD_AND_NOT_SE_AND_NOT_SI,MGM_W5,MGM_W4);
   not MGM_G7(MGM_W6,D);
   and MGM_G8(MGM_W7,RD,MGM_W6);
   and MGM_G9(MGM_W8,SD,MGM_W7);
   not MGM_G10(MGM_W9,SE);
   and MGM_G11(MGM_W10,MGM_W9,MGM_W8);
   and MGM_G12(ENABLE_NOT_D_AND_RD_AND_SD_AND_NOT_SE_AND_SI,SI,MGM_W10);
   not MGM_G13(MGM_W11,D);
   and MGM_G14(MGM_W12,RD,MGM_W11);
   and MGM_G15(MGM_W13,SD,MGM_W12);
   and MGM_G16(MGM_W14,SE,MGM_W13);
   not MGM_G17(MGM_W15,SI);
   and MGM_G18(ENABLE_NOT_D_AND_RD_AND_SD_AND_SE_AND_NOT_SI,MGM_W15,MGM_W14);
   not MGM_G19(MGM_W16,D);
   and MGM_G20(MGM_W17,RD,MGM_W16);
   and MGM_G21(MGM_W18,SD,MGM_W17);
   and MGM_G22(MGM_W19,SE,MGM_W18);
   and MGM_G23(ENABLE_NOT_D_AND_RD_AND_SD_AND_SE_AND_SI,SI,MGM_W19);
   and MGM_G24(MGM_W20,RD,D);
   and MGM_G25(MGM_W21,SD,MGM_W20);
   not MGM_G26(MGM_W22,SE);
   and MGM_G27(MGM_W23,MGM_W22,MGM_W21);
   not MGM_G28(MGM_W24,SI);
   and MGM_G29(ENABLE_D_AND_RD_AND_SD_AND_NOT_SE_AND_NOT_SI,MGM_W24,MGM_W23);
   and MGM_G30(MGM_W25,RD,D);
   and MGM_G31(MGM_W26,SD,MGM_W25);
   not MGM_G32(MGM_W27,SE);
   and MGM_G33(MGM_W28,MGM_W27,MGM_W26);
   and MGM_G34(ENABLE_D_AND_RD_AND_SD_AND_NOT_SE_AND_SI,SI,MGM_W28);
   and MGM_G35(MGM_W29,RD,D);
   and MGM_G36(MGM_W30,SD,MGM_W29);
   and MGM_G37(MGM_W31,SE,MGM_W30);
   not MGM_G38(MGM_W32,SI);
   and MGM_G39(ENABLE_D_AND_RD_AND_SD_AND_SE_AND_NOT_SI,MGM_W32,MGM_W31);
   and MGM_G40(MGM_W33,RD,D);
   and MGM_G41(MGM_W34,SD,MGM_W33);
   and MGM_G42(MGM_W35,SE,MGM_W34);
   and MGM_G43(ENABLE_D_AND_RD_AND_SD_AND_SE_AND_SI,SI,MGM_W35);
   and MGM_G44(MGM_W36,SD,RD);
   not MGM_G45(MGM_W37,SE);
   and MGM_G46(MGM_W38,MGM_W37,MGM_W36);
   not MGM_G47(MGM_W39,SI);
   and MGM_G48(ENABLE_RD_AND_SD_AND_NOT_SE_AND_NOT_SI,MGM_W39,MGM_W38);
   and MGM_G49(MGM_W40,SD,RD);
   not MGM_G50(MGM_W41,SE);
   and MGM_G51(MGM_W42,MGM_W41,MGM_W40);
   and MGM_G52(ENABLE_RD_AND_SD_AND_NOT_SE_AND_SI,SI,MGM_W42);
   not MGM_G53(MGM_W43,D);
   and MGM_G54(MGM_W44,SD,MGM_W43);
   and MGM_G55(MGM_W45,SE,MGM_W44);
   and MGM_G56(ENABLE_NOT_D_AND_SD_AND_SE_AND_SI,SI,MGM_W45);
   and MGM_G57(MGM_W46,SD,D);
   not MGM_G58(MGM_W47,SE);
   and MGM_G59(MGM_W48,MGM_W47,MGM_W46);
   not MGM_G60(MGM_W49,SI);
   and MGM_G61(ENABLE_D_AND_SD_AND_NOT_SE_AND_NOT_SI,MGM_W49,MGM_W48);
   and MGM_G62(MGM_W50,SD,D);
   not MGM_G63(MGM_W51,SE);
   and MGM_G64(MGM_W52,MGM_W51,MGM_W50);
   and MGM_G65(ENABLE_D_AND_SD_AND_NOT_SE_AND_SI,SI,MGM_W52);
   and MGM_G66(MGM_W53,SD,D);
   and MGM_G67(MGM_W54,SE,MGM_W53);
   and MGM_G68(ENABLE_D_AND_SD_AND_SE_AND_SI,SI,MGM_W54);
   not MGM_G69(MGM_W55,CK);
   not MGM_G70(MGM_W56,D);
   and MGM_G71(MGM_W57,MGM_W56,MGM_W55);
   and MGM_G72(MGM_W58,SD,MGM_W57);
   not MGM_G73(MGM_W59,SE);
   and MGM_G74(MGM_W60,MGM_W59,MGM_W58);
   not MGM_G75(MGM_W61,SI);
   and MGM_G76(ENABLE_NOT_CK_AND_NOT_D_AND_SD_AND_NOT_SE_AND_NOT_SI,MGM_W61,MGM_W60);
   not MGM_G77(MGM_W62,CK);
   not MGM_G78(MGM_W63,D);
   and MGM_G79(MGM_W64,MGM_W63,MGM_W62);
   and MGM_G80(MGM_W65,SD,MGM_W64);
   not MGM_G81(MGM_W66,SE);
   and MGM_G82(MGM_W67,MGM_W66,MGM_W65);
   and MGM_G83(ENABLE_NOT_CK_AND_NOT_D_AND_SD_AND_NOT_SE_AND_SI,SI,MGM_W67);
   not MGM_G84(MGM_W68,CK);
   not MGM_G85(MGM_W69,D);
   and MGM_G86(MGM_W70,MGM_W69,MGM_W68);
   and MGM_G87(MGM_W71,SD,MGM_W70);
   and MGM_G88(MGM_W72,SE,MGM_W71);
   not MGM_G89(MGM_W73,SI);
   and MGM_G90(ENABLE_NOT_CK_AND_NOT_D_AND_SD_AND_SE_AND_NOT_SI,MGM_W73,MGM_W72);
   not MGM_G91(MGM_W74,CK);
   not MGM_G92(MGM_W75,D);
   and MGM_G93(MGM_W76,MGM_W75,MGM_W74);
   and MGM_G94(MGM_W77,SD,MGM_W76);
   and MGM_G95(MGM_W78,SE,MGM_W77);
   and MGM_G96(ENABLE_NOT_CK_AND_NOT_D_AND_SD_AND_SE_AND_SI,SI,MGM_W78);
   not MGM_G97(MGM_W79,CK);
   and MGM_G98(MGM_W80,D,MGM_W79);
   and MGM_G99(MGM_W81,SD,MGM_W80);
   not MGM_G100(MGM_W82,SE);
   and MGM_G101(MGM_W83,MGM_W82,MGM_W81);
   not MGM_G102(MGM_W84,SI);
   and MGM_G103(ENABLE_NOT_CK_AND_D_AND_SD_AND_NOT_SE_AND_NOT_SI,MGM_W84,MGM_W83);
   not MGM_G104(MGM_W85,CK);
   and MGM_G105(MGM_W86,D,MGM_W85);
   and MGM_G106(MGM_W87,SD,MGM_W86);
   not MGM_G107(MGM_W88,SE);
   and MGM_G108(MGM_W89,MGM_W88,MGM_W87);
   and MGM_G109(ENABLE_NOT_CK_AND_D_AND_SD_AND_NOT_SE_AND_SI,SI,MGM_W89);
   not MGM_G110(MGM_W90,CK);
   and MGM_G111(MGM_W91,D,MGM_W90);
   and MGM_G112(MGM_W92,SD,MGM_W91);
   and MGM_G113(MGM_W93,SE,MGM_W92);
   not MGM_G114(MGM_W94,SI);
   and MGM_G115(ENABLE_NOT_CK_AND_D_AND_SD_AND_SE_AND_NOT_SI,MGM_W94,MGM_W93);
   not MGM_G116(MGM_W95,CK);
   and MGM_G117(MGM_W96,D,MGM_W95);
   and MGM_G118(MGM_W97,SD,MGM_W96);
   and MGM_G119(MGM_W98,SE,MGM_W97);
   and MGM_G120(ENABLE_NOT_CK_AND_D_AND_SD_AND_SE_AND_SI,SI,MGM_W98);
   not MGM_G121(MGM_W99,D);
   and MGM_G122(MGM_W100,MGM_W99,CK);
   and MGM_G123(MGM_W101,SD,MGM_W100);
   not MGM_G124(MGM_W102,SE);
   and MGM_G125(MGM_W103,MGM_W102,MGM_W101);
   not MGM_G126(MGM_W104,SI);
   and MGM_G127(ENABLE_CK_AND_NOT_D_AND_SD_AND_NOT_SE_AND_NOT_SI,MGM_W104,MGM_W103);
   not MGM_G128(MGM_W105,D);
   and MGM_G129(MGM_W106,MGM_W105,CK);
   and MGM_G130(MGM_W107,SD,MGM_W106);
   not MGM_G131(MGM_W108,SE);
   and MGM_G132(MGM_W109,MGM_W108,MGM_W107);
   and MGM_G133(ENABLE_CK_AND_NOT_D_AND_SD_AND_NOT_SE_AND_SI,SI,MGM_W109);
   not MGM_G134(MGM_W110,D);
   and MGM_G135(MGM_W111,MGM_W110,CK);
   and MGM_G136(MGM_W112,SD,MGM_W111);
   and MGM_G137(MGM_W113,SE,MGM_W112);
   not MGM_G138(MGM_W114,SI);
   and MGM_G139(ENABLE_CK_AND_NOT_D_AND_SD_AND_SE_AND_NOT_SI,MGM_W114,MGM_W113);
   not MGM_G140(MGM_W115,D);
   and MGM_G141(MGM_W116,MGM_W115,CK);
   and MGM_G142(MGM_W117,SD,MGM_W116);
   and MGM_G143(MGM_W118,SE,MGM_W117);
   and MGM_G144(ENABLE_CK_AND_NOT_D_AND_SD_AND_SE_AND_SI,SI,MGM_W118);
   and MGM_G145(MGM_W119,D,CK);
   and MGM_G146(MGM_W120,SD,MGM_W119);
   not MGM_G147(MGM_W121,SE);
   and MGM_G148(MGM_W122,MGM_W121,MGM_W120);
   not MGM_G149(MGM_W123,SI);
   and MGM_G150(ENABLE_CK_AND_D_AND_SD_AND_NOT_SE_AND_NOT_SI,MGM_W123,MGM_W122);
   and MGM_G151(MGM_W124,D,CK);
   and MGM_G152(MGM_W125,SD,MGM_W124);
   not MGM_G153(MGM_W126,SE);
   and MGM_G154(MGM_W127,MGM_W126,MGM_W125);
   and MGM_G155(ENABLE_CK_AND_D_AND_SD_AND_NOT_SE_AND_SI,SI,MGM_W127);
   and MGM_G156(MGM_W128,D,CK);
   and MGM_G157(MGM_W129,SD,MGM_W128);
   and MGM_G158(MGM_W130,SE,MGM_W129);
   not MGM_G159(MGM_W131,SI);
   and MGM_G160(ENABLE_CK_AND_D_AND_SD_AND_SE_AND_NOT_SI,MGM_W131,MGM_W130);
   and MGM_G161(MGM_W132,D,CK);
   and MGM_G162(MGM_W133,SD,MGM_W132);
   and MGM_G163(MGM_W134,SE,MGM_W133);
   and MGM_G164(ENABLE_CK_AND_D_AND_SD_AND_SE_AND_SI,SI,MGM_W134);
   not MGM_G165(MGM_W135,CK);
   not MGM_G166(MGM_W136,D);
   and MGM_G167(MGM_W137,MGM_W136,MGM_W135);
   not MGM_G168(MGM_W138,SE);
   and MGM_G169(MGM_W139,MGM_W138,MGM_W137);
   not MGM_G170(MGM_W140,SI);
   and MGM_G171(ENABLE_NOT_CK_AND_NOT_D_AND_NOT_SE_AND_NOT_SI,MGM_W140,MGM_W139);
   not MGM_G172(MGM_W141,CK);
   not MGM_G173(MGM_W142,D);
   and MGM_G174(MGM_W143,MGM_W142,MGM_W141);
   not MGM_G175(MGM_W144,SE);
   and MGM_G176(MGM_W145,MGM_W144,MGM_W143);
   and MGM_G177(ENABLE_NOT_CK_AND_NOT_D_AND_NOT_SE_AND_SI,SI,MGM_W145);
   not MGM_G178(MGM_W146,CK);
   not MGM_G179(MGM_W147,D);
   and MGM_G180(MGM_W148,MGM_W147,MGM_W146);
   and MGM_G181(MGM_W149,SE,MGM_W148);
   not MGM_G182(MGM_W150,SI);
   and MGM_G183(ENABLE_NOT_CK_AND_NOT_D_AND_SE_AND_NOT_SI,MGM_W150,MGM_W149);
   not MGM_G184(MGM_W151,CK);
   not MGM_G185(MGM_W152,D);
   and MGM_G186(MGM_W153,MGM_W152,MGM_W151);
   and MGM_G187(MGM_W154,SE,MGM_W153);
   and MGM_G188(ENABLE_NOT_CK_AND_NOT_D_AND_SE_AND_SI,SI,MGM_W154);
   not MGM_G189(MGM_W155,CK);
   and MGM_G190(MGM_W156,D,MGM_W155);
   not MGM_G191(MGM_W157,SE);
   and MGM_G192(MGM_W158,MGM_W157,MGM_W156);
   not MGM_G193(MGM_W159,SI);
   and MGM_G194(ENABLE_NOT_CK_AND_D_AND_NOT_SE_AND_NOT_SI,MGM_W159,MGM_W158);
   not MGM_G195(MGM_W160,CK);
   and MGM_G196(MGM_W161,D,MGM_W160);
   not MGM_G197(MGM_W162,SE);
   and MGM_G198(MGM_W163,MGM_W162,MGM_W161);
   and MGM_G199(ENABLE_NOT_CK_AND_D_AND_NOT_SE_AND_SI,SI,MGM_W163);
   not MGM_G200(MGM_W164,CK);
   and MGM_G201(MGM_W165,D,MGM_W164);
   and MGM_G202(MGM_W166,SE,MGM_W165);
   not MGM_G203(MGM_W167,SI);
   and MGM_G204(ENABLE_NOT_CK_AND_D_AND_SE_AND_NOT_SI,MGM_W167,MGM_W166);
   not MGM_G205(MGM_W168,CK);
   and MGM_G206(MGM_W169,D,MGM_W168);
   and MGM_G207(MGM_W170,SE,MGM_W169);
   and MGM_G208(ENABLE_NOT_CK_AND_D_AND_SE_AND_SI,SI,MGM_W170);
   not MGM_G209(MGM_W171,D);
   and MGM_G210(MGM_W172,MGM_W171,CK);
   not MGM_G211(MGM_W173,SE);
   and MGM_G212(MGM_W174,MGM_W173,MGM_W172);
   not MGM_G213(MGM_W175,SI);
   and MGM_G214(ENABLE_CK_AND_NOT_D_AND_NOT_SE_AND_NOT_SI,MGM_W175,MGM_W174);
   not MGM_G215(MGM_W176,D);
   and MGM_G216(MGM_W177,MGM_W176,CK);
   not MGM_G217(MGM_W178,SE);
   and MGM_G218(MGM_W179,MGM_W178,MGM_W177);
   and MGM_G219(ENABLE_CK_AND_NOT_D_AND_NOT_SE_AND_SI,SI,MGM_W179);
   not MGM_G220(MGM_W180,D);
   and MGM_G221(MGM_W181,MGM_W180,CK);
   and MGM_G222(MGM_W182,SE,MGM_W181);
   not MGM_G223(MGM_W183,SI);
   and MGM_G224(ENABLE_CK_AND_NOT_D_AND_SE_AND_NOT_SI,MGM_W183,MGM_W182);
   not MGM_G225(MGM_W184,D);
   and MGM_G226(MGM_W185,MGM_W184,CK);
   and MGM_G227(MGM_W186,SE,MGM_W185);
   and MGM_G228(ENABLE_CK_AND_NOT_D_AND_SE_AND_SI,SI,MGM_W186);
   and MGM_G229(MGM_W187,D,CK);
   not MGM_G230(MGM_W188,SE);
   and MGM_G231(MGM_W189,MGM_W188,MGM_W187);
   not MGM_G232(MGM_W190,SI);
   and MGM_G233(ENABLE_CK_AND_D_AND_NOT_SE_AND_NOT_SI,MGM_W190,MGM_W189);
   and MGM_G234(MGM_W191,D,CK);
   not MGM_G235(MGM_W192,SE);
   and MGM_G236(MGM_W193,MGM_W192,MGM_W191);
   and MGM_G237(ENABLE_CK_AND_D_AND_NOT_SE_AND_SI,SI,MGM_W193);
   and MGM_G238(MGM_W194,D,CK);
   and MGM_G239(MGM_W195,SE,MGM_W194);
   not MGM_G240(MGM_W196,SI);
   and MGM_G241(ENABLE_CK_AND_D_AND_SE_AND_NOT_SI,MGM_W196,MGM_W195);
   and MGM_G242(MGM_W197,D,CK);
   and MGM_G243(MGM_W198,SE,MGM_W197);
   and MGM_G244(ENABLE_CK_AND_D_AND_SE_AND_SI,SI,MGM_W198);
   not MGM_G245(MGM_W199,D);
   and MGM_G246(MGM_W200,RD,MGM_W199);
   not MGM_G247(MGM_W201,SE);
   and MGM_G248(MGM_W202,MGM_W201,MGM_W200);
   not MGM_G249(MGM_W203,SI);
   and MGM_G250(ENABLE_NOT_D_AND_RD_AND_NOT_SE_AND_NOT_SI,MGM_W203,MGM_W202);
   not MGM_G251(MGM_W204,D);
   and MGM_G252(MGM_W205,RD,MGM_W204);
   not MGM_G253(MGM_W206,SE);
   and MGM_G254(MGM_W207,MGM_W206,MGM_W205);
   and MGM_G255(ENABLE_NOT_D_AND_RD_AND_NOT_SE_AND_SI,SI,MGM_W207);
   not MGM_G256(MGM_W208,D);
   and MGM_G257(MGM_W209,RD,MGM_W208);
   and MGM_G258(MGM_W210,SE,MGM_W209);
   not MGM_G259(MGM_W211,SI);
   and MGM_G260(ENABLE_NOT_D_AND_RD_AND_SE_AND_NOT_SI,MGM_W211,MGM_W210);
   and MGM_G261(MGM_W212,RD,D);
   and MGM_G262(MGM_W213,SE,MGM_W212);
   not MGM_G263(MGM_W214,SI);
   and MGM_G264(ENABLE_D_AND_RD_AND_SE_AND_NOT_SI,MGM_W214,MGM_W213);
   not MGM_G265(MGM_W215,CK);
   not MGM_G266(MGM_W216,D);
   and MGM_G267(MGM_W217,MGM_W216,MGM_W215);
   and MGM_G268(MGM_W218,RD,MGM_W217);
   not MGM_G269(MGM_W219,SE);
   and MGM_G270(MGM_W220,MGM_W219,MGM_W218);
   not MGM_G271(MGM_W221,SI);
   and MGM_G272(ENABLE_NOT_CK_AND_NOT_D_AND_RD_AND_NOT_SE_AND_NOT_SI,MGM_W221,MGM_W220);
   not MGM_G273(MGM_W222,CK);
   not MGM_G274(MGM_W223,D);
   and MGM_G275(MGM_W224,MGM_W223,MGM_W222);
   and MGM_G276(MGM_W225,RD,MGM_W224);
   not MGM_G277(MGM_W226,SE);
   and MGM_G278(MGM_W227,MGM_W226,MGM_W225);
   and MGM_G279(ENABLE_NOT_CK_AND_NOT_D_AND_RD_AND_NOT_SE_AND_SI,SI,MGM_W227);
   not MGM_G280(MGM_W228,CK);
   not MGM_G281(MGM_W229,D);
   and MGM_G282(MGM_W230,MGM_W229,MGM_W228);
   and MGM_G283(MGM_W231,RD,MGM_W230);
   and MGM_G284(MGM_W232,SE,MGM_W231);
   not MGM_G285(MGM_W233,SI);
   and MGM_G286(ENABLE_NOT_CK_AND_NOT_D_AND_RD_AND_SE_AND_NOT_SI,MGM_W233,MGM_W232);
   not MGM_G287(MGM_W234,CK);
   not MGM_G288(MGM_W235,D);
   and MGM_G289(MGM_W236,MGM_W235,MGM_W234);
   and MGM_G290(MGM_W237,RD,MGM_W236);
   and MGM_G291(MGM_W238,SE,MGM_W237);
   and MGM_G292(ENABLE_NOT_CK_AND_NOT_D_AND_RD_AND_SE_AND_SI,SI,MGM_W238);
   not MGM_G293(MGM_W239,CK);
   and MGM_G294(MGM_W240,D,MGM_W239);
   and MGM_G295(MGM_W241,RD,MGM_W240);
   not MGM_G296(MGM_W242,SE);
   and MGM_G297(MGM_W243,MGM_W242,MGM_W241);
   not MGM_G298(MGM_W244,SI);
   and MGM_G299(ENABLE_NOT_CK_AND_D_AND_RD_AND_NOT_SE_AND_NOT_SI,MGM_W244,MGM_W243);
   not MGM_G300(MGM_W245,CK);
   and MGM_G301(MGM_W246,D,MGM_W245);
   and MGM_G302(MGM_W247,RD,MGM_W246);
   not MGM_G303(MGM_W248,SE);
   and MGM_G304(MGM_W249,MGM_W248,MGM_W247);
   and MGM_G305(ENABLE_NOT_CK_AND_D_AND_RD_AND_NOT_SE_AND_SI,SI,MGM_W249);
   not MGM_G306(MGM_W250,CK);
   and MGM_G307(MGM_W251,D,MGM_W250);
   and MGM_G308(MGM_W252,RD,MGM_W251);
   and MGM_G309(MGM_W253,SE,MGM_W252);
   not MGM_G310(MGM_W254,SI);
   and MGM_G311(ENABLE_NOT_CK_AND_D_AND_RD_AND_SE_AND_NOT_SI,MGM_W254,MGM_W253);
   not MGM_G312(MGM_W255,CK);
   and MGM_G313(MGM_W256,D,MGM_W255);
   and MGM_G314(MGM_W257,RD,MGM_W256);
   and MGM_G315(MGM_W258,SE,MGM_W257);
   and MGM_G316(ENABLE_NOT_CK_AND_D_AND_RD_AND_SE_AND_SI,SI,MGM_W258);
   not MGM_G317(MGM_W259,D);
   and MGM_G318(MGM_W260,MGM_W259,CK);
   and MGM_G319(MGM_W261,RD,MGM_W260);
   not MGM_G320(MGM_W262,SE);
   and MGM_G321(MGM_W263,MGM_W262,MGM_W261);
   not MGM_G322(MGM_W264,SI);
   and MGM_G323(ENABLE_CK_AND_NOT_D_AND_RD_AND_NOT_SE_AND_NOT_SI,MGM_W264,MGM_W263);
   not MGM_G324(MGM_W265,D);
   and MGM_G325(MGM_W266,MGM_W265,CK);
   and MGM_G326(MGM_W267,RD,MGM_W266);
   not MGM_G327(MGM_W268,SE);
   and MGM_G328(MGM_W269,MGM_W268,MGM_W267);
   and MGM_G329(ENABLE_CK_AND_NOT_D_AND_RD_AND_NOT_SE_AND_SI,SI,MGM_W269);
   not MGM_G330(MGM_W270,D);
   and MGM_G331(MGM_W271,MGM_W270,CK);
   and MGM_G332(MGM_W272,RD,MGM_W271);
   and MGM_G333(MGM_W273,SE,MGM_W272);
   not MGM_G334(MGM_W274,SI);
   and MGM_G335(ENABLE_CK_AND_NOT_D_AND_RD_AND_SE_AND_NOT_SI,MGM_W274,MGM_W273);
   not MGM_G336(MGM_W275,D);
   and MGM_G337(MGM_W276,MGM_W275,CK);
   and MGM_G338(MGM_W277,RD,MGM_W276);
   and MGM_G339(MGM_W278,SE,MGM_W277);
   and MGM_G340(ENABLE_CK_AND_NOT_D_AND_RD_AND_SE_AND_SI,SI,MGM_W278);
   and MGM_G341(MGM_W279,D,CK);
   and MGM_G342(MGM_W280,RD,MGM_W279);
   not MGM_G343(MGM_W281,SE);
   and MGM_G344(MGM_W282,MGM_W281,MGM_W280);
   not MGM_G345(MGM_W283,SI);
   and MGM_G346(ENABLE_CK_AND_D_AND_RD_AND_NOT_SE_AND_NOT_SI,MGM_W283,MGM_W282);
   and MGM_G347(MGM_W284,D,CK);
   and MGM_G348(MGM_W285,RD,MGM_W284);
   not MGM_G349(MGM_W286,SE);
   and MGM_G350(MGM_W287,MGM_W286,MGM_W285);
   and MGM_G351(ENABLE_CK_AND_D_AND_RD_AND_NOT_SE_AND_SI,SI,MGM_W287);
   and MGM_G352(MGM_W288,D,CK);
   and MGM_G353(MGM_W289,RD,MGM_W288);
   and MGM_G354(MGM_W290,SE,MGM_W289);
   not MGM_G355(MGM_W291,SI);
   and MGM_G356(ENABLE_CK_AND_D_AND_RD_AND_SE_AND_NOT_SI,MGM_W291,MGM_W290);
   and MGM_G357(MGM_W292,D,CK);
   and MGM_G358(MGM_W293,RD,MGM_W292);
   and MGM_G359(MGM_W294,SE,MGM_W293);
   and MGM_G360(ENABLE_CK_AND_D_AND_RD_AND_SE_AND_SI,SI,MGM_W294);
   not MGM_G361(MGM_W295,D);
   and MGM_G362(MGM_W296,RD,MGM_W295);
   and MGM_G363(MGM_W297,SD,MGM_W296);
   and MGM_G364(ENABLE_NOT_D_AND_RD_AND_SD_AND_SI,SI,MGM_W297);
   and MGM_G365(MGM_W298,RD,D);
   and MGM_G366(MGM_W299,SD,MGM_W298);
   not MGM_G367(MGM_W300,SI);
   and MGM_G368(ENABLE_D_AND_RD_AND_SD_AND_NOT_SI,MGM_W300,MGM_W299);
   not MGM_G369(MGM_W301,D);
   and MGM_G370(MGM_W302,RD,MGM_W301);
   and MGM_G371(MGM_W303,SD,MGM_W302);
   and MGM_G372(ENABLE_NOT_D_AND_RD_AND_SD_AND_SE,SE,MGM_W303);
   and MGM_G373(MGM_W304,RD,D);
   and MGM_G374(MGM_W305,SD,MGM_W304);
   and MGM_G375(ENABLE_D_AND_RD_AND_SD_AND_SE,SE,MGM_W305);
   // spec_gates_end
   // specify_block_begin
   specify

      if(D===1'b0 && SI===1'b1)
      // seq arc CK --> Q
      (posedge CK => (Q : SE))  = (1.0,1.0);
      
      if(SE===1'b0 && SI===1'b0)
      // seq arc CK --> Q
      (posedge CK => (Q : D))  = (1.0,1.0);
      
      if(D===1'b1 && SE===1'b0 && SI===1'b1 || D===1'b0 && SE===1'b1 && SI===1'b0)
      // seq arc CK --> Q
      (posedge CK => (Q : D))  = (1.0,1.0);
      
      if(D===1'b1 && SE===1'b1)
      // seq arc CK --> Q
      (posedge CK => (Q : SI))  = (1.0,1.0);
      
      ifnone
      // seq arc CK --> Q
      (posedge CK => (Q : D))  = (1.0,1.0);
      
      if(CK===1'b0 && D===1'b0 && SD===1'b0 && SE===1'b0 && SI===1'b0)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b0 && D===1'b0 && SD===1'b0 && SE===1'b0 && SI===1'b1)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b0 && D===1'b0 && SD===1'b0 && SE===1'b1 && SI===1'b0)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b0 && D===1'b0 && SD===1'b0 && SE===1'b1 && SI===1'b1)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b0 && D===1'b0 && SD===1'b1 && SE===1'b0 && SI===1'b0)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b0 && D===1'b0 && SD===1'b1 && SE===1'b0 && SI===1'b1)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b0 && D===1'b0 && SD===1'b1 && SE===1'b1 && SI===1'b0)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b0 && D===1'b0 && SD===1'b1 && SE===1'b1 && SI===1'b1)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b0 && D===1'b1 && SD===1'b0 && SE===1'b0 && SI===1'b0)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b0 && D===1'b1 && SD===1'b0 && SE===1'b0 && SI===1'b1)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b0 && D===1'b1 && SD===1'b0 && SE===1'b1 && SI===1'b0)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b0 && D===1'b1 && SD===1'b0 && SE===1'b1 && SI===1'b1)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b0 && D===1'b1 && SD===1'b1 && SE===1'b0 && SI===1'b0)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b0 && D===1'b1 && SD===1'b1 && SE===1'b0 && SI===1'b1)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b0 && D===1'b1 && SD===1'b1 && SE===1'b1 && SI===1'b0)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b0 && D===1'b1 && SD===1'b1 && SE===1'b1 && SI===1'b1)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b1 && D===1'b0 && SD===1'b0 && SE===1'b0 && SI===1'b0)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b1 && D===1'b0 && SD===1'b0 && SE===1'b0 && SI===1'b1)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b1 && D===1'b0 && SD===1'b0 && SE===1'b1 && SI===1'b0)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b1 && D===1'b0 && SD===1'b0 && SE===1'b1 && SI===1'b1)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b1 && D===1'b0 && SD===1'b1 && SE===1'b0 && SI===1'b0)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b1 && D===1'b0 && SD===1'b1 && SE===1'b0 && SI===1'b1)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b1 && D===1'b0 && SD===1'b1 && SE===1'b1 && SI===1'b0)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b1 && D===1'b0 && SD===1'b1 && SE===1'b1 && SI===1'b1)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b1 && D===1'b1 && SD===1'b0 && SE===1'b0 && SI===1'b0)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b1 && D===1'b1 && SD===1'b0 && SE===1'b0 && SI===1'b1)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b1 && D===1'b1 && SD===1'b0 && SE===1'b1 && SI===1'b0)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b1 && D===1'b1 && SD===1'b0 && SE===1'b1 && SI===1'b1)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b1 && D===1'b1 && SD===1'b1 && SE===1'b0 && SI===1'b0)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b1 && D===1'b1 && SD===1'b1 && SE===1'b0 && SI===1'b1)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b1 && D===1'b1 && SD===1'b1 && SE===1'b1 && SI===1'b0)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b1 && D===1'b1 && SD===1'b1 && SE===1'b1 && SI===1'b1)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      ifnone
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b0 && D===1'b0 && SE===1'b0 && SI===1'b0)
      // seq arc SD --> Q
      (SD => Q)  = (1.0,1.0);
      
      if(CK===1'b0 && D===1'b0 && SE===1'b0 && SI===1'b1)
      // seq arc SD --> Q
      (SD => Q)  = (1.0,1.0);
      
      if(CK===1'b0 && D===1'b0 && SE===1'b1 && SI===1'b0)
      // seq arc SD --> Q
      (SD => Q)  = (1.0,1.0);
      
      if(CK===1'b0 && D===1'b0 && SE===1'b1 && SI===1'b1)
      // seq arc SD --> Q
      (SD => Q)  = (1.0,1.0);
      
      if(CK===1'b0 && D===1'b1 && SE===1'b0 && SI===1'b0)
      // seq arc SD --> Q
      (SD => Q)  = (1.0,1.0);
      
      if(CK===1'b0 && D===1'b1 && SE===1'b0 && SI===1'b1)
      // seq arc SD --> Q
      (SD => Q)  = (1.0,1.0);
      
      if(CK===1'b0 && D===1'b1 && SE===1'b1 && SI===1'b0)
      // seq arc SD --> Q
      (SD => Q)  = (1.0,1.0);
      
      if(CK===1'b0 && D===1'b1 && SE===1'b1 && SI===1'b1)
      // seq arc SD --> Q
      (SD => Q)  = (1.0,1.0);
      
      if(CK===1'b1 && D===1'b0 && SE===1'b0 && SI===1'b0)
      // seq arc SD --> Q
      (SD => Q)  = (1.0,1.0);
      
      if(CK===1'b1 && D===1'b0 && SE===1'b0 && SI===1'b1)
      // seq arc SD --> Q
      (SD => Q)  = (1.0,1.0);
      
      if(CK===1'b1 && D===1'b0 && SE===1'b1 && SI===1'b0)
      // seq arc SD --> Q
      (SD => Q)  = (1.0,1.0);
      
      if(CK===1'b1 && D===1'b0 && SE===1'b1 && SI===1'b1)
      // seq arc SD --> Q
      (SD => Q)  = (1.0,1.0);
      
      if(CK===1'b1 && D===1'b1 && SE===1'b0 && SI===1'b0)
      // seq arc SD --> Q
      (SD => Q)  = (1.0,1.0);
      
      if(CK===1'b1 && D===1'b1 && SE===1'b0 && SI===1'b1)
      // seq arc SD --> Q
      (SD => Q)  = (1.0,1.0);
      
      if(CK===1'b1 && D===1'b1 && SE===1'b1 && SI===1'b0)
      // seq arc SD --> Q
      (SD => Q)  = (1.0,1.0);
      
      if(CK===1'b1 && D===1'b1 && SE===1'b1 && SI===1'b1)
      // seq arc SD --> Q
      (SD => Q)  = (1.0,1.0);
      
      ifnone
      // seq arc SD --> Q
      (SD => Q)  = (1.0,1.0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_RD_AND_SD_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_RD_AND_SD_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_RD_AND_SD_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_RD_AND_SD_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_RD_AND_SD_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_RD_AND_SD_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_RD_AND_SD_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_RD_AND_SD_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_RD_AND_SD_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_RD_AND_SD_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_RD_AND_SD_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_RD_AND_SD_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_RD_AND_SD_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_RD_AND_SD_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_RD_AND_SD_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_RD_AND_SD_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      // hold D-HL CK-LH
      $hold(posedge CK &&& (ENABLE_RD_AND_SD_AND_NOT_SE_AND_NOT_SI === 1'b1),
      negedge D &&& (ENABLE_RD_AND_SD_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold D-LH CK-LH
      $hold(posedge CK &&& (ENABLE_RD_AND_SD_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge D &&& (ENABLE_RD_AND_SD_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup D-HL CK-LH
      $setup(negedge D &&& (ENABLE_RD_AND_SD_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_RD_AND_SD_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup D-LH CK-LH
      $setup(posedge D &&& (ENABLE_RD_AND_SD_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_RD_AND_SD_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold D-HL CK-LH
      $hold(posedge CK &&& (ENABLE_RD_AND_SD_AND_NOT_SE_AND_SI === 1'b1),
      negedge D &&& (ENABLE_RD_AND_SD_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // hold D-LH CK-LH
      $hold(posedge CK &&& (ENABLE_RD_AND_SD_AND_NOT_SE_AND_SI === 1'b1),
      posedge D &&& (ENABLE_RD_AND_SD_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // setup D-HL CK-LH
      $setup(negedge D &&& (ENABLE_RD_AND_SD_AND_NOT_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_RD_AND_SD_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // setup D-LH CK-LH
      $setup(posedge D &&& (ENABLE_RD_AND_SD_AND_NOT_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_RD_AND_SD_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // recovery RD-LH CK-LH
      $recovery(posedge RD &&& (ENABLE_NOT_D_AND_SD_AND_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_SD_AND_SE_AND_SI === 1'b1),1.0);
      
      // removal RD-LH CK-LH
      $removal(posedge RD &&& (ENABLE_NOT_D_AND_SD_AND_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_SD_AND_SE_AND_SI === 1'b1),1.0);
      
      // recovery RD-LH CK-LH
      $recovery(posedge RD &&& (ENABLE_D_AND_SD_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_D_AND_SD_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // removal RD-LH CK-LH
      $removal(posedge RD &&& (ENABLE_D_AND_SD_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_D_AND_SD_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // recovery RD-LH CK-LH
      $recovery(posedge RD &&& (ENABLE_D_AND_SD_AND_NOT_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_D_AND_SD_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // removal RD-LH CK-LH
      $removal(posedge RD &&& (ENABLE_D_AND_SD_AND_NOT_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_D_AND_SD_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // recovery RD-LH CK-LH
      $recovery(posedge RD &&& (ENABLE_D_AND_SD_AND_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_D_AND_SD_AND_SE_AND_SI === 1'b1),1.0);
      
      // removal RD-LH CK-LH
      $removal(posedge RD &&& (ENABLE_D_AND_SD_AND_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_D_AND_SD_AND_SE_AND_SI === 1'b1),1.0);
      
      $width(negedge RD &&& (ENABLE_NOT_CK_AND_NOT_D_AND_SD_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge RD &&& (ENABLE_NOT_CK_AND_NOT_D_AND_SD_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge RD &&& (ENABLE_NOT_CK_AND_NOT_D_AND_SD_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge RD &&& (ENABLE_NOT_CK_AND_NOT_D_AND_SD_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge RD &&& (ENABLE_NOT_CK_AND_D_AND_SD_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge RD &&& (ENABLE_NOT_CK_AND_D_AND_SD_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge RD &&& (ENABLE_NOT_CK_AND_D_AND_SD_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge RD &&& (ENABLE_NOT_CK_AND_D_AND_SD_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge RD &&& (ENABLE_CK_AND_NOT_D_AND_SD_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge RD &&& (ENABLE_CK_AND_NOT_D_AND_SD_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge RD &&& (ENABLE_CK_AND_NOT_D_AND_SD_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge RD &&& (ENABLE_CK_AND_NOT_D_AND_SD_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge RD &&& (ENABLE_CK_AND_D_AND_SD_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge RD &&& (ENABLE_CK_AND_D_AND_SD_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge RD &&& (ENABLE_CK_AND_D_AND_SD_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge RD &&& (ENABLE_CK_AND_D_AND_SD_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      // hold RD-LH SD-LH
      $hold(posedge SD &&& (ENABLE_NOT_CK_AND_NOT_D_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge RD &&& (ENABLE_NOT_CK_AND_NOT_D_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup RD-LH SD-LH
      $setup(posedge RD &&& (ENABLE_NOT_CK_AND_NOT_D_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge SD &&& (ENABLE_NOT_CK_AND_NOT_D_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold RD-LH SD-LH
      $hold(posedge SD &&& (ENABLE_NOT_CK_AND_NOT_D_AND_NOT_SE_AND_SI === 1'b1),
      posedge RD &&& (ENABLE_NOT_CK_AND_NOT_D_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // setup RD-LH SD-LH
      $setup(posedge RD &&& (ENABLE_NOT_CK_AND_NOT_D_AND_NOT_SE_AND_SI === 1'b1),
      posedge SD &&& (ENABLE_NOT_CK_AND_NOT_D_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // hold RD-LH SD-LH
      $hold(posedge SD &&& (ENABLE_NOT_CK_AND_NOT_D_AND_SE_AND_NOT_SI === 1'b1),
      posedge RD &&& (ENABLE_NOT_CK_AND_NOT_D_AND_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup RD-LH SD-LH
      $setup(posedge RD &&& (ENABLE_NOT_CK_AND_NOT_D_AND_SE_AND_NOT_SI === 1'b1),
      posedge SD &&& (ENABLE_NOT_CK_AND_NOT_D_AND_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold RD-LH SD-LH
      $hold(posedge SD &&& (ENABLE_NOT_CK_AND_NOT_D_AND_SE_AND_SI === 1'b1),
      posedge RD &&& (ENABLE_NOT_CK_AND_NOT_D_AND_SE_AND_SI === 1'b1),1.0);
      
      // setup RD-LH SD-LH
      $setup(posedge RD &&& (ENABLE_NOT_CK_AND_NOT_D_AND_SE_AND_SI === 1'b1),
      posedge SD &&& (ENABLE_NOT_CK_AND_NOT_D_AND_SE_AND_SI === 1'b1),1.0);
      
      // hold RD-LH SD-LH
      $hold(posedge SD &&& (ENABLE_NOT_CK_AND_D_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge RD &&& (ENABLE_NOT_CK_AND_D_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup RD-LH SD-LH
      $setup(posedge RD &&& (ENABLE_NOT_CK_AND_D_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge SD &&& (ENABLE_NOT_CK_AND_D_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold RD-LH SD-LH
      $hold(posedge SD &&& (ENABLE_NOT_CK_AND_D_AND_NOT_SE_AND_SI === 1'b1),
      posedge RD &&& (ENABLE_NOT_CK_AND_D_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // setup RD-LH SD-LH
      $setup(posedge RD &&& (ENABLE_NOT_CK_AND_D_AND_NOT_SE_AND_SI === 1'b1),
      posedge SD &&& (ENABLE_NOT_CK_AND_D_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // hold RD-LH SD-LH
      $hold(posedge SD &&& (ENABLE_NOT_CK_AND_D_AND_SE_AND_NOT_SI === 1'b1),
      posedge RD &&& (ENABLE_NOT_CK_AND_D_AND_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup RD-LH SD-LH
      $setup(posedge RD &&& (ENABLE_NOT_CK_AND_D_AND_SE_AND_NOT_SI === 1'b1),
      posedge SD &&& (ENABLE_NOT_CK_AND_D_AND_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold RD-LH SD-LH
      $hold(posedge SD &&& (ENABLE_NOT_CK_AND_D_AND_SE_AND_SI === 1'b1),
      posedge RD &&& (ENABLE_NOT_CK_AND_D_AND_SE_AND_SI === 1'b1),1.0);
      
      // setup RD-LH SD-LH
      $setup(posedge RD &&& (ENABLE_NOT_CK_AND_D_AND_SE_AND_SI === 1'b1),
      posedge SD &&& (ENABLE_NOT_CK_AND_D_AND_SE_AND_SI === 1'b1),1.0);
      
      // hold RD-LH SD-LH
      $hold(posedge SD &&& (ENABLE_CK_AND_NOT_D_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge RD &&& (ENABLE_CK_AND_NOT_D_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup RD-LH SD-LH
      $setup(posedge RD &&& (ENABLE_CK_AND_NOT_D_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge SD &&& (ENABLE_CK_AND_NOT_D_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold RD-LH SD-LH
      $hold(posedge SD &&& (ENABLE_CK_AND_NOT_D_AND_NOT_SE_AND_SI === 1'b1),
      posedge RD &&& (ENABLE_CK_AND_NOT_D_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // setup RD-LH SD-LH
      $setup(posedge RD &&& (ENABLE_CK_AND_NOT_D_AND_NOT_SE_AND_SI === 1'b1),
      posedge SD &&& (ENABLE_CK_AND_NOT_D_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // hold RD-LH SD-LH
      $hold(posedge SD &&& (ENABLE_CK_AND_NOT_D_AND_SE_AND_NOT_SI === 1'b1),
      posedge RD &&& (ENABLE_CK_AND_NOT_D_AND_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup RD-LH SD-LH
      $setup(posedge RD &&& (ENABLE_CK_AND_NOT_D_AND_SE_AND_NOT_SI === 1'b1),
      posedge SD &&& (ENABLE_CK_AND_NOT_D_AND_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold RD-LH SD-LH
      $hold(posedge SD &&& (ENABLE_CK_AND_NOT_D_AND_SE_AND_SI === 1'b1),
      posedge RD &&& (ENABLE_CK_AND_NOT_D_AND_SE_AND_SI === 1'b1),1.0);
      
      // setup RD-LH SD-LH
      $setup(posedge RD &&& (ENABLE_CK_AND_NOT_D_AND_SE_AND_SI === 1'b1),
      posedge SD &&& (ENABLE_CK_AND_NOT_D_AND_SE_AND_SI === 1'b1),1.0);
      
      // hold RD-LH SD-LH
      $hold(posedge SD &&& (ENABLE_CK_AND_D_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge RD &&& (ENABLE_CK_AND_D_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup RD-LH SD-LH
      $setup(posedge RD &&& (ENABLE_CK_AND_D_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge SD &&& (ENABLE_CK_AND_D_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold RD-LH SD-LH
      $hold(posedge SD &&& (ENABLE_CK_AND_D_AND_NOT_SE_AND_SI === 1'b1),
      posedge RD &&& (ENABLE_CK_AND_D_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // setup RD-LH SD-LH
      $setup(posedge RD &&& (ENABLE_CK_AND_D_AND_NOT_SE_AND_SI === 1'b1),
      posedge SD &&& (ENABLE_CK_AND_D_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // hold RD-LH SD-LH
      $hold(posedge SD &&& (ENABLE_CK_AND_D_AND_SE_AND_NOT_SI === 1'b1),
      posedge RD &&& (ENABLE_CK_AND_D_AND_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup RD-LH SD-LH
      $setup(posedge RD &&& (ENABLE_CK_AND_D_AND_SE_AND_NOT_SI === 1'b1),
      posedge SD &&& (ENABLE_CK_AND_D_AND_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold RD-LH SD-LH
      $hold(posedge SD &&& (ENABLE_CK_AND_D_AND_SE_AND_SI === 1'b1),
      posedge RD &&& (ENABLE_CK_AND_D_AND_SE_AND_SI === 1'b1),1.0);
      
      // setup RD-LH SD-LH
      $setup(posedge RD &&& (ENABLE_CK_AND_D_AND_SE_AND_SI === 1'b1),
      posedge SD &&& (ENABLE_CK_AND_D_AND_SE_AND_SI === 1'b1),1.0);
      
      // recovery SD-LH CK-LH
      $recovery(posedge SD &&& (ENABLE_NOT_D_AND_RD_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_RD_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // removal SD-LH CK-LH
      $removal(posedge SD &&& (ENABLE_NOT_D_AND_RD_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_RD_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // recovery SD-LH CK-LH
      $recovery(posedge SD &&& (ENABLE_NOT_D_AND_RD_AND_NOT_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_RD_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // removal SD-LH CK-LH
      $removal(posedge SD &&& (ENABLE_NOT_D_AND_RD_AND_NOT_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_RD_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // recovery SD-LH CK-LH
      $recovery(posedge SD &&& (ENABLE_NOT_D_AND_RD_AND_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_RD_AND_SE_AND_NOT_SI === 1'b1),1.0);
      
      // removal SD-LH CK-LH
      $removal(posedge SD &&& (ENABLE_NOT_D_AND_RD_AND_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_RD_AND_SE_AND_NOT_SI === 1'b1),1.0);
      
      // recovery SD-LH CK-LH
      $recovery(posedge SD &&& (ENABLE_D_AND_RD_AND_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_D_AND_RD_AND_SE_AND_NOT_SI === 1'b1),1.0);
      
      // removal SD-LH CK-LH
      $removal(posedge SD &&& (ENABLE_D_AND_RD_AND_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_D_AND_RD_AND_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold SD-LH RD-LH
      $hold(posedge RD &&& (ENABLE_NOT_CK_AND_NOT_D_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge SD &&& (ENABLE_NOT_CK_AND_NOT_D_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup SD-LH RD-LH
      $setup(posedge SD &&& (ENABLE_NOT_CK_AND_NOT_D_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge RD &&& (ENABLE_NOT_CK_AND_NOT_D_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold SD-LH RD-LH
      $hold(posedge RD &&& (ENABLE_NOT_CK_AND_NOT_D_AND_NOT_SE_AND_SI === 1'b1),
      posedge SD &&& (ENABLE_NOT_CK_AND_NOT_D_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // setup SD-LH RD-LH
      $setup(posedge SD &&& (ENABLE_NOT_CK_AND_NOT_D_AND_NOT_SE_AND_SI === 1'b1),
      posedge RD &&& (ENABLE_NOT_CK_AND_NOT_D_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // hold SD-LH RD-LH
      $hold(posedge RD &&& (ENABLE_NOT_CK_AND_NOT_D_AND_SE_AND_NOT_SI === 1'b1),
      posedge SD &&& (ENABLE_NOT_CK_AND_NOT_D_AND_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup SD-LH RD-LH
      $setup(posedge SD &&& (ENABLE_NOT_CK_AND_NOT_D_AND_SE_AND_NOT_SI === 1'b1),
      posedge RD &&& (ENABLE_NOT_CK_AND_NOT_D_AND_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold SD-LH RD-LH
      $hold(posedge RD &&& (ENABLE_NOT_CK_AND_NOT_D_AND_SE_AND_SI === 1'b1),
      posedge SD &&& (ENABLE_NOT_CK_AND_NOT_D_AND_SE_AND_SI === 1'b1),1.0);
      
      // setup SD-LH RD-LH
      $setup(posedge SD &&& (ENABLE_NOT_CK_AND_NOT_D_AND_SE_AND_SI === 1'b1),
      posedge RD &&& (ENABLE_NOT_CK_AND_NOT_D_AND_SE_AND_SI === 1'b1),1.0);
      
      // hold SD-LH RD-LH
      $hold(posedge RD &&& (ENABLE_NOT_CK_AND_D_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge SD &&& (ENABLE_NOT_CK_AND_D_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup SD-LH RD-LH
      $setup(posedge SD &&& (ENABLE_NOT_CK_AND_D_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge RD &&& (ENABLE_NOT_CK_AND_D_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold SD-LH RD-LH
      $hold(posedge RD &&& (ENABLE_NOT_CK_AND_D_AND_NOT_SE_AND_SI === 1'b1),
      posedge SD &&& (ENABLE_NOT_CK_AND_D_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // setup SD-LH RD-LH
      $setup(posedge SD &&& (ENABLE_NOT_CK_AND_D_AND_NOT_SE_AND_SI === 1'b1),
      posedge RD &&& (ENABLE_NOT_CK_AND_D_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // hold SD-LH RD-LH
      $hold(posedge RD &&& (ENABLE_NOT_CK_AND_D_AND_SE_AND_NOT_SI === 1'b1),
      posedge SD &&& (ENABLE_NOT_CK_AND_D_AND_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup SD-LH RD-LH
      $setup(posedge SD &&& (ENABLE_NOT_CK_AND_D_AND_SE_AND_NOT_SI === 1'b1),
      posedge RD &&& (ENABLE_NOT_CK_AND_D_AND_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold SD-LH RD-LH
      $hold(posedge RD &&& (ENABLE_NOT_CK_AND_D_AND_SE_AND_SI === 1'b1),
      posedge SD &&& (ENABLE_NOT_CK_AND_D_AND_SE_AND_SI === 1'b1),1.0);
      
      // setup SD-LH RD-LH
      $setup(posedge SD &&& (ENABLE_NOT_CK_AND_D_AND_SE_AND_SI === 1'b1),
      posedge RD &&& (ENABLE_NOT_CK_AND_D_AND_SE_AND_SI === 1'b1),1.0);
      
      // hold SD-LH RD-LH
      $hold(posedge RD &&& (ENABLE_CK_AND_NOT_D_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge SD &&& (ENABLE_CK_AND_NOT_D_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup SD-LH RD-LH
      $setup(posedge SD &&& (ENABLE_CK_AND_NOT_D_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge RD &&& (ENABLE_CK_AND_NOT_D_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold SD-LH RD-LH
      $hold(posedge RD &&& (ENABLE_CK_AND_NOT_D_AND_NOT_SE_AND_SI === 1'b1),
      posedge SD &&& (ENABLE_CK_AND_NOT_D_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // setup SD-LH RD-LH
      $setup(posedge SD &&& (ENABLE_CK_AND_NOT_D_AND_NOT_SE_AND_SI === 1'b1),
      posedge RD &&& (ENABLE_CK_AND_NOT_D_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // hold SD-LH RD-LH
      $hold(posedge RD &&& (ENABLE_CK_AND_NOT_D_AND_SE_AND_NOT_SI === 1'b1),
      posedge SD &&& (ENABLE_CK_AND_NOT_D_AND_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup SD-LH RD-LH
      $setup(posedge SD &&& (ENABLE_CK_AND_NOT_D_AND_SE_AND_NOT_SI === 1'b1),
      posedge RD &&& (ENABLE_CK_AND_NOT_D_AND_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold SD-LH RD-LH
      $hold(posedge RD &&& (ENABLE_CK_AND_NOT_D_AND_SE_AND_SI === 1'b1),
      posedge SD &&& (ENABLE_CK_AND_NOT_D_AND_SE_AND_SI === 1'b1),1.0);
      
      // setup SD-LH RD-LH
      $setup(posedge SD &&& (ENABLE_CK_AND_NOT_D_AND_SE_AND_SI === 1'b1),
      posedge RD &&& (ENABLE_CK_AND_NOT_D_AND_SE_AND_SI === 1'b1),1.0);
      
      // hold SD-LH RD-LH
      $hold(posedge RD &&& (ENABLE_CK_AND_D_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge SD &&& (ENABLE_CK_AND_D_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup SD-LH RD-LH
      $setup(posedge SD &&& (ENABLE_CK_AND_D_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge RD &&& (ENABLE_CK_AND_D_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold SD-LH RD-LH
      $hold(posedge RD &&& (ENABLE_CK_AND_D_AND_NOT_SE_AND_SI === 1'b1),
      posedge SD &&& (ENABLE_CK_AND_D_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // setup SD-LH RD-LH
      $setup(posedge SD &&& (ENABLE_CK_AND_D_AND_NOT_SE_AND_SI === 1'b1),
      posedge RD &&& (ENABLE_CK_AND_D_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // hold SD-LH RD-LH
      $hold(posedge RD &&& (ENABLE_CK_AND_D_AND_SE_AND_NOT_SI === 1'b1),
      posedge SD &&& (ENABLE_CK_AND_D_AND_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup SD-LH RD-LH
      $setup(posedge SD &&& (ENABLE_CK_AND_D_AND_SE_AND_NOT_SI === 1'b1),
      posedge RD &&& (ENABLE_CK_AND_D_AND_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold SD-LH RD-LH
      $hold(posedge RD &&& (ENABLE_CK_AND_D_AND_SE_AND_SI === 1'b1),
      posedge SD &&& (ENABLE_CK_AND_D_AND_SE_AND_SI === 1'b1),1.0);
      
      // setup SD-LH RD-LH
      $setup(posedge SD &&& (ENABLE_CK_AND_D_AND_SE_AND_SI === 1'b1),
      posedge RD &&& (ENABLE_CK_AND_D_AND_SE_AND_SI === 1'b1),1.0);
      
      $width(negedge SD &&& (ENABLE_NOT_CK_AND_NOT_D_AND_RD_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge SD &&& (ENABLE_NOT_CK_AND_NOT_D_AND_RD_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge SD &&& (ENABLE_NOT_CK_AND_NOT_D_AND_RD_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge SD &&& (ENABLE_NOT_CK_AND_NOT_D_AND_RD_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge SD &&& (ENABLE_NOT_CK_AND_D_AND_RD_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge SD &&& (ENABLE_NOT_CK_AND_D_AND_RD_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge SD &&& (ENABLE_NOT_CK_AND_D_AND_RD_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge SD &&& (ENABLE_NOT_CK_AND_D_AND_RD_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge SD &&& (ENABLE_CK_AND_NOT_D_AND_RD_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge SD &&& (ENABLE_CK_AND_NOT_D_AND_RD_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge SD &&& (ENABLE_CK_AND_NOT_D_AND_RD_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge SD &&& (ENABLE_CK_AND_NOT_D_AND_RD_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge SD &&& (ENABLE_CK_AND_D_AND_RD_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge SD &&& (ENABLE_CK_AND_D_AND_RD_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge SD &&& (ENABLE_CK_AND_D_AND_RD_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge SD &&& (ENABLE_CK_AND_D_AND_RD_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      // hold SE-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D_AND_RD_AND_SD_AND_SI === 1'b1),
      negedge SE &&& (ENABLE_NOT_D_AND_RD_AND_SD_AND_SI === 1'b1),1.0);
      
      // hold SE-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D_AND_RD_AND_SD_AND_SI === 1'b1),
      posedge SE &&& (ENABLE_NOT_D_AND_RD_AND_SD_AND_SI === 1'b1),1.0);
      
      // setup SE-HL CK-LH
      $setup(negedge SE &&& (ENABLE_NOT_D_AND_RD_AND_SD_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_RD_AND_SD_AND_SI === 1'b1),1.0);
      
      // setup SE-LH CK-LH
      $setup(posedge SE &&& (ENABLE_NOT_D_AND_RD_AND_SD_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_RD_AND_SD_AND_SI === 1'b1),1.0);
      
      // hold SE-HL CK-LH
      $hold(posedge CK &&& (ENABLE_D_AND_RD_AND_SD_AND_NOT_SI === 1'b1),
      negedge SE &&& (ENABLE_D_AND_RD_AND_SD_AND_NOT_SI === 1'b1),1.0);
      
      // hold SE-LH CK-LH
      $hold(posedge CK &&& (ENABLE_D_AND_RD_AND_SD_AND_NOT_SI === 1'b1),
      posedge SE &&& (ENABLE_D_AND_RD_AND_SD_AND_NOT_SI === 1'b1),1.0);
      
      // setup SE-HL CK-LH
      $setup(negedge SE &&& (ENABLE_D_AND_RD_AND_SD_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_D_AND_RD_AND_SD_AND_NOT_SI === 1'b1),1.0);
      
      // setup SE-LH CK-LH
      $setup(posedge SE &&& (ENABLE_D_AND_RD_AND_SD_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_D_AND_RD_AND_SD_AND_NOT_SI === 1'b1),1.0);
      
      // hold SI-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D_AND_RD_AND_SD_AND_SE === 1'b1),
      negedge SI &&& (ENABLE_NOT_D_AND_RD_AND_SD_AND_SE === 1'b1),1.0);
      
      // hold SI-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D_AND_RD_AND_SD_AND_SE === 1'b1),
      posedge SI &&& (ENABLE_NOT_D_AND_RD_AND_SD_AND_SE === 1'b1),1.0);
      
      // setup SI-HL CK-LH
      $setup(negedge SI &&& (ENABLE_NOT_D_AND_RD_AND_SD_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_RD_AND_SD_AND_SE === 1'b1),1.0);
      
      // setup SI-LH CK-LH
      $setup(posedge SI &&& (ENABLE_NOT_D_AND_RD_AND_SD_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_RD_AND_SD_AND_SE === 1'b1),1.0);
      
      // hold SI-HL CK-LH
      $hold(posedge CK &&& (ENABLE_D_AND_RD_AND_SD_AND_SE === 1'b1),
      negedge SI &&& (ENABLE_D_AND_RD_AND_SD_AND_SE === 1'b1),1.0);
      
      // hold SI-LH CK-LH
      $hold(posedge CK &&& (ENABLE_D_AND_RD_AND_SD_AND_SE === 1'b1),
      posedge SI &&& (ENABLE_D_AND_RD_AND_SD_AND_SE === 1'b1),1.0);
      
      // setup SI-HL CK-LH
      $setup(negedge SI &&& (ENABLE_D_AND_RD_AND_SD_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_D_AND_RD_AND_SD_AND_SE === 1'b1),1.0);
      
      // setup SI-LH CK-LH
      $setup(posedge SI &&& (ENABLE_D_AND_RD_AND_SD_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_D_AND_RD_AND_SD_AND_SE === 1'b1),1.0);
      
      // mpw CK_lh 
      $width(posedge CK,1.0,0);
      
      // mpw CK_hl 
      $width(negedge CK,1.0,0);
      
      // mpw RD_hl 
      $width(negedge RD,1.0,0);
      
      // mpw SD_hl 
      $width(negedge SD,1.0,0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_FSDPRBSBQ_V2LP_2( Q, CK, D, SI, SE, RD, SD );
input CK, D, RD, SD, SE, SI;
output Q;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_FSDPRBSBQ_V2LP_2_func SAEDRVT14_FSDPRBSBQ_V2LP_2_behav_inst(.Q(Q),.CK(CK),.D(D),.SI(SI),.SE(SE),.RD(RD),.SD(SD));
`else
   SAEDRVT14_FSDPRBSBQ_V2LP_2_func SAEDRVT14_FSDPRBSBQ_V2LP_2_inst(.Q(Q),.CK(CK),.D(D),.SI(SI),.SE(SE),.RD(RD),.SD(SD));
   // spec_gates_begin
   not MGM_G0(MGM_W0,D);
   and MGM_G1(MGM_W1,RD,MGM_W0);
   and MGM_G2(MGM_W2,SD,MGM_W1);
   not MGM_G3(MGM_W3,SE);
   and MGM_G4(MGM_W4,MGM_W3,MGM_W2);
   not MGM_G5(MGM_W5,SI);
   and MGM_G6(ENABLE_NOT_D_AND_RD_AND_SD_AND_NOT_SE_AND_NOT_SI,MGM_W5,MGM_W4);
   not MGM_G7(MGM_W6,D);
   and MGM_G8(MGM_W7,RD,MGM_W6);
   and MGM_G9(MGM_W8,SD,MGM_W7);
   not MGM_G10(MGM_W9,SE);
   and MGM_G11(MGM_W10,MGM_W9,MGM_W8);
   and MGM_G12(ENABLE_NOT_D_AND_RD_AND_SD_AND_NOT_SE_AND_SI,SI,MGM_W10);
   not MGM_G13(MGM_W11,D);
   and MGM_G14(MGM_W12,RD,MGM_W11);
   and MGM_G15(MGM_W13,SD,MGM_W12);
   and MGM_G16(MGM_W14,SE,MGM_W13);
   not MGM_G17(MGM_W15,SI);
   and MGM_G18(ENABLE_NOT_D_AND_RD_AND_SD_AND_SE_AND_NOT_SI,MGM_W15,MGM_W14);
   not MGM_G19(MGM_W16,D);
   and MGM_G20(MGM_W17,RD,MGM_W16);
   and MGM_G21(MGM_W18,SD,MGM_W17);
   and MGM_G22(MGM_W19,SE,MGM_W18);
   and MGM_G23(ENABLE_NOT_D_AND_RD_AND_SD_AND_SE_AND_SI,SI,MGM_W19);
   and MGM_G24(MGM_W20,RD,D);
   and MGM_G25(MGM_W21,SD,MGM_W20);
   not MGM_G26(MGM_W22,SE);
   and MGM_G27(MGM_W23,MGM_W22,MGM_W21);
   not MGM_G28(MGM_W24,SI);
   and MGM_G29(ENABLE_D_AND_RD_AND_SD_AND_NOT_SE_AND_NOT_SI,MGM_W24,MGM_W23);
   and MGM_G30(MGM_W25,RD,D);
   and MGM_G31(MGM_W26,SD,MGM_W25);
   not MGM_G32(MGM_W27,SE);
   and MGM_G33(MGM_W28,MGM_W27,MGM_W26);
   and MGM_G34(ENABLE_D_AND_RD_AND_SD_AND_NOT_SE_AND_SI,SI,MGM_W28);
   and MGM_G35(MGM_W29,RD,D);
   and MGM_G36(MGM_W30,SD,MGM_W29);
   and MGM_G37(MGM_W31,SE,MGM_W30);
   not MGM_G38(MGM_W32,SI);
   and MGM_G39(ENABLE_D_AND_RD_AND_SD_AND_SE_AND_NOT_SI,MGM_W32,MGM_W31);
   and MGM_G40(MGM_W33,RD,D);
   and MGM_G41(MGM_W34,SD,MGM_W33);
   and MGM_G42(MGM_W35,SE,MGM_W34);
   and MGM_G43(ENABLE_D_AND_RD_AND_SD_AND_SE_AND_SI,SI,MGM_W35);
   and MGM_G44(MGM_W36,SD,RD);
   not MGM_G45(MGM_W37,SE);
   and MGM_G46(MGM_W38,MGM_W37,MGM_W36);
   not MGM_G47(MGM_W39,SI);
   and MGM_G48(ENABLE_RD_AND_SD_AND_NOT_SE_AND_NOT_SI,MGM_W39,MGM_W38);
   and MGM_G49(MGM_W40,SD,RD);
   not MGM_G50(MGM_W41,SE);
   and MGM_G51(MGM_W42,MGM_W41,MGM_W40);
   and MGM_G52(ENABLE_RD_AND_SD_AND_NOT_SE_AND_SI,SI,MGM_W42);
   not MGM_G53(MGM_W43,D);
   and MGM_G54(MGM_W44,SD,MGM_W43);
   and MGM_G55(MGM_W45,SE,MGM_W44);
   and MGM_G56(ENABLE_NOT_D_AND_SD_AND_SE_AND_SI,SI,MGM_W45);
   and MGM_G57(MGM_W46,SD,D);
   not MGM_G58(MGM_W47,SE);
   and MGM_G59(MGM_W48,MGM_W47,MGM_W46);
   not MGM_G60(MGM_W49,SI);
   and MGM_G61(ENABLE_D_AND_SD_AND_NOT_SE_AND_NOT_SI,MGM_W49,MGM_W48);
   and MGM_G62(MGM_W50,SD,D);
   not MGM_G63(MGM_W51,SE);
   and MGM_G64(MGM_W52,MGM_W51,MGM_W50);
   and MGM_G65(ENABLE_D_AND_SD_AND_NOT_SE_AND_SI,SI,MGM_W52);
   and MGM_G66(MGM_W53,SD,D);
   and MGM_G67(MGM_W54,SE,MGM_W53);
   and MGM_G68(ENABLE_D_AND_SD_AND_SE_AND_SI,SI,MGM_W54);
   not MGM_G69(MGM_W55,CK);
   not MGM_G70(MGM_W56,D);
   and MGM_G71(MGM_W57,MGM_W56,MGM_W55);
   and MGM_G72(MGM_W58,SD,MGM_W57);
   not MGM_G73(MGM_W59,SE);
   and MGM_G74(MGM_W60,MGM_W59,MGM_W58);
   not MGM_G75(MGM_W61,SI);
   and MGM_G76(ENABLE_NOT_CK_AND_NOT_D_AND_SD_AND_NOT_SE_AND_NOT_SI,MGM_W61,MGM_W60);
   not MGM_G77(MGM_W62,CK);
   not MGM_G78(MGM_W63,D);
   and MGM_G79(MGM_W64,MGM_W63,MGM_W62);
   and MGM_G80(MGM_W65,SD,MGM_W64);
   not MGM_G81(MGM_W66,SE);
   and MGM_G82(MGM_W67,MGM_W66,MGM_W65);
   and MGM_G83(ENABLE_NOT_CK_AND_NOT_D_AND_SD_AND_NOT_SE_AND_SI,SI,MGM_W67);
   not MGM_G84(MGM_W68,CK);
   not MGM_G85(MGM_W69,D);
   and MGM_G86(MGM_W70,MGM_W69,MGM_W68);
   and MGM_G87(MGM_W71,SD,MGM_W70);
   and MGM_G88(MGM_W72,SE,MGM_W71);
   not MGM_G89(MGM_W73,SI);
   and MGM_G90(ENABLE_NOT_CK_AND_NOT_D_AND_SD_AND_SE_AND_NOT_SI,MGM_W73,MGM_W72);
   not MGM_G91(MGM_W74,CK);
   not MGM_G92(MGM_W75,D);
   and MGM_G93(MGM_W76,MGM_W75,MGM_W74);
   and MGM_G94(MGM_W77,SD,MGM_W76);
   and MGM_G95(MGM_W78,SE,MGM_W77);
   and MGM_G96(ENABLE_NOT_CK_AND_NOT_D_AND_SD_AND_SE_AND_SI,SI,MGM_W78);
   not MGM_G97(MGM_W79,CK);
   and MGM_G98(MGM_W80,D,MGM_W79);
   and MGM_G99(MGM_W81,SD,MGM_W80);
   not MGM_G100(MGM_W82,SE);
   and MGM_G101(MGM_W83,MGM_W82,MGM_W81);
   not MGM_G102(MGM_W84,SI);
   and MGM_G103(ENABLE_NOT_CK_AND_D_AND_SD_AND_NOT_SE_AND_NOT_SI,MGM_W84,MGM_W83);
   not MGM_G104(MGM_W85,CK);
   and MGM_G105(MGM_W86,D,MGM_W85);
   and MGM_G106(MGM_W87,SD,MGM_W86);
   not MGM_G107(MGM_W88,SE);
   and MGM_G108(MGM_W89,MGM_W88,MGM_W87);
   and MGM_G109(ENABLE_NOT_CK_AND_D_AND_SD_AND_NOT_SE_AND_SI,SI,MGM_W89);
   not MGM_G110(MGM_W90,CK);
   and MGM_G111(MGM_W91,D,MGM_W90);
   and MGM_G112(MGM_W92,SD,MGM_W91);
   and MGM_G113(MGM_W93,SE,MGM_W92);
   not MGM_G114(MGM_W94,SI);
   and MGM_G115(ENABLE_NOT_CK_AND_D_AND_SD_AND_SE_AND_NOT_SI,MGM_W94,MGM_W93);
   not MGM_G116(MGM_W95,CK);
   and MGM_G117(MGM_W96,D,MGM_W95);
   and MGM_G118(MGM_W97,SD,MGM_W96);
   and MGM_G119(MGM_W98,SE,MGM_W97);
   and MGM_G120(ENABLE_NOT_CK_AND_D_AND_SD_AND_SE_AND_SI,SI,MGM_W98);
   not MGM_G121(MGM_W99,D);
   and MGM_G122(MGM_W100,MGM_W99,CK);
   and MGM_G123(MGM_W101,SD,MGM_W100);
   not MGM_G124(MGM_W102,SE);
   and MGM_G125(MGM_W103,MGM_W102,MGM_W101);
   not MGM_G126(MGM_W104,SI);
   and MGM_G127(ENABLE_CK_AND_NOT_D_AND_SD_AND_NOT_SE_AND_NOT_SI,MGM_W104,MGM_W103);
   not MGM_G128(MGM_W105,D);
   and MGM_G129(MGM_W106,MGM_W105,CK);
   and MGM_G130(MGM_W107,SD,MGM_W106);
   not MGM_G131(MGM_W108,SE);
   and MGM_G132(MGM_W109,MGM_W108,MGM_W107);
   and MGM_G133(ENABLE_CK_AND_NOT_D_AND_SD_AND_NOT_SE_AND_SI,SI,MGM_W109);
   not MGM_G134(MGM_W110,D);
   and MGM_G135(MGM_W111,MGM_W110,CK);
   and MGM_G136(MGM_W112,SD,MGM_W111);
   and MGM_G137(MGM_W113,SE,MGM_W112);
   not MGM_G138(MGM_W114,SI);
   and MGM_G139(ENABLE_CK_AND_NOT_D_AND_SD_AND_SE_AND_NOT_SI,MGM_W114,MGM_W113);
   not MGM_G140(MGM_W115,D);
   and MGM_G141(MGM_W116,MGM_W115,CK);
   and MGM_G142(MGM_W117,SD,MGM_W116);
   and MGM_G143(MGM_W118,SE,MGM_W117);
   and MGM_G144(ENABLE_CK_AND_NOT_D_AND_SD_AND_SE_AND_SI,SI,MGM_W118);
   and MGM_G145(MGM_W119,D,CK);
   and MGM_G146(MGM_W120,SD,MGM_W119);
   not MGM_G147(MGM_W121,SE);
   and MGM_G148(MGM_W122,MGM_W121,MGM_W120);
   not MGM_G149(MGM_W123,SI);
   and MGM_G150(ENABLE_CK_AND_D_AND_SD_AND_NOT_SE_AND_NOT_SI,MGM_W123,MGM_W122);
   and MGM_G151(MGM_W124,D,CK);
   and MGM_G152(MGM_W125,SD,MGM_W124);
   not MGM_G153(MGM_W126,SE);
   and MGM_G154(MGM_W127,MGM_W126,MGM_W125);
   and MGM_G155(ENABLE_CK_AND_D_AND_SD_AND_NOT_SE_AND_SI,SI,MGM_W127);
   and MGM_G156(MGM_W128,D,CK);
   and MGM_G157(MGM_W129,SD,MGM_W128);
   and MGM_G158(MGM_W130,SE,MGM_W129);
   not MGM_G159(MGM_W131,SI);
   and MGM_G160(ENABLE_CK_AND_D_AND_SD_AND_SE_AND_NOT_SI,MGM_W131,MGM_W130);
   and MGM_G161(MGM_W132,D,CK);
   and MGM_G162(MGM_W133,SD,MGM_W132);
   and MGM_G163(MGM_W134,SE,MGM_W133);
   and MGM_G164(ENABLE_CK_AND_D_AND_SD_AND_SE_AND_SI,SI,MGM_W134);
   not MGM_G165(MGM_W135,CK);
   not MGM_G166(MGM_W136,D);
   and MGM_G167(MGM_W137,MGM_W136,MGM_W135);
   not MGM_G168(MGM_W138,SE);
   and MGM_G169(MGM_W139,MGM_W138,MGM_W137);
   not MGM_G170(MGM_W140,SI);
   and MGM_G171(ENABLE_NOT_CK_AND_NOT_D_AND_NOT_SE_AND_NOT_SI,MGM_W140,MGM_W139);
   not MGM_G172(MGM_W141,CK);
   not MGM_G173(MGM_W142,D);
   and MGM_G174(MGM_W143,MGM_W142,MGM_W141);
   not MGM_G175(MGM_W144,SE);
   and MGM_G176(MGM_W145,MGM_W144,MGM_W143);
   and MGM_G177(ENABLE_NOT_CK_AND_NOT_D_AND_NOT_SE_AND_SI,SI,MGM_W145);
   not MGM_G178(MGM_W146,CK);
   not MGM_G179(MGM_W147,D);
   and MGM_G180(MGM_W148,MGM_W147,MGM_W146);
   and MGM_G181(MGM_W149,SE,MGM_W148);
   not MGM_G182(MGM_W150,SI);
   and MGM_G183(ENABLE_NOT_CK_AND_NOT_D_AND_SE_AND_NOT_SI,MGM_W150,MGM_W149);
   not MGM_G184(MGM_W151,CK);
   not MGM_G185(MGM_W152,D);
   and MGM_G186(MGM_W153,MGM_W152,MGM_W151);
   and MGM_G187(MGM_W154,SE,MGM_W153);
   and MGM_G188(ENABLE_NOT_CK_AND_NOT_D_AND_SE_AND_SI,SI,MGM_W154);
   not MGM_G189(MGM_W155,CK);
   and MGM_G190(MGM_W156,D,MGM_W155);
   not MGM_G191(MGM_W157,SE);
   and MGM_G192(MGM_W158,MGM_W157,MGM_W156);
   not MGM_G193(MGM_W159,SI);
   and MGM_G194(ENABLE_NOT_CK_AND_D_AND_NOT_SE_AND_NOT_SI,MGM_W159,MGM_W158);
   not MGM_G195(MGM_W160,CK);
   and MGM_G196(MGM_W161,D,MGM_W160);
   not MGM_G197(MGM_W162,SE);
   and MGM_G198(MGM_W163,MGM_W162,MGM_W161);
   and MGM_G199(ENABLE_NOT_CK_AND_D_AND_NOT_SE_AND_SI,SI,MGM_W163);
   not MGM_G200(MGM_W164,CK);
   and MGM_G201(MGM_W165,D,MGM_W164);
   and MGM_G202(MGM_W166,SE,MGM_W165);
   not MGM_G203(MGM_W167,SI);
   and MGM_G204(ENABLE_NOT_CK_AND_D_AND_SE_AND_NOT_SI,MGM_W167,MGM_W166);
   not MGM_G205(MGM_W168,CK);
   and MGM_G206(MGM_W169,D,MGM_W168);
   and MGM_G207(MGM_W170,SE,MGM_W169);
   and MGM_G208(ENABLE_NOT_CK_AND_D_AND_SE_AND_SI,SI,MGM_W170);
   not MGM_G209(MGM_W171,D);
   and MGM_G210(MGM_W172,MGM_W171,CK);
   not MGM_G211(MGM_W173,SE);
   and MGM_G212(MGM_W174,MGM_W173,MGM_W172);
   not MGM_G213(MGM_W175,SI);
   and MGM_G214(ENABLE_CK_AND_NOT_D_AND_NOT_SE_AND_NOT_SI,MGM_W175,MGM_W174);
   not MGM_G215(MGM_W176,D);
   and MGM_G216(MGM_W177,MGM_W176,CK);
   not MGM_G217(MGM_W178,SE);
   and MGM_G218(MGM_W179,MGM_W178,MGM_W177);
   and MGM_G219(ENABLE_CK_AND_NOT_D_AND_NOT_SE_AND_SI,SI,MGM_W179);
   not MGM_G220(MGM_W180,D);
   and MGM_G221(MGM_W181,MGM_W180,CK);
   and MGM_G222(MGM_W182,SE,MGM_W181);
   not MGM_G223(MGM_W183,SI);
   and MGM_G224(ENABLE_CK_AND_NOT_D_AND_SE_AND_NOT_SI,MGM_W183,MGM_W182);
   not MGM_G225(MGM_W184,D);
   and MGM_G226(MGM_W185,MGM_W184,CK);
   and MGM_G227(MGM_W186,SE,MGM_W185);
   and MGM_G228(ENABLE_CK_AND_NOT_D_AND_SE_AND_SI,SI,MGM_W186);
   and MGM_G229(MGM_W187,D,CK);
   not MGM_G230(MGM_W188,SE);
   and MGM_G231(MGM_W189,MGM_W188,MGM_W187);
   not MGM_G232(MGM_W190,SI);
   and MGM_G233(ENABLE_CK_AND_D_AND_NOT_SE_AND_NOT_SI,MGM_W190,MGM_W189);
   and MGM_G234(MGM_W191,D,CK);
   not MGM_G235(MGM_W192,SE);
   and MGM_G236(MGM_W193,MGM_W192,MGM_W191);
   and MGM_G237(ENABLE_CK_AND_D_AND_NOT_SE_AND_SI,SI,MGM_W193);
   and MGM_G238(MGM_W194,D,CK);
   and MGM_G239(MGM_W195,SE,MGM_W194);
   not MGM_G240(MGM_W196,SI);
   and MGM_G241(ENABLE_CK_AND_D_AND_SE_AND_NOT_SI,MGM_W196,MGM_W195);
   and MGM_G242(MGM_W197,D,CK);
   and MGM_G243(MGM_W198,SE,MGM_W197);
   and MGM_G244(ENABLE_CK_AND_D_AND_SE_AND_SI,SI,MGM_W198);
   not MGM_G245(MGM_W199,D);
   and MGM_G246(MGM_W200,RD,MGM_W199);
   not MGM_G247(MGM_W201,SE);
   and MGM_G248(MGM_W202,MGM_W201,MGM_W200);
   not MGM_G249(MGM_W203,SI);
   and MGM_G250(ENABLE_NOT_D_AND_RD_AND_NOT_SE_AND_NOT_SI,MGM_W203,MGM_W202);
   not MGM_G251(MGM_W204,D);
   and MGM_G252(MGM_W205,RD,MGM_W204);
   not MGM_G253(MGM_W206,SE);
   and MGM_G254(MGM_W207,MGM_W206,MGM_W205);
   and MGM_G255(ENABLE_NOT_D_AND_RD_AND_NOT_SE_AND_SI,SI,MGM_W207);
   not MGM_G256(MGM_W208,D);
   and MGM_G257(MGM_W209,RD,MGM_W208);
   and MGM_G258(MGM_W210,SE,MGM_W209);
   not MGM_G259(MGM_W211,SI);
   and MGM_G260(ENABLE_NOT_D_AND_RD_AND_SE_AND_NOT_SI,MGM_W211,MGM_W210);
   and MGM_G261(MGM_W212,RD,D);
   and MGM_G262(MGM_W213,SE,MGM_W212);
   not MGM_G263(MGM_W214,SI);
   and MGM_G264(ENABLE_D_AND_RD_AND_SE_AND_NOT_SI,MGM_W214,MGM_W213);
   not MGM_G265(MGM_W215,CK);
   not MGM_G266(MGM_W216,D);
   and MGM_G267(MGM_W217,MGM_W216,MGM_W215);
   and MGM_G268(MGM_W218,RD,MGM_W217);
   not MGM_G269(MGM_W219,SE);
   and MGM_G270(MGM_W220,MGM_W219,MGM_W218);
   not MGM_G271(MGM_W221,SI);
   and MGM_G272(ENABLE_NOT_CK_AND_NOT_D_AND_RD_AND_NOT_SE_AND_NOT_SI,MGM_W221,MGM_W220);
   not MGM_G273(MGM_W222,CK);
   not MGM_G274(MGM_W223,D);
   and MGM_G275(MGM_W224,MGM_W223,MGM_W222);
   and MGM_G276(MGM_W225,RD,MGM_W224);
   not MGM_G277(MGM_W226,SE);
   and MGM_G278(MGM_W227,MGM_W226,MGM_W225);
   and MGM_G279(ENABLE_NOT_CK_AND_NOT_D_AND_RD_AND_NOT_SE_AND_SI,SI,MGM_W227);
   not MGM_G280(MGM_W228,CK);
   not MGM_G281(MGM_W229,D);
   and MGM_G282(MGM_W230,MGM_W229,MGM_W228);
   and MGM_G283(MGM_W231,RD,MGM_W230);
   and MGM_G284(MGM_W232,SE,MGM_W231);
   not MGM_G285(MGM_W233,SI);
   and MGM_G286(ENABLE_NOT_CK_AND_NOT_D_AND_RD_AND_SE_AND_NOT_SI,MGM_W233,MGM_W232);
   not MGM_G287(MGM_W234,CK);
   not MGM_G288(MGM_W235,D);
   and MGM_G289(MGM_W236,MGM_W235,MGM_W234);
   and MGM_G290(MGM_W237,RD,MGM_W236);
   and MGM_G291(MGM_W238,SE,MGM_W237);
   and MGM_G292(ENABLE_NOT_CK_AND_NOT_D_AND_RD_AND_SE_AND_SI,SI,MGM_W238);
   not MGM_G293(MGM_W239,CK);
   and MGM_G294(MGM_W240,D,MGM_W239);
   and MGM_G295(MGM_W241,RD,MGM_W240);
   not MGM_G296(MGM_W242,SE);
   and MGM_G297(MGM_W243,MGM_W242,MGM_W241);
   not MGM_G298(MGM_W244,SI);
   and MGM_G299(ENABLE_NOT_CK_AND_D_AND_RD_AND_NOT_SE_AND_NOT_SI,MGM_W244,MGM_W243);
   not MGM_G300(MGM_W245,CK);
   and MGM_G301(MGM_W246,D,MGM_W245);
   and MGM_G302(MGM_W247,RD,MGM_W246);
   not MGM_G303(MGM_W248,SE);
   and MGM_G304(MGM_W249,MGM_W248,MGM_W247);
   and MGM_G305(ENABLE_NOT_CK_AND_D_AND_RD_AND_NOT_SE_AND_SI,SI,MGM_W249);
   not MGM_G306(MGM_W250,CK);
   and MGM_G307(MGM_W251,D,MGM_W250);
   and MGM_G308(MGM_W252,RD,MGM_W251);
   and MGM_G309(MGM_W253,SE,MGM_W252);
   not MGM_G310(MGM_W254,SI);
   and MGM_G311(ENABLE_NOT_CK_AND_D_AND_RD_AND_SE_AND_NOT_SI,MGM_W254,MGM_W253);
   not MGM_G312(MGM_W255,CK);
   and MGM_G313(MGM_W256,D,MGM_W255);
   and MGM_G314(MGM_W257,RD,MGM_W256);
   and MGM_G315(MGM_W258,SE,MGM_W257);
   and MGM_G316(ENABLE_NOT_CK_AND_D_AND_RD_AND_SE_AND_SI,SI,MGM_W258);
   not MGM_G317(MGM_W259,D);
   and MGM_G318(MGM_W260,MGM_W259,CK);
   and MGM_G319(MGM_W261,RD,MGM_W260);
   not MGM_G320(MGM_W262,SE);
   and MGM_G321(MGM_W263,MGM_W262,MGM_W261);
   not MGM_G322(MGM_W264,SI);
   and MGM_G323(ENABLE_CK_AND_NOT_D_AND_RD_AND_NOT_SE_AND_NOT_SI,MGM_W264,MGM_W263);
   not MGM_G324(MGM_W265,D);
   and MGM_G325(MGM_W266,MGM_W265,CK);
   and MGM_G326(MGM_W267,RD,MGM_W266);
   not MGM_G327(MGM_W268,SE);
   and MGM_G328(MGM_W269,MGM_W268,MGM_W267);
   and MGM_G329(ENABLE_CK_AND_NOT_D_AND_RD_AND_NOT_SE_AND_SI,SI,MGM_W269);
   not MGM_G330(MGM_W270,D);
   and MGM_G331(MGM_W271,MGM_W270,CK);
   and MGM_G332(MGM_W272,RD,MGM_W271);
   and MGM_G333(MGM_W273,SE,MGM_W272);
   not MGM_G334(MGM_W274,SI);
   and MGM_G335(ENABLE_CK_AND_NOT_D_AND_RD_AND_SE_AND_NOT_SI,MGM_W274,MGM_W273);
   not MGM_G336(MGM_W275,D);
   and MGM_G337(MGM_W276,MGM_W275,CK);
   and MGM_G338(MGM_W277,RD,MGM_W276);
   and MGM_G339(MGM_W278,SE,MGM_W277);
   and MGM_G340(ENABLE_CK_AND_NOT_D_AND_RD_AND_SE_AND_SI,SI,MGM_W278);
   and MGM_G341(MGM_W279,D,CK);
   and MGM_G342(MGM_W280,RD,MGM_W279);
   not MGM_G343(MGM_W281,SE);
   and MGM_G344(MGM_W282,MGM_W281,MGM_W280);
   not MGM_G345(MGM_W283,SI);
   and MGM_G346(ENABLE_CK_AND_D_AND_RD_AND_NOT_SE_AND_NOT_SI,MGM_W283,MGM_W282);
   and MGM_G347(MGM_W284,D,CK);
   and MGM_G348(MGM_W285,RD,MGM_W284);
   not MGM_G349(MGM_W286,SE);
   and MGM_G350(MGM_W287,MGM_W286,MGM_W285);
   and MGM_G351(ENABLE_CK_AND_D_AND_RD_AND_NOT_SE_AND_SI,SI,MGM_W287);
   and MGM_G352(MGM_W288,D,CK);
   and MGM_G353(MGM_W289,RD,MGM_W288);
   and MGM_G354(MGM_W290,SE,MGM_W289);
   not MGM_G355(MGM_W291,SI);
   and MGM_G356(ENABLE_CK_AND_D_AND_RD_AND_SE_AND_NOT_SI,MGM_W291,MGM_W290);
   and MGM_G357(MGM_W292,D,CK);
   and MGM_G358(MGM_W293,RD,MGM_W292);
   and MGM_G359(MGM_W294,SE,MGM_W293);
   and MGM_G360(ENABLE_CK_AND_D_AND_RD_AND_SE_AND_SI,SI,MGM_W294);
   not MGM_G361(MGM_W295,D);
   and MGM_G362(MGM_W296,RD,MGM_W295);
   and MGM_G363(MGM_W297,SD,MGM_W296);
   and MGM_G364(ENABLE_NOT_D_AND_RD_AND_SD_AND_SI,SI,MGM_W297);
   and MGM_G365(MGM_W298,RD,D);
   and MGM_G366(MGM_W299,SD,MGM_W298);
   not MGM_G367(MGM_W300,SI);
   and MGM_G368(ENABLE_D_AND_RD_AND_SD_AND_NOT_SI,MGM_W300,MGM_W299);
   not MGM_G369(MGM_W301,D);
   and MGM_G370(MGM_W302,RD,MGM_W301);
   and MGM_G371(MGM_W303,SD,MGM_W302);
   and MGM_G372(ENABLE_NOT_D_AND_RD_AND_SD_AND_SE,SE,MGM_W303);
   and MGM_G373(MGM_W304,RD,D);
   and MGM_G374(MGM_W305,SD,MGM_W304);
   and MGM_G375(ENABLE_D_AND_RD_AND_SD_AND_SE,SE,MGM_W305);
   // spec_gates_end
   // specify_block_begin
   specify

      if(D===1'b0 && SI===1'b1)
      // seq arc CK --> Q
      (posedge CK => (Q : SE))  = (1.0,1.0);
      
      if(SE===1'b0 && SI===1'b0)
      // seq arc CK --> Q
      (posedge CK => (Q : D))  = (1.0,1.0);
      
      if(D===1'b1 && SE===1'b0 && SI===1'b1 || D===1'b0 && SE===1'b1 && SI===1'b0)
      // seq arc CK --> Q
      (posedge CK => (Q : D))  = (1.0,1.0);
      
      if(D===1'b1 && SE===1'b1)
      // seq arc CK --> Q
      (posedge CK => (Q : SI))  = (1.0,1.0);
      
      ifnone
      // seq arc CK --> Q
      (posedge CK => (Q : D))  = (1.0,1.0);
      
      if(CK===1'b0 && D===1'b0 && SD===1'b0 && SE===1'b0 && SI===1'b0)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b0 && D===1'b0 && SD===1'b0 && SE===1'b0 && SI===1'b1)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b0 && D===1'b0 && SD===1'b0 && SE===1'b1 && SI===1'b0)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b0 && D===1'b0 && SD===1'b0 && SE===1'b1 && SI===1'b1)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b0 && D===1'b0 && SD===1'b1 && SE===1'b0 && SI===1'b0)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b0 && D===1'b0 && SD===1'b1 && SE===1'b0 && SI===1'b1)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b0 && D===1'b0 && SD===1'b1 && SE===1'b1 && SI===1'b0)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b0 && D===1'b0 && SD===1'b1 && SE===1'b1 && SI===1'b1)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b0 && D===1'b1 && SD===1'b0 && SE===1'b0 && SI===1'b0)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b0 && D===1'b1 && SD===1'b0 && SE===1'b0 && SI===1'b1)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b0 && D===1'b1 && SD===1'b0 && SE===1'b1 && SI===1'b0)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b0 && D===1'b1 && SD===1'b0 && SE===1'b1 && SI===1'b1)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b0 && D===1'b1 && SD===1'b1 && SE===1'b0 && SI===1'b0)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b0 && D===1'b1 && SD===1'b1 && SE===1'b0 && SI===1'b1)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b0 && D===1'b1 && SD===1'b1 && SE===1'b1 && SI===1'b0)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b0 && D===1'b1 && SD===1'b1 && SE===1'b1 && SI===1'b1)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b1 && D===1'b0 && SD===1'b0 && SE===1'b0 && SI===1'b0)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b1 && D===1'b0 && SD===1'b0 && SE===1'b0 && SI===1'b1)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b1 && D===1'b0 && SD===1'b0 && SE===1'b1 && SI===1'b0)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b1 && D===1'b0 && SD===1'b0 && SE===1'b1 && SI===1'b1)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b1 && D===1'b0 && SD===1'b1 && SE===1'b0 && SI===1'b0)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b1 && D===1'b0 && SD===1'b1 && SE===1'b0 && SI===1'b1)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b1 && D===1'b0 && SD===1'b1 && SE===1'b1 && SI===1'b0)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b1 && D===1'b0 && SD===1'b1 && SE===1'b1 && SI===1'b1)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b1 && D===1'b1 && SD===1'b0 && SE===1'b0 && SI===1'b0)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b1 && D===1'b1 && SD===1'b0 && SE===1'b0 && SI===1'b1)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b1 && D===1'b1 && SD===1'b0 && SE===1'b1 && SI===1'b0)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b1 && D===1'b1 && SD===1'b0 && SE===1'b1 && SI===1'b1)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b1 && D===1'b1 && SD===1'b1 && SE===1'b0 && SI===1'b0)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b1 && D===1'b1 && SD===1'b1 && SE===1'b0 && SI===1'b1)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b1 && D===1'b1 && SD===1'b1 && SE===1'b1 && SI===1'b0)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b1 && D===1'b1 && SD===1'b1 && SE===1'b1 && SI===1'b1)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      ifnone
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b0 && D===1'b0 && SE===1'b0 && SI===1'b0)
      // seq arc SD --> Q
      (SD => Q)  = (1.0,1.0);
      
      if(CK===1'b0 && D===1'b0 && SE===1'b0 && SI===1'b1)
      // seq arc SD --> Q
      (SD => Q)  = (1.0,1.0);
      
      if(CK===1'b0 && D===1'b0 && SE===1'b1 && SI===1'b0)
      // seq arc SD --> Q
      (SD => Q)  = (1.0,1.0);
      
      if(CK===1'b0 && D===1'b0 && SE===1'b1 && SI===1'b1)
      // seq arc SD --> Q
      (SD => Q)  = (1.0,1.0);
      
      if(CK===1'b0 && D===1'b1 && SE===1'b0 && SI===1'b0)
      // seq arc SD --> Q
      (SD => Q)  = (1.0,1.0);
      
      if(CK===1'b0 && D===1'b1 && SE===1'b0 && SI===1'b1)
      // seq arc SD --> Q
      (SD => Q)  = (1.0,1.0);
      
      if(CK===1'b0 && D===1'b1 && SE===1'b1 && SI===1'b0)
      // seq arc SD --> Q
      (SD => Q)  = (1.0,1.0);
      
      if(CK===1'b0 && D===1'b1 && SE===1'b1 && SI===1'b1)
      // seq arc SD --> Q
      (SD => Q)  = (1.0,1.0);
      
      if(CK===1'b1 && D===1'b0 && SE===1'b0 && SI===1'b0)
      // seq arc SD --> Q
      (SD => Q)  = (1.0,1.0);
      
      if(CK===1'b1 && D===1'b0 && SE===1'b0 && SI===1'b1)
      // seq arc SD --> Q
      (SD => Q)  = (1.0,1.0);
      
      if(CK===1'b1 && D===1'b0 && SE===1'b1 && SI===1'b0)
      // seq arc SD --> Q
      (SD => Q)  = (1.0,1.0);
      
      if(CK===1'b1 && D===1'b0 && SE===1'b1 && SI===1'b1)
      // seq arc SD --> Q
      (SD => Q)  = (1.0,1.0);
      
      if(CK===1'b1 && D===1'b1 && SE===1'b0 && SI===1'b0)
      // seq arc SD --> Q
      (SD => Q)  = (1.0,1.0);
      
      if(CK===1'b1 && D===1'b1 && SE===1'b0 && SI===1'b1)
      // seq arc SD --> Q
      (SD => Q)  = (1.0,1.0);
      
      if(CK===1'b1 && D===1'b1 && SE===1'b1 && SI===1'b0)
      // seq arc SD --> Q
      (SD => Q)  = (1.0,1.0);
      
      if(CK===1'b1 && D===1'b1 && SE===1'b1 && SI===1'b1)
      // seq arc SD --> Q
      (SD => Q)  = (1.0,1.0);
      
      ifnone
      // seq arc SD --> Q
      (SD => Q)  = (1.0,1.0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_RD_AND_SD_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_RD_AND_SD_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_RD_AND_SD_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_RD_AND_SD_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_RD_AND_SD_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_RD_AND_SD_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_RD_AND_SD_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_RD_AND_SD_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_RD_AND_SD_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_RD_AND_SD_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_RD_AND_SD_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_RD_AND_SD_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_RD_AND_SD_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_RD_AND_SD_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_RD_AND_SD_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_RD_AND_SD_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      // hold D-HL CK-LH
      $hold(posedge CK &&& (ENABLE_RD_AND_SD_AND_NOT_SE_AND_NOT_SI === 1'b1),
      negedge D &&& (ENABLE_RD_AND_SD_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold D-LH CK-LH
      $hold(posedge CK &&& (ENABLE_RD_AND_SD_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge D &&& (ENABLE_RD_AND_SD_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup D-HL CK-LH
      $setup(negedge D &&& (ENABLE_RD_AND_SD_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_RD_AND_SD_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup D-LH CK-LH
      $setup(posedge D &&& (ENABLE_RD_AND_SD_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_RD_AND_SD_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold D-HL CK-LH
      $hold(posedge CK &&& (ENABLE_RD_AND_SD_AND_NOT_SE_AND_SI === 1'b1),
      negedge D &&& (ENABLE_RD_AND_SD_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // hold D-LH CK-LH
      $hold(posedge CK &&& (ENABLE_RD_AND_SD_AND_NOT_SE_AND_SI === 1'b1),
      posedge D &&& (ENABLE_RD_AND_SD_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // setup D-HL CK-LH
      $setup(negedge D &&& (ENABLE_RD_AND_SD_AND_NOT_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_RD_AND_SD_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // setup D-LH CK-LH
      $setup(posedge D &&& (ENABLE_RD_AND_SD_AND_NOT_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_RD_AND_SD_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // recovery RD-LH CK-LH
      $recovery(posedge RD &&& (ENABLE_NOT_D_AND_SD_AND_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_SD_AND_SE_AND_SI === 1'b1),1.0);
      
      // removal RD-LH CK-LH
      $removal(posedge RD &&& (ENABLE_NOT_D_AND_SD_AND_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_SD_AND_SE_AND_SI === 1'b1),1.0);
      
      // recovery RD-LH CK-LH
      $recovery(posedge RD &&& (ENABLE_D_AND_SD_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_D_AND_SD_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // removal RD-LH CK-LH
      $removal(posedge RD &&& (ENABLE_D_AND_SD_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_D_AND_SD_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // recovery RD-LH CK-LH
      $recovery(posedge RD &&& (ENABLE_D_AND_SD_AND_NOT_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_D_AND_SD_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // removal RD-LH CK-LH
      $removal(posedge RD &&& (ENABLE_D_AND_SD_AND_NOT_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_D_AND_SD_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // recovery RD-LH CK-LH
      $recovery(posedge RD &&& (ENABLE_D_AND_SD_AND_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_D_AND_SD_AND_SE_AND_SI === 1'b1),1.0);
      
      // removal RD-LH CK-LH
      $removal(posedge RD &&& (ENABLE_D_AND_SD_AND_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_D_AND_SD_AND_SE_AND_SI === 1'b1),1.0);
      
      $width(negedge RD &&& (ENABLE_NOT_CK_AND_NOT_D_AND_SD_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge RD &&& (ENABLE_NOT_CK_AND_NOT_D_AND_SD_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge RD &&& (ENABLE_NOT_CK_AND_NOT_D_AND_SD_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge RD &&& (ENABLE_NOT_CK_AND_NOT_D_AND_SD_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge RD &&& (ENABLE_NOT_CK_AND_D_AND_SD_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge RD &&& (ENABLE_NOT_CK_AND_D_AND_SD_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge RD &&& (ENABLE_NOT_CK_AND_D_AND_SD_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge RD &&& (ENABLE_NOT_CK_AND_D_AND_SD_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge RD &&& (ENABLE_CK_AND_NOT_D_AND_SD_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge RD &&& (ENABLE_CK_AND_NOT_D_AND_SD_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge RD &&& (ENABLE_CK_AND_NOT_D_AND_SD_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge RD &&& (ENABLE_CK_AND_NOT_D_AND_SD_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge RD &&& (ENABLE_CK_AND_D_AND_SD_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge RD &&& (ENABLE_CK_AND_D_AND_SD_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge RD &&& (ENABLE_CK_AND_D_AND_SD_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge RD &&& (ENABLE_CK_AND_D_AND_SD_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      // hold RD-LH SD-LH
      $hold(posedge SD &&& (ENABLE_NOT_CK_AND_NOT_D_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge RD &&& (ENABLE_NOT_CK_AND_NOT_D_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup RD-LH SD-LH
      $setup(posedge RD &&& (ENABLE_NOT_CK_AND_NOT_D_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge SD &&& (ENABLE_NOT_CK_AND_NOT_D_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold RD-LH SD-LH
      $hold(posedge SD &&& (ENABLE_NOT_CK_AND_NOT_D_AND_NOT_SE_AND_SI === 1'b1),
      posedge RD &&& (ENABLE_NOT_CK_AND_NOT_D_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // setup RD-LH SD-LH
      $setup(posedge RD &&& (ENABLE_NOT_CK_AND_NOT_D_AND_NOT_SE_AND_SI === 1'b1),
      posedge SD &&& (ENABLE_NOT_CK_AND_NOT_D_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // hold RD-LH SD-LH
      $hold(posedge SD &&& (ENABLE_NOT_CK_AND_NOT_D_AND_SE_AND_NOT_SI === 1'b1),
      posedge RD &&& (ENABLE_NOT_CK_AND_NOT_D_AND_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup RD-LH SD-LH
      $setup(posedge RD &&& (ENABLE_NOT_CK_AND_NOT_D_AND_SE_AND_NOT_SI === 1'b1),
      posedge SD &&& (ENABLE_NOT_CK_AND_NOT_D_AND_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold RD-LH SD-LH
      $hold(posedge SD &&& (ENABLE_NOT_CK_AND_NOT_D_AND_SE_AND_SI === 1'b1),
      posedge RD &&& (ENABLE_NOT_CK_AND_NOT_D_AND_SE_AND_SI === 1'b1),1.0);
      
      // setup RD-LH SD-LH
      $setup(posedge RD &&& (ENABLE_NOT_CK_AND_NOT_D_AND_SE_AND_SI === 1'b1),
      posedge SD &&& (ENABLE_NOT_CK_AND_NOT_D_AND_SE_AND_SI === 1'b1),1.0);
      
      // hold RD-LH SD-LH
      $hold(posedge SD &&& (ENABLE_NOT_CK_AND_D_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge RD &&& (ENABLE_NOT_CK_AND_D_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup RD-LH SD-LH
      $setup(posedge RD &&& (ENABLE_NOT_CK_AND_D_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge SD &&& (ENABLE_NOT_CK_AND_D_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold RD-LH SD-LH
      $hold(posedge SD &&& (ENABLE_NOT_CK_AND_D_AND_NOT_SE_AND_SI === 1'b1),
      posedge RD &&& (ENABLE_NOT_CK_AND_D_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // setup RD-LH SD-LH
      $setup(posedge RD &&& (ENABLE_NOT_CK_AND_D_AND_NOT_SE_AND_SI === 1'b1),
      posedge SD &&& (ENABLE_NOT_CK_AND_D_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // hold RD-LH SD-LH
      $hold(posedge SD &&& (ENABLE_NOT_CK_AND_D_AND_SE_AND_NOT_SI === 1'b1),
      posedge RD &&& (ENABLE_NOT_CK_AND_D_AND_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup RD-LH SD-LH
      $setup(posedge RD &&& (ENABLE_NOT_CK_AND_D_AND_SE_AND_NOT_SI === 1'b1),
      posedge SD &&& (ENABLE_NOT_CK_AND_D_AND_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold RD-LH SD-LH
      $hold(posedge SD &&& (ENABLE_NOT_CK_AND_D_AND_SE_AND_SI === 1'b1),
      posedge RD &&& (ENABLE_NOT_CK_AND_D_AND_SE_AND_SI === 1'b1),1.0);
      
      // setup RD-LH SD-LH
      $setup(posedge RD &&& (ENABLE_NOT_CK_AND_D_AND_SE_AND_SI === 1'b1),
      posedge SD &&& (ENABLE_NOT_CK_AND_D_AND_SE_AND_SI === 1'b1),1.0);
      
      // hold RD-LH SD-LH
      $hold(posedge SD &&& (ENABLE_CK_AND_NOT_D_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge RD &&& (ENABLE_CK_AND_NOT_D_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup RD-LH SD-LH
      $setup(posedge RD &&& (ENABLE_CK_AND_NOT_D_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge SD &&& (ENABLE_CK_AND_NOT_D_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold RD-LH SD-LH
      $hold(posedge SD &&& (ENABLE_CK_AND_NOT_D_AND_NOT_SE_AND_SI === 1'b1),
      posedge RD &&& (ENABLE_CK_AND_NOT_D_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // setup RD-LH SD-LH
      $setup(posedge RD &&& (ENABLE_CK_AND_NOT_D_AND_NOT_SE_AND_SI === 1'b1),
      posedge SD &&& (ENABLE_CK_AND_NOT_D_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // hold RD-LH SD-LH
      $hold(posedge SD &&& (ENABLE_CK_AND_NOT_D_AND_SE_AND_NOT_SI === 1'b1),
      posedge RD &&& (ENABLE_CK_AND_NOT_D_AND_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup RD-LH SD-LH
      $setup(posedge RD &&& (ENABLE_CK_AND_NOT_D_AND_SE_AND_NOT_SI === 1'b1),
      posedge SD &&& (ENABLE_CK_AND_NOT_D_AND_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold RD-LH SD-LH
      $hold(posedge SD &&& (ENABLE_CK_AND_NOT_D_AND_SE_AND_SI === 1'b1),
      posedge RD &&& (ENABLE_CK_AND_NOT_D_AND_SE_AND_SI === 1'b1),1.0);
      
      // setup RD-LH SD-LH
      $setup(posedge RD &&& (ENABLE_CK_AND_NOT_D_AND_SE_AND_SI === 1'b1),
      posedge SD &&& (ENABLE_CK_AND_NOT_D_AND_SE_AND_SI === 1'b1),1.0);
      
      // hold RD-LH SD-LH
      $hold(posedge SD &&& (ENABLE_CK_AND_D_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge RD &&& (ENABLE_CK_AND_D_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup RD-LH SD-LH
      $setup(posedge RD &&& (ENABLE_CK_AND_D_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge SD &&& (ENABLE_CK_AND_D_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold RD-LH SD-LH
      $hold(posedge SD &&& (ENABLE_CK_AND_D_AND_NOT_SE_AND_SI === 1'b1),
      posedge RD &&& (ENABLE_CK_AND_D_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // setup RD-LH SD-LH
      $setup(posedge RD &&& (ENABLE_CK_AND_D_AND_NOT_SE_AND_SI === 1'b1),
      posedge SD &&& (ENABLE_CK_AND_D_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // hold RD-LH SD-LH
      $hold(posedge SD &&& (ENABLE_CK_AND_D_AND_SE_AND_NOT_SI === 1'b1),
      posedge RD &&& (ENABLE_CK_AND_D_AND_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup RD-LH SD-LH
      $setup(posedge RD &&& (ENABLE_CK_AND_D_AND_SE_AND_NOT_SI === 1'b1),
      posedge SD &&& (ENABLE_CK_AND_D_AND_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold RD-LH SD-LH
      $hold(posedge SD &&& (ENABLE_CK_AND_D_AND_SE_AND_SI === 1'b1),
      posedge RD &&& (ENABLE_CK_AND_D_AND_SE_AND_SI === 1'b1),1.0);
      
      // setup RD-LH SD-LH
      $setup(posedge RD &&& (ENABLE_CK_AND_D_AND_SE_AND_SI === 1'b1),
      posedge SD &&& (ENABLE_CK_AND_D_AND_SE_AND_SI === 1'b1),1.0);
      
      // recovery SD-LH CK-LH
      $recovery(posedge SD &&& (ENABLE_NOT_D_AND_RD_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_RD_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // removal SD-LH CK-LH
      $removal(posedge SD &&& (ENABLE_NOT_D_AND_RD_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_RD_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // recovery SD-LH CK-LH
      $recovery(posedge SD &&& (ENABLE_NOT_D_AND_RD_AND_NOT_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_RD_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // removal SD-LH CK-LH
      $removal(posedge SD &&& (ENABLE_NOT_D_AND_RD_AND_NOT_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_RD_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // recovery SD-LH CK-LH
      $recovery(posedge SD &&& (ENABLE_NOT_D_AND_RD_AND_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_RD_AND_SE_AND_NOT_SI === 1'b1),1.0);
      
      // removal SD-LH CK-LH
      $removal(posedge SD &&& (ENABLE_NOT_D_AND_RD_AND_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_RD_AND_SE_AND_NOT_SI === 1'b1),1.0);
      
      // recovery SD-LH CK-LH
      $recovery(posedge SD &&& (ENABLE_D_AND_RD_AND_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_D_AND_RD_AND_SE_AND_NOT_SI === 1'b1),1.0);
      
      // removal SD-LH CK-LH
      $removal(posedge SD &&& (ENABLE_D_AND_RD_AND_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_D_AND_RD_AND_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold SD-LH RD-LH
      $hold(posedge RD &&& (ENABLE_NOT_CK_AND_NOT_D_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge SD &&& (ENABLE_NOT_CK_AND_NOT_D_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup SD-LH RD-LH
      $setup(posedge SD &&& (ENABLE_NOT_CK_AND_NOT_D_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge RD &&& (ENABLE_NOT_CK_AND_NOT_D_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold SD-LH RD-LH
      $hold(posedge RD &&& (ENABLE_NOT_CK_AND_NOT_D_AND_NOT_SE_AND_SI === 1'b1),
      posedge SD &&& (ENABLE_NOT_CK_AND_NOT_D_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // setup SD-LH RD-LH
      $setup(posedge SD &&& (ENABLE_NOT_CK_AND_NOT_D_AND_NOT_SE_AND_SI === 1'b1),
      posedge RD &&& (ENABLE_NOT_CK_AND_NOT_D_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // hold SD-LH RD-LH
      $hold(posedge RD &&& (ENABLE_NOT_CK_AND_NOT_D_AND_SE_AND_NOT_SI === 1'b1),
      posedge SD &&& (ENABLE_NOT_CK_AND_NOT_D_AND_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup SD-LH RD-LH
      $setup(posedge SD &&& (ENABLE_NOT_CK_AND_NOT_D_AND_SE_AND_NOT_SI === 1'b1),
      posedge RD &&& (ENABLE_NOT_CK_AND_NOT_D_AND_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold SD-LH RD-LH
      $hold(posedge RD &&& (ENABLE_NOT_CK_AND_NOT_D_AND_SE_AND_SI === 1'b1),
      posedge SD &&& (ENABLE_NOT_CK_AND_NOT_D_AND_SE_AND_SI === 1'b1),1.0);
      
      // setup SD-LH RD-LH
      $setup(posedge SD &&& (ENABLE_NOT_CK_AND_NOT_D_AND_SE_AND_SI === 1'b1),
      posedge RD &&& (ENABLE_NOT_CK_AND_NOT_D_AND_SE_AND_SI === 1'b1),1.0);
      
      // hold SD-LH RD-LH
      $hold(posedge RD &&& (ENABLE_NOT_CK_AND_D_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge SD &&& (ENABLE_NOT_CK_AND_D_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup SD-LH RD-LH
      $setup(posedge SD &&& (ENABLE_NOT_CK_AND_D_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge RD &&& (ENABLE_NOT_CK_AND_D_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold SD-LH RD-LH
      $hold(posedge RD &&& (ENABLE_NOT_CK_AND_D_AND_NOT_SE_AND_SI === 1'b1),
      posedge SD &&& (ENABLE_NOT_CK_AND_D_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // setup SD-LH RD-LH
      $setup(posedge SD &&& (ENABLE_NOT_CK_AND_D_AND_NOT_SE_AND_SI === 1'b1),
      posedge RD &&& (ENABLE_NOT_CK_AND_D_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // hold SD-LH RD-LH
      $hold(posedge RD &&& (ENABLE_NOT_CK_AND_D_AND_SE_AND_NOT_SI === 1'b1),
      posedge SD &&& (ENABLE_NOT_CK_AND_D_AND_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup SD-LH RD-LH
      $setup(posedge SD &&& (ENABLE_NOT_CK_AND_D_AND_SE_AND_NOT_SI === 1'b1),
      posedge RD &&& (ENABLE_NOT_CK_AND_D_AND_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold SD-LH RD-LH
      $hold(posedge RD &&& (ENABLE_NOT_CK_AND_D_AND_SE_AND_SI === 1'b1),
      posedge SD &&& (ENABLE_NOT_CK_AND_D_AND_SE_AND_SI === 1'b1),1.0);
      
      // setup SD-LH RD-LH
      $setup(posedge SD &&& (ENABLE_NOT_CK_AND_D_AND_SE_AND_SI === 1'b1),
      posedge RD &&& (ENABLE_NOT_CK_AND_D_AND_SE_AND_SI === 1'b1),1.0);
      
      // hold SD-LH RD-LH
      $hold(posedge RD &&& (ENABLE_CK_AND_NOT_D_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge SD &&& (ENABLE_CK_AND_NOT_D_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup SD-LH RD-LH
      $setup(posedge SD &&& (ENABLE_CK_AND_NOT_D_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge RD &&& (ENABLE_CK_AND_NOT_D_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold SD-LH RD-LH
      $hold(posedge RD &&& (ENABLE_CK_AND_NOT_D_AND_NOT_SE_AND_SI === 1'b1),
      posedge SD &&& (ENABLE_CK_AND_NOT_D_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // setup SD-LH RD-LH
      $setup(posedge SD &&& (ENABLE_CK_AND_NOT_D_AND_NOT_SE_AND_SI === 1'b1),
      posedge RD &&& (ENABLE_CK_AND_NOT_D_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // hold SD-LH RD-LH
      $hold(posedge RD &&& (ENABLE_CK_AND_NOT_D_AND_SE_AND_NOT_SI === 1'b1),
      posedge SD &&& (ENABLE_CK_AND_NOT_D_AND_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup SD-LH RD-LH
      $setup(posedge SD &&& (ENABLE_CK_AND_NOT_D_AND_SE_AND_NOT_SI === 1'b1),
      posedge RD &&& (ENABLE_CK_AND_NOT_D_AND_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold SD-LH RD-LH
      $hold(posedge RD &&& (ENABLE_CK_AND_NOT_D_AND_SE_AND_SI === 1'b1),
      posedge SD &&& (ENABLE_CK_AND_NOT_D_AND_SE_AND_SI === 1'b1),1.0);
      
      // setup SD-LH RD-LH
      $setup(posedge SD &&& (ENABLE_CK_AND_NOT_D_AND_SE_AND_SI === 1'b1),
      posedge RD &&& (ENABLE_CK_AND_NOT_D_AND_SE_AND_SI === 1'b1),1.0);
      
      // hold SD-LH RD-LH
      $hold(posedge RD &&& (ENABLE_CK_AND_D_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge SD &&& (ENABLE_CK_AND_D_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup SD-LH RD-LH
      $setup(posedge SD &&& (ENABLE_CK_AND_D_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge RD &&& (ENABLE_CK_AND_D_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold SD-LH RD-LH
      $hold(posedge RD &&& (ENABLE_CK_AND_D_AND_NOT_SE_AND_SI === 1'b1),
      posedge SD &&& (ENABLE_CK_AND_D_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // setup SD-LH RD-LH
      $setup(posedge SD &&& (ENABLE_CK_AND_D_AND_NOT_SE_AND_SI === 1'b1),
      posedge RD &&& (ENABLE_CK_AND_D_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // hold SD-LH RD-LH
      $hold(posedge RD &&& (ENABLE_CK_AND_D_AND_SE_AND_NOT_SI === 1'b1),
      posedge SD &&& (ENABLE_CK_AND_D_AND_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup SD-LH RD-LH
      $setup(posedge SD &&& (ENABLE_CK_AND_D_AND_SE_AND_NOT_SI === 1'b1),
      posedge RD &&& (ENABLE_CK_AND_D_AND_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold SD-LH RD-LH
      $hold(posedge RD &&& (ENABLE_CK_AND_D_AND_SE_AND_SI === 1'b1),
      posedge SD &&& (ENABLE_CK_AND_D_AND_SE_AND_SI === 1'b1),1.0);
      
      // setup SD-LH RD-LH
      $setup(posedge SD &&& (ENABLE_CK_AND_D_AND_SE_AND_SI === 1'b1),
      posedge RD &&& (ENABLE_CK_AND_D_AND_SE_AND_SI === 1'b1),1.0);
      
      $width(negedge SD &&& (ENABLE_NOT_CK_AND_NOT_D_AND_RD_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge SD &&& (ENABLE_NOT_CK_AND_NOT_D_AND_RD_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge SD &&& (ENABLE_NOT_CK_AND_NOT_D_AND_RD_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge SD &&& (ENABLE_NOT_CK_AND_NOT_D_AND_RD_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge SD &&& (ENABLE_NOT_CK_AND_D_AND_RD_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge SD &&& (ENABLE_NOT_CK_AND_D_AND_RD_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge SD &&& (ENABLE_NOT_CK_AND_D_AND_RD_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge SD &&& (ENABLE_NOT_CK_AND_D_AND_RD_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge SD &&& (ENABLE_CK_AND_NOT_D_AND_RD_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge SD &&& (ENABLE_CK_AND_NOT_D_AND_RD_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge SD &&& (ENABLE_CK_AND_NOT_D_AND_RD_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge SD &&& (ENABLE_CK_AND_NOT_D_AND_RD_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge SD &&& (ENABLE_CK_AND_D_AND_RD_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge SD &&& (ENABLE_CK_AND_D_AND_RD_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge SD &&& (ENABLE_CK_AND_D_AND_RD_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge SD &&& (ENABLE_CK_AND_D_AND_RD_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      // hold SE-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D_AND_RD_AND_SD_AND_SI === 1'b1),
      negedge SE &&& (ENABLE_NOT_D_AND_RD_AND_SD_AND_SI === 1'b1),1.0);
      
      // hold SE-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D_AND_RD_AND_SD_AND_SI === 1'b1),
      posedge SE &&& (ENABLE_NOT_D_AND_RD_AND_SD_AND_SI === 1'b1),1.0);
      
      // setup SE-HL CK-LH
      $setup(negedge SE &&& (ENABLE_NOT_D_AND_RD_AND_SD_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_RD_AND_SD_AND_SI === 1'b1),1.0);
      
      // setup SE-LH CK-LH
      $setup(posedge SE &&& (ENABLE_NOT_D_AND_RD_AND_SD_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_RD_AND_SD_AND_SI === 1'b1),1.0);
      
      // hold SE-HL CK-LH
      $hold(posedge CK &&& (ENABLE_D_AND_RD_AND_SD_AND_NOT_SI === 1'b1),
      negedge SE &&& (ENABLE_D_AND_RD_AND_SD_AND_NOT_SI === 1'b1),1.0);
      
      // hold SE-LH CK-LH
      $hold(posedge CK &&& (ENABLE_D_AND_RD_AND_SD_AND_NOT_SI === 1'b1),
      posedge SE &&& (ENABLE_D_AND_RD_AND_SD_AND_NOT_SI === 1'b1),1.0);
      
      // setup SE-HL CK-LH
      $setup(negedge SE &&& (ENABLE_D_AND_RD_AND_SD_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_D_AND_RD_AND_SD_AND_NOT_SI === 1'b1),1.0);
      
      // setup SE-LH CK-LH
      $setup(posedge SE &&& (ENABLE_D_AND_RD_AND_SD_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_D_AND_RD_AND_SD_AND_NOT_SI === 1'b1),1.0);
      
      // hold SI-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D_AND_RD_AND_SD_AND_SE === 1'b1),
      negedge SI &&& (ENABLE_NOT_D_AND_RD_AND_SD_AND_SE === 1'b1),1.0);
      
      // hold SI-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D_AND_RD_AND_SD_AND_SE === 1'b1),
      posedge SI &&& (ENABLE_NOT_D_AND_RD_AND_SD_AND_SE === 1'b1),1.0);
      
      // setup SI-HL CK-LH
      $setup(negedge SI &&& (ENABLE_NOT_D_AND_RD_AND_SD_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_RD_AND_SD_AND_SE === 1'b1),1.0);
      
      // setup SI-LH CK-LH
      $setup(posedge SI &&& (ENABLE_NOT_D_AND_RD_AND_SD_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_RD_AND_SD_AND_SE === 1'b1),1.0);
      
      // hold SI-HL CK-LH
      $hold(posedge CK &&& (ENABLE_D_AND_RD_AND_SD_AND_SE === 1'b1),
      negedge SI &&& (ENABLE_D_AND_RD_AND_SD_AND_SE === 1'b1),1.0);
      
      // hold SI-LH CK-LH
      $hold(posedge CK &&& (ENABLE_D_AND_RD_AND_SD_AND_SE === 1'b1),
      posedge SI &&& (ENABLE_D_AND_RD_AND_SD_AND_SE === 1'b1),1.0);
      
      // setup SI-HL CK-LH
      $setup(negedge SI &&& (ENABLE_D_AND_RD_AND_SD_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_D_AND_RD_AND_SD_AND_SE === 1'b1),1.0);
      
      // setup SI-LH CK-LH
      $setup(posedge SI &&& (ENABLE_D_AND_RD_AND_SD_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_D_AND_RD_AND_SD_AND_SE === 1'b1),1.0);
      
      // mpw CK_lh 
      $width(posedge CK,1.0,0);
      
      // mpw CK_hl 
      $width(negedge CK,1.0,0);
      
      // mpw RD_hl 
      $width(negedge RD,1.0,0);
      
      // mpw SD_hl 
      $width(negedge SD,1.0,0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_FSDPRBSBQ_V2_0P5( Q, CK, D, SI, SE, RD, SD );
input CK, D, RD, SD, SE, SI;
output Q;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_FSDPRBSBQ_V2_0P5_func SAEDRVT14_FSDPRBSBQ_V2_0P5_behav_inst(.Q(Q),.CK(CK),.D(D),.SI(SI),.SE(SE),.RD(RD),.SD(SD));
`else
   SAEDRVT14_FSDPRBSBQ_V2_0P5_func SAEDRVT14_FSDPRBSBQ_V2_0P5_inst(.Q(Q),.CK(CK),.D(D),.SI(SI),.SE(SE),.RD(RD),.SD(SD));
   // spec_gates_begin
   not MGM_G0(MGM_W0,D);
   and MGM_G1(MGM_W1,RD,MGM_W0);
   and MGM_G2(MGM_W2,SD,MGM_W1);
   not MGM_G3(MGM_W3,SE);
   and MGM_G4(MGM_W4,MGM_W3,MGM_W2);
   not MGM_G5(MGM_W5,SI);
   and MGM_G6(ENABLE_NOT_D_AND_RD_AND_SD_AND_NOT_SE_AND_NOT_SI,MGM_W5,MGM_W4);
   not MGM_G7(MGM_W6,D);
   and MGM_G8(MGM_W7,RD,MGM_W6);
   and MGM_G9(MGM_W8,SD,MGM_W7);
   not MGM_G10(MGM_W9,SE);
   and MGM_G11(MGM_W10,MGM_W9,MGM_W8);
   and MGM_G12(ENABLE_NOT_D_AND_RD_AND_SD_AND_NOT_SE_AND_SI,SI,MGM_W10);
   not MGM_G13(MGM_W11,D);
   and MGM_G14(MGM_W12,RD,MGM_W11);
   and MGM_G15(MGM_W13,SD,MGM_W12);
   and MGM_G16(MGM_W14,SE,MGM_W13);
   not MGM_G17(MGM_W15,SI);
   and MGM_G18(ENABLE_NOT_D_AND_RD_AND_SD_AND_SE_AND_NOT_SI,MGM_W15,MGM_W14);
   not MGM_G19(MGM_W16,D);
   and MGM_G20(MGM_W17,RD,MGM_W16);
   and MGM_G21(MGM_W18,SD,MGM_W17);
   and MGM_G22(MGM_W19,SE,MGM_W18);
   and MGM_G23(ENABLE_NOT_D_AND_RD_AND_SD_AND_SE_AND_SI,SI,MGM_W19);
   and MGM_G24(MGM_W20,RD,D);
   and MGM_G25(MGM_W21,SD,MGM_W20);
   not MGM_G26(MGM_W22,SE);
   and MGM_G27(MGM_W23,MGM_W22,MGM_W21);
   not MGM_G28(MGM_W24,SI);
   and MGM_G29(ENABLE_D_AND_RD_AND_SD_AND_NOT_SE_AND_NOT_SI,MGM_W24,MGM_W23);
   and MGM_G30(MGM_W25,RD,D);
   and MGM_G31(MGM_W26,SD,MGM_W25);
   not MGM_G32(MGM_W27,SE);
   and MGM_G33(MGM_W28,MGM_W27,MGM_W26);
   and MGM_G34(ENABLE_D_AND_RD_AND_SD_AND_NOT_SE_AND_SI,SI,MGM_W28);
   and MGM_G35(MGM_W29,RD,D);
   and MGM_G36(MGM_W30,SD,MGM_W29);
   and MGM_G37(MGM_W31,SE,MGM_W30);
   not MGM_G38(MGM_W32,SI);
   and MGM_G39(ENABLE_D_AND_RD_AND_SD_AND_SE_AND_NOT_SI,MGM_W32,MGM_W31);
   and MGM_G40(MGM_W33,RD,D);
   and MGM_G41(MGM_W34,SD,MGM_W33);
   and MGM_G42(MGM_W35,SE,MGM_W34);
   and MGM_G43(ENABLE_D_AND_RD_AND_SD_AND_SE_AND_SI,SI,MGM_W35);
   and MGM_G44(MGM_W36,SD,RD);
   not MGM_G45(MGM_W37,SE);
   and MGM_G46(MGM_W38,MGM_W37,MGM_W36);
   not MGM_G47(MGM_W39,SI);
   and MGM_G48(ENABLE_RD_AND_SD_AND_NOT_SE_AND_NOT_SI,MGM_W39,MGM_W38);
   and MGM_G49(MGM_W40,SD,RD);
   not MGM_G50(MGM_W41,SE);
   and MGM_G51(MGM_W42,MGM_W41,MGM_W40);
   and MGM_G52(ENABLE_RD_AND_SD_AND_NOT_SE_AND_SI,SI,MGM_W42);
   not MGM_G53(MGM_W43,D);
   and MGM_G54(MGM_W44,SD,MGM_W43);
   and MGM_G55(MGM_W45,SE,MGM_W44);
   and MGM_G56(ENABLE_NOT_D_AND_SD_AND_SE_AND_SI,SI,MGM_W45);
   and MGM_G57(MGM_W46,SD,D);
   not MGM_G58(MGM_W47,SE);
   and MGM_G59(MGM_W48,MGM_W47,MGM_W46);
   not MGM_G60(MGM_W49,SI);
   and MGM_G61(ENABLE_D_AND_SD_AND_NOT_SE_AND_NOT_SI,MGM_W49,MGM_W48);
   and MGM_G62(MGM_W50,SD,D);
   not MGM_G63(MGM_W51,SE);
   and MGM_G64(MGM_W52,MGM_W51,MGM_W50);
   and MGM_G65(ENABLE_D_AND_SD_AND_NOT_SE_AND_SI,SI,MGM_W52);
   and MGM_G66(MGM_W53,SD,D);
   and MGM_G67(MGM_W54,SE,MGM_W53);
   and MGM_G68(ENABLE_D_AND_SD_AND_SE_AND_SI,SI,MGM_W54);
   not MGM_G69(MGM_W55,CK);
   not MGM_G70(MGM_W56,D);
   and MGM_G71(MGM_W57,MGM_W56,MGM_W55);
   and MGM_G72(MGM_W58,SD,MGM_W57);
   not MGM_G73(MGM_W59,SE);
   and MGM_G74(MGM_W60,MGM_W59,MGM_W58);
   not MGM_G75(MGM_W61,SI);
   and MGM_G76(ENABLE_NOT_CK_AND_NOT_D_AND_SD_AND_NOT_SE_AND_NOT_SI,MGM_W61,MGM_W60);
   not MGM_G77(MGM_W62,CK);
   not MGM_G78(MGM_W63,D);
   and MGM_G79(MGM_W64,MGM_W63,MGM_W62);
   and MGM_G80(MGM_W65,SD,MGM_W64);
   not MGM_G81(MGM_W66,SE);
   and MGM_G82(MGM_W67,MGM_W66,MGM_W65);
   and MGM_G83(ENABLE_NOT_CK_AND_NOT_D_AND_SD_AND_NOT_SE_AND_SI,SI,MGM_W67);
   not MGM_G84(MGM_W68,CK);
   not MGM_G85(MGM_W69,D);
   and MGM_G86(MGM_W70,MGM_W69,MGM_W68);
   and MGM_G87(MGM_W71,SD,MGM_W70);
   and MGM_G88(MGM_W72,SE,MGM_W71);
   not MGM_G89(MGM_W73,SI);
   and MGM_G90(ENABLE_NOT_CK_AND_NOT_D_AND_SD_AND_SE_AND_NOT_SI,MGM_W73,MGM_W72);
   not MGM_G91(MGM_W74,CK);
   not MGM_G92(MGM_W75,D);
   and MGM_G93(MGM_W76,MGM_W75,MGM_W74);
   and MGM_G94(MGM_W77,SD,MGM_W76);
   and MGM_G95(MGM_W78,SE,MGM_W77);
   and MGM_G96(ENABLE_NOT_CK_AND_NOT_D_AND_SD_AND_SE_AND_SI,SI,MGM_W78);
   not MGM_G97(MGM_W79,CK);
   and MGM_G98(MGM_W80,D,MGM_W79);
   and MGM_G99(MGM_W81,SD,MGM_W80);
   not MGM_G100(MGM_W82,SE);
   and MGM_G101(MGM_W83,MGM_W82,MGM_W81);
   not MGM_G102(MGM_W84,SI);
   and MGM_G103(ENABLE_NOT_CK_AND_D_AND_SD_AND_NOT_SE_AND_NOT_SI,MGM_W84,MGM_W83);
   not MGM_G104(MGM_W85,CK);
   and MGM_G105(MGM_W86,D,MGM_W85);
   and MGM_G106(MGM_W87,SD,MGM_W86);
   not MGM_G107(MGM_W88,SE);
   and MGM_G108(MGM_W89,MGM_W88,MGM_W87);
   and MGM_G109(ENABLE_NOT_CK_AND_D_AND_SD_AND_NOT_SE_AND_SI,SI,MGM_W89);
   not MGM_G110(MGM_W90,CK);
   and MGM_G111(MGM_W91,D,MGM_W90);
   and MGM_G112(MGM_W92,SD,MGM_W91);
   and MGM_G113(MGM_W93,SE,MGM_W92);
   not MGM_G114(MGM_W94,SI);
   and MGM_G115(ENABLE_NOT_CK_AND_D_AND_SD_AND_SE_AND_NOT_SI,MGM_W94,MGM_W93);
   not MGM_G116(MGM_W95,CK);
   and MGM_G117(MGM_W96,D,MGM_W95);
   and MGM_G118(MGM_W97,SD,MGM_W96);
   and MGM_G119(MGM_W98,SE,MGM_W97);
   and MGM_G120(ENABLE_NOT_CK_AND_D_AND_SD_AND_SE_AND_SI,SI,MGM_W98);
   not MGM_G121(MGM_W99,D);
   and MGM_G122(MGM_W100,MGM_W99,CK);
   and MGM_G123(MGM_W101,SD,MGM_W100);
   not MGM_G124(MGM_W102,SE);
   and MGM_G125(MGM_W103,MGM_W102,MGM_W101);
   not MGM_G126(MGM_W104,SI);
   and MGM_G127(ENABLE_CK_AND_NOT_D_AND_SD_AND_NOT_SE_AND_NOT_SI,MGM_W104,MGM_W103);
   not MGM_G128(MGM_W105,D);
   and MGM_G129(MGM_W106,MGM_W105,CK);
   and MGM_G130(MGM_W107,SD,MGM_W106);
   not MGM_G131(MGM_W108,SE);
   and MGM_G132(MGM_W109,MGM_W108,MGM_W107);
   and MGM_G133(ENABLE_CK_AND_NOT_D_AND_SD_AND_NOT_SE_AND_SI,SI,MGM_W109);
   not MGM_G134(MGM_W110,D);
   and MGM_G135(MGM_W111,MGM_W110,CK);
   and MGM_G136(MGM_W112,SD,MGM_W111);
   and MGM_G137(MGM_W113,SE,MGM_W112);
   not MGM_G138(MGM_W114,SI);
   and MGM_G139(ENABLE_CK_AND_NOT_D_AND_SD_AND_SE_AND_NOT_SI,MGM_W114,MGM_W113);
   not MGM_G140(MGM_W115,D);
   and MGM_G141(MGM_W116,MGM_W115,CK);
   and MGM_G142(MGM_W117,SD,MGM_W116);
   and MGM_G143(MGM_W118,SE,MGM_W117);
   and MGM_G144(ENABLE_CK_AND_NOT_D_AND_SD_AND_SE_AND_SI,SI,MGM_W118);
   and MGM_G145(MGM_W119,D,CK);
   and MGM_G146(MGM_W120,SD,MGM_W119);
   not MGM_G147(MGM_W121,SE);
   and MGM_G148(MGM_W122,MGM_W121,MGM_W120);
   not MGM_G149(MGM_W123,SI);
   and MGM_G150(ENABLE_CK_AND_D_AND_SD_AND_NOT_SE_AND_NOT_SI,MGM_W123,MGM_W122);
   and MGM_G151(MGM_W124,D,CK);
   and MGM_G152(MGM_W125,SD,MGM_W124);
   not MGM_G153(MGM_W126,SE);
   and MGM_G154(MGM_W127,MGM_W126,MGM_W125);
   and MGM_G155(ENABLE_CK_AND_D_AND_SD_AND_NOT_SE_AND_SI,SI,MGM_W127);
   and MGM_G156(MGM_W128,D,CK);
   and MGM_G157(MGM_W129,SD,MGM_W128);
   and MGM_G158(MGM_W130,SE,MGM_W129);
   not MGM_G159(MGM_W131,SI);
   and MGM_G160(ENABLE_CK_AND_D_AND_SD_AND_SE_AND_NOT_SI,MGM_W131,MGM_W130);
   and MGM_G161(MGM_W132,D,CK);
   and MGM_G162(MGM_W133,SD,MGM_W132);
   and MGM_G163(MGM_W134,SE,MGM_W133);
   and MGM_G164(ENABLE_CK_AND_D_AND_SD_AND_SE_AND_SI,SI,MGM_W134);
   not MGM_G165(MGM_W135,CK);
   not MGM_G166(MGM_W136,D);
   and MGM_G167(MGM_W137,MGM_W136,MGM_W135);
   not MGM_G168(MGM_W138,SE);
   and MGM_G169(MGM_W139,MGM_W138,MGM_W137);
   not MGM_G170(MGM_W140,SI);
   and MGM_G171(ENABLE_NOT_CK_AND_NOT_D_AND_NOT_SE_AND_NOT_SI,MGM_W140,MGM_W139);
   not MGM_G172(MGM_W141,CK);
   not MGM_G173(MGM_W142,D);
   and MGM_G174(MGM_W143,MGM_W142,MGM_W141);
   not MGM_G175(MGM_W144,SE);
   and MGM_G176(MGM_W145,MGM_W144,MGM_W143);
   and MGM_G177(ENABLE_NOT_CK_AND_NOT_D_AND_NOT_SE_AND_SI,SI,MGM_W145);
   not MGM_G178(MGM_W146,CK);
   not MGM_G179(MGM_W147,D);
   and MGM_G180(MGM_W148,MGM_W147,MGM_W146);
   and MGM_G181(MGM_W149,SE,MGM_W148);
   not MGM_G182(MGM_W150,SI);
   and MGM_G183(ENABLE_NOT_CK_AND_NOT_D_AND_SE_AND_NOT_SI,MGM_W150,MGM_W149);
   not MGM_G184(MGM_W151,CK);
   not MGM_G185(MGM_W152,D);
   and MGM_G186(MGM_W153,MGM_W152,MGM_W151);
   and MGM_G187(MGM_W154,SE,MGM_W153);
   and MGM_G188(ENABLE_NOT_CK_AND_NOT_D_AND_SE_AND_SI,SI,MGM_W154);
   not MGM_G189(MGM_W155,CK);
   and MGM_G190(MGM_W156,D,MGM_W155);
   not MGM_G191(MGM_W157,SE);
   and MGM_G192(MGM_W158,MGM_W157,MGM_W156);
   not MGM_G193(MGM_W159,SI);
   and MGM_G194(ENABLE_NOT_CK_AND_D_AND_NOT_SE_AND_NOT_SI,MGM_W159,MGM_W158);
   not MGM_G195(MGM_W160,CK);
   and MGM_G196(MGM_W161,D,MGM_W160);
   not MGM_G197(MGM_W162,SE);
   and MGM_G198(MGM_W163,MGM_W162,MGM_W161);
   and MGM_G199(ENABLE_NOT_CK_AND_D_AND_NOT_SE_AND_SI,SI,MGM_W163);
   not MGM_G200(MGM_W164,CK);
   and MGM_G201(MGM_W165,D,MGM_W164);
   and MGM_G202(MGM_W166,SE,MGM_W165);
   not MGM_G203(MGM_W167,SI);
   and MGM_G204(ENABLE_NOT_CK_AND_D_AND_SE_AND_NOT_SI,MGM_W167,MGM_W166);
   not MGM_G205(MGM_W168,CK);
   and MGM_G206(MGM_W169,D,MGM_W168);
   and MGM_G207(MGM_W170,SE,MGM_W169);
   and MGM_G208(ENABLE_NOT_CK_AND_D_AND_SE_AND_SI,SI,MGM_W170);
   not MGM_G209(MGM_W171,D);
   and MGM_G210(MGM_W172,MGM_W171,CK);
   not MGM_G211(MGM_W173,SE);
   and MGM_G212(MGM_W174,MGM_W173,MGM_W172);
   not MGM_G213(MGM_W175,SI);
   and MGM_G214(ENABLE_CK_AND_NOT_D_AND_NOT_SE_AND_NOT_SI,MGM_W175,MGM_W174);
   not MGM_G215(MGM_W176,D);
   and MGM_G216(MGM_W177,MGM_W176,CK);
   not MGM_G217(MGM_W178,SE);
   and MGM_G218(MGM_W179,MGM_W178,MGM_W177);
   and MGM_G219(ENABLE_CK_AND_NOT_D_AND_NOT_SE_AND_SI,SI,MGM_W179);
   not MGM_G220(MGM_W180,D);
   and MGM_G221(MGM_W181,MGM_W180,CK);
   and MGM_G222(MGM_W182,SE,MGM_W181);
   not MGM_G223(MGM_W183,SI);
   and MGM_G224(ENABLE_CK_AND_NOT_D_AND_SE_AND_NOT_SI,MGM_W183,MGM_W182);
   not MGM_G225(MGM_W184,D);
   and MGM_G226(MGM_W185,MGM_W184,CK);
   and MGM_G227(MGM_W186,SE,MGM_W185);
   and MGM_G228(ENABLE_CK_AND_NOT_D_AND_SE_AND_SI,SI,MGM_W186);
   and MGM_G229(MGM_W187,D,CK);
   not MGM_G230(MGM_W188,SE);
   and MGM_G231(MGM_W189,MGM_W188,MGM_W187);
   not MGM_G232(MGM_W190,SI);
   and MGM_G233(ENABLE_CK_AND_D_AND_NOT_SE_AND_NOT_SI,MGM_W190,MGM_W189);
   and MGM_G234(MGM_W191,D,CK);
   not MGM_G235(MGM_W192,SE);
   and MGM_G236(MGM_W193,MGM_W192,MGM_W191);
   and MGM_G237(ENABLE_CK_AND_D_AND_NOT_SE_AND_SI,SI,MGM_W193);
   and MGM_G238(MGM_W194,D,CK);
   and MGM_G239(MGM_W195,SE,MGM_W194);
   not MGM_G240(MGM_W196,SI);
   and MGM_G241(ENABLE_CK_AND_D_AND_SE_AND_NOT_SI,MGM_W196,MGM_W195);
   and MGM_G242(MGM_W197,D,CK);
   and MGM_G243(MGM_W198,SE,MGM_W197);
   and MGM_G244(ENABLE_CK_AND_D_AND_SE_AND_SI,SI,MGM_W198);
   not MGM_G245(MGM_W199,D);
   and MGM_G246(MGM_W200,RD,MGM_W199);
   not MGM_G247(MGM_W201,SE);
   and MGM_G248(MGM_W202,MGM_W201,MGM_W200);
   not MGM_G249(MGM_W203,SI);
   and MGM_G250(ENABLE_NOT_D_AND_RD_AND_NOT_SE_AND_NOT_SI,MGM_W203,MGM_W202);
   not MGM_G251(MGM_W204,D);
   and MGM_G252(MGM_W205,RD,MGM_W204);
   not MGM_G253(MGM_W206,SE);
   and MGM_G254(MGM_W207,MGM_W206,MGM_W205);
   and MGM_G255(ENABLE_NOT_D_AND_RD_AND_NOT_SE_AND_SI,SI,MGM_W207);
   not MGM_G256(MGM_W208,D);
   and MGM_G257(MGM_W209,RD,MGM_W208);
   and MGM_G258(MGM_W210,SE,MGM_W209);
   not MGM_G259(MGM_W211,SI);
   and MGM_G260(ENABLE_NOT_D_AND_RD_AND_SE_AND_NOT_SI,MGM_W211,MGM_W210);
   and MGM_G261(MGM_W212,RD,D);
   and MGM_G262(MGM_W213,SE,MGM_W212);
   not MGM_G263(MGM_W214,SI);
   and MGM_G264(ENABLE_D_AND_RD_AND_SE_AND_NOT_SI,MGM_W214,MGM_W213);
   not MGM_G265(MGM_W215,CK);
   not MGM_G266(MGM_W216,D);
   and MGM_G267(MGM_W217,MGM_W216,MGM_W215);
   and MGM_G268(MGM_W218,RD,MGM_W217);
   not MGM_G269(MGM_W219,SE);
   and MGM_G270(MGM_W220,MGM_W219,MGM_W218);
   not MGM_G271(MGM_W221,SI);
   and MGM_G272(ENABLE_NOT_CK_AND_NOT_D_AND_RD_AND_NOT_SE_AND_NOT_SI,MGM_W221,MGM_W220);
   not MGM_G273(MGM_W222,CK);
   not MGM_G274(MGM_W223,D);
   and MGM_G275(MGM_W224,MGM_W223,MGM_W222);
   and MGM_G276(MGM_W225,RD,MGM_W224);
   not MGM_G277(MGM_W226,SE);
   and MGM_G278(MGM_W227,MGM_W226,MGM_W225);
   and MGM_G279(ENABLE_NOT_CK_AND_NOT_D_AND_RD_AND_NOT_SE_AND_SI,SI,MGM_W227);
   not MGM_G280(MGM_W228,CK);
   not MGM_G281(MGM_W229,D);
   and MGM_G282(MGM_W230,MGM_W229,MGM_W228);
   and MGM_G283(MGM_W231,RD,MGM_W230);
   and MGM_G284(MGM_W232,SE,MGM_W231);
   not MGM_G285(MGM_W233,SI);
   and MGM_G286(ENABLE_NOT_CK_AND_NOT_D_AND_RD_AND_SE_AND_NOT_SI,MGM_W233,MGM_W232);
   not MGM_G287(MGM_W234,CK);
   not MGM_G288(MGM_W235,D);
   and MGM_G289(MGM_W236,MGM_W235,MGM_W234);
   and MGM_G290(MGM_W237,RD,MGM_W236);
   and MGM_G291(MGM_W238,SE,MGM_W237);
   and MGM_G292(ENABLE_NOT_CK_AND_NOT_D_AND_RD_AND_SE_AND_SI,SI,MGM_W238);
   not MGM_G293(MGM_W239,CK);
   and MGM_G294(MGM_W240,D,MGM_W239);
   and MGM_G295(MGM_W241,RD,MGM_W240);
   not MGM_G296(MGM_W242,SE);
   and MGM_G297(MGM_W243,MGM_W242,MGM_W241);
   not MGM_G298(MGM_W244,SI);
   and MGM_G299(ENABLE_NOT_CK_AND_D_AND_RD_AND_NOT_SE_AND_NOT_SI,MGM_W244,MGM_W243);
   not MGM_G300(MGM_W245,CK);
   and MGM_G301(MGM_W246,D,MGM_W245);
   and MGM_G302(MGM_W247,RD,MGM_W246);
   not MGM_G303(MGM_W248,SE);
   and MGM_G304(MGM_W249,MGM_W248,MGM_W247);
   and MGM_G305(ENABLE_NOT_CK_AND_D_AND_RD_AND_NOT_SE_AND_SI,SI,MGM_W249);
   not MGM_G306(MGM_W250,CK);
   and MGM_G307(MGM_W251,D,MGM_W250);
   and MGM_G308(MGM_W252,RD,MGM_W251);
   and MGM_G309(MGM_W253,SE,MGM_W252);
   not MGM_G310(MGM_W254,SI);
   and MGM_G311(ENABLE_NOT_CK_AND_D_AND_RD_AND_SE_AND_NOT_SI,MGM_W254,MGM_W253);
   not MGM_G312(MGM_W255,CK);
   and MGM_G313(MGM_W256,D,MGM_W255);
   and MGM_G314(MGM_W257,RD,MGM_W256);
   and MGM_G315(MGM_W258,SE,MGM_W257);
   and MGM_G316(ENABLE_NOT_CK_AND_D_AND_RD_AND_SE_AND_SI,SI,MGM_W258);
   not MGM_G317(MGM_W259,D);
   and MGM_G318(MGM_W260,MGM_W259,CK);
   and MGM_G319(MGM_W261,RD,MGM_W260);
   not MGM_G320(MGM_W262,SE);
   and MGM_G321(MGM_W263,MGM_W262,MGM_W261);
   not MGM_G322(MGM_W264,SI);
   and MGM_G323(ENABLE_CK_AND_NOT_D_AND_RD_AND_NOT_SE_AND_NOT_SI,MGM_W264,MGM_W263);
   not MGM_G324(MGM_W265,D);
   and MGM_G325(MGM_W266,MGM_W265,CK);
   and MGM_G326(MGM_W267,RD,MGM_W266);
   not MGM_G327(MGM_W268,SE);
   and MGM_G328(MGM_W269,MGM_W268,MGM_W267);
   and MGM_G329(ENABLE_CK_AND_NOT_D_AND_RD_AND_NOT_SE_AND_SI,SI,MGM_W269);
   not MGM_G330(MGM_W270,D);
   and MGM_G331(MGM_W271,MGM_W270,CK);
   and MGM_G332(MGM_W272,RD,MGM_W271);
   and MGM_G333(MGM_W273,SE,MGM_W272);
   not MGM_G334(MGM_W274,SI);
   and MGM_G335(ENABLE_CK_AND_NOT_D_AND_RD_AND_SE_AND_NOT_SI,MGM_W274,MGM_W273);
   not MGM_G336(MGM_W275,D);
   and MGM_G337(MGM_W276,MGM_W275,CK);
   and MGM_G338(MGM_W277,RD,MGM_W276);
   and MGM_G339(MGM_W278,SE,MGM_W277);
   and MGM_G340(ENABLE_CK_AND_NOT_D_AND_RD_AND_SE_AND_SI,SI,MGM_W278);
   and MGM_G341(MGM_W279,D,CK);
   and MGM_G342(MGM_W280,RD,MGM_W279);
   not MGM_G343(MGM_W281,SE);
   and MGM_G344(MGM_W282,MGM_W281,MGM_W280);
   not MGM_G345(MGM_W283,SI);
   and MGM_G346(ENABLE_CK_AND_D_AND_RD_AND_NOT_SE_AND_NOT_SI,MGM_W283,MGM_W282);
   and MGM_G347(MGM_W284,D,CK);
   and MGM_G348(MGM_W285,RD,MGM_W284);
   not MGM_G349(MGM_W286,SE);
   and MGM_G350(MGM_W287,MGM_W286,MGM_W285);
   and MGM_G351(ENABLE_CK_AND_D_AND_RD_AND_NOT_SE_AND_SI,SI,MGM_W287);
   and MGM_G352(MGM_W288,D,CK);
   and MGM_G353(MGM_W289,RD,MGM_W288);
   and MGM_G354(MGM_W290,SE,MGM_W289);
   not MGM_G355(MGM_W291,SI);
   and MGM_G356(ENABLE_CK_AND_D_AND_RD_AND_SE_AND_NOT_SI,MGM_W291,MGM_W290);
   and MGM_G357(MGM_W292,D,CK);
   and MGM_G358(MGM_W293,RD,MGM_W292);
   and MGM_G359(MGM_W294,SE,MGM_W293);
   and MGM_G360(ENABLE_CK_AND_D_AND_RD_AND_SE_AND_SI,SI,MGM_W294);
   not MGM_G361(MGM_W295,D);
   and MGM_G362(MGM_W296,RD,MGM_W295);
   and MGM_G363(MGM_W297,SD,MGM_W296);
   and MGM_G364(ENABLE_NOT_D_AND_RD_AND_SD_AND_SI,SI,MGM_W297);
   and MGM_G365(MGM_W298,RD,D);
   and MGM_G366(MGM_W299,SD,MGM_W298);
   not MGM_G367(MGM_W300,SI);
   and MGM_G368(ENABLE_D_AND_RD_AND_SD_AND_NOT_SI,MGM_W300,MGM_W299);
   not MGM_G369(MGM_W301,D);
   and MGM_G370(MGM_W302,RD,MGM_W301);
   and MGM_G371(MGM_W303,SD,MGM_W302);
   and MGM_G372(ENABLE_NOT_D_AND_RD_AND_SD_AND_SE,SE,MGM_W303);
   and MGM_G373(MGM_W304,RD,D);
   and MGM_G374(MGM_W305,SD,MGM_W304);
   and MGM_G375(ENABLE_D_AND_RD_AND_SD_AND_SE,SE,MGM_W305);
   // spec_gates_end
   // specify_block_begin
   specify

      if(D===1'b0 && SI===1'b1)
      // seq arc CK --> Q
      (posedge CK => (Q : SE))  = (1.0,1.0);
      
      if(SE===1'b0 && SI===1'b0)
      // seq arc CK --> Q
      (posedge CK => (Q : D))  = (1.0,1.0);
      
      if(D===1'b1 && SE===1'b0 && SI===1'b1 || D===1'b0 && SE===1'b1 && SI===1'b0)
      // seq arc CK --> Q
      (posedge CK => (Q : D))  = (1.0,1.0);
      
      if(D===1'b1 && SE===1'b1)
      // seq arc CK --> Q
      (posedge CK => (Q : SI))  = (1.0,1.0);
      
      ifnone
      // seq arc CK --> Q
      (posedge CK => (Q : D))  = (1.0,1.0);
      
      if(CK===1'b0 && D===1'b0 && SD===1'b0 && SE===1'b0 && SI===1'b0)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b0 && D===1'b0 && SD===1'b0 && SE===1'b0 && SI===1'b1)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b0 && D===1'b0 && SD===1'b0 && SE===1'b1 && SI===1'b0)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b0 && D===1'b0 && SD===1'b0 && SE===1'b1 && SI===1'b1)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b0 && D===1'b0 && SD===1'b1 && SE===1'b0 && SI===1'b0)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b0 && D===1'b0 && SD===1'b1 && SE===1'b0 && SI===1'b1)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b0 && D===1'b0 && SD===1'b1 && SE===1'b1 && SI===1'b0)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b0 && D===1'b0 && SD===1'b1 && SE===1'b1 && SI===1'b1)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b0 && D===1'b1 && SD===1'b0 && SE===1'b0 && SI===1'b0)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b0 && D===1'b1 && SD===1'b0 && SE===1'b0 && SI===1'b1)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b0 && D===1'b1 && SD===1'b0 && SE===1'b1 && SI===1'b0)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b0 && D===1'b1 && SD===1'b0 && SE===1'b1 && SI===1'b1)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b0 && D===1'b1 && SD===1'b1 && SE===1'b0 && SI===1'b0)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b0 && D===1'b1 && SD===1'b1 && SE===1'b0 && SI===1'b1)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b0 && D===1'b1 && SD===1'b1 && SE===1'b1 && SI===1'b0)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b0 && D===1'b1 && SD===1'b1 && SE===1'b1 && SI===1'b1)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b1 && D===1'b0 && SD===1'b0 && SE===1'b0 && SI===1'b0)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b1 && D===1'b0 && SD===1'b0 && SE===1'b0 && SI===1'b1)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b1 && D===1'b0 && SD===1'b0 && SE===1'b1 && SI===1'b0)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b1 && D===1'b0 && SD===1'b0 && SE===1'b1 && SI===1'b1)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b1 && D===1'b0 && SD===1'b1 && SE===1'b0 && SI===1'b0)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b1 && D===1'b0 && SD===1'b1 && SE===1'b0 && SI===1'b1)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b1 && D===1'b0 && SD===1'b1 && SE===1'b1 && SI===1'b0)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b1 && D===1'b0 && SD===1'b1 && SE===1'b1 && SI===1'b1)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b1 && D===1'b1 && SD===1'b0 && SE===1'b0 && SI===1'b0)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b1 && D===1'b1 && SD===1'b0 && SE===1'b0 && SI===1'b1)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b1 && D===1'b1 && SD===1'b0 && SE===1'b1 && SI===1'b0)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b1 && D===1'b1 && SD===1'b0 && SE===1'b1 && SI===1'b1)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b1 && D===1'b1 && SD===1'b1 && SE===1'b0 && SI===1'b0)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b1 && D===1'b1 && SD===1'b1 && SE===1'b0 && SI===1'b1)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b1 && D===1'b1 && SD===1'b1 && SE===1'b1 && SI===1'b0)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b1 && D===1'b1 && SD===1'b1 && SE===1'b1 && SI===1'b1)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      ifnone
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b0 && D===1'b0 && SE===1'b0 && SI===1'b0)
      // seq arc SD --> Q
      (SD => Q)  = (1.0,1.0);
      
      if(CK===1'b0 && D===1'b0 && SE===1'b0 && SI===1'b1)
      // seq arc SD --> Q
      (SD => Q)  = (1.0,1.0);
      
      if(CK===1'b0 && D===1'b0 && SE===1'b1 && SI===1'b0)
      // seq arc SD --> Q
      (SD => Q)  = (1.0,1.0);
      
      if(CK===1'b0 && D===1'b0 && SE===1'b1 && SI===1'b1)
      // seq arc SD --> Q
      (SD => Q)  = (1.0,1.0);
      
      if(CK===1'b0 && D===1'b1 && SE===1'b0 && SI===1'b0)
      // seq arc SD --> Q
      (SD => Q)  = (1.0,1.0);
      
      if(CK===1'b0 && D===1'b1 && SE===1'b0 && SI===1'b1)
      // seq arc SD --> Q
      (SD => Q)  = (1.0,1.0);
      
      if(CK===1'b0 && D===1'b1 && SE===1'b1 && SI===1'b0)
      // seq arc SD --> Q
      (SD => Q)  = (1.0,1.0);
      
      if(CK===1'b0 && D===1'b1 && SE===1'b1 && SI===1'b1)
      // seq arc SD --> Q
      (SD => Q)  = (1.0,1.0);
      
      if(CK===1'b1 && D===1'b0 && SE===1'b0 && SI===1'b0)
      // seq arc SD --> Q
      (SD => Q)  = (1.0,1.0);
      
      if(CK===1'b1 && D===1'b0 && SE===1'b0 && SI===1'b1)
      // seq arc SD --> Q
      (SD => Q)  = (1.0,1.0);
      
      if(CK===1'b1 && D===1'b0 && SE===1'b1 && SI===1'b0)
      // seq arc SD --> Q
      (SD => Q)  = (1.0,1.0);
      
      if(CK===1'b1 && D===1'b0 && SE===1'b1 && SI===1'b1)
      // seq arc SD --> Q
      (SD => Q)  = (1.0,1.0);
      
      if(CK===1'b1 && D===1'b1 && SE===1'b0 && SI===1'b0)
      // seq arc SD --> Q
      (SD => Q)  = (1.0,1.0);
      
      if(CK===1'b1 && D===1'b1 && SE===1'b0 && SI===1'b1)
      // seq arc SD --> Q
      (SD => Q)  = (1.0,1.0);
      
      if(CK===1'b1 && D===1'b1 && SE===1'b1 && SI===1'b0)
      // seq arc SD --> Q
      (SD => Q)  = (1.0,1.0);
      
      if(CK===1'b1 && D===1'b1 && SE===1'b1 && SI===1'b1)
      // seq arc SD --> Q
      (SD => Q)  = (1.0,1.0);
      
      ifnone
      // seq arc SD --> Q
      (SD => Q)  = (1.0,1.0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_RD_AND_SD_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_RD_AND_SD_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_RD_AND_SD_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_RD_AND_SD_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_RD_AND_SD_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_RD_AND_SD_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_RD_AND_SD_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_RD_AND_SD_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_RD_AND_SD_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_RD_AND_SD_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_RD_AND_SD_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_RD_AND_SD_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_RD_AND_SD_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_RD_AND_SD_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_RD_AND_SD_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_RD_AND_SD_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      // hold D-HL CK-LH
      $hold(posedge CK &&& (ENABLE_RD_AND_SD_AND_NOT_SE_AND_NOT_SI === 1'b1),
      negedge D &&& (ENABLE_RD_AND_SD_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold D-LH CK-LH
      $hold(posedge CK &&& (ENABLE_RD_AND_SD_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge D &&& (ENABLE_RD_AND_SD_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup D-HL CK-LH
      $setup(negedge D &&& (ENABLE_RD_AND_SD_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_RD_AND_SD_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup D-LH CK-LH
      $setup(posedge D &&& (ENABLE_RD_AND_SD_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_RD_AND_SD_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold D-HL CK-LH
      $hold(posedge CK &&& (ENABLE_RD_AND_SD_AND_NOT_SE_AND_SI === 1'b1),
      negedge D &&& (ENABLE_RD_AND_SD_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // hold D-LH CK-LH
      $hold(posedge CK &&& (ENABLE_RD_AND_SD_AND_NOT_SE_AND_SI === 1'b1),
      posedge D &&& (ENABLE_RD_AND_SD_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // setup D-HL CK-LH
      $setup(negedge D &&& (ENABLE_RD_AND_SD_AND_NOT_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_RD_AND_SD_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // setup D-LH CK-LH
      $setup(posedge D &&& (ENABLE_RD_AND_SD_AND_NOT_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_RD_AND_SD_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // recovery RD-LH CK-LH
      $recovery(posedge RD &&& (ENABLE_NOT_D_AND_SD_AND_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_SD_AND_SE_AND_SI === 1'b1),1.0);
      
      // removal RD-LH CK-LH
      $removal(posedge RD &&& (ENABLE_NOT_D_AND_SD_AND_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_SD_AND_SE_AND_SI === 1'b1),1.0);
      
      // recovery RD-LH CK-LH
      $recovery(posedge RD &&& (ENABLE_D_AND_SD_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_D_AND_SD_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // removal RD-LH CK-LH
      $removal(posedge RD &&& (ENABLE_D_AND_SD_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_D_AND_SD_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // recovery RD-LH CK-LH
      $recovery(posedge RD &&& (ENABLE_D_AND_SD_AND_NOT_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_D_AND_SD_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // removal RD-LH CK-LH
      $removal(posedge RD &&& (ENABLE_D_AND_SD_AND_NOT_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_D_AND_SD_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // recovery RD-LH CK-LH
      $recovery(posedge RD &&& (ENABLE_D_AND_SD_AND_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_D_AND_SD_AND_SE_AND_SI === 1'b1),1.0);
      
      // removal RD-LH CK-LH
      $removal(posedge RD &&& (ENABLE_D_AND_SD_AND_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_D_AND_SD_AND_SE_AND_SI === 1'b1),1.0);
      
      $width(negedge RD &&& (ENABLE_NOT_CK_AND_NOT_D_AND_SD_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge RD &&& (ENABLE_NOT_CK_AND_NOT_D_AND_SD_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge RD &&& (ENABLE_NOT_CK_AND_NOT_D_AND_SD_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge RD &&& (ENABLE_NOT_CK_AND_NOT_D_AND_SD_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge RD &&& (ENABLE_NOT_CK_AND_D_AND_SD_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge RD &&& (ENABLE_NOT_CK_AND_D_AND_SD_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge RD &&& (ENABLE_NOT_CK_AND_D_AND_SD_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge RD &&& (ENABLE_NOT_CK_AND_D_AND_SD_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge RD &&& (ENABLE_CK_AND_NOT_D_AND_SD_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge RD &&& (ENABLE_CK_AND_NOT_D_AND_SD_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge RD &&& (ENABLE_CK_AND_NOT_D_AND_SD_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge RD &&& (ENABLE_CK_AND_NOT_D_AND_SD_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge RD &&& (ENABLE_CK_AND_D_AND_SD_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge RD &&& (ENABLE_CK_AND_D_AND_SD_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge RD &&& (ENABLE_CK_AND_D_AND_SD_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge RD &&& (ENABLE_CK_AND_D_AND_SD_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      // hold RD-LH SD-LH
      $hold(posedge SD &&& (ENABLE_NOT_CK_AND_NOT_D_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge RD &&& (ENABLE_NOT_CK_AND_NOT_D_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup RD-LH SD-LH
      $setup(posedge RD &&& (ENABLE_NOT_CK_AND_NOT_D_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge SD &&& (ENABLE_NOT_CK_AND_NOT_D_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold RD-LH SD-LH
      $hold(posedge SD &&& (ENABLE_NOT_CK_AND_NOT_D_AND_NOT_SE_AND_SI === 1'b1),
      posedge RD &&& (ENABLE_NOT_CK_AND_NOT_D_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // setup RD-LH SD-LH
      $setup(posedge RD &&& (ENABLE_NOT_CK_AND_NOT_D_AND_NOT_SE_AND_SI === 1'b1),
      posedge SD &&& (ENABLE_NOT_CK_AND_NOT_D_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // hold RD-LH SD-LH
      $hold(posedge SD &&& (ENABLE_NOT_CK_AND_NOT_D_AND_SE_AND_NOT_SI === 1'b1),
      posedge RD &&& (ENABLE_NOT_CK_AND_NOT_D_AND_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup RD-LH SD-LH
      $setup(posedge RD &&& (ENABLE_NOT_CK_AND_NOT_D_AND_SE_AND_NOT_SI === 1'b1),
      posedge SD &&& (ENABLE_NOT_CK_AND_NOT_D_AND_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold RD-LH SD-LH
      $hold(posedge SD &&& (ENABLE_NOT_CK_AND_NOT_D_AND_SE_AND_SI === 1'b1),
      posedge RD &&& (ENABLE_NOT_CK_AND_NOT_D_AND_SE_AND_SI === 1'b1),1.0);
      
      // setup RD-LH SD-LH
      $setup(posedge RD &&& (ENABLE_NOT_CK_AND_NOT_D_AND_SE_AND_SI === 1'b1),
      posedge SD &&& (ENABLE_NOT_CK_AND_NOT_D_AND_SE_AND_SI === 1'b1),1.0);
      
      // hold RD-LH SD-LH
      $hold(posedge SD &&& (ENABLE_NOT_CK_AND_D_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge RD &&& (ENABLE_NOT_CK_AND_D_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup RD-LH SD-LH
      $setup(posedge RD &&& (ENABLE_NOT_CK_AND_D_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge SD &&& (ENABLE_NOT_CK_AND_D_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold RD-LH SD-LH
      $hold(posedge SD &&& (ENABLE_NOT_CK_AND_D_AND_NOT_SE_AND_SI === 1'b1),
      posedge RD &&& (ENABLE_NOT_CK_AND_D_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // setup RD-LH SD-LH
      $setup(posedge RD &&& (ENABLE_NOT_CK_AND_D_AND_NOT_SE_AND_SI === 1'b1),
      posedge SD &&& (ENABLE_NOT_CK_AND_D_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // hold RD-LH SD-LH
      $hold(posedge SD &&& (ENABLE_NOT_CK_AND_D_AND_SE_AND_NOT_SI === 1'b1),
      posedge RD &&& (ENABLE_NOT_CK_AND_D_AND_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup RD-LH SD-LH
      $setup(posedge RD &&& (ENABLE_NOT_CK_AND_D_AND_SE_AND_NOT_SI === 1'b1),
      posedge SD &&& (ENABLE_NOT_CK_AND_D_AND_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold RD-LH SD-LH
      $hold(posedge SD &&& (ENABLE_NOT_CK_AND_D_AND_SE_AND_SI === 1'b1),
      posedge RD &&& (ENABLE_NOT_CK_AND_D_AND_SE_AND_SI === 1'b1),1.0);
      
      // setup RD-LH SD-LH
      $setup(posedge RD &&& (ENABLE_NOT_CK_AND_D_AND_SE_AND_SI === 1'b1),
      posedge SD &&& (ENABLE_NOT_CK_AND_D_AND_SE_AND_SI === 1'b1),1.0);
      
      // hold RD-LH SD-LH
      $hold(posedge SD &&& (ENABLE_CK_AND_NOT_D_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge RD &&& (ENABLE_CK_AND_NOT_D_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup RD-LH SD-LH
      $setup(posedge RD &&& (ENABLE_CK_AND_NOT_D_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge SD &&& (ENABLE_CK_AND_NOT_D_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold RD-LH SD-LH
      $hold(posedge SD &&& (ENABLE_CK_AND_NOT_D_AND_NOT_SE_AND_SI === 1'b1),
      posedge RD &&& (ENABLE_CK_AND_NOT_D_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // setup RD-LH SD-LH
      $setup(posedge RD &&& (ENABLE_CK_AND_NOT_D_AND_NOT_SE_AND_SI === 1'b1),
      posedge SD &&& (ENABLE_CK_AND_NOT_D_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // hold RD-LH SD-LH
      $hold(posedge SD &&& (ENABLE_CK_AND_NOT_D_AND_SE_AND_NOT_SI === 1'b1),
      posedge RD &&& (ENABLE_CK_AND_NOT_D_AND_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup RD-LH SD-LH
      $setup(posedge RD &&& (ENABLE_CK_AND_NOT_D_AND_SE_AND_NOT_SI === 1'b1),
      posedge SD &&& (ENABLE_CK_AND_NOT_D_AND_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold RD-LH SD-LH
      $hold(posedge SD &&& (ENABLE_CK_AND_NOT_D_AND_SE_AND_SI === 1'b1),
      posedge RD &&& (ENABLE_CK_AND_NOT_D_AND_SE_AND_SI === 1'b1),1.0);
      
      // setup RD-LH SD-LH
      $setup(posedge RD &&& (ENABLE_CK_AND_NOT_D_AND_SE_AND_SI === 1'b1),
      posedge SD &&& (ENABLE_CK_AND_NOT_D_AND_SE_AND_SI === 1'b1),1.0);
      
      // hold RD-LH SD-LH
      $hold(posedge SD &&& (ENABLE_CK_AND_D_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge RD &&& (ENABLE_CK_AND_D_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup RD-LH SD-LH
      $setup(posedge RD &&& (ENABLE_CK_AND_D_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge SD &&& (ENABLE_CK_AND_D_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold RD-LH SD-LH
      $hold(posedge SD &&& (ENABLE_CK_AND_D_AND_NOT_SE_AND_SI === 1'b1),
      posedge RD &&& (ENABLE_CK_AND_D_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // setup RD-LH SD-LH
      $setup(posedge RD &&& (ENABLE_CK_AND_D_AND_NOT_SE_AND_SI === 1'b1),
      posedge SD &&& (ENABLE_CK_AND_D_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // hold RD-LH SD-LH
      $hold(posedge SD &&& (ENABLE_CK_AND_D_AND_SE_AND_NOT_SI === 1'b1),
      posedge RD &&& (ENABLE_CK_AND_D_AND_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup RD-LH SD-LH
      $setup(posedge RD &&& (ENABLE_CK_AND_D_AND_SE_AND_NOT_SI === 1'b1),
      posedge SD &&& (ENABLE_CK_AND_D_AND_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold RD-LH SD-LH
      $hold(posedge SD &&& (ENABLE_CK_AND_D_AND_SE_AND_SI === 1'b1),
      posedge RD &&& (ENABLE_CK_AND_D_AND_SE_AND_SI === 1'b1),1.0);
      
      // setup RD-LH SD-LH
      $setup(posedge RD &&& (ENABLE_CK_AND_D_AND_SE_AND_SI === 1'b1),
      posedge SD &&& (ENABLE_CK_AND_D_AND_SE_AND_SI === 1'b1),1.0);
      
      // recovery SD-LH CK-LH
      $recovery(posedge SD &&& (ENABLE_NOT_D_AND_RD_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_RD_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // removal SD-LH CK-LH
      $removal(posedge SD &&& (ENABLE_NOT_D_AND_RD_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_RD_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // recovery SD-LH CK-LH
      $recovery(posedge SD &&& (ENABLE_NOT_D_AND_RD_AND_NOT_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_RD_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // removal SD-LH CK-LH
      $removal(posedge SD &&& (ENABLE_NOT_D_AND_RD_AND_NOT_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_RD_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // recovery SD-LH CK-LH
      $recovery(posedge SD &&& (ENABLE_NOT_D_AND_RD_AND_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_RD_AND_SE_AND_NOT_SI === 1'b1),1.0);
      
      // removal SD-LH CK-LH
      $removal(posedge SD &&& (ENABLE_NOT_D_AND_RD_AND_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_RD_AND_SE_AND_NOT_SI === 1'b1),1.0);
      
      // recovery SD-LH CK-LH
      $recovery(posedge SD &&& (ENABLE_D_AND_RD_AND_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_D_AND_RD_AND_SE_AND_NOT_SI === 1'b1),1.0);
      
      // removal SD-LH CK-LH
      $removal(posedge SD &&& (ENABLE_D_AND_RD_AND_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_D_AND_RD_AND_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold SD-LH RD-LH
      $hold(posedge RD &&& (ENABLE_NOT_CK_AND_NOT_D_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge SD &&& (ENABLE_NOT_CK_AND_NOT_D_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup SD-LH RD-LH
      $setup(posedge SD &&& (ENABLE_NOT_CK_AND_NOT_D_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge RD &&& (ENABLE_NOT_CK_AND_NOT_D_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold SD-LH RD-LH
      $hold(posedge RD &&& (ENABLE_NOT_CK_AND_NOT_D_AND_NOT_SE_AND_SI === 1'b1),
      posedge SD &&& (ENABLE_NOT_CK_AND_NOT_D_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // setup SD-LH RD-LH
      $setup(posedge SD &&& (ENABLE_NOT_CK_AND_NOT_D_AND_NOT_SE_AND_SI === 1'b1),
      posedge RD &&& (ENABLE_NOT_CK_AND_NOT_D_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // hold SD-LH RD-LH
      $hold(posedge RD &&& (ENABLE_NOT_CK_AND_NOT_D_AND_SE_AND_NOT_SI === 1'b1),
      posedge SD &&& (ENABLE_NOT_CK_AND_NOT_D_AND_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup SD-LH RD-LH
      $setup(posedge SD &&& (ENABLE_NOT_CK_AND_NOT_D_AND_SE_AND_NOT_SI === 1'b1),
      posedge RD &&& (ENABLE_NOT_CK_AND_NOT_D_AND_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold SD-LH RD-LH
      $hold(posedge RD &&& (ENABLE_NOT_CK_AND_NOT_D_AND_SE_AND_SI === 1'b1),
      posedge SD &&& (ENABLE_NOT_CK_AND_NOT_D_AND_SE_AND_SI === 1'b1),1.0);
      
      // setup SD-LH RD-LH
      $setup(posedge SD &&& (ENABLE_NOT_CK_AND_NOT_D_AND_SE_AND_SI === 1'b1),
      posedge RD &&& (ENABLE_NOT_CK_AND_NOT_D_AND_SE_AND_SI === 1'b1),1.0);
      
      // hold SD-LH RD-LH
      $hold(posedge RD &&& (ENABLE_NOT_CK_AND_D_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge SD &&& (ENABLE_NOT_CK_AND_D_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup SD-LH RD-LH
      $setup(posedge SD &&& (ENABLE_NOT_CK_AND_D_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge RD &&& (ENABLE_NOT_CK_AND_D_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold SD-LH RD-LH
      $hold(posedge RD &&& (ENABLE_NOT_CK_AND_D_AND_NOT_SE_AND_SI === 1'b1),
      posedge SD &&& (ENABLE_NOT_CK_AND_D_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // setup SD-LH RD-LH
      $setup(posedge SD &&& (ENABLE_NOT_CK_AND_D_AND_NOT_SE_AND_SI === 1'b1),
      posedge RD &&& (ENABLE_NOT_CK_AND_D_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // hold SD-LH RD-LH
      $hold(posedge RD &&& (ENABLE_NOT_CK_AND_D_AND_SE_AND_NOT_SI === 1'b1),
      posedge SD &&& (ENABLE_NOT_CK_AND_D_AND_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup SD-LH RD-LH
      $setup(posedge SD &&& (ENABLE_NOT_CK_AND_D_AND_SE_AND_NOT_SI === 1'b1),
      posedge RD &&& (ENABLE_NOT_CK_AND_D_AND_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold SD-LH RD-LH
      $hold(posedge RD &&& (ENABLE_NOT_CK_AND_D_AND_SE_AND_SI === 1'b1),
      posedge SD &&& (ENABLE_NOT_CK_AND_D_AND_SE_AND_SI === 1'b1),1.0);
      
      // setup SD-LH RD-LH
      $setup(posedge SD &&& (ENABLE_NOT_CK_AND_D_AND_SE_AND_SI === 1'b1),
      posedge RD &&& (ENABLE_NOT_CK_AND_D_AND_SE_AND_SI === 1'b1),1.0);
      
      // hold SD-LH RD-LH
      $hold(posedge RD &&& (ENABLE_CK_AND_NOT_D_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge SD &&& (ENABLE_CK_AND_NOT_D_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup SD-LH RD-LH
      $setup(posedge SD &&& (ENABLE_CK_AND_NOT_D_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge RD &&& (ENABLE_CK_AND_NOT_D_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold SD-LH RD-LH
      $hold(posedge RD &&& (ENABLE_CK_AND_NOT_D_AND_NOT_SE_AND_SI === 1'b1),
      posedge SD &&& (ENABLE_CK_AND_NOT_D_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // setup SD-LH RD-LH
      $setup(posedge SD &&& (ENABLE_CK_AND_NOT_D_AND_NOT_SE_AND_SI === 1'b1),
      posedge RD &&& (ENABLE_CK_AND_NOT_D_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // hold SD-LH RD-LH
      $hold(posedge RD &&& (ENABLE_CK_AND_NOT_D_AND_SE_AND_NOT_SI === 1'b1),
      posedge SD &&& (ENABLE_CK_AND_NOT_D_AND_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup SD-LH RD-LH
      $setup(posedge SD &&& (ENABLE_CK_AND_NOT_D_AND_SE_AND_NOT_SI === 1'b1),
      posedge RD &&& (ENABLE_CK_AND_NOT_D_AND_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold SD-LH RD-LH
      $hold(posedge RD &&& (ENABLE_CK_AND_NOT_D_AND_SE_AND_SI === 1'b1),
      posedge SD &&& (ENABLE_CK_AND_NOT_D_AND_SE_AND_SI === 1'b1),1.0);
      
      // setup SD-LH RD-LH
      $setup(posedge SD &&& (ENABLE_CK_AND_NOT_D_AND_SE_AND_SI === 1'b1),
      posedge RD &&& (ENABLE_CK_AND_NOT_D_AND_SE_AND_SI === 1'b1),1.0);
      
      // hold SD-LH RD-LH
      $hold(posedge RD &&& (ENABLE_CK_AND_D_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge SD &&& (ENABLE_CK_AND_D_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup SD-LH RD-LH
      $setup(posedge SD &&& (ENABLE_CK_AND_D_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge RD &&& (ENABLE_CK_AND_D_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold SD-LH RD-LH
      $hold(posedge RD &&& (ENABLE_CK_AND_D_AND_NOT_SE_AND_SI === 1'b1),
      posedge SD &&& (ENABLE_CK_AND_D_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // setup SD-LH RD-LH
      $setup(posedge SD &&& (ENABLE_CK_AND_D_AND_NOT_SE_AND_SI === 1'b1),
      posedge RD &&& (ENABLE_CK_AND_D_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // hold SD-LH RD-LH
      $hold(posedge RD &&& (ENABLE_CK_AND_D_AND_SE_AND_NOT_SI === 1'b1),
      posedge SD &&& (ENABLE_CK_AND_D_AND_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup SD-LH RD-LH
      $setup(posedge SD &&& (ENABLE_CK_AND_D_AND_SE_AND_NOT_SI === 1'b1),
      posedge RD &&& (ENABLE_CK_AND_D_AND_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold SD-LH RD-LH
      $hold(posedge RD &&& (ENABLE_CK_AND_D_AND_SE_AND_SI === 1'b1),
      posedge SD &&& (ENABLE_CK_AND_D_AND_SE_AND_SI === 1'b1),1.0);
      
      // setup SD-LH RD-LH
      $setup(posedge SD &&& (ENABLE_CK_AND_D_AND_SE_AND_SI === 1'b1),
      posedge RD &&& (ENABLE_CK_AND_D_AND_SE_AND_SI === 1'b1),1.0);
      
      $width(negedge SD &&& (ENABLE_NOT_CK_AND_NOT_D_AND_RD_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge SD &&& (ENABLE_NOT_CK_AND_NOT_D_AND_RD_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge SD &&& (ENABLE_NOT_CK_AND_NOT_D_AND_RD_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge SD &&& (ENABLE_NOT_CK_AND_NOT_D_AND_RD_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge SD &&& (ENABLE_NOT_CK_AND_D_AND_RD_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge SD &&& (ENABLE_NOT_CK_AND_D_AND_RD_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge SD &&& (ENABLE_NOT_CK_AND_D_AND_RD_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge SD &&& (ENABLE_NOT_CK_AND_D_AND_RD_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge SD &&& (ENABLE_CK_AND_NOT_D_AND_RD_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge SD &&& (ENABLE_CK_AND_NOT_D_AND_RD_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge SD &&& (ENABLE_CK_AND_NOT_D_AND_RD_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge SD &&& (ENABLE_CK_AND_NOT_D_AND_RD_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge SD &&& (ENABLE_CK_AND_D_AND_RD_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge SD &&& (ENABLE_CK_AND_D_AND_RD_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge SD &&& (ENABLE_CK_AND_D_AND_RD_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge SD &&& (ENABLE_CK_AND_D_AND_RD_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      // hold SE-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D_AND_RD_AND_SD_AND_SI === 1'b1),
      negedge SE &&& (ENABLE_NOT_D_AND_RD_AND_SD_AND_SI === 1'b1),1.0);
      
      // hold SE-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D_AND_RD_AND_SD_AND_SI === 1'b1),
      posedge SE &&& (ENABLE_NOT_D_AND_RD_AND_SD_AND_SI === 1'b1),1.0);
      
      // setup SE-HL CK-LH
      $setup(negedge SE &&& (ENABLE_NOT_D_AND_RD_AND_SD_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_RD_AND_SD_AND_SI === 1'b1),1.0);
      
      // setup SE-LH CK-LH
      $setup(posedge SE &&& (ENABLE_NOT_D_AND_RD_AND_SD_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_RD_AND_SD_AND_SI === 1'b1),1.0);
      
      // hold SE-HL CK-LH
      $hold(posedge CK &&& (ENABLE_D_AND_RD_AND_SD_AND_NOT_SI === 1'b1),
      negedge SE &&& (ENABLE_D_AND_RD_AND_SD_AND_NOT_SI === 1'b1),1.0);
      
      // hold SE-LH CK-LH
      $hold(posedge CK &&& (ENABLE_D_AND_RD_AND_SD_AND_NOT_SI === 1'b1),
      posedge SE &&& (ENABLE_D_AND_RD_AND_SD_AND_NOT_SI === 1'b1),1.0);
      
      // setup SE-HL CK-LH
      $setup(negedge SE &&& (ENABLE_D_AND_RD_AND_SD_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_D_AND_RD_AND_SD_AND_NOT_SI === 1'b1),1.0);
      
      // setup SE-LH CK-LH
      $setup(posedge SE &&& (ENABLE_D_AND_RD_AND_SD_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_D_AND_RD_AND_SD_AND_NOT_SI === 1'b1),1.0);
      
      // hold SI-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D_AND_RD_AND_SD_AND_SE === 1'b1),
      negedge SI &&& (ENABLE_NOT_D_AND_RD_AND_SD_AND_SE === 1'b1),1.0);
      
      // hold SI-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D_AND_RD_AND_SD_AND_SE === 1'b1),
      posedge SI &&& (ENABLE_NOT_D_AND_RD_AND_SD_AND_SE === 1'b1),1.0);
      
      // setup SI-HL CK-LH
      $setup(negedge SI &&& (ENABLE_NOT_D_AND_RD_AND_SD_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_RD_AND_SD_AND_SE === 1'b1),1.0);
      
      // setup SI-LH CK-LH
      $setup(posedge SI &&& (ENABLE_NOT_D_AND_RD_AND_SD_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_RD_AND_SD_AND_SE === 1'b1),1.0);
      
      // hold SI-HL CK-LH
      $hold(posedge CK &&& (ENABLE_D_AND_RD_AND_SD_AND_SE === 1'b1),
      negedge SI &&& (ENABLE_D_AND_RD_AND_SD_AND_SE === 1'b1),1.0);
      
      // hold SI-LH CK-LH
      $hold(posedge CK &&& (ENABLE_D_AND_RD_AND_SD_AND_SE === 1'b1),
      posedge SI &&& (ENABLE_D_AND_RD_AND_SD_AND_SE === 1'b1),1.0);
      
      // setup SI-HL CK-LH
      $setup(negedge SI &&& (ENABLE_D_AND_RD_AND_SD_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_D_AND_RD_AND_SD_AND_SE === 1'b1),1.0);
      
      // setup SI-LH CK-LH
      $setup(posedge SI &&& (ENABLE_D_AND_RD_AND_SD_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_D_AND_RD_AND_SD_AND_SE === 1'b1),1.0);
      
      // mpw CK_lh 
      $width(posedge CK,1.0,0);
      
      // mpw CK_hl 
      $width(negedge CK,1.0,0);
      
      // mpw RD_hl 
      $width(negedge RD,1.0,0);
      
      // mpw SD_hl 
      $width(negedge SD,1.0,0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_FSDPRBSBQ_V2_1( Q, CK, D, SI, SE, RD, SD );
input CK, D, RD, SD, SE, SI;
output Q;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_FSDPRBSBQ_V2_1_func SAEDRVT14_FSDPRBSBQ_V2_1_behav_inst(.Q(Q),.CK(CK),.D(D),.SI(SI),.SE(SE),.RD(RD),.SD(SD));
`else
   SAEDRVT14_FSDPRBSBQ_V2_1_func SAEDRVT14_FSDPRBSBQ_V2_1_inst(.Q(Q),.CK(CK),.D(D),.SI(SI),.SE(SE),.RD(RD),.SD(SD));
   // spec_gates_begin
   not MGM_G0(MGM_W0,D);
   and MGM_G1(MGM_W1,RD,MGM_W0);
   and MGM_G2(MGM_W2,SD,MGM_W1);
   not MGM_G3(MGM_W3,SE);
   and MGM_G4(MGM_W4,MGM_W3,MGM_W2);
   not MGM_G5(MGM_W5,SI);
   and MGM_G6(ENABLE_NOT_D_AND_RD_AND_SD_AND_NOT_SE_AND_NOT_SI,MGM_W5,MGM_W4);
   not MGM_G7(MGM_W6,D);
   and MGM_G8(MGM_W7,RD,MGM_W6);
   and MGM_G9(MGM_W8,SD,MGM_W7);
   not MGM_G10(MGM_W9,SE);
   and MGM_G11(MGM_W10,MGM_W9,MGM_W8);
   and MGM_G12(ENABLE_NOT_D_AND_RD_AND_SD_AND_NOT_SE_AND_SI,SI,MGM_W10);
   not MGM_G13(MGM_W11,D);
   and MGM_G14(MGM_W12,RD,MGM_W11);
   and MGM_G15(MGM_W13,SD,MGM_W12);
   and MGM_G16(MGM_W14,SE,MGM_W13);
   not MGM_G17(MGM_W15,SI);
   and MGM_G18(ENABLE_NOT_D_AND_RD_AND_SD_AND_SE_AND_NOT_SI,MGM_W15,MGM_W14);
   not MGM_G19(MGM_W16,D);
   and MGM_G20(MGM_W17,RD,MGM_W16);
   and MGM_G21(MGM_W18,SD,MGM_W17);
   and MGM_G22(MGM_W19,SE,MGM_W18);
   and MGM_G23(ENABLE_NOT_D_AND_RD_AND_SD_AND_SE_AND_SI,SI,MGM_W19);
   and MGM_G24(MGM_W20,RD,D);
   and MGM_G25(MGM_W21,SD,MGM_W20);
   not MGM_G26(MGM_W22,SE);
   and MGM_G27(MGM_W23,MGM_W22,MGM_W21);
   not MGM_G28(MGM_W24,SI);
   and MGM_G29(ENABLE_D_AND_RD_AND_SD_AND_NOT_SE_AND_NOT_SI,MGM_W24,MGM_W23);
   and MGM_G30(MGM_W25,RD,D);
   and MGM_G31(MGM_W26,SD,MGM_W25);
   not MGM_G32(MGM_W27,SE);
   and MGM_G33(MGM_W28,MGM_W27,MGM_W26);
   and MGM_G34(ENABLE_D_AND_RD_AND_SD_AND_NOT_SE_AND_SI,SI,MGM_W28);
   and MGM_G35(MGM_W29,RD,D);
   and MGM_G36(MGM_W30,SD,MGM_W29);
   and MGM_G37(MGM_W31,SE,MGM_W30);
   not MGM_G38(MGM_W32,SI);
   and MGM_G39(ENABLE_D_AND_RD_AND_SD_AND_SE_AND_NOT_SI,MGM_W32,MGM_W31);
   and MGM_G40(MGM_W33,RD,D);
   and MGM_G41(MGM_W34,SD,MGM_W33);
   and MGM_G42(MGM_W35,SE,MGM_W34);
   and MGM_G43(ENABLE_D_AND_RD_AND_SD_AND_SE_AND_SI,SI,MGM_W35);
   and MGM_G44(MGM_W36,SD,RD);
   not MGM_G45(MGM_W37,SE);
   and MGM_G46(MGM_W38,MGM_W37,MGM_W36);
   not MGM_G47(MGM_W39,SI);
   and MGM_G48(ENABLE_RD_AND_SD_AND_NOT_SE_AND_NOT_SI,MGM_W39,MGM_W38);
   and MGM_G49(MGM_W40,SD,RD);
   not MGM_G50(MGM_W41,SE);
   and MGM_G51(MGM_W42,MGM_W41,MGM_W40);
   and MGM_G52(ENABLE_RD_AND_SD_AND_NOT_SE_AND_SI,SI,MGM_W42);
   not MGM_G53(MGM_W43,D);
   and MGM_G54(MGM_W44,SD,MGM_W43);
   and MGM_G55(MGM_W45,SE,MGM_W44);
   and MGM_G56(ENABLE_NOT_D_AND_SD_AND_SE_AND_SI,SI,MGM_W45);
   and MGM_G57(MGM_W46,SD,D);
   not MGM_G58(MGM_W47,SE);
   and MGM_G59(MGM_W48,MGM_W47,MGM_W46);
   not MGM_G60(MGM_W49,SI);
   and MGM_G61(ENABLE_D_AND_SD_AND_NOT_SE_AND_NOT_SI,MGM_W49,MGM_W48);
   and MGM_G62(MGM_W50,SD,D);
   not MGM_G63(MGM_W51,SE);
   and MGM_G64(MGM_W52,MGM_W51,MGM_W50);
   and MGM_G65(ENABLE_D_AND_SD_AND_NOT_SE_AND_SI,SI,MGM_W52);
   and MGM_G66(MGM_W53,SD,D);
   and MGM_G67(MGM_W54,SE,MGM_W53);
   and MGM_G68(ENABLE_D_AND_SD_AND_SE_AND_SI,SI,MGM_W54);
   not MGM_G69(MGM_W55,CK);
   not MGM_G70(MGM_W56,D);
   and MGM_G71(MGM_W57,MGM_W56,MGM_W55);
   and MGM_G72(MGM_W58,SD,MGM_W57);
   not MGM_G73(MGM_W59,SE);
   and MGM_G74(MGM_W60,MGM_W59,MGM_W58);
   not MGM_G75(MGM_W61,SI);
   and MGM_G76(ENABLE_NOT_CK_AND_NOT_D_AND_SD_AND_NOT_SE_AND_NOT_SI,MGM_W61,MGM_W60);
   not MGM_G77(MGM_W62,CK);
   not MGM_G78(MGM_W63,D);
   and MGM_G79(MGM_W64,MGM_W63,MGM_W62);
   and MGM_G80(MGM_W65,SD,MGM_W64);
   not MGM_G81(MGM_W66,SE);
   and MGM_G82(MGM_W67,MGM_W66,MGM_W65);
   and MGM_G83(ENABLE_NOT_CK_AND_NOT_D_AND_SD_AND_NOT_SE_AND_SI,SI,MGM_W67);
   not MGM_G84(MGM_W68,CK);
   not MGM_G85(MGM_W69,D);
   and MGM_G86(MGM_W70,MGM_W69,MGM_W68);
   and MGM_G87(MGM_W71,SD,MGM_W70);
   and MGM_G88(MGM_W72,SE,MGM_W71);
   not MGM_G89(MGM_W73,SI);
   and MGM_G90(ENABLE_NOT_CK_AND_NOT_D_AND_SD_AND_SE_AND_NOT_SI,MGM_W73,MGM_W72);
   not MGM_G91(MGM_W74,CK);
   not MGM_G92(MGM_W75,D);
   and MGM_G93(MGM_W76,MGM_W75,MGM_W74);
   and MGM_G94(MGM_W77,SD,MGM_W76);
   and MGM_G95(MGM_W78,SE,MGM_W77);
   and MGM_G96(ENABLE_NOT_CK_AND_NOT_D_AND_SD_AND_SE_AND_SI,SI,MGM_W78);
   not MGM_G97(MGM_W79,CK);
   and MGM_G98(MGM_W80,D,MGM_W79);
   and MGM_G99(MGM_W81,SD,MGM_W80);
   not MGM_G100(MGM_W82,SE);
   and MGM_G101(MGM_W83,MGM_W82,MGM_W81);
   not MGM_G102(MGM_W84,SI);
   and MGM_G103(ENABLE_NOT_CK_AND_D_AND_SD_AND_NOT_SE_AND_NOT_SI,MGM_W84,MGM_W83);
   not MGM_G104(MGM_W85,CK);
   and MGM_G105(MGM_W86,D,MGM_W85);
   and MGM_G106(MGM_W87,SD,MGM_W86);
   not MGM_G107(MGM_W88,SE);
   and MGM_G108(MGM_W89,MGM_W88,MGM_W87);
   and MGM_G109(ENABLE_NOT_CK_AND_D_AND_SD_AND_NOT_SE_AND_SI,SI,MGM_W89);
   not MGM_G110(MGM_W90,CK);
   and MGM_G111(MGM_W91,D,MGM_W90);
   and MGM_G112(MGM_W92,SD,MGM_W91);
   and MGM_G113(MGM_W93,SE,MGM_W92);
   not MGM_G114(MGM_W94,SI);
   and MGM_G115(ENABLE_NOT_CK_AND_D_AND_SD_AND_SE_AND_NOT_SI,MGM_W94,MGM_W93);
   not MGM_G116(MGM_W95,CK);
   and MGM_G117(MGM_W96,D,MGM_W95);
   and MGM_G118(MGM_W97,SD,MGM_W96);
   and MGM_G119(MGM_W98,SE,MGM_W97);
   and MGM_G120(ENABLE_NOT_CK_AND_D_AND_SD_AND_SE_AND_SI,SI,MGM_W98);
   not MGM_G121(MGM_W99,D);
   and MGM_G122(MGM_W100,MGM_W99,CK);
   and MGM_G123(MGM_W101,SD,MGM_W100);
   not MGM_G124(MGM_W102,SE);
   and MGM_G125(MGM_W103,MGM_W102,MGM_W101);
   not MGM_G126(MGM_W104,SI);
   and MGM_G127(ENABLE_CK_AND_NOT_D_AND_SD_AND_NOT_SE_AND_NOT_SI,MGM_W104,MGM_W103);
   not MGM_G128(MGM_W105,D);
   and MGM_G129(MGM_W106,MGM_W105,CK);
   and MGM_G130(MGM_W107,SD,MGM_W106);
   not MGM_G131(MGM_W108,SE);
   and MGM_G132(MGM_W109,MGM_W108,MGM_W107);
   and MGM_G133(ENABLE_CK_AND_NOT_D_AND_SD_AND_NOT_SE_AND_SI,SI,MGM_W109);
   not MGM_G134(MGM_W110,D);
   and MGM_G135(MGM_W111,MGM_W110,CK);
   and MGM_G136(MGM_W112,SD,MGM_W111);
   and MGM_G137(MGM_W113,SE,MGM_W112);
   not MGM_G138(MGM_W114,SI);
   and MGM_G139(ENABLE_CK_AND_NOT_D_AND_SD_AND_SE_AND_NOT_SI,MGM_W114,MGM_W113);
   not MGM_G140(MGM_W115,D);
   and MGM_G141(MGM_W116,MGM_W115,CK);
   and MGM_G142(MGM_W117,SD,MGM_W116);
   and MGM_G143(MGM_W118,SE,MGM_W117);
   and MGM_G144(ENABLE_CK_AND_NOT_D_AND_SD_AND_SE_AND_SI,SI,MGM_W118);
   and MGM_G145(MGM_W119,D,CK);
   and MGM_G146(MGM_W120,SD,MGM_W119);
   not MGM_G147(MGM_W121,SE);
   and MGM_G148(MGM_W122,MGM_W121,MGM_W120);
   not MGM_G149(MGM_W123,SI);
   and MGM_G150(ENABLE_CK_AND_D_AND_SD_AND_NOT_SE_AND_NOT_SI,MGM_W123,MGM_W122);
   and MGM_G151(MGM_W124,D,CK);
   and MGM_G152(MGM_W125,SD,MGM_W124);
   not MGM_G153(MGM_W126,SE);
   and MGM_G154(MGM_W127,MGM_W126,MGM_W125);
   and MGM_G155(ENABLE_CK_AND_D_AND_SD_AND_NOT_SE_AND_SI,SI,MGM_W127);
   and MGM_G156(MGM_W128,D,CK);
   and MGM_G157(MGM_W129,SD,MGM_W128);
   and MGM_G158(MGM_W130,SE,MGM_W129);
   not MGM_G159(MGM_W131,SI);
   and MGM_G160(ENABLE_CK_AND_D_AND_SD_AND_SE_AND_NOT_SI,MGM_W131,MGM_W130);
   and MGM_G161(MGM_W132,D,CK);
   and MGM_G162(MGM_W133,SD,MGM_W132);
   and MGM_G163(MGM_W134,SE,MGM_W133);
   and MGM_G164(ENABLE_CK_AND_D_AND_SD_AND_SE_AND_SI,SI,MGM_W134);
   not MGM_G165(MGM_W135,CK);
   not MGM_G166(MGM_W136,D);
   and MGM_G167(MGM_W137,MGM_W136,MGM_W135);
   not MGM_G168(MGM_W138,SE);
   and MGM_G169(MGM_W139,MGM_W138,MGM_W137);
   not MGM_G170(MGM_W140,SI);
   and MGM_G171(ENABLE_NOT_CK_AND_NOT_D_AND_NOT_SE_AND_NOT_SI,MGM_W140,MGM_W139);
   not MGM_G172(MGM_W141,CK);
   not MGM_G173(MGM_W142,D);
   and MGM_G174(MGM_W143,MGM_W142,MGM_W141);
   not MGM_G175(MGM_W144,SE);
   and MGM_G176(MGM_W145,MGM_W144,MGM_W143);
   and MGM_G177(ENABLE_NOT_CK_AND_NOT_D_AND_NOT_SE_AND_SI,SI,MGM_W145);
   not MGM_G178(MGM_W146,CK);
   not MGM_G179(MGM_W147,D);
   and MGM_G180(MGM_W148,MGM_W147,MGM_W146);
   and MGM_G181(MGM_W149,SE,MGM_W148);
   not MGM_G182(MGM_W150,SI);
   and MGM_G183(ENABLE_NOT_CK_AND_NOT_D_AND_SE_AND_NOT_SI,MGM_W150,MGM_W149);
   not MGM_G184(MGM_W151,CK);
   not MGM_G185(MGM_W152,D);
   and MGM_G186(MGM_W153,MGM_W152,MGM_W151);
   and MGM_G187(MGM_W154,SE,MGM_W153);
   and MGM_G188(ENABLE_NOT_CK_AND_NOT_D_AND_SE_AND_SI,SI,MGM_W154);
   not MGM_G189(MGM_W155,CK);
   and MGM_G190(MGM_W156,D,MGM_W155);
   not MGM_G191(MGM_W157,SE);
   and MGM_G192(MGM_W158,MGM_W157,MGM_W156);
   not MGM_G193(MGM_W159,SI);
   and MGM_G194(ENABLE_NOT_CK_AND_D_AND_NOT_SE_AND_NOT_SI,MGM_W159,MGM_W158);
   not MGM_G195(MGM_W160,CK);
   and MGM_G196(MGM_W161,D,MGM_W160);
   not MGM_G197(MGM_W162,SE);
   and MGM_G198(MGM_W163,MGM_W162,MGM_W161);
   and MGM_G199(ENABLE_NOT_CK_AND_D_AND_NOT_SE_AND_SI,SI,MGM_W163);
   not MGM_G200(MGM_W164,CK);
   and MGM_G201(MGM_W165,D,MGM_W164);
   and MGM_G202(MGM_W166,SE,MGM_W165);
   not MGM_G203(MGM_W167,SI);
   and MGM_G204(ENABLE_NOT_CK_AND_D_AND_SE_AND_NOT_SI,MGM_W167,MGM_W166);
   not MGM_G205(MGM_W168,CK);
   and MGM_G206(MGM_W169,D,MGM_W168);
   and MGM_G207(MGM_W170,SE,MGM_W169);
   and MGM_G208(ENABLE_NOT_CK_AND_D_AND_SE_AND_SI,SI,MGM_W170);
   not MGM_G209(MGM_W171,D);
   and MGM_G210(MGM_W172,MGM_W171,CK);
   not MGM_G211(MGM_W173,SE);
   and MGM_G212(MGM_W174,MGM_W173,MGM_W172);
   not MGM_G213(MGM_W175,SI);
   and MGM_G214(ENABLE_CK_AND_NOT_D_AND_NOT_SE_AND_NOT_SI,MGM_W175,MGM_W174);
   not MGM_G215(MGM_W176,D);
   and MGM_G216(MGM_W177,MGM_W176,CK);
   not MGM_G217(MGM_W178,SE);
   and MGM_G218(MGM_W179,MGM_W178,MGM_W177);
   and MGM_G219(ENABLE_CK_AND_NOT_D_AND_NOT_SE_AND_SI,SI,MGM_W179);
   not MGM_G220(MGM_W180,D);
   and MGM_G221(MGM_W181,MGM_W180,CK);
   and MGM_G222(MGM_W182,SE,MGM_W181);
   not MGM_G223(MGM_W183,SI);
   and MGM_G224(ENABLE_CK_AND_NOT_D_AND_SE_AND_NOT_SI,MGM_W183,MGM_W182);
   not MGM_G225(MGM_W184,D);
   and MGM_G226(MGM_W185,MGM_W184,CK);
   and MGM_G227(MGM_W186,SE,MGM_W185);
   and MGM_G228(ENABLE_CK_AND_NOT_D_AND_SE_AND_SI,SI,MGM_W186);
   and MGM_G229(MGM_W187,D,CK);
   not MGM_G230(MGM_W188,SE);
   and MGM_G231(MGM_W189,MGM_W188,MGM_W187);
   not MGM_G232(MGM_W190,SI);
   and MGM_G233(ENABLE_CK_AND_D_AND_NOT_SE_AND_NOT_SI,MGM_W190,MGM_W189);
   and MGM_G234(MGM_W191,D,CK);
   not MGM_G235(MGM_W192,SE);
   and MGM_G236(MGM_W193,MGM_W192,MGM_W191);
   and MGM_G237(ENABLE_CK_AND_D_AND_NOT_SE_AND_SI,SI,MGM_W193);
   and MGM_G238(MGM_W194,D,CK);
   and MGM_G239(MGM_W195,SE,MGM_W194);
   not MGM_G240(MGM_W196,SI);
   and MGM_G241(ENABLE_CK_AND_D_AND_SE_AND_NOT_SI,MGM_W196,MGM_W195);
   and MGM_G242(MGM_W197,D,CK);
   and MGM_G243(MGM_W198,SE,MGM_W197);
   and MGM_G244(ENABLE_CK_AND_D_AND_SE_AND_SI,SI,MGM_W198);
   not MGM_G245(MGM_W199,D);
   and MGM_G246(MGM_W200,RD,MGM_W199);
   not MGM_G247(MGM_W201,SE);
   and MGM_G248(MGM_W202,MGM_W201,MGM_W200);
   not MGM_G249(MGM_W203,SI);
   and MGM_G250(ENABLE_NOT_D_AND_RD_AND_NOT_SE_AND_NOT_SI,MGM_W203,MGM_W202);
   not MGM_G251(MGM_W204,D);
   and MGM_G252(MGM_W205,RD,MGM_W204);
   not MGM_G253(MGM_W206,SE);
   and MGM_G254(MGM_W207,MGM_W206,MGM_W205);
   and MGM_G255(ENABLE_NOT_D_AND_RD_AND_NOT_SE_AND_SI,SI,MGM_W207);
   not MGM_G256(MGM_W208,D);
   and MGM_G257(MGM_W209,RD,MGM_W208);
   and MGM_G258(MGM_W210,SE,MGM_W209);
   not MGM_G259(MGM_W211,SI);
   and MGM_G260(ENABLE_NOT_D_AND_RD_AND_SE_AND_NOT_SI,MGM_W211,MGM_W210);
   and MGM_G261(MGM_W212,RD,D);
   and MGM_G262(MGM_W213,SE,MGM_W212);
   not MGM_G263(MGM_W214,SI);
   and MGM_G264(ENABLE_D_AND_RD_AND_SE_AND_NOT_SI,MGM_W214,MGM_W213);
   not MGM_G265(MGM_W215,CK);
   not MGM_G266(MGM_W216,D);
   and MGM_G267(MGM_W217,MGM_W216,MGM_W215);
   and MGM_G268(MGM_W218,RD,MGM_W217);
   not MGM_G269(MGM_W219,SE);
   and MGM_G270(MGM_W220,MGM_W219,MGM_W218);
   not MGM_G271(MGM_W221,SI);
   and MGM_G272(ENABLE_NOT_CK_AND_NOT_D_AND_RD_AND_NOT_SE_AND_NOT_SI,MGM_W221,MGM_W220);
   not MGM_G273(MGM_W222,CK);
   not MGM_G274(MGM_W223,D);
   and MGM_G275(MGM_W224,MGM_W223,MGM_W222);
   and MGM_G276(MGM_W225,RD,MGM_W224);
   not MGM_G277(MGM_W226,SE);
   and MGM_G278(MGM_W227,MGM_W226,MGM_W225);
   and MGM_G279(ENABLE_NOT_CK_AND_NOT_D_AND_RD_AND_NOT_SE_AND_SI,SI,MGM_W227);
   not MGM_G280(MGM_W228,CK);
   not MGM_G281(MGM_W229,D);
   and MGM_G282(MGM_W230,MGM_W229,MGM_W228);
   and MGM_G283(MGM_W231,RD,MGM_W230);
   and MGM_G284(MGM_W232,SE,MGM_W231);
   not MGM_G285(MGM_W233,SI);
   and MGM_G286(ENABLE_NOT_CK_AND_NOT_D_AND_RD_AND_SE_AND_NOT_SI,MGM_W233,MGM_W232);
   not MGM_G287(MGM_W234,CK);
   not MGM_G288(MGM_W235,D);
   and MGM_G289(MGM_W236,MGM_W235,MGM_W234);
   and MGM_G290(MGM_W237,RD,MGM_W236);
   and MGM_G291(MGM_W238,SE,MGM_W237);
   and MGM_G292(ENABLE_NOT_CK_AND_NOT_D_AND_RD_AND_SE_AND_SI,SI,MGM_W238);
   not MGM_G293(MGM_W239,CK);
   and MGM_G294(MGM_W240,D,MGM_W239);
   and MGM_G295(MGM_W241,RD,MGM_W240);
   not MGM_G296(MGM_W242,SE);
   and MGM_G297(MGM_W243,MGM_W242,MGM_W241);
   not MGM_G298(MGM_W244,SI);
   and MGM_G299(ENABLE_NOT_CK_AND_D_AND_RD_AND_NOT_SE_AND_NOT_SI,MGM_W244,MGM_W243);
   not MGM_G300(MGM_W245,CK);
   and MGM_G301(MGM_W246,D,MGM_W245);
   and MGM_G302(MGM_W247,RD,MGM_W246);
   not MGM_G303(MGM_W248,SE);
   and MGM_G304(MGM_W249,MGM_W248,MGM_W247);
   and MGM_G305(ENABLE_NOT_CK_AND_D_AND_RD_AND_NOT_SE_AND_SI,SI,MGM_W249);
   not MGM_G306(MGM_W250,CK);
   and MGM_G307(MGM_W251,D,MGM_W250);
   and MGM_G308(MGM_W252,RD,MGM_W251);
   and MGM_G309(MGM_W253,SE,MGM_W252);
   not MGM_G310(MGM_W254,SI);
   and MGM_G311(ENABLE_NOT_CK_AND_D_AND_RD_AND_SE_AND_NOT_SI,MGM_W254,MGM_W253);
   not MGM_G312(MGM_W255,CK);
   and MGM_G313(MGM_W256,D,MGM_W255);
   and MGM_G314(MGM_W257,RD,MGM_W256);
   and MGM_G315(MGM_W258,SE,MGM_W257);
   and MGM_G316(ENABLE_NOT_CK_AND_D_AND_RD_AND_SE_AND_SI,SI,MGM_W258);
   not MGM_G317(MGM_W259,D);
   and MGM_G318(MGM_W260,MGM_W259,CK);
   and MGM_G319(MGM_W261,RD,MGM_W260);
   not MGM_G320(MGM_W262,SE);
   and MGM_G321(MGM_W263,MGM_W262,MGM_W261);
   not MGM_G322(MGM_W264,SI);
   and MGM_G323(ENABLE_CK_AND_NOT_D_AND_RD_AND_NOT_SE_AND_NOT_SI,MGM_W264,MGM_W263);
   not MGM_G324(MGM_W265,D);
   and MGM_G325(MGM_W266,MGM_W265,CK);
   and MGM_G326(MGM_W267,RD,MGM_W266);
   not MGM_G327(MGM_W268,SE);
   and MGM_G328(MGM_W269,MGM_W268,MGM_W267);
   and MGM_G329(ENABLE_CK_AND_NOT_D_AND_RD_AND_NOT_SE_AND_SI,SI,MGM_W269);
   not MGM_G330(MGM_W270,D);
   and MGM_G331(MGM_W271,MGM_W270,CK);
   and MGM_G332(MGM_W272,RD,MGM_W271);
   and MGM_G333(MGM_W273,SE,MGM_W272);
   not MGM_G334(MGM_W274,SI);
   and MGM_G335(ENABLE_CK_AND_NOT_D_AND_RD_AND_SE_AND_NOT_SI,MGM_W274,MGM_W273);
   not MGM_G336(MGM_W275,D);
   and MGM_G337(MGM_W276,MGM_W275,CK);
   and MGM_G338(MGM_W277,RD,MGM_W276);
   and MGM_G339(MGM_W278,SE,MGM_W277);
   and MGM_G340(ENABLE_CK_AND_NOT_D_AND_RD_AND_SE_AND_SI,SI,MGM_W278);
   and MGM_G341(MGM_W279,D,CK);
   and MGM_G342(MGM_W280,RD,MGM_W279);
   not MGM_G343(MGM_W281,SE);
   and MGM_G344(MGM_W282,MGM_W281,MGM_W280);
   not MGM_G345(MGM_W283,SI);
   and MGM_G346(ENABLE_CK_AND_D_AND_RD_AND_NOT_SE_AND_NOT_SI,MGM_W283,MGM_W282);
   and MGM_G347(MGM_W284,D,CK);
   and MGM_G348(MGM_W285,RD,MGM_W284);
   not MGM_G349(MGM_W286,SE);
   and MGM_G350(MGM_W287,MGM_W286,MGM_W285);
   and MGM_G351(ENABLE_CK_AND_D_AND_RD_AND_NOT_SE_AND_SI,SI,MGM_W287);
   and MGM_G352(MGM_W288,D,CK);
   and MGM_G353(MGM_W289,RD,MGM_W288);
   and MGM_G354(MGM_W290,SE,MGM_W289);
   not MGM_G355(MGM_W291,SI);
   and MGM_G356(ENABLE_CK_AND_D_AND_RD_AND_SE_AND_NOT_SI,MGM_W291,MGM_W290);
   and MGM_G357(MGM_W292,D,CK);
   and MGM_G358(MGM_W293,RD,MGM_W292);
   and MGM_G359(MGM_W294,SE,MGM_W293);
   and MGM_G360(ENABLE_CK_AND_D_AND_RD_AND_SE_AND_SI,SI,MGM_W294);
   not MGM_G361(MGM_W295,D);
   and MGM_G362(MGM_W296,RD,MGM_W295);
   and MGM_G363(MGM_W297,SD,MGM_W296);
   and MGM_G364(ENABLE_NOT_D_AND_RD_AND_SD_AND_SI,SI,MGM_W297);
   and MGM_G365(MGM_W298,RD,D);
   and MGM_G366(MGM_W299,SD,MGM_W298);
   not MGM_G367(MGM_W300,SI);
   and MGM_G368(ENABLE_D_AND_RD_AND_SD_AND_NOT_SI,MGM_W300,MGM_W299);
   not MGM_G369(MGM_W301,D);
   and MGM_G370(MGM_W302,RD,MGM_W301);
   and MGM_G371(MGM_W303,SD,MGM_W302);
   and MGM_G372(ENABLE_NOT_D_AND_RD_AND_SD_AND_SE,SE,MGM_W303);
   and MGM_G373(MGM_W304,RD,D);
   and MGM_G374(MGM_W305,SD,MGM_W304);
   and MGM_G375(ENABLE_D_AND_RD_AND_SD_AND_SE,SE,MGM_W305);
   // spec_gates_end
   // specify_block_begin
   specify

      if(D===1'b0 && SI===1'b1)
      // seq arc CK --> Q
      (posedge CK => (Q : SE))  = (1.0,1.0);
      
      if(SE===1'b0 && SI===1'b0)
      // seq arc CK --> Q
      (posedge CK => (Q : D))  = (1.0,1.0);
      
      if(D===1'b1 && SE===1'b0 && SI===1'b1 || D===1'b0 && SE===1'b1 && SI===1'b0)
      // seq arc CK --> Q
      (posedge CK => (Q : D))  = (1.0,1.0);
      
      if(D===1'b1 && SE===1'b1)
      // seq arc CK --> Q
      (posedge CK => (Q : SI))  = (1.0,1.0);
      
      ifnone
      // seq arc CK --> Q
      (posedge CK => (Q : D))  = (1.0,1.0);
      
      if(CK===1'b0 && D===1'b0 && SD===1'b0 && SE===1'b0 && SI===1'b0)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b0 && D===1'b0 && SD===1'b0 && SE===1'b0 && SI===1'b1)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b0 && D===1'b0 && SD===1'b0 && SE===1'b1 && SI===1'b0)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b0 && D===1'b0 && SD===1'b0 && SE===1'b1 && SI===1'b1)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b0 && D===1'b0 && SD===1'b1 && SE===1'b0 && SI===1'b0)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b0 && D===1'b0 && SD===1'b1 && SE===1'b0 && SI===1'b1)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b0 && D===1'b0 && SD===1'b1 && SE===1'b1 && SI===1'b0)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b0 && D===1'b0 && SD===1'b1 && SE===1'b1 && SI===1'b1)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b0 && D===1'b1 && SD===1'b0 && SE===1'b0 && SI===1'b0)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b0 && D===1'b1 && SD===1'b0 && SE===1'b0 && SI===1'b1)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b0 && D===1'b1 && SD===1'b0 && SE===1'b1 && SI===1'b0)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b0 && D===1'b1 && SD===1'b0 && SE===1'b1 && SI===1'b1)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b0 && D===1'b1 && SD===1'b1 && SE===1'b0 && SI===1'b0)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b0 && D===1'b1 && SD===1'b1 && SE===1'b0 && SI===1'b1)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b0 && D===1'b1 && SD===1'b1 && SE===1'b1 && SI===1'b0)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b0 && D===1'b1 && SD===1'b1 && SE===1'b1 && SI===1'b1)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b1 && D===1'b0 && SD===1'b0 && SE===1'b0 && SI===1'b0)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b1 && D===1'b0 && SD===1'b0 && SE===1'b0 && SI===1'b1)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b1 && D===1'b0 && SD===1'b0 && SE===1'b1 && SI===1'b0)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b1 && D===1'b0 && SD===1'b0 && SE===1'b1 && SI===1'b1)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b1 && D===1'b0 && SD===1'b1 && SE===1'b0 && SI===1'b0)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b1 && D===1'b0 && SD===1'b1 && SE===1'b0 && SI===1'b1)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b1 && D===1'b0 && SD===1'b1 && SE===1'b1 && SI===1'b0)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b1 && D===1'b0 && SD===1'b1 && SE===1'b1 && SI===1'b1)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b1 && D===1'b1 && SD===1'b0 && SE===1'b0 && SI===1'b0)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b1 && D===1'b1 && SD===1'b0 && SE===1'b0 && SI===1'b1)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b1 && D===1'b1 && SD===1'b0 && SE===1'b1 && SI===1'b0)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b1 && D===1'b1 && SD===1'b0 && SE===1'b1 && SI===1'b1)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b1 && D===1'b1 && SD===1'b1 && SE===1'b0 && SI===1'b0)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b1 && D===1'b1 && SD===1'b1 && SE===1'b0 && SI===1'b1)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b1 && D===1'b1 && SD===1'b1 && SE===1'b1 && SI===1'b0)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b1 && D===1'b1 && SD===1'b1 && SE===1'b1 && SI===1'b1)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      ifnone
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b0 && D===1'b0 && SE===1'b0 && SI===1'b0)
      // seq arc SD --> Q
      (SD => Q)  = (1.0,1.0);
      
      if(CK===1'b0 && D===1'b0 && SE===1'b0 && SI===1'b1)
      // seq arc SD --> Q
      (SD => Q)  = (1.0,1.0);
      
      if(CK===1'b0 && D===1'b0 && SE===1'b1 && SI===1'b0)
      // seq arc SD --> Q
      (SD => Q)  = (1.0,1.0);
      
      if(CK===1'b0 && D===1'b0 && SE===1'b1 && SI===1'b1)
      // seq arc SD --> Q
      (SD => Q)  = (1.0,1.0);
      
      if(CK===1'b0 && D===1'b1 && SE===1'b0 && SI===1'b0)
      // seq arc SD --> Q
      (SD => Q)  = (1.0,1.0);
      
      if(CK===1'b0 && D===1'b1 && SE===1'b0 && SI===1'b1)
      // seq arc SD --> Q
      (SD => Q)  = (1.0,1.0);
      
      if(CK===1'b0 && D===1'b1 && SE===1'b1 && SI===1'b0)
      // seq arc SD --> Q
      (SD => Q)  = (1.0,1.0);
      
      if(CK===1'b0 && D===1'b1 && SE===1'b1 && SI===1'b1)
      // seq arc SD --> Q
      (SD => Q)  = (1.0,1.0);
      
      if(CK===1'b1 && D===1'b0 && SE===1'b0 && SI===1'b0)
      // seq arc SD --> Q
      (SD => Q)  = (1.0,1.0);
      
      if(CK===1'b1 && D===1'b0 && SE===1'b0 && SI===1'b1)
      // seq arc SD --> Q
      (SD => Q)  = (1.0,1.0);
      
      if(CK===1'b1 && D===1'b0 && SE===1'b1 && SI===1'b0)
      // seq arc SD --> Q
      (SD => Q)  = (1.0,1.0);
      
      if(CK===1'b1 && D===1'b0 && SE===1'b1 && SI===1'b1)
      // seq arc SD --> Q
      (SD => Q)  = (1.0,1.0);
      
      if(CK===1'b1 && D===1'b1 && SE===1'b0 && SI===1'b0)
      // seq arc SD --> Q
      (SD => Q)  = (1.0,1.0);
      
      if(CK===1'b1 && D===1'b1 && SE===1'b0 && SI===1'b1)
      // seq arc SD --> Q
      (SD => Q)  = (1.0,1.0);
      
      if(CK===1'b1 && D===1'b1 && SE===1'b1 && SI===1'b0)
      // seq arc SD --> Q
      (SD => Q)  = (1.0,1.0);
      
      if(CK===1'b1 && D===1'b1 && SE===1'b1 && SI===1'b1)
      // seq arc SD --> Q
      (SD => Q)  = (1.0,1.0);
      
      ifnone
      // seq arc SD --> Q
      (SD => Q)  = (1.0,1.0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_RD_AND_SD_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_RD_AND_SD_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_RD_AND_SD_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_RD_AND_SD_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_RD_AND_SD_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_RD_AND_SD_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_RD_AND_SD_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_RD_AND_SD_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_RD_AND_SD_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_RD_AND_SD_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_RD_AND_SD_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_RD_AND_SD_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_RD_AND_SD_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_RD_AND_SD_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_RD_AND_SD_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_RD_AND_SD_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      // hold D-HL CK-LH
      $hold(posedge CK &&& (ENABLE_RD_AND_SD_AND_NOT_SE_AND_NOT_SI === 1'b1),
      negedge D &&& (ENABLE_RD_AND_SD_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold D-LH CK-LH
      $hold(posedge CK &&& (ENABLE_RD_AND_SD_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge D &&& (ENABLE_RD_AND_SD_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup D-HL CK-LH
      $setup(negedge D &&& (ENABLE_RD_AND_SD_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_RD_AND_SD_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup D-LH CK-LH
      $setup(posedge D &&& (ENABLE_RD_AND_SD_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_RD_AND_SD_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold D-HL CK-LH
      $hold(posedge CK &&& (ENABLE_RD_AND_SD_AND_NOT_SE_AND_SI === 1'b1),
      negedge D &&& (ENABLE_RD_AND_SD_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // hold D-LH CK-LH
      $hold(posedge CK &&& (ENABLE_RD_AND_SD_AND_NOT_SE_AND_SI === 1'b1),
      posedge D &&& (ENABLE_RD_AND_SD_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // setup D-HL CK-LH
      $setup(negedge D &&& (ENABLE_RD_AND_SD_AND_NOT_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_RD_AND_SD_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // setup D-LH CK-LH
      $setup(posedge D &&& (ENABLE_RD_AND_SD_AND_NOT_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_RD_AND_SD_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // recovery RD-LH CK-LH
      $recovery(posedge RD &&& (ENABLE_NOT_D_AND_SD_AND_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_SD_AND_SE_AND_SI === 1'b1),1.0);
      
      // removal RD-LH CK-LH
      $removal(posedge RD &&& (ENABLE_NOT_D_AND_SD_AND_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_SD_AND_SE_AND_SI === 1'b1),1.0);
      
      // recovery RD-LH CK-LH
      $recovery(posedge RD &&& (ENABLE_D_AND_SD_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_D_AND_SD_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // removal RD-LH CK-LH
      $removal(posedge RD &&& (ENABLE_D_AND_SD_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_D_AND_SD_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // recovery RD-LH CK-LH
      $recovery(posedge RD &&& (ENABLE_D_AND_SD_AND_NOT_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_D_AND_SD_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // removal RD-LH CK-LH
      $removal(posedge RD &&& (ENABLE_D_AND_SD_AND_NOT_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_D_AND_SD_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // recovery RD-LH CK-LH
      $recovery(posedge RD &&& (ENABLE_D_AND_SD_AND_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_D_AND_SD_AND_SE_AND_SI === 1'b1),1.0);
      
      // removal RD-LH CK-LH
      $removal(posedge RD &&& (ENABLE_D_AND_SD_AND_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_D_AND_SD_AND_SE_AND_SI === 1'b1),1.0);
      
      $width(negedge RD &&& (ENABLE_NOT_CK_AND_NOT_D_AND_SD_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge RD &&& (ENABLE_NOT_CK_AND_NOT_D_AND_SD_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge RD &&& (ENABLE_NOT_CK_AND_NOT_D_AND_SD_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge RD &&& (ENABLE_NOT_CK_AND_NOT_D_AND_SD_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge RD &&& (ENABLE_NOT_CK_AND_D_AND_SD_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge RD &&& (ENABLE_NOT_CK_AND_D_AND_SD_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge RD &&& (ENABLE_NOT_CK_AND_D_AND_SD_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge RD &&& (ENABLE_NOT_CK_AND_D_AND_SD_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge RD &&& (ENABLE_CK_AND_NOT_D_AND_SD_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge RD &&& (ENABLE_CK_AND_NOT_D_AND_SD_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge RD &&& (ENABLE_CK_AND_NOT_D_AND_SD_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge RD &&& (ENABLE_CK_AND_NOT_D_AND_SD_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge RD &&& (ENABLE_CK_AND_D_AND_SD_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge RD &&& (ENABLE_CK_AND_D_AND_SD_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge RD &&& (ENABLE_CK_AND_D_AND_SD_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge RD &&& (ENABLE_CK_AND_D_AND_SD_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      // hold RD-LH SD-LH
      $hold(posedge SD &&& (ENABLE_NOT_CK_AND_NOT_D_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge RD &&& (ENABLE_NOT_CK_AND_NOT_D_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup RD-LH SD-LH
      $setup(posedge RD &&& (ENABLE_NOT_CK_AND_NOT_D_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge SD &&& (ENABLE_NOT_CK_AND_NOT_D_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold RD-LH SD-LH
      $hold(posedge SD &&& (ENABLE_NOT_CK_AND_NOT_D_AND_NOT_SE_AND_SI === 1'b1),
      posedge RD &&& (ENABLE_NOT_CK_AND_NOT_D_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // setup RD-LH SD-LH
      $setup(posedge RD &&& (ENABLE_NOT_CK_AND_NOT_D_AND_NOT_SE_AND_SI === 1'b1),
      posedge SD &&& (ENABLE_NOT_CK_AND_NOT_D_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // hold RD-LH SD-LH
      $hold(posedge SD &&& (ENABLE_NOT_CK_AND_NOT_D_AND_SE_AND_NOT_SI === 1'b1),
      posedge RD &&& (ENABLE_NOT_CK_AND_NOT_D_AND_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup RD-LH SD-LH
      $setup(posedge RD &&& (ENABLE_NOT_CK_AND_NOT_D_AND_SE_AND_NOT_SI === 1'b1),
      posedge SD &&& (ENABLE_NOT_CK_AND_NOT_D_AND_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold RD-LH SD-LH
      $hold(posedge SD &&& (ENABLE_NOT_CK_AND_NOT_D_AND_SE_AND_SI === 1'b1),
      posedge RD &&& (ENABLE_NOT_CK_AND_NOT_D_AND_SE_AND_SI === 1'b1),1.0);
      
      // setup RD-LH SD-LH
      $setup(posedge RD &&& (ENABLE_NOT_CK_AND_NOT_D_AND_SE_AND_SI === 1'b1),
      posedge SD &&& (ENABLE_NOT_CK_AND_NOT_D_AND_SE_AND_SI === 1'b1),1.0);
      
      // hold RD-LH SD-LH
      $hold(posedge SD &&& (ENABLE_NOT_CK_AND_D_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge RD &&& (ENABLE_NOT_CK_AND_D_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup RD-LH SD-LH
      $setup(posedge RD &&& (ENABLE_NOT_CK_AND_D_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge SD &&& (ENABLE_NOT_CK_AND_D_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold RD-LH SD-LH
      $hold(posedge SD &&& (ENABLE_NOT_CK_AND_D_AND_NOT_SE_AND_SI === 1'b1),
      posedge RD &&& (ENABLE_NOT_CK_AND_D_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // setup RD-LH SD-LH
      $setup(posedge RD &&& (ENABLE_NOT_CK_AND_D_AND_NOT_SE_AND_SI === 1'b1),
      posedge SD &&& (ENABLE_NOT_CK_AND_D_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // hold RD-LH SD-LH
      $hold(posedge SD &&& (ENABLE_NOT_CK_AND_D_AND_SE_AND_NOT_SI === 1'b1),
      posedge RD &&& (ENABLE_NOT_CK_AND_D_AND_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup RD-LH SD-LH
      $setup(posedge RD &&& (ENABLE_NOT_CK_AND_D_AND_SE_AND_NOT_SI === 1'b1),
      posedge SD &&& (ENABLE_NOT_CK_AND_D_AND_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold RD-LH SD-LH
      $hold(posedge SD &&& (ENABLE_NOT_CK_AND_D_AND_SE_AND_SI === 1'b1),
      posedge RD &&& (ENABLE_NOT_CK_AND_D_AND_SE_AND_SI === 1'b1),1.0);
      
      // setup RD-LH SD-LH
      $setup(posedge RD &&& (ENABLE_NOT_CK_AND_D_AND_SE_AND_SI === 1'b1),
      posedge SD &&& (ENABLE_NOT_CK_AND_D_AND_SE_AND_SI === 1'b1),1.0);
      
      // hold RD-LH SD-LH
      $hold(posedge SD &&& (ENABLE_CK_AND_NOT_D_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge RD &&& (ENABLE_CK_AND_NOT_D_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup RD-LH SD-LH
      $setup(posedge RD &&& (ENABLE_CK_AND_NOT_D_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge SD &&& (ENABLE_CK_AND_NOT_D_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold RD-LH SD-LH
      $hold(posedge SD &&& (ENABLE_CK_AND_NOT_D_AND_NOT_SE_AND_SI === 1'b1),
      posedge RD &&& (ENABLE_CK_AND_NOT_D_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // setup RD-LH SD-LH
      $setup(posedge RD &&& (ENABLE_CK_AND_NOT_D_AND_NOT_SE_AND_SI === 1'b1),
      posedge SD &&& (ENABLE_CK_AND_NOT_D_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // hold RD-LH SD-LH
      $hold(posedge SD &&& (ENABLE_CK_AND_NOT_D_AND_SE_AND_NOT_SI === 1'b1),
      posedge RD &&& (ENABLE_CK_AND_NOT_D_AND_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup RD-LH SD-LH
      $setup(posedge RD &&& (ENABLE_CK_AND_NOT_D_AND_SE_AND_NOT_SI === 1'b1),
      posedge SD &&& (ENABLE_CK_AND_NOT_D_AND_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold RD-LH SD-LH
      $hold(posedge SD &&& (ENABLE_CK_AND_NOT_D_AND_SE_AND_SI === 1'b1),
      posedge RD &&& (ENABLE_CK_AND_NOT_D_AND_SE_AND_SI === 1'b1),1.0);
      
      // setup RD-LH SD-LH
      $setup(posedge RD &&& (ENABLE_CK_AND_NOT_D_AND_SE_AND_SI === 1'b1),
      posedge SD &&& (ENABLE_CK_AND_NOT_D_AND_SE_AND_SI === 1'b1),1.0);
      
      // hold RD-LH SD-LH
      $hold(posedge SD &&& (ENABLE_CK_AND_D_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge RD &&& (ENABLE_CK_AND_D_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup RD-LH SD-LH
      $setup(posedge RD &&& (ENABLE_CK_AND_D_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge SD &&& (ENABLE_CK_AND_D_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold RD-LH SD-LH
      $hold(posedge SD &&& (ENABLE_CK_AND_D_AND_NOT_SE_AND_SI === 1'b1),
      posedge RD &&& (ENABLE_CK_AND_D_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // setup RD-LH SD-LH
      $setup(posedge RD &&& (ENABLE_CK_AND_D_AND_NOT_SE_AND_SI === 1'b1),
      posedge SD &&& (ENABLE_CK_AND_D_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // hold RD-LH SD-LH
      $hold(posedge SD &&& (ENABLE_CK_AND_D_AND_SE_AND_NOT_SI === 1'b1),
      posedge RD &&& (ENABLE_CK_AND_D_AND_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup RD-LH SD-LH
      $setup(posedge RD &&& (ENABLE_CK_AND_D_AND_SE_AND_NOT_SI === 1'b1),
      posedge SD &&& (ENABLE_CK_AND_D_AND_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold RD-LH SD-LH
      $hold(posedge SD &&& (ENABLE_CK_AND_D_AND_SE_AND_SI === 1'b1),
      posedge RD &&& (ENABLE_CK_AND_D_AND_SE_AND_SI === 1'b1),1.0);
      
      // setup RD-LH SD-LH
      $setup(posedge RD &&& (ENABLE_CK_AND_D_AND_SE_AND_SI === 1'b1),
      posedge SD &&& (ENABLE_CK_AND_D_AND_SE_AND_SI === 1'b1),1.0);
      
      // recovery SD-LH CK-LH
      $recovery(posedge SD &&& (ENABLE_NOT_D_AND_RD_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_RD_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // removal SD-LH CK-LH
      $removal(posedge SD &&& (ENABLE_NOT_D_AND_RD_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_RD_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // recovery SD-LH CK-LH
      $recovery(posedge SD &&& (ENABLE_NOT_D_AND_RD_AND_NOT_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_RD_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // removal SD-LH CK-LH
      $removal(posedge SD &&& (ENABLE_NOT_D_AND_RD_AND_NOT_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_RD_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // recovery SD-LH CK-LH
      $recovery(posedge SD &&& (ENABLE_NOT_D_AND_RD_AND_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_RD_AND_SE_AND_NOT_SI === 1'b1),1.0);
      
      // removal SD-LH CK-LH
      $removal(posedge SD &&& (ENABLE_NOT_D_AND_RD_AND_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_RD_AND_SE_AND_NOT_SI === 1'b1),1.0);
      
      // recovery SD-LH CK-LH
      $recovery(posedge SD &&& (ENABLE_D_AND_RD_AND_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_D_AND_RD_AND_SE_AND_NOT_SI === 1'b1),1.0);
      
      // removal SD-LH CK-LH
      $removal(posedge SD &&& (ENABLE_D_AND_RD_AND_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_D_AND_RD_AND_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold SD-LH RD-LH
      $hold(posedge RD &&& (ENABLE_NOT_CK_AND_NOT_D_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge SD &&& (ENABLE_NOT_CK_AND_NOT_D_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup SD-LH RD-LH
      $setup(posedge SD &&& (ENABLE_NOT_CK_AND_NOT_D_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge RD &&& (ENABLE_NOT_CK_AND_NOT_D_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold SD-LH RD-LH
      $hold(posedge RD &&& (ENABLE_NOT_CK_AND_NOT_D_AND_NOT_SE_AND_SI === 1'b1),
      posedge SD &&& (ENABLE_NOT_CK_AND_NOT_D_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // setup SD-LH RD-LH
      $setup(posedge SD &&& (ENABLE_NOT_CK_AND_NOT_D_AND_NOT_SE_AND_SI === 1'b1),
      posedge RD &&& (ENABLE_NOT_CK_AND_NOT_D_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // hold SD-LH RD-LH
      $hold(posedge RD &&& (ENABLE_NOT_CK_AND_NOT_D_AND_SE_AND_NOT_SI === 1'b1),
      posedge SD &&& (ENABLE_NOT_CK_AND_NOT_D_AND_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup SD-LH RD-LH
      $setup(posedge SD &&& (ENABLE_NOT_CK_AND_NOT_D_AND_SE_AND_NOT_SI === 1'b1),
      posedge RD &&& (ENABLE_NOT_CK_AND_NOT_D_AND_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold SD-LH RD-LH
      $hold(posedge RD &&& (ENABLE_NOT_CK_AND_NOT_D_AND_SE_AND_SI === 1'b1),
      posedge SD &&& (ENABLE_NOT_CK_AND_NOT_D_AND_SE_AND_SI === 1'b1),1.0);
      
      // setup SD-LH RD-LH
      $setup(posedge SD &&& (ENABLE_NOT_CK_AND_NOT_D_AND_SE_AND_SI === 1'b1),
      posedge RD &&& (ENABLE_NOT_CK_AND_NOT_D_AND_SE_AND_SI === 1'b1),1.0);
      
      // hold SD-LH RD-LH
      $hold(posedge RD &&& (ENABLE_NOT_CK_AND_D_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge SD &&& (ENABLE_NOT_CK_AND_D_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup SD-LH RD-LH
      $setup(posedge SD &&& (ENABLE_NOT_CK_AND_D_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge RD &&& (ENABLE_NOT_CK_AND_D_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold SD-LH RD-LH
      $hold(posedge RD &&& (ENABLE_NOT_CK_AND_D_AND_NOT_SE_AND_SI === 1'b1),
      posedge SD &&& (ENABLE_NOT_CK_AND_D_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // setup SD-LH RD-LH
      $setup(posedge SD &&& (ENABLE_NOT_CK_AND_D_AND_NOT_SE_AND_SI === 1'b1),
      posedge RD &&& (ENABLE_NOT_CK_AND_D_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // hold SD-LH RD-LH
      $hold(posedge RD &&& (ENABLE_NOT_CK_AND_D_AND_SE_AND_NOT_SI === 1'b1),
      posedge SD &&& (ENABLE_NOT_CK_AND_D_AND_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup SD-LH RD-LH
      $setup(posedge SD &&& (ENABLE_NOT_CK_AND_D_AND_SE_AND_NOT_SI === 1'b1),
      posedge RD &&& (ENABLE_NOT_CK_AND_D_AND_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold SD-LH RD-LH
      $hold(posedge RD &&& (ENABLE_NOT_CK_AND_D_AND_SE_AND_SI === 1'b1),
      posedge SD &&& (ENABLE_NOT_CK_AND_D_AND_SE_AND_SI === 1'b1),1.0);
      
      // setup SD-LH RD-LH
      $setup(posedge SD &&& (ENABLE_NOT_CK_AND_D_AND_SE_AND_SI === 1'b1),
      posedge RD &&& (ENABLE_NOT_CK_AND_D_AND_SE_AND_SI === 1'b1),1.0);
      
      // hold SD-LH RD-LH
      $hold(posedge RD &&& (ENABLE_CK_AND_NOT_D_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge SD &&& (ENABLE_CK_AND_NOT_D_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup SD-LH RD-LH
      $setup(posedge SD &&& (ENABLE_CK_AND_NOT_D_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge RD &&& (ENABLE_CK_AND_NOT_D_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold SD-LH RD-LH
      $hold(posedge RD &&& (ENABLE_CK_AND_NOT_D_AND_NOT_SE_AND_SI === 1'b1),
      posedge SD &&& (ENABLE_CK_AND_NOT_D_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // setup SD-LH RD-LH
      $setup(posedge SD &&& (ENABLE_CK_AND_NOT_D_AND_NOT_SE_AND_SI === 1'b1),
      posedge RD &&& (ENABLE_CK_AND_NOT_D_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // hold SD-LH RD-LH
      $hold(posedge RD &&& (ENABLE_CK_AND_NOT_D_AND_SE_AND_NOT_SI === 1'b1),
      posedge SD &&& (ENABLE_CK_AND_NOT_D_AND_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup SD-LH RD-LH
      $setup(posedge SD &&& (ENABLE_CK_AND_NOT_D_AND_SE_AND_NOT_SI === 1'b1),
      posedge RD &&& (ENABLE_CK_AND_NOT_D_AND_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold SD-LH RD-LH
      $hold(posedge RD &&& (ENABLE_CK_AND_NOT_D_AND_SE_AND_SI === 1'b1),
      posedge SD &&& (ENABLE_CK_AND_NOT_D_AND_SE_AND_SI === 1'b1),1.0);
      
      // setup SD-LH RD-LH
      $setup(posedge SD &&& (ENABLE_CK_AND_NOT_D_AND_SE_AND_SI === 1'b1),
      posedge RD &&& (ENABLE_CK_AND_NOT_D_AND_SE_AND_SI === 1'b1),1.0);
      
      // hold SD-LH RD-LH
      $hold(posedge RD &&& (ENABLE_CK_AND_D_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge SD &&& (ENABLE_CK_AND_D_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup SD-LH RD-LH
      $setup(posedge SD &&& (ENABLE_CK_AND_D_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge RD &&& (ENABLE_CK_AND_D_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold SD-LH RD-LH
      $hold(posedge RD &&& (ENABLE_CK_AND_D_AND_NOT_SE_AND_SI === 1'b1),
      posedge SD &&& (ENABLE_CK_AND_D_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // setup SD-LH RD-LH
      $setup(posedge SD &&& (ENABLE_CK_AND_D_AND_NOT_SE_AND_SI === 1'b1),
      posedge RD &&& (ENABLE_CK_AND_D_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // hold SD-LH RD-LH
      $hold(posedge RD &&& (ENABLE_CK_AND_D_AND_SE_AND_NOT_SI === 1'b1),
      posedge SD &&& (ENABLE_CK_AND_D_AND_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup SD-LH RD-LH
      $setup(posedge SD &&& (ENABLE_CK_AND_D_AND_SE_AND_NOT_SI === 1'b1),
      posedge RD &&& (ENABLE_CK_AND_D_AND_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold SD-LH RD-LH
      $hold(posedge RD &&& (ENABLE_CK_AND_D_AND_SE_AND_SI === 1'b1),
      posedge SD &&& (ENABLE_CK_AND_D_AND_SE_AND_SI === 1'b1),1.0);
      
      // setup SD-LH RD-LH
      $setup(posedge SD &&& (ENABLE_CK_AND_D_AND_SE_AND_SI === 1'b1),
      posedge RD &&& (ENABLE_CK_AND_D_AND_SE_AND_SI === 1'b1),1.0);
      
      $width(negedge SD &&& (ENABLE_NOT_CK_AND_NOT_D_AND_RD_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge SD &&& (ENABLE_NOT_CK_AND_NOT_D_AND_RD_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge SD &&& (ENABLE_NOT_CK_AND_NOT_D_AND_RD_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge SD &&& (ENABLE_NOT_CK_AND_NOT_D_AND_RD_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge SD &&& (ENABLE_NOT_CK_AND_D_AND_RD_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge SD &&& (ENABLE_NOT_CK_AND_D_AND_RD_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge SD &&& (ENABLE_NOT_CK_AND_D_AND_RD_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge SD &&& (ENABLE_NOT_CK_AND_D_AND_RD_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge SD &&& (ENABLE_CK_AND_NOT_D_AND_RD_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge SD &&& (ENABLE_CK_AND_NOT_D_AND_RD_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge SD &&& (ENABLE_CK_AND_NOT_D_AND_RD_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge SD &&& (ENABLE_CK_AND_NOT_D_AND_RD_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge SD &&& (ENABLE_CK_AND_D_AND_RD_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge SD &&& (ENABLE_CK_AND_D_AND_RD_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge SD &&& (ENABLE_CK_AND_D_AND_RD_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge SD &&& (ENABLE_CK_AND_D_AND_RD_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      // hold SE-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D_AND_RD_AND_SD_AND_SI === 1'b1),
      negedge SE &&& (ENABLE_NOT_D_AND_RD_AND_SD_AND_SI === 1'b1),1.0);
      
      // hold SE-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D_AND_RD_AND_SD_AND_SI === 1'b1),
      posedge SE &&& (ENABLE_NOT_D_AND_RD_AND_SD_AND_SI === 1'b1),1.0);
      
      // setup SE-HL CK-LH
      $setup(negedge SE &&& (ENABLE_NOT_D_AND_RD_AND_SD_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_RD_AND_SD_AND_SI === 1'b1),1.0);
      
      // setup SE-LH CK-LH
      $setup(posedge SE &&& (ENABLE_NOT_D_AND_RD_AND_SD_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_RD_AND_SD_AND_SI === 1'b1),1.0);
      
      // hold SE-HL CK-LH
      $hold(posedge CK &&& (ENABLE_D_AND_RD_AND_SD_AND_NOT_SI === 1'b1),
      negedge SE &&& (ENABLE_D_AND_RD_AND_SD_AND_NOT_SI === 1'b1),1.0);
      
      // hold SE-LH CK-LH
      $hold(posedge CK &&& (ENABLE_D_AND_RD_AND_SD_AND_NOT_SI === 1'b1),
      posedge SE &&& (ENABLE_D_AND_RD_AND_SD_AND_NOT_SI === 1'b1),1.0);
      
      // setup SE-HL CK-LH
      $setup(negedge SE &&& (ENABLE_D_AND_RD_AND_SD_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_D_AND_RD_AND_SD_AND_NOT_SI === 1'b1),1.0);
      
      // setup SE-LH CK-LH
      $setup(posedge SE &&& (ENABLE_D_AND_RD_AND_SD_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_D_AND_RD_AND_SD_AND_NOT_SI === 1'b1),1.0);
      
      // hold SI-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D_AND_RD_AND_SD_AND_SE === 1'b1),
      negedge SI &&& (ENABLE_NOT_D_AND_RD_AND_SD_AND_SE === 1'b1),1.0);
      
      // hold SI-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D_AND_RD_AND_SD_AND_SE === 1'b1),
      posedge SI &&& (ENABLE_NOT_D_AND_RD_AND_SD_AND_SE === 1'b1),1.0);
      
      // setup SI-HL CK-LH
      $setup(negedge SI &&& (ENABLE_NOT_D_AND_RD_AND_SD_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_RD_AND_SD_AND_SE === 1'b1),1.0);
      
      // setup SI-LH CK-LH
      $setup(posedge SI &&& (ENABLE_NOT_D_AND_RD_AND_SD_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_RD_AND_SD_AND_SE === 1'b1),1.0);
      
      // hold SI-HL CK-LH
      $hold(posedge CK &&& (ENABLE_D_AND_RD_AND_SD_AND_SE === 1'b1),
      negedge SI &&& (ENABLE_D_AND_RD_AND_SD_AND_SE === 1'b1),1.0);
      
      // hold SI-LH CK-LH
      $hold(posedge CK &&& (ENABLE_D_AND_RD_AND_SD_AND_SE === 1'b1),
      posedge SI &&& (ENABLE_D_AND_RD_AND_SD_AND_SE === 1'b1),1.0);
      
      // setup SI-HL CK-LH
      $setup(negedge SI &&& (ENABLE_D_AND_RD_AND_SD_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_D_AND_RD_AND_SD_AND_SE === 1'b1),1.0);
      
      // setup SI-LH CK-LH
      $setup(posedge SI &&& (ENABLE_D_AND_RD_AND_SD_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_D_AND_RD_AND_SD_AND_SE === 1'b1),1.0);
      
      // mpw CK_lh 
      $width(posedge CK,1.0,0);
      
      // mpw CK_hl 
      $width(negedge CK,1.0,0);
      
      // mpw RD_hl 
      $width(negedge RD,1.0,0);
      
      // mpw SD_hl 
      $width(negedge SD,1.0,0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_FSDPRBSBQ_V2_2( Q, CK, D, SI, SE, RD, SD );
input CK, D, RD, SD, SE, SI;
output Q;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_FSDPRBSBQ_V2_2_func SAEDRVT14_FSDPRBSBQ_V2_2_behav_inst(.Q(Q),.CK(CK),.D(D),.SI(SI),.SE(SE),.RD(RD),.SD(SD));
`else
   SAEDRVT14_FSDPRBSBQ_V2_2_func SAEDRVT14_FSDPRBSBQ_V2_2_inst(.Q(Q),.CK(CK),.D(D),.SI(SI),.SE(SE),.RD(RD),.SD(SD));
   // spec_gates_begin
   not MGM_G0(MGM_W0,D);
   and MGM_G1(MGM_W1,RD,MGM_W0);
   and MGM_G2(MGM_W2,SD,MGM_W1);
   not MGM_G3(MGM_W3,SE);
   and MGM_G4(MGM_W4,MGM_W3,MGM_W2);
   not MGM_G5(MGM_W5,SI);
   and MGM_G6(ENABLE_NOT_D_AND_RD_AND_SD_AND_NOT_SE_AND_NOT_SI,MGM_W5,MGM_W4);
   not MGM_G7(MGM_W6,D);
   and MGM_G8(MGM_W7,RD,MGM_W6);
   and MGM_G9(MGM_W8,SD,MGM_W7);
   not MGM_G10(MGM_W9,SE);
   and MGM_G11(MGM_W10,MGM_W9,MGM_W8);
   and MGM_G12(ENABLE_NOT_D_AND_RD_AND_SD_AND_NOT_SE_AND_SI,SI,MGM_W10);
   not MGM_G13(MGM_W11,D);
   and MGM_G14(MGM_W12,RD,MGM_W11);
   and MGM_G15(MGM_W13,SD,MGM_W12);
   and MGM_G16(MGM_W14,SE,MGM_W13);
   not MGM_G17(MGM_W15,SI);
   and MGM_G18(ENABLE_NOT_D_AND_RD_AND_SD_AND_SE_AND_NOT_SI,MGM_W15,MGM_W14);
   not MGM_G19(MGM_W16,D);
   and MGM_G20(MGM_W17,RD,MGM_W16);
   and MGM_G21(MGM_W18,SD,MGM_W17);
   and MGM_G22(MGM_W19,SE,MGM_W18);
   and MGM_G23(ENABLE_NOT_D_AND_RD_AND_SD_AND_SE_AND_SI,SI,MGM_W19);
   and MGM_G24(MGM_W20,RD,D);
   and MGM_G25(MGM_W21,SD,MGM_W20);
   not MGM_G26(MGM_W22,SE);
   and MGM_G27(MGM_W23,MGM_W22,MGM_W21);
   not MGM_G28(MGM_W24,SI);
   and MGM_G29(ENABLE_D_AND_RD_AND_SD_AND_NOT_SE_AND_NOT_SI,MGM_W24,MGM_W23);
   and MGM_G30(MGM_W25,RD,D);
   and MGM_G31(MGM_W26,SD,MGM_W25);
   not MGM_G32(MGM_W27,SE);
   and MGM_G33(MGM_W28,MGM_W27,MGM_W26);
   and MGM_G34(ENABLE_D_AND_RD_AND_SD_AND_NOT_SE_AND_SI,SI,MGM_W28);
   and MGM_G35(MGM_W29,RD,D);
   and MGM_G36(MGM_W30,SD,MGM_W29);
   and MGM_G37(MGM_W31,SE,MGM_W30);
   not MGM_G38(MGM_W32,SI);
   and MGM_G39(ENABLE_D_AND_RD_AND_SD_AND_SE_AND_NOT_SI,MGM_W32,MGM_W31);
   and MGM_G40(MGM_W33,RD,D);
   and MGM_G41(MGM_W34,SD,MGM_W33);
   and MGM_G42(MGM_W35,SE,MGM_W34);
   and MGM_G43(ENABLE_D_AND_RD_AND_SD_AND_SE_AND_SI,SI,MGM_W35);
   and MGM_G44(MGM_W36,SD,RD);
   not MGM_G45(MGM_W37,SE);
   and MGM_G46(MGM_W38,MGM_W37,MGM_W36);
   not MGM_G47(MGM_W39,SI);
   and MGM_G48(ENABLE_RD_AND_SD_AND_NOT_SE_AND_NOT_SI,MGM_W39,MGM_W38);
   and MGM_G49(MGM_W40,SD,RD);
   not MGM_G50(MGM_W41,SE);
   and MGM_G51(MGM_W42,MGM_W41,MGM_W40);
   and MGM_G52(ENABLE_RD_AND_SD_AND_NOT_SE_AND_SI,SI,MGM_W42);
   not MGM_G53(MGM_W43,D);
   and MGM_G54(MGM_W44,SD,MGM_W43);
   and MGM_G55(MGM_W45,SE,MGM_W44);
   and MGM_G56(ENABLE_NOT_D_AND_SD_AND_SE_AND_SI,SI,MGM_W45);
   and MGM_G57(MGM_W46,SD,D);
   not MGM_G58(MGM_W47,SE);
   and MGM_G59(MGM_W48,MGM_W47,MGM_W46);
   not MGM_G60(MGM_W49,SI);
   and MGM_G61(ENABLE_D_AND_SD_AND_NOT_SE_AND_NOT_SI,MGM_W49,MGM_W48);
   and MGM_G62(MGM_W50,SD,D);
   not MGM_G63(MGM_W51,SE);
   and MGM_G64(MGM_W52,MGM_W51,MGM_W50);
   and MGM_G65(ENABLE_D_AND_SD_AND_NOT_SE_AND_SI,SI,MGM_W52);
   and MGM_G66(MGM_W53,SD,D);
   and MGM_G67(MGM_W54,SE,MGM_W53);
   and MGM_G68(ENABLE_D_AND_SD_AND_SE_AND_SI,SI,MGM_W54);
   not MGM_G69(MGM_W55,CK);
   not MGM_G70(MGM_W56,D);
   and MGM_G71(MGM_W57,MGM_W56,MGM_W55);
   and MGM_G72(MGM_W58,SD,MGM_W57);
   not MGM_G73(MGM_W59,SE);
   and MGM_G74(MGM_W60,MGM_W59,MGM_W58);
   not MGM_G75(MGM_W61,SI);
   and MGM_G76(ENABLE_NOT_CK_AND_NOT_D_AND_SD_AND_NOT_SE_AND_NOT_SI,MGM_W61,MGM_W60);
   not MGM_G77(MGM_W62,CK);
   not MGM_G78(MGM_W63,D);
   and MGM_G79(MGM_W64,MGM_W63,MGM_W62);
   and MGM_G80(MGM_W65,SD,MGM_W64);
   not MGM_G81(MGM_W66,SE);
   and MGM_G82(MGM_W67,MGM_W66,MGM_W65);
   and MGM_G83(ENABLE_NOT_CK_AND_NOT_D_AND_SD_AND_NOT_SE_AND_SI,SI,MGM_W67);
   not MGM_G84(MGM_W68,CK);
   not MGM_G85(MGM_W69,D);
   and MGM_G86(MGM_W70,MGM_W69,MGM_W68);
   and MGM_G87(MGM_W71,SD,MGM_W70);
   and MGM_G88(MGM_W72,SE,MGM_W71);
   not MGM_G89(MGM_W73,SI);
   and MGM_G90(ENABLE_NOT_CK_AND_NOT_D_AND_SD_AND_SE_AND_NOT_SI,MGM_W73,MGM_W72);
   not MGM_G91(MGM_W74,CK);
   not MGM_G92(MGM_W75,D);
   and MGM_G93(MGM_W76,MGM_W75,MGM_W74);
   and MGM_G94(MGM_W77,SD,MGM_W76);
   and MGM_G95(MGM_W78,SE,MGM_W77);
   and MGM_G96(ENABLE_NOT_CK_AND_NOT_D_AND_SD_AND_SE_AND_SI,SI,MGM_W78);
   not MGM_G97(MGM_W79,CK);
   and MGM_G98(MGM_W80,D,MGM_W79);
   and MGM_G99(MGM_W81,SD,MGM_W80);
   not MGM_G100(MGM_W82,SE);
   and MGM_G101(MGM_W83,MGM_W82,MGM_W81);
   not MGM_G102(MGM_W84,SI);
   and MGM_G103(ENABLE_NOT_CK_AND_D_AND_SD_AND_NOT_SE_AND_NOT_SI,MGM_W84,MGM_W83);
   not MGM_G104(MGM_W85,CK);
   and MGM_G105(MGM_W86,D,MGM_W85);
   and MGM_G106(MGM_W87,SD,MGM_W86);
   not MGM_G107(MGM_W88,SE);
   and MGM_G108(MGM_W89,MGM_W88,MGM_W87);
   and MGM_G109(ENABLE_NOT_CK_AND_D_AND_SD_AND_NOT_SE_AND_SI,SI,MGM_W89);
   not MGM_G110(MGM_W90,CK);
   and MGM_G111(MGM_W91,D,MGM_W90);
   and MGM_G112(MGM_W92,SD,MGM_W91);
   and MGM_G113(MGM_W93,SE,MGM_W92);
   not MGM_G114(MGM_W94,SI);
   and MGM_G115(ENABLE_NOT_CK_AND_D_AND_SD_AND_SE_AND_NOT_SI,MGM_W94,MGM_W93);
   not MGM_G116(MGM_W95,CK);
   and MGM_G117(MGM_W96,D,MGM_W95);
   and MGM_G118(MGM_W97,SD,MGM_W96);
   and MGM_G119(MGM_W98,SE,MGM_W97);
   and MGM_G120(ENABLE_NOT_CK_AND_D_AND_SD_AND_SE_AND_SI,SI,MGM_W98);
   not MGM_G121(MGM_W99,D);
   and MGM_G122(MGM_W100,MGM_W99,CK);
   and MGM_G123(MGM_W101,SD,MGM_W100);
   not MGM_G124(MGM_W102,SE);
   and MGM_G125(MGM_W103,MGM_W102,MGM_W101);
   not MGM_G126(MGM_W104,SI);
   and MGM_G127(ENABLE_CK_AND_NOT_D_AND_SD_AND_NOT_SE_AND_NOT_SI,MGM_W104,MGM_W103);
   not MGM_G128(MGM_W105,D);
   and MGM_G129(MGM_W106,MGM_W105,CK);
   and MGM_G130(MGM_W107,SD,MGM_W106);
   not MGM_G131(MGM_W108,SE);
   and MGM_G132(MGM_W109,MGM_W108,MGM_W107);
   and MGM_G133(ENABLE_CK_AND_NOT_D_AND_SD_AND_NOT_SE_AND_SI,SI,MGM_W109);
   not MGM_G134(MGM_W110,D);
   and MGM_G135(MGM_W111,MGM_W110,CK);
   and MGM_G136(MGM_W112,SD,MGM_W111);
   and MGM_G137(MGM_W113,SE,MGM_W112);
   not MGM_G138(MGM_W114,SI);
   and MGM_G139(ENABLE_CK_AND_NOT_D_AND_SD_AND_SE_AND_NOT_SI,MGM_W114,MGM_W113);
   not MGM_G140(MGM_W115,D);
   and MGM_G141(MGM_W116,MGM_W115,CK);
   and MGM_G142(MGM_W117,SD,MGM_W116);
   and MGM_G143(MGM_W118,SE,MGM_W117);
   and MGM_G144(ENABLE_CK_AND_NOT_D_AND_SD_AND_SE_AND_SI,SI,MGM_W118);
   and MGM_G145(MGM_W119,D,CK);
   and MGM_G146(MGM_W120,SD,MGM_W119);
   not MGM_G147(MGM_W121,SE);
   and MGM_G148(MGM_W122,MGM_W121,MGM_W120);
   not MGM_G149(MGM_W123,SI);
   and MGM_G150(ENABLE_CK_AND_D_AND_SD_AND_NOT_SE_AND_NOT_SI,MGM_W123,MGM_W122);
   and MGM_G151(MGM_W124,D,CK);
   and MGM_G152(MGM_W125,SD,MGM_W124);
   not MGM_G153(MGM_W126,SE);
   and MGM_G154(MGM_W127,MGM_W126,MGM_W125);
   and MGM_G155(ENABLE_CK_AND_D_AND_SD_AND_NOT_SE_AND_SI,SI,MGM_W127);
   and MGM_G156(MGM_W128,D,CK);
   and MGM_G157(MGM_W129,SD,MGM_W128);
   and MGM_G158(MGM_W130,SE,MGM_W129);
   not MGM_G159(MGM_W131,SI);
   and MGM_G160(ENABLE_CK_AND_D_AND_SD_AND_SE_AND_NOT_SI,MGM_W131,MGM_W130);
   and MGM_G161(MGM_W132,D,CK);
   and MGM_G162(MGM_W133,SD,MGM_W132);
   and MGM_G163(MGM_W134,SE,MGM_W133);
   and MGM_G164(ENABLE_CK_AND_D_AND_SD_AND_SE_AND_SI,SI,MGM_W134);
   not MGM_G165(MGM_W135,CK);
   not MGM_G166(MGM_W136,D);
   and MGM_G167(MGM_W137,MGM_W136,MGM_W135);
   not MGM_G168(MGM_W138,SE);
   and MGM_G169(MGM_W139,MGM_W138,MGM_W137);
   not MGM_G170(MGM_W140,SI);
   and MGM_G171(ENABLE_NOT_CK_AND_NOT_D_AND_NOT_SE_AND_NOT_SI,MGM_W140,MGM_W139);
   not MGM_G172(MGM_W141,CK);
   not MGM_G173(MGM_W142,D);
   and MGM_G174(MGM_W143,MGM_W142,MGM_W141);
   not MGM_G175(MGM_W144,SE);
   and MGM_G176(MGM_W145,MGM_W144,MGM_W143);
   and MGM_G177(ENABLE_NOT_CK_AND_NOT_D_AND_NOT_SE_AND_SI,SI,MGM_W145);
   not MGM_G178(MGM_W146,CK);
   not MGM_G179(MGM_W147,D);
   and MGM_G180(MGM_W148,MGM_W147,MGM_W146);
   and MGM_G181(MGM_W149,SE,MGM_W148);
   not MGM_G182(MGM_W150,SI);
   and MGM_G183(ENABLE_NOT_CK_AND_NOT_D_AND_SE_AND_NOT_SI,MGM_W150,MGM_W149);
   not MGM_G184(MGM_W151,CK);
   not MGM_G185(MGM_W152,D);
   and MGM_G186(MGM_W153,MGM_W152,MGM_W151);
   and MGM_G187(MGM_W154,SE,MGM_W153);
   and MGM_G188(ENABLE_NOT_CK_AND_NOT_D_AND_SE_AND_SI,SI,MGM_W154);
   not MGM_G189(MGM_W155,CK);
   and MGM_G190(MGM_W156,D,MGM_W155);
   not MGM_G191(MGM_W157,SE);
   and MGM_G192(MGM_W158,MGM_W157,MGM_W156);
   not MGM_G193(MGM_W159,SI);
   and MGM_G194(ENABLE_NOT_CK_AND_D_AND_NOT_SE_AND_NOT_SI,MGM_W159,MGM_W158);
   not MGM_G195(MGM_W160,CK);
   and MGM_G196(MGM_W161,D,MGM_W160);
   not MGM_G197(MGM_W162,SE);
   and MGM_G198(MGM_W163,MGM_W162,MGM_W161);
   and MGM_G199(ENABLE_NOT_CK_AND_D_AND_NOT_SE_AND_SI,SI,MGM_W163);
   not MGM_G200(MGM_W164,CK);
   and MGM_G201(MGM_W165,D,MGM_W164);
   and MGM_G202(MGM_W166,SE,MGM_W165);
   not MGM_G203(MGM_W167,SI);
   and MGM_G204(ENABLE_NOT_CK_AND_D_AND_SE_AND_NOT_SI,MGM_W167,MGM_W166);
   not MGM_G205(MGM_W168,CK);
   and MGM_G206(MGM_W169,D,MGM_W168);
   and MGM_G207(MGM_W170,SE,MGM_W169);
   and MGM_G208(ENABLE_NOT_CK_AND_D_AND_SE_AND_SI,SI,MGM_W170);
   not MGM_G209(MGM_W171,D);
   and MGM_G210(MGM_W172,MGM_W171,CK);
   not MGM_G211(MGM_W173,SE);
   and MGM_G212(MGM_W174,MGM_W173,MGM_W172);
   not MGM_G213(MGM_W175,SI);
   and MGM_G214(ENABLE_CK_AND_NOT_D_AND_NOT_SE_AND_NOT_SI,MGM_W175,MGM_W174);
   not MGM_G215(MGM_W176,D);
   and MGM_G216(MGM_W177,MGM_W176,CK);
   not MGM_G217(MGM_W178,SE);
   and MGM_G218(MGM_W179,MGM_W178,MGM_W177);
   and MGM_G219(ENABLE_CK_AND_NOT_D_AND_NOT_SE_AND_SI,SI,MGM_W179);
   not MGM_G220(MGM_W180,D);
   and MGM_G221(MGM_W181,MGM_W180,CK);
   and MGM_G222(MGM_W182,SE,MGM_W181);
   not MGM_G223(MGM_W183,SI);
   and MGM_G224(ENABLE_CK_AND_NOT_D_AND_SE_AND_NOT_SI,MGM_W183,MGM_W182);
   not MGM_G225(MGM_W184,D);
   and MGM_G226(MGM_W185,MGM_W184,CK);
   and MGM_G227(MGM_W186,SE,MGM_W185);
   and MGM_G228(ENABLE_CK_AND_NOT_D_AND_SE_AND_SI,SI,MGM_W186);
   and MGM_G229(MGM_W187,D,CK);
   not MGM_G230(MGM_W188,SE);
   and MGM_G231(MGM_W189,MGM_W188,MGM_W187);
   not MGM_G232(MGM_W190,SI);
   and MGM_G233(ENABLE_CK_AND_D_AND_NOT_SE_AND_NOT_SI,MGM_W190,MGM_W189);
   and MGM_G234(MGM_W191,D,CK);
   not MGM_G235(MGM_W192,SE);
   and MGM_G236(MGM_W193,MGM_W192,MGM_W191);
   and MGM_G237(ENABLE_CK_AND_D_AND_NOT_SE_AND_SI,SI,MGM_W193);
   and MGM_G238(MGM_W194,D,CK);
   and MGM_G239(MGM_W195,SE,MGM_W194);
   not MGM_G240(MGM_W196,SI);
   and MGM_G241(ENABLE_CK_AND_D_AND_SE_AND_NOT_SI,MGM_W196,MGM_W195);
   and MGM_G242(MGM_W197,D,CK);
   and MGM_G243(MGM_W198,SE,MGM_W197);
   and MGM_G244(ENABLE_CK_AND_D_AND_SE_AND_SI,SI,MGM_W198);
   not MGM_G245(MGM_W199,D);
   and MGM_G246(MGM_W200,RD,MGM_W199);
   not MGM_G247(MGM_W201,SE);
   and MGM_G248(MGM_W202,MGM_W201,MGM_W200);
   not MGM_G249(MGM_W203,SI);
   and MGM_G250(ENABLE_NOT_D_AND_RD_AND_NOT_SE_AND_NOT_SI,MGM_W203,MGM_W202);
   not MGM_G251(MGM_W204,D);
   and MGM_G252(MGM_W205,RD,MGM_W204);
   not MGM_G253(MGM_W206,SE);
   and MGM_G254(MGM_W207,MGM_W206,MGM_W205);
   and MGM_G255(ENABLE_NOT_D_AND_RD_AND_NOT_SE_AND_SI,SI,MGM_W207);
   not MGM_G256(MGM_W208,D);
   and MGM_G257(MGM_W209,RD,MGM_W208);
   and MGM_G258(MGM_W210,SE,MGM_W209);
   not MGM_G259(MGM_W211,SI);
   and MGM_G260(ENABLE_NOT_D_AND_RD_AND_SE_AND_NOT_SI,MGM_W211,MGM_W210);
   and MGM_G261(MGM_W212,RD,D);
   and MGM_G262(MGM_W213,SE,MGM_W212);
   not MGM_G263(MGM_W214,SI);
   and MGM_G264(ENABLE_D_AND_RD_AND_SE_AND_NOT_SI,MGM_W214,MGM_W213);
   not MGM_G265(MGM_W215,CK);
   not MGM_G266(MGM_W216,D);
   and MGM_G267(MGM_W217,MGM_W216,MGM_W215);
   and MGM_G268(MGM_W218,RD,MGM_W217);
   not MGM_G269(MGM_W219,SE);
   and MGM_G270(MGM_W220,MGM_W219,MGM_W218);
   not MGM_G271(MGM_W221,SI);
   and MGM_G272(ENABLE_NOT_CK_AND_NOT_D_AND_RD_AND_NOT_SE_AND_NOT_SI,MGM_W221,MGM_W220);
   not MGM_G273(MGM_W222,CK);
   not MGM_G274(MGM_W223,D);
   and MGM_G275(MGM_W224,MGM_W223,MGM_W222);
   and MGM_G276(MGM_W225,RD,MGM_W224);
   not MGM_G277(MGM_W226,SE);
   and MGM_G278(MGM_W227,MGM_W226,MGM_W225);
   and MGM_G279(ENABLE_NOT_CK_AND_NOT_D_AND_RD_AND_NOT_SE_AND_SI,SI,MGM_W227);
   not MGM_G280(MGM_W228,CK);
   not MGM_G281(MGM_W229,D);
   and MGM_G282(MGM_W230,MGM_W229,MGM_W228);
   and MGM_G283(MGM_W231,RD,MGM_W230);
   and MGM_G284(MGM_W232,SE,MGM_W231);
   not MGM_G285(MGM_W233,SI);
   and MGM_G286(ENABLE_NOT_CK_AND_NOT_D_AND_RD_AND_SE_AND_NOT_SI,MGM_W233,MGM_W232);
   not MGM_G287(MGM_W234,CK);
   not MGM_G288(MGM_W235,D);
   and MGM_G289(MGM_W236,MGM_W235,MGM_W234);
   and MGM_G290(MGM_W237,RD,MGM_W236);
   and MGM_G291(MGM_W238,SE,MGM_W237);
   and MGM_G292(ENABLE_NOT_CK_AND_NOT_D_AND_RD_AND_SE_AND_SI,SI,MGM_W238);
   not MGM_G293(MGM_W239,CK);
   and MGM_G294(MGM_W240,D,MGM_W239);
   and MGM_G295(MGM_W241,RD,MGM_W240);
   not MGM_G296(MGM_W242,SE);
   and MGM_G297(MGM_W243,MGM_W242,MGM_W241);
   not MGM_G298(MGM_W244,SI);
   and MGM_G299(ENABLE_NOT_CK_AND_D_AND_RD_AND_NOT_SE_AND_NOT_SI,MGM_W244,MGM_W243);
   not MGM_G300(MGM_W245,CK);
   and MGM_G301(MGM_W246,D,MGM_W245);
   and MGM_G302(MGM_W247,RD,MGM_W246);
   not MGM_G303(MGM_W248,SE);
   and MGM_G304(MGM_W249,MGM_W248,MGM_W247);
   and MGM_G305(ENABLE_NOT_CK_AND_D_AND_RD_AND_NOT_SE_AND_SI,SI,MGM_W249);
   not MGM_G306(MGM_W250,CK);
   and MGM_G307(MGM_W251,D,MGM_W250);
   and MGM_G308(MGM_W252,RD,MGM_W251);
   and MGM_G309(MGM_W253,SE,MGM_W252);
   not MGM_G310(MGM_W254,SI);
   and MGM_G311(ENABLE_NOT_CK_AND_D_AND_RD_AND_SE_AND_NOT_SI,MGM_W254,MGM_W253);
   not MGM_G312(MGM_W255,CK);
   and MGM_G313(MGM_W256,D,MGM_W255);
   and MGM_G314(MGM_W257,RD,MGM_W256);
   and MGM_G315(MGM_W258,SE,MGM_W257);
   and MGM_G316(ENABLE_NOT_CK_AND_D_AND_RD_AND_SE_AND_SI,SI,MGM_W258);
   not MGM_G317(MGM_W259,D);
   and MGM_G318(MGM_W260,MGM_W259,CK);
   and MGM_G319(MGM_W261,RD,MGM_W260);
   not MGM_G320(MGM_W262,SE);
   and MGM_G321(MGM_W263,MGM_W262,MGM_W261);
   not MGM_G322(MGM_W264,SI);
   and MGM_G323(ENABLE_CK_AND_NOT_D_AND_RD_AND_NOT_SE_AND_NOT_SI,MGM_W264,MGM_W263);
   not MGM_G324(MGM_W265,D);
   and MGM_G325(MGM_W266,MGM_W265,CK);
   and MGM_G326(MGM_W267,RD,MGM_W266);
   not MGM_G327(MGM_W268,SE);
   and MGM_G328(MGM_W269,MGM_W268,MGM_W267);
   and MGM_G329(ENABLE_CK_AND_NOT_D_AND_RD_AND_NOT_SE_AND_SI,SI,MGM_W269);
   not MGM_G330(MGM_W270,D);
   and MGM_G331(MGM_W271,MGM_W270,CK);
   and MGM_G332(MGM_W272,RD,MGM_W271);
   and MGM_G333(MGM_W273,SE,MGM_W272);
   not MGM_G334(MGM_W274,SI);
   and MGM_G335(ENABLE_CK_AND_NOT_D_AND_RD_AND_SE_AND_NOT_SI,MGM_W274,MGM_W273);
   not MGM_G336(MGM_W275,D);
   and MGM_G337(MGM_W276,MGM_W275,CK);
   and MGM_G338(MGM_W277,RD,MGM_W276);
   and MGM_G339(MGM_W278,SE,MGM_W277);
   and MGM_G340(ENABLE_CK_AND_NOT_D_AND_RD_AND_SE_AND_SI,SI,MGM_W278);
   and MGM_G341(MGM_W279,D,CK);
   and MGM_G342(MGM_W280,RD,MGM_W279);
   not MGM_G343(MGM_W281,SE);
   and MGM_G344(MGM_W282,MGM_W281,MGM_W280);
   not MGM_G345(MGM_W283,SI);
   and MGM_G346(ENABLE_CK_AND_D_AND_RD_AND_NOT_SE_AND_NOT_SI,MGM_W283,MGM_W282);
   and MGM_G347(MGM_W284,D,CK);
   and MGM_G348(MGM_W285,RD,MGM_W284);
   not MGM_G349(MGM_W286,SE);
   and MGM_G350(MGM_W287,MGM_W286,MGM_W285);
   and MGM_G351(ENABLE_CK_AND_D_AND_RD_AND_NOT_SE_AND_SI,SI,MGM_W287);
   and MGM_G352(MGM_W288,D,CK);
   and MGM_G353(MGM_W289,RD,MGM_W288);
   and MGM_G354(MGM_W290,SE,MGM_W289);
   not MGM_G355(MGM_W291,SI);
   and MGM_G356(ENABLE_CK_AND_D_AND_RD_AND_SE_AND_NOT_SI,MGM_W291,MGM_W290);
   and MGM_G357(MGM_W292,D,CK);
   and MGM_G358(MGM_W293,RD,MGM_W292);
   and MGM_G359(MGM_W294,SE,MGM_W293);
   and MGM_G360(ENABLE_CK_AND_D_AND_RD_AND_SE_AND_SI,SI,MGM_W294);
   not MGM_G361(MGM_W295,D);
   and MGM_G362(MGM_W296,RD,MGM_W295);
   and MGM_G363(MGM_W297,SD,MGM_W296);
   and MGM_G364(ENABLE_NOT_D_AND_RD_AND_SD_AND_SI,SI,MGM_W297);
   and MGM_G365(MGM_W298,RD,D);
   and MGM_G366(MGM_W299,SD,MGM_W298);
   not MGM_G367(MGM_W300,SI);
   and MGM_G368(ENABLE_D_AND_RD_AND_SD_AND_NOT_SI,MGM_W300,MGM_W299);
   not MGM_G369(MGM_W301,D);
   and MGM_G370(MGM_W302,RD,MGM_W301);
   and MGM_G371(MGM_W303,SD,MGM_W302);
   and MGM_G372(ENABLE_NOT_D_AND_RD_AND_SD_AND_SE,SE,MGM_W303);
   and MGM_G373(MGM_W304,RD,D);
   and MGM_G374(MGM_W305,SD,MGM_W304);
   and MGM_G375(ENABLE_D_AND_RD_AND_SD_AND_SE,SE,MGM_W305);
   // spec_gates_end
   // specify_block_begin
   specify

      if(D===1'b0 && SI===1'b1)
      // seq arc CK --> Q
      (posedge CK => (Q : SE))  = (1.0,1.0);
      
      if(SE===1'b0 && SI===1'b0)
      // seq arc CK --> Q
      (posedge CK => (Q : D))  = (1.0,1.0);
      
      if(D===1'b1 && SE===1'b0 && SI===1'b1 || D===1'b0 && SE===1'b1 && SI===1'b0)
      // seq arc CK --> Q
      (posedge CK => (Q : D))  = (1.0,1.0);
      
      if(D===1'b1 && SE===1'b1)
      // seq arc CK --> Q
      (posedge CK => (Q : SI))  = (1.0,1.0);
      
      ifnone
      // seq arc CK --> Q
      (posedge CK => (Q : D))  = (1.0,1.0);
      
      if(CK===1'b0 && D===1'b0 && SD===1'b0 && SE===1'b0 && SI===1'b0)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b0 && D===1'b0 && SD===1'b0 && SE===1'b0 && SI===1'b1)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b0 && D===1'b0 && SD===1'b0 && SE===1'b1 && SI===1'b0)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b0 && D===1'b0 && SD===1'b0 && SE===1'b1 && SI===1'b1)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b0 && D===1'b0 && SD===1'b1 && SE===1'b0 && SI===1'b0)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b0 && D===1'b0 && SD===1'b1 && SE===1'b0 && SI===1'b1)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b0 && D===1'b0 && SD===1'b1 && SE===1'b1 && SI===1'b0)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b0 && D===1'b0 && SD===1'b1 && SE===1'b1 && SI===1'b1)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b0 && D===1'b1 && SD===1'b0 && SE===1'b0 && SI===1'b0)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b0 && D===1'b1 && SD===1'b0 && SE===1'b0 && SI===1'b1)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b0 && D===1'b1 && SD===1'b0 && SE===1'b1 && SI===1'b0)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b0 && D===1'b1 && SD===1'b0 && SE===1'b1 && SI===1'b1)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b0 && D===1'b1 && SD===1'b1 && SE===1'b0 && SI===1'b0)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b0 && D===1'b1 && SD===1'b1 && SE===1'b0 && SI===1'b1)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b0 && D===1'b1 && SD===1'b1 && SE===1'b1 && SI===1'b0)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b0 && D===1'b1 && SD===1'b1 && SE===1'b1 && SI===1'b1)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b1 && D===1'b0 && SD===1'b0 && SE===1'b0 && SI===1'b0)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b1 && D===1'b0 && SD===1'b0 && SE===1'b0 && SI===1'b1)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b1 && D===1'b0 && SD===1'b0 && SE===1'b1 && SI===1'b0)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b1 && D===1'b0 && SD===1'b0 && SE===1'b1 && SI===1'b1)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b1 && D===1'b0 && SD===1'b1 && SE===1'b0 && SI===1'b0)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b1 && D===1'b0 && SD===1'b1 && SE===1'b0 && SI===1'b1)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b1 && D===1'b0 && SD===1'b1 && SE===1'b1 && SI===1'b0)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b1 && D===1'b0 && SD===1'b1 && SE===1'b1 && SI===1'b1)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b1 && D===1'b1 && SD===1'b0 && SE===1'b0 && SI===1'b0)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b1 && D===1'b1 && SD===1'b0 && SE===1'b0 && SI===1'b1)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b1 && D===1'b1 && SD===1'b0 && SE===1'b1 && SI===1'b0)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b1 && D===1'b1 && SD===1'b0 && SE===1'b1 && SI===1'b1)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b1 && D===1'b1 && SD===1'b1 && SE===1'b0 && SI===1'b0)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b1 && D===1'b1 && SD===1'b1 && SE===1'b0 && SI===1'b1)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b1 && D===1'b1 && SD===1'b1 && SE===1'b1 && SI===1'b0)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b1 && D===1'b1 && SD===1'b1 && SE===1'b1 && SI===1'b1)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      ifnone
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b0 && D===1'b0 && SE===1'b0 && SI===1'b0)
      // seq arc SD --> Q
      (SD => Q)  = (1.0,1.0);
      
      if(CK===1'b0 && D===1'b0 && SE===1'b0 && SI===1'b1)
      // seq arc SD --> Q
      (SD => Q)  = (1.0,1.0);
      
      if(CK===1'b0 && D===1'b0 && SE===1'b1 && SI===1'b0)
      // seq arc SD --> Q
      (SD => Q)  = (1.0,1.0);
      
      if(CK===1'b0 && D===1'b0 && SE===1'b1 && SI===1'b1)
      // seq arc SD --> Q
      (SD => Q)  = (1.0,1.0);
      
      if(CK===1'b0 && D===1'b1 && SE===1'b0 && SI===1'b0)
      // seq arc SD --> Q
      (SD => Q)  = (1.0,1.0);
      
      if(CK===1'b0 && D===1'b1 && SE===1'b0 && SI===1'b1)
      // seq arc SD --> Q
      (SD => Q)  = (1.0,1.0);
      
      if(CK===1'b0 && D===1'b1 && SE===1'b1 && SI===1'b0)
      // seq arc SD --> Q
      (SD => Q)  = (1.0,1.0);
      
      if(CK===1'b0 && D===1'b1 && SE===1'b1 && SI===1'b1)
      // seq arc SD --> Q
      (SD => Q)  = (1.0,1.0);
      
      if(CK===1'b1 && D===1'b0 && SE===1'b0 && SI===1'b0)
      // seq arc SD --> Q
      (SD => Q)  = (1.0,1.0);
      
      if(CK===1'b1 && D===1'b0 && SE===1'b0 && SI===1'b1)
      // seq arc SD --> Q
      (SD => Q)  = (1.0,1.0);
      
      if(CK===1'b1 && D===1'b0 && SE===1'b1 && SI===1'b0)
      // seq arc SD --> Q
      (SD => Q)  = (1.0,1.0);
      
      if(CK===1'b1 && D===1'b0 && SE===1'b1 && SI===1'b1)
      // seq arc SD --> Q
      (SD => Q)  = (1.0,1.0);
      
      if(CK===1'b1 && D===1'b1 && SE===1'b0 && SI===1'b0)
      // seq arc SD --> Q
      (SD => Q)  = (1.0,1.0);
      
      if(CK===1'b1 && D===1'b1 && SE===1'b0 && SI===1'b1)
      // seq arc SD --> Q
      (SD => Q)  = (1.0,1.0);
      
      if(CK===1'b1 && D===1'b1 && SE===1'b1 && SI===1'b0)
      // seq arc SD --> Q
      (SD => Q)  = (1.0,1.0);
      
      if(CK===1'b1 && D===1'b1 && SE===1'b1 && SI===1'b1)
      // seq arc SD --> Q
      (SD => Q)  = (1.0,1.0);
      
      ifnone
      // seq arc SD --> Q
      (SD => Q)  = (1.0,1.0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_RD_AND_SD_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_RD_AND_SD_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_RD_AND_SD_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_RD_AND_SD_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_RD_AND_SD_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_RD_AND_SD_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_RD_AND_SD_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_RD_AND_SD_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_RD_AND_SD_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_RD_AND_SD_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_RD_AND_SD_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_RD_AND_SD_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_RD_AND_SD_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_RD_AND_SD_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_RD_AND_SD_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_RD_AND_SD_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      // hold D-HL CK-LH
      $hold(posedge CK &&& (ENABLE_RD_AND_SD_AND_NOT_SE_AND_NOT_SI === 1'b1),
      negedge D &&& (ENABLE_RD_AND_SD_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold D-LH CK-LH
      $hold(posedge CK &&& (ENABLE_RD_AND_SD_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge D &&& (ENABLE_RD_AND_SD_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup D-HL CK-LH
      $setup(negedge D &&& (ENABLE_RD_AND_SD_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_RD_AND_SD_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup D-LH CK-LH
      $setup(posedge D &&& (ENABLE_RD_AND_SD_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_RD_AND_SD_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold D-HL CK-LH
      $hold(posedge CK &&& (ENABLE_RD_AND_SD_AND_NOT_SE_AND_SI === 1'b1),
      negedge D &&& (ENABLE_RD_AND_SD_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // hold D-LH CK-LH
      $hold(posedge CK &&& (ENABLE_RD_AND_SD_AND_NOT_SE_AND_SI === 1'b1),
      posedge D &&& (ENABLE_RD_AND_SD_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // setup D-HL CK-LH
      $setup(negedge D &&& (ENABLE_RD_AND_SD_AND_NOT_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_RD_AND_SD_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // setup D-LH CK-LH
      $setup(posedge D &&& (ENABLE_RD_AND_SD_AND_NOT_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_RD_AND_SD_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // recovery RD-LH CK-LH
      $recovery(posedge RD &&& (ENABLE_NOT_D_AND_SD_AND_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_SD_AND_SE_AND_SI === 1'b1),1.0);
      
      // removal RD-LH CK-LH
      $removal(posedge RD &&& (ENABLE_NOT_D_AND_SD_AND_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_SD_AND_SE_AND_SI === 1'b1),1.0);
      
      // recovery RD-LH CK-LH
      $recovery(posedge RD &&& (ENABLE_D_AND_SD_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_D_AND_SD_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // removal RD-LH CK-LH
      $removal(posedge RD &&& (ENABLE_D_AND_SD_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_D_AND_SD_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // recovery RD-LH CK-LH
      $recovery(posedge RD &&& (ENABLE_D_AND_SD_AND_NOT_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_D_AND_SD_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // removal RD-LH CK-LH
      $removal(posedge RD &&& (ENABLE_D_AND_SD_AND_NOT_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_D_AND_SD_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // recovery RD-LH CK-LH
      $recovery(posedge RD &&& (ENABLE_D_AND_SD_AND_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_D_AND_SD_AND_SE_AND_SI === 1'b1),1.0);
      
      // removal RD-LH CK-LH
      $removal(posedge RD &&& (ENABLE_D_AND_SD_AND_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_D_AND_SD_AND_SE_AND_SI === 1'b1),1.0);
      
      $width(negedge RD &&& (ENABLE_NOT_CK_AND_NOT_D_AND_SD_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge RD &&& (ENABLE_NOT_CK_AND_NOT_D_AND_SD_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge RD &&& (ENABLE_NOT_CK_AND_NOT_D_AND_SD_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge RD &&& (ENABLE_NOT_CK_AND_NOT_D_AND_SD_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge RD &&& (ENABLE_NOT_CK_AND_D_AND_SD_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge RD &&& (ENABLE_NOT_CK_AND_D_AND_SD_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge RD &&& (ENABLE_NOT_CK_AND_D_AND_SD_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge RD &&& (ENABLE_NOT_CK_AND_D_AND_SD_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge RD &&& (ENABLE_CK_AND_NOT_D_AND_SD_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge RD &&& (ENABLE_CK_AND_NOT_D_AND_SD_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge RD &&& (ENABLE_CK_AND_NOT_D_AND_SD_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge RD &&& (ENABLE_CK_AND_NOT_D_AND_SD_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge RD &&& (ENABLE_CK_AND_D_AND_SD_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge RD &&& (ENABLE_CK_AND_D_AND_SD_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge RD &&& (ENABLE_CK_AND_D_AND_SD_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge RD &&& (ENABLE_CK_AND_D_AND_SD_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      // hold RD-LH SD-LH
      $hold(posedge SD &&& (ENABLE_NOT_CK_AND_NOT_D_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge RD &&& (ENABLE_NOT_CK_AND_NOT_D_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup RD-LH SD-LH
      $setup(posedge RD &&& (ENABLE_NOT_CK_AND_NOT_D_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge SD &&& (ENABLE_NOT_CK_AND_NOT_D_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold RD-LH SD-LH
      $hold(posedge SD &&& (ENABLE_NOT_CK_AND_NOT_D_AND_NOT_SE_AND_SI === 1'b1),
      posedge RD &&& (ENABLE_NOT_CK_AND_NOT_D_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // setup RD-LH SD-LH
      $setup(posedge RD &&& (ENABLE_NOT_CK_AND_NOT_D_AND_NOT_SE_AND_SI === 1'b1),
      posedge SD &&& (ENABLE_NOT_CK_AND_NOT_D_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // hold RD-LH SD-LH
      $hold(posedge SD &&& (ENABLE_NOT_CK_AND_NOT_D_AND_SE_AND_NOT_SI === 1'b1),
      posedge RD &&& (ENABLE_NOT_CK_AND_NOT_D_AND_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup RD-LH SD-LH
      $setup(posedge RD &&& (ENABLE_NOT_CK_AND_NOT_D_AND_SE_AND_NOT_SI === 1'b1),
      posedge SD &&& (ENABLE_NOT_CK_AND_NOT_D_AND_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold RD-LH SD-LH
      $hold(posedge SD &&& (ENABLE_NOT_CK_AND_NOT_D_AND_SE_AND_SI === 1'b1),
      posedge RD &&& (ENABLE_NOT_CK_AND_NOT_D_AND_SE_AND_SI === 1'b1),1.0);
      
      // setup RD-LH SD-LH
      $setup(posedge RD &&& (ENABLE_NOT_CK_AND_NOT_D_AND_SE_AND_SI === 1'b1),
      posedge SD &&& (ENABLE_NOT_CK_AND_NOT_D_AND_SE_AND_SI === 1'b1),1.0);
      
      // hold RD-LH SD-LH
      $hold(posedge SD &&& (ENABLE_NOT_CK_AND_D_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge RD &&& (ENABLE_NOT_CK_AND_D_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup RD-LH SD-LH
      $setup(posedge RD &&& (ENABLE_NOT_CK_AND_D_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge SD &&& (ENABLE_NOT_CK_AND_D_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold RD-LH SD-LH
      $hold(posedge SD &&& (ENABLE_NOT_CK_AND_D_AND_NOT_SE_AND_SI === 1'b1),
      posedge RD &&& (ENABLE_NOT_CK_AND_D_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // setup RD-LH SD-LH
      $setup(posedge RD &&& (ENABLE_NOT_CK_AND_D_AND_NOT_SE_AND_SI === 1'b1),
      posedge SD &&& (ENABLE_NOT_CK_AND_D_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // hold RD-LH SD-LH
      $hold(posedge SD &&& (ENABLE_NOT_CK_AND_D_AND_SE_AND_NOT_SI === 1'b1),
      posedge RD &&& (ENABLE_NOT_CK_AND_D_AND_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup RD-LH SD-LH
      $setup(posedge RD &&& (ENABLE_NOT_CK_AND_D_AND_SE_AND_NOT_SI === 1'b1),
      posedge SD &&& (ENABLE_NOT_CK_AND_D_AND_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold RD-LH SD-LH
      $hold(posedge SD &&& (ENABLE_NOT_CK_AND_D_AND_SE_AND_SI === 1'b1),
      posedge RD &&& (ENABLE_NOT_CK_AND_D_AND_SE_AND_SI === 1'b1),1.0);
      
      // setup RD-LH SD-LH
      $setup(posedge RD &&& (ENABLE_NOT_CK_AND_D_AND_SE_AND_SI === 1'b1),
      posedge SD &&& (ENABLE_NOT_CK_AND_D_AND_SE_AND_SI === 1'b1),1.0);
      
      // hold RD-LH SD-LH
      $hold(posedge SD &&& (ENABLE_CK_AND_NOT_D_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge RD &&& (ENABLE_CK_AND_NOT_D_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup RD-LH SD-LH
      $setup(posedge RD &&& (ENABLE_CK_AND_NOT_D_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge SD &&& (ENABLE_CK_AND_NOT_D_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold RD-LH SD-LH
      $hold(posedge SD &&& (ENABLE_CK_AND_NOT_D_AND_NOT_SE_AND_SI === 1'b1),
      posedge RD &&& (ENABLE_CK_AND_NOT_D_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // setup RD-LH SD-LH
      $setup(posedge RD &&& (ENABLE_CK_AND_NOT_D_AND_NOT_SE_AND_SI === 1'b1),
      posedge SD &&& (ENABLE_CK_AND_NOT_D_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // hold RD-LH SD-LH
      $hold(posedge SD &&& (ENABLE_CK_AND_NOT_D_AND_SE_AND_NOT_SI === 1'b1),
      posedge RD &&& (ENABLE_CK_AND_NOT_D_AND_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup RD-LH SD-LH
      $setup(posedge RD &&& (ENABLE_CK_AND_NOT_D_AND_SE_AND_NOT_SI === 1'b1),
      posedge SD &&& (ENABLE_CK_AND_NOT_D_AND_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold RD-LH SD-LH
      $hold(posedge SD &&& (ENABLE_CK_AND_NOT_D_AND_SE_AND_SI === 1'b1),
      posedge RD &&& (ENABLE_CK_AND_NOT_D_AND_SE_AND_SI === 1'b1),1.0);
      
      // setup RD-LH SD-LH
      $setup(posedge RD &&& (ENABLE_CK_AND_NOT_D_AND_SE_AND_SI === 1'b1),
      posedge SD &&& (ENABLE_CK_AND_NOT_D_AND_SE_AND_SI === 1'b1),1.0);
      
      // hold RD-LH SD-LH
      $hold(posedge SD &&& (ENABLE_CK_AND_D_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge RD &&& (ENABLE_CK_AND_D_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup RD-LH SD-LH
      $setup(posedge RD &&& (ENABLE_CK_AND_D_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge SD &&& (ENABLE_CK_AND_D_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold RD-LH SD-LH
      $hold(posedge SD &&& (ENABLE_CK_AND_D_AND_NOT_SE_AND_SI === 1'b1),
      posedge RD &&& (ENABLE_CK_AND_D_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // setup RD-LH SD-LH
      $setup(posedge RD &&& (ENABLE_CK_AND_D_AND_NOT_SE_AND_SI === 1'b1),
      posedge SD &&& (ENABLE_CK_AND_D_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // hold RD-LH SD-LH
      $hold(posedge SD &&& (ENABLE_CK_AND_D_AND_SE_AND_NOT_SI === 1'b1),
      posedge RD &&& (ENABLE_CK_AND_D_AND_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup RD-LH SD-LH
      $setup(posedge RD &&& (ENABLE_CK_AND_D_AND_SE_AND_NOT_SI === 1'b1),
      posedge SD &&& (ENABLE_CK_AND_D_AND_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold RD-LH SD-LH
      $hold(posedge SD &&& (ENABLE_CK_AND_D_AND_SE_AND_SI === 1'b1),
      posedge RD &&& (ENABLE_CK_AND_D_AND_SE_AND_SI === 1'b1),1.0);
      
      // setup RD-LH SD-LH
      $setup(posedge RD &&& (ENABLE_CK_AND_D_AND_SE_AND_SI === 1'b1),
      posedge SD &&& (ENABLE_CK_AND_D_AND_SE_AND_SI === 1'b1),1.0);
      
      // recovery SD-LH CK-LH
      $recovery(posedge SD &&& (ENABLE_NOT_D_AND_RD_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_RD_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // removal SD-LH CK-LH
      $removal(posedge SD &&& (ENABLE_NOT_D_AND_RD_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_RD_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // recovery SD-LH CK-LH
      $recovery(posedge SD &&& (ENABLE_NOT_D_AND_RD_AND_NOT_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_RD_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // removal SD-LH CK-LH
      $removal(posedge SD &&& (ENABLE_NOT_D_AND_RD_AND_NOT_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_RD_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // recovery SD-LH CK-LH
      $recovery(posedge SD &&& (ENABLE_NOT_D_AND_RD_AND_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_RD_AND_SE_AND_NOT_SI === 1'b1),1.0);
      
      // removal SD-LH CK-LH
      $removal(posedge SD &&& (ENABLE_NOT_D_AND_RD_AND_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_RD_AND_SE_AND_NOT_SI === 1'b1),1.0);
      
      // recovery SD-LH CK-LH
      $recovery(posedge SD &&& (ENABLE_D_AND_RD_AND_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_D_AND_RD_AND_SE_AND_NOT_SI === 1'b1),1.0);
      
      // removal SD-LH CK-LH
      $removal(posedge SD &&& (ENABLE_D_AND_RD_AND_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_D_AND_RD_AND_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold SD-LH RD-LH
      $hold(posedge RD &&& (ENABLE_NOT_CK_AND_NOT_D_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge SD &&& (ENABLE_NOT_CK_AND_NOT_D_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup SD-LH RD-LH
      $setup(posedge SD &&& (ENABLE_NOT_CK_AND_NOT_D_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge RD &&& (ENABLE_NOT_CK_AND_NOT_D_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold SD-LH RD-LH
      $hold(posedge RD &&& (ENABLE_NOT_CK_AND_NOT_D_AND_NOT_SE_AND_SI === 1'b1),
      posedge SD &&& (ENABLE_NOT_CK_AND_NOT_D_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // setup SD-LH RD-LH
      $setup(posedge SD &&& (ENABLE_NOT_CK_AND_NOT_D_AND_NOT_SE_AND_SI === 1'b1),
      posedge RD &&& (ENABLE_NOT_CK_AND_NOT_D_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // hold SD-LH RD-LH
      $hold(posedge RD &&& (ENABLE_NOT_CK_AND_NOT_D_AND_SE_AND_NOT_SI === 1'b1),
      posedge SD &&& (ENABLE_NOT_CK_AND_NOT_D_AND_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup SD-LH RD-LH
      $setup(posedge SD &&& (ENABLE_NOT_CK_AND_NOT_D_AND_SE_AND_NOT_SI === 1'b1),
      posedge RD &&& (ENABLE_NOT_CK_AND_NOT_D_AND_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold SD-LH RD-LH
      $hold(posedge RD &&& (ENABLE_NOT_CK_AND_NOT_D_AND_SE_AND_SI === 1'b1),
      posedge SD &&& (ENABLE_NOT_CK_AND_NOT_D_AND_SE_AND_SI === 1'b1),1.0);
      
      // setup SD-LH RD-LH
      $setup(posedge SD &&& (ENABLE_NOT_CK_AND_NOT_D_AND_SE_AND_SI === 1'b1),
      posedge RD &&& (ENABLE_NOT_CK_AND_NOT_D_AND_SE_AND_SI === 1'b1),1.0);
      
      // hold SD-LH RD-LH
      $hold(posedge RD &&& (ENABLE_NOT_CK_AND_D_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge SD &&& (ENABLE_NOT_CK_AND_D_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup SD-LH RD-LH
      $setup(posedge SD &&& (ENABLE_NOT_CK_AND_D_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge RD &&& (ENABLE_NOT_CK_AND_D_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold SD-LH RD-LH
      $hold(posedge RD &&& (ENABLE_NOT_CK_AND_D_AND_NOT_SE_AND_SI === 1'b1),
      posedge SD &&& (ENABLE_NOT_CK_AND_D_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // setup SD-LH RD-LH
      $setup(posedge SD &&& (ENABLE_NOT_CK_AND_D_AND_NOT_SE_AND_SI === 1'b1),
      posedge RD &&& (ENABLE_NOT_CK_AND_D_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // hold SD-LH RD-LH
      $hold(posedge RD &&& (ENABLE_NOT_CK_AND_D_AND_SE_AND_NOT_SI === 1'b1),
      posedge SD &&& (ENABLE_NOT_CK_AND_D_AND_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup SD-LH RD-LH
      $setup(posedge SD &&& (ENABLE_NOT_CK_AND_D_AND_SE_AND_NOT_SI === 1'b1),
      posedge RD &&& (ENABLE_NOT_CK_AND_D_AND_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold SD-LH RD-LH
      $hold(posedge RD &&& (ENABLE_NOT_CK_AND_D_AND_SE_AND_SI === 1'b1),
      posedge SD &&& (ENABLE_NOT_CK_AND_D_AND_SE_AND_SI === 1'b1),1.0);
      
      // setup SD-LH RD-LH
      $setup(posedge SD &&& (ENABLE_NOT_CK_AND_D_AND_SE_AND_SI === 1'b1),
      posedge RD &&& (ENABLE_NOT_CK_AND_D_AND_SE_AND_SI === 1'b1),1.0);
      
      // hold SD-LH RD-LH
      $hold(posedge RD &&& (ENABLE_CK_AND_NOT_D_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge SD &&& (ENABLE_CK_AND_NOT_D_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup SD-LH RD-LH
      $setup(posedge SD &&& (ENABLE_CK_AND_NOT_D_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge RD &&& (ENABLE_CK_AND_NOT_D_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold SD-LH RD-LH
      $hold(posedge RD &&& (ENABLE_CK_AND_NOT_D_AND_NOT_SE_AND_SI === 1'b1),
      posedge SD &&& (ENABLE_CK_AND_NOT_D_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // setup SD-LH RD-LH
      $setup(posedge SD &&& (ENABLE_CK_AND_NOT_D_AND_NOT_SE_AND_SI === 1'b1),
      posedge RD &&& (ENABLE_CK_AND_NOT_D_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // hold SD-LH RD-LH
      $hold(posedge RD &&& (ENABLE_CK_AND_NOT_D_AND_SE_AND_NOT_SI === 1'b1),
      posedge SD &&& (ENABLE_CK_AND_NOT_D_AND_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup SD-LH RD-LH
      $setup(posedge SD &&& (ENABLE_CK_AND_NOT_D_AND_SE_AND_NOT_SI === 1'b1),
      posedge RD &&& (ENABLE_CK_AND_NOT_D_AND_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold SD-LH RD-LH
      $hold(posedge RD &&& (ENABLE_CK_AND_NOT_D_AND_SE_AND_SI === 1'b1),
      posedge SD &&& (ENABLE_CK_AND_NOT_D_AND_SE_AND_SI === 1'b1),1.0);
      
      // setup SD-LH RD-LH
      $setup(posedge SD &&& (ENABLE_CK_AND_NOT_D_AND_SE_AND_SI === 1'b1),
      posedge RD &&& (ENABLE_CK_AND_NOT_D_AND_SE_AND_SI === 1'b1),1.0);
      
      // hold SD-LH RD-LH
      $hold(posedge RD &&& (ENABLE_CK_AND_D_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge SD &&& (ENABLE_CK_AND_D_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup SD-LH RD-LH
      $setup(posedge SD &&& (ENABLE_CK_AND_D_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge RD &&& (ENABLE_CK_AND_D_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold SD-LH RD-LH
      $hold(posedge RD &&& (ENABLE_CK_AND_D_AND_NOT_SE_AND_SI === 1'b1),
      posedge SD &&& (ENABLE_CK_AND_D_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // setup SD-LH RD-LH
      $setup(posedge SD &&& (ENABLE_CK_AND_D_AND_NOT_SE_AND_SI === 1'b1),
      posedge RD &&& (ENABLE_CK_AND_D_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // hold SD-LH RD-LH
      $hold(posedge RD &&& (ENABLE_CK_AND_D_AND_SE_AND_NOT_SI === 1'b1),
      posedge SD &&& (ENABLE_CK_AND_D_AND_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup SD-LH RD-LH
      $setup(posedge SD &&& (ENABLE_CK_AND_D_AND_SE_AND_NOT_SI === 1'b1),
      posedge RD &&& (ENABLE_CK_AND_D_AND_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold SD-LH RD-LH
      $hold(posedge RD &&& (ENABLE_CK_AND_D_AND_SE_AND_SI === 1'b1),
      posedge SD &&& (ENABLE_CK_AND_D_AND_SE_AND_SI === 1'b1),1.0);
      
      // setup SD-LH RD-LH
      $setup(posedge SD &&& (ENABLE_CK_AND_D_AND_SE_AND_SI === 1'b1),
      posedge RD &&& (ENABLE_CK_AND_D_AND_SE_AND_SI === 1'b1),1.0);
      
      $width(negedge SD &&& (ENABLE_NOT_CK_AND_NOT_D_AND_RD_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge SD &&& (ENABLE_NOT_CK_AND_NOT_D_AND_RD_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge SD &&& (ENABLE_NOT_CK_AND_NOT_D_AND_RD_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge SD &&& (ENABLE_NOT_CK_AND_NOT_D_AND_RD_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge SD &&& (ENABLE_NOT_CK_AND_D_AND_RD_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge SD &&& (ENABLE_NOT_CK_AND_D_AND_RD_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge SD &&& (ENABLE_NOT_CK_AND_D_AND_RD_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge SD &&& (ENABLE_NOT_CK_AND_D_AND_RD_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge SD &&& (ENABLE_CK_AND_NOT_D_AND_RD_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge SD &&& (ENABLE_CK_AND_NOT_D_AND_RD_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge SD &&& (ENABLE_CK_AND_NOT_D_AND_RD_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge SD &&& (ENABLE_CK_AND_NOT_D_AND_RD_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge SD &&& (ENABLE_CK_AND_D_AND_RD_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge SD &&& (ENABLE_CK_AND_D_AND_RD_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge SD &&& (ENABLE_CK_AND_D_AND_RD_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge SD &&& (ENABLE_CK_AND_D_AND_RD_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      // hold SE-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D_AND_RD_AND_SD_AND_SI === 1'b1),
      negedge SE &&& (ENABLE_NOT_D_AND_RD_AND_SD_AND_SI === 1'b1),1.0);
      
      // hold SE-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D_AND_RD_AND_SD_AND_SI === 1'b1),
      posedge SE &&& (ENABLE_NOT_D_AND_RD_AND_SD_AND_SI === 1'b1),1.0);
      
      // setup SE-HL CK-LH
      $setup(negedge SE &&& (ENABLE_NOT_D_AND_RD_AND_SD_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_RD_AND_SD_AND_SI === 1'b1),1.0);
      
      // setup SE-LH CK-LH
      $setup(posedge SE &&& (ENABLE_NOT_D_AND_RD_AND_SD_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_RD_AND_SD_AND_SI === 1'b1),1.0);
      
      // hold SE-HL CK-LH
      $hold(posedge CK &&& (ENABLE_D_AND_RD_AND_SD_AND_NOT_SI === 1'b1),
      negedge SE &&& (ENABLE_D_AND_RD_AND_SD_AND_NOT_SI === 1'b1),1.0);
      
      // hold SE-LH CK-LH
      $hold(posedge CK &&& (ENABLE_D_AND_RD_AND_SD_AND_NOT_SI === 1'b1),
      posedge SE &&& (ENABLE_D_AND_RD_AND_SD_AND_NOT_SI === 1'b1),1.0);
      
      // setup SE-HL CK-LH
      $setup(negedge SE &&& (ENABLE_D_AND_RD_AND_SD_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_D_AND_RD_AND_SD_AND_NOT_SI === 1'b1),1.0);
      
      // setup SE-LH CK-LH
      $setup(posedge SE &&& (ENABLE_D_AND_RD_AND_SD_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_D_AND_RD_AND_SD_AND_NOT_SI === 1'b1),1.0);
      
      // hold SI-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D_AND_RD_AND_SD_AND_SE === 1'b1),
      negedge SI &&& (ENABLE_NOT_D_AND_RD_AND_SD_AND_SE === 1'b1),1.0);
      
      // hold SI-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D_AND_RD_AND_SD_AND_SE === 1'b1),
      posedge SI &&& (ENABLE_NOT_D_AND_RD_AND_SD_AND_SE === 1'b1),1.0);
      
      // setup SI-HL CK-LH
      $setup(negedge SI &&& (ENABLE_NOT_D_AND_RD_AND_SD_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_RD_AND_SD_AND_SE === 1'b1),1.0);
      
      // setup SI-LH CK-LH
      $setup(posedge SI &&& (ENABLE_NOT_D_AND_RD_AND_SD_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_RD_AND_SD_AND_SE === 1'b1),1.0);
      
      // hold SI-HL CK-LH
      $hold(posedge CK &&& (ENABLE_D_AND_RD_AND_SD_AND_SE === 1'b1),
      negedge SI &&& (ENABLE_D_AND_RD_AND_SD_AND_SE === 1'b1),1.0);
      
      // hold SI-LH CK-LH
      $hold(posedge CK &&& (ENABLE_D_AND_RD_AND_SD_AND_SE === 1'b1),
      posedge SI &&& (ENABLE_D_AND_RD_AND_SD_AND_SE === 1'b1),1.0);
      
      // setup SI-HL CK-LH
      $setup(negedge SI &&& (ENABLE_D_AND_RD_AND_SD_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_D_AND_RD_AND_SD_AND_SE === 1'b1),1.0);
      
      // setup SI-LH CK-LH
      $setup(posedge SI &&& (ENABLE_D_AND_RD_AND_SD_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_D_AND_RD_AND_SD_AND_SE === 1'b1),1.0);
      
      // mpw CK_lh 
      $width(posedge CK,1.0,0);
      
      // mpw CK_hl 
      $width(negedge CK,1.0,0);
      
      // mpw RD_hl 
      $width(negedge RD,1.0,0);
      
      // mpw SD_hl 
      $width(negedge SD,1.0,0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_FSDPRBSBQ_V2_4( Q, CK, D, SI, SE, RD, SD );
input CK, D, RD, SD, SE, SI;
output Q;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_FSDPRBSBQ_V2_4_func SAEDRVT14_FSDPRBSBQ_V2_4_behav_inst(.Q(Q),.CK(CK),.D(D),.SI(SI),.SE(SE),.RD(RD),.SD(SD));
`else
   SAEDRVT14_FSDPRBSBQ_V2_4_func SAEDRVT14_FSDPRBSBQ_V2_4_inst(.Q(Q),.CK(CK),.D(D),.SI(SI),.SE(SE),.RD(RD),.SD(SD));
   // spec_gates_begin
   not MGM_G0(MGM_W0,D);
   and MGM_G1(MGM_W1,RD,MGM_W0);
   and MGM_G2(MGM_W2,SD,MGM_W1);
   not MGM_G3(MGM_W3,SE);
   and MGM_G4(MGM_W4,MGM_W3,MGM_W2);
   not MGM_G5(MGM_W5,SI);
   and MGM_G6(ENABLE_NOT_D_AND_RD_AND_SD_AND_NOT_SE_AND_NOT_SI,MGM_W5,MGM_W4);
   not MGM_G7(MGM_W6,D);
   and MGM_G8(MGM_W7,RD,MGM_W6);
   and MGM_G9(MGM_W8,SD,MGM_W7);
   not MGM_G10(MGM_W9,SE);
   and MGM_G11(MGM_W10,MGM_W9,MGM_W8);
   and MGM_G12(ENABLE_NOT_D_AND_RD_AND_SD_AND_NOT_SE_AND_SI,SI,MGM_W10);
   not MGM_G13(MGM_W11,D);
   and MGM_G14(MGM_W12,RD,MGM_W11);
   and MGM_G15(MGM_W13,SD,MGM_W12);
   and MGM_G16(MGM_W14,SE,MGM_W13);
   not MGM_G17(MGM_W15,SI);
   and MGM_G18(ENABLE_NOT_D_AND_RD_AND_SD_AND_SE_AND_NOT_SI,MGM_W15,MGM_W14);
   not MGM_G19(MGM_W16,D);
   and MGM_G20(MGM_W17,RD,MGM_W16);
   and MGM_G21(MGM_W18,SD,MGM_W17);
   and MGM_G22(MGM_W19,SE,MGM_W18);
   and MGM_G23(ENABLE_NOT_D_AND_RD_AND_SD_AND_SE_AND_SI,SI,MGM_W19);
   and MGM_G24(MGM_W20,RD,D);
   and MGM_G25(MGM_W21,SD,MGM_W20);
   not MGM_G26(MGM_W22,SE);
   and MGM_G27(MGM_W23,MGM_W22,MGM_W21);
   not MGM_G28(MGM_W24,SI);
   and MGM_G29(ENABLE_D_AND_RD_AND_SD_AND_NOT_SE_AND_NOT_SI,MGM_W24,MGM_W23);
   and MGM_G30(MGM_W25,RD,D);
   and MGM_G31(MGM_W26,SD,MGM_W25);
   not MGM_G32(MGM_W27,SE);
   and MGM_G33(MGM_W28,MGM_W27,MGM_W26);
   and MGM_G34(ENABLE_D_AND_RD_AND_SD_AND_NOT_SE_AND_SI,SI,MGM_W28);
   and MGM_G35(MGM_W29,RD,D);
   and MGM_G36(MGM_W30,SD,MGM_W29);
   and MGM_G37(MGM_W31,SE,MGM_W30);
   not MGM_G38(MGM_W32,SI);
   and MGM_G39(ENABLE_D_AND_RD_AND_SD_AND_SE_AND_NOT_SI,MGM_W32,MGM_W31);
   and MGM_G40(MGM_W33,RD,D);
   and MGM_G41(MGM_W34,SD,MGM_W33);
   and MGM_G42(MGM_W35,SE,MGM_W34);
   and MGM_G43(ENABLE_D_AND_RD_AND_SD_AND_SE_AND_SI,SI,MGM_W35);
   and MGM_G44(MGM_W36,SD,RD);
   not MGM_G45(MGM_W37,SE);
   and MGM_G46(MGM_W38,MGM_W37,MGM_W36);
   not MGM_G47(MGM_W39,SI);
   and MGM_G48(ENABLE_RD_AND_SD_AND_NOT_SE_AND_NOT_SI,MGM_W39,MGM_W38);
   and MGM_G49(MGM_W40,SD,RD);
   not MGM_G50(MGM_W41,SE);
   and MGM_G51(MGM_W42,MGM_W41,MGM_W40);
   and MGM_G52(ENABLE_RD_AND_SD_AND_NOT_SE_AND_SI,SI,MGM_W42);
   not MGM_G53(MGM_W43,D);
   and MGM_G54(MGM_W44,SD,MGM_W43);
   and MGM_G55(MGM_W45,SE,MGM_W44);
   and MGM_G56(ENABLE_NOT_D_AND_SD_AND_SE_AND_SI,SI,MGM_W45);
   and MGM_G57(MGM_W46,SD,D);
   not MGM_G58(MGM_W47,SE);
   and MGM_G59(MGM_W48,MGM_W47,MGM_W46);
   not MGM_G60(MGM_W49,SI);
   and MGM_G61(ENABLE_D_AND_SD_AND_NOT_SE_AND_NOT_SI,MGM_W49,MGM_W48);
   and MGM_G62(MGM_W50,SD,D);
   not MGM_G63(MGM_W51,SE);
   and MGM_G64(MGM_W52,MGM_W51,MGM_W50);
   and MGM_G65(ENABLE_D_AND_SD_AND_NOT_SE_AND_SI,SI,MGM_W52);
   and MGM_G66(MGM_W53,SD,D);
   and MGM_G67(MGM_W54,SE,MGM_W53);
   and MGM_G68(ENABLE_D_AND_SD_AND_SE_AND_SI,SI,MGM_W54);
   not MGM_G69(MGM_W55,CK);
   not MGM_G70(MGM_W56,D);
   and MGM_G71(MGM_W57,MGM_W56,MGM_W55);
   and MGM_G72(MGM_W58,SD,MGM_W57);
   not MGM_G73(MGM_W59,SE);
   and MGM_G74(MGM_W60,MGM_W59,MGM_W58);
   not MGM_G75(MGM_W61,SI);
   and MGM_G76(ENABLE_NOT_CK_AND_NOT_D_AND_SD_AND_NOT_SE_AND_NOT_SI,MGM_W61,MGM_W60);
   not MGM_G77(MGM_W62,CK);
   not MGM_G78(MGM_W63,D);
   and MGM_G79(MGM_W64,MGM_W63,MGM_W62);
   and MGM_G80(MGM_W65,SD,MGM_W64);
   not MGM_G81(MGM_W66,SE);
   and MGM_G82(MGM_W67,MGM_W66,MGM_W65);
   and MGM_G83(ENABLE_NOT_CK_AND_NOT_D_AND_SD_AND_NOT_SE_AND_SI,SI,MGM_W67);
   not MGM_G84(MGM_W68,CK);
   not MGM_G85(MGM_W69,D);
   and MGM_G86(MGM_W70,MGM_W69,MGM_W68);
   and MGM_G87(MGM_W71,SD,MGM_W70);
   and MGM_G88(MGM_W72,SE,MGM_W71);
   not MGM_G89(MGM_W73,SI);
   and MGM_G90(ENABLE_NOT_CK_AND_NOT_D_AND_SD_AND_SE_AND_NOT_SI,MGM_W73,MGM_W72);
   not MGM_G91(MGM_W74,CK);
   not MGM_G92(MGM_W75,D);
   and MGM_G93(MGM_W76,MGM_W75,MGM_W74);
   and MGM_G94(MGM_W77,SD,MGM_W76);
   and MGM_G95(MGM_W78,SE,MGM_W77);
   and MGM_G96(ENABLE_NOT_CK_AND_NOT_D_AND_SD_AND_SE_AND_SI,SI,MGM_W78);
   not MGM_G97(MGM_W79,CK);
   and MGM_G98(MGM_W80,D,MGM_W79);
   and MGM_G99(MGM_W81,SD,MGM_W80);
   not MGM_G100(MGM_W82,SE);
   and MGM_G101(MGM_W83,MGM_W82,MGM_W81);
   not MGM_G102(MGM_W84,SI);
   and MGM_G103(ENABLE_NOT_CK_AND_D_AND_SD_AND_NOT_SE_AND_NOT_SI,MGM_W84,MGM_W83);
   not MGM_G104(MGM_W85,CK);
   and MGM_G105(MGM_W86,D,MGM_W85);
   and MGM_G106(MGM_W87,SD,MGM_W86);
   not MGM_G107(MGM_W88,SE);
   and MGM_G108(MGM_W89,MGM_W88,MGM_W87);
   and MGM_G109(ENABLE_NOT_CK_AND_D_AND_SD_AND_NOT_SE_AND_SI,SI,MGM_W89);
   not MGM_G110(MGM_W90,CK);
   and MGM_G111(MGM_W91,D,MGM_W90);
   and MGM_G112(MGM_W92,SD,MGM_W91);
   and MGM_G113(MGM_W93,SE,MGM_W92);
   not MGM_G114(MGM_W94,SI);
   and MGM_G115(ENABLE_NOT_CK_AND_D_AND_SD_AND_SE_AND_NOT_SI,MGM_W94,MGM_W93);
   not MGM_G116(MGM_W95,CK);
   and MGM_G117(MGM_W96,D,MGM_W95);
   and MGM_G118(MGM_W97,SD,MGM_W96);
   and MGM_G119(MGM_W98,SE,MGM_W97);
   and MGM_G120(ENABLE_NOT_CK_AND_D_AND_SD_AND_SE_AND_SI,SI,MGM_W98);
   not MGM_G121(MGM_W99,D);
   and MGM_G122(MGM_W100,MGM_W99,CK);
   and MGM_G123(MGM_W101,SD,MGM_W100);
   not MGM_G124(MGM_W102,SE);
   and MGM_G125(MGM_W103,MGM_W102,MGM_W101);
   not MGM_G126(MGM_W104,SI);
   and MGM_G127(ENABLE_CK_AND_NOT_D_AND_SD_AND_NOT_SE_AND_NOT_SI,MGM_W104,MGM_W103);
   not MGM_G128(MGM_W105,D);
   and MGM_G129(MGM_W106,MGM_W105,CK);
   and MGM_G130(MGM_W107,SD,MGM_W106);
   not MGM_G131(MGM_W108,SE);
   and MGM_G132(MGM_W109,MGM_W108,MGM_W107);
   and MGM_G133(ENABLE_CK_AND_NOT_D_AND_SD_AND_NOT_SE_AND_SI,SI,MGM_W109);
   not MGM_G134(MGM_W110,D);
   and MGM_G135(MGM_W111,MGM_W110,CK);
   and MGM_G136(MGM_W112,SD,MGM_W111);
   and MGM_G137(MGM_W113,SE,MGM_W112);
   not MGM_G138(MGM_W114,SI);
   and MGM_G139(ENABLE_CK_AND_NOT_D_AND_SD_AND_SE_AND_NOT_SI,MGM_W114,MGM_W113);
   not MGM_G140(MGM_W115,D);
   and MGM_G141(MGM_W116,MGM_W115,CK);
   and MGM_G142(MGM_W117,SD,MGM_W116);
   and MGM_G143(MGM_W118,SE,MGM_W117);
   and MGM_G144(ENABLE_CK_AND_NOT_D_AND_SD_AND_SE_AND_SI,SI,MGM_W118);
   and MGM_G145(MGM_W119,D,CK);
   and MGM_G146(MGM_W120,SD,MGM_W119);
   not MGM_G147(MGM_W121,SE);
   and MGM_G148(MGM_W122,MGM_W121,MGM_W120);
   not MGM_G149(MGM_W123,SI);
   and MGM_G150(ENABLE_CK_AND_D_AND_SD_AND_NOT_SE_AND_NOT_SI,MGM_W123,MGM_W122);
   and MGM_G151(MGM_W124,D,CK);
   and MGM_G152(MGM_W125,SD,MGM_W124);
   not MGM_G153(MGM_W126,SE);
   and MGM_G154(MGM_W127,MGM_W126,MGM_W125);
   and MGM_G155(ENABLE_CK_AND_D_AND_SD_AND_NOT_SE_AND_SI,SI,MGM_W127);
   and MGM_G156(MGM_W128,D,CK);
   and MGM_G157(MGM_W129,SD,MGM_W128);
   and MGM_G158(MGM_W130,SE,MGM_W129);
   not MGM_G159(MGM_W131,SI);
   and MGM_G160(ENABLE_CK_AND_D_AND_SD_AND_SE_AND_NOT_SI,MGM_W131,MGM_W130);
   and MGM_G161(MGM_W132,D,CK);
   and MGM_G162(MGM_W133,SD,MGM_W132);
   and MGM_G163(MGM_W134,SE,MGM_W133);
   and MGM_G164(ENABLE_CK_AND_D_AND_SD_AND_SE_AND_SI,SI,MGM_W134);
   not MGM_G165(MGM_W135,CK);
   not MGM_G166(MGM_W136,D);
   and MGM_G167(MGM_W137,MGM_W136,MGM_W135);
   not MGM_G168(MGM_W138,SE);
   and MGM_G169(MGM_W139,MGM_W138,MGM_W137);
   not MGM_G170(MGM_W140,SI);
   and MGM_G171(ENABLE_NOT_CK_AND_NOT_D_AND_NOT_SE_AND_NOT_SI,MGM_W140,MGM_W139);
   not MGM_G172(MGM_W141,CK);
   not MGM_G173(MGM_W142,D);
   and MGM_G174(MGM_W143,MGM_W142,MGM_W141);
   not MGM_G175(MGM_W144,SE);
   and MGM_G176(MGM_W145,MGM_W144,MGM_W143);
   and MGM_G177(ENABLE_NOT_CK_AND_NOT_D_AND_NOT_SE_AND_SI,SI,MGM_W145);
   not MGM_G178(MGM_W146,CK);
   not MGM_G179(MGM_W147,D);
   and MGM_G180(MGM_W148,MGM_W147,MGM_W146);
   and MGM_G181(MGM_W149,SE,MGM_W148);
   not MGM_G182(MGM_W150,SI);
   and MGM_G183(ENABLE_NOT_CK_AND_NOT_D_AND_SE_AND_NOT_SI,MGM_W150,MGM_W149);
   not MGM_G184(MGM_W151,CK);
   not MGM_G185(MGM_W152,D);
   and MGM_G186(MGM_W153,MGM_W152,MGM_W151);
   and MGM_G187(MGM_W154,SE,MGM_W153);
   and MGM_G188(ENABLE_NOT_CK_AND_NOT_D_AND_SE_AND_SI,SI,MGM_W154);
   not MGM_G189(MGM_W155,CK);
   and MGM_G190(MGM_W156,D,MGM_W155);
   not MGM_G191(MGM_W157,SE);
   and MGM_G192(MGM_W158,MGM_W157,MGM_W156);
   not MGM_G193(MGM_W159,SI);
   and MGM_G194(ENABLE_NOT_CK_AND_D_AND_NOT_SE_AND_NOT_SI,MGM_W159,MGM_W158);
   not MGM_G195(MGM_W160,CK);
   and MGM_G196(MGM_W161,D,MGM_W160);
   not MGM_G197(MGM_W162,SE);
   and MGM_G198(MGM_W163,MGM_W162,MGM_W161);
   and MGM_G199(ENABLE_NOT_CK_AND_D_AND_NOT_SE_AND_SI,SI,MGM_W163);
   not MGM_G200(MGM_W164,CK);
   and MGM_G201(MGM_W165,D,MGM_W164);
   and MGM_G202(MGM_W166,SE,MGM_W165);
   not MGM_G203(MGM_W167,SI);
   and MGM_G204(ENABLE_NOT_CK_AND_D_AND_SE_AND_NOT_SI,MGM_W167,MGM_W166);
   not MGM_G205(MGM_W168,CK);
   and MGM_G206(MGM_W169,D,MGM_W168);
   and MGM_G207(MGM_W170,SE,MGM_W169);
   and MGM_G208(ENABLE_NOT_CK_AND_D_AND_SE_AND_SI,SI,MGM_W170);
   not MGM_G209(MGM_W171,D);
   and MGM_G210(MGM_W172,MGM_W171,CK);
   not MGM_G211(MGM_W173,SE);
   and MGM_G212(MGM_W174,MGM_W173,MGM_W172);
   not MGM_G213(MGM_W175,SI);
   and MGM_G214(ENABLE_CK_AND_NOT_D_AND_NOT_SE_AND_NOT_SI,MGM_W175,MGM_W174);
   not MGM_G215(MGM_W176,D);
   and MGM_G216(MGM_W177,MGM_W176,CK);
   not MGM_G217(MGM_W178,SE);
   and MGM_G218(MGM_W179,MGM_W178,MGM_W177);
   and MGM_G219(ENABLE_CK_AND_NOT_D_AND_NOT_SE_AND_SI,SI,MGM_W179);
   not MGM_G220(MGM_W180,D);
   and MGM_G221(MGM_W181,MGM_W180,CK);
   and MGM_G222(MGM_W182,SE,MGM_W181);
   not MGM_G223(MGM_W183,SI);
   and MGM_G224(ENABLE_CK_AND_NOT_D_AND_SE_AND_NOT_SI,MGM_W183,MGM_W182);
   not MGM_G225(MGM_W184,D);
   and MGM_G226(MGM_W185,MGM_W184,CK);
   and MGM_G227(MGM_W186,SE,MGM_W185);
   and MGM_G228(ENABLE_CK_AND_NOT_D_AND_SE_AND_SI,SI,MGM_W186);
   and MGM_G229(MGM_W187,D,CK);
   not MGM_G230(MGM_W188,SE);
   and MGM_G231(MGM_W189,MGM_W188,MGM_W187);
   not MGM_G232(MGM_W190,SI);
   and MGM_G233(ENABLE_CK_AND_D_AND_NOT_SE_AND_NOT_SI,MGM_W190,MGM_W189);
   and MGM_G234(MGM_W191,D,CK);
   not MGM_G235(MGM_W192,SE);
   and MGM_G236(MGM_W193,MGM_W192,MGM_W191);
   and MGM_G237(ENABLE_CK_AND_D_AND_NOT_SE_AND_SI,SI,MGM_W193);
   and MGM_G238(MGM_W194,D,CK);
   and MGM_G239(MGM_W195,SE,MGM_W194);
   not MGM_G240(MGM_W196,SI);
   and MGM_G241(ENABLE_CK_AND_D_AND_SE_AND_NOT_SI,MGM_W196,MGM_W195);
   and MGM_G242(MGM_W197,D,CK);
   and MGM_G243(MGM_W198,SE,MGM_W197);
   and MGM_G244(ENABLE_CK_AND_D_AND_SE_AND_SI,SI,MGM_W198);
   not MGM_G245(MGM_W199,D);
   and MGM_G246(MGM_W200,RD,MGM_W199);
   not MGM_G247(MGM_W201,SE);
   and MGM_G248(MGM_W202,MGM_W201,MGM_W200);
   not MGM_G249(MGM_W203,SI);
   and MGM_G250(ENABLE_NOT_D_AND_RD_AND_NOT_SE_AND_NOT_SI,MGM_W203,MGM_W202);
   not MGM_G251(MGM_W204,D);
   and MGM_G252(MGM_W205,RD,MGM_W204);
   not MGM_G253(MGM_W206,SE);
   and MGM_G254(MGM_W207,MGM_W206,MGM_W205);
   and MGM_G255(ENABLE_NOT_D_AND_RD_AND_NOT_SE_AND_SI,SI,MGM_W207);
   not MGM_G256(MGM_W208,D);
   and MGM_G257(MGM_W209,RD,MGM_W208);
   and MGM_G258(MGM_W210,SE,MGM_W209);
   not MGM_G259(MGM_W211,SI);
   and MGM_G260(ENABLE_NOT_D_AND_RD_AND_SE_AND_NOT_SI,MGM_W211,MGM_W210);
   and MGM_G261(MGM_W212,RD,D);
   and MGM_G262(MGM_W213,SE,MGM_W212);
   not MGM_G263(MGM_W214,SI);
   and MGM_G264(ENABLE_D_AND_RD_AND_SE_AND_NOT_SI,MGM_W214,MGM_W213);
   not MGM_G265(MGM_W215,CK);
   not MGM_G266(MGM_W216,D);
   and MGM_G267(MGM_W217,MGM_W216,MGM_W215);
   and MGM_G268(MGM_W218,RD,MGM_W217);
   not MGM_G269(MGM_W219,SE);
   and MGM_G270(MGM_W220,MGM_W219,MGM_W218);
   not MGM_G271(MGM_W221,SI);
   and MGM_G272(ENABLE_NOT_CK_AND_NOT_D_AND_RD_AND_NOT_SE_AND_NOT_SI,MGM_W221,MGM_W220);
   not MGM_G273(MGM_W222,CK);
   not MGM_G274(MGM_W223,D);
   and MGM_G275(MGM_W224,MGM_W223,MGM_W222);
   and MGM_G276(MGM_W225,RD,MGM_W224);
   not MGM_G277(MGM_W226,SE);
   and MGM_G278(MGM_W227,MGM_W226,MGM_W225);
   and MGM_G279(ENABLE_NOT_CK_AND_NOT_D_AND_RD_AND_NOT_SE_AND_SI,SI,MGM_W227);
   not MGM_G280(MGM_W228,CK);
   not MGM_G281(MGM_W229,D);
   and MGM_G282(MGM_W230,MGM_W229,MGM_W228);
   and MGM_G283(MGM_W231,RD,MGM_W230);
   and MGM_G284(MGM_W232,SE,MGM_W231);
   not MGM_G285(MGM_W233,SI);
   and MGM_G286(ENABLE_NOT_CK_AND_NOT_D_AND_RD_AND_SE_AND_NOT_SI,MGM_W233,MGM_W232);
   not MGM_G287(MGM_W234,CK);
   not MGM_G288(MGM_W235,D);
   and MGM_G289(MGM_W236,MGM_W235,MGM_W234);
   and MGM_G290(MGM_W237,RD,MGM_W236);
   and MGM_G291(MGM_W238,SE,MGM_W237);
   and MGM_G292(ENABLE_NOT_CK_AND_NOT_D_AND_RD_AND_SE_AND_SI,SI,MGM_W238);
   not MGM_G293(MGM_W239,CK);
   and MGM_G294(MGM_W240,D,MGM_W239);
   and MGM_G295(MGM_W241,RD,MGM_W240);
   not MGM_G296(MGM_W242,SE);
   and MGM_G297(MGM_W243,MGM_W242,MGM_W241);
   not MGM_G298(MGM_W244,SI);
   and MGM_G299(ENABLE_NOT_CK_AND_D_AND_RD_AND_NOT_SE_AND_NOT_SI,MGM_W244,MGM_W243);
   not MGM_G300(MGM_W245,CK);
   and MGM_G301(MGM_W246,D,MGM_W245);
   and MGM_G302(MGM_W247,RD,MGM_W246);
   not MGM_G303(MGM_W248,SE);
   and MGM_G304(MGM_W249,MGM_W248,MGM_W247);
   and MGM_G305(ENABLE_NOT_CK_AND_D_AND_RD_AND_NOT_SE_AND_SI,SI,MGM_W249);
   not MGM_G306(MGM_W250,CK);
   and MGM_G307(MGM_W251,D,MGM_W250);
   and MGM_G308(MGM_W252,RD,MGM_W251);
   and MGM_G309(MGM_W253,SE,MGM_W252);
   not MGM_G310(MGM_W254,SI);
   and MGM_G311(ENABLE_NOT_CK_AND_D_AND_RD_AND_SE_AND_NOT_SI,MGM_W254,MGM_W253);
   not MGM_G312(MGM_W255,CK);
   and MGM_G313(MGM_W256,D,MGM_W255);
   and MGM_G314(MGM_W257,RD,MGM_W256);
   and MGM_G315(MGM_W258,SE,MGM_W257);
   and MGM_G316(ENABLE_NOT_CK_AND_D_AND_RD_AND_SE_AND_SI,SI,MGM_W258);
   not MGM_G317(MGM_W259,D);
   and MGM_G318(MGM_W260,MGM_W259,CK);
   and MGM_G319(MGM_W261,RD,MGM_W260);
   not MGM_G320(MGM_W262,SE);
   and MGM_G321(MGM_W263,MGM_W262,MGM_W261);
   not MGM_G322(MGM_W264,SI);
   and MGM_G323(ENABLE_CK_AND_NOT_D_AND_RD_AND_NOT_SE_AND_NOT_SI,MGM_W264,MGM_W263);
   not MGM_G324(MGM_W265,D);
   and MGM_G325(MGM_W266,MGM_W265,CK);
   and MGM_G326(MGM_W267,RD,MGM_W266);
   not MGM_G327(MGM_W268,SE);
   and MGM_G328(MGM_W269,MGM_W268,MGM_W267);
   and MGM_G329(ENABLE_CK_AND_NOT_D_AND_RD_AND_NOT_SE_AND_SI,SI,MGM_W269);
   not MGM_G330(MGM_W270,D);
   and MGM_G331(MGM_W271,MGM_W270,CK);
   and MGM_G332(MGM_W272,RD,MGM_W271);
   and MGM_G333(MGM_W273,SE,MGM_W272);
   not MGM_G334(MGM_W274,SI);
   and MGM_G335(ENABLE_CK_AND_NOT_D_AND_RD_AND_SE_AND_NOT_SI,MGM_W274,MGM_W273);
   not MGM_G336(MGM_W275,D);
   and MGM_G337(MGM_W276,MGM_W275,CK);
   and MGM_G338(MGM_W277,RD,MGM_W276);
   and MGM_G339(MGM_W278,SE,MGM_W277);
   and MGM_G340(ENABLE_CK_AND_NOT_D_AND_RD_AND_SE_AND_SI,SI,MGM_W278);
   and MGM_G341(MGM_W279,D,CK);
   and MGM_G342(MGM_W280,RD,MGM_W279);
   not MGM_G343(MGM_W281,SE);
   and MGM_G344(MGM_W282,MGM_W281,MGM_W280);
   not MGM_G345(MGM_W283,SI);
   and MGM_G346(ENABLE_CK_AND_D_AND_RD_AND_NOT_SE_AND_NOT_SI,MGM_W283,MGM_W282);
   and MGM_G347(MGM_W284,D,CK);
   and MGM_G348(MGM_W285,RD,MGM_W284);
   not MGM_G349(MGM_W286,SE);
   and MGM_G350(MGM_W287,MGM_W286,MGM_W285);
   and MGM_G351(ENABLE_CK_AND_D_AND_RD_AND_NOT_SE_AND_SI,SI,MGM_W287);
   and MGM_G352(MGM_W288,D,CK);
   and MGM_G353(MGM_W289,RD,MGM_W288);
   and MGM_G354(MGM_W290,SE,MGM_W289);
   not MGM_G355(MGM_W291,SI);
   and MGM_G356(ENABLE_CK_AND_D_AND_RD_AND_SE_AND_NOT_SI,MGM_W291,MGM_W290);
   and MGM_G357(MGM_W292,D,CK);
   and MGM_G358(MGM_W293,RD,MGM_W292);
   and MGM_G359(MGM_W294,SE,MGM_W293);
   and MGM_G360(ENABLE_CK_AND_D_AND_RD_AND_SE_AND_SI,SI,MGM_W294);
   not MGM_G361(MGM_W295,D);
   and MGM_G362(MGM_W296,RD,MGM_W295);
   and MGM_G363(MGM_W297,SD,MGM_W296);
   and MGM_G364(ENABLE_NOT_D_AND_RD_AND_SD_AND_SI,SI,MGM_W297);
   and MGM_G365(MGM_W298,RD,D);
   and MGM_G366(MGM_W299,SD,MGM_W298);
   not MGM_G367(MGM_W300,SI);
   and MGM_G368(ENABLE_D_AND_RD_AND_SD_AND_NOT_SI,MGM_W300,MGM_W299);
   not MGM_G369(MGM_W301,D);
   and MGM_G370(MGM_W302,RD,MGM_W301);
   and MGM_G371(MGM_W303,SD,MGM_W302);
   and MGM_G372(ENABLE_NOT_D_AND_RD_AND_SD_AND_SE,SE,MGM_W303);
   and MGM_G373(MGM_W304,RD,D);
   and MGM_G374(MGM_W305,SD,MGM_W304);
   and MGM_G375(ENABLE_D_AND_RD_AND_SD_AND_SE,SE,MGM_W305);
   // spec_gates_end
   // specify_block_begin
   specify

      if(D===1'b0 && SI===1'b1)
      // seq arc CK --> Q
      (posedge CK => (Q : SE))  = (1.0,1.0);
      
      if(SE===1'b0 && SI===1'b0)
      // seq arc CK --> Q
      (posedge CK => (Q : D))  = (1.0,1.0);
      
      if(D===1'b1 && SE===1'b0 && SI===1'b1 || D===1'b0 && SE===1'b1 && SI===1'b0)
      // seq arc CK --> Q
      (posedge CK => (Q : D))  = (1.0,1.0);
      
      if(D===1'b1 && SE===1'b1)
      // seq arc CK --> Q
      (posedge CK => (Q : SI))  = (1.0,1.0);
      
      ifnone
      // seq arc CK --> Q
      (posedge CK => (Q : D))  = (1.0,1.0);
      
      if(CK===1'b0 && D===1'b0 && SD===1'b0 && SE===1'b0 && SI===1'b0)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b0 && D===1'b0 && SD===1'b0 && SE===1'b0 && SI===1'b1)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b0 && D===1'b0 && SD===1'b0 && SE===1'b1 && SI===1'b0)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b0 && D===1'b0 && SD===1'b0 && SE===1'b1 && SI===1'b1)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b0 && D===1'b0 && SD===1'b1 && SE===1'b0 && SI===1'b0)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b0 && D===1'b0 && SD===1'b1 && SE===1'b0 && SI===1'b1)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b0 && D===1'b0 && SD===1'b1 && SE===1'b1 && SI===1'b0)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b0 && D===1'b0 && SD===1'b1 && SE===1'b1 && SI===1'b1)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b0 && D===1'b1 && SD===1'b0 && SE===1'b0 && SI===1'b0)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b0 && D===1'b1 && SD===1'b0 && SE===1'b0 && SI===1'b1)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b0 && D===1'b1 && SD===1'b0 && SE===1'b1 && SI===1'b0)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b0 && D===1'b1 && SD===1'b0 && SE===1'b1 && SI===1'b1)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b0 && D===1'b1 && SD===1'b1 && SE===1'b0 && SI===1'b0)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b0 && D===1'b1 && SD===1'b1 && SE===1'b0 && SI===1'b1)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b0 && D===1'b1 && SD===1'b1 && SE===1'b1 && SI===1'b0)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b0 && D===1'b1 && SD===1'b1 && SE===1'b1 && SI===1'b1)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b1 && D===1'b0 && SD===1'b0 && SE===1'b0 && SI===1'b0)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b1 && D===1'b0 && SD===1'b0 && SE===1'b0 && SI===1'b1)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b1 && D===1'b0 && SD===1'b0 && SE===1'b1 && SI===1'b0)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b1 && D===1'b0 && SD===1'b0 && SE===1'b1 && SI===1'b1)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b1 && D===1'b0 && SD===1'b1 && SE===1'b0 && SI===1'b0)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b1 && D===1'b0 && SD===1'b1 && SE===1'b0 && SI===1'b1)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b1 && D===1'b0 && SD===1'b1 && SE===1'b1 && SI===1'b0)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b1 && D===1'b0 && SD===1'b1 && SE===1'b1 && SI===1'b1)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b1 && D===1'b1 && SD===1'b0 && SE===1'b0 && SI===1'b0)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b1 && D===1'b1 && SD===1'b0 && SE===1'b0 && SI===1'b1)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b1 && D===1'b1 && SD===1'b0 && SE===1'b1 && SI===1'b0)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b1 && D===1'b1 && SD===1'b0 && SE===1'b1 && SI===1'b1)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b1 && D===1'b1 && SD===1'b1 && SE===1'b0 && SI===1'b0)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b1 && D===1'b1 && SD===1'b1 && SE===1'b0 && SI===1'b1)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b1 && D===1'b1 && SD===1'b1 && SE===1'b1 && SI===1'b0)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b1 && D===1'b1 && SD===1'b1 && SE===1'b1 && SI===1'b1)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      ifnone
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b0 && D===1'b0 && SE===1'b0 && SI===1'b0)
      // seq arc SD --> Q
      (SD => Q)  = (1.0,1.0);
      
      if(CK===1'b0 && D===1'b0 && SE===1'b0 && SI===1'b1)
      // seq arc SD --> Q
      (SD => Q)  = (1.0,1.0);
      
      if(CK===1'b0 && D===1'b0 && SE===1'b1 && SI===1'b0)
      // seq arc SD --> Q
      (SD => Q)  = (1.0,1.0);
      
      if(CK===1'b0 && D===1'b0 && SE===1'b1 && SI===1'b1)
      // seq arc SD --> Q
      (SD => Q)  = (1.0,1.0);
      
      if(CK===1'b0 && D===1'b1 && SE===1'b0 && SI===1'b0)
      // seq arc SD --> Q
      (SD => Q)  = (1.0,1.0);
      
      if(CK===1'b0 && D===1'b1 && SE===1'b0 && SI===1'b1)
      // seq arc SD --> Q
      (SD => Q)  = (1.0,1.0);
      
      if(CK===1'b0 && D===1'b1 && SE===1'b1 && SI===1'b0)
      // seq arc SD --> Q
      (SD => Q)  = (1.0,1.0);
      
      if(CK===1'b0 && D===1'b1 && SE===1'b1 && SI===1'b1)
      // seq arc SD --> Q
      (SD => Q)  = (1.0,1.0);
      
      if(CK===1'b1 && D===1'b0 && SE===1'b0 && SI===1'b0)
      // seq arc SD --> Q
      (SD => Q)  = (1.0,1.0);
      
      if(CK===1'b1 && D===1'b0 && SE===1'b0 && SI===1'b1)
      // seq arc SD --> Q
      (SD => Q)  = (1.0,1.0);
      
      if(CK===1'b1 && D===1'b0 && SE===1'b1 && SI===1'b0)
      // seq arc SD --> Q
      (SD => Q)  = (1.0,1.0);
      
      if(CK===1'b1 && D===1'b0 && SE===1'b1 && SI===1'b1)
      // seq arc SD --> Q
      (SD => Q)  = (1.0,1.0);
      
      if(CK===1'b1 && D===1'b1 && SE===1'b0 && SI===1'b0)
      // seq arc SD --> Q
      (SD => Q)  = (1.0,1.0);
      
      if(CK===1'b1 && D===1'b1 && SE===1'b0 && SI===1'b1)
      // seq arc SD --> Q
      (SD => Q)  = (1.0,1.0);
      
      if(CK===1'b1 && D===1'b1 && SE===1'b1 && SI===1'b0)
      // seq arc SD --> Q
      (SD => Q)  = (1.0,1.0);
      
      if(CK===1'b1 && D===1'b1 && SE===1'b1 && SI===1'b1)
      // seq arc SD --> Q
      (SD => Q)  = (1.0,1.0);
      
      ifnone
      // seq arc SD --> Q
      (SD => Q)  = (1.0,1.0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_RD_AND_SD_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_RD_AND_SD_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_RD_AND_SD_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_RD_AND_SD_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_RD_AND_SD_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_RD_AND_SD_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_RD_AND_SD_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_RD_AND_SD_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_RD_AND_SD_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_RD_AND_SD_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_RD_AND_SD_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_RD_AND_SD_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_RD_AND_SD_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_RD_AND_SD_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_RD_AND_SD_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_RD_AND_SD_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      // hold D-HL CK-LH
      $hold(posedge CK &&& (ENABLE_RD_AND_SD_AND_NOT_SE_AND_NOT_SI === 1'b1),
      negedge D &&& (ENABLE_RD_AND_SD_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold D-LH CK-LH
      $hold(posedge CK &&& (ENABLE_RD_AND_SD_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge D &&& (ENABLE_RD_AND_SD_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup D-HL CK-LH
      $setup(negedge D &&& (ENABLE_RD_AND_SD_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_RD_AND_SD_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup D-LH CK-LH
      $setup(posedge D &&& (ENABLE_RD_AND_SD_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_RD_AND_SD_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold D-HL CK-LH
      $hold(posedge CK &&& (ENABLE_RD_AND_SD_AND_NOT_SE_AND_SI === 1'b1),
      negedge D &&& (ENABLE_RD_AND_SD_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // hold D-LH CK-LH
      $hold(posedge CK &&& (ENABLE_RD_AND_SD_AND_NOT_SE_AND_SI === 1'b1),
      posedge D &&& (ENABLE_RD_AND_SD_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // setup D-HL CK-LH
      $setup(negedge D &&& (ENABLE_RD_AND_SD_AND_NOT_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_RD_AND_SD_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // setup D-LH CK-LH
      $setup(posedge D &&& (ENABLE_RD_AND_SD_AND_NOT_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_RD_AND_SD_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // recovery RD-LH CK-LH
      $recovery(posedge RD &&& (ENABLE_NOT_D_AND_SD_AND_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_SD_AND_SE_AND_SI === 1'b1),1.0);
      
      // removal RD-LH CK-LH
      $removal(posedge RD &&& (ENABLE_NOT_D_AND_SD_AND_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_SD_AND_SE_AND_SI === 1'b1),1.0);
      
      // recovery RD-LH CK-LH
      $recovery(posedge RD &&& (ENABLE_D_AND_SD_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_D_AND_SD_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // removal RD-LH CK-LH
      $removal(posedge RD &&& (ENABLE_D_AND_SD_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_D_AND_SD_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // recovery RD-LH CK-LH
      $recovery(posedge RD &&& (ENABLE_D_AND_SD_AND_NOT_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_D_AND_SD_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // removal RD-LH CK-LH
      $removal(posedge RD &&& (ENABLE_D_AND_SD_AND_NOT_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_D_AND_SD_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // recovery RD-LH CK-LH
      $recovery(posedge RD &&& (ENABLE_D_AND_SD_AND_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_D_AND_SD_AND_SE_AND_SI === 1'b1),1.0);
      
      // removal RD-LH CK-LH
      $removal(posedge RD &&& (ENABLE_D_AND_SD_AND_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_D_AND_SD_AND_SE_AND_SI === 1'b1),1.0);
      
      $width(negedge RD &&& (ENABLE_NOT_CK_AND_NOT_D_AND_SD_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge RD &&& (ENABLE_NOT_CK_AND_NOT_D_AND_SD_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge RD &&& (ENABLE_NOT_CK_AND_NOT_D_AND_SD_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge RD &&& (ENABLE_NOT_CK_AND_NOT_D_AND_SD_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge RD &&& (ENABLE_NOT_CK_AND_D_AND_SD_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge RD &&& (ENABLE_NOT_CK_AND_D_AND_SD_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge RD &&& (ENABLE_NOT_CK_AND_D_AND_SD_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge RD &&& (ENABLE_NOT_CK_AND_D_AND_SD_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge RD &&& (ENABLE_CK_AND_NOT_D_AND_SD_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge RD &&& (ENABLE_CK_AND_NOT_D_AND_SD_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge RD &&& (ENABLE_CK_AND_NOT_D_AND_SD_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge RD &&& (ENABLE_CK_AND_NOT_D_AND_SD_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge RD &&& (ENABLE_CK_AND_D_AND_SD_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge RD &&& (ENABLE_CK_AND_D_AND_SD_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge RD &&& (ENABLE_CK_AND_D_AND_SD_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge RD &&& (ENABLE_CK_AND_D_AND_SD_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      // hold RD-LH SD-LH
      $hold(posedge SD &&& (ENABLE_NOT_CK_AND_NOT_D_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge RD &&& (ENABLE_NOT_CK_AND_NOT_D_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup RD-LH SD-LH
      $setup(posedge RD &&& (ENABLE_NOT_CK_AND_NOT_D_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge SD &&& (ENABLE_NOT_CK_AND_NOT_D_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold RD-LH SD-LH
      $hold(posedge SD &&& (ENABLE_NOT_CK_AND_NOT_D_AND_NOT_SE_AND_SI === 1'b1),
      posedge RD &&& (ENABLE_NOT_CK_AND_NOT_D_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // setup RD-LH SD-LH
      $setup(posedge RD &&& (ENABLE_NOT_CK_AND_NOT_D_AND_NOT_SE_AND_SI === 1'b1),
      posedge SD &&& (ENABLE_NOT_CK_AND_NOT_D_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // hold RD-LH SD-LH
      $hold(posedge SD &&& (ENABLE_NOT_CK_AND_NOT_D_AND_SE_AND_NOT_SI === 1'b1),
      posedge RD &&& (ENABLE_NOT_CK_AND_NOT_D_AND_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup RD-LH SD-LH
      $setup(posedge RD &&& (ENABLE_NOT_CK_AND_NOT_D_AND_SE_AND_NOT_SI === 1'b1),
      posedge SD &&& (ENABLE_NOT_CK_AND_NOT_D_AND_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold RD-LH SD-LH
      $hold(posedge SD &&& (ENABLE_NOT_CK_AND_NOT_D_AND_SE_AND_SI === 1'b1),
      posedge RD &&& (ENABLE_NOT_CK_AND_NOT_D_AND_SE_AND_SI === 1'b1),1.0);
      
      // setup RD-LH SD-LH
      $setup(posedge RD &&& (ENABLE_NOT_CK_AND_NOT_D_AND_SE_AND_SI === 1'b1),
      posedge SD &&& (ENABLE_NOT_CK_AND_NOT_D_AND_SE_AND_SI === 1'b1),1.0);
      
      // hold RD-LH SD-LH
      $hold(posedge SD &&& (ENABLE_NOT_CK_AND_D_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge RD &&& (ENABLE_NOT_CK_AND_D_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup RD-LH SD-LH
      $setup(posedge RD &&& (ENABLE_NOT_CK_AND_D_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge SD &&& (ENABLE_NOT_CK_AND_D_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold RD-LH SD-LH
      $hold(posedge SD &&& (ENABLE_NOT_CK_AND_D_AND_NOT_SE_AND_SI === 1'b1),
      posedge RD &&& (ENABLE_NOT_CK_AND_D_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // setup RD-LH SD-LH
      $setup(posedge RD &&& (ENABLE_NOT_CK_AND_D_AND_NOT_SE_AND_SI === 1'b1),
      posedge SD &&& (ENABLE_NOT_CK_AND_D_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // hold RD-LH SD-LH
      $hold(posedge SD &&& (ENABLE_NOT_CK_AND_D_AND_SE_AND_NOT_SI === 1'b1),
      posedge RD &&& (ENABLE_NOT_CK_AND_D_AND_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup RD-LH SD-LH
      $setup(posedge RD &&& (ENABLE_NOT_CK_AND_D_AND_SE_AND_NOT_SI === 1'b1),
      posedge SD &&& (ENABLE_NOT_CK_AND_D_AND_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold RD-LH SD-LH
      $hold(posedge SD &&& (ENABLE_NOT_CK_AND_D_AND_SE_AND_SI === 1'b1),
      posedge RD &&& (ENABLE_NOT_CK_AND_D_AND_SE_AND_SI === 1'b1),1.0);
      
      // setup RD-LH SD-LH
      $setup(posedge RD &&& (ENABLE_NOT_CK_AND_D_AND_SE_AND_SI === 1'b1),
      posedge SD &&& (ENABLE_NOT_CK_AND_D_AND_SE_AND_SI === 1'b1),1.0);
      
      // hold RD-LH SD-LH
      $hold(posedge SD &&& (ENABLE_CK_AND_NOT_D_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge RD &&& (ENABLE_CK_AND_NOT_D_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup RD-LH SD-LH
      $setup(posedge RD &&& (ENABLE_CK_AND_NOT_D_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge SD &&& (ENABLE_CK_AND_NOT_D_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold RD-LH SD-LH
      $hold(posedge SD &&& (ENABLE_CK_AND_NOT_D_AND_NOT_SE_AND_SI === 1'b1),
      posedge RD &&& (ENABLE_CK_AND_NOT_D_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // setup RD-LH SD-LH
      $setup(posedge RD &&& (ENABLE_CK_AND_NOT_D_AND_NOT_SE_AND_SI === 1'b1),
      posedge SD &&& (ENABLE_CK_AND_NOT_D_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // hold RD-LH SD-LH
      $hold(posedge SD &&& (ENABLE_CK_AND_NOT_D_AND_SE_AND_NOT_SI === 1'b1),
      posedge RD &&& (ENABLE_CK_AND_NOT_D_AND_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup RD-LH SD-LH
      $setup(posedge RD &&& (ENABLE_CK_AND_NOT_D_AND_SE_AND_NOT_SI === 1'b1),
      posedge SD &&& (ENABLE_CK_AND_NOT_D_AND_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold RD-LH SD-LH
      $hold(posedge SD &&& (ENABLE_CK_AND_NOT_D_AND_SE_AND_SI === 1'b1),
      posedge RD &&& (ENABLE_CK_AND_NOT_D_AND_SE_AND_SI === 1'b1),1.0);
      
      // setup RD-LH SD-LH
      $setup(posedge RD &&& (ENABLE_CK_AND_NOT_D_AND_SE_AND_SI === 1'b1),
      posedge SD &&& (ENABLE_CK_AND_NOT_D_AND_SE_AND_SI === 1'b1),1.0);
      
      // hold RD-LH SD-LH
      $hold(posedge SD &&& (ENABLE_CK_AND_D_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge RD &&& (ENABLE_CK_AND_D_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup RD-LH SD-LH
      $setup(posedge RD &&& (ENABLE_CK_AND_D_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge SD &&& (ENABLE_CK_AND_D_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold RD-LH SD-LH
      $hold(posedge SD &&& (ENABLE_CK_AND_D_AND_NOT_SE_AND_SI === 1'b1),
      posedge RD &&& (ENABLE_CK_AND_D_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // setup RD-LH SD-LH
      $setup(posedge RD &&& (ENABLE_CK_AND_D_AND_NOT_SE_AND_SI === 1'b1),
      posedge SD &&& (ENABLE_CK_AND_D_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // hold RD-LH SD-LH
      $hold(posedge SD &&& (ENABLE_CK_AND_D_AND_SE_AND_NOT_SI === 1'b1),
      posedge RD &&& (ENABLE_CK_AND_D_AND_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup RD-LH SD-LH
      $setup(posedge RD &&& (ENABLE_CK_AND_D_AND_SE_AND_NOT_SI === 1'b1),
      posedge SD &&& (ENABLE_CK_AND_D_AND_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold RD-LH SD-LH
      $hold(posedge SD &&& (ENABLE_CK_AND_D_AND_SE_AND_SI === 1'b1),
      posedge RD &&& (ENABLE_CK_AND_D_AND_SE_AND_SI === 1'b1),1.0);
      
      // setup RD-LH SD-LH
      $setup(posedge RD &&& (ENABLE_CK_AND_D_AND_SE_AND_SI === 1'b1),
      posedge SD &&& (ENABLE_CK_AND_D_AND_SE_AND_SI === 1'b1),1.0);
      
      // recovery SD-LH CK-LH
      $recovery(posedge SD &&& (ENABLE_NOT_D_AND_RD_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_RD_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // removal SD-LH CK-LH
      $removal(posedge SD &&& (ENABLE_NOT_D_AND_RD_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_RD_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // recovery SD-LH CK-LH
      $recovery(posedge SD &&& (ENABLE_NOT_D_AND_RD_AND_NOT_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_RD_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // removal SD-LH CK-LH
      $removal(posedge SD &&& (ENABLE_NOT_D_AND_RD_AND_NOT_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_RD_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // recovery SD-LH CK-LH
      $recovery(posedge SD &&& (ENABLE_NOT_D_AND_RD_AND_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_RD_AND_SE_AND_NOT_SI === 1'b1),1.0);
      
      // removal SD-LH CK-LH
      $removal(posedge SD &&& (ENABLE_NOT_D_AND_RD_AND_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_RD_AND_SE_AND_NOT_SI === 1'b1),1.0);
      
      // recovery SD-LH CK-LH
      $recovery(posedge SD &&& (ENABLE_D_AND_RD_AND_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_D_AND_RD_AND_SE_AND_NOT_SI === 1'b1),1.0);
      
      // removal SD-LH CK-LH
      $removal(posedge SD &&& (ENABLE_D_AND_RD_AND_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_D_AND_RD_AND_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold SD-LH RD-LH
      $hold(posedge RD &&& (ENABLE_NOT_CK_AND_NOT_D_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge SD &&& (ENABLE_NOT_CK_AND_NOT_D_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup SD-LH RD-LH
      $setup(posedge SD &&& (ENABLE_NOT_CK_AND_NOT_D_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge RD &&& (ENABLE_NOT_CK_AND_NOT_D_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold SD-LH RD-LH
      $hold(posedge RD &&& (ENABLE_NOT_CK_AND_NOT_D_AND_NOT_SE_AND_SI === 1'b1),
      posedge SD &&& (ENABLE_NOT_CK_AND_NOT_D_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // setup SD-LH RD-LH
      $setup(posedge SD &&& (ENABLE_NOT_CK_AND_NOT_D_AND_NOT_SE_AND_SI === 1'b1),
      posedge RD &&& (ENABLE_NOT_CK_AND_NOT_D_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // hold SD-LH RD-LH
      $hold(posedge RD &&& (ENABLE_NOT_CK_AND_NOT_D_AND_SE_AND_NOT_SI === 1'b1),
      posedge SD &&& (ENABLE_NOT_CK_AND_NOT_D_AND_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup SD-LH RD-LH
      $setup(posedge SD &&& (ENABLE_NOT_CK_AND_NOT_D_AND_SE_AND_NOT_SI === 1'b1),
      posedge RD &&& (ENABLE_NOT_CK_AND_NOT_D_AND_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold SD-LH RD-LH
      $hold(posedge RD &&& (ENABLE_NOT_CK_AND_NOT_D_AND_SE_AND_SI === 1'b1),
      posedge SD &&& (ENABLE_NOT_CK_AND_NOT_D_AND_SE_AND_SI === 1'b1),1.0);
      
      // setup SD-LH RD-LH
      $setup(posedge SD &&& (ENABLE_NOT_CK_AND_NOT_D_AND_SE_AND_SI === 1'b1),
      posedge RD &&& (ENABLE_NOT_CK_AND_NOT_D_AND_SE_AND_SI === 1'b1),1.0);
      
      // hold SD-LH RD-LH
      $hold(posedge RD &&& (ENABLE_NOT_CK_AND_D_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge SD &&& (ENABLE_NOT_CK_AND_D_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup SD-LH RD-LH
      $setup(posedge SD &&& (ENABLE_NOT_CK_AND_D_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge RD &&& (ENABLE_NOT_CK_AND_D_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold SD-LH RD-LH
      $hold(posedge RD &&& (ENABLE_NOT_CK_AND_D_AND_NOT_SE_AND_SI === 1'b1),
      posedge SD &&& (ENABLE_NOT_CK_AND_D_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // setup SD-LH RD-LH
      $setup(posedge SD &&& (ENABLE_NOT_CK_AND_D_AND_NOT_SE_AND_SI === 1'b1),
      posedge RD &&& (ENABLE_NOT_CK_AND_D_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // hold SD-LH RD-LH
      $hold(posedge RD &&& (ENABLE_NOT_CK_AND_D_AND_SE_AND_NOT_SI === 1'b1),
      posedge SD &&& (ENABLE_NOT_CK_AND_D_AND_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup SD-LH RD-LH
      $setup(posedge SD &&& (ENABLE_NOT_CK_AND_D_AND_SE_AND_NOT_SI === 1'b1),
      posedge RD &&& (ENABLE_NOT_CK_AND_D_AND_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold SD-LH RD-LH
      $hold(posedge RD &&& (ENABLE_NOT_CK_AND_D_AND_SE_AND_SI === 1'b1),
      posedge SD &&& (ENABLE_NOT_CK_AND_D_AND_SE_AND_SI === 1'b1),1.0);
      
      // setup SD-LH RD-LH
      $setup(posedge SD &&& (ENABLE_NOT_CK_AND_D_AND_SE_AND_SI === 1'b1),
      posedge RD &&& (ENABLE_NOT_CK_AND_D_AND_SE_AND_SI === 1'b1),1.0);
      
      // hold SD-LH RD-LH
      $hold(posedge RD &&& (ENABLE_CK_AND_NOT_D_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge SD &&& (ENABLE_CK_AND_NOT_D_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup SD-LH RD-LH
      $setup(posedge SD &&& (ENABLE_CK_AND_NOT_D_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge RD &&& (ENABLE_CK_AND_NOT_D_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold SD-LH RD-LH
      $hold(posedge RD &&& (ENABLE_CK_AND_NOT_D_AND_NOT_SE_AND_SI === 1'b1),
      posedge SD &&& (ENABLE_CK_AND_NOT_D_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // setup SD-LH RD-LH
      $setup(posedge SD &&& (ENABLE_CK_AND_NOT_D_AND_NOT_SE_AND_SI === 1'b1),
      posedge RD &&& (ENABLE_CK_AND_NOT_D_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // hold SD-LH RD-LH
      $hold(posedge RD &&& (ENABLE_CK_AND_NOT_D_AND_SE_AND_NOT_SI === 1'b1),
      posedge SD &&& (ENABLE_CK_AND_NOT_D_AND_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup SD-LH RD-LH
      $setup(posedge SD &&& (ENABLE_CK_AND_NOT_D_AND_SE_AND_NOT_SI === 1'b1),
      posedge RD &&& (ENABLE_CK_AND_NOT_D_AND_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold SD-LH RD-LH
      $hold(posedge RD &&& (ENABLE_CK_AND_NOT_D_AND_SE_AND_SI === 1'b1),
      posedge SD &&& (ENABLE_CK_AND_NOT_D_AND_SE_AND_SI === 1'b1),1.0);
      
      // setup SD-LH RD-LH
      $setup(posedge SD &&& (ENABLE_CK_AND_NOT_D_AND_SE_AND_SI === 1'b1),
      posedge RD &&& (ENABLE_CK_AND_NOT_D_AND_SE_AND_SI === 1'b1),1.0);
      
      // hold SD-LH RD-LH
      $hold(posedge RD &&& (ENABLE_CK_AND_D_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge SD &&& (ENABLE_CK_AND_D_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup SD-LH RD-LH
      $setup(posedge SD &&& (ENABLE_CK_AND_D_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge RD &&& (ENABLE_CK_AND_D_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold SD-LH RD-LH
      $hold(posedge RD &&& (ENABLE_CK_AND_D_AND_NOT_SE_AND_SI === 1'b1),
      posedge SD &&& (ENABLE_CK_AND_D_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // setup SD-LH RD-LH
      $setup(posedge SD &&& (ENABLE_CK_AND_D_AND_NOT_SE_AND_SI === 1'b1),
      posedge RD &&& (ENABLE_CK_AND_D_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // hold SD-LH RD-LH
      $hold(posedge RD &&& (ENABLE_CK_AND_D_AND_SE_AND_NOT_SI === 1'b1),
      posedge SD &&& (ENABLE_CK_AND_D_AND_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup SD-LH RD-LH
      $setup(posedge SD &&& (ENABLE_CK_AND_D_AND_SE_AND_NOT_SI === 1'b1),
      posedge RD &&& (ENABLE_CK_AND_D_AND_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold SD-LH RD-LH
      $hold(posedge RD &&& (ENABLE_CK_AND_D_AND_SE_AND_SI === 1'b1),
      posedge SD &&& (ENABLE_CK_AND_D_AND_SE_AND_SI === 1'b1),1.0);
      
      // setup SD-LH RD-LH
      $setup(posedge SD &&& (ENABLE_CK_AND_D_AND_SE_AND_SI === 1'b1),
      posedge RD &&& (ENABLE_CK_AND_D_AND_SE_AND_SI === 1'b1),1.0);
      
      $width(negedge SD &&& (ENABLE_NOT_CK_AND_NOT_D_AND_RD_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge SD &&& (ENABLE_NOT_CK_AND_NOT_D_AND_RD_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge SD &&& (ENABLE_NOT_CK_AND_NOT_D_AND_RD_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge SD &&& (ENABLE_NOT_CK_AND_NOT_D_AND_RD_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge SD &&& (ENABLE_NOT_CK_AND_D_AND_RD_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge SD &&& (ENABLE_NOT_CK_AND_D_AND_RD_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge SD &&& (ENABLE_NOT_CK_AND_D_AND_RD_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge SD &&& (ENABLE_NOT_CK_AND_D_AND_RD_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge SD &&& (ENABLE_CK_AND_NOT_D_AND_RD_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge SD &&& (ENABLE_CK_AND_NOT_D_AND_RD_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge SD &&& (ENABLE_CK_AND_NOT_D_AND_RD_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge SD &&& (ENABLE_CK_AND_NOT_D_AND_RD_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge SD &&& (ENABLE_CK_AND_D_AND_RD_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge SD &&& (ENABLE_CK_AND_D_AND_RD_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge SD &&& (ENABLE_CK_AND_D_AND_RD_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge SD &&& (ENABLE_CK_AND_D_AND_RD_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      // hold SE-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D_AND_RD_AND_SD_AND_SI === 1'b1),
      negedge SE &&& (ENABLE_NOT_D_AND_RD_AND_SD_AND_SI === 1'b1),1.0);
      
      // hold SE-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D_AND_RD_AND_SD_AND_SI === 1'b1),
      posedge SE &&& (ENABLE_NOT_D_AND_RD_AND_SD_AND_SI === 1'b1),1.0);
      
      // setup SE-HL CK-LH
      $setup(negedge SE &&& (ENABLE_NOT_D_AND_RD_AND_SD_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_RD_AND_SD_AND_SI === 1'b1),1.0);
      
      // setup SE-LH CK-LH
      $setup(posedge SE &&& (ENABLE_NOT_D_AND_RD_AND_SD_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_RD_AND_SD_AND_SI === 1'b1),1.0);
      
      // hold SE-HL CK-LH
      $hold(posedge CK &&& (ENABLE_D_AND_RD_AND_SD_AND_NOT_SI === 1'b1),
      negedge SE &&& (ENABLE_D_AND_RD_AND_SD_AND_NOT_SI === 1'b1),1.0);
      
      // hold SE-LH CK-LH
      $hold(posedge CK &&& (ENABLE_D_AND_RD_AND_SD_AND_NOT_SI === 1'b1),
      posedge SE &&& (ENABLE_D_AND_RD_AND_SD_AND_NOT_SI === 1'b1),1.0);
      
      // setup SE-HL CK-LH
      $setup(negedge SE &&& (ENABLE_D_AND_RD_AND_SD_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_D_AND_RD_AND_SD_AND_NOT_SI === 1'b1),1.0);
      
      // setup SE-LH CK-LH
      $setup(posedge SE &&& (ENABLE_D_AND_RD_AND_SD_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_D_AND_RD_AND_SD_AND_NOT_SI === 1'b1),1.0);
      
      // hold SI-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D_AND_RD_AND_SD_AND_SE === 1'b1),
      negedge SI &&& (ENABLE_NOT_D_AND_RD_AND_SD_AND_SE === 1'b1),1.0);
      
      // hold SI-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D_AND_RD_AND_SD_AND_SE === 1'b1),
      posedge SI &&& (ENABLE_NOT_D_AND_RD_AND_SD_AND_SE === 1'b1),1.0);
      
      // setup SI-HL CK-LH
      $setup(negedge SI &&& (ENABLE_NOT_D_AND_RD_AND_SD_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_RD_AND_SD_AND_SE === 1'b1),1.0);
      
      // setup SI-LH CK-LH
      $setup(posedge SI &&& (ENABLE_NOT_D_AND_RD_AND_SD_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_RD_AND_SD_AND_SE === 1'b1),1.0);
      
      // hold SI-HL CK-LH
      $hold(posedge CK &&& (ENABLE_D_AND_RD_AND_SD_AND_SE === 1'b1),
      negedge SI &&& (ENABLE_D_AND_RD_AND_SD_AND_SE === 1'b1),1.0);
      
      // hold SI-LH CK-LH
      $hold(posedge CK &&& (ENABLE_D_AND_RD_AND_SD_AND_SE === 1'b1),
      posedge SI &&& (ENABLE_D_AND_RD_AND_SD_AND_SE === 1'b1),1.0);
      
      // setup SI-HL CK-LH
      $setup(negedge SI &&& (ENABLE_D_AND_RD_AND_SD_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_D_AND_RD_AND_SD_AND_SE === 1'b1),1.0);
      
      // setup SI-LH CK-LH
      $setup(posedge SI &&& (ENABLE_D_AND_RD_AND_SD_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_D_AND_RD_AND_SD_AND_SE === 1'b1),1.0);
      
      // mpw CK_lh 
      $width(posedge CK,1.0,0);
      
      // mpw CK_hl 
      $width(negedge CK,1.0,0);
      
      // mpw RD_hl 
      $width(negedge RD,1.0,0);
      
      // mpw SD_hl 
      $width(negedge SD,1.0,0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_FSDPSBQ_V2LP_0P5( Q, CK, D, SI, SE, SD );
input CK, D, SD, SE, SI;
output Q;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_FSDPSBQ_V2LP_0P5_func SAEDRVT14_FSDPSBQ_V2LP_0P5_behav_inst(.Q(Q),.CK(CK),.D(D),.SI(SI),.SE(SE),.SD(SD));
`else
   SAEDRVT14_FSDPSBQ_V2LP_0P5_func SAEDRVT14_FSDPSBQ_V2LP_0P5_inst(.Q(Q),.CK(CK),.D(D),.SI(SI),.SE(SE),.SD(SD));
   // spec_gates_begin
   not MGM_G0(MGM_W0,D);
   and MGM_G1(MGM_W1,SD,MGM_W0);
   not MGM_G2(MGM_W2,SE);
   and MGM_G3(MGM_W3,MGM_W2,MGM_W1);
   not MGM_G4(MGM_W4,SI);
   and MGM_G5(ENABLE_NOT_D_AND_SD_AND_NOT_SE_AND_NOT_SI,MGM_W4,MGM_W3);
   not MGM_G6(MGM_W5,D);
   and MGM_G7(MGM_W6,SD,MGM_W5);
   not MGM_G8(MGM_W7,SE);
   and MGM_G9(MGM_W8,MGM_W7,MGM_W6);
   and MGM_G10(ENABLE_NOT_D_AND_SD_AND_NOT_SE_AND_SI,SI,MGM_W8);
   not MGM_G11(MGM_W9,D);
   and MGM_G12(MGM_W10,SD,MGM_W9);
   and MGM_G13(MGM_W11,SE,MGM_W10);
   not MGM_G14(MGM_W12,SI);
   and MGM_G15(ENABLE_NOT_D_AND_SD_AND_SE_AND_NOT_SI,MGM_W12,MGM_W11);
   not MGM_G16(MGM_W13,D);
   and MGM_G17(MGM_W14,SD,MGM_W13);
   and MGM_G18(MGM_W15,SE,MGM_W14);
   and MGM_G19(ENABLE_NOT_D_AND_SD_AND_SE_AND_SI,SI,MGM_W15);
   and MGM_G20(MGM_W16,SD,D);
   not MGM_G21(MGM_W17,SE);
   and MGM_G22(MGM_W18,MGM_W17,MGM_W16);
   not MGM_G23(MGM_W19,SI);
   and MGM_G24(ENABLE_D_AND_SD_AND_NOT_SE_AND_NOT_SI,MGM_W19,MGM_W18);
   and MGM_G25(MGM_W20,SD,D);
   not MGM_G26(MGM_W21,SE);
   and MGM_G27(MGM_W22,MGM_W21,MGM_W20);
   and MGM_G28(ENABLE_D_AND_SD_AND_NOT_SE_AND_SI,SI,MGM_W22);
   and MGM_G29(MGM_W23,SD,D);
   and MGM_G30(MGM_W24,SE,MGM_W23);
   not MGM_G31(MGM_W25,SI);
   and MGM_G32(ENABLE_D_AND_SD_AND_SE_AND_NOT_SI,MGM_W25,MGM_W24);
   and MGM_G33(MGM_W26,SD,D);
   and MGM_G34(MGM_W27,SE,MGM_W26);
   and MGM_G35(ENABLE_D_AND_SD_AND_SE_AND_SI,SI,MGM_W27);
   not MGM_G36(MGM_W28,SE);
   and MGM_G37(MGM_W29,MGM_W28,SD);
   not MGM_G38(MGM_W30,SI);
   and MGM_G39(ENABLE_SD_AND_NOT_SE_AND_NOT_SI,MGM_W30,MGM_W29);
   not MGM_G40(MGM_W31,SE);
   and MGM_G41(MGM_W32,MGM_W31,SD);
   and MGM_G42(ENABLE_SD_AND_NOT_SE_AND_SI,SI,MGM_W32);
   not MGM_G43(MGM_W33,D);
   not MGM_G44(MGM_W34,SE);
   and MGM_G45(MGM_W35,MGM_W34,MGM_W33);
   not MGM_G46(MGM_W36,SI);
   and MGM_G47(ENABLE_NOT_D_AND_NOT_SE_AND_NOT_SI,MGM_W36,MGM_W35);
   not MGM_G48(MGM_W37,D);
   not MGM_G49(MGM_W38,SE);
   and MGM_G50(MGM_W39,MGM_W38,MGM_W37);
   and MGM_G51(ENABLE_NOT_D_AND_NOT_SE_AND_SI,SI,MGM_W39);
   not MGM_G52(MGM_W40,D);
   and MGM_G53(MGM_W41,SE,MGM_W40);
   not MGM_G54(MGM_W42,SI);
   and MGM_G55(ENABLE_NOT_D_AND_SE_AND_NOT_SI,MGM_W42,MGM_W41);
   and MGM_G56(MGM_W43,SE,D);
   not MGM_G57(MGM_W44,SI);
   and MGM_G58(ENABLE_D_AND_SE_AND_NOT_SI,MGM_W44,MGM_W43);
   not MGM_G59(MGM_W45,CK);
   not MGM_G60(MGM_W46,D);
   and MGM_G61(MGM_W47,MGM_W46,MGM_W45);
   not MGM_G62(MGM_W48,SE);
   and MGM_G63(MGM_W49,MGM_W48,MGM_W47);
   not MGM_G64(MGM_W50,SI);
   and MGM_G65(ENABLE_NOT_CK_AND_NOT_D_AND_NOT_SE_AND_NOT_SI,MGM_W50,MGM_W49);
   not MGM_G66(MGM_W51,CK);
   not MGM_G67(MGM_W52,D);
   and MGM_G68(MGM_W53,MGM_W52,MGM_W51);
   not MGM_G69(MGM_W54,SE);
   and MGM_G70(MGM_W55,MGM_W54,MGM_W53);
   and MGM_G71(ENABLE_NOT_CK_AND_NOT_D_AND_NOT_SE_AND_SI,SI,MGM_W55);
   not MGM_G72(MGM_W56,CK);
   not MGM_G73(MGM_W57,D);
   and MGM_G74(MGM_W58,MGM_W57,MGM_W56);
   and MGM_G75(MGM_W59,SE,MGM_W58);
   not MGM_G76(MGM_W60,SI);
   and MGM_G77(ENABLE_NOT_CK_AND_NOT_D_AND_SE_AND_NOT_SI,MGM_W60,MGM_W59);
   not MGM_G78(MGM_W61,CK);
   not MGM_G79(MGM_W62,D);
   and MGM_G80(MGM_W63,MGM_W62,MGM_W61);
   and MGM_G81(MGM_W64,SE,MGM_W63);
   and MGM_G82(ENABLE_NOT_CK_AND_NOT_D_AND_SE_AND_SI,SI,MGM_W64);
   not MGM_G83(MGM_W65,CK);
   and MGM_G84(MGM_W66,D,MGM_W65);
   not MGM_G85(MGM_W67,SE);
   and MGM_G86(MGM_W68,MGM_W67,MGM_W66);
   not MGM_G87(MGM_W69,SI);
   and MGM_G88(ENABLE_NOT_CK_AND_D_AND_NOT_SE_AND_NOT_SI,MGM_W69,MGM_W68);
   not MGM_G89(MGM_W70,CK);
   and MGM_G90(MGM_W71,D,MGM_W70);
   not MGM_G91(MGM_W72,SE);
   and MGM_G92(MGM_W73,MGM_W72,MGM_W71);
   and MGM_G93(ENABLE_NOT_CK_AND_D_AND_NOT_SE_AND_SI,SI,MGM_W73);
   not MGM_G94(MGM_W74,CK);
   and MGM_G95(MGM_W75,D,MGM_W74);
   and MGM_G96(MGM_W76,SE,MGM_W75);
   not MGM_G97(MGM_W77,SI);
   and MGM_G98(ENABLE_NOT_CK_AND_D_AND_SE_AND_NOT_SI,MGM_W77,MGM_W76);
   not MGM_G99(MGM_W78,CK);
   and MGM_G100(MGM_W79,D,MGM_W78);
   and MGM_G101(MGM_W80,SE,MGM_W79);
   and MGM_G102(ENABLE_NOT_CK_AND_D_AND_SE_AND_SI,SI,MGM_W80);
   not MGM_G103(MGM_W81,D);
   and MGM_G104(MGM_W82,MGM_W81,CK);
   not MGM_G105(MGM_W83,SE);
   and MGM_G106(MGM_W84,MGM_W83,MGM_W82);
   not MGM_G107(MGM_W85,SI);
   and MGM_G108(ENABLE_CK_AND_NOT_D_AND_NOT_SE_AND_NOT_SI,MGM_W85,MGM_W84);
   not MGM_G109(MGM_W86,D);
   and MGM_G110(MGM_W87,MGM_W86,CK);
   not MGM_G111(MGM_W88,SE);
   and MGM_G112(MGM_W89,MGM_W88,MGM_W87);
   and MGM_G113(ENABLE_CK_AND_NOT_D_AND_NOT_SE_AND_SI,SI,MGM_W89);
   not MGM_G114(MGM_W90,D);
   and MGM_G115(MGM_W91,MGM_W90,CK);
   and MGM_G116(MGM_W92,SE,MGM_W91);
   not MGM_G117(MGM_W93,SI);
   and MGM_G118(ENABLE_CK_AND_NOT_D_AND_SE_AND_NOT_SI,MGM_W93,MGM_W92);
   not MGM_G119(MGM_W94,D);
   and MGM_G120(MGM_W95,MGM_W94,CK);
   and MGM_G121(MGM_W96,SE,MGM_W95);
   and MGM_G122(ENABLE_CK_AND_NOT_D_AND_SE_AND_SI,SI,MGM_W96);
   and MGM_G123(MGM_W97,D,CK);
   not MGM_G124(MGM_W98,SE);
   and MGM_G125(MGM_W99,MGM_W98,MGM_W97);
   not MGM_G126(MGM_W100,SI);
   and MGM_G127(ENABLE_CK_AND_D_AND_NOT_SE_AND_NOT_SI,MGM_W100,MGM_W99);
   and MGM_G128(MGM_W101,D,CK);
   not MGM_G129(MGM_W102,SE);
   and MGM_G130(MGM_W103,MGM_W102,MGM_W101);
   and MGM_G131(ENABLE_CK_AND_D_AND_NOT_SE_AND_SI,SI,MGM_W103);
   and MGM_G132(MGM_W104,D,CK);
   and MGM_G133(MGM_W105,SE,MGM_W104);
   not MGM_G134(MGM_W106,SI);
   and MGM_G135(ENABLE_CK_AND_D_AND_SE_AND_NOT_SI,MGM_W106,MGM_W105);
   and MGM_G136(MGM_W107,D,CK);
   and MGM_G137(MGM_W108,SE,MGM_W107);
   and MGM_G138(ENABLE_CK_AND_D_AND_SE_AND_SI,SI,MGM_W108);
   not MGM_G139(MGM_W109,D);
   and MGM_G140(MGM_W110,SD,MGM_W109);
   and MGM_G141(ENABLE_NOT_D_AND_SD_AND_SI,SI,MGM_W110);
   and MGM_G142(MGM_W111,SD,D);
   not MGM_G143(MGM_W112,SI);
   and MGM_G144(ENABLE_D_AND_SD_AND_NOT_SI,MGM_W112,MGM_W111);
   not MGM_G145(MGM_W113,D);
   and MGM_G146(MGM_W114,SD,MGM_W113);
   and MGM_G147(ENABLE_NOT_D_AND_SD_AND_SE,SE,MGM_W114);
   and MGM_G148(MGM_W115,SD,D);
   and MGM_G149(ENABLE_D_AND_SD_AND_SE,SE,MGM_W115);
   // spec_gates_end
   // specify_block_begin
   specify

      if(D===1'b0 && SI===1'b1)
      // seq arc CK --> Q
      (posedge CK => (Q : SE))  = (1.0,1.0);
      
      if(SE===1'b0 && SI===1'b0)
      // seq arc CK --> Q
      (posedge CK => (Q : D))  = (1.0,1.0);
      
      if(D===1'b1 && SE===1'b0 && SI===1'b1 || D===1'b0 && SE===1'b1 && SI===1'b0)
      // seq arc CK --> Q
      (posedge CK => (Q : D))  = (1.0,1.0);
      
      if(D===1'b1 && SE===1'b1)
      // seq arc CK --> Q
      (posedge CK => (Q : SI))  = (1.0,1.0);
      
      ifnone
      // seq arc CK --> Q
      (posedge CK => (Q : D))  = (1.0,1.0);
      
      if(CK===1'b0 && D===1'b0 && SE===1'b0 && SI===1'b0)
      // seq arc SD --> Q
      (SD => Q)  = (1.0,1.0);
      
      if(CK===1'b0 && D===1'b0 && SE===1'b0 && SI===1'b1)
      // seq arc SD --> Q
      (SD => Q)  = (1.0,1.0);
      
      if(CK===1'b0 && D===1'b0 && SE===1'b1 && SI===1'b0)
      // seq arc SD --> Q
      (SD => Q)  = (1.0,1.0);
      
      if(CK===1'b0 && D===1'b0 && SE===1'b1 && SI===1'b1)
      // seq arc SD --> Q
      (SD => Q)  = (1.0,1.0);
      
      if(CK===1'b0 && D===1'b1 && SE===1'b0 && SI===1'b0)
      // seq arc SD --> Q
      (SD => Q)  = (1.0,1.0);
      
      if(CK===1'b0 && D===1'b1 && SE===1'b0 && SI===1'b1)
      // seq arc SD --> Q
      (SD => Q)  = (1.0,1.0);
      
      if(CK===1'b0 && D===1'b1 && SE===1'b1 && SI===1'b0)
      // seq arc SD --> Q
      (SD => Q)  = (1.0,1.0);
      
      if(CK===1'b0 && D===1'b1 && SE===1'b1 && SI===1'b1)
      // seq arc SD --> Q
      (SD => Q)  = (1.0,1.0);
      
      if(CK===1'b1 && D===1'b0 && SE===1'b0 && SI===1'b0)
      // seq arc SD --> Q
      (SD => Q)  = (1.0,1.0);
      
      if(CK===1'b1 && D===1'b0 && SE===1'b0 && SI===1'b1)
      // seq arc SD --> Q
      (SD => Q)  = (1.0,1.0);
      
      if(CK===1'b1 && D===1'b0 && SE===1'b1 && SI===1'b0)
      // seq arc SD --> Q
      (SD => Q)  = (1.0,1.0);
      
      if(CK===1'b1 && D===1'b0 && SE===1'b1 && SI===1'b1)
      // seq arc SD --> Q
      (SD => Q)  = (1.0,1.0);
      
      if(CK===1'b1 && D===1'b1 && SE===1'b0 && SI===1'b0)
      // seq arc SD --> Q
      (SD => Q)  = (1.0,1.0);
      
      if(CK===1'b1 && D===1'b1 && SE===1'b0 && SI===1'b1)
      // seq arc SD --> Q
      (SD => Q)  = (1.0,1.0);
      
      if(CK===1'b1 && D===1'b1 && SE===1'b1 && SI===1'b0)
      // seq arc SD --> Q
      (SD => Q)  = (1.0,1.0);
      
      if(CK===1'b1 && D===1'b1 && SE===1'b1 && SI===1'b1)
      // seq arc SD --> Q
      (SD => Q)  = (1.0,1.0);
      
      ifnone
      // seq arc SD --> Q
      (SD => Q)  = (1.0,1.0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_SD_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_SD_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_SD_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_SD_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_SD_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_SD_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_SD_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_SD_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_SD_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_SD_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_SD_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_SD_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_SD_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_SD_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_SD_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_SD_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      // hold D-HL CK-LH
      $hold(posedge CK &&& (ENABLE_SD_AND_NOT_SE_AND_NOT_SI === 1'b1),
      negedge D &&& (ENABLE_SD_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold D-LH CK-LH
      $hold(posedge CK &&& (ENABLE_SD_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge D &&& (ENABLE_SD_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup D-HL CK-LH
      $setup(negedge D &&& (ENABLE_SD_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_SD_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup D-LH CK-LH
      $setup(posedge D &&& (ENABLE_SD_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_SD_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold D-HL CK-LH
      $hold(posedge CK &&& (ENABLE_SD_AND_NOT_SE_AND_SI === 1'b1),
      negedge D &&& (ENABLE_SD_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // hold D-LH CK-LH
      $hold(posedge CK &&& (ENABLE_SD_AND_NOT_SE_AND_SI === 1'b1),
      posedge D &&& (ENABLE_SD_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // setup D-HL CK-LH
      $setup(negedge D &&& (ENABLE_SD_AND_NOT_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_SD_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // setup D-LH CK-LH
      $setup(posedge D &&& (ENABLE_SD_AND_NOT_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_SD_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // recovery SD-LH CK-LH
      $recovery(posedge SD &&& (ENABLE_NOT_D_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // removal SD-LH CK-LH
      $removal(posedge SD &&& (ENABLE_NOT_D_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // recovery SD-LH CK-LH
      $recovery(posedge SD &&& (ENABLE_NOT_D_AND_NOT_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // removal SD-LH CK-LH
      $removal(posedge SD &&& (ENABLE_NOT_D_AND_NOT_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // recovery SD-LH CK-LH
      $recovery(posedge SD &&& (ENABLE_NOT_D_AND_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_SE_AND_NOT_SI === 1'b1),1.0);
      
      // removal SD-LH CK-LH
      $removal(posedge SD &&& (ENABLE_NOT_D_AND_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_SE_AND_NOT_SI === 1'b1),1.0);
      
      // recovery SD-LH CK-LH
      $recovery(posedge SD &&& (ENABLE_D_AND_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_D_AND_SE_AND_NOT_SI === 1'b1),1.0);
      
      // removal SD-LH CK-LH
      $removal(posedge SD &&& (ENABLE_D_AND_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_D_AND_SE_AND_NOT_SI === 1'b1),1.0);
      
      $width(negedge SD &&& (ENABLE_NOT_CK_AND_NOT_D_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge SD &&& (ENABLE_NOT_CK_AND_NOT_D_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge SD &&& (ENABLE_NOT_CK_AND_NOT_D_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge SD &&& (ENABLE_NOT_CK_AND_NOT_D_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge SD &&& (ENABLE_NOT_CK_AND_D_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge SD &&& (ENABLE_NOT_CK_AND_D_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge SD &&& (ENABLE_NOT_CK_AND_D_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge SD &&& (ENABLE_NOT_CK_AND_D_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge SD &&& (ENABLE_CK_AND_NOT_D_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge SD &&& (ENABLE_CK_AND_NOT_D_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge SD &&& (ENABLE_CK_AND_NOT_D_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge SD &&& (ENABLE_CK_AND_NOT_D_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge SD &&& (ENABLE_CK_AND_D_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge SD &&& (ENABLE_CK_AND_D_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge SD &&& (ENABLE_CK_AND_D_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge SD &&& (ENABLE_CK_AND_D_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      // hold SE-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D_AND_SD_AND_SI === 1'b1),
      negedge SE &&& (ENABLE_NOT_D_AND_SD_AND_SI === 1'b1),1.0);
      
      // hold SE-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D_AND_SD_AND_SI === 1'b1),
      posedge SE &&& (ENABLE_NOT_D_AND_SD_AND_SI === 1'b1),1.0);
      
      // setup SE-HL CK-LH
      $setup(negedge SE &&& (ENABLE_NOT_D_AND_SD_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_SD_AND_SI === 1'b1),1.0);
      
      // setup SE-LH CK-LH
      $setup(posedge SE &&& (ENABLE_NOT_D_AND_SD_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_SD_AND_SI === 1'b1),1.0);
      
      // hold SE-HL CK-LH
      $hold(posedge CK &&& (ENABLE_D_AND_SD_AND_NOT_SI === 1'b1),
      negedge SE &&& (ENABLE_D_AND_SD_AND_NOT_SI === 1'b1),1.0);
      
      // hold SE-LH CK-LH
      $hold(posedge CK &&& (ENABLE_D_AND_SD_AND_NOT_SI === 1'b1),
      posedge SE &&& (ENABLE_D_AND_SD_AND_NOT_SI === 1'b1),1.0);
      
      // setup SE-HL CK-LH
      $setup(negedge SE &&& (ENABLE_D_AND_SD_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_D_AND_SD_AND_NOT_SI === 1'b1),1.0);
      
      // setup SE-LH CK-LH
      $setup(posedge SE &&& (ENABLE_D_AND_SD_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_D_AND_SD_AND_NOT_SI === 1'b1),1.0);
      
      // hold SI-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D_AND_SD_AND_SE === 1'b1),
      negedge SI &&& (ENABLE_NOT_D_AND_SD_AND_SE === 1'b1),1.0);
      
      // hold SI-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D_AND_SD_AND_SE === 1'b1),
      posedge SI &&& (ENABLE_NOT_D_AND_SD_AND_SE === 1'b1),1.0);
      
      // setup SI-HL CK-LH
      $setup(negedge SI &&& (ENABLE_NOT_D_AND_SD_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_SD_AND_SE === 1'b1),1.0);
      
      // setup SI-LH CK-LH
      $setup(posedge SI &&& (ENABLE_NOT_D_AND_SD_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_SD_AND_SE === 1'b1),1.0);
      
      // hold SI-HL CK-LH
      $hold(posedge CK &&& (ENABLE_D_AND_SD_AND_SE === 1'b1),
      negedge SI &&& (ENABLE_D_AND_SD_AND_SE === 1'b1),1.0);
      
      // hold SI-LH CK-LH
      $hold(posedge CK &&& (ENABLE_D_AND_SD_AND_SE === 1'b1),
      posedge SI &&& (ENABLE_D_AND_SD_AND_SE === 1'b1),1.0);
      
      // setup SI-HL CK-LH
      $setup(negedge SI &&& (ENABLE_D_AND_SD_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_D_AND_SD_AND_SE === 1'b1),1.0);
      
      // setup SI-LH CK-LH
      $setup(posedge SI &&& (ENABLE_D_AND_SD_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_D_AND_SD_AND_SE === 1'b1),1.0);
      
      // mpw CK_lh 
      $width(posedge CK,1.0,0);
      
      // mpw CK_hl 
      $width(negedge CK,1.0,0);
      
      // mpw SD_hl 
      $width(negedge SD,1.0,0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_FSDPSBQ_V2LP_1( Q, CK, D, SI, SE, SD );
input CK, D, SD, SE, SI;
output Q;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_FSDPSBQ_V2LP_1_func SAEDRVT14_FSDPSBQ_V2LP_1_behav_inst(.Q(Q),.CK(CK),.D(D),.SI(SI),.SE(SE),.SD(SD));
`else
   SAEDRVT14_FSDPSBQ_V2LP_1_func SAEDRVT14_FSDPSBQ_V2LP_1_inst(.Q(Q),.CK(CK),.D(D),.SI(SI),.SE(SE),.SD(SD));
   // spec_gates_begin
   not MGM_G0(MGM_W0,D);
   and MGM_G1(MGM_W1,SD,MGM_W0);
   not MGM_G2(MGM_W2,SE);
   and MGM_G3(MGM_W3,MGM_W2,MGM_W1);
   not MGM_G4(MGM_W4,SI);
   and MGM_G5(ENABLE_NOT_D_AND_SD_AND_NOT_SE_AND_NOT_SI,MGM_W4,MGM_W3);
   not MGM_G6(MGM_W5,D);
   and MGM_G7(MGM_W6,SD,MGM_W5);
   not MGM_G8(MGM_W7,SE);
   and MGM_G9(MGM_W8,MGM_W7,MGM_W6);
   and MGM_G10(ENABLE_NOT_D_AND_SD_AND_NOT_SE_AND_SI,SI,MGM_W8);
   not MGM_G11(MGM_W9,D);
   and MGM_G12(MGM_W10,SD,MGM_W9);
   and MGM_G13(MGM_W11,SE,MGM_W10);
   not MGM_G14(MGM_W12,SI);
   and MGM_G15(ENABLE_NOT_D_AND_SD_AND_SE_AND_NOT_SI,MGM_W12,MGM_W11);
   not MGM_G16(MGM_W13,D);
   and MGM_G17(MGM_W14,SD,MGM_W13);
   and MGM_G18(MGM_W15,SE,MGM_W14);
   and MGM_G19(ENABLE_NOT_D_AND_SD_AND_SE_AND_SI,SI,MGM_W15);
   and MGM_G20(MGM_W16,SD,D);
   not MGM_G21(MGM_W17,SE);
   and MGM_G22(MGM_W18,MGM_W17,MGM_W16);
   not MGM_G23(MGM_W19,SI);
   and MGM_G24(ENABLE_D_AND_SD_AND_NOT_SE_AND_NOT_SI,MGM_W19,MGM_W18);
   and MGM_G25(MGM_W20,SD,D);
   not MGM_G26(MGM_W21,SE);
   and MGM_G27(MGM_W22,MGM_W21,MGM_W20);
   and MGM_G28(ENABLE_D_AND_SD_AND_NOT_SE_AND_SI,SI,MGM_W22);
   and MGM_G29(MGM_W23,SD,D);
   and MGM_G30(MGM_W24,SE,MGM_W23);
   not MGM_G31(MGM_W25,SI);
   and MGM_G32(ENABLE_D_AND_SD_AND_SE_AND_NOT_SI,MGM_W25,MGM_W24);
   and MGM_G33(MGM_W26,SD,D);
   and MGM_G34(MGM_W27,SE,MGM_W26);
   and MGM_G35(ENABLE_D_AND_SD_AND_SE_AND_SI,SI,MGM_W27);
   not MGM_G36(MGM_W28,SE);
   and MGM_G37(MGM_W29,MGM_W28,SD);
   not MGM_G38(MGM_W30,SI);
   and MGM_G39(ENABLE_SD_AND_NOT_SE_AND_NOT_SI,MGM_W30,MGM_W29);
   not MGM_G40(MGM_W31,SE);
   and MGM_G41(MGM_W32,MGM_W31,SD);
   and MGM_G42(ENABLE_SD_AND_NOT_SE_AND_SI,SI,MGM_W32);
   not MGM_G43(MGM_W33,D);
   not MGM_G44(MGM_W34,SE);
   and MGM_G45(MGM_W35,MGM_W34,MGM_W33);
   not MGM_G46(MGM_W36,SI);
   and MGM_G47(ENABLE_NOT_D_AND_NOT_SE_AND_NOT_SI,MGM_W36,MGM_W35);
   not MGM_G48(MGM_W37,D);
   not MGM_G49(MGM_W38,SE);
   and MGM_G50(MGM_W39,MGM_W38,MGM_W37);
   and MGM_G51(ENABLE_NOT_D_AND_NOT_SE_AND_SI,SI,MGM_W39);
   not MGM_G52(MGM_W40,D);
   and MGM_G53(MGM_W41,SE,MGM_W40);
   not MGM_G54(MGM_W42,SI);
   and MGM_G55(ENABLE_NOT_D_AND_SE_AND_NOT_SI,MGM_W42,MGM_W41);
   and MGM_G56(MGM_W43,SE,D);
   not MGM_G57(MGM_W44,SI);
   and MGM_G58(ENABLE_D_AND_SE_AND_NOT_SI,MGM_W44,MGM_W43);
   not MGM_G59(MGM_W45,CK);
   not MGM_G60(MGM_W46,D);
   and MGM_G61(MGM_W47,MGM_W46,MGM_W45);
   not MGM_G62(MGM_W48,SE);
   and MGM_G63(MGM_W49,MGM_W48,MGM_W47);
   not MGM_G64(MGM_W50,SI);
   and MGM_G65(ENABLE_NOT_CK_AND_NOT_D_AND_NOT_SE_AND_NOT_SI,MGM_W50,MGM_W49);
   not MGM_G66(MGM_W51,CK);
   not MGM_G67(MGM_W52,D);
   and MGM_G68(MGM_W53,MGM_W52,MGM_W51);
   not MGM_G69(MGM_W54,SE);
   and MGM_G70(MGM_W55,MGM_W54,MGM_W53);
   and MGM_G71(ENABLE_NOT_CK_AND_NOT_D_AND_NOT_SE_AND_SI,SI,MGM_W55);
   not MGM_G72(MGM_W56,CK);
   not MGM_G73(MGM_W57,D);
   and MGM_G74(MGM_W58,MGM_W57,MGM_W56);
   and MGM_G75(MGM_W59,SE,MGM_W58);
   not MGM_G76(MGM_W60,SI);
   and MGM_G77(ENABLE_NOT_CK_AND_NOT_D_AND_SE_AND_NOT_SI,MGM_W60,MGM_W59);
   not MGM_G78(MGM_W61,CK);
   not MGM_G79(MGM_W62,D);
   and MGM_G80(MGM_W63,MGM_W62,MGM_W61);
   and MGM_G81(MGM_W64,SE,MGM_W63);
   and MGM_G82(ENABLE_NOT_CK_AND_NOT_D_AND_SE_AND_SI,SI,MGM_W64);
   not MGM_G83(MGM_W65,CK);
   and MGM_G84(MGM_W66,D,MGM_W65);
   not MGM_G85(MGM_W67,SE);
   and MGM_G86(MGM_W68,MGM_W67,MGM_W66);
   not MGM_G87(MGM_W69,SI);
   and MGM_G88(ENABLE_NOT_CK_AND_D_AND_NOT_SE_AND_NOT_SI,MGM_W69,MGM_W68);
   not MGM_G89(MGM_W70,CK);
   and MGM_G90(MGM_W71,D,MGM_W70);
   not MGM_G91(MGM_W72,SE);
   and MGM_G92(MGM_W73,MGM_W72,MGM_W71);
   and MGM_G93(ENABLE_NOT_CK_AND_D_AND_NOT_SE_AND_SI,SI,MGM_W73);
   not MGM_G94(MGM_W74,CK);
   and MGM_G95(MGM_W75,D,MGM_W74);
   and MGM_G96(MGM_W76,SE,MGM_W75);
   not MGM_G97(MGM_W77,SI);
   and MGM_G98(ENABLE_NOT_CK_AND_D_AND_SE_AND_NOT_SI,MGM_W77,MGM_W76);
   not MGM_G99(MGM_W78,CK);
   and MGM_G100(MGM_W79,D,MGM_W78);
   and MGM_G101(MGM_W80,SE,MGM_W79);
   and MGM_G102(ENABLE_NOT_CK_AND_D_AND_SE_AND_SI,SI,MGM_W80);
   not MGM_G103(MGM_W81,D);
   and MGM_G104(MGM_W82,MGM_W81,CK);
   not MGM_G105(MGM_W83,SE);
   and MGM_G106(MGM_W84,MGM_W83,MGM_W82);
   not MGM_G107(MGM_W85,SI);
   and MGM_G108(ENABLE_CK_AND_NOT_D_AND_NOT_SE_AND_NOT_SI,MGM_W85,MGM_W84);
   not MGM_G109(MGM_W86,D);
   and MGM_G110(MGM_W87,MGM_W86,CK);
   not MGM_G111(MGM_W88,SE);
   and MGM_G112(MGM_W89,MGM_W88,MGM_W87);
   and MGM_G113(ENABLE_CK_AND_NOT_D_AND_NOT_SE_AND_SI,SI,MGM_W89);
   not MGM_G114(MGM_W90,D);
   and MGM_G115(MGM_W91,MGM_W90,CK);
   and MGM_G116(MGM_W92,SE,MGM_W91);
   not MGM_G117(MGM_W93,SI);
   and MGM_G118(ENABLE_CK_AND_NOT_D_AND_SE_AND_NOT_SI,MGM_W93,MGM_W92);
   not MGM_G119(MGM_W94,D);
   and MGM_G120(MGM_W95,MGM_W94,CK);
   and MGM_G121(MGM_W96,SE,MGM_W95);
   and MGM_G122(ENABLE_CK_AND_NOT_D_AND_SE_AND_SI,SI,MGM_W96);
   and MGM_G123(MGM_W97,D,CK);
   not MGM_G124(MGM_W98,SE);
   and MGM_G125(MGM_W99,MGM_W98,MGM_W97);
   not MGM_G126(MGM_W100,SI);
   and MGM_G127(ENABLE_CK_AND_D_AND_NOT_SE_AND_NOT_SI,MGM_W100,MGM_W99);
   and MGM_G128(MGM_W101,D,CK);
   not MGM_G129(MGM_W102,SE);
   and MGM_G130(MGM_W103,MGM_W102,MGM_W101);
   and MGM_G131(ENABLE_CK_AND_D_AND_NOT_SE_AND_SI,SI,MGM_W103);
   and MGM_G132(MGM_W104,D,CK);
   and MGM_G133(MGM_W105,SE,MGM_W104);
   not MGM_G134(MGM_W106,SI);
   and MGM_G135(ENABLE_CK_AND_D_AND_SE_AND_NOT_SI,MGM_W106,MGM_W105);
   and MGM_G136(MGM_W107,D,CK);
   and MGM_G137(MGM_W108,SE,MGM_W107);
   and MGM_G138(ENABLE_CK_AND_D_AND_SE_AND_SI,SI,MGM_W108);
   not MGM_G139(MGM_W109,D);
   and MGM_G140(MGM_W110,SD,MGM_W109);
   and MGM_G141(ENABLE_NOT_D_AND_SD_AND_SI,SI,MGM_W110);
   and MGM_G142(MGM_W111,SD,D);
   not MGM_G143(MGM_W112,SI);
   and MGM_G144(ENABLE_D_AND_SD_AND_NOT_SI,MGM_W112,MGM_W111);
   not MGM_G145(MGM_W113,D);
   and MGM_G146(MGM_W114,SD,MGM_W113);
   and MGM_G147(ENABLE_NOT_D_AND_SD_AND_SE,SE,MGM_W114);
   and MGM_G148(MGM_W115,SD,D);
   and MGM_G149(ENABLE_D_AND_SD_AND_SE,SE,MGM_W115);
   // spec_gates_end
   // specify_block_begin
   specify

      if(D===1'b0 && SI===1'b1)
      // seq arc CK --> Q
      (posedge CK => (Q : SE))  = (1.0,1.0);
      
      if(SE===1'b0 && SI===1'b0)
      // seq arc CK --> Q
      (posedge CK => (Q : D))  = (1.0,1.0);
      
      if(D===1'b1 && SE===1'b0 && SI===1'b1 || D===1'b0 && SE===1'b1 && SI===1'b0)
      // seq arc CK --> Q
      (posedge CK => (Q : D))  = (1.0,1.0);
      
      if(D===1'b1 && SE===1'b1)
      // seq arc CK --> Q
      (posedge CK => (Q : SI))  = (1.0,1.0);
      
      ifnone
      // seq arc CK --> Q
      (posedge CK => (Q : D))  = (1.0,1.0);
      
      if(CK===1'b0 && D===1'b0 && SE===1'b0 && SI===1'b0)
      // seq arc SD --> Q
      (SD => Q)  = (1.0,1.0);
      
      if(CK===1'b0 && D===1'b0 && SE===1'b0 && SI===1'b1)
      // seq arc SD --> Q
      (SD => Q)  = (1.0,1.0);
      
      if(CK===1'b0 && D===1'b0 && SE===1'b1 && SI===1'b0)
      // seq arc SD --> Q
      (SD => Q)  = (1.0,1.0);
      
      if(CK===1'b0 && D===1'b0 && SE===1'b1 && SI===1'b1)
      // seq arc SD --> Q
      (SD => Q)  = (1.0,1.0);
      
      if(CK===1'b0 && D===1'b1 && SE===1'b0 && SI===1'b0)
      // seq arc SD --> Q
      (SD => Q)  = (1.0,1.0);
      
      if(CK===1'b0 && D===1'b1 && SE===1'b0 && SI===1'b1)
      // seq arc SD --> Q
      (SD => Q)  = (1.0,1.0);
      
      if(CK===1'b0 && D===1'b1 && SE===1'b1 && SI===1'b0)
      // seq arc SD --> Q
      (SD => Q)  = (1.0,1.0);
      
      if(CK===1'b0 && D===1'b1 && SE===1'b1 && SI===1'b1)
      // seq arc SD --> Q
      (SD => Q)  = (1.0,1.0);
      
      if(CK===1'b1 && D===1'b0 && SE===1'b0 && SI===1'b0)
      // seq arc SD --> Q
      (SD => Q)  = (1.0,1.0);
      
      if(CK===1'b1 && D===1'b0 && SE===1'b0 && SI===1'b1)
      // seq arc SD --> Q
      (SD => Q)  = (1.0,1.0);
      
      if(CK===1'b1 && D===1'b0 && SE===1'b1 && SI===1'b0)
      // seq arc SD --> Q
      (SD => Q)  = (1.0,1.0);
      
      if(CK===1'b1 && D===1'b0 && SE===1'b1 && SI===1'b1)
      // seq arc SD --> Q
      (SD => Q)  = (1.0,1.0);
      
      if(CK===1'b1 && D===1'b1 && SE===1'b0 && SI===1'b0)
      // seq arc SD --> Q
      (SD => Q)  = (1.0,1.0);
      
      if(CK===1'b1 && D===1'b1 && SE===1'b0 && SI===1'b1)
      // seq arc SD --> Q
      (SD => Q)  = (1.0,1.0);
      
      if(CK===1'b1 && D===1'b1 && SE===1'b1 && SI===1'b0)
      // seq arc SD --> Q
      (SD => Q)  = (1.0,1.0);
      
      if(CK===1'b1 && D===1'b1 && SE===1'b1 && SI===1'b1)
      // seq arc SD --> Q
      (SD => Q)  = (1.0,1.0);
      
      ifnone
      // seq arc SD --> Q
      (SD => Q)  = (1.0,1.0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_SD_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_SD_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_SD_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_SD_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_SD_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_SD_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_SD_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_SD_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_SD_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_SD_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_SD_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_SD_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_SD_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_SD_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_SD_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_SD_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      // hold D-HL CK-LH
      $hold(posedge CK &&& (ENABLE_SD_AND_NOT_SE_AND_NOT_SI === 1'b1),
      negedge D &&& (ENABLE_SD_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold D-LH CK-LH
      $hold(posedge CK &&& (ENABLE_SD_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge D &&& (ENABLE_SD_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup D-HL CK-LH
      $setup(negedge D &&& (ENABLE_SD_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_SD_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup D-LH CK-LH
      $setup(posedge D &&& (ENABLE_SD_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_SD_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold D-HL CK-LH
      $hold(posedge CK &&& (ENABLE_SD_AND_NOT_SE_AND_SI === 1'b1),
      negedge D &&& (ENABLE_SD_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // hold D-LH CK-LH
      $hold(posedge CK &&& (ENABLE_SD_AND_NOT_SE_AND_SI === 1'b1),
      posedge D &&& (ENABLE_SD_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // setup D-HL CK-LH
      $setup(negedge D &&& (ENABLE_SD_AND_NOT_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_SD_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // setup D-LH CK-LH
      $setup(posedge D &&& (ENABLE_SD_AND_NOT_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_SD_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // recovery SD-LH CK-LH
      $recovery(posedge SD &&& (ENABLE_NOT_D_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // removal SD-LH CK-LH
      $removal(posedge SD &&& (ENABLE_NOT_D_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // recovery SD-LH CK-LH
      $recovery(posedge SD &&& (ENABLE_NOT_D_AND_NOT_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // removal SD-LH CK-LH
      $removal(posedge SD &&& (ENABLE_NOT_D_AND_NOT_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // recovery SD-LH CK-LH
      $recovery(posedge SD &&& (ENABLE_NOT_D_AND_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_SE_AND_NOT_SI === 1'b1),1.0);
      
      // removal SD-LH CK-LH
      $removal(posedge SD &&& (ENABLE_NOT_D_AND_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_SE_AND_NOT_SI === 1'b1),1.0);
      
      // recovery SD-LH CK-LH
      $recovery(posedge SD &&& (ENABLE_D_AND_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_D_AND_SE_AND_NOT_SI === 1'b1),1.0);
      
      // removal SD-LH CK-LH
      $removal(posedge SD &&& (ENABLE_D_AND_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_D_AND_SE_AND_NOT_SI === 1'b1),1.0);
      
      $width(negedge SD &&& (ENABLE_NOT_CK_AND_NOT_D_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge SD &&& (ENABLE_NOT_CK_AND_NOT_D_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge SD &&& (ENABLE_NOT_CK_AND_NOT_D_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge SD &&& (ENABLE_NOT_CK_AND_NOT_D_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge SD &&& (ENABLE_NOT_CK_AND_D_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge SD &&& (ENABLE_NOT_CK_AND_D_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge SD &&& (ENABLE_NOT_CK_AND_D_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge SD &&& (ENABLE_NOT_CK_AND_D_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge SD &&& (ENABLE_CK_AND_NOT_D_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge SD &&& (ENABLE_CK_AND_NOT_D_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge SD &&& (ENABLE_CK_AND_NOT_D_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge SD &&& (ENABLE_CK_AND_NOT_D_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge SD &&& (ENABLE_CK_AND_D_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge SD &&& (ENABLE_CK_AND_D_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge SD &&& (ENABLE_CK_AND_D_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge SD &&& (ENABLE_CK_AND_D_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      // hold SE-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D_AND_SD_AND_SI === 1'b1),
      negedge SE &&& (ENABLE_NOT_D_AND_SD_AND_SI === 1'b1),1.0);
      
      // hold SE-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D_AND_SD_AND_SI === 1'b1),
      posedge SE &&& (ENABLE_NOT_D_AND_SD_AND_SI === 1'b1),1.0);
      
      // setup SE-HL CK-LH
      $setup(negedge SE &&& (ENABLE_NOT_D_AND_SD_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_SD_AND_SI === 1'b1),1.0);
      
      // setup SE-LH CK-LH
      $setup(posedge SE &&& (ENABLE_NOT_D_AND_SD_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_SD_AND_SI === 1'b1),1.0);
      
      // hold SE-HL CK-LH
      $hold(posedge CK &&& (ENABLE_D_AND_SD_AND_NOT_SI === 1'b1),
      negedge SE &&& (ENABLE_D_AND_SD_AND_NOT_SI === 1'b1),1.0);
      
      // hold SE-LH CK-LH
      $hold(posedge CK &&& (ENABLE_D_AND_SD_AND_NOT_SI === 1'b1),
      posedge SE &&& (ENABLE_D_AND_SD_AND_NOT_SI === 1'b1),1.0);
      
      // setup SE-HL CK-LH
      $setup(negedge SE &&& (ENABLE_D_AND_SD_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_D_AND_SD_AND_NOT_SI === 1'b1),1.0);
      
      // setup SE-LH CK-LH
      $setup(posedge SE &&& (ENABLE_D_AND_SD_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_D_AND_SD_AND_NOT_SI === 1'b1),1.0);
      
      // hold SI-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D_AND_SD_AND_SE === 1'b1),
      negedge SI &&& (ENABLE_NOT_D_AND_SD_AND_SE === 1'b1),1.0);
      
      // hold SI-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D_AND_SD_AND_SE === 1'b1),
      posedge SI &&& (ENABLE_NOT_D_AND_SD_AND_SE === 1'b1),1.0);
      
      // setup SI-HL CK-LH
      $setup(negedge SI &&& (ENABLE_NOT_D_AND_SD_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_SD_AND_SE === 1'b1),1.0);
      
      // setup SI-LH CK-LH
      $setup(posedge SI &&& (ENABLE_NOT_D_AND_SD_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_SD_AND_SE === 1'b1),1.0);
      
      // hold SI-HL CK-LH
      $hold(posedge CK &&& (ENABLE_D_AND_SD_AND_SE === 1'b1),
      negedge SI &&& (ENABLE_D_AND_SD_AND_SE === 1'b1),1.0);
      
      // hold SI-LH CK-LH
      $hold(posedge CK &&& (ENABLE_D_AND_SD_AND_SE === 1'b1),
      posedge SI &&& (ENABLE_D_AND_SD_AND_SE === 1'b1),1.0);
      
      // setup SI-HL CK-LH
      $setup(negedge SI &&& (ENABLE_D_AND_SD_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_D_AND_SD_AND_SE === 1'b1),1.0);
      
      // setup SI-LH CK-LH
      $setup(posedge SI &&& (ENABLE_D_AND_SD_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_D_AND_SD_AND_SE === 1'b1),1.0);
      
      // mpw CK_lh 
      $width(posedge CK,1.0,0);
      
      // mpw CK_hl 
      $width(negedge CK,1.0,0);
      
      // mpw SD_hl 
      $width(negedge SD,1.0,0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_FSDPSBQ_V2LP_2( Q, CK, D, SI, SE, SD );
input CK, D, SD, SE, SI;
output Q;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_FSDPSBQ_V2LP_2_func SAEDRVT14_FSDPSBQ_V2LP_2_behav_inst(.Q(Q),.CK(CK),.D(D),.SI(SI),.SE(SE),.SD(SD));
`else
   SAEDRVT14_FSDPSBQ_V2LP_2_func SAEDRVT14_FSDPSBQ_V2LP_2_inst(.Q(Q),.CK(CK),.D(D),.SI(SI),.SE(SE),.SD(SD));
   // spec_gates_begin
   not MGM_G0(MGM_W0,D);
   and MGM_G1(MGM_W1,SD,MGM_W0);
   not MGM_G2(MGM_W2,SE);
   and MGM_G3(MGM_W3,MGM_W2,MGM_W1);
   not MGM_G4(MGM_W4,SI);
   and MGM_G5(ENABLE_NOT_D_AND_SD_AND_NOT_SE_AND_NOT_SI,MGM_W4,MGM_W3);
   not MGM_G6(MGM_W5,D);
   and MGM_G7(MGM_W6,SD,MGM_W5);
   not MGM_G8(MGM_W7,SE);
   and MGM_G9(MGM_W8,MGM_W7,MGM_W6);
   and MGM_G10(ENABLE_NOT_D_AND_SD_AND_NOT_SE_AND_SI,SI,MGM_W8);
   not MGM_G11(MGM_W9,D);
   and MGM_G12(MGM_W10,SD,MGM_W9);
   and MGM_G13(MGM_W11,SE,MGM_W10);
   not MGM_G14(MGM_W12,SI);
   and MGM_G15(ENABLE_NOT_D_AND_SD_AND_SE_AND_NOT_SI,MGM_W12,MGM_W11);
   not MGM_G16(MGM_W13,D);
   and MGM_G17(MGM_W14,SD,MGM_W13);
   and MGM_G18(MGM_W15,SE,MGM_W14);
   and MGM_G19(ENABLE_NOT_D_AND_SD_AND_SE_AND_SI,SI,MGM_W15);
   and MGM_G20(MGM_W16,SD,D);
   not MGM_G21(MGM_W17,SE);
   and MGM_G22(MGM_W18,MGM_W17,MGM_W16);
   not MGM_G23(MGM_W19,SI);
   and MGM_G24(ENABLE_D_AND_SD_AND_NOT_SE_AND_NOT_SI,MGM_W19,MGM_W18);
   and MGM_G25(MGM_W20,SD,D);
   not MGM_G26(MGM_W21,SE);
   and MGM_G27(MGM_W22,MGM_W21,MGM_W20);
   and MGM_G28(ENABLE_D_AND_SD_AND_NOT_SE_AND_SI,SI,MGM_W22);
   and MGM_G29(MGM_W23,SD,D);
   and MGM_G30(MGM_W24,SE,MGM_W23);
   not MGM_G31(MGM_W25,SI);
   and MGM_G32(ENABLE_D_AND_SD_AND_SE_AND_NOT_SI,MGM_W25,MGM_W24);
   and MGM_G33(MGM_W26,SD,D);
   and MGM_G34(MGM_W27,SE,MGM_W26);
   and MGM_G35(ENABLE_D_AND_SD_AND_SE_AND_SI,SI,MGM_W27);
   not MGM_G36(MGM_W28,SE);
   and MGM_G37(MGM_W29,MGM_W28,SD);
   not MGM_G38(MGM_W30,SI);
   and MGM_G39(ENABLE_SD_AND_NOT_SE_AND_NOT_SI,MGM_W30,MGM_W29);
   not MGM_G40(MGM_W31,SE);
   and MGM_G41(MGM_W32,MGM_W31,SD);
   and MGM_G42(ENABLE_SD_AND_NOT_SE_AND_SI,SI,MGM_W32);
   not MGM_G43(MGM_W33,D);
   not MGM_G44(MGM_W34,SE);
   and MGM_G45(MGM_W35,MGM_W34,MGM_W33);
   not MGM_G46(MGM_W36,SI);
   and MGM_G47(ENABLE_NOT_D_AND_NOT_SE_AND_NOT_SI,MGM_W36,MGM_W35);
   not MGM_G48(MGM_W37,D);
   not MGM_G49(MGM_W38,SE);
   and MGM_G50(MGM_W39,MGM_W38,MGM_W37);
   and MGM_G51(ENABLE_NOT_D_AND_NOT_SE_AND_SI,SI,MGM_W39);
   not MGM_G52(MGM_W40,D);
   and MGM_G53(MGM_W41,SE,MGM_W40);
   not MGM_G54(MGM_W42,SI);
   and MGM_G55(ENABLE_NOT_D_AND_SE_AND_NOT_SI,MGM_W42,MGM_W41);
   and MGM_G56(MGM_W43,SE,D);
   not MGM_G57(MGM_W44,SI);
   and MGM_G58(ENABLE_D_AND_SE_AND_NOT_SI,MGM_W44,MGM_W43);
   not MGM_G59(MGM_W45,CK);
   not MGM_G60(MGM_W46,D);
   and MGM_G61(MGM_W47,MGM_W46,MGM_W45);
   not MGM_G62(MGM_W48,SE);
   and MGM_G63(MGM_W49,MGM_W48,MGM_W47);
   not MGM_G64(MGM_W50,SI);
   and MGM_G65(ENABLE_NOT_CK_AND_NOT_D_AND_NOT_SE_AND_NOT_SI,MGM_W50,MGM_W49);
   not MGM_G66(MGM_W51,CK);
   not MGM_G67(MGM_W52,D);
   and MGM_G68(MGM_W53,MGM_W52,MGM_W51);
   not MGM_G69(MGM_W54,SE);
   and MGM_G70(MGM_W55,MGM_W54,MGM_W53);
   and MGM_G71(ENABLE_NOT_CK_AND_NOT_D_AND_NOT_SE_AND_SI,SI,MGM_W55);
   not MGM_G72(MGM_W56,CK);
   not MGM_G73(MGM_W57,D);
   and MGM_G74(MGM_W58,MGM_W57,MGM_W56);
   and MGM_G75(MGM_W59,SE,MGM_W58);
   not MGM_G76(MGM_W60,SI);
   and MGM_G77(ENABLE_NOT_CK_AND_NOT_D_AND_SE_AND_NOT_SI,MGM_W60,MGM_W59);
   not MGM_G78(MGM_W61,CK);
   not MGM_G79(MGM_W62,D);
   and MGM_G80(MGM_W63,MGM_W62,MGM_W61);
   and MGM_G81(MGM_W64,SE,MGM_W63);
   and MGM_G82(ENABLE_NOT_CK_AND_NOT_D_AND_SE_AND_SI,SI,MGM_W64);
   not MGM_G83(MGM_W65,CK);
   and MGM_G84(MGM_W66,D,MGM_W65);
   not MGM_G85(MGM_W67,SE);
   and MGM_G86(MGM_W68,MGM_W67,MGM_W66);
   not MGM_G87(MGM_W69,SI);
   and MGM_G88(ENABLE_NOT_CK_AND_D_AND_NOT_SE_AND_NOT_SI,MGM_W69,MGM_W68);
   not MGM_G89(MGM_W70,CK);
   and MGM_G90(MGM_W71,D,MGM_W70);
   not MGM_G91(MGM_W72,SE);
   and MGM_G92(MGM_W73,MGM_W72,MGM_W71);
   and MGM_G93(ENABLE_NOT_CK_AND_D_AND_NOT_SE_AND_SI,SI,MGM_W73);
   not MGM_G94(MGM_W74,CK);
   and MGM_G95(MGM_W75,D,MGM_W74);
   and MGM_G96(MGM_W76,SE,MGM_W75);
   not MGM_G97(MGM_W77,SI);
   and MGM_G98(ENABLE_NOT_CK_AND_D_AND_SE_AND_NOT_SI,MGM_W77,MGM_W76);
   not MGM_G99(MGM_W78,CK);
   and MGM_G100(MGM_W79,D,MGM_W78);
   and MGM_G101(MGM_W80,SE,MGM_W79);
   and MGM_G102(ENABLE_NOT_CK_AND_D_AND_SE_AND_SI,SI,MGM_W80);
   not MGM_G103(MGM_W81,D);
   and MGM_G104(MGM_W82,MGM_W81,CK);
   not MGM_G105(MGM_W83,SE);
   and MGM_G106(MGM_W84,MGM_W83,MGM_W82);
   not MGM_G107(MGM_W85,SI);
   and MGM_G108(ENABLE_CK_AND_NOT_D_AND_NOT_SE_AND_NOT_SI,MGM_W85,MGM_W84);
   not MGM_G109(MGM_W86,D);
   and MGM_G110(MGM_W87,MGM_W86,CK);
   not MGM_G111(MGM_W88,SE);
   and MGM_G112(MGM_W89,MGM_W88,MGM_W87);
   and MGM_G113(ENABLE_CK_AND_NOT_D_AND_NOT_SE_AND_SI,SI,MGM_W89);
   not MGM_G114(MGM_W90,D);
   and MGM_G115(MGM_W91,MGM_W90,CK);
   and MGM_G116(MGM_W92,SE,MGM_W91);
   not MGM_G117(MGM_W93,SI);
   and MGM_G118(ENABLE_CK_AND_NOT_D_AND_SE_AND_NOT_SI,MGM_W93,MGM_W92);
   not MGM_G119(MGM_W94,D);
   and MGM_G120(MGM_W95,MGM_W94,CK);
   and MGM_G121(MGM_W96,SE,MGM_W95);
   and MGM_G122(ENABLE_CK_AND_NOT_D_AND_SE_AND_SI,SI,MGM_W96);
   and MGM_G123(MGM_W97,D,CK);
   not MGM_G124(MGM_W98,SE);
   and MGM_G125(MGM_W99,MGM_W98,MGM_W97);
   not MGM_G126(MGM_W100,SI);
   and MGM_G127(ENABLE_CK_AND_D_AND_NOT_SE_AND_NOT_SI,MGM_W100,MGM_W99);
   and MGM_G128(MGM_W101,D,CK);
   not MGM_G129(MGM_W102,SE);
   and MGM_G130(MGM_W103,MGM_W102,MGM_W101);
   and MGM_G131(ENABLE_CK_AND_D_AND_NOT_SE_AND_SI,SI,MGM_W103);
   and MGM_G132(MGM_W104,D,CK);
   and MGM_G133(MGM_W105,SE,MGM_W104);
   not MGM_G134(MGM_W106,SI);
   and MGM_G135(ENABLE_CK_AND_D_AND_SE_AND_NOT_SI,MGM_W106,MGM_W105);
   and MGM_G136(MGM_W107,D,CK);
   and MGM_G137(MGM_W108,SE,MGM_W107);
   and MGM_G138(ENABLE_CK_AND_D_AND_SE_AND_SI,SI,MGM_W108);
   not MGM_G139(MGM_W109,D);
   and MGM_G140(MGM_W110,SD,MGM_W109);
   and MGM_G141(ENABLE_NOT_D_AND_SD_AND_SI,SI,MGM_W110);
   and MGM_G142(MGM_W111,SD,D);
   not MGM_G143(MGM_W112,SI);
   and MGM_G144(ENABLE_D_AND_SD_AND_NOT_SI,MGM_W112,MGM_W111);
   not MGM_G145(MGM_W113,D);
   and MGM_G146(MGM_W114,SD,MGM_W113);
   and MGM_G147(ENABLE_NOT_D_AND_SD_AND_SE,SE,MGM_W114);
   and MGM_G148(MGM_W115,SD,D);
   and MGM_G149(ENABLE_D_AND_SD_AND_SE,SE,MGM_W115);
   // spec_gates_end
   // specify_block_begin
   specify

      if(D===1'b0 && SI===1'b1)
      // seq arc CK --> Q
      (posedge CK => (Q : SE))  = (1.0,1.0);
      
      if(SE===1'b0 && SI===1'b0)
      // seq arc CK --> Q
      (posedge CK => (Q : D))  = (1.0,1.0);
      
      if(D===1'b1 && SE===1'b0 && SI===1'b1 || D===1'b0 && SE===1'b1 && SI===1'b0)
      // seq arc CK --> Q
      (posedge CK => (Q : D))  = (1.0,1.0);
      
      if(D===1'b1 && SE===1'b1)
      // seq arc CK --> Q
      (posedge CK => (Q : SI))  = (1.0,1.0);
      
      ifnone
      // seq arc CK --> Q
      (posedge CK => (Q : D))  = (1.0,1.0);
      
      if(CK===1'b0 && D===1'b0 && SE===1'b0 && SI===1'b0)
      // seq arc SD --> Q
      (SD => Q)  = (1.0,1.0);
      
      if(CK===1'b0 && D===1'b0 && SE===1'b0 && SI===1'b1)
      // seq arc SD --> Q
      (SD => Q)  = (1.0,1.0);
      
      if(CK===1'b0 && D===1'b0 && SE===1'b1 && SI===1'b0)
      // seq arc SD --> Q
      (SD => Q)  = (1.0,1.0);
      
      if(CK===1'b0 && D===1'b0 && SE===1'b1 && SI===1'b1)
      // seq arc SD --> Q
      (SD => Q)  = (1.0,1.0);
      
      if(CK===1'b0 && D===1'b1 && SE===1'b0 && SI===1'b0)
      // seq arc SD --> Q
      (SD => Q)  = (1.0,1.0);
      
      if(CK===1'b0 && D===1'b1 && SE===1'b0 && SI===1'b1)
      // seq arc SD --> Q
      (SD => Q)  = (1.0,1.0);
      
      if(CK===1'b0 && D===1'b1 && SE===1'b1 && SI===1'b0)
      // seq arc SD --> Q
      (SD => Q)  = (1.0,1.0);
      
      if(CK===1'b0 && D===1'b1 && SE===1'b1 && SI===1'b1)
      // seq arc SD --> Q
      (SD => Q)  = (1.0,1.0);
      
      if(CK===1'b1 && D===1'b0 && SE===1'b0 && SI===1'b0)
      // seq arc SD --> Q
      (SD => Q)  = (1.0,1.0);
      
      if(CK===1'b1 && D===1'b0 && SE===1'b0 && SI===1'b1)
      // seq arc SD --> Q
      (SD => Q)  = (1.0,1.0);
      
      if(CK===1'b1 && D===1'b0 && SE===1'b1 && SI===1'b0)
      // seq arc SD --> Q
      (SD => Q)  = (1.0,1.0);
      
      if(CK===1'b1 && D===1'b0 && SE===1'b1 && SI===1'b1)
      // seq arc SD --> Q
      (SD => Q)  = (1.0,1.0);
      
      if(CK===1'b1 && D===1'b1 && SE===1'b0 && SI===1'b0)
      // seq arc SD --> Q
      (SD => Q)  = (1.0,1.0);
      
      if(CK===1'b1 && D===1'b1 && SE===1'b0 && SI===1'b1)
      // seq arc SD --> Q
      (SD => Q)  = (1.0,1.0);
      
      if(CK===1'b1 && D===1'b1 && SE===1'b1 && SI===1'b0)
      // seq arc SD --> Q
      (SD => Q)  = (1.0,1.0);
      
      if(CK===1'b1 && D===1'b1 && SE===1'b1 && SI===1'b1)
      // seq arc SD --> Q
      (SD => Q)  = (1.0,1.0);
      
      ifnone
      // seq arc SD --> Q
      (SD => Q)  = (1.0,1.0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_SD_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_SD_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_SD_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_SD_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_SD_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_SD_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_SD_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_SD_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_SD_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_SD_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_SD_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_SD_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_SD_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_SD_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_SD_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_SD_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      // hold D-HL CK-LH
      $hold(posedge CK &&& (ENABLE_SD_AND_NOT_SE_AND_NOT_SI === 1'b1),
      negedge D &&& (ENABLE_SD_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold D-LH CK-LH
      $hold(posedge CK &&& (ENABLE_SD_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge D &&& (ENABLE_SD_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup D-HL CK-LH
      $setup(negedge D &&& (ENABLE_SD_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_SD_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup D-LH CK-LH
      $setup(posedge D &&& (ENABLE_SD_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_SD_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold D-HL CK-LH
      $hold(posedge CK &&& (ENABLE_SD_AND_NOT_SE_AND_SI === 1'b1),
      negedge D &&& (ENABLE_SD_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // hold D-LH CK-LH
      $hold(posedge CK &&& (ENABLE_SD_AND_NOT_SE_AND_SI === 1'b1),
      posedge D &&& (ENABLE_SD_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // setup D-HL CK-LH
      $setup(negedge D &&& (ENABLE_SD_AND_NOT_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_SD_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // setup D-LH CK-LH
      $setup(posedge D &&& (ENABLE_SD_AND_NOT_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_SD_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // recovery SD-LH CK-LH
      $recovery(posedge SD &&& (ENABLE_NOT_D_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // removal SD-LH CK-LH
      $removal(posedge SD &&& (ENABLE_NOT_D_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // recovery SD-LH CK-LH
      $recovery(posedge SD &&& (ENABLE_NOT_D_AND_NOT_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // removal SD-LH CK-LH
      $removal(posedge SD &&& (ENABLE_NOT_D_AND_NOT_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // recovery SD-LH CK-LH
      $recovery(posedge SD &&& (ENABLE_NOT_D_AND_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_SE_AND_NOT_SI === 1'b1),1.0);
      
      // removal SD-LH CK-LH
      $removal(posedge SD &&& (ENABLE_NOT_D_AND_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_SE_AND_NOT_SI === 1'b1),1.0);
      
      // recovery SD-LH CK-LH
      $recovery(posedge SD &&& (ENABLE_D_AND_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_D_AND_SE_AND_NOT_SI === 1'b1),1.0);
      
      // removal SD-LH CK-LH
      $removal(posedge SD &&& (ENABLE_D_AND_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_D_AND_SE_AND_NOT_SI === 1'b1),1.0);
      
      $width(negedge SD &&& (ENABLE_NOT_CK_AND_NOT_D_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge SD &&& (ENABLE_NOT_CK_AND_NOT_D_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge SD &&& (ENABLE_NOT_CK_AND_NOT_D_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge SD &&& (ENABLE_NOT_CK_AND_NOT_D_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge SD &&& (ENABLE_NOT_CK_AND_D_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge SD &&& (ENABLE_NOT_CK_AND_D_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge SD &&& (ENABLE_NOT_CK_AND_D_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge SD &&& (ENABLE_NOT_CK_AND_D_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge SD &&& (ENABLE_CK_AND_NOT_D_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge SD &&& (ENABLE_CK_AND_NOT_D_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge SD &&& (ENABLE_CK_AND_NOT_D_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge SD &&& (ENABLE_CK_AND_NOT_D_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge SD &&& (ENABLE_CK_AND_D_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge SD &&& (ENABLE_CK_AND_D_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge SD &&& (ENABLE_CK_AND_D_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge SD &&& (ENABLE_CK_AND_D_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      // hold SE-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D_AND_SD_AND_SI === 1'b1),
      negedge SE &&& (ENABLE_NOT_D_AND_SD_AND_SI === 1'b1),1.0);
      
      // hold SE-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D_AND_SD_AND_SI === 1'b1),
      posedge SE &&& (ENABLE_NOT_D_AND_SD_AND_SI === 1'b1),1.0);
      
      // setup SE-HL CK-LH
      $setup(negedge SE &&& (ENABLE_NOT_D_AND_SD_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_SD_AND_SI === 1'b1),1.0);
      
      // setup SE-LH CK-LH
      $setup(posedge SE &&& (ENABLE_NOT_D_AND_SD_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_SD_AND_SI === 1'b1),1.0);
      
      // hold SE-HL CK-LH
      $hold(posedge CK &&& (ENABLE_D_AND_SD_AND_NOT_SI === 1'b1),
      negedge SE &&& (ENABLE_D_AND_SD_AND_NOT_SI === 1'b1),1.0);
      
      // hold SE-LH CK-LH
      $hold(posedge CK &&& (ENABLE_D_AND_SD_AND_NOT_SI === 1'b1),
      posedge SE &&& (ENABLE_D_AND_SD_AND_NOT_SI === 1'b1),1.0);
      
      // setup SE-HL CK-LH
      $setup(negedge SE &&& (ENABLE_D_AND_SD_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_D_AND_SD_AND_NOT_SI === 1'b1),1.0);
      
      // setup SE-LH CK-LH
      $setup(posedge SE &&& (ENABLE_D_AND_SD_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_D_AND_SD_AND_NOT_SI === 1'b1),1.0);
      
      // hold SI-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D_AND_SD_AND_SE === 1'b1),
      negedge SI &&& (ENABLE_NOT_D_AND_SD_AND_SE === 1'b1),1.0);
      
      // hold SI-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D_AND_SD_AND_SE === 1'b1),
      posedge SI &&& (ENABLE_NOT_D_AND_SD_AND_SE === 1'b1),1.0);
      
      // setup SI-HL CK-LH
      $setup(negedge SI &&& (ENABLE_NOT_D_AND_SD_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_SD_AND_SE === 1'b1),1.0);
      
      // setup SI-LH CK-LH
      $setup(posedge SI &&& (ENABLE_NOT_D_AND_SD_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_SD_AND_SE === 1'b1),1.0);
      
      // hold SI-HL CK-LH
      $hold(posedge CK &&& (ENABLE_D_AND_SD_AND_SE === 1'b1),
      negedge SI &&& (ENABLE_D_AND_SD_AND_SE === 1'b1),1.0);
      
      // hold SI-LH CK-LH
      $hold(posedge CK &&& (ENABLE_D_AND_SD_AND_SE === 1'b1),
      posedge SI &&& (ENABLE_D_AND_SD_AND_SE === 1'b1),1.0);
      
      // setup SI-HL CK-LH
      $setup(negedge SI &&& (ENABLE_D_AND_SD_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_D_AND_SD_AND_SE === 1'b1),1.0);
      
      // setup SI-LH CK-LH
      $setup(posedge SI &&& (ENABLE_D_AND_SD_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_D_AND_SD_AND_SE === 1'b1),1.0);
      
      // mpw CK_lh 
      $width(posedge CK,1.0,0);
      
      // mpw CK_hl 
      $width(negedge CK,1.0,0);
      
      // mpw SD_hl 
      $width(negedge SD,1.0,0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_FSDPSBQ_V2_0P5( Q, CK, D, SI, SE, SD );
input CK, D, SD, SE, SI;
output Q;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_FSDPSBQ_V2_0P5_func SAEDRVT14_FSDPSBQ_V2_0P5_behav_inst(.Q(Q),.CK(CK),.D(D),.SI(SI),.SE(SE),.SD(SD));
`else
   SAEDRVT14_FSDPSBQ_V2_0P5_func SAEDRVT14_FSDPSBQ_V2_0P5_inst(.Q(Q),.CK(CK),.D(D),.SI(SI),.SE(SE),.SD(SD));
   // spec_gates_begin
   not MGM_G0(MGM_W0,D);
   and MGM_G1(MGM_W1,SD,MGM_W0);
   not MGM_G2(MGM_W2,SE);
   and MGM_G3(MGM_W3,MGM_W2,MGM_W1);
   not MGM_G4(MGM_W4,SI);
   and MGM_G5(ENABLE_NOT_D_AND_SD_AND_NOT_SE_AND_NOT_SI,MGM_W4,MGM_W3);
   not MGM_G6(MGM_W5,D);
   and MGM_G7(MGM_W6,SD,MGM_W5);
   not MGM_G8(MGM_W7,SE);
   and MGM_G9(MGM_W8,MGM_W7,MGM_W6);
   and MGM_G10(ENABLE_NOT_D_AND_SD_AND_NOT_SE_AND_SI,SI,MGM_W8);
   not MGM_G11(MGM_W9,D);
   and MGM_G12(MGM_W10,SD,MGM_W9);
   and MGM_G13(MGM_W11,SE,MGM_W10);
   not MGM_G14(MGM_W12,SI);
   and MGM_G15(ENABLE_NOT_D_AND_SD_AND_SE_AND_NOT_SI,MGM_W12,MGM_W11);
   not MGM_G16(MGM_W13,D);
   and MGM_G17(MGM_W14,SD,MGM_W13);
   and MGM_G18(MGM_W15,SE,MGM_W14);
   and MGM_G19(ENABLE_NOT_D_AND_SD_AND_SE_AND_SI,SI,MGM_W15);
   and MGM_G20(MGM_W16,SD,D);
   not MGM_G21(MGM_W17,SE);
   and MGM_G22(MGM_W18,MGM_W17,MGM_W16);
   not MGM_G23(MGM_W19,SI);
   and MGM_G24(ENABLE_D_AND_SD_AND_NOT_SE_AND_NOT_SI,MGM_W19,MGM_W18);
   and MGM_G25(MGM_W20,SD,D);
   not MGM_G26(MGM_W21,SE);
   and MGM_G27(MGM_W22,MGM_W21,MGM_W20);
   and MGM_G28(ENABLE_D_AND_SD_AND_NOT_SE_AND_SI,SI,MGM_W22);
   and MGM_G29(MGM_W23,SD,D);
   and MGM_G30(MGM_W24,SE,MGM_W23);
   not MGM_G31(MGM_W25,SI);
   and MGM_G32(ENABLE_D_AND_SD_AND_SE_AND_NOT_SI,MGM_W25,MGM_W24);
   and MGM_G33(MGM_W26,SD,D);
   and MGM_G34(MGM_W27,SE,MGM_W26);
   and MGM_G35(ENABLE_D_AND_SD_AND_SE_AND_SI,SI,MGM_W27);
   not MGM_G36(MGM_W28,SE);
   and MGM_G37(MGM_W29,MGM_W28,SD);
   not MGM_G38(MGM_W30,SI);
   and MGM_G39(ENABLE_SD_AND_NOT_SE_AND_NOT_SI,MGM_W30,MGM_W29);
   not MGM_G40(MGM_W31,SE);
   and MGM_G41(MGM_W32,MGM_W31,SD);
   and MGM_G42(ENABLE_SD_AND_NOT_SE_AND_SI,SI,MGM_W32);
   not MGM_G43(MGM_W33,D);
   not MGM_G44(MGM_W34,SE);
   and MGM_G45(MGM_W35,MGM_W34,MGM_W33);
   not MGM_G46(MGM_W36,SI);
   and MGM_G47(ENABLE_NOT_D_AND_NOT_SE_AND_NOT_SI,MGM_W36,MGM_W35);
   not MGM_G48(MGM_W37,D);
   not MGM_G49(MGM_W38,SE);
   and MGM_G50(MGM_W39,MGM_W38,MGM_W37);
   and MGM_G51(ENABLE_NOT_D_AND_NOT_SE_AND_SI,SI,MGM_W39);
   not MGM_G52(MGM_W40,D);
   and MGM_G53(MGM_W41,SE,MGM_W40);
   not MGM_G54(MGM_W42,SI);
   and MGM_G55(ENABLE_NOT_D_AND_SE_AND_NOT_SI,MGM_W42,MGM_W41);
   and MGM_G56(MGM_W43,SE,D);
   not MGM_G57(MGM_W44,SI);
   and MGM_G58(ENABLE_D_AND_SE_AND_NOT_SI,MGM_W44,MGM_W43);
   not MGM_G59(MGM_W45,CK);
   not MGM_G60(MGM_W46,D);
   and MGM_G61(MGM_W47,MGM_W46,MGM_W45);
   not MGM_G62(MGM_W48,SE);
   and MGM_G63(MGM_W49,MGM_W48,MGM_W47);
   not MGM_G64(MGM_W50,SI);
   and MGM_G65(ENABLE_NOT_CK_AND_NOT_D_AND_NOT_SE_AND_NOT_SI,MGM_W50,MGM_W49);
   not MGM_G66(MGM_W51,CK);
   not MGM_G67(MGM_W52,D);
   and MGM_G68(MGM_W53,MGM_W52,MGM_W51);
   not MGM_G69(MGM_W54,SE);
   and MGM_G70(MGM_W55,MGM_W54,MGM_W53);
   and MGM_G71(ENABLE_NOT_CK_AND_NOT_D_AND_NOT_SE_AND_SI,SI,MGM_W55);
   not MGM_G72(MGM_W56,CK);
   not MGM_G73(MGM_W57,D);
   and MGM_G74(MGM_W58,MGM_W57,MGM_W56);
   and MGM_G75(MGM_W59,SE,MGM_W58);
   not MGM_G76(MGM_W60,SI);
   and MGM_G77(ENABLE_NOT_CK_AND_NOT_D_AND_SE_AND_NOT_SI,MGM_W60,MGM_W59);
   not MGM_G78(MGM_W61,CK);
   not MGM_G79(MGM_W62,D);
   and MGM_G80(MGM_W63,MGM_W62,MGM_W61);
   and MGM_G81(MGM_W64,SE,MGM_W63);
   and MGM_G82(ENABLE_NOT_CK_AND_NOT_D_AND_SE_AND_SI,SI,MGM_W64);
   not MGM_G83(MGM_W65,CK);
   and MGM_G84(MGM_W66,D,MGM_W65);
   not MGM_G85(MGM_W67,SE);
   and MGM_G86(MGM_W68,MGM_W67,MGM_W66);
   not MGM_G87(MGM_W69,SI);
   and MGM_G88(ENABLE_NOT_CK_AND_D_AND_NOT_SE_AND_NOT_SI,MGM_W69,MGM_W68);
   not MGM_G89(MGM_W70,CK);
   and MGM_G90(MGM_W71,D,MGM_W70);
   not MGM_G91(MGM_W72,SE);
   and MGM_G92(MGM_W73,MGM_W72,MGM_W71);
   and MGM_G93(ENABLE_NOT_CK_AND_D_AND_NOT_SE_AND_SI,SI,MGM_W73);
   not MGM_G94(MGM_W74,CK);
   and MGM_G95(MGM_W75,D,MGM_W74);
   and MGM_G96(MGM_W76,SE,MGM_W75);
   not MGM_G97(MGM_W77,SI);
   and MGM_G98(ENABLE_NOT_CK_AND_D_AND_SE_AND_NOT_SI,MGM_W77,MGM_W76);
   not MGM_G99(MGM_W78,CK);
   and MGM_G100(MGM_W79,D,MGM_W78);
   and MGM_G101(MGM_W80,SE,MGM_W79);
   and MGM_G102(ENABLE_NOT_CK_AND_D_AND_SE_AND_SI,SI,MGM_W80);
   not MGM_G103(MGM_W81,D);
   and MGM_G104(MGM_W82,MGM_W81,CK);
   not MGM_G105(MGM_W83,SE);
   and MGM_G106(MGM_W84,MGM_W83,MGM_W82);
   not MGM_G107(MGM_W85,SI);
   and MGM_G108(ENABLE_CK_AND_NOT_D_AND_NOT_SE_AND_NOT_SI,MGM_W85,MGM_W84);
   not MGM_G109(MGM_W86,D);
   and MGM_G110(MGM_W87,MGM_W86,CK);
   not MGM_G111(MGM_W88,SE);
   and MGM_G112(MGM_W89,MGM_W88,MGM_W87);
   and MGM_G113(ENABLE_CK_AND_NOT_D_AND_NOT_SE_AND_SI,SI,MGM_W89);
   not MGM_G114(MGM_W90,D);
   and MGM_G115(MGM_W91,MGM_W90,CK);
   and MGM_G116(MGM_W92,SE,MGM_W91);
   not MGM_G117(MGM_W93,SI);
   and MGM_G118(ENABLE_CK_AND_NOT_D_AND_SE_AND_NOT_SI,MGM_W93,MGM_W92);
   not MGM_G119(MGM_W94,D);
   and MGM_G120(MGM_W95,MGM_W94,CK);
   and MGM_G121(MGM_W96,SE,MGM_W95);
   and MGM_G122(ENABLE_CK_AND_NOT_D_AND_SE_AND_SI,SI,MGM_W96);
   and MGM_G123(MGM_W97,D,CK);
   not MGM_G124(MGM_W98,SE);
   and MGM_G125(MGM_W99,MGM_W98,MGM_W97);
   not MGM_G126(MGM_W100,SI);
   and MGM_G127(ENABLE_CK_AND_D_AND_NOT_SE_AND_NOT_SI,MGM_W100,MGM_W99);
   and MGM_G128(MGM_W101,D,CK);
   not MGM_G129(MGM_W102,SE);
   and MGM_G130(MGM_W103,MGM_W102,MGM_W101);
   and MGM_G131(ENABLE_CK_AND_D_AND_NOT_SE_AND_SI,SI,MGM_W103);
   and MGM_G132(MGM_W104,D,CK);
   and MGM_G133(MGM_W105,SE,MGM_W104);
   not MGM_G134(MGM_W106,SI);
   and MGM_G135(ENABLE_CK_AND_D_AND_SE_AND_NOT_SI,MGM_W106,MGM_W105);
   and MGM_G136(MGM_W107,D,CK);
   and MGM_G137(MGM_W108,SE,MGM_W107);
   and MGM_G138(ENABLE_CK_AND_D_AND_SE_AND_SI,SI,MGM_W108);
   not MGM_G139(MGM_W109,D);
   and MGM_G140(MGM_W110,SD,MGM_W109);
   and MGM_G141(ENABLE_NOT_D_AND_SD_AND_SI,SI,MGM_W110);
   and MGM_G142(MGM_W111,SD,D);
   not MGM_G143(MGM_W112,SI);
   and MGM_G144(ENABLE_D_AND_SD_AND_NOT_SI,MGM_W112,MGM_W111);
   not MGM_G145(MGM_W113,D);
   and MGM_G146(MGM_W114,SD,MGM_W113);
   and MGM_G147(ENABLE_NOT_D_AND_SD_AND_SE,SE,MGM_W114);
   and MGM_G148(MGM_W115,SD,D);
   and MGM_G149(ENABLE_D_AND_SD_AND_SE,SE,MGM_W115);
   // spec_gates_end
   // specify_block_begin
   specify

      if(D===1'b0 && SI===1'b1)
      // seq arc CK --> Q
      (posedge CK => (Q : SE))  = (1.0,1.0);
      
      if(SE===1'b0 && SI===1'b0)
      // seq arc CK --> Q
      (posedge CK => (Q : D))  = (1.0,1.0);
      
      if(D===1'b1 && SE===1'b0 && SI===1'b1 || D===1'b0 && SE===1'b1 && SI===1'b0)
      // seq arc CK --> Q
      (posedge CK => (Q : D))  = (1.0,1.0);
      
      if(D===1'b1 && SE===1'b1)
      // seq arc CK --> Q
      (posedge CK => (Q : SI))  = (1.0,1.0);
      
      ifnone
      // seq arc CK --> Q
      (posedge CK => (Q : D))  = (1.0,1.0);
      
      if(CK===1'b0 && D===1'b0 && SE===1'b0 && SI===1'b0)
      // seq arc SD --> Q
      (SD => Q)  = (1.0,1.0);
      
      if(CK===1'b0 && D===1'b0 && SE===1'b0 && SI===1'b1)
      // seq arc SD --> Q
      (SD => Q)  = (1.0,1.0);
      
      if(CK===1'b0 && D===1'b0 && SE===1'b1 && SI===1'b0)
      // seq arc SD --> Q
      (SD => Q)  = (1.0,1.0);
      
      if(CK===1'b0 && D===1'b0 && SE===1'b1 && SI===1'b1)
      // seq arc SD --> Q
      (SD => Q)  = (1.0,1.0);
      
      if(CK===1'b0 && D===1'b1 && SE===1'b0 && SI===1'b0)
      // seq arc SD --> Q
      (SD => Q)  = (1.0,1.0);
      
      if(CK===1'b0 && D===1'b1 && SE===1'b0 && SI===1'b1)
      // seq arc SD --> Q
      (SD => Q)  = (1.0,1.0);
      
      if(CK===1'b0 && D===1'b1 && SE===1'b1 && SI===1'b0)
      // seq arc SD --> Q
      (SD => Q)  = (1.0,1.0);
      
      if(CK===1'b0 && D===1'b1 && SE===1'b1 && SI===1'b1)
      // seq arc SD --> Q
      (SD => Q)  = (1.0,1.0);
      
      if(CK===1'b1 && D===1'b0 && SE===1'b0 && SI===1'b0)
      // seq arc SD --> Q
      (SD => Q)  = (1.0,1.0);
      
      if(CK===1'b1 && D===1'b0 && SE===1'b0 && SI===1'b1)
      // seq arc SD --> Q
      (SD => Q)  = (1.0,1.0);
      
      if(CK===1'b1 && D===1'b0 && SE===1'b1 && SI===1'b0)
      // seq arc SD --> Q
      (SD => Q)  = (1.0,1.0);
      
      if(CK===1'b1 && D===1'b0 && SE===1'b1 && SI===1'b1)
      // seq arc SD --> Q
      (SD => Q)  = (1.0,1.0);
      
      if(CK===1'b1 && D===1'b1 && SE===1'b0 && SI===1'b0)
      // seq arc SD --> Q
      (SD => Q)  = (1.0,1.0);
      
      if(CK===1'b1 && D===1'b1 && SE===1'b0 && SI===1'b1)
      // seq arc SD --> Q
      (SD => Q)  = (1.0,1.0);
      
      if(CK===1'b1 && D===1'b1 && SE===1'b1 && SI===1'b0)
      // seq arc SD --> Q
      (SD => Q)  = (1.0,1.0);
      
      if(CK===1'b1 && D===1'b1 && SE===1'b1 && SI===1'b1)
      // seq arc SD --> Q
      (SD => Q)  = (1.0,1.0);
      
      ifnone
      // seq arc SD --> Q
      (SD => Q)  = (1.0,1.0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_SD_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_SD_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_SD_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_SD_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_SD_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_SD_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_SD_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_SD_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_SD_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_SD_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_SD_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_SD_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_SD_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_SD_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_SD_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_SD_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      // hold D-HL CK-LH
      $hold(posedge CK &&& (ENABLE_SD_AND_NOT_SE_AND_NOT_SI === 1'b1),
      negedge D &&& (ENABLE_SD_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold D-LH CK-LH
      $hold(posedge CK &&& (ENABLE_SD_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge D &&& (ENABLE_SD_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup D-HL CK-LH
      $setup(negedge D &&& (ENABLE_SD_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_SD_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup D-LH CK-LH
      $setup(posedge D &&& (ENABLE_SD_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_SD_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold D-HL CK-LH
      $hold(posedge CK &&& (ENABLE_SD_AND_NOT_SE_AND_SI === 1'b1),
      negedge D &&& (ENABLE_SD_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // hold D-LH CK-LH
      $hold(posedge CK &&& (ENABLE_SD_AND_NOT_SE_AND_SI === 1'b1),
      posedge D &&& (ENABLE_SD_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // setup D-HL CK-LH
      $setup(negedge D &&& (ENABLE_SD_AND_NOT_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_SD_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // setup D-LH CK-LH
      $setup(posedge D &&& (ENABLE_SD_AND_NOT_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_SD_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // recovery SD-LH CK-LH
      $recovery(posedge SD &&& (ENABLE_NOT_D_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // removal SD-LH CK-LH
      $removal(posedge SD &&& (ENABLE_NOT_D_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // recovery SD-LH CK-LH
      $recovery(posedge SD &&& (ENABLE_NOT_D_AND_NOT_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // removal SD-LH CK-LH
      $removal(posedge SD &&& (ENABLE_NOT_D_AND_NOT_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // recovery SD-LH CK-LH
      $recovery(posedge SD &&& (ENABLE_NOT_D_AND_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_SE_AND_NOT_SI === 1'b1),1.0);
      
      // removal SD-LH CK-LH
      $removal(posedge SD &&& (ENABLE_NOT_D_AND_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_SE_AND_NOT_SI === 1'b1),1.0);
      
      // recovery SD-LH CK-LH
      $recovery(posedge SD &&& (ENABLE_D_AND_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_D_AND_SE_AND_NOT_SI === 1'b1),1.0);
      
      // removal SD-LH CK-LH
      $removal(posedge SD &&& (ENABLE_D_AND_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_D_AND_SE_AND_NOT_SI === 1'b1),1.0);
      
      $width(negedge SD &&& (ENABLE_NOT_CK_AND_NOT_D_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge SD &&& (ENABLE_NOT_CK_AND_NOT_D_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge SD &&& (ENABLE_NOT_CK_AND_NOT_D_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge SD &&& (ENABLE_NOT_CK_AND_NOT_D_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge SD &&& (ENABLE_NOT_CK_AND_D_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge SD &&& (ENABLE_NOT_CK_AND_D_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge SD &&& (ENABLE_NOT_CK_AND_D_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge SD &&& (ENABLE_NOT_CK_AND_D_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge SD &&& (ENABLE_CK_AND_NOT_D_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge SD &&& (ENABLE_CK_AND_NOT_D_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge SD &&& (ENABLE_CK_AND_NOT_D_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge SD &&& (ENABLE_CK_AND_NOT_D_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge SD &&& (ENABLE_CK_AND_D_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge SD &&& (ENABLE_CK_AND_D_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge SD &&& (ENABLE_CK_AND_D_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge SD &&& (ENABLE_CK_AND_D_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      // hold SE-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D_AND_SD_AND_SI === 1'b1),
      negedge SE &&& (ENABLE_NOT_D_AND_SD_AND_SI === 1'b1),1.0);
      
      // hold SE-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D_AND_SD_AND_SI === 1'b1),
      posedge SE &&& (ENABLE_NOT_D_AND_SD_AND_SI === 1'b1),1.0);
      
      // setup SE-HL CK-LH
      $setup(negedge SE &&& (ENABLE_NOT_D_AND_SD_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_SD_AND_SI === 1'b1),1.0);
      
      // setup SE-LH CK-LH
      $setup(posedge SE &&& (ENABLE_NOT_D_AND_SD_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_SD_AND_SI === 1'b1),1.0);
      
      // hold SE-HL CK-LH
      $hold(posedge CK &&& (ENABLE_D_AND_SD_AND_NOT_SI === 1'b1),
      negedge SE &&& (ENABLE_D_AND_SD_AND_NOT_SI === 1'b1),1.0);
      
      // hold SE-LH CK-LH
      $hold(posedge CK &&& (ENABLE_D_AND_SD_AND_NOT_SI === 1'b1),
      posedge SE &&& (ENABLE_D_AND_SD_AND_NOT_SI === 1'b1),1.0);
      
      // setup SE-HL CK-LH
      $setup(negedge SE &&& (ENABLE_D_AND_SD_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_D_AND_SD_AND_NOT_SI === 1'b1),1.0);
      
      // setup SE-LH CK-LH
      $setup(posedge SE &&& (ENABLE_D_AND_SD_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_D_AND_SD_AND_NOT_SI === 1'b1),1.0);
      
      // hold SI-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D_AND_SD_AND_SE === 1'b1),
      negedge SI &&& (ENABLE_NOT_D_AND_SD_AND_SE === 1'b1),1.0);
      
      // hold SI-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D_AND_SD_AND_SE === 1'b1),
      posedge SI &&& (ENABLE_NOT_D_AND_SD_AND_SE === 1'b1),1.0);
      
      // setup SI-HL CK-LH
      $setup(negedge SI &&& (ENABLE_NOT_D_AND_SD_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_SD_AND_SE === 1'b1),1.0);
      
      // setup SI-LH CK-LH
      $setup(posedge SI &&& (ENABLE_NOT_D_AND_SD_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_SD_AND_SE === 1'b1),1.0);
      
      // hold SI-HL CK-LH
      $hold(posedge CK &&& (ENABLE_D_AND_SD_AND_SE === 1'b1),
      negedge SI &&& (ENABLE_D_AND_SD_AND_SE === 1'b1),1.0);
      
      // hold SI-LH CK-LH
      $hold(posedge CK &&& (ENABLE_D_AND_SD_AND_SE === 1'b1),
      posedge SI &&& (ENABLE_D_AND_SD_AND_SE === 1'b1),1.0);
      
      // setup SI-HL CK-LH
      $setup(negedge SI &&& (ENABLE_D_AND_SD_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_D_AND_SD_AND_SE === 1'b1),1.0);
      
      // setup SI-LH CK-LH
      $setup(posedge SI &&& (ENABLE_D_AND_SD_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_D_AND_SD_AND_SE === 1'b1),1.0);
      
      // mpw CK_lh 
      $width(posedge CK,1.0,0);
      
      // mpw CK_hl 
      $width(negedge CK,1.0,0);
      
      // mpw SD_hl 
      $width(negedge SD,1.0,0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_FSDPSBQ_V2_1( Q, CK, D, SI, SE, SD );
input CK, D, SD, SE, SI;
output Q;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_FSDPSBQ_V2_1_func SAEDRVT14_FSDPSBQ_V2_1_behav_inst(.Q(Q),.CK(CK),.D(D),.SI(SI),.SE(SE),.SD(SD));
`else
   SAEDRVT14_FSDPSBQ_V2_1_func SAEDRVT14_FSDPSBQ_V2_1_inst(.Q(Q),.CK(CK),.D(D),.SI(SI),.SE(SE),.SD(SD));
   // spec_gates_begin
   not MGM_G0(MGM_W0,D);
   and MGM_G1(MGM_W1,SD,MGM_W0);
   not MGM_G2(MGM_W2,SE);
   and MGM_G3(MGM_W3,MGM_W2,MGM_W1);
   not MGM_G4(MGM_W4,SI);
   and MGM_G5(ENABLE_NOT_D_AND_SD_AND_NOT_SE_AND_NOT_SI,MGM_W4,MGM_W3);
   not MGM_G6(MGM_W5,D);
   and MGM_G7(MGM_W6,SD,MGM_W5);
   not MGM_G8(MGM_W7,SE);
   and MGM_G9(MGM_W8,MGM_W7,MGM_W6);
   and MGM_G10(ENABLE_NOT_D_AND_SD_AND_NOT_SE_AND_SI,SI,MGM_W8);
   not MGM_G11(MGM_W9,D);
   and MGM_G12(MGM_W10,SD,MGM_W9);
   and MGM_G13(MGM_W11,SE,MGM_W10);
   not MGM_G14(MGM_W12,SI);
   and MGM_G15(ENABLE_NOT_D_AND_SD_AND_SE_AND_NOT_SI,MGM_W12,MGM_W11);
   not MGM_G16(MGM_W13,D);
   and MGM_G17(MGM_W14,SD,MGM_W13);
   and MGM_G18(MGM_W15,SE,MGM_W14);
   and MGM_G19(ENABLE_NOT_D_AND_SD_AND_SE_AND_SI,SI,MGM_W15);
   and MGM_G20(MGM_W16,SD,D);
   not MGM_G21(MGM_W17,SE);
   and MGM_G22(MGM_W18,MGM_W17,MGM_W16);
   not MGM_G23(MGM_W19,SI);
   and MGM_G24(ENABLE_D_AND_SD_AND_NOT_SE_AND_NOT_SI,MGM_W19,MGM_W18);
   and MGM_G25(MGM_W20,SD,D);
   not MGM_G26(MGM_W21,SE);
   and MGM_G27(MGM_W22,MGM_W21,MGM_W20);
   and MGM_G28(ENABLE_D_AND_SD_AND_NOT_SE_AND_SI,SI,MGM_W22);
   and MGM_G29(MGM_W23,SD,D);
   and MGM_G30(MGM_W24,SE,MGM_W23);
   not MGM_G31(MGM_W25,SI);
   and MGM_G32(ENABLE_D_AND_SD_AND_SE_AND_NOT_SI,MGM_W25,MGM_W24);
   and MGM_G33(MGM_W26,SD,D);
   and MGM_G34(MGM_W27,SE,MGM_W26);
   and MGM_G35(ENABLE_D_AND_SD_AND_SE_AND_SI,SI,MGM_W27);
   not MGM_G36(MGM_W28,SE);
   and MGM_G37(MGM_W29,MGM_W28,SD);
   not MGM_G38(MGM_W30,SI);
   and MGM_G39(ENABLE_SD_AND_NOT_SE_AND_NOT_SI,MGM_W30,MGM_W29);
   not MGM_G40(MGM_W31,SE);
   and MGM_G41(MGM_W32,MGM_W31,SD);
   and MGM_G42(ENABLE_SD_AND_NOT_SE_AND_SI,SI,MGM_W32);
   not MGM_G43(MGM_W33,D);
   not MGM_G44(MGM_W34,SE);
   and MGM_G45(MGM_W35,MGM_W34,MGM_W33);
   not MGM_G46(MGM_W36,SI);
   and MGM_G47(ENABLE_NOT_D_AND_NOT_SE_AND_NOT_SI,MGM_W36,MGM_W35);
   not MGM_G48(MGM_W37,D);
   not MGM_G49(MGM_W38,SE);
   and MGM_G50(MGM_W39,MGM_W38,MGM_W37);
   and MGM_G51(ENABLE_NOT_D_AND_NOT_SE_AND_SI,SI,MGM_W39);
   not MGM_G52(MGM_W40,D);
   and MGM_G53(MGM_W41,SE,MGM_W40);
   not MGM_G54(MGM_W42,SI);
   and MGM_G55(ENABLE_NOT_D_AND_SE_AND_NOT_SI,MGM_W42,MGM_W41);
   and MGM_G56(MGM_W43,SE,D);
   not MGM_G57(MGM_W44,SI);
   and MGM_G58(ENABLE_D_AND_SE_AND_NOT_SI,MGM_W44,MGM_W43);
   not MGM_G59(MGM_W45,CK);
   not MGM_G60(MGM_W46,D);
   and MGM_G61(MGM_W47,MGM_W46,MGM_W45);
   not MGM_G62(MGM_W48,SE);
   and MGM_G63(MGM_W49,MGM_W48,MGM_W47);
   not MGM_G64(MGM_W50,SI);
   and MGM_G65(ENABLE_NOT_CK_AND_NOT_D_AND_NOT_SE_AND_NOT_SI,MGM_W50,MGM_W49);
   not MGM_G66(MGM_W51,CK);
   not MGM_G67(MGM_W52,D);
   and MGM_G68(MGM_W53,MGM_W52,MGM_W51);
   not MGM_G69(MGM_W54,SE);
   and MGM_G70(MGM_W55,MGM_W54,MGM_W53);
   and MGM_G71(ENABLE_NOT_CK_AND_NOT_D_AND_NOT_SE_AND_SI,SI,MGM_W55);
   not MGM_G72(MGM_W56,CK);
   not MGM_G73(MGM_W57,D);
   and MGM_G74(MGM_W58,MGM_W57,MGM_W56);
   and MGM_G75(MGM_W59,SE,MGM_W58);
   not MGM_G76(MGM_W60,SI);
   and MGM_G77(ENABLE_NOT_CK_AND_NOT_D_AND_SE_AND_NOT_SI,MGM_W60,MGM_W59);
   not MGM_G78(MGM_W61,CK);
   not MGM_G79(MGM_W62,D);
   and MGM_G80(MGM_W63,MGM_W62,MGM_W61);
   and MGM_G81(MGM_W64,SE,MGM_W63);
   and MGM_G82(ENABLE_NOT_CK_AND_NOT_D_AND_SE_AND_SI,SI,MGM_W64);
   not MGM_G83(MGM_W65,CK);
   and MGM_G84(MGM_W66,D,MGM_W65);
   not MGM_G85(MGM_W67,SE);
   and MGM_G86(MGM_W68,MGM_W67,MGM_W66);
   not MGM_G87(MGM_W69,SI);
   and MGM_G88(ENABLE_NOT_CK_AND_D_AND_NOT_SE_AND_NOT_SI,MGM_W69,MGM_W68);
   not MGM_G89(MGM_W70,CK);
   and MGM_G90(MGM_W71,D,MGM_W70);
   not MGM_G91(MGM_W72,SE);
   and MGM_G92(MGM_W73,MGM_W72,MGM_W71);
   and MGM_G93(ENABLE_NOT_CK_AND_D_AND_NOT_SE_AND_SI,SI,MGM_W73);
   not MGM_G94(MGM_W74,CK);
   and MGM_G95(MGM_W75,D,MGM_W74);
   and MGM_G96(MGM_W76,SE,MGM_W75);
   not MGM_G97(MGM_W77,SI);
   and MGM_G98(ENABLE_NOT_CK_AND_D_AND_SE_AND_NOT_SI,MGM_W77,MGM_W76);
   not MGM_G99(MGM_W78,CK);
   and MGM_G100(MGM_W79,D,MGM_W78);
   and MGM_G101(MGM_W80,SE,MGM_W79);
   and MGM_G102(ENABLE_NOT_CK_AND_D_AND_SE_AND_SI,SI,MGM_W80);
   not MGM_G103(MGM_W81,D);
   and MGM_G104(MGM_W82,MGM_W81,CK);
   not MGM_G105(MGM_W83,SE);
   and MGM_G106(MGM_W84,MGM_W83,MGM_W82);
   not MGM_G107(MGM_W85,SI);
   and MGM_G108(ENABLE_CK_AND_NOT_D_AND_NOT_SE_AND_NOT_SI,MGM_W85,MGM_W84);
   not MGM_G109(MGM_W86,D);
   and MGM_G110(MGM_W87,MGM_W86,CK);
   not MGM_G111(MGM_W88,SE);
   and MGM_G112(MGM_W89,MGM_W88,MGM_W87);
   and MGM_G113(ENABLE_CK_AND_NOT_D_AND_NOT_SE_AND_SI,SI,MGM_W89);
   not MGM_G114(MGM_W90,D);
   and MGM_G115(MGM_W91,MGM_W90,CK);
   and MGM_G116(MGM_W92,SE,MGM_W91);
   not MGM_G117(MGM_W93,SI);
   and MGM_G118(ENABLE_CK_AND_NOT_D_AND_SE_AND_NOT_SI,MGM_W93,MGM_W92);
   not MGM_G119(MGM_W94,D);
   and MGM_G120(MGM_W95,MGM_W94,CK);
   and MGM_G121(MGM_W96,SE,MGM_W95);
   and MGM_G122(ENABLE_CK_AND_NOT_D_AND_SE_AND_SI,SI,MGM_W96);
   and MGM_G123(MGM_W97,D,CK);
   not MGM_G124(MGM_W98,SE);
   and MGM_G125(MGM_W99,MGM_W98,MGM_W97);
   not MGM_G126(MGM_W100,SI);
   and MGM_G127(ENABLE_CK_AND_D_AND_NOT_SE_AND_NOT_SI,MGM_W100,MGM_W99);
   and MGM_G128(MGM_W101,D,CK);
   not MGM_G129(MGM_W102,SE);
   and MGM_G130(MGM_W103,MGM_W102,MGM_W101);
   and MGM_G131(ENABLE_CK_AND_D_AND_NOT_SE_AND_SI,SI,MGM_W103);
   and MGM_G132(MGM_W104,D,CK);
   and MGM_G133(MGM_W105,SE,MGM_W104);
   not MGM_G134(MGM_W106,SI);
   and MGM_G135(ENABLE_CK_AND_D_AND_SE_AND_NOT_SI,MGM_W106,MGM_W105);
   and MGM_G136(MGM_W107,D,CK);
   and MGM_G137(MGM_W108,SE,MGM_W107);
   and MGM_G138(ENABLE_CK_AND_D_AND_SE_AND_SI,SI,MGM_W108);
   not MGM_G139(MGM_W109,D);
   and MGM_G140(MGM_W110,SD,MGM_W109);
   and MGM_G141(ENABLE_NOT_D_AND_SD_AND_SI,SI,MGM_W110);
   and MGM_G142(MGM_W111,SD,D);
   not MGM_G143(MGM_W112,SI);
   and MGM_G144(ENABLE_D_AND_SD_AND_NOT_SI,MGM_W112,MGM_W111);
   not MGM_G145(MGM_W113,D);
   and MGM_G146(MGM_W114,SD,MGM_W113);
   and MGM_G147(ENABLE_NOT_D_AND_SD_AND_SE,SE,MGM_W114);
   and MGM_G148(MGM_W115,SD,D);
   and MGM_G149(ENABLE_D_AND_SD_AND_SE,SE,MGM_W115);
   // spec_gates_end
   // specify_block_begin
   specify

      if(D===1'b0 && SI===1'b1)
      // seq arc CK --> Q
      (posedge CK => (Q : SE))  = (1.0,1.0);
      
      if(SE===1'b0 && SI===1'b0)
      // seq arc CK --> Q
      (posedge CK => (Q : D))  = (1.0,1.0);
      
      if(D===1'b1 && SE===1'b0 && SI===1'b1 || D===1'b0 && SE===1'b1 && SI===1'b0)
      // seq arc CK --> Q
      (posedge CK => (Q : D))  = (1.0,1.0);
      
      if(D===1'b1 && SE===1'b1)
      // seq arc CK --> Q
      (posedge CK => (Q : SI))  = (1.0,1.0);
      
      ifnone
      // seq arc CK --> Q
      (posedge CK => (Q : D))  = (1.0,1.0);
      
      if(CK===1'b0 && D===1'b0 && SE===1'b0 && SI===1'b0)
      // seq arc SD --> Q
      (SD => Q)  = (1.0,1.0);
      
      if(CK===1'b0 && D===1'b0 && SE===1'b0 && SI===1'b1)
      // seq arc SD --> Q
      (SD => Q)  = (1.0,1.0);
      
      if(CK===1'b0 && D===1'b0 && SE===1'b1 && SI===1'b0)
      // seq arc SD --> Q
      (SD => Q)  = (1.0,1.0);
      
      if(CK===1'b0 && D===1'b0 && SE===1'b1 && SI===1'b1)
      // seq arc SD --> Q
      (SD => Q)  = (1.0,1.0);
      
      if(CK===1'b0 && D===1'b1 && SE===1'b0 && SI===1'b0)
      // seq arc SD --> Q
      (SD => Q)  = (1.0,1.0);
      
      if(CK===1'b0 && D===1'b1 && SE===1'b0 && SI===1'b1)
      // seq arc SD --> Q
      (SD => Q)  = (1.0,1.0);
      
      if(CK===1'b0 && D===1'b1 && SE===1'b1 && SI===1'b0)
      // seq arc SD --> Q
      (SD => Q)  = (1.0,1.0);
      
      if(CK===1'b0 && D===1'b1 && SE===1'b1 && SI===1'b1)
      // seq arc SD --> Q
      (SD => Q)  = (1.0,1.0);
      
      if(CK===1'b1 && D===1'b0 && SE===1'b0 && SI===1'b0)
      // seq arc SD --> Q
      (SD => Q)  = (1.0,1.0);
      
      if(CK===1'b1 && D===1'b0 && SE===1'b0 && SI===1'b1)
      // seq arc SD --> Q
      (SD => Q)  = (1.0,1.0);
      
      if(CK===1'b1 && D===1'b0 && SE===1'b1 && SI===1'b0)
      // seq arc SD --> Q
      (SD => Q)  = (1.0,1.0);
      
      if(CK===1'b1 && D===1'b0 && SE===1'b1 && SI===1'b1)
      // seq arc SD --> Q
      (SD => Q)  = (1.0,1.0);
      
      if(CK===1'b1 && D===1'b1 && SE===1'b0 && SI===1'b0)
      // seq arc SD --> Q
      (SD => Q)  = (1.0,1.0);
      
      if(CK===1'b1 && D===1'b1 && SE===1'b0 && SI===1'b1)
      // seq arc SD --> Q
      (SD => Q)  = (1.0,1.0);
      
      if(CK===1'b1 && D===1'b1 && SE===1'b1 && SI===1'b0)
      // seq arc SD --> Q
      (SD => Q)  = (1.0,1.0);
      
      if(CK===1'b1 && D===1'b1 && SE===1'b1 && SI===1'b1)
      // seq arc SD --> Q
      (SD => Q)  = (1.0,1.0);
      
      ifnone
      // seq arc SD --> Q
      (SD => Q)  = (1.0,1.0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_SD_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_SD_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_SD_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_SD_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_SD_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_SD_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_SD_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_SD_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_SD_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_SD_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_SD_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_SD_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_SD_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_SD_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_SD_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_SD_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      // hold D-HL CK-LH
      $hold(posedge CK &&& (ENABLE_SD_AND_NOT_SE_AND_NOT_SI === 1'b1),
      negedge D &&& (ENABLE_SD_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold D-LH CK-LH
      $hold(posedge CK &&& (ENABLE_SD_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge D &&& (ENABLE_SD_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup D-HL CK-LH
      $setup(negedge D &&& (ENABLE_SD_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_SD_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup D-LH CK-LH
      $setup(posedge D &&& (ENABLE_SD_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_SD_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold D-HL CK-LH
      $hold(posedge CK &&& (ENABLE_SD_AND_NOT_SE_AND_SI === 1'b1),
      negedge D &&& (ENABLE_SD_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // hold D-LH CK-LH
      $hold(posedge CK &&& (ENABLE_SD_AND_NOT_SE_AND_SI === 1'b1),
      posedge D &&& (ENABLE_SD_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // setup D-HL CK-LH
      $setup(negedge D &&& (ENABLE_SD_AND_NOT_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_SD_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // setup D-LH CK-LH
      $setup(posedge D &&& (ENABLE_SD_AND_NOT_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_SD_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // recovery SD-LH CK-LH
      $recovery(posedge SD &&& (ENABLE_NOT_D_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // removal SD-LH CK-LH
      $removal(posedge SD &&& (ENABLE_NOT_D_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // recovery SD-LH CK-LH
      $recovery(posedge SD &&& (ENABLE_NOT_D_AND_NOT_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // removal SD-LH CK-LH
      $removal(posedge SD &&& (ENABLE_NOT_D_AND_NOT_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // recovery SD-LH CK-LH
      $recovery(posedge SD &&& (ENABLE_NOT_D_AND_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_SE_AND_NOT_SI === 1'b1),1.0);
      
      // removal SD-LH CK-LH
      $removal(posedge SD &&& (ENABLE_NOT_D_AND_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_SE_AND_NOT_SI === 1'b1),1.0);
      
      // recovery SD-LH CK-LH
      $recovery(posedge SD &&& (ENABLE_D_AND_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_D_AND_SE_AND_NOT_SI === 1'b1),1.0);
      
      // removal SD-LH CK-LH
      $removal(posedge SD &&& (ENABLE_D_AND_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_D_AND_SE_AND_NOT_SI === 1'b1),1.0);
      
      $width(negedge SD &&& (ENABLE_NOT_CK_AND_NOT_D_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge SD &&& (ENABLE_NOT_CK_AND_NOT_D_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge SD &&& (ENABLE_NOT_CK_AND_NOT_D_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge SD &&& (ENABLE_NOT_CK_AND_NOT_D_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge SD &&& (ENABLE_NOT_CK_AND_D_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge SD &&& (ENABLE_NOT_CK_AND_D_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge SD &&& (ENABLE_NOT_CK_AND_D_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge SD &&& (ENABLE_NOT_CK_AND_D_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge SD &&& (ENABLE_CK_AND_NOT_D_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge SD &&& (ENABLE_CK_AND_NOT_D_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge SD &&& (ENABLE_CK_AND_NOT_D_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge SD &&& (ENABLE_CK_AND_NOT_D_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge SD &&& (ENABLE_CK_AND_D_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge SD &&& (ENABLE_CK_AND_D_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge SD &&& (ENABLE_CK_AND_D_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge SD &&& (ENABLE_CK_AND_D_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      // hold SE-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D_AND_SD_AND_SI === 1'b1),
      negedge SE &&& (ENABLE_NOT_D_AND_SD_AND_SI === 1'b1),1.0);
      
      // hold SE-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D_AND_SD_AND_SI === 1'b1),
      posedge SE &&& (ENABLE_NOT_D_AND_SD_AND_SI === 1'b1),1.0);
      
      // setup SE-HL CK-LH
      $setup(negedge SE &&& (ENABLE_NOT_D_AND_SD_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_SD_AND_SI === 1'b1),1.0);
      
      // setup SE-LH CK-LH
      $setup(posedge SE &&& (ENABLE_NOT_D_AND_SD_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_SD_AND_SI === 1'b1),1.0);
      
      // hold SE-HL CK-LH
      $hold(posedge CK &&& (ENABLE_D_AND_SD_AND_NOT_SI === 1'b1),
      negedge SE &&& (ENABLE_D_AND_SD_AND_NOT_SI === 1'b1),1.0);
      
      // hold SE-LH CK-LH
      $hold(posedge CK &&& (ENABLE_D_AND_SD_AND_NOT_SI === 1'b1),
      posedge SE &&& (ENABLE_D_AND_SD_AND_NOT_SI === 1'b1),1.0);
      
      // setup SE-HL CK-LH
      $setup(negedge SE &&& (ENABLE_D_AND_SD_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_D_AND_SD_AND_NOT_SI === 1'b1),1.0);
      
      // setup SE-LH CK-LH
      $setup(posedge SE &&& (ENABLE_D_AND_SD_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_D_AND_SD_AND_NOT_SI === 1'b1),1.0);
      
      // hold SI-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D_AND_SD_AND_SE === 1'b1),
      negedge SI &&& (ENABLE_NOT_D_AND_SD_AND_SE === 1'b1),1.0);
      
      // hold SI-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D_AND_SD_AND_SE === 1'b1),
      posedge SI &&& (ENABLE_NOT_D_AND_SD_AND_SE === 1'b1),1.0);
      
      // setup SI-HL CK-LH
      $setup(negedge SI &&& (ENABLE_NOT_D_AND_SD_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_SD_AND_SE === 1'b1),1.0);
      
      // setup SI-LH CK-LH
      $setup(posedge SI &&& (ENABLE_NOT_D_AND_SD_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_SD_AND_SE === 1'b1),1.0);
      
      // hold SI-HL CK-LH
      $hold(posedge CK &&& (ENABLE_D_AND_SD_AND_SE === 1'b1),
      negedge SI &&& (ENABLE_D_AND_SD_AND_SE === 1'b1),1.0);
      
      // hold SI-LH CK-LH
      $hold(posedge CK &&& (ENABLE_D_AND_SD_AND_SE === 1'b1),
      posedge SI &&& (ENABLE_D_AND_SD_AND_SE === 1'b1),1.0);
      
      // setup SI-HL CK-LH
      $setup(negedge SI &&& (ENABLE_D_AND_SD_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_D_AND_SD_AND_SE === 1'b1),1.0);
      
      // setup SI-LH CK-LH
      $setup(posedge SI &&& (ENABLE_D_AND_SD_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_D_AND_SD_AND_SE === 1'b1),1.0);
      
      // mpw CK_lh 
      $width(posedge CK,1.0,0);
      
      // mpw CK_hl 
      $width(negedge CK,1.0,0);
      
      // mpw SD_hl 
      $width(negedge SD,1.0,0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_FSDPSBQ_V2_2( Q, CK, D, SI, SE, SD );
input CK, D, SD, SE, SI;
output Q;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_FSDPSBQ_V2_2_func SAEDRVT14_FSDPSBQ_V2_2_behav_inst(.Q(Q),.CK(CK),.D(D),.SI(SI),.SE(SE),.SD(SD));
`else
   SAEDRVT14_FSDPSBQ_V2_2_func SAEDRVT14_FSDPSBQ_V2_2_inst(.Q(Q),.CK(CK),.D(D),.SI(SI),.SE(SE),.SD(SD));
   // spec_gates_begin
   not MGM_G0(MGM_W0,D);
   and MGM_G1(MGM_W1,SD,MGM_W0);
   not MGM_G2(MGM_W2,SE);
   and MGM_G3(MGM_W3,MGM_W2,MGM_W1);
   not MGM_G4(MGM_W4,SI);
   and MGM_G5(ENABLE_NOT_D_AND_SD_AND_NOT_SE_AND_NOT_SI,MGM_W4,MGM_W3);
   not MGM_G6(MGM_W5,D);
   and MGM_G7(MGM_W6,SD,MGM_W5);
   not MGM_G8(MGM_W7,SE);
   and MGM_G9(MGM_W8,MGM_W7,MGM_W6);
   and MGM_G10(ENABLE_NOT_D_AND_SD_AND_NOT_SE_AND_SI,SI,MGM_W8);
   not MGM_G11(MGM_W9,D);
   and MGM_G12(MGM_W10,SD,MGM_W9);
   and MGM_G13(MGM_W11,SE,MGM_W10);
   not MGM_G14(MGM_W12,SI);
   and MGM_G15(ENABLE_NOT_D_AND_SD_AND_SE_AND_NOT_SI,MGM_W12,MGM_W11);
   not MGM_G16(MGM_W13,D);
   and MGM_G17(MGM_W14,SD,MGM_W13);
   and MGM_G18(MGM_W15,SE,MGM_W14);
   and MGM_G19(ENABLE_NOT_D_AND_SD_AND_SE_AND_SI,SI,MGM_W15);
   and MGM_G20(MGM_W16,SD,D);
   not MGM_G21(MGM_W17,SE);
   and MGM_G22(MGM_W18,MGM_W17,MGM_W16);
   not MGM_G23(MGM_W19,SI);
   and MGM_G24(ENABLE_D_AND_SD_AND_NOT_SE_AND_NOT_SI,MGM_W19,MGM_W18);
   and MGM_G25(MGM_W20,SD,D);
   not MGM_G26(MGM_W21,SE);
   and MGM_G27(MGM_W22,MGM_W21,MGM_W20);
   and MGM_G28(ENABLE_D_AND_SD_AND_NOT_SE_AND_SI,SI,MGM_W22);
   and MGM_G29(MGM_W23,SD,D);
   and MGM_G30(MGM_W24,SE,MGM_W23);
   not MGM_G31(MGM_W25,SI);
   and MGM_G32(ENABLE_D_AND_SD_AND_SE_AND_NOT_SI,MGM_W25,MGM_W24);
   and MGM_G33(MGM_W26,SD,D);
   and MGM_G34(MGM_W27,SE,MGM_W26);
   and MGM_G35(ENABLE_D_AND_SD_AND_SE_AND_SI,SI,MGM_W27);
   not MGM_G36(MGM_W28,SE);
   and MGM_G37(MGM_W29,MGM_W28,SD);
   not MGM_G38(MGM_W30,SI);
   and MGM_G39(ENABLE_SD_AND_NOT_SE_AND_NOT_SI,MGM_W30,MGM_W29);
   not MGM_G40(MGM_W31,SE);
   and MGM_G41(MGM_W32,MGM_W31,SD);
   and MGM_G42(ENABLE_SD_AND_NOT_SE_AND_SI,SI,MGM_W32);
   not MGM_G43(MGM_W33,D);
   not MGM_G44(MGM_W34,SE);
   and MGM_G45(MGM_W35,MGM_W34,MGM_W33);
   not MGM_G46(MGM_W36,SI);
   and MGM_G47(ENABLE_NOT_D_AND_NOT_SE_AND_NOT_SI,MGM_W36,MGM_W35);
   not MGM_G48(MGM_W37,D);
   not MGM_G49(MGM_W38,SE);
   and MGM_G50(MGM_W39,MGM_W38,MGM_W37);
   and MGM_G51(ENABLE_NOT_D_AND_NOT_SE_AND_SI,SI,MGM_W39);
   not MGM_G52(MGM_W40,D);
   and MGM_G53(MGM_W41,SE,MGM_W40);
   not MGM_G54(MGM_W42,SI);
   and MGM_G55(ENABLE_NOT_D_AND_SE_AND_NOT_SI,MGM_W42,MGM_W41);
   and MGM_G56(MGM_W43,SE,D);
   not MGM_G57(MGM_W44,SI);
   and MGM_G58(ENABLE_D_AND_SE_AND_NOT_SI,MGM_W44,MGM_W43);
   not MGM_G59(MGM_W45,CK);
   not MGM_G60(MGM_W46,D);
   and MGM_G61(MGM_W47,MGM_W46,MGM_W45);
   not MGM_G62(MGM_W48,SE);
   and MGM_G63(MGM_W49,MGM_W48,MGM_W47);
   not MGM_G64(MGM_W50,SI);
   and MGM_G65(ENABLE_NOT_CK_AND_NOT_D_AND_NOT_SE_AND_NOT_SI,MGM_W50,MGM_W49);
   not MGM_G66(MGM_W51,CK);
   not MGM_G67(MGM_W52,D);
   and MGM_G68(MGM_W53,MGM_W52,MGM_W51);
   not MGM_G69(MGM_W54,SE);
   and MGM_G70(MGM_W55,MGM_W54,MGM_W53);
   and MGM_G71(ENABLE_NOT_CK_AND_NOT_D_AND_NOT_SE_AND_SI,SI,MGM_W55);
   not MGM_G72(MGM_W56,CK);
   not MGM_G73(MGM_W57,D);
   and MGM_G74(MGM_W58,MGM_W57,MGM_W56);
   and MGM_G75(MGM_W59,SE,MGM_W58);
   not MGM_G76(MGM_W60,SI);
   and MGM_G77(ENABLE_NOT_CK_AND_NOT_D_AND_SE_AND_NOT_SI,MGM_W60,MGM_W59);
   not MGM_G78(MGM_W61,CK);
   not MGM_G79(MGM_W62,D);
   and MGM_G80(MGM_W63,MGM_W62,MGM_W61);
   and MGM_G81(MGM_W64,SE,MGM_W63);
   and MGM_G82(ENABLE_NOT_CK_AND_NOT_D_AND_SE_AND_SI,SI,MGM_W64);
   not MGM_G83(MGM_W65,CK);
   and MGM_G84(MGM_W66,D,MGM_W65);
   not MGM_G85(MGM_W67,SE);
   and MGM_G86(MGM_W68,MGM_W67,MGM_W66);
   not MGM_G87(MGM_W69,SI);
   and MGM_G88(ENABLE_NOT_CK_AND_D_AND_NOT_SE_AND_NOT_SI,MGM_W69,MGM_W68);
   not MGM_G89(MGM_W70,CK);
   and MGM_G90(MGM_W71,D,MGM_W70);
   not MGM_G91(MGM_W72,SE);
   and MGM_G92(MGM_W73,MGM_W72,MGM_W71);
   and MGM_G93(ENABLE_NOT_CK_AND_D_AND_NOT_SE_AND_SI,SI,MGM_W73);
   not MGM_G94(MGM_W74,CK);
   and MGM_G95(MGM_W75,D,MGM_W74);
   and MGM_G96(MGM_W76,SE,MGM_W75);
   not MGM_G97(MGM_W77,SI);
   and MGM_G98(ENABLE_NOT_CK_AND_D_AND_SE_AND_NOT_SI,MGM_W77,MGM_W76);
   not MGM_G99(MGM_W78,CK);
   and MGM_G100(MGM_W79,D,MGM_W78);
   and MGM_G101(MGM_W80,SE,MGM_W79);
   and MGM_G102(ENABLE_NOT_CK_AND_D_AND_SE_AND_SI,SI,MGM_W80);
   not MGM_G103(MGM_W81,D);
   and MGM_G104(MGM_W82,MGM_W81,CK);
   not MGM_G105(MGM_W83,SE);
   and MGM_G106(MGM_W84,MGM_W83,MGM_W82);
   not MGM_G107(MGM_W85,SI);
   and MGM_G108(ENABLE_CK_AND_NOT_D_AND_NOT_SE_AND_NOT_SI,MGM_W85,MGM_W84);
   not MGM_G109(MGM_W86,D);
   and MGM_G110(MGM_W87,MGM_W86,CK);
   not MGM_G111(MGM_W88,SE);
   and MGM_G112(MGM_W89,MGM_W88,MGM_W87);
   and MGM_G113(ENABLE_CK_AND_NOT_D_AND_NOT_SE_AND_SI,SI,MGM_W89);
   not MGM_G114(MGM_W90,D);
   and MGM_G115(MGM_W91,MGM_W90,CK);
   and MGM_G116(MGM_W92,SE,MGM_W91);
   not MGM_G117(MGM_W93,SI);
   and MGM_G118(ENABLE_CK_AND_NOT_D_AND_SE_AND_NOT_SI,MGM_W93,MGM_W92);
   not MGM_G119(MGM_W94,D);
   and MGM_G120(MGM_W95,MGM_W94,CK);
   and MGM_G121(MGM_W96,SE,MGM_W95);
   and MGM_G122(ENABLE_CK_AND_NOT_D_AND_SE_AND_SI,SI,MGM_W96);
   and MGM_G123(MGM_W97,D,CK);
   not MGM_G124(MGM_W98,SE);
   and MGM_G125(MGM_W99,MGM_W98,MGM_W97);
   not MGM_G126(MGM_W100,SI);
   and MGM_G127(ENABLE_CK_AND_D_AND_NOT_SE_AND_NOT_SI,MGM_W100,MGM_W99);
   and MGM_G128(MGM_W101,D,CK);
   not MGM_G129(MGM_W102,SE);
   and MGM_G130(MGM_W103,MGM_W102,MGM_W101);
   and MGM_G131(ENABLE_CK_AND_D_AND_NOT_SE_AND_SI,SI,MGM_W103);
   and MGM_G132(MGM_W104,D,CK);
   and MGM_G133(MGM_W105,SE,MGM_W104);
   not MGM_G134(MGM_W106,SI);
   and MGM_G135(ENABLE_CK_AND_D_AND_SE_AND_NOT_SI,MGM_W106,MGM_W105);
   and MGM_G136(MGM_W107,D,CK);
   and MGM_G137(MGM_W108,SE,MGM_W107);
   and MGM_G138(ENABLE_CK_AND_D_AND_SE_AND_SI,SI,MGM_W108);
   not MGM_G139(MGM_W109,D);
   and MGM_G140(MGM_W110,SD,MGM_W109);
   and MGM_G141(ENABLE_NOT_D_AND_SD_AND_SI,SI,MGM_W110);
   and MGM_G142(MGM_W111,SD,D);
   not MGM_G143(MGM_W112,SI);
   and MGM_G144(ENABLE_D_AND_SD_AND_NOT_SI,MGM_W112,MGM_W111);
   not MGM_G145(MGM_W113,D);
   and MGM_G146(MGM_W114,SD,MGM_W113);
   and MGM_G147(ENABLE_NOT_D_AND_SD_AND_SE,SE,MGM_W114);
   and MGM_G148(MGM_W115,SD,D);
   and MGM_G149(ENABLE_D_AND_SD_AND_SE,SE,MGM_W115);
   // spec_gates_end
   // specify_block_begin
   specify

      if(D===1'b0 && SI===1'b1)
      // seq arc CK --> Q
      (posedge CK => (Q : SE))  = (1.0,1.0);
      
      if(SE===1'b0 && SI===1'b0)
      // seq arc CK --> Q
      (posedge CK => (Q : D))  = (1.0,1.0);
      
      if(D===1'b1 && SE===1'b0 && SI===1'b1 || D===1'b0 && SE===1'b1 && SI===1'b0)
      // seq arc CK --> Q
      (posedge CK => (Q : D))  = (1.0,1.0);
      
      if(D===1'b1 && SE===1'b1)
      // seq arc CK --> Q
      (posedge CK => (Q : SI))  = (1.0,1.0);
      
      ifnone
      // seq arc CK --> Q
      (posedge CK => (Q : D))  = (1.0,1.0);
      
      if(CK===1'b0 && D===1'b0 && SE===1'b0 && SI===1'b0)
      // seq arc SD --> Q
      (SD => Q)  = (1.0,1.0);
      
      if(CK===1'b0 && D===1'b0 && SE===1'b0 && SI===1'b1)
      // seq arc SD --> Q
      (SD => Q)  = (1.0,1.0);
      
      if(CK===1'b0 && D===1'b0 && SE===1'b1 && SI===1'b0)
      // seq arc SD --> Q
      (SD => Q)  = (1.0,1.0);
      
      if(CK===1'b0 && D===1'b0 && SE===1'b1 && SI===1'b1)
      // seq arc SD --> Q
      (SD => Q)  = (1.0,1.0);
      
      if(CK===1'b0 && D===1'b1 && SE===1'b0 && SI===1'b0)
      // seq arc SD --> Q
      (SD => Q)  = (1.0,1.0);
      
      if(CK===1'b0 && D===1'b1 && SE===1'b0 && SI===1'b1)
      // seq arc SD --> Q
      (SD => Q)  = (1.0,1.0);
      
      if(CK===1'b0 && D===1'b1 && SE===1'b1 && SI===1'b0)
      // seq arc SD --> Q
      (SD => Q)  = (1.0,1.0);
      
      if(CK===1'b0 && D===1'b1 && SE===1'b1 && SI===1'b1)
      // seq arc SD --> Q
      (SD => Q)  = (1.0,1.0);
      
      if(CK===1'b1 && D===1'b0 && SE===1'b0 && SI===1'b0)
      // seq arc SD --> Q
      (SD => Q)  = (1.0,1.0);
      
      if(CK===1'b1 && D===1'b0 && SE===1'b0 && SI===1'b1)
      // seq arc SD --> Q
      (SD => Q)  = (1.0,1.0);
      
      if(CK===1'b1 && D===1'b0 && SE===1'b1 && SI===1'b0)
      // seq arc SD --> Q
      (SD => Q)  = (1.0,1.0);
      
      if(CK===1'b1 && D===1'b0 && SE===1'b1 && SI===1'b1)
      // seq arc SD --> Q
      (SD => Q)  = (1.0,1.0);
      
      if(CK===1'b1 && D===1'b1 && SE===1'b0 && SI===1'b0)
      // seq arc SD --> Q
      (SD => Q)  = (1.0,1.0);
      
      if(CK===1'b1 && D===1'b1 && SE===1'b0 && SI===1'b1)
      // seq arc SD --> Q
      (SD => Q)  = (1.0,1.0);
      
      if(CK===1'b1 && D===1'b1 && SE===1'b1 && SI===1'b0)
      // seq arc SD --> Q
      (SD => Q)  = (1.0,1.0);
      
      if(CK===1'b1 && D===1'b1 && SE===1'b1 && SI===1'b1)
      // seq arc SD --> Q
      (SD => Q)  = (1.0,1.0);
      
      ifnone
      // seq arc SD --> Q
      (SD => Q)  = (1.0,1.0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_SD_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_SD_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_SD_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_SD_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_SD_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_SD_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_SD_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_SD_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_SD_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_SD_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_SD_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_SD_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_SD_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_SD_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_SD_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_SD_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      // hold D-HL CK-LH
      $hold(posedge CK &&& (ENABLE_SD_AND_NOT_SE_AND_NOT_SI === 1'b1),
      negedge D &&& (ENABLE_SD_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold D-LH CK-LH
      $hold(posedge CK &&& (ENABLE_SD_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge D &&& (ENABLE_SD_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup D-HL CK-LH
      $setup(negedge D &&& (ENABLE_SD_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_SD_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup D-LH CK-LH
      $setup(posedge D &&& (ENABLE_SD_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_SD_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold D-HL CK-LH
      $hold(posedge CK &&& (ENABLE_SD_AND_NOT_SE_AND_SI === 1'b1),
      negedge D &&& (ENABLE_SD_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // hold D-LH CK-LH
      $hold(posedge CK &&& (ENABLE_SD_AND_NOT_SE_AND_SI === 1'b1),
      posedge D &&& (ENABLE_SD_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // setup D-HL CK-LH
      $setup(negedge D &&& (ENABLE_SD_AND_NOT_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_SD_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // setup D-LH CK-LH
      $setup(posedge D &&& (ENABLE_SD_AND_NOT_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_SD_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // recovery SD-LH CK-LH
      $recovery(posedge SD &&& (ENABLE_NOT_D_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // removal SD-LH CK-LH
      $removal(posedge SD &&& (ENABLE_NOT_D_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // recovery SD-LH CK-LH
      $recovery(posedge SD &&& (ENABLE_NOT_D_AND_NOT_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // removal SD-LH CK-LH
      $removal(posedge SD &&& (ENABLE_NOT_D_AND_NOT_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // recovery SD-LH CK-LH
      $recovery(posedge SD &&& (ENABLE_NOT_D_AND_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_SE_AND_NOT_SI === 1'b1),1.0);
      
      // removal SD-LH CK-LH
      $removal(posedge SD &&& (ENABLE_NOT_D_AND_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_SE_AND_NOT_SI === 1'b1),1.0);
      
      // recovery SD-LH CK-LH
      $recovery(posedge SD &&& (ENABLE_D_AND_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_D_AND_SE_AND_NOT_SI === 1'b1),1.0);
      
      // removal SD-LH CK-LH
      $removal(posedge SD &&& (ENABLE_D_AND_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_D_AND_SE_AND_NOT_SI === 1'b1),1.0);
      
      $width(negedge SD &&& (ENABLE_NOT_CK_AND_NOT_D_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge SD &&& (ENABLE_NOT_CK_AND_NOT_D_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge SD &&& (ENABLE_NOT_CK_AND_NOT_D_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge SD &&& (ENABLE_NOT_CK_AND_NOT_D_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge SD &&& (ENABLE_NOT_CK_AND_D_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge SD &&& (ENABLE_NOT_CK_AND_D_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge SD &&& (ENABLE_NOT_CK_AND_D_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge SD &&& (ENABLE_NOT_CK_AND_D_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge SD &&& (ENABLE_CK_AND_NOT_D_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge SD &&& (ENABLE_CK_AND_NOT_D_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge SD &&& (ENABLE_CK_AND_NOT_D_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge SD &&& (ENABLE_CK_AND_NOT_D_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge SD &&& (ENABLE_CK_AND_D_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge SD &&& (ENABLE_CK_AND_D_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge SD &&& (ENABLE_CK_AND_D_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge SD &&& (ENABLE_CK_AND_D_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      // hold SE-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D_AND_SD_AND_SI === 1'b1),
      negedge SE &&& (ENABLE_NOT_D_AND_SD_AND_SI === 1'b1),1.0);
      
      // hold SE-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D_AND_SD_AND_SI === 1'b1),
      posedge SE &&& (ENABLE_NOT_D_AND_SD_AND_SI === 1'b1),1.0);
      
      // setup SE-HL CK-LH
      $setup(negedge SE &&& (ENABLE_NOT_D_AND_SD_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_SD_AND_SI === 1'b1),1.0);
      
      // setup SE-LH CK-LH
      $setup(posedge SE &&& (ENABLE_NOT_D_AND_SD_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_SD_AND_SI === 1'b1),1.0);
      
      // hold SE-HL CK-LH
      $hold(posedge CK &&& (ENABLE_D_AND_SD_AND_NOT_SI === 1'b1),
      negedge SE &&& (ENABLE_D_AND_SD_AND_NOT_SI === 1'b1),1.0);
      
      // hold SE-LH CK-LH
      $hold(posedge CK &&& (ENABLE_D_AND_SD_AND_NOT_SI === 1'b1),
      posedge SE &&& (ENABLE_D_AND_SD_AND_NOT_SI === 1'b1),1.0);
      
      // setup SE-HL CK-LH
      $setup(negedge SE &&& (ENABLE_D_AND_SD_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_D_AND_SD_AND_NOT_SI === 1'b1),1.0);
      
      // setup SE-LH CK-LH
      $setup(posedge SE &&& (ENABLE_D_AND_SD_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_D_AND_SD_AND_NOT_SI === 1'b1),1.0);
      
      // hold SI-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D_AND_SD_AND_SE === 1'b1),
      negedge SI &&& (ENABLE_NOT_D_AND_SD_AND_SE === 1'b1),1.0);
      
      // hold SI-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D_AND_SD_AND_SE === 1'b1),
      posedge SI &&& (ENABLE_NOT_D_AND_SD_AND_SE === 1'b1),1.0);
      
      // setup SI-HL CK-LH
      $setup(negedge SI &&& (ENABLE_NOT_D_AND_SD_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_SD_AND_SE === 1'b1),1.0);
      
      // setup SI-LH CK-LH
      $setup(posedge SI &&& (ENABLE_NOT_D_AND_SD_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_SD_AND_SE === 1'b1),1.0);
      
      // hold SI-HL CK-LH
      $hold(posedge CK &&& (ENABLE_D_AND_SD_AND_SE === 1'b1),
      negedge SI &&& (ENABLE_D_AND_SD_AND_SE === 1'b1),1.0);
      
      // hold SI-LH CK-LH
      $hold(posedge CK &&& (ENABLE_D_AND_SD_AND_SE === 1'b1),
      posedge SI &&& (ENABLE_D_AND_SD_AND_SE === 1'b1),1.0);
      
      // setup SI-HL CK-LH
      $setup(negedge SI &&& (ENABLE_D_AND_SD_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_D_AND_SD_AND_SE === 1'b1),1.0);
      
      // setup SI-LH CK-LH
      $setup(posedge SI &&& (ENABLE_D_AND_SD_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_D_AND_SD_AND_SE === 1'b1),1.0);
      
      // mpw CK_lh 
      $width(posedge CK,1.0,0);
      
      // mpw CK_hl 
      $width(negedge CK,1.0,0);
      
      // mpw SD_hl 
      $width(negedge SD,1.0,0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_FSDPSBQ_V2_4( Q, CK, D, SI, SE, SD );
input CK, D, SD, SE, SI;
output Q;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_FSDPSBQ_V2_4_func SAEDRVT14_FSDPSBQ_V2_4_behav_inst(.Q(Q),.CK(CK),.D(D),.SI(SI),.SE(SE),.SD(SD));
`else
   SAEDRVT14_FSDPSBQ_V2_4_func SAEDRVT14_FSDPSBQ_V2_4_inst(.Q(Q),.CK(CK),.D(D),.SI(SI),.SE(SE),.SD(SD));
   // spec_gates_begin
   not MGM_G0(MGM_W0,D);
   and MGM_G1(MGM_W1,SD,MGM_W0);
   not MGM_G2(MGM_W2,SE);
   and MGM_G3(MGM_W3,MGM_W2,MGM_W1);
   not MGM_G4(MGM_W4,SI);
   and MGM_G5(ENABLE_NOT_D_AND_SD_AND_NOT_SE_AND_NOT_SI,MGM_W4,MGM_W3);
   not MGM_G6(MGM_W5,D);
   and MGM_G7(MGM_W6,SD,MGM_W5);
   not MGM_G8(MGM_W7,SE);
   and MGM_G9(MGM_W8,MGM_W7,MGM_W6);
   and MGM_G10(ENABLE_NOT_D_AND_SD_AND_NOT_SE_AND_SI,SI,MGM_W8);
   not MGM_G11(MGM_W9,D);
   and MGM_G12(MGM_W10,SD,MGM_W9);
   and MGM_G13(MGM_W11,SE,MGM_W10);
   not MGM_G14(MGM_W12,SI);
   and MGM_G15(ENABLE_NOT_D_AND_SD_AND_SE_AND_NOT_SI,MGM_W12,MGM_W11);
   not MGM_G16(MGM_W13,D);
   and MGM_G17(MGM_W14,SD,MGM_W13);
   and MGM_G18(MGM_W15,SE,MGM_W14);
   and MGM_G19(ENABLE_NOT_D_AND_SD_AND_SE_AND_SI,SI,MGM_W15);
   and MGM_G20(MGM_W16,SD,D);
   not MGM_G21(MGM_W17,SE);
   and MGM_G22(MGM_W18,MGM_W17,MGM_W16);
   not MGM_G23(MGM_W19,SI);
   and MGM_G24(ENABLE_D_AND_SD_AND_NOT_SE_AND_NOT_SI,MGM_W19,MGM_W18);
   and MGM_G25(MGM_W20,SD,D);
   not MGM_G26(MGM_W21,SE);
   and MGM_G27(MGM_W22,MGM_W21,MGM_W20);
   and MGM_G28(ENABLE_D_AND_SD_AND_NOT_SE_AND_SI,SI,MGM_W22);
   and MGM_G29(MGM_W23,SD,D);
   and MGM_G30(MGM_W24,SE,MGM_W23);
   not MGM_G31(MGM_W25,SI);
   and MGM_G32(ENABLE_D_AND_SD_AND_SE_AND_NOT_SI,MGM_W25,MGM_W24);
   and MGM_G33(MGM_W26,SD,D);
   and MGM_G34(MGM_W27,SE,MGM_W26);
   and MGM_G35(ENABLE_D_AND_SD_AND_SE_AND_SI,SI,MGM_W27);
   not MGM_G36(MGM_W28,SE);
   and MGM_G37(MGM_W29,MGM_W28,SD);
   not MGM_G38(MGM_W30,SI);
   and MGM_G39(ENABLE_SD_AND_NOT_SE_AND_NOT_SI,MGM_W30,MGM_W29);
   not MGM_G40(MGM_W31,SE);
   and MGM_G41(MGM_W32,MGM_W31,SD);
   and MGM_G42(ENABLE_SD_AND_NOT_SE_AND_SI,SI,MGM_W32);
   not MGM_G43(MGM_W33,D);
   not MGM_G44(MGM_W34,SE);
   and MGM_G45(MGM_W35,MGM_W34,MGM_W33);
   not MGM_G46(MGM_W36,SI);
   and MGM_G47(ENABLE_NOT_D_AND_NOT_SE_AND_NOT_SI,MGM_W36,MGM_W35);
   not MGM_G48(MGM_W37,D);
   not MGM_G49(MGM_W38,SE);
   and MGM_G50(MGM_W39,MGM_W38,MGM_W37);
   and MGM_G51(ENABLE_NOT_D_AND_NOT_SE_AND_SI,SI,MGM_W39);
   not MGM_G52(MGM_W40,D);
   and MGM_G53(MGM_W41,SE,MGM_W40);
   not MGM_G54(MGM_W42,SI);
   and MGM_G55(ENABLE_NOT_D_AND_SE_AND_NOT_SI,MGM_W42,MGM_W41);
   and MGM_G56(MGM_W43,SE,D);
   not MGM_G57(MGM_W44,SI);
   and MGM_G58(ENABLE_D_AND_SE_AND_NOT_SI,MGM_W44,MGM_W43);
   not MGM_G59(MGM_W45,CK);
   not MGM_G60(MGM_W46,D);
   and MGM_G61(MGM_W47,MGM_W46,MGM_W45);
   not MGM_G62(MGM_W48,SE);
   and MGM_G63(MGM_W49,MGM_W48,MGM_W47);
   not MGM_G64(MGM_W50,SI);
   and MGM_G65(ENABLE_NOT_CK_AND_NOT_D_AND_NOT_SE_AND_NOT_SI,MGM_W50,MGM_W49);
   not MGM_G66(MGM_W51,CK);
   not MGM_G67(MGM_W52,D);
   and MGM_G68(MGM_W53,MGM_W52,MGM_W51);
   not MGM_G69(MGM_W54,SE);
   and MGM_G70(MGM_W55,MGM_W54,MGM_W53);
   and MGM_G71(ENABLE_NOT_CK_AND_NOT_D_AND_NOT_SE_AND_SI,SI,MGM_W55);
   not MGM_G72(MGM_W56,CK);
   not MGM_G73(MGM_W57,D);
   and MGM_G74(MGM_W58,MGM_W57,MGM_W56);
   and MGM_G75(MGM_W59,SE,MGM_W58);
   not MGM_G76(MGM_W60,SI);
   and MGM_G77(ENABLE_NOT_CK_AND_NOT_D_AND_SE_AND_NOT_SI,MGM_W60,MGM_W59);
   not MGM_G78(MGM_W61,CK);
   not MGM_G79(MGM_W62,D);
   and MGM_G80(MGM_W63,MGM_W62,MGM_W61);
   and MGM_G81(MGM_W64,SE,MGM_W63);
   and MGM_G82(ENABLE_NOT_CK_AND_NOT_D_AND_SE_AND_SI,SI,MGM_W64);
   not MGM_G83(MGM_W65,CK);
   and MGM_G84(MGM_W66,D,MGM_W65);
   not MGM_G85(MGM_W67,SE);
   and MGM_G86(MGM_W68,MGM_W67,MGM_W66);
   not MGM_G87(MGM_W69,SI);
   and MGM_G88(ENABLE_NOT_CK_AND_D_AND_NOT_SE_AND_NOT_SI,MGM_W69,MGM_W68);
   not MGM_G89(MGM_W70,CK);
   and MGM_G90(MGM_W71,D,MGM_W70);
   not MGM_G91(MGM_W72,SE);
   and MGM_G92(MGM_W73,MGM_W72,MGM_W71);
   and MGM_G93(ENABLE_NOT_CK_AND_D_AND_NOT_SE_AND_SI,SI,MGM_W73);
   not MGM_G94(MGM_W74,CK);
   and MGM_G95(MGM_W75,D,MGM_W74);
   and MGM_G96(MGM_W76,SE,MGM_W75);
   not MGM_G97(MGM_W77,SI);
   and MGM_G98(ENABLE_NOT_CK_AND_D_AND_SE_AND_NOT_SI,MGM_W77,MGM_W76);
   not MGM_G99(MGM_W78,CK);
   and MGM_G100(MGM_W79,D,MGM_W78);
   and MGM_G101(MGM_W80,SE,MGM_W79);
   and MGM_G102(ENABLE_NOT_CK_AND_D_AND_SE_AND_SI,SI,MGM_W80);
   not MGM_G103(MGM_W81,D);
   and MGM_G104(MGM_W82,MGM_W81,CK);
   not MGM_G105(MGM_W83,SE);
   and MGM_G106(MGM_W84,MGM_W83,MGM_W82);
   not MGM_G107(MGM_W85,SI);
   and MGM_G108(ENABLE_CK_AND_NOT_D_AND_NOT_SE_AND_NOT_SI,MGM_W85,MGM_W84);
   not MGM_G109(MGM_W86,D);
   and MGM_G110(MGM_W87,MGM_W86,CK);
   not MGM_G111(MGM_W88,SE);
   and MGM_G112(MGM_W89,MGM_W88,MGM_W87);
   and MGM_G113(ENABLE_CK_AND_NOT_D_AND_NOT_SE_AND_SI,SI,MGM_W89);
   not MGM_G114(MGM_W90,D);
   and MGM_G115(MGM_W91,MGM_W90,CK);
   and MGM_G116(MGM_W92,SE,MGM_W91);
   not MGM_G117(MGM_W93,SI);
   and MGM_G118(ENABLE_CK_AND_NOT_D_AND_SE_AND_NOT_SI,MGM_W93,MGM_W92);
   not MGM_G119(MGM_W94,D);
   and MGM_G120(MGM_W95,MGM_W94,CK);
   and MGM_G121(MGM_W96,SE,MGM_W95);
   and MGM_G122(ENABLE_CK_AND_NOT_D_AND_SE_AND_SI,SI,MGM_W96);
   and MGM_G123(MGM_W97,D,CK);
   not MGM_G124(MGM_W98,SE);
   and MGM_G125(MGM_W99,MGM_W98,MGM_W97);
   not MGM_G126(MGM_W100,SI);
   and MGM_G127(ENABLE_CK_AND_D_AND_NOT_SE_AND_NOT_SI,MGM_W100,MGM_W99);
   and MGM_G128(MGM_W101,D,CK);
   not MGM_G129(MGM_W102,SE);
   and MGM_G130(MGM_W103,MGM_W102,MGM_W101);
   and MGM_G131(ENABLE_CK_AND_D_AND_NOT_SE_AND_SI,SI,MGM_W103);
   and MGM_G132(MGM_W104,D,CK);
   and MGM_G133(MGM_W105,SE,MGM_W104);
   not MGM_G134(MGM_W106,SI);
   and MGM_G135(ENABLE_CK_AND_D_AND_SE_AND_NOT_SI,MGM_W106,MGM_W105);
   and MGM_G136(MGM_W107,D,CK);
   and MGM_G137(MGM_W108,SE,MGM_W107);
   and MGM_G138(ENABLE_CK_AND_D_AND_SE_AND_SI,SI,MGM_W108);
   not MGM_G139(MGM_W109,D);
   and MGM_G140(MGM_W110,SD,MGM_W109);
   and MGM_G141(ENABLE_NOT_D_AND_SD_AND_SI,SI,MGM_W110);
   and MGM_G142(MGM_W111,SD,D);
   not MGM_G143(MGM_W112,SI);
   and MGM_G144(ENABLE_D_AND_SD_AND_NOT_SI,MGM_W112,MGM_W111);
   not MGM_G145(MGM_W113,D);
   and MGM_G146(MGM_W114,SD,MGM_W113);
   and MGM_G147(ENABLE_NOT_D_AND_SD_AND_SE,SE,MGM_W114);
   and MGM_G148(MGM_W115,SD,D);
   and MGM_G149(ENABLE_D_AND_SD_AND_SE,SE,MGM_W115);
   // spec_gates_end
   // specify_block_begin
   specify

      if(D===1'b0 && SI===1'b1)
      // seq arc CK --> Q
      (posedge CK => (Q : SE))  = (1.0,1.0);
      
      if(SE===1'b0 && SI===1'b0)
      // seq arc CK --> Q
      (posedge CK => (Q : D))  = (1.0,1.0);
      
      if(D===1'b1 && SE===1'b0 && SI===1'b1 || D===1'b0 && SE===1'b1 && SI===1'b0)
      // seq arc CK --> Q
      (posedge CK => (Q : D))  = (1.0,1.0);
      
      if(D===1'b1 && SE===1'b1)
      // seq arc CK --> Q
      (posedge CK => (Q : SI))  = (1.0,1.0);
      
      ifnone
      // seq arc CK --> Q
      (posedge CK => (Q : D))  = (1.0,1.0);
      
      if(CK===1'b0 && D===1'b0 && SE===1'b0 && SI===1'b0)
      // seq arc SD --> Q
      (SD => Q)  = (1.0,1.0);
      
      if(CK===1'b0 && D===1'b0 && SE===1'b0 && SI===1'b1)
      // seq arc SD --> Q
      (SD => Q)  = (1.0,1.0);
      
      if(CK===1'b0 && D===1'b0 && SE===1'b1 && SI===1'b0)
      // seq arc SD --> Q
      (SD => Q)  = (1.0,1.0);
      
      if(CK===1'b0 && D===1'b0 && SE===1'b1 && SI===1'b1)
      // seq arc SD --> Q
      (SD => Q)  = (1.0,1.0);
      
      if(CK===1'b0 && D===1'b1 && SE===1'b0 && SI===1'b0)
      // seq arc SD --> Q
      (SD => Q)  = (1.0,1.0);
      
      if(CK===1'b0 && D===1'b1 && SE===1'b0 && SI===1'b1)
      // seq arc SD --> Q
      (SD => Q)  = (1.0,1.0);
      
      if(CK===1'b0 && D===1'b1 && SE===1'b1 && SI===1'b0)
      // seq arc SD --> Q
      (SD => Q)  = (1.0,1.0);
      
      if(CK===1'b0 && D===1'b1 && SE===1'b1 && SI===1'b1)
      // seq arc SD --> Q
      (SD => Q)  = (1.0,1.0);
      
      if(CK===1'b1 && D===1'b0 && SE===1'b0 && SI===1'b0)
      // seq arc SD --> Q
      (SD => Q)  = (1.0,1.0);
      
      if(CK===1'b1 && D===1'b0 && SE===1'b0 && SI===1'b1)
      // seq arc SD --> Q
      (SD => Q)  = (1.0,1.0);
      
      if(CK===1'b1 && D===1'b0 && SE===1'b1 && SI===1'b0)
      // seq arc SD --> Q
      (SD => Q)  = (1.0,1.0);
      
      if(CK===1'b1 && D===1'b0 && SE===1'b1 && SI===1'b1)
      // seq arc SD --> Q
      (SD => Q)  = (1.0,1.0);
      
      if(CK===1'b1 && D===1'b1 && SE===1'b0 && SI===1'b0)
      // seq arc SD --> Q
      (SD => Q)  = (1.0,1.0);
      
      if(CK===1'b1 && D===1'b1 && SE===1'b0 && SI===1'b1)
      // seq arc SD --> Q
      (SD => Q)  = (1.0,1.0);
      
      if(CK===1'b1 && D===1'b1 && SE===1'b1 && SI===1'b0)
      // seq arc SD --> Q
      (SD => Q)  = (1.0,1.0);
      
      if(CK===1'b1 && D===1'b1 && SE===1'b1 && SI===1'b1)
      // seq arc SD --> Q
      (SD => Q)  = (1.0,1.0);
      
      ifnone
      // seq arc SD --> Q
      (SD => Q)  = (1.0,1.0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_SD_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_SD_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_SD_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_SD_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_SD_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_SD_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_SD_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_SD_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_SD_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_SD_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_SD_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_SD_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_SD_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_SD_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_SD_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_SD_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      // hold D-HL CK-LH
      $hold(posedge CK &&& (ENABLE_SD_AND_NOT_SE_AND_NOT_SI === 1'b1),
      negedge D &&& (ENABLE_SD_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold D-LH CK-LH
      $hold(posedge CK &&& (ENABLE_SD_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge D &&& (ENABLE_SD_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup D-HL CK-LH
      $setup(negedge D &&& (ENABLE_SD_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_SD_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup D-LH CK-LH
      $setup(posedge D &&& (ENABLE_SD_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_SD_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold D-HL CK-LH
      $hold(posedge CK &&& (ENABLE_SD_AND_NOT_SE_AND_SI === 1'b1),
      negedge D &&& (ENABLE_SD_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // hold D-LH CK-LH
      $hold(posedge CK &&& (ENABLE_SD_AND_NOT_SE_AND_SI === 1'b1),
      posedge D &&& (ENABLE_SD_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // setup D-HL CK-LH
      $setup(negedge D &&& (ENABLE_SD_AND_NOT_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_SD_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // setup D-LH CK-LH
      $setup(posedge D &&& (ENABLE_SD_AND_NOT_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_SD_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // recovery SD-LH CK-LH
      $recovery(posedge SD &&& (ENABLE_NOT_D_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // removal SD-LH CK-LH
      $removal(posedge SD &&& (ENABLE_NOT_D_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // recovery SD-LH CK-LH
      $recovery(posedge SD &&& (ENABLE_NOT_D_AND_NOT_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // removal SD-LH CK-LH
      $removal(posedge SD &&& (ENABLE_NOT_D_AND_NOT_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // recovery SD-LH CK-LH
      $recovery(posedge SD &&& (ENABLE_NOT_D_AND_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_SE_AND_NOT_SI === 1'b1),1.0);
      
      // removal SD-LH CK-LH
      $removal(posedge SD &&& (ENABLE_NOT_D_AND_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_SE_AND_NOT_SI === 1'b1),1.0);
      
      // recovery SD-LH CK-LH
      $recovery(posedge SD &&& (ENABLE_D_AND_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_D_AND_SE_AND_NOT_SI === 1'b1),1.0);
      
      // removal SD-LH CK-LH
      $removal(posedge SD &&& (ENABLE_D_AND_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_D_AND_SE_AND_NOT_SI === 1'b1),1.0);
      
      $width(negedge SD &&& (ENABLE_NOT_CK_AND_NOT_D_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge SD &&& (ENABLE_NOT_CK_AND_NOT_D_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge SD &&& (ENABLE_NOT_CK_AND_NOT_D_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge SD &&& (ENABLE_NOT_CK_AND_NOT_D_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge SD &&& (ENABLE_NOT_CK_AND_D_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge SD &&& (ENABLE_NOT_CK_AND_D_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge SD &&& (ENABLE_NOT_CK_AND_D_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge SD &&& (ENABLE_NOT_CK_AND_D_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge SD &&& (ENABLE_CK_AND_NOT_D_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge SD &&& (ENABLE_CK_AND_NOT_D_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge SD &&& (ENABLE_CK_AND_NOT_D_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge SD &&& (ENABLE_CK_AND_NOT_D_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge SD &&& (ENABLE_CK_AND_D_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge SD &&& (ENABLE_CK_AND_D_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge SD &&& (ENABLE_CK_AND_D_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge SD &&& (ENABLE_CK_AND_D_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      // hold SE-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D_AND_SD_AND_SI === 1'b1),
      negedge SE &&& (ENABLE_NOT_D_AND_SD_AND_SI === 1'b1),1.0);
      
      // hold SE-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D_AND_SD_AND_SI === 1'b1),
      posedge SE &&& (ENABLE_NOT_D_AND_SD_AND_SI === 1'b1),1.0);
      
      // setup SE-HL CK-LH
      $setup(negedge SE &&& (ENABLE_NOT_D_AND_SD_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_SD_AND_SI === 1'b1),1.0);
      
      // setup SE-LH CK-LH
      $setup(posedge SE &&& (ENABLE_NOT_D_AND_SD_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_SD_AND_SI === 1'b1),1.0);
      
      // hold SE-HL CK-LH
      $hold(posedge CK &&& (ENABLE_D_AND_SD_AND_NOT_SI === 1'b1),
      negedge SE &&& (ENABLE_D_AND_SD_AND_NOT_SI === 1'b1),1.0);
      
      // hold SE-LH CK-LH
      $hold(posedge CK &&& (ENABLE_D_AND_SD_AND_NOT_SI === 1'b1),
      posedge SE &&& (ENABLE_D_AND_SD_AND_NOT_SI === 1'b1),1.0);
      
      // setup SE-HL CK-LH
      $setup(negedge SE &&& (ENABLE_D_AND_SD_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_D_AND_SD_AND_NOT_SI === 1'b1),1.0);
      
      // setup SE-LH CK-LH
      $setup(posedge SE &&& (ENABLE_D_AND_SD_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_D_AND_SD_AND_NOT_SI === 1'b1),1.0);
      
      // hold SI-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D_AND_SD_AND_SE === 1'b1),
      negedge SI &&& (ENABLE_NOT_D_AND_SD_AND_SE === 1'b1),1.0);
      
      // hold SI-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D_AND_SD_AND_SE === 1'b1),
      posedge SI &&& (ENABLE_NOT_D_AND_SD_AND_SE === 1'b1),1.0);
      
      // setup SI-HL CK-LH
      $setup(negedge SI &&& (ENABLE_NOT_D_AND_SD_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_SD_AND_SE === 1'b1),1.0);
      
      // setup SI-LH CK-LH
      $setup(posedge SI &&& (ENABLE_NOT_D_AND_SD_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_SD_AND_SE === 1'b1),1.0);
      
      // hold SI-HL CK-LH
      $hold(posedge CK &&& (ENABLE_D_AND_SD_AND_SE === 1'b1),
      negedge SI &&& (ENABLE_D_AND_SD_AND_SE === 1'b1),1.0);
      
      // hold SI-LH CK-LH
      $hold(posedge CK &&& (ENABLE_D_AND_SD_AND_SE === 1'b1),
      posedge SI &&& (ENABLE_D_AND_SD_AND_SE === 1'b1),1.0);
      
      // setup SI-HL CK-LH
      $setup(negedge SI &&& (ENABLE_D_AND_SD_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_D_AND_SD_AND_SE === 1'b1),1.0);
      
      // setup SI-LH CK-LH
      $setup(posedge SI &&& (ENABLE_D_AND_SD_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_D_AND_SD_AND_SE === 1'b1),1.0);
      
      // mpw CK_lh 
      $width(posedge CK,1.0,0);
      
      // mpw CK_hl 
      $width(negedge CK,1.0,0);
      
      // mpw SD_hl 
      $width(negedge SD,1.0,0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_FSDPSYNRBQ_V2LP_0P5( Q, CK, D, SI, SE, RD );
input CK, D, RD, SE, SI;
output Q;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_FSDPSYNRBQ_V2LP_0P5_func SAEDRVT14_FSDPSYNRBQ_V2LP_0P5_behav_inst(.Q(Q),.CK(CK),.D(D),.SI(SI),.SE(SE),.RD(RD));
`else
   SAEDRVT14_FSDPSYNRBQ_V2LP_0P5_func SAEDRVT14_FSDPSYNRBQ_V2LP_0P5_inst(.Q(Q),.CK(CK),.D(D),.SI(SI),.SE(SE),.RD(RD));
   // spec_gates_begin
   not MGM_G0(MGM_W0,D);
   not MGM_G1(MGM_W1,RD);
   and MGM_G2(MGM_W2,MGM_W1,MGM_W0);
   not MGM_G3(MGM_W3,SE);
   and MGM_G4(MGM_W4,MGM_W3,MGM_W2);
   not MGM_G5(MGM_W5,SI);
   and MGM_G6(ENABLE_NOT_D_AND_NOT_RD_AND_NOT_SE_AND_NOT_SI,MGM_W5,MGM_W4);
   not MGM_G7(MGM_W6,D);
   not MGM_G8(MGM_W7,RD);
   and MGM_G9(MGM_W8,MGM_W7,MGM_W6);
   not MGM_G10(MGM_W9,SE);
   and MGM_G11(MGM_W10,MGM_W9,MGM_W8);
   and MGM_G12(ENABLE_NOT_D_AND_NOT_RD_AND_NOT_SE_AND_SI,SI,MGM_W10);
   not MGM_G13(MGM_W11,D);
   not MGM_G14(MGM_W12,RD);
   and MGM_G15(MGM_W13,MGM_W12,MGM_W11);
   and MGM_G16(MGM_W14,SE,MGM_W13);
   not MGM_G17(MGM_W15,SI);
   and MGM_G18(ENABLE_NOT_D_AND_NOT_RD_AND_SE_AND_NOT_SI,MGM_W15,MGM_W14);
   not MGM_G19(MGM_W16,D);
   not MGM_G20(MGM_W17,RD);
   and MGM_G21(MGM_W18,MGM_W17,MGM_W16);
   and MGM_G22(MGM_W19,SE,MGM_W18);
   and MGM_G23(ENABLE_NOT_D_AND_NOT_RD_AND_SE_AND_SI,SI,MGM_W19);
   not MGM_G24(MGM_W20,D);
   and MGM_G25(MGM_W21,RD,MGM_W20);
   not MGM_G26(MGM_W22,SE);
   and MGM_G27(MGM_W23,MGM_W22,MGM_W21);
   not MGM_G28(MGM_W24,SI);
   and MGM_G29(ENABLE_NOT_D_AND_RD_AND_NOT_SE_AND_NOT_SI,MGM_W24,MGM_W23);
   not MGM_G30(MGM_W25,D);
   and MGM_G31(MGM_W26,RD,MGM_W25);
   not MGM_G32(MGM_W27,SE);
   and MGM_G33(MGM_W28,MGM_W27,MGM_W26);
   and MGM_G34(ENABLE_NOT_D_AND_RD_AND_NOT_SE_AND_SI,SI,MGM_W28);
   not MGM_G35(MGM_W29,D);
   and MGM_G36(MGM_W30,RD,MGM_W29);
   and MGM_G37(MGM_W31,SE,MGM_W30);
   not MGM_G38(MGM_W32,SI);
   and MGM_G39(ENABLE_NOT_D_AND_RD_AND_SE_AND_NOT_SI,MGM_W32,MGM_W31);
   not MGM_G40(MGM_W33,D);
   and MGM_G41(MGM_W34,RD,MGM_W33);
   and MGM_G42(MGM_W35,SE,MGM_W34);
   and MGM_G43(ENABLE_NOT_D_AND_RD_AND_SE_AND_SI,SI,MGM_W35);
   not MGM_G44(MGM_W36,RD);
   and MGM_G45(MGM_W37,MGM_W36,D);
   not MGM_G46(MGM_W38,SE);
   and MGM_G47(MGM_W39,MGM_W38,MGM_W37);
   not MGM_G48(MGM_W40,SI);
   and MGM_G49(ENABLE_D_AND_NOT_RD_AND_NOT_SE_AND_NOT_SI,MGM_W40,MGM_W39);
   not MGM_G50(MGM_W41,RD);
   and MGM_G51(MGM_W42,MGM_W41,D);
   not MGM_G52(MGM_W43,SE);
   and MGM_G53(MGM_W44,MGM_W43,MGM_W42);
   and MGM_G54(ENABLE_D_AND_NOT_RD_AND_NOT_SE_AND_SI,SI,MGM_W44);
   not MGM_G55(MGM_W45,RD);
   and MGM_G56(MGM_W46,MGM_W45,D);
   and MGM_G57(MGM_W47,SE,MGM_W46);
   not MGM_G58(MGM_W48,SI);
   and MGM_G59(ENABLE_D_AND_NOT_RD_AND_SE_AND_NOT_SI,MGM_W48,MGM_W47);
   not MGM_G60(MGM_W49,RD);
   and MGM_G61(MGM_W50,MGM_W49,D);
   and MGM_G62(MGM_W51,SE,MGM_W50);
   and MGM_G63(ENABLE_D_AND_NOT_RD_AND_SE_AND_SI,SI,MGM_W51);
   and MGM_G64(MGM_W52,RD,D);
   not MGM_G65(MGM_W53,SE);
   and MGM_G66(MGM_W54,MGM_W53,MGM_W52);
   not MGM_G67(MGM_W55,SI);
   and MGM_G68(ENABLE_D_AND_RD_AND_NOT_SE_AND_NOT_SI,MGM_W55,MGM_W54);
   and MGM_G69(MGM_W56,RD,D);
   not MGM_G70(MGM_W57,SE);
   and MGM_G71(MGM_W58,MGM_W57,MGM_W56);
   and MGM_G72(ENABLE_D_AND_RD_AND_NOT_SE_AND_SI,SI,MGM_W58);
   and MGM_G73(MGM_W59,RD,D);
   and MGM_G74(MGM_W60,SE,MGM_W59);
   not MGM_G75(MGM_W61,SI);
   and MGM_G76(ENABLE_D_AND_RD_AND_SE_AND_NOT_SI,MGM_W61,MGM_W60);
   and MGM_G77(MGM_W62,RD,D);
   and MGM_G78(MGM_W63,SE,MGM_W62);
   and MGM_G79(ENABLE_D_AND_RD_AND_SE_AND_SI,SI,MGM_W63);
   not MGM_G80(MGM_W64,SE);
   and MGM_G81(MGM_W65,MGM_W64,RD);
   not MGM_G82(MGM_W66,SI);
   and MGM_G83(ENABLE_RD_AND_NOT_SE_AND_NOT_SI,MGM_W66,MGM_W65);
   not MGM_G84(MGM_W67,SE);
   and MGM_G85(MGM_W68,MGM_W67,RD);
   and MGM_G86(ENABLE_RD_AND_NOT_SE_AND_SI,SI,MGM_W68);
   not MGM_G87(MGM_W69,SE);
   and MGM_G88(MGM_W70,MGM_W69,D);
   not MGM_G89(MGM_W71,SI);
   and MGM_G90(ENABLE_D_AND_NOT_SE_AND_NOT_SI,MGM_W71,MGM_W70);
   not MGM_G91(MGM_W72,SE);
   and MGM_G92(MGM_W73,MGM_W72,D);
   and MGM_G93(ENABLE_D_AND_NOT_SE_AND_SI,SI,MGM_W73);
   not MGM_G94(MGM_W74,D);
   not MGM_G95(MGM_W75,RD);
   and MGM_G96(MGM_W76,MGM_W75,MGM_W74);
   and MGM_G97(ENABLE_NOT_D_AND_NOT_RD_AND_SI,SI,MGM_W76);
   not MGM_G98(MGM_W77,D);
   and MGM_G99(MGM_W78,RD,MGM_W77);
   and MGM_G100(ENABLE_NOT_D_AND_RD_AND_SI,SI,MGM_W78);
   not MGM_G101(MGM_W79,RD);
   and MGM_G102(MGM_W80,MGM_W79,D);
   and MGM_G103(ENABLE_D_AND_NOT_RD_AND_SI,SI,MGM_W80);
   and MGM_G104(MGM_W81,RD,D);
   not MGM_G105(MGM_W82,SI);
   and MGM_G106(ENABLE_D_AND_RD_AND_NOT_SI,MGM_W82,MGM_W81);
   not MGM_G107(MGM_W83,D);
   not MGM_G108(MGM_W84,RD);
   and MGM_G109(MGM_W85,MGM_W84,MGM_W83);
   and MGM_G110(ENABLE_NOT_D_AND_NOT_RD_AND_SE,SE,MGM_W85);
   not MGM_G111(MGM_W86,D);
   and MGM_G112(MGM_W87,RD,MGM_W86);
   and MGM_G113(ENABLE_NOT_D_AND_RD_AND_SE,SE,MGM_W87);
   not MGM_G114(MGM_W88,RD);
   and MGM_G115(MGM_W89,MGM_W88,D);
   and MGM_G116(ENABLE_D_AND_NOT_RD_AND_SE,SE,MGM_W89);
   and MGM_G117(MGM_W90,RD,D);
   and MGM_G118(ENABLE_D_AND_RD_AND_SE,SE,MGM_W90);
   // spec_gates_end
   // specify_block_begin
   specify

      if(D===1'b0 && RD===1'b0 && SE===1'b1 && SI===1'b0)
      // seq arc CK --> Q
      (posedge CK => (Q : D))  = (1.0,1.0);
      
      if(D===1'b0 && RD===1'b1 && SE===1'b1 && SI===1'b0)
      // seq arc CK --> Q
      (posedge CK => (Q : D))  = (1.0,1.0);
      
      if(D===1'b1 && RD===1'b0 && SE===1'b0 && SI===1'b0)
      // seq arc CK --> Q
      (posedge CK => (Q : D))  = (1.0,1.0);
      
      if(D===1'b1 && RD===1'b0 && SE===1'b1 && SI===1'b0)
      // seq arc CK --> Q
      (posedge CK => (Q : D))  = (1.0,1.0);
      
      if(D===1'b0 && RD===1'b0 && SI===1'b1)
      // seq arc CK --> Q
      (posedge CK => (Q : SE))  = (1.0,1.0);
      
      if(D===1'b0 && RD===1'b1 && SI===1'b1)
      // seq arc CK --> Q
      (posedge CK => (Q : SE))  = (1.0,1.0);
      
      if(D===1'b1 && RD===1'b0 && SI===1'b1)
      // seq arc CK --> Q
      (posedge CK => (Q : SE))  = (1.0,1.0);
      
      if(D===1'b1 && RD===1'b1 && SE===1'b0 && SI===1'b1 || D===1'b0 && RD===1'b0 && SE===1'b0 && SI===1'b0)
      // seq arc CK --> Q
      (posedge CK => (Q : D))  = (1.0,1.0);
      
      if(D===1'b1 && RD===1'b1 && SE===1'b1)
      // seq arc CK --> Q
      (posedge CK => (Q : SI))  = (1.0,1.0);
      
      if(RD===1'b1 && SE===1'b0 && SI===1'b0)
      // seq arc CK --> Q
      (posedge CK => (Q : D))  = (1.0,1.0);
      
      ifnone
      // seq arc CK --> Q
      (posedge CK => (Q : D))  = (1.0,1.0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_NOT_RD_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_NOT_RD_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_NOT_RD_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_NOT_RD_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_NOT_RD_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_NOT_RD_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_NOT_RD_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_NOT_RD_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_RD_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_RD_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_RD_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_RD_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_RD_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_RD_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_RD_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_RD_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_NOT_RD_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_NOT_RD_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_NOT_RD_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_NOT_RD_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_NOT_RD_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_NOT_RD_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_NOT_RD_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_NOT_RD_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_RD_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_RD_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_RD_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_RD_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_RD_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_RD_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_RD_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_RD_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      // hold D-HL CK-LH
      $hold(posedge CK &&& (ENABLE_RD_AND_NOT_SE_AND_NOT_SI === 1'b1),
      negedge D &&& (ENABLE_RD_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold D-LH CK-LH
      $hold(posedge CK &&& (ENABLE_RD_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge D &&& (ENABLE_RD_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup D-HL CK-LH
      $setup(negedge D &&& (ENABLE_RD_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_RD_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup D-LH CK-LH
      $setup(posedge D &&& (ENABLE_RD_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_RD_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold D-HL CK-LH
      $hold(posedge CK &&& (ENABLE_RD_AND_NOT_SE_AND_SI === 1'b1),
      negedge D &&& (ENABLE_RD_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // hold D-LH CK-LH
      $hold(posedge CK &&& (ENABLE_RD_AND_NOT_SE_AND_SI === 1'b1),
      posedge D &&& (ENABLE_RD_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // setup D-HL CK-LH
      $setup(negedge D &&& (ENABLE_RD_AND_NOT_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_RD_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // setup D-LH CK-LH
      $setup(posedge D &&& (ENABLE_RD_AND_NOT_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_RD_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // hold RD-HL CK-LH
      $hold(posedge CK &&& (ENABLE_D_AND_NOT_SE_AND_NOT_SI === 1'b1),
      negedge RD &&& (ENABLE_D_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold RD-LH CK-LH
      $hold(posedge CK &&& (ENABLE_D_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge RD &&& (ENABLE_D_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup RD-HL CK-LH
      $setup(negedge RD &&& (ENABLE_D_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_D_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup RD-LH CK-LH
      $setup(posedge RD &&& (ENABLE_D_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_D_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold RD-HL CK-LH
      $hold(posedge CK &&& (ENABLE_D_AND_NOT_SE_AND_SI === 1'b1),
      negedge RD &&& (ENABLE_D_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // hold RD-LH CK-LH
      $hold(posedge CK &&& (ENABLE_D_AND_NOT_SE_AND_SI === 1'b1),
      posedge RD &&& (ENABLE_D_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // setup RD-HL CK-LH
      $setup(negedge RD &&& (ENABLE_D_AND_NOT_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_D_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // setup RD-LH CK-LH
      $setup(posedge RD &&& (ENABLE_D_AND_NOT_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_D_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // hold SE-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D_AND_NOT_RD_AND_SI === 1'b1),
      negedge SE &&& (ENABLE_NOT_D_AND_NOT_RD_AND_SI === 1'b1),1.0);
      
      // hold SE-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D_AND_NOT_RD_AND_SI === 1'b1),
      posedge SE &&& (ENABLE_NOT_D_AND_NOT_RD_AND_SI === 1'b1),1.0);
      
      // setup SE-HL CK-LH
      $setup(negedge SE &&& (ENABLE_NOT_D_AND_NOT_RD_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_NOT_RD_AND_SI === 1'b1),1.0);
      
      // setup SE-LH CK-LH
      $setup(posedge SE &&& (ENABLE_NOT_D_AND_NOT_RD_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_NOT_RD_AND_SI === 1'b1),1.0);
      
      // hold SE-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D_AND_RD_AND_SI === 1'b1),
      negedge SE &&& (ENABLE_NOT_D_AND_RD_AND_SI === 1'b1),1.0);
      
      // hold SE-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D_AND_RD_AND_SI === 1'b1),
      posedge SE &&& (ENABLE_NOT_D_AND_RD_AND_SI === 1'b1),1.0);
      
      // setup SE-HL CK-LH
      $setup(negedge SE &&& (ENABLE_NOT_D_AND_RD_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_RD_AND_SI === 1'b1),1.0);
      
      // setup SE-LH CK-LH
      $setup(posedge SE &&& (ENABLE_NOT_D_AND_RD_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_RD_AND_SI === 1'b1),1.0);
      
      // hold SE-HL CK-LH
      $hold(posedge CK &&& (ENABLE_D_AND_NOT_RD_AND_SI === 1'b1),
      negedge SE &&& (ENABLE_D_AND_NOT_RD_AND_SI === 1'b1),1.0);
      
      // hold SE-LH CK-LH
      $hold(posedge CK &&& (ENABLE_D_AND_NOT_RD_AND_SI === 1'b1),
      posedge SE &&& (ENABLE_D_AND_NOT_RD_AND_SI === 1'b1),1.0);
      
      // setup SE-HL CK-LH
      $setup(negedge SE &&& (ENABLE_D_AND_NOT_RD_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_D_AND_NOT_RD_AND_SI === 1'b1),1.0);
      
      // setup SE-LH CK-LH
      $setup(posedge SE &&& (ENABLE_D_AND_NOT_RD_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_D_AND_NOT_RD_AND_SI === 1'b1),1.0);
      
      // hold SE-HL CK-LH
      $hold(posedge CK &&& (ENABLE_D_AND_RD_AND_NOT_SI === 1'b1),
      negedge SE &&& (ENABLE_D_AND_RD_AND_NOT_SI === 1'b1),1.0);
      
      // hold SE-LH CK-LH
      $hold(posedge CK &&& (ENABLE_D_AND_RD_AND_NOT_SI === 1'b1),
      posedge SE &&& (ENABLE_D_AND_RD_AND_NOT_SI === 1'b1),1.0);
      
      // setup SE-HL CK-LH
      $setup(negedge SE &&& (ENABLE_D_AND_RD_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_D_AND_RD_AND_NOT_SI === 1'b1),1.0);
      
      // setup SE-LH CK-LH
      $setup(posedge SE &&& (ENABLE_D_AND_RD_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_D_AND_RD_AND_NOT_SI === 1'b1),1.0);
      
      // hold SI-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D_AND_NOT_RD_AND_SE === 1'b1),
      negedge SI &&& (ENABLE_NOT_D_AND_NOT_RD_AND_SE === 1'b1),1.0);
      
      // hold SI-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D_AND_NOT_RD_AND_SE === 1'b1),
      posedge SI &&& (ENABLE_NOT_D_AND_NOT_RD_AND_SE === 1'b1),1.0);
      
      // setup SI-HL CK-LH
      $setup(negedge SI &&& (ENABLE_NOT_D_AND_NOT_RD_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_NOT_RD_AND_SE === 1'b1),1.0);
      
      // setup SI-LH CK-LH
      $setup(posedge SI &&& (ENABLE_NOT_D_AND_NOT_RD_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_NOT_RD_AND_SE === 1'b1),1.0);
      
      // hold SI-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D_AND_RD_AND_SE === 1'b1),
      negedge SI &&& (ENABLE_NOT_D_AND_RD_AND_SE === 1'b1),1.0);
      
      // hold SI-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D_AND_RD_AND_SE === 1'b1),
      posedge SI &&& (ENABLE_NOT_D_AND_RD_AND_SE === 1'b1),1.0);
      
      // setup SI-HL CK-LH
      $setup(negedge SI &&& (ENABLE_NOT_D_AND_RD_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_RD_AND_SE === 1'b1),1.0);
      
      // setup SI-LH CK-LH
      $setup(posedge SI &&& (ENABLE_NOT_D_AND_RD_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_RD_AND_SE === 1'b1),1.0);
      
      // hold SI-HL CK-LH
      $hold(posedge CK &&& (ENABLE_D_AND_NOT_RD_AND_SE === 1'b1),
      negedge SI &&& (ENABLE_D_AND_NOT_RD_AND_SE === 1'b1),1.0);
      
      // hold SI-LH CK-LH
      $hold(posedge CK &&& (ENABLE_D_AND_NOT_RD_AND_SE === 1'b1),
      posedge SI &&& (ENABLE_D_AND_NOT_RD_AND_SE === 1'b1),1.0);
      
      // setup SI-HL CK-LH
      $setup(negedge SI &&& (ENABLE_D_AND_NOT_RD_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_D_AND_NOT_RD_AND_SE === 1'b1),1.0);
      
      // setup SI-LH CK-LH
      $setup(posedge SI &&& (ENABLE_D_AND_NOT_RD_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_D_AND_NOT_RD_AND_SE === 1'b1),1.0);
      
      // hold SI-HL CK-LH
      $hold(posedge CK &&& (ENABLE_D_AND_RD_AND_SE === 1'b1),
      negedge SI &&& (ENABLE_D_AND_RD_AND_SE === 1'b1),1.0);
      
      // hold SI-LH CK-LH
      $hold(posedge CK &&& (ENABLE_D_AND_RD_AND_SE === 1'b1),
      posedge SI &&& (ENABLE_D_AND_RD_AND_SE === 1'b1),1.0);
      
      // setup SI-HL CK-LH
      $setup(negedge SI &&& (ENABLE_D_AND_RD_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_D_AND_RD_AND_SE === 1'b1),1.0);
      
      // setup SI-LH CK-LH
      $setup(posedge SI &&& (ENABLE_D_AND_RD_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_D_AND_RD_AND_SE === 1'b1),1.0);
      
      // mpw CK_lh 
      $width(posedge CK,1.0,0);
      
      // mpw CK_hl 
      $width(negedge CK,1.0,0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_FSDPSYNRBQ_V2LP_1( Q, CK, D, SI, SE, RD );
input CK, D, RD, SE, SI;
output Q;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_FSDPSYNRBQ_V2LP_1_func SAEDRVT14_FSDPSYNRBQ_V2LP_1_behav_inst(.Q(Q),.CK(CK),.D(D),.SI(SI),.SE(SE),.RD(RD));
`else
   SAEDRVT14_FSDPSYNRBQ_V2LP_1_func SAEDRVT14_FSDPSYNRBQ_V2LP_1_inst(.Q(Q),.CK(CK),.D(D),.SI(SI),.SE(SE),.RD(RD));
   // spec_gates_begin
   not MGM_G0(MGM_W0,D);
   not MGM_G1(MGM_W1,RD);
   and MGM_G2(MGM_W2,MGM_W1,MGM_W0);
   not MGM_G3(MGM_W3,SE);
   and MGM_G4(MGM_W4,MGM_W3,MGM_W2);
   not MGM_G5(MGM_W5,SI);
   and MGM_G6(ENABLE_NOT_D_AND_NOT_RD_AND_NOT_SE_AND_NOT_SI,MGM_W5,MGM_W4);
   not MGM_G7(MGM_W6,D);
   not MGM_G8(MGM_W7,RD);
   and MGM_G9(MGM_W8,MGM_W7,MGM_W6);
   not MGM_G10(MGM_W9,SE);
   and MGM_G11(MGM_W10,MGM_W9,MGM_W8);
   and MGM_G12(ENABLE_NOT_D_AND_NOT_RD_AND_NOT_SE_AND_SI,SI,MGM_W10);
   not MGM_G13(MGM_W11,D);
   not MGM_G14(MGM_W12,RD);
   and MGM_G15(MGM_W13,MGM_W12,MGM_W11);
   and MGM_G16(MGM_W14,SE,MGM_W13);
   not MGM_G17(MGM_W15,SI);
   and MGM_G18(ENABLE_NOT_D_AND_NOT_RD_AND_SE_AND_NOT_SI,MGM_W15,MGM_W14);
   not MGM_G19(MGM_W16,D);
   not MGM_G20(MGM_W17,RD);
   and MGM_G21(MGM_W18,MGM_W17,MGM_W16);
   and MGM_G22(MGM_W19,SE,MGM_W18);
   and MGM_G23(ENABLE_NOT_D_AND_NOT_RD_AND_SE_AND_SI,SI,MGM_W19);
   not MGM_G24(MGM_W20,D);
   and MGM_G25(MGM_W21,RD,MGM_W20);
   not MGM_G26(MGM_W22,SE);
   and MGM_G27(MGM_W23,MGM_W22,MGM_W21);
   not MGM_G28(MGM_W24,SI);
   and MGM_G29(ENABLE_NOT_D_AND_RD_AND_NOT_SE_AND_NOT_SI,MGM_W24,MGM_W23);
   not MGM_G30(MGM_W25,D);
   and MGM_G31(MGM_W26,RD,MGM_W25);
   not MGM_G32(MGM_W27,SE);
   and MGM_G33(MGM_W28,MGM_W27,MGM_W26);
   and MGM_G34(ENABLE_NOT_D_AND_RD_AND_NOT_SE_AND_SI,SI,MGM_W28);
   not MGM_G35(MGM_W29,D);
   and MGM_G36(MGM_W30,RD,MGM_W29);
   and MGM_G37(MGM_W31,SE,MGM_W30);
   not MGM_G38(MGM_W32,SI);
   and MGM_G39(ENABLE_NOT_D_AND_RD_AND_SE_AND_NOT_SI,MGM_W32,MGM_W31);
   not MGM_G40(MGM_W33,D);
   and MGM_G41(MGM_W34,RD,MGM_W33);
   and MGM_G42(MGM_W35,SE,MGM_W34);
   and MGM_G43(ENABLE_NOT_D_AND_RD_AND_SE_AND_SI,SI,MGM_W35);
   not MGM_G44(MGM_W36,RD);
   and MGM_G45(MGM_W37,MGM_W36,D);
   not MGM_G46(MGM_W38,SE);
   and MGM_G47(MGM_W39,MGM_W38,MGM_W37);
   not MGM_G48(MGM_W40,SI);
   and MGM_G49(ENABLE_D_AND_NOT_RD_AND_NOT_SE_AND_NOT_SI,MGM_W40,MGM_W39);
   not MGM_G50(MGM_W41,RD);
   and MGM_G51(MGM_W42,MGM_W41,D);
   not MGM_G52(MGM_W43,SE);
   and MGM_G53(MGM_W44,MGM_W43,MGM_W42);
   and MGM_G54(ENABLE_D_AND_NOT_RD_AND_NOT_SE_AND_SI,SI,MGM_W44);
   not MGM_G55(MGM_W45,RD);
   and MGM_G56(MGM_W46,MGM_W45,D);
   and MGM_G57(MGM_W47,SE,MGM_W46);
   not MGM_G58(MGM_W48,SI);
   and MGM_G59(ENABLE_D_AND_NOT_RD_AND_SE_AND_NOT_SI,MGM_W48,MGM_W47);
   not MGM_G60(MGM_W49,RD);
   and MGM_G61(MGM_W50,MGM_W49,D);
   and MGM_G62(MGM_W51,SE,MGM_W50);
   and MGM_G63(ENABLE_D_AND_NOT_RD_AND_SE_AND_SI,SI,MGM_W51);
   and MGM_G64(MGM_W52,RD,D);
   not MGM_G65(MGM_W53,SE);
   and MGM_G66(MGM_W54,MGM_W53,MGM_W52);
   not MGM_G67(MGM_W55,SI);
   and MGM_G68(ENABLE_D_AND_RD_AND_NOT_SE_AND_NOT_SI,MGM_W55,MGM_W54);
   and MGM_G69(MGM_W56,RD,D);
   not MGM_G70(MGM_W57,SE);
   and MGM_G71(MGM_W58,MGM_W57,MGM_W56);
   and MGM_G72(ENABLE_D_AND_RD_AND_NOT_SE_AND_SI,SI,MGM_W58);
   and MGM_G73(MGM_W59,RD,D);
   and MGM_G74(MGM_W60,SE,MGM_W59);
   not MGM_G75(MGM_W61,SI);
   and MGM_G76(ENABLE_D_AND_RD_AND_SE_AND_NOT_SI,MGM_W61,MGM_W60);
   and MGM_G77(MGM_W62,RD,D);
   and MGM_G78(MGM_W63,SE,MGM_W62);
   and MGM_G79(ENABLE_D_AND_RD_AND_SE_AND_SI,SI,MGM_W63);
   not MGM_G80(MGM_W64,SE);
   and MGM_G81(MGM_W65,MGM_W64,RD);
   not MGM_G82(MGM_W66,SI);
   and MGM_G83(ENABLE_RD_AND_NOT_SE_AND_NOT_SI,MGM_W66,MGM_W65);
   not MGM_G84(MGM_W67,SE);
   and MGM_G85(MGM_W68,MGM_W67,RD);
   and MGM_G86(ENABLE_RD_AND_NOT_SE_AND_SI,SI,MGM_W68);
   not MGM_G87(MGM_W69,SE);
   and MGM_G88(MGM_W70,MGM_W69,D);
   not MGM_G89(MGM_W71,SI);
   and MGM_G90(ENABLE_D_AND_NOT_SE_AND_NOT_SI,MGM_W71,MGM_W70);
   not MGM_G91(MGM_W72,SE);
   and MGM_G92(MGM_W73,MGM_W72,D);
   and MGM_G93(ENABLE_D_AND_NOT_SE_AND_SI,SI,MGM_W73);
   not MGM_G94(MGM_W74,D);
   not MGM_G95(MGM_W75,RD);
   and MGM_G96(MGM_W76,MGM_W75,MGM_W74);
   and MGM_G97(ENABLE_NOT_D_AND_NOT_RD_AND_SI,SI,MGM_W76);
   not MGM_G98(MGM_W77,D);
   and MGM_G99(MGM_W78,RD,MGM_W77);
   and MGM_G100(ENABLE_NOT_D_AND_RD_AND_SI,SI,MGM_W78);
   not MGM_G101(MGM_W79,RD);
   and MGM_G102(MGM_W80,MGM_W79,D);
   and MGM_G103(ENABLE_D_AND_NOT_RD_AND_SI,SI,MGM_W80);
   and MGM_G104(MGM_W81,RD,D);
   not MGM_G105(MGM_W82,SI);
   and MGM_G106(ENABLE_D_AND_RD_AND_NOT_SI,MGM_W82,MGM_W81);
   not MGM_G107(MGM_W83,D);
   not MGM_G108(MGM_W84,RD);
   and MGM_G109(MGM_W85,MGM_W84,MGM_W83);
   and MGM_G110(ENABLE_NOT_D_AND_NOT_RD_AND_SE,SE,MGM_W85);
   not MGM_G111(MGM_W86,D);
   and MGM_G112(MGM_W87,RD,MGM_W86);
   and MGM_G113(ENABLE_NOT_D_AND_RD_AND_SE,SE,MGM_W87);
   not MGM_G114(MGM_W88,RD);
   and MGM_G115(MGM_W89,MGM_W88,D);
   and MGM_G116(ENABLE_D_AND_NOT_RD_AND_SE,SE,MGM_W89);
   and MGM_G117(MGM_W90,RD,D);
   and MGM_G118(ENABLE_D_AND_RD_AND_SE,SE,MGM_W90);
   // spec_gates_end
   // specify_block_begin
   specify

      if(D===1'b0 && RD===1'b0 && SE===1'b1 && SI===1'b0)
      // seq arc CK --> Q
      (posedge CK => (Q : D))  = (1.0,1.0);
      
      if(D===1'b0 && RD===1'b1 && SE===1'b1 && SI===1'b0)
      // seq arc CK --> Q
      (posedge CK => (Q : D))  = (1.0,1.0);
      
      if(D===1'b1 && RD===1'b0 && SE===1'b0 && SI===1'b0)
      // seq arc CK --> Q
      (posedge CK => (Q : D))  = (1.0,1.0);
      
      if(D===1'b1 && RD===1'b0 && SE===1'b1 && SI===1'b0)
      // seq arc CK --> Q
      (posedge CK => (Q : D))  = (1.0,1.0);
      
      if(D===1'b0 && RD===1'b0 && SI===1'b1)
      // seq arc CK --> Q
      (posedge CK => (Q : SE))  = (1.0,1.0);
      
      if(D===1'b0 && RD===1'b1 && SI===1'b1)
      // seq arc CK --> Q
      (posedge CK => (Q : SE))  = (1.0,1.0);
      
      if(D===1'b1 && RD===1'b0 && SI===1'b1)
      // seq arc CK --> Q
      (posedge CK => (Q : SE))  = (1.0,1.0);
      
      if(D===1'b1 && RD===1'b1 && SE===1'b0 && SI===1'b1 || D===1'b0 && RD===1'b0 && SE===1'b0 && SI===1'b0)
      // seq arc CK --> Q
      (posedge CK => (Q : D))  = (1.0,1.0);
      
      if(D===1'b1 && RD===1'b1 && SE===1'b1)
      // seq arc CK --> Q
      (posedge CK => (Q : SI))  = (1.0,1.0);
      
      if(RD===1'b1 && SE===1'b0 && SI===1'b0)
      // seq arc CK --> Q
      (posedge CK => (Q : D))  = (1.0,1.0);
      
      ifnone
      // seq arc CK --> Q
      (posedge CK => (Q : D))  = (1.0,1.0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_NOT_RD_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_NOT_RD_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_NOT_RD_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_NOT_RD_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_NOT_RD_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_NOT_RD_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_NOT_RD_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_NOT_RD_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_RD_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_RD_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_RD_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_RD_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_RD_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_RD_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_RD_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_RD_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_NOT_RD_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_NOT_RD_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_NOT_RD_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_NOT_RD_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_NOT_RD_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_NOT_RD_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_NOT_RD_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_NOT_RD_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_RD_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_RD_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_RD_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_RD_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_RD_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_RD_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_RD_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_RD_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      // hold D-HL CK-LH
      $hold(posedge CK &&& (ENABLE_RD_AND_NOT_SE_AND_NOT_SI === 1'b1),
      negedge D &&& (ENABLE_RD_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold D-LH CK-LH
      $hold(posedge CK &&& (ENABLE_RD_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge D &&& (ENABLE_RD_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup D-HL CK-LH
      $setup(negedge D &&& (ENABLE_RD_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_RD_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup D-LH CK-LH
      $setup(posedge D &&& (ENABLE_RD_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_RD_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold D-HL CK-LH
      $hold(posedge CK &&& (ENABLE_RD_AND_NOT_SE_AND_SI === 1'b1),
      negedge D &&& (ENABLE_RD_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // hold D-LH CK-LH
      $hold(posedge CK &&& (ENABLE_RD_AND_NOT_SE_AND_SI === 1'b1),
      posedge D &&& (ENABLE_RD_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // setup D-HL CK-LH
      $setup(negedge D &&& (ENABLE_RD_AND_NOT_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_RD_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // setup D-LH CK-LH
      $setup(posedge D &&& (ENABLE_RD_AND_NOT_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_RD_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // hold RD-HL CK-LH
      $hold(posedge CK &&& (ENABLE_D_AND_NOT_SE_AND_NOT_SI === 1'b1),
      negedge RD &&& (ENABLE_D_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold RD-LH CK-LH
      $hold(posedge CK &&& (ENABLE_D_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge RD &&& (ENABLE_D_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup RD-HL CK-LH
      $setup(negedge RD &&& (ENABLE_D_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_D_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup RD-LH CK-LH
      $setup(posedge RD &&& (ENABLE_D_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_D_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold RD-HL CK-LH
      $hold(posedge CK &&& (ENABLE_D_AND_NOT_SE_AND_SI === 1'b1),
      negedge RD &&& (ENABLE_D_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // hold RD-LH CK-LH
      $hold(posedge CK &&& (ENABLE_D_AND_NOT_SE_AND_SI === 1'b1),
      posedge RD &&& (ENABLE_D_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // setup RD-HL CK-LH
      $setup(negedge RD &&& (ENABLE_D_AND_NOT_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_D_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // setup RD-LH CK-LH
      $setup(posedge RD &&& (ENABLE_D_AND_NOT_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_D_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // hold SE-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D_AND_NOT_RD_AND_SI === 1'b1),
      negedge SE &&& (ENABLE_NOT_D_AND_NOT_RD_AND_SI === 1'b1),1.0);
      
      // hold SE-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D_AND_NOT_RD_AND_SI === 1'b1),
      posedge SE &&& (ENABLE_NOT_D_AND_NOT_RD_AND_SI === 1'b1),1.0);
      
      // setup SE-HL CK-LH
      $setup(negedge SE &&& (ENABLE_NOT_D_AND_NOT_RD_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_NOT_RD_AND_SI === 1'b1),1.0);
      
      // setup SE-LH CK-LH
      $setup(posedge SE &&& (ENABLE_NOT_D_AND_NOT_RD_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_NOT_RD_AND_SI === 1'b1),1.0);
      
      // hold SE-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D_AND_RD_AND_SI === 1'b1),
      negedge SE &&& (ENABLE_NOT_D_AND_RD_AND_SI === 1'b1),1.0);
      
      // hold SE-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D_AND_RD_AND_SI === 1'b1),
      posedge SE &&& (ENABLE_NOT_D_AND_RD_AND_SI === 1'b1),1.0);
      
      // setup SE-HL CK-LH
      $setup(negedge SE &&& (ENABLE_NOT_D_AND_RD_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_RD_AND_SI === 1'b1),1.0);
      
      // setup SE-LH CK-LH
      $setup(posedge SE &&& (ENABLE_NOT_D_AND_RD_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_RD_AND_SI === 1'b1),1.0);
      
      // hold SE-HL CK-LH
      $hold(posedge CK &&& (ENABLE_D_AND_NOT_RD_AND_SI === 1'b1),
      negedge SE &&& (ENABLE_D_AND_NOT_RD_AND_SI === 1'b1),1.0);
      
      // hold SE-LH CK-LH
      $hold(posedge CK &&& (ENABLE_D_AND_NOT_RD_AND_SI === 1'b1),
      posedge SE &&& (ENABLE_D_AND_NOT_RD_AND_SI === 1'b1),1.0);
      
      // setup SE-HL CK-LH
      $setup(negedge SE &&& (ENABLE_D_AND_NOT_RD_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_D_AND_NOT_RD_AND_SI === 1'b1),1.0);
      
      // setup SE-LH CK-LH
      $setup(posedge SE &&& (ENABLE_D_AND_NOT_RD_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_D_AND_NOT_RD_AND_SI === 1'b1),1.0);
      
      // hold SE-HL CK-LH
      $hold(posedge CK &&& (ENABLE_D_AND_RD_AND_NOT_SI === 1'b1),
      negedge SE &&& (ENABLE_D_AND_RD_AND_NOT_SI === 1'b1),1.0);
      
      // hold SE-LH CK-LH
      $hold(posedge CK &&& (ENABLE_D_AND_RD_AND_NOT_SI === 1'b1),
      posedge SE &&& (ENABLE_D_AND_RD_AND_NOT_SI === 1'b1),1.0);
      
      // setup SE-HL CK-LH
      $setup(negedge SE &&& (ENABLE_D_AND_RD_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_D_AND_RD_AND_NOT_SI === 1'b1),1.0);
      
      // setup SE-LH CK-LH
      $setup(posedge SE &&& (ENABLE_D_AND_RD_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_D_AND_RD_AND_NOT_SI === 1'b1),1.0);
      
      // hold SI-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D_AND_NOT_RD_AND_SE === 1'b1),
      negedge SI &&& (ENABLE_NOT_D_AND_NOT_RD_AND_SE === 1'b1),1.0);
      
      // hold SI-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D_AND_NOT_RD_AND_SE === 1'b1),
      posedge SI &&& (ENABLE_NOT_D_AND_NOT_RD_AND_SE === 1'b1),1.0);
      
      // setup SI-HL CK-LH
      $setup(negedge SI &&& (ENABLE_NOT_D_AND_NOT_RD_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_NOT_RD_AND_SE === 1'b1),1.0);
      
      // setup SI-LH CK-LH
      $setup(posedge SI &&& (ENABLE_NOT_D_AND_NOT_RD_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_NOT_RD_AND_SE === 1'b1),1.0);
      
      // hold SI-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D_AND_RD_AND_SE === 1'b1),
      negedge SI &&& (ENABLE_NOT_D_AND_RD_AND_SE === 1'b1),1.0);
      
      // hold SI-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D_AND_RD_AND_SE === 1'b1),
      posedge SI &&& (ENABLE_NOT_D_AND_RD_AND_SE === 1'b1),1.0);
      
      // setup SI-HL CK-LH
      $setup(negedge SI &&& (ENABLE_NOT_D_AND_RD_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_RD_AND_SE === 1'b1),1.0);
      
      // setup SI-LH CK-LH
      $setup(posedge SI &&& (ENABLE_NOT_D_AND_RD_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_RD_AND_SE === 1'b1),1.0);
      
      // hold SI-HL CK-LH
      $hold(posedge CK &&& (ENABLE_D_AND_NOT_RD_AND_SE === 1'b1),
      negedge SI &&& (ENABLE_D_AND_NOT_RD_AND_SE === 1'b1),1.0);
      
      // hold SI-LH CK-LH
      $hold(posedge CK &&& (ENABLE_D_AND_NOT_RD_AND_SE === 1'b1),
      posedge SI &&& (ENABLE_D_AND_NOT_RD_AND_SE === 1'b1),1.0);
      
      // setup SI-HL CK-LH
      $setup(negedge SI &&& (ENABLE_D_AND_NOT_RD_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_D_AND_NOT_RD_AND_SE === 1'b1),1.0);
      
      // setup SI-LH CK-LH
      $setup(posedge SI &&& (ENABLE_D_AND_NOT_RD_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_D_AND_NOT_RD_AND_SE === 1'b1),1.0);
      
      // hold SI-HL CK-LH
      $hold(posedge CK &&& (ENABLE_D_AND_RD_AND_SE === 1'b1),
      negedge SI &&& (ENABLE_D_AND_RD_AND_SE === 1'b1),1.0);
      
      // hold SI-LH CK-LH
      $hold(posedge CK &&& (ENABLE_D_AND_RD_AND_SE === 1'b1),
      posedge SI &&& (ENABLE_D_AND_RD_AND_SE === 1'b1),1.0);
      
      // setup SI-HL CK-LH
      $setup(negedge SI &&& (ENABLE_D_AND_RD_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_D_AND_RD_AND_SE === 1'b1),1.0);
      
      // setup SI-LH CK-LH
      $setup(posedge SI &&& (ENABLE_D_AND_RD_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_D_AND_RD_AND_SE === 1'b1),1.0);
      
      // mpw CK_lh 
      $width(posedge CK,1.0,0);
      
      // mpw CK_hl 
      $width(negedge CK,1.0,0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_FSDPSYNRBQ_V2LP_2( Q, CK, D, SI, SE, RD );
input CK, D, RD, SE, SI;
output Q;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_FSDPSYNRBQ_V2LP_2_func SAEDRVT14_FSDPSYNRBQ_V2LP_2_behav_inst(.Q(Q),.CK(CK),.D(D),.SI(SI),.SE(SE),.RD(RD));
`else
   SAEDRVT14_FSDPSYNRBQ_V2LP_2_func SAEDRVT14_FSDPSYNRBQ_V2LP_2_inst(.Q(Q),.CK(CK),.D(D),.SI(SI),.SE(SE),.RD(RD));
   // spec_gates_begin
   not MGM_G0(MGM_W0,D);
   not MGM_G1(MGM_W1,RD);
   and MGM_G2(MGM_W2,MGM_W1,MGM_W0);
   not MGM_G3(MGM_W3,SE);
   and MGM_G4(MGM_W4,MGM_W3,MGM_W2);
   not MGM_G5(MGM_W5,SI);
   and MGM_G6(ENABLE_NOT_D_AND_NOT_RD_AND_NOT_SE_AND_NOT_SI,MGM_W5,MGM_W4);
   not MGM_G7(MGM_W6,D);
   not MGM_G8(MGM_W7,RD);
   and MGM_G9(MGM_W8,MGM_W7,MGM_W6);
   not MGM_G10(MGM_W9,SE);
   and MGM_G11(MGM_W10,MGM_W9,MGM_W8);
   and MGM_G12(ENABLE_NOT_D_AND_NOT_RD_AND_NOT_SE_AND_SI,SI,MGM_W10);
   not MGM_G13(MGM_W11,D);
   not MGM_G14(MGM_W12,RD);
   and MGM_G15(MGM_W13,MGM_W12,MGM_W11);
   and MGM_G16(MGM_W14,SE,MGM_W13);
   not MGM_G17(MGM_W15,SI);
   and MGM_G18(ENABLE_NOT_D_AND_NOT_RD_AND_SE_AND_NOT_SI,MGM_W15,MGM_W14);
   not MGM_G19(MGM_W16,D);
   not MGM_G20(MGM_W17,RD);
   and MGM_G21(MGM_W18,MGM_W17,MGM_W16);
   and MGM_G22(MGM_W19,SE,MGM_W18);
   and MGM_G23(ENABLE_NOT_D_AND_NOT_RD_AND_SE_AND_SI,SI,MGM_W19);
   not MGM_G24(MGM_W20,D);
   and MGM_G25(MGM_W21,RD,MGM_W20);
   not MGM_G26(MGM_W22,SE);
   and MGM_G27(MGM_W23,MGM_W22,MGM_W21);
   not MGM_G28(MGM_W24,SI);
   and MGM_G29(ENABLE_NOT_D_AND_RD_AND_NOT_SE_AND_NOT_SI,MGM_W24,MGM_W23);
   not MGM_G30(MGM_W25,D);
   and MGM_G31(MGM_W26,RD,MGM_W25);
   not MGM_G32(MGM_W27,SE);
   and MGM_G33(MGM_W28,MGM_W27,MGM_W26);
   and MGM_G34(ENABLE_NOT_D_AND_RD_AND_NOT_SE_AND_SI,SI,MGM_W28);
   not MGM_G35(MGM_W29,D);
   and MGM_G36(MGM_W30,RD,MGM_W29);
   and MGM_G37(MGM_W31,SE,MGM_W30);
   not MGM_G38(MGM_W32,SI);
   and MGM_G39(ENABLE_NOT_D_AND_RD_AND_SE_AND_NOT_SI,MGM_W32,MGM_W31);
   not MGM_G40(MGM_W33,D);
   and MGM_G41(MGM_W34,RD,MGM_W33);
   and MGM_G42(MGM_W35,SE,MGM_W34);
   and MGM_G43(ENABLE_NOT_D_AND_RD_AND_SE_AND_SI,SI,MGM_W35);
   not MGM_G44(MGM_W36,RD);
   and MGM_G45(MGM_W37,MGM_W36,D);
   not MGM_G46(MGM_W38,SE);
   and MGM_G47(MGM_W39,MGM_W38,MGM_W37);
   not MGM_G48(MGM_W40,SI);
   and MGM_G49(ENABLE_D_AND_NOT_RD_AND_NOT_SE_AND_NOT_SI,MGM_W40,MGM_W39);
   not MGM_G50(MGM_W41,RD);
   and MGM_G51(MGM_W42,MGM_W41,D);
   not MGM_G52(MGM_W43,SE);
   and MGM_G53(MGM_W44,MGM_W43,MGM_W42);
   and MGM_G54(ENABLE_D_AND_NOT_RD_AND_NOT_SE_AND_SI,SI,MGM_W44);
   not MGM_G55(MGM_W45,RD);
   and MGM_G56(MGM_W46,MGM_W45,D);
   and MGM_G57(MGM_W47,SE,MGM_W46);
   not MGM_G58(MGM_W48,SI);
   and MGM_G59(ENABLE_D_AND_NOT_RD_AND_SE_AND_NOT_SI,MGM_W48,MGM_W47);
   not MGM_G60(MGM_W49,RD);
   and MGM_G61(MGM_W50,MGM_W49,D);
   and MGM_G62(MGM_W51,SE,MGM_W50);
   and MGM_G63(ENABLE_D_AND_NOT_RD_AND_SE_AND_SI,SI,MGM_W51);
   and MGM_G64(MGM_W52,RD,D);
   not MGM_G65(MGM_W53,SE);
   and MGM_G66(MGM_W54,MGM_W53,MGM_W52);
   not MGM_G67(MGM_W55,SI);
   and MGM_G68(ENABLE_D_AND_RD_AND_NOT_SE_AND_NOT_SI,MGM_W55,MGM_W54);
   and MGM_G69(MGM_W56,RD,D);
   not MGM_G70(MGM_W57,SE);
   and MGM_G71(MGM_W58,MGM_W57,MGM_W56);
   and MGM_G72(ENABLE_D_AND_RD_AND_NOT_SE_AND_SI,SI,MGM_W58);
   and MGM_G73(MGM_W59,RD,D);
   and MGM_G74(MGM_W60,SE,MGM_W59);
   not MGM_G75(MGM_W61,SI);
   and MGM_G76(ENABLE_D_AND_RD_AND_SE_AND_NOT_SI,MGM_W61,MGM_W60);
   and MGM_G77(MGM_W62,RD,D);
   and MGM_G78(MGM_W63,SE,MGM_W62);
   and MGM_G79(ENABLE_D_AND_RD_AND_SE_AND_SI,SI,MGM_W63);
   not MGM_G80(MGM_W64,SE);
   and MGM_G81(MGM_W65,MGM_W64,RD);
   not MGM_G82(MGM_W66,SI);
   and MGM_G83(ENABLE_RD_AND_NOT_SE_AND_NOT_SI,MGM_W66,MGM_W65);
   not MGM_G84(MGM_W67,SE);
   and MGM_G85(MGM_W68,MGM_W67,RD);
   and MGM_G86(ENABLE_RD_AND_NOT_SE_AND_SI,SI,MGM_W68);
   not MGM_G87(MGM_W69,SE);
   and MGM_G88(MGM_W70,MGM_W69,D);
   not MGM_G89(MGM_W71,SI);
   and MGM_G90(ENABLE_D_AND_NOT_SE_AND_NOT_SI,MGM_W71,MGM_W70);
   not MGM_G91(MGM_W72,SE);
   and MGM_G92(MGM_W73,MGM_W72,D);
   and MGM_G93(ENABLE_D_AND_NOT_SE_AND_SI,SI,MGM_W73);
   not MGM_G94(MGM_W74,D);
   not MGM_G95(MGM_W75,RD);
   and MGM_G96(MGM_W76,MGM_W75,MGM_W74);
   and MGM_G97(ENABLE_NOT_D_AND_NOT_RD_AND_SI,SI,MGM_W76);
   not MGM_G98(MGM_W77,D);
   and MGM_G99(MGM_W78,RD,MGM_W77);
   and MGM_G100(ENABLE_NOT_D_AND_RD_AND_SI,SI,MGM_W78);
   not MGM_G101(MGM_W79,RD);
   and MGM_G102(MGM_W80,MGM_W79,D);
   and MGM_G103(ENABLE_D_AND_NOT_RD_AND_SI,SI,MGM_W80);
   and MGM_G104(MGM_W81,RD,D);
   not MGM_G105(MGM_W82,SI);
   and MGM_G106(ENABLE_D_AND_RD_AND_NOT_SI,MGM_W82,MGM_W81);
   not MGM_G107(MGM_W83,D);
   not MGM_G108(MGM_W84,RD);
   and MGM_G109(MGM_W85,MGM_W84,MGM_W83);
   and MGM_G110(ENABLE_NOT_D_AND_NOT_RD_AND_SE,SE,MGM_W85);
   not MGM_G111(MGM_W86,D);
   and MGM_G112(MGM_W87,RD,MGM_W86);
   and MGM_G113(ENABLE_NOT_D_AND_RD_AND_SE,SE,MGM_W87);
   not MGM_G114(MGM_W88,RD);
   and MGM_G115(MGM_W89,MGM_W88,D);
   and MGM_G116(ENABLE_D_AND_NOT_RD_AND_SE,SE,MGM_W89);
   and MGM_G117(MGM_W90,RD,D);
   and MGM_G118(ENABLE_D_AND_RD_AND_SE,SE,MGM_W90);
   // spec_gates_end
   // specify_block_begin
   specify

      if(D===1'b0 && RD===1'b0 && SE===1'b1 && SI===1'b0)
      // seq arc CK --> Q
      (posedge CK => (Q : D))  = (1.0,1.0);
      
      if(D===1'b0 && RD===1'b1 && SE===1'b1 && SI===1'b0)
      // seq arc CK --> Q
      (posedge CK => (Q : D))  = (1.0,1.0);
      
      if(D===1'b1 && RD===1'b0 && SE===1'b0 && SI===1'b0)
      // seq arc CK --> Q
      (posedge CK => (Q : D))  = (1.0,1.0);
      
      if(D===1'b1 && RD===1'b0 && SE===1'b1 && SI===1'b0)
      // seq arc CK --> Q
      (posedge CK => (Q : D))  = (1.0,1.0);
      
      if(D===1'b0 && RD===1'b0 && SI===1'b1)
      // seq arc CK --> Q
      (posedge CK => (Q : SE))  = (1.0,1.0);
      
      if(D===1'b0 && RD===1'b1 && SI===1'b1)
      // seq arc CK --> Q
      (posedge CK => (Q : SE))  = (1.0,1.0);
      
      if(D===1'b1 && RD===1'b0 && SI===1'b1)
      // seq arc CK --> Q
      (posedge CK => (Q : SE))  = (1.0,1.0);
      
      if(D===1'b1 && RD===1'b1 && SE===1'b0 && SI===1'b1 || D===1'b0 && RD===1'b0 && SE===1'b0 && SI===1'b0)
      // seq arc CK --> Q
      (posedge CK => (Q : D))  = (1.0,1.0);
      
      if(D===1'b1 && RD===1'b1 && SE===1'b1)
      // seq arc CK --> Q
      (posedge CK => (Q : SI))  = (1.0,1.0);
      
      if(RD===1'b1 && SE===1'b0 && SI===1'b0)
      // seq arc CK --> Q
      (posedge CK => (Q : D))  = (1.0,1.0);
      
      ifnone
      // seq arc CK --> Q
      (posedge CK => (Q : D))  = (1.0,1.0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_NOT_RD_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_NOT_RD_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_NOT_RD_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_NOT_RD_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_NOT_RD_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_NOT_RD_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_NOT_RD_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_NOT_RD_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_RD_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_RD_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_RD_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_RD_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_RD_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_RD_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_RD_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_RD_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_NOT_RD_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_NOT_RD_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_NOT_RD_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_NOT_RD_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_NOT_RD_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_NOT_RD_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_NOT_RD_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_NOT_RD_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_RD_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_RD_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_RD_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_RD_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_RD_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_RD_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_RD_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_RD_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      // hold D-HL CK-LH
      $hold(posedge CK &&& (ENABLE_RD_AND_NOT_SE_AND_NOT_SI === 1'b1),
      negedge D &&& (ENABLE_RD_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold D-LH CK-LH
      $hold(posedge CK &&& (ENABLE_RD_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge D &&& (ENABLE_RD_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup D-HL CK-LH
      $setup(negedge D &&& (ENABLE_RD_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_RD_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup D-LH CK-LH
      $setup(posedge D &&& (ENABLE_RD_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_RD_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold D-HL CK-LH
      $hold(posedge CK &&& (ENABLE_RD_AND_NOT_SE_AND_SI === 1'b1),
      negedge D &&& (ENABLE_RD_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // hold D-LH CK-LH
      $hold(posedge CK &&& (ENABLE_RD_AND_NOT_SE_AND_SI === 1'b1),
      posedge D &&& (ENABLE_RD_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // setup D-HL CK-LH
      $setup(negedge D &&& (ENABLE_RD_AND_NOT_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_RD_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // setup D-LH CK-LH
      $setup(posedge D &&& (ENABLE_RD_AND_NOT_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_RD_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // hold RD-HL CK-LH
      $hold(posedge CK &&& (ENABLE_D_AND_NOT_SE_AND_NOT_SI === 1'b1),
      negedge RD &&& (ENABLE_D_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold RD-LH CK-LH
      $hold(posedge CK &&& (ENABLE_D_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge RD &&& (ENABLE_D_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup RD-HL CK-LH
      $setup(negedge RD &&& (ENABLE_D_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_D_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup RD-LH CK-LH
      $setup(posedge RD &&& (ENABLE_D_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_D_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold RD-HL CK-LH
      $hold(posedge CK &&& (ENABLE_D_AND_NOT_SE_AND_SI === 1'b1),
      negedge RD &&& (ENABLE_D_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // hold RD-LH CK-LH
      $hold(posedge CK &&& (ENABLE_D_AND_NOT_SE_AND_SI === 1'b1),
      posedge RD &&& (ENABLE_D_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // setup RD-HL CK-LH
      $setup(negedge RD &&& (ENABLE_D_AND_NOT_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_D_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // setup RD-LH CK-LH
      $setup(posedge RD &&& (ENABLE_D_AND_NOT_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_D_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // hold SE-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D_AND_NOT_RD_AND_SI === 1'b1),
      negedge SE &&& (ENABLE_NOT_D_AND_NOT_RD_AND_SI === 1'b1),1.0);
      
      // hold SE-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D_AND_NOT_RD_AND_SI === 1'b1),
      posedge SE &&& (ENABLE_NOT_D_AND_NOT_RD_AND_SI === 1'b1),1.0);
      
      // setup SE-HL CK-LH
      $setup(negedge SE &&& (ENABLE_NOT_D_AND_NOT_RD_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_NOT_RD_AND_SI === 1'b1),1.0);
      
      // setup SE-LH CK-LH
      $setup(posedge SE &&& (ENABLE_NOT_D_AND_NOT_RD_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_NOT_RD_AND_SI === 1'b1),1.0);
      
      // hold SE-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D_AND_RD_AND_SI === 1'b1),
      negedge SE &&& (ENABLE_NOT_D_AND_RD_AND_SI === 1'b1),1.0);
      
      // hold SE-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D_AND_RD_AND_SI === 1'b1),
      posedge SE &&& (ENABLE_NOT_D_AND_RD_AND_SI === 1'b1),1.0);
      
      // setup SE-HL CK-LH
      $setup(negedge SE &&& (ENABLE_NOT_D_AND_RD_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_RD_AND_SI === 1'b1),1.0);
      
      // setup SE-LH CK-LH
      $setup(posedge SE &&& (ENABLE_NOT_D_AND_RD_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_RD_AND_SI === 1'b1),1.0);
      
      // hold SE-HL CK-LH
      $hold(posedge CK &&& (ENABLE_D_AND_NOT_RD_AND_SI === 1'b1),
      negedge SE &&& (ENABLE_D_AND_NOT_RD_AND_SI === 1'b1),1.0);
      
      // hold SE-LH CK-LH
      $hold(posedge CK &&& (ENABLE_D_AND_NOT_RD_AND_SI === 1'b1),
      posedge SE &&& (ENABLE_D_AND_NOT_RD_AND_SI === 1'b1),1.0);
      
      // setup SE-HL CK-LH
      $setup(negedge SE &&& (ENABLE_D_AND_NOT_RD_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_D_AND_NOT_RD_AND_SI === 1'b1),1.0);
      
      // setup SE-LH CK-LH
      $setup(posedge SE &&& (ENABLE_D_AND_NOT_RD_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_D_AND_NOT_RD_AND_SI === 1'b1),1.0);
      
      // hold SE-HL CK-LH
      $hold(posedge CK &&& (ENABLE_D_AND_RD_AND_NOT_SI === 1'b1),
      negedge SE &&& (ENABLE_D_AND_RD_AND_NOT_SI === 1'b1),1.0);
      
      // hold SE-LH CK-LH
      $hold(posedge CK &&& (ENABLE_D_AND_RD_AND_NOT_SI === 1'b1),
      posedge SE &&& (ENABLE_D_AND_RD_AND_NOT_SI === 1'b1),1.0);
      
      // setup SE-HL CK-LH
      $setup(negedge SE &&& (ENABLE_D_AND_RD_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_D_AND_RD_AND_NOT_SI === 1'b1),1.0);
      
      // setup SE-LH CK-LH
      $setup(posedge SE &&& (ENABLE_D_AND_RD_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_D_AND_RD_AND_NOT_SI === 1'b1),1.0);
      
      // hold SI-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D_AND_NOT_RD_AND_SE === 1'b1),
      negedge SI &&& (ENABLE_NOT_D_AND_NOT_RD_AND_SE === 1'b1),1.0);
      
      // hold SI-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D_AND_NOT_RD_AND_SE === 1'b1),
      posedge SI &&& (ENABLE_NOT_D_AND_NOT_RD_AND_SE === 1'b1),1.0);
      
      // setup SI-HL CK-LH
      $setup(negedge SI &&& (ENABLE_NOT_D_AND_NOT_RD_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_NOT_RD_AND_SE === 1'b1),1.0);
      
      // setup SI-LH CK-LH
      $setup(posedge SI &&& (ENABLE_NOT_D_AND_NOT_RD_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_NOT_RD_AND_SE === 1'b1),1.0);
      
      // hold SI-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D_AND_RD_AND_SE === 1'b1),
      negedge SI &&& (ENABLE_NOT_D_AND_RD_AND_SE === 1'b1),1.0);
      
      // hold SI-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D_AND_RD_AND_SE === 1'b1),
      posedge SI &&& (ENABLE_NOT_D_AND_RD_AND_SE === 1'b1),1.0);
      
      // setup SI-HL CK-LH
      $setup(negedge SI &&& (ENABLE_NOT_D_AND_RD_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_RD_AND_SE === 1'b1),1.0);
      
      // setup SI-LH CK-LH
      $setup(posedge SI &&& (ENABLE_NOT_D_AND_RD_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_RD_AND_SE === 1'b1),1.0);
      
      // hold SI-HL CK-LH
      $hold(posedge CK &&& (ENABLE_D_AND_NOT_RD_AND_SE === 1'b1),
      negedge SI &&& (ENABLE_D_AND_NOT_RD_AND_SE === 1'b1),1.0);
      
      // hold SI-LH CK-LH
      $hold(posedge CK &&& (ENABLE_D_AND_NOT_RD_AND_SE === 1'b1),
      posedge SI &&& (ENABLE_D_AND_NOT_RD_AND_SE === 1'b1),1.0);
      
      // setup SI-HL CK-LH
      $setup(negedge SI &&& (ENABLE_D_AND_NOT_RD_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_D_AND_NOT_RD_AND_SE === 1'b1),1.0);
      
      // setup SI-LH CK-LH
      $setup(posedge SI &&& (ENABLE_D_AND_NOT_RD_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_D_AND_NOT_RD_AND_SE === 1'b1),1.0);
      
      // hold SI-HL CK-LH
      $hold(posedge CK &&& (ENABLE_D_AND_RD_AND_SE === 1'b1),
      negedge SI &&& (ENABLE_D_AND_RD_AND_SE === 1'b1),1.0);
      
      // hold SI-LH CK-LH
      $hold(posedge CK &&& (ENABLE_D_AND_RD_AND_SE === 1'b1),
      posedge SI &&& (ENABLE_D_AND_RD_AND_SE === 1'b1),1.0);
      
      // setup SI-HL CK-LH
      $setup(negedge SI &&& (ENABLE_D_AND_RD_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_D_AND_RD_AND_SE === 1'b1),1.0);
      
      // setup SI-LH CK-LH
      $setup(posedge SI &&& (ENABLE_D_AND_RD_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_D_AND_RD_AND_SE === 1'b1),1.0);
      
      // mpw CK_lh 
      $width(posedge CK,1.0,0);
      
      // mpw CK_hl 
      $width(negedge CK,1.0,0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_FSDPSYNRBQ_V2_0P5( Q, CK, D, SI, SE, RD );
input CK, D, RD, SE, SI;
output Q;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_FSDPSYNRBQ_V2_0P5_func SAEDRVT14_FSDPSYNRBQ_V2_0P5_behav_inst(.Q(Q),.CK(CK),.D(D),.SI(SI),.SE(SE),.RD(RD));
`else
   SAEDRVT14_FSDPSYNRBQ_V2_0P5_func SAEDRVT14_FSDPSYNRBQ_V2_0P5_inst(.Q(Q),.CK(CK),.D(D),.SI(SI),.SE(SE),.RD(RD));
   // spec_gates_begin
   not MGM_G0(MGM_W0,D);
   not MGM_G1(MGM_W1,RD);
   and MGM_G2(MGM_W2,MGM_W1,MGM_W0);
   not MGM_G3(MGM_W3,SE);
   and MGM_G4(MGM_W4,MGM_W3,MGM_W2);
   not MGM_G5(MGM_W5,SI);
   and MGM_G6(ENABLE_NOT_D_AND_NOT_RD_AND_NOT_SE_AND_NOT_SI,MGM_W5,MGM_W4);
   not MGM_G7(MGM_W6,D);
   not MGM_G8(MGM_W7,RD);
   and MGM_G9(MGM_W8,MGM_W7,MGM_W6);
   not MGM_G10(MGM_W9,SE);
   and MGM_G11(MGM_W10,MGM_W9,MGM_W8);
   and MGM_G12(ENABLE_NOT_D_AND_NOT_RD_AND_NOT_SE_AND_SI,SI,MGM_W10);
   not MGM_G13(MGM_W11,D);
   not MGM_G14(MGM_W12,RD);
   and MGM_G15(MGM_W13,MGM_W12,MGM_W11);
   and MGM_G16(MGM_W14,SE,MGM_W13);
   not MGM_G17(MGM_W15,SI);
   and MGM_G18(ENABLE_NOT_D_AND_NOT_RD_AND_SE_AND_NOT_SI,MGM_W15,MGM_W14);
   not MGM_G19(MGM_W16,D);
   not MGM_G20(MGM_W17,RD);
   and MGM_G21(MGM_W18,MGM_W17,MGM_W16);
   and MGM_G22(MGM_W19,SE,MGM_W18);
   and MGM_G23(ENABLE_NOT_D_AND_NOT_RD_AND_SE_AND_SI,SI,MGM_W19);
   not MGM_G24(MGM_W20,D);
   and MGM_G25(MGM_W21,RD,MGM_W20);
   not MGM_G26(MGM_W22,SE);
   and MGM_G27(MGM_W23,MGM_W22,MGM_W21);
   not MGM_G28(MGM_W24,SI);
   and MGM_G29(ENABLE_NOT_D_AND_RD_AND_NOT_SE_AND_NOT_SI,MGM_W24,MGM_W23);
   not MGM_G30(MGM_W25,D);
   and MGM_G31(MGM_W26,RD,MGM_W25);
   not MGM_G32(MGM_W27,SE);
   and MGM_G33(MGM_W28,MGM_W27,MGM_W26);
   and MGM_G34(ENABLE_NOT_D_AND_RD_AND_NOT_SE_AND_SI,SI,MGM_W28);
   not MGM_G35(MGM_W29,D);
   and MGM_G36(MGM_W30,RD,MGM_W29);
   and MGM_G37(MGM_W31,SE,MGM_W30);
   not MGM_G38(MGM_W32,SI);
   and MGM_G39(ENABLE_NOT_D_AND_RD_AND_SE_AND_NOT_SI,MGM_W32,MGM_W31);
   not MGM_G40(MGM_W33,D);
   and MGM_G41(MGM_W34,RD,MGM_W33);
   and MGM_G42(MGM_W35,SE,MGM_W34);
   and MGM_G43(ENABLE_NOT_D_AND_RD_AND_SE_AND_SI,SI,MGM_W35);
   not MGM_G44(MGM_W36,RD);
   and MGM_G45(MGM_W37,MGM_W36,D);
   not MGM_G46(MGM_W38,SE);
   and MGM_G47(MGM_W39,MGM_W38,MGM_W37);
   not MGM_G48(MGM_W40,SI);
   and MGM_G49(ENABLE_D_AND_NOT_RD_AND_NOT_SE_AND_NOT_SI,MGM_W40,MGM_W39);
   not MGM_G50(MGM_W41,RD);
   and MGM_G51(MGM_W42,MGM_W41,D);
   not MGM_G52(MGM_W43,SE);
   and MGM_G53(MGM_W44,MGM_W43,MGM_W42);
   and MGM_G54(ENABLE_D_AND_NOT_RD_AND_NOT_SE_AND_SI,SI,MGM_W44);
   not MGM_G55(MGM_W45,RD);
   and MGM_G56(MGM_W46,MGM_W45,D);
   and MGM_G57(MGM_W47,SE,MGM_W46);
   not MGM_G58(MGM_W48,SI);
   and MGM_G59(ENABLE_D_AND_NOT_RD_AND_SE_AND_NOT_SI,MGM_W48,MGM_W47);
   not MGM_G60(MGM_W49,RD);
   and MGM_G61(MGM_W50,MGM_W49,D);
   and MGM_G62(MGM_W51,SE,MGM_W50);
   and MGM_G63(ENABLE_D_AND_NOT_RD_AND_SE_AND_SI,SI,MGM_W51);
   and MGM_G64(MGM_W52,RD,D);
   not MGM_G65(MGM_W53,SE);
   and MGM_G66(MGM_W54,MGM_W53,MGM_W52);
   not MGM_G67(MGM_W55,SI);
   and MGM_G68(ENABLE_D_AND_RD_AND_NOT_SE_AND_NOT_SI,MGM_W55,MGM_W54);
   and MGM_G69(MGM_W56,RD,D);
   not MGM_G70(MGM_W57,SE);
   and MGM_G71(MGM_W58,MGM_W57,MGM_W56);
   and MGM_G72(ENABLE_D_AND_RD_AND_NOT_SE_AND_SI,SI,MGM_W58);
   and MGM_G73(MGM_W59,RD,D);
   and MGM_G74(MGM_W60,SE,MGM_W59);
   not MGM_G75(MGM_W61,SI);
   and MGM_G76(ENABLE_D_AND_RD_AND_SE_AND_NOT_SI,MGM_W61,MGM_W60);
   and MGM_G77(MGM_W62,RD,D);
   and MGM_G78(MGM_W63,SE,MGM_W62);
   and MGM_G79(ENABLE_D_AND_RD_AND_SE_AND_SI,SI,MGM_W63);
   not MGM_G80(MGM_W64,SE);
   and MGM_G81(MGM_W65,MGM_W64,RD);
   not MGM_G82(MGM_W66,SI);
   and MGM_G83(ENABLE_RD_AND_NOT_SE_AND_NOT_SI,MGM_W66,MGM_W65);
   not MGM_G84(MGM_W67,SE);
   and MGM_G85(MGM_W68,MGM_W67,RD);
   and MGM_G86(ENABLE_RD_AND_NOT_SE_AND_SI,SI,MGM_W68);
   not MGM_G87(MGM_W69,SE);
   and MGM_G88(MGM_W70,MGM_W69,D);
   not MGM_G89(MGM_W71,SI);
   and MGM_G90(ENABLE_D_AND_NOT_SE_AND_NOT_SI,MGM_W71,MGM_W70);
   not MGM_G91(MGM_W72,SE);
   and MGM_G92(MGM_W73,MGM_W72,D);
   and MGM_G93(ENABLE_D_AND_NOT_SE_AND_SI,SI,MGM_W73);
   not MGM_G94(MGM_W74,D);
   not MGM_G95(MGM_W75,RD);
   and MGM_G96(MGM_W76,MGM_W75,MGM_W74);
   and MGM_G97(ENABLE_NOT_D_AND_NOT_RD_AND_SI,SI,MGM_W76);
   not MGM_G98(MGM_W77,D);
   and MGM_G99(MGM_W78,RD,MGM_W77);
   and MGM_G100(ENABLE_NOT_D_AND_RD_AND_SI,SI,MGM_W78);
   not MGM_G101(MGM_W79,RD);
   and MGM_G102(MGM_W80,MGM_W79,D);
   and MGM_G103(ENABLE_D_AND_NOT_RD_AND_SI,SI,MGM_W80);
   and MGM_G104(MGM_W81,RD,D);
   not MGM_G105(MGM_W82,SI);
   and MGM_G106(ENABLE_D_AND_RD_AND_NOT_SI,MGM_W82,MGM_W81);
   not MGM_G107(MGM_W83,D);
   not MGM_G108(MGM_W84,RD);
   and MGM_G109(MGM_W85,MGM_W84,MGM_W83);
   and MGM_G110(ENABLE_NOT_D_AND_NOT_RD_AND_SE,SE,MGM_W85);
   not MGM_G111(MGM_W86,D);
   and MGM_G112(MGM_W87,RD,MGM_W86);
   and MGM_G113(ENABLE_NOT_D_AND_RD_AND_SE,SE,MGM_W87);
   not MGM_G114(MGM_W88,RD);
   and MGM_G115(MGM_W89,MGM_W88,D);
   and MGM_G116(ENABLE_D_AND_NOT_RD_AND_SE,SE,MGM_W89);
   and MGM_G117(MGM_W90,RD,D);
   and MGM_G118(ENABLE_D_AND_RD_AND_SE,SE,MGM_W90);
   // spec_gates_end
   // specify_block_begin
   specify

      if(D===1'b0 && RD===1'b0 && SE===1'b1 && SI===1'b0)
      // seq arc CK --> Q
      (posedge CK => (Q : D))  = (1.0,1.0);
      
      if(D===1'b0 && RD===1'b1 && SE===1'b1 && SI===1'b0)
      // seq arc CK --> Q
      (posedge CK => (Q : D))  = (1.0,1.0);
      
      if(D===1'b1 && RD===1'b0 && SE===1'b0 && SI===1'b0)
      // seq arc CK --> Q
      (posedge CK => (Q : D))  = (1.0,1.0);
      
      if(D===1'b1 && RD===1'b0 && SE===1'b1 && SI===1'b0)
      // seq arc CK --> Q
      (posedge CK => (Q : D))  = (1.0,1.0);
      
      if(D===1'b0 && RD===1'b0 && SI===1'b1)
      // seq arc CK --> Q
      (posedge CK => (Q : SE))  = (1.0,1.0);
      
      if(D===1'b0 && RD===1'b1 && SI===1'b1)
      // seq arc CK --> Q
      (posedge CK => (Q : SE))  = (1.0,1.0);
      
      if(D===1'b1 && RD===1'b0 && SI===1'b1)
      // seq arc CK --> Q
      (posedge CK => (Q : SE))  = (1.0,1.0);
      
      if(D===1'b1 && RD===1'b1 && SE===1'b0 && SI===1'b1 || D===1'b0 && RD===1'b0 && SE===1'b0 && SI===1'b0)
      // seq arc CK --> Q
      (posedge CK => (Q : D))  = (1.0,1.0);
      
      if(D===1'b1 && RD===1'b1 && SE===1'b1)
      // seq arc CK --> Q
      (posedge CK => (Q : SI))  = (1.0,1.0);
      
      if(RD===1'b1 && SE===1'b0 && SI===1'b0)
      // seq arc CK --> Q
      (posedge CK => (Q : D))  = (1.0,1.0);
      
      ifnone
      // seq arc CK --> Q
      (posedge CK => (Q : D))  = (1.0,1.0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_NOT_RD_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_NOT_RD_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_NOT_RD_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_NOT_RD_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_NOT_RD_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_NOT_RD_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_NOT_RD_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_NOT_RD_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_RD_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_RD_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_RD_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_RD_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_RD_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_RD_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_RD_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_RD_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_NOT_RD_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_NOT_RD_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_NOT_RD_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_NOT_RD_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_NOT_RD_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_NOT_RD_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_NOT_RD_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_NOT_RD_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_RD_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_RD_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_RD_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_RD_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_RD_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_RD_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_RD_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_RD_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      // hold D-HL CK-LH
      $hold(posedge CK &&& (ENABLE_RD_AND_NOT_SE_AND_NOT_SI === 1'b1),
      negedge D &&& (ENABLE_RD_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold D-LH CK-LH
      $hold(posedge CK &&& (ENABLE_RD_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge D &&& (ENABLE_RD_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup D-HL CK-LH
      $setup(negedge D &&& (ENABLE_RD_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_RD_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup D-LH CK-LH
      $setup(posedge D &&& (ENABLE_RD_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_RD_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold D-HL CK-LH
      $hold(posedge CK &&& (ENABLE_RD_AND_NOT_SE_AND_SI === 1'b1),
      negedge D &&& (ENABLE_RD_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // hold D-LH CK-LH
      $hold(posedge CK &&& (ENABLE_RD_AND_NOT_SE_AND_SI === 1'b1),
      posedge D &&& (ENABLE_RD_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // setup D-HL CK-LH
      $setup(negedge D &&& (ENABLE_RD_AND_NOT_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_RD_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // setup D-LH CK-LH
      $setup(posedge D &&& (ENABLE_RD_AND_NOT_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_RD_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // hold RD-HL CK-LH
      $hold(posedge CK &&& (ENABLE_D_AND_NOT_SE_AND_NOT_SI === 1'b1),
      negedge RD &&& (ENABLE_D_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold RD-LH CK-LH
      $hold(posedge CK &&& (ENABLE_D_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge RD &&& (ENABLE_D_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup RD-HL CK-LH
      $setup(negedge RD &&& (ENABLE_D_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_D_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup RD-LH CK-LH
      $setup(posedge RD &&& (ENABLE_D_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_D_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold RD-HL CK-LH
      $hold(posedge CK &&& (ENABLE_D_AND_NOT_SE_AND_SI === 1'b1),
      negedge RD &&& (ENABLE_D_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // hold RD-LH CK-LH
      $hold(posedge CK &&& (ENABLE_D_AND_NOT_SE_AND_SI === 1'b1),
      posedge RD &&& (ENABLE_D_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // setup RD-HL CK-LH
      $setup(negedge RD &&& (ENABLE_D_AND_NOT_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_D_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // setup RD-LH CK-LH
      $setup(posedge RD &&& (ENABLE_D_AND_NOT_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_D_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // hold SE-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D_AND_NOT_RD_AND_SI === 1'b1),
      negedge SE &&& (ENABLE_NOT_D_AND_NOT_RD_AND_SI === 1'b1),1.0);
      
      // hold SE-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D_AND_NOT_RD_AND_SI === 1'b1),
      posedge SE &&& (ENABLE_NOT_D_AND_NOT_RD_AND_SI === 1'b1),1.0);
      
      // setup SE-HL CK-LH
      $setup(negedge SE &&& (ENABLE_NOT_D_AND_NOT_RD_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_NOT_RD_AND_SI === 1'b1),1.0);
      
      // setup SE-LH CK-LH
      $setup(posedge SE &&& (ENABLE_NOT_D_AND_NOT_RD_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_NOT_RD_AND_SI === 1'b1),1.0);
      
      // hold SE-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D_AND_RD_AND_SI === 1'b1),
      negedge SE &&& (ENABLE_NOT_D_AND_RD_AND_SI === 1'b1),1.0);
      
      // hold SE-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D_AND_RD_AND_SI === 1'b1),
      posedge SE &&& (ENABLE_NOT_D_AND_RD_AND_SI === 1'b1),1.0);
      
      // setup SE-HL CK-LH
      $setup(negedge SE &&& (ENABLE_NOT_D_AND_RD_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_RD_AND_SI === 1'b1),1.0);
      
      // setup SE-LH CK-LH
      $setup(posedge SE &&& (ENABLE_NOT_D_AND_RD_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_RD_AND_SI === 1'b1),1.0);
      
      // hold SE-HL CK-LH
      $hold(posedge CK &&& (ENABLE_D_AND_NOT_RD_AND_SI === 1'b1),
      negedge SE &&& (ENABLE_D_AND_NOT_RD_AND_SI === 1'b1),1.0);
      
      // hold SE-LH CK-LH
      $hold(posedge CK &&& (ENABLE_D_AND_NOT_RD_AND_SI === 1'b1),
      posedge SE &&& (ENABLE_D_AND_NOT_RD_AND_SI === 1'b1),1.0);
      
      // setup SE-HL CK-LH
      $setup(negedge SE &&& (ENABLE_D_AND_NOT_RD_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_D_AND_NOT_RD_AND_SI === 1'b1),1.0);
      
      // setup SE-LH CK-LH
      $setup(posedge SE &&& (ENABLE_D_AND_NOT_RD_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_D_AND_NOT_RD_AND_SI === 1'b1),1.0);
      
      // hold SE-HL CK-LH
      $hold(posedge CK &&& (ENABLE_D_AND_RD_AND_NOT_SI === 1'b1),
      negedge SE &&& (ENABLE_D_AND_RD_AND_NOT_SI === 1'b1),1.0);
      
      // hold SE-LH CK-LH
      $hold(posedge CK &&& (ENABLE_D_AND_RD_AND_NOT_SI === 1'b1),
      posedge SE &&& (ENABLE_D_AND_RD_AND_NOT_SI === 1'b1),1.0);
      
      // setup SE-HL CK-LH
      $setup(negedge SE &&& (ENABLE_D_AND_RD_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_D_AND_RD_AND_NOT_SI === 1'b1),1.0);
      
      // setup SE-LH CK-LH
      $setup(posedge SE &&& (ENABLE_D_AND_RD_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_D_AND_RD_AND_NOT_SI === 1'b1),1.0);
      
      // hold SI-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D_AND_NOT_RD_AND_SE === 1'b1),
      negedge SI &&& (ENABLE_NOT_D_AND_NOT_RD_AND_SE === 1'b1),1.0);
      
      // hold SI-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D_AND_NOT_RD_AND_SE === 1'b1),
      posedge SI &&& (ENABLE_NOT_D_AND_NOT_RD_AND_SE === 1'b1),1.0);
      
      // setup SI-HL CK-LH
      $setup(negedge SI &&& (ENABLE_NOT_D_AND_NOT_RD_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_NOT_RD_AND_SE === 1'b1),1.0);
      
      // setup SI-LH CK-LH
      $setup(posedge SI &&& (ENABLE_NOT_D_AND_NOT_RD_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_NOT_RD_AND_SE === 1'b1),1.0);
      
      // hold SI-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D_AND_RD_AND_SE === 1'b1),
      negedge SI &&& (ENABLE_NOT_D_AND_RD_AND_SE === 1'b1),1.0);
      
      // hold SI-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D_AND_RD_AND_SE === 1'b1),
      posedge SI &&& (ENABLE_NOT_D_AND_RD_AND_SE === 1'b1),1.0);
      
      // setup SI-HL CK-LH
      $setup(negedge SI &&& (ENABLE_NOT_D_AND_RD_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_RD_AND_SE === 1'b1),1.0);
      
      // setup SI-LH CK-LH
      $setup(posedge SI &&& (ENABLE_NOT_D_AND_RD_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_RD_AND_SE === 1'b1),1.0);
      
      // hold SI-HL CK-LH
      $hold(posedge CK &&& (ENABLE_D_AND_NOT_RD_AND_SE === 1'b1),
      negedge SI &&& (ENABLE_D_AND_NOT_RD_AND_SE === 1'b1),1.0);
      
      // hold SI-LH CK-LH
      $hold(posedge CK &&& (ENABLE_D_AND_NOT_RD_AND_SE === 1'b1),
      posedge SI &&& (ENABLE_D_AND_NOT_RD_AND_SE === 1'b1),1.0);
      
      // setup SI-HL CK-LH
      $setup(negedge SI &&& (ENABLE_D_AND_NOT_RD_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_D_AND_NOT_RD_AND_SE === 1'b1),1.0);
      
      // setup SI-LH CK-LH
      $setup(posedge SI &&& (ENABLE_D_AND_NOT_RD_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_D_AND_NOT_RD_AND_SE === 1'b1),1.0);
      
      // hold SI-HL CK-LH
      $hold(posedge CK &&& (ENABLE_D_AND_RD_AND_SE === 1'b1),
      negedge SI &&& (ENABLE_D_AND_RD_AND_SE === 1'b1),1.0);
      
      // hold SI-LH CK-LH
      $hold(posedge CK &&& (ENABLE_D_AND_RD_AND_SE === 1'b1),
      posedge SI &&& (ENABLE_D_AND_RD_AND_SE === 1'b1),1.0);
      
      // setup SI-HL CK-LH
      $setup(negedge SI &&& (ENABLE_D_AND_RD_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_D_AND_RD_AND_SE === 1'b1),1.0);
      
      // setup SI-LH CK-LH
      $setup(posedge SI &&& (ENABLE_D_AND_RD_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_D_AND_RD_AND_SE === 1'b1),1.0);
      
      // mpw CK_lh 
      $width(posedge CK,1.0,0);
      
      // mpw CK_hl 
      $width(negedge CK,1.0,0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_FSDPSYNRBQ_V2_1( Q, CK, D, SI, SE, RD );
input CK, D, RD, SE, SI;
output Q;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_FSDPSYNRBQ_V2_1_func SAEDRVT14_FSDPSYNRBQ_V2_1_behav_inst(.Q(Q),.CK(CK),.D(D),.SI(SI),.SE(SE),.RD(RD));
`else
   SAEDRVT14_FSDPSYNRBQ_V2_1_func SAEDRVT14_FSDPSYNRBQ_V2_1_inst(.Q(Q),.CK(CK),.D(D),.SI(SI),.SE(SE),.RD(RD));
   // spec_gates_begin
   not MGM_G0(MGM_W0,D);
   not MGM_G1(MGM_W1,RD);
   and MGM_G2(MGM_W2,MGM_W1,MGM_W0);
   not MGM_G3(MGM_W3,SE);
   and MGM_G4(MGM_W4,MGM_W3,MGM_W2);
   not MGM_G5(MGM_W5,SI);
   and MGM_G6(ENABLE_NOT_D_AND_NOT_RD_AND_NOT_SE_AND_NOT_SI,MGM_W5,MGM_W4);
   not MGM_G7(MGM_W6,D);
   not MGM_G8(MGM_W7,RD);
   and MGM_G9(MGM_W8,MGM_W7,MGM_W6);
   not MGM_G10(MGM_W9,SE);
   and MGM_G11(MGM_W10,MGM_W9,MGM_W8);
   and MGM_G12(ENABLE_NOT_D_AND_NOT_RD_AND_NOT_SE_AND_SI,SI,MGM_W10);
   not MGM_G13(MGM_W11,D);
   not MGM_G14(MGM_W12,RD);
   and MGM_G15(MGM_W13,MGM_W12,MGM_W11);
   and MGM_G16(MGM_W14,SE,MGM_W13);
   not MGM_G17(MGM_W15,SI);
   and MGM_G18(ENABLE_NOT_D_AND_NOT_RD_AND_SE_AND_NOT_SI,MGM_W15,MGM_W14);
   not MGM_G19(MGM_W16,D);
   not MGM_G20(MGM_W17,RD);
   and MGM_G21(MGM_W18,MGM_W17,MGM_W16);
   and MGM_G22(MGM_W19,SE,MGM_W18);
   and MGM_G23(ENABLE_NOT_D_AND_NOT_RD_AND_SE_AND_SI,SI,MGM_W19);
   not MGM_G24(MGM_W20,D);
   and MGM_G25(MGM_W21,RD,MGM_W20);
   not MGM_G26(MGM_W22,SE);
   and MGM_G27(MGM_W23,MGM_W22,MGM_W21);
   not MGM_G28(MGM_W24,SI);
   and MGM_G29(ENABLE_NOT_D_AND_RD_AND_NOT_SE_AND_NOT_SI,MGM_W24,MGM_W23);
   not MGM_G30(MGM_W25,D);
   and MGM_G31(MGM_W26,RD,MGM_W25);
   not MGM_G32(MGM_W27,SE);
   and MGM_G33(MGM_W28,MGM_W27,MGM_W26);
   and MGM_G34(ENABLE_NOT_D_AND_RD_AND_NOT_SE_AND_SI,SI,MGM_W28);
   not MGM_G35(MGM_W29,D);
   and MGM_G36(MGM_W30,RD,MGM_W29);
   and MGM_G37(MGM_W31,SE,MGM_W30);
   not MGM_G38(MGM_W32,SI);
   and MGM_G39(ENABLE_NOT_D_AND_RD_AND_SE_AND_NOT_SI,MGM_W32,MGM_W31);
   not MGM_G40(MGM_W33,D);
   and MGM_G41(MGM_W34,RD,MGM_W33);
   and MGM_G42(MGM_W35,SE,MGM_W34);
   and MGM_G43(ENABLE_NOT_D_AND_RD_AND_SE_AND_SI,SI,MGM_W35);
   not MGM_G44(MGM_W36,RD);
   and MGM_G45(MGM_W37,MGM_W36,D);
   not MGM_G46(MGM_W38,SE);
   and MGM_G47(MGM_W39,MGM_W38,MGM_W37);
   not MGM_G48(MGM_W40,SI);
   and MGM_G49(ENABLE_D_AND_NOT_RD_AND_NOT_SE_AND_NOT_SI,MGM_W40,MGM_W39);
   not MGM_G50(MGM_W41,RD);
   and MGM_G51(MGM_W42,MGM_W41,D);
   not MGM_G52(MGM_W43,SE);
   and MGM_G53(MGM_W44,MGM_W43,MGM_W42);
   and MGM_G54(ENABLE_D_AND_NOT_RD_AND_NOT_SE_AND_SI,SI,MGM_W44);
   not MGM_G55(MGM_W45,RD);
   and MGM_G56(MGM_W46,MGM_W45,D);
   and MGM_G57(MGM_W47,SE,MGM_W46);
   not MGM_G58(MGM_W48,SI);
   and MGM_G59(ENABLE_D_AND_NOT_RD_AND_SE_AND_NOT_SI,MGM_W48,MGM_W47);
   not MGM_G60(MGM_W49,RD);
   and MGM_G61(MGM_W50,MGM_W49,D);
   and MGM_G62(MGM_W51,SE,MGM_W50);
   and MGM_G63(ENABLE_D_AND_NOT_RD_AND_SE_AND_SI,SI,MGM_W51);
   and MGM_G64(MGM_W52,RD,D);
   not MGM_G65(MGM_W53,SE);
   and MGM_G66(MGM_W54,MGM_W53,MGM_W52);
   not MGM_G67(MGM_W55,SI);
   and MGM_G68(ENABLE_D_AND_RD_AND_NOT_SE_AND_NOT_SI,MGM_W55,MGM_W54);
   and MGM_G69(MGM_W56,RD,D);
   not MGM_G70(MGM_W57,SE);
   and MGM_G71(MGM_W58,MGM_W57,MGM_W56);
   and MGM_G72(ENABLE_D_AND_RD_AND_NOT_SE_AND_SI,SI,MGM_W58);
   and MGM_G73(MGM_W59,RD,D);
   and MGM_G74(MGM_W60,SE,MGM_W59);
   not MGM_G75(MGM_W61,SI);
   and MGM_G76(ENABLE_D_AND_RD_AND_SE_AND_NOT_SI,MGM_W61,MGM_W60);
   and MGM_G77(MGM_W62,RD,D);
   and MGM_G78(MGM_W63,SE,MGM_W62);
   and MGM_G79(ENABLE_D_AND_RD_AND_SE_AND_SI,SI,MGM_W63);
   not MGM_G80(MGM_W64,SE);
   and MGM_G81(MGM_W65,MGM_W64,RD);
   not MGM_G82(MGM_W66,SI);
   and MGM_G83(ENABLE_RD_AND_NOT_SE_AND_NOT_SI,MGM_W66,MGM_W65);
   not MGM_G84(MGM_W67,SE);
   and MGM_G85(MGM_W68,MGM_W67,RD);
   and MGM_G86(ENABLE_RD_AND_NOT_SE_AND_SI,SI,MGM_W68);
   not MGM_G87(MGM_W69,SE);
   and MGM_G88(MGM_W70,MGM_W69,D);
   not MGM_G89(MGM_W71,SI);
   and MGM_G90(ENABLE_D_AND_NOT_SE_AND_NOT_SI,MGM_W71,MGM_W70);
   not MGM_G91(MGM_W72,SE);
   and MGM_G92(MGM_W73,MGM_W72,D);
   and MGM_G93(ENABLE_D_AND_NOT_SE_AND_SI,SI,MGM_W73);
   not MGM_G94(MGM_W74,D);
   not MGM_G95(MGM_W75,RD);
   and MGM_G96(MGM_W76,MGM_W75,MGM_W74);
   and MGM_G97(ENABLE_NOT_D_AND_NOT_RD_AND_SI,SI,MGM_W76);
   not MGM_G98(MGM_W77,D);
   and MGM_G99(MGM_W78,RD,MGM_W77);
   and MGM_G100(ENABLE_NOT_D_AND_RD_AND_SI,SI,MGM_W78);
   not MGM_G101(MGM_W79,RD);
   and MGM_G102(MGM_W80,MGM_W79,D);
   and MGM_G103(ENABLE_D_AND_NOT_RD_AND_SI,SI,MGM_W80);
   and MGM_G104(MGM_W81,RD,D);
   not MGM_G105(MGM_W82,SI);
   and MGM_G106(ENABLE_D_AND_RD_AND_NOT_SI,MGM_W82,MGM_W81);
   not MGM_G107(MGM_W83,D);
   not MGM_G108(MGM_W84,RD);
   and MGM_G109(MGM_W85,MGM_W84,MGM_W83);
   and MGM_G110(ENABLE_NOT_D_AND_NOT_RD_AND_SE,SE,MGM_W85);
   not MGM_G111(MGM_W86,D);
   and MGM_G112(MGM_W87,RD,MGM_W86);
   and MGM_G113(ENABLE_NOT_D_AND_RD_AND_SE,SE,MGM_W87);
   not MGM_G114(MGM_W88,RD);
   and MGM_G115(MGM_W89,MGM_W88,D);
   and MGM_G116(ENABLE_D_AND_NOT_RD_AND_SE,SE,MGM_W89);
   and MGM_G117(MGM_W90,RD,D);
   and MGM_G118(ENABLE_D_AND_RD_AND_SE,SE,MGM_W90);
   // spec_gates_end
   // specify_block_begin
   specify

      if(D===1'b0 && RD===1'b0 && SE===1'b1 && SI===1'b0)
      // seq arc CK --> Q
      (posedge CK => (Q : D))  = (1.0,1.0);
      
      if(D===1'b0 && RD===1'b1 && SE===1'b1 && SI===1'b0)
      // seq arc CK --> Q
      (posedge CK => (Q : D))  = (1.0,1.0);
      
      if(D===1'b1 && RD===1'b0 && SE===1'b0 && SI===1'b0)
      // seq arc CK --> Q
      (posedge CK => (Q : D))  = (1.0,1.0);
      
      if(D===1'b1 && RD===1'b0 && SE===1'b1 && SI===1'b0)
      // seq arc CK --> Q
      (posedge CK => (Q : D))  = (1.0,1.0);
      
      if(D===1'b0 && RD===1'b0 && SI===1'b1)
      // seq arc CK --> Q
      (posedge CK => (Q : SE))  = (1.0,1.0);
      
      if(D===1'b0 && RD===1'b1 && SI===1'b1)
      // seq arc CK --> Q
      (posedge CK => (Q : SE))  = (1.0,1.0);
      
      if(D===1'b1 && RD===1'b0 && SI===1'b1)
      // seq arc CK --> Q
      (posedge CK => (Q : SE))  = (1.0,1.0);
      
      if(D===1'b1 && RD===1'b1 && SE===1'b0 && SI===1'b1 || D===1'b0 && RD===1'b0 && SE===1'b0 && SI===1'b0)
      // seq arc CK --> Q
      (posedge CK => (Q : D))  = (1.0,1.0);
      
      if(D===1'b1 && RD===1'b1 && SE===1'b1)
      // seq arc CK --> Q
      (posedge CK => (Q : SI))  = (1.0,1.0);
      
      if(RD===1'b1 && SE===1'b0 && SI===1'b0)
      // seq arc CK --> Q
      (posedge CK => (Q : D))  = (1.0,1.0);
      
      ifnone
      // seq arc CK --> Q
      (posedge CK => (Q : D))  = (1.0,1.0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_NOT_RD_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_NOT_RD_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_NOT_RD_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_NOT_RD_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_NOT_RD_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_NOT_RD_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_NOT_RD_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_NOT_RD_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_RD_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_RD_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_RD_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_RD_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_RD_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_RD_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_RD_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_RD_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_NOT_RD_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_NOT_RD_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_NOT_RD_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_NOT_RD_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_NOT_RD_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_NOT_RD_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_NOT_RD_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_NOT_RD_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_RD_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_RD_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_RD_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_RD_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_RD_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_RD_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_RD_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_RD_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      // hold D-HL CK-LH
      $hold(posedge CK &&& (ENABLE_RD_AND_NOT_SE_AND_NOT_SI === 1'b1),
      negedge D &&& (ENABLE_RD_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold D-LH CK-LH
      $hold(posedge CK &&& (ENABLE_RD_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge D &&& (ENABLE_RD_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup D-HL CK-LH
      $setup(negedge D &&& (ENABLE_RD_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_RD_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup D-LH CK-LH
      $setup(posedge D &&& (ENABLE_RD_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_RD_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold D-HL CK-LH
      $hold(posedge CK &&& (ENABLE_RD_AND_NOT_SE_AND_SI === 1'b1),
      negedge D &&& (ENABLE_RD_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // hold D-LH CK-LH
      $hold(posedge CK &&& (ENABLE_RD_AND_NOT_SE_AND_SI === 1'b1),
      posedge D &&& (ENABLE_RD_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // setup D-HL CK-LH
      $setup(negedge D &&& (ENABLE_RD_AND_NOT_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_RD_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // setup D-LH CK-LH
      $setup(posedge D &&& (ENABLE_RD_AND_NOT_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_RD_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // hold RD-HL CK-LH
      $hold(posedge CK &&& (ENABLE_D_AND_NOT_SE_AND_NOT_SI === 1'b1),
      negedge RD &&& (ENABLE_D_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold RD-LH CK-LH
      $hold(posedge CK &&& (ENABLE_D_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge RD &&& (ENABLE_D_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup RD-HL CK-LH
      $setup(negedge RD &&& (ENABLE_D_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_D_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup RD-LH CK-LH
      $setup(posedge RD &&& (ENABLE_D_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_D_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold RD-HL CK-LH
      $hold(posedge CK &&& (ENABLE_D_AND_NOT_SE_AND_SI === 1'b1),
      negedge RD &&& (ENABLE_D_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // hold RD-LH CK-LH
      $hold(posedge CK &&& (ENABLE_D_AND_NOT_SE_AND_SI === 1'b1),
      posedge RD &&& (ENABLE_D_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // setup RD-HL CK-LH
      $setup(negedge RD &&& (ENABLE_D_AND_NOT_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_D_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // setup RD-LH CK-LH
      $setup(posedge RD &&& (ENABLE_D_AND_NOT_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_D_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // hold SE-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D_AND_NOT_RD_AND_SI === 1'b1),
      negedge SE &&& (ENABLE_NOT_D_AND_NOT_RD_AND_SI === 1'b1),1.0);
      
      // hold SE-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D_AND_NOT_RD_AND_SI === 1'b1),
      posedge SE &&& (ENABLE_NOT_D_AND_NOT_RD_AND_SI === 1'b1),1.0);
      
      // setup SE-HL CK-LH
      $setup(negedge SE &&& (ENABLE_NOT_D_AND_NOT_RD_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_NOT_RD_AND_SI === 1'b1),1.0);
      
      // setup SE-LH CK-LH
      $setup(posedge SE &&& (ENABLE_NOT_D_AND_NOT_RD_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_NOT_RD_AND_SI === 1'b1),1.0);
      
      // hold SE-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D_AND_RD_AND_SI === 1'b1),
      negedge SE &&& (ENABLE_NOT_D_AND_RD_AND_SI === 1'b1),1.0);
      
      // hold SE-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D_AND_RD_AND_SI === 1'b1),
      posedge SE &&& (ENABLE_NOT_D_AND_RD_AND_SI === 1'b1),1.0);
      
      // setup SE-HL CK-LH
      $setup(negedge SE &&& (ENABLE_NOT_D_AND_RD_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_RD_AND_SI === 1'b1),1.0);
      
      // setup SE-LH CK-LH
      $setup(posedge SE &&& (ENABLE_NOT_D_AND_RD_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_RD_AND_SI === 1'b1),1.0);
      
      // hold SE-HL CK-LH
      $hold(posedge CK &&& (ENABLE_D_AND_NOT_RD_AND_SI === 1'b1),
      negedge SE &&& (ENABLE_D_AND_NOT_RD_AND_SI === 1'b1),1.0);
      
      // hold SE-LH CK-LH
      $hold(posedge CK &&& (ENABLE_D_AND_NOT_RD_AND_SI === 1'b1),
      posedge SE &&& (ENABLE_D_AND_NOT_RD_AND_SI === 1'b1),1.0);
      
      // setup SE-HL CK-LH
      $setup(negedge SE &&& (ENABLE_D_AND_NOT_RD_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_D_AND_NOT_RD_AND_SI === 1'b1),1.0);
      
      // setup SE-LH CK-LH
      $setup(posedge SE &&& (ENABLE_D_AND_NOT_RD_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_D_AND_NOT_RD_AND_SI === 1'b1),1.0);
      
      // hold SE-HL CK-LH
      $hold(posedge CK &&& (ENABLE_D_AND_RD_AND_NOT_SI === 1'b1),
      negedge SE &&& (ENABLE_D_AND_RD_AND_NOT_SI === 1'b1),1.0);
      
      // hold SE-LH CK-LH
      $hold(posedge CK &&& (ENABLE_D_AND_RD_AND_NOT_SI === 1'b1),
      posedge SE &&& (ENABLE_D_AND_RD_AND_NOT_SI === 1'b1),1.0);
      
      // setup SE-HL CK-LH
      $setup(negedge SE &&& (ENABLE_D_AND_RD_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_D_AND_RD_AND_NOT_SI === 1'b1),1.0);
      
      // setup SE-LH CK-LH
      $setup(posedge SE &&& (ENABLE_D_AND_RD_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_D_AND_RD_AND_NOT_SI === 1'b1),1.0);
      
      // hold SI-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D_AND_NOT_RD_AND_SE === 1'b1),
      negedge SI &&& (ENABLE_NOT_D_AND_NOT_RD_AND_SE === 1'b1),1.0);
      
      // hold SI-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D_AND_NOT_RD_AND_SE === 1'b1),
      posedge SI &&& (ENABLE_NOT_D_AND_NOT_RD_AND_SE === 1'b1),1.0);
      
      // setup SI-HL CK-LH
      $setup(negedge SI &&& (ENABLE_NOT_D_AND_NOT_RD_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_NOT_RD_AND_SE === 1'b1),1.0);
      
      // setup SI-LH CK-LH
      $setup(posedge SI &&& (ENABLE_NOT_D_AND_NOT_RD_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_NOT_RD_AND_SE === 1'b1),1.0);
      
      // hold SI-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D_AND_RD_AND_SE === 1'b1),
      negedge SI &&& (ENABLE_NOT_D_AND_RD_AND_SE === 1'b1),1.0);
      
      // hold SI-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D_AND_RD_AND_SE === 1'b1),
      posedge SI &&& (ENABLE_NOT_D_AND_RD_AND_SE === 1'b1),1.0);
      
      // setup SI-HL CK-LH
      $setup(negedge SI &&& (ENABLE_NOT_D_AND_RD_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_RD_AND_SE === 1'b1),1.0);
      
      // setup SI-LH CK-LH
      $setup(posedge SI &&& (ENABLE_NOT_D_AND_RD_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_RD_AND_SE === 1'b1),1.0);
      
      // hold SI-HL CK-LH
      $hold(posedge CK &&& (ENABLE_D_AND_NOT_RD_AND_SE === 1'b1),
      negedge SI &&& (ENABLE_D_AND_NOT_RD_AND_SE === 1'b1),1.0);
      
      // hold SI-LH CK-LH
      $hold(posedge CK &&& (ENABLE_D_AND_NOT_RD_AND_SE === 1'b1),
      posedge SI &&& (ENABLE_D_AND_NOT_RD_AND_SE === 1'b1),1.0);
      
      // setup SI-HL CK-LH
      $setup(negedge SI &&& (ENABLE_D_AND_NOT_RD_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_D_AND_NOT_RD_AND_SE === 1'b1),1.0);
      
      // setup SI-LH CK-LH
      $setup(posedge SI &&& (ENABLE_D_AND_NOT_RD_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_D_AND_NOT_RD_AND_SE === 1'b1),1.0);
      
      // hold SI-HL CK-LH
      $hold(posedge CK &&& (ENABLE_D_AND_RD_AND_SE === 1'b1),
      negedge SI &&& (ENABLE_D_AND_RD_AND_SE === 1'b1),1.0);
      
      // hold SI-LH CK-LH
      $hold(posedge CK &&& (ENABLE_D_AND_RD_AND_SE === 1'b1),
      posedge SI &&& (ENABLE_D_AND_RD_AND_SE === 1'b1),1.0);
      
      // setup SI-HL CK-LH
      $setup(negedge SI &&& (ENABLE_D_AND_RD_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_D_AND_RD_AND_SE === 1'b1),1.0);
      
      // setup SI-LH CK-LH
      $setup(posedge SI &&& (ENABLE_D_AND_RD_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_D_AND_RD_AND_SE === 1'b1),1.0);
      
      // mpw CK_lh 
      $width(posedge CK,1.0,0);
      
      // mpw CK_hl 
      $width(negedge CK,1.0,0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_FSDPSYNRBQ_V2_2( Q, CK, D, SI, SE, RD );
input CK, D, RD, SE, SI;
output Q;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_FSDPSYNRBQ_V2_2_func SAEDRVT14_FSDPSYNRBQ_V2_2_behav_inst(.Q(Q),.CK(CK),.D(D),.SI(SI),.SE(SE),.RD(RD));
`else
   SAEDRVT14_FSDPSYNRBQ_V2_2_func SAEDRVT14_FSDPSYNRBQ_V2_2_inst(.Q(Q),.CK(CK),.D(D),.SI(SI),.SE(SE),.RD(RD));
   // spec_gates_begin
   not MGM_G0(MGM_W0,D);
   not MGM_G1(MGM_W1,RD);
   and MGM_G2(MGM_W2,MGM_W1,MGM_W0);
   not MGM_G3(MGM_W3,SE);
   and MGM_G4(MGM_W4,MGM_W3,MGM_W2);
   not MGM_G5(MGM_W5,SI);
   and MGM_G6(ENABLE_NOT_D_AND_NOT_RD_AND_NOT_SE_AND_NOT_SI,MGM_W5,MGM_W4);
   not MGM_G7(MGM_W6,D);
   not MGM_G8(MGM_W7,RD);
   and MGM_G9(MGM_W8,MGM_W7,MGM_W6);
   not MGM_G10(MGM_W9,SE);
   and MGM_G11(MGM_W10,MGM_W9,MGM_W8);
   and MGM_G12(ENABLE_NOT_D_AND_NOT_RD_AND_NOT_SE_AND_SI,SI,MGM_W10);
   not MGM_G13(MGM_W11,D);
   not MGM_G14(MGM_W12,RD);
   and MGM_G15(MGM_W13,MGM_W12,MGM_W11);
   and MGM_G16(MGM_W14,SE,MGM_W13);
   not MGM_G17(MGM_W15,SI);
   and MGM_G18(ENABLE_NOT_D_AND_NOT_RD_AND_SE_AND_NOT_SI,MGM_W15,MGM_W14);
   not MGM_G19(MGM_W16,D);
   not MGM_G20(MGM_W17,RD);
   and MGM_G21(MGM_W18,MGM_W17,MGM_W16);
   and MGM_G22(MGM_W19,SE,MGM_W18);
   and MGM_G23(ENABLE_NOT_D_AND_NOT_RD_AND_SE_AND_SI,SI,MGM_W19);
   not MGM_G24(MGM_W20,D);
   and MGM_G25(MGM_W21,RD,MGM_W20);
   not MGM_G26(MGM_W22,SE);
   and MGM_G27(MGM_W23,MGM_W22,MGM_W21);
   not MGM_G28(MGM_W24,SI);
   and MGM_G29(ENABLE_NOT_D_AND_RD_AND_NOT_SE_AND_NOT_SI,MGM_W24,MGM_W23);
   not MGM_G30(MGM_W25,D);
   and MGM_G31(MGM_W26,RD,MGM_W25);
   not MGM_G32(MGM_W27,SE);
   and MGM_G33(MGM_W28,MGM_W27,MGM_W26);
   and MGM_G34(ENABLE_NOT_D_AND_RD_AND_NOT_SE_AND_SI,SI,MGM_W28);
   not MGM_G35(MGM_W29,D);
   and MGM_G36(MGM_W30,RD,MGM_W29);
   and MGM_G37(MGM_W31,SE,MGM_W30);
   not MGM_G38(MGM_W32,SI);
   and MGM_G39(ENABLE_NOT_D_AND_RD_AND_SE_AND_NOT_SI,MGM_W32,MGM_W31);
   not MGM_G40(MGM_W33,D);
   and MGM_G41(MGM_W34,RD,MGM_W33);
   and MGM_G42(MGM_W35,SE,MGM_W34);
   and MGM_G43(ENABLE_NOT_D_AND_RD_AND_SE_AND_SI,SI,MGM_W35);
   not MGM_G44(MGM_W36,RD);
   and MGM_G45(MGM_W37,MGM_W36,D);
   not MGM_G46(MGM_W38,SE);
   and MGM_G47(MGM_W39,MGM_W38,MGM_W37);
   not MGM_G48(MGM_W40,SI);
   and MGM_G49(ENABLE_D_AND_NOT_RD_AND_NOT_SE_AND_NOT_SI,MGM_W40,MGM_W39);
   not MGM_G50(MGM_W41,RD);
   and MGM_G51(MGM_W42,MGM_W41,D);
   not MGM_G52(MGM_W43,SE);
   and MGM_G53(MGM_W44,MGM_W43,MGM_W42);
   and MGM_G54(ENABLE_D_AND_NOT_RD_AND_NOT_SE_AND_SI,SI,MGM_W44);
   not MGM_G55(MGM_W45,RD);
   and MGM_G56(MGM_W46,MGM_W45,D);
   and MGM_G57(MGM_W47,SE,MGM_W46);
   not MGM_G58(MGM_W48,SI);
   and MGM_G59(ENABLE_D_AND_NOT_RD_AND_SE_AND_NOT_SI,MGM_W48,MGM_W47);
   not MGM_G60(MGM_W49,RD);
   and MGM_G61(MGM_W50,MGM_W49,D);
   and MGM_G62(MGM_W51,SE,MGM_W50);
   and MGM_G63(ENABLE_D_AND_NOT_RD_AND_SE_AND_SI,SI,MGM_W51);
   and MGM_G64(MGM_W52,RD,D);
   not MGM_G65(MGM_W53,SE);
   and MGM_G66(MGM_W54,MGM_W53,MGM_W52);
   not MGM_G67(MGM_W55,SI);
   and MGM_G68(ENABLE_D_AND_RD_AND_NOT_SE_AND_NOT_SI,MGM_W55,MGM_W54);
   and MGM_G69(MGM_W56,RD,D);
   not MGM_G70(MGM_W57,SE);
   and MGM_G71(MGM_W58,MGM_W57,MGM_W56);
   and MGM_G72(ENABLE_D_AND_RD_AND_NOT_SE_AND_SI,SI,MGM_W58);
   and MGM_G73(MGM_W59,RD,D);
   and MGM_G74(MGM_W60,SE,MGM_W59);
   not MGM_G75(MGM_W61,SI);
   and MGM_G76(ENABLE_D_AND_RD_AND_SE_AND_NOT_SI,MGM_W61,MGM_W60);
   and MGM_G77(MGM_W62,RD,D);
   and MGM_G78(MGM_W63,SE,MGM_W62);
   and MGM_G79(ENABLE_D_AND_RD_AND_SE_AND_SI,SI,MGM_W63);
   not MGM_G80(MGM_W64,SE);
   and MGM_G81(MGM_W65,MGM_W64,RD);
   not MGM_G82(MGM_W66,SI);
   and MGM_G83(ENABLE_RD_AND_NOT_SE_AND_NOT_SI,MGM_W66,MGM_W65);
   not MGM_G84(MGM_W67,SE);
   and MGM_G85(MGM_W68,MGM_W67,RD);
   and MGM_G86(ENABLE_RD_AND_NOT_SE_AND_SI,SI,MGM_W68);
   not MGM_G87(MGM_W69,SE);
   and MGM_G88(MGM_W70,MGM_W69,D);
   not MGM_G89(MGM_W71,SI);
   and MGM_G90(ENABLE_D_AND_NOT_SE_AND_NOT_SI,MGM_W71,MGM_W70);
   not MGM_G91(MGM_W72,SE);
   and MGM_G92(MGM_W73,MGM_W72,D);
   and MGM_G93(ENABLE_D_AND_NOT_SE_AND_SI,SI,MGM_W73);
   not MGM_G94(MGM_W74,D);
   not MGM_G95(MGM_W75,RD);
   and MGM_G96(MGM_W76,MGM_W75,MGM_W74);
   and MGM_G97(ENABLE_NOT_D_AND_NOT_RD_AND_SI,SI,MGM_W76);
   not MGM_G98(MGM_W77,D);
   and MGM_G99(MGM_W78,RD,MGM_W77);
   and MGM_G100(ENABLE_NOT_D_AND_RD_AND_SI,SI,MGM_W78);
   not MGM_G101(MGM_W79,RD);
   and MGM_G102(MGM_W80,MGM_W79,D);
   and MGM_G103(ENABLE_D_AND_NOT_RD_AND_SI,SI,MGM_W80);
   and MGM_G104(MGM_W81,RD,D);
   not MGM_G105(MGM_W82,SI);
   and MGM_G106(ENABLE_D_AND_RD_AND_NOT_SI,MGM_W82,MGM_W81);
   not MGM_G107(MGM_W83,D);
   not MGM_G108(MGM_W84,RD);
   and MGM_G109(MGM_W85,MGM_W84,MGM_W83);
   and MGM_G110(ENABLE_NOT_D_AND_NOT_RD_AND_SE,SE,MGM_W85);
   not MGM_G111(MGM_W86,D);
   and MGM_G112(MGM_W87,RD,MGM_W86);
   and MGM_G113(ENABLE_NOT_D_AND_RD_AND_SE,SE,MGM_W87);
   not MGM_G114(MGM_W88,RD);
   and MGM_G115(MGM_W89,MGM_W88,D);
   and MGM_G116(ENABLE_D_AND_NOT_RD_AND_SE,SE,MGM_W89);
   and MGM_G117(MGM_W90,RD,D);
   and MGM_G118(ENABLE_D_AND_RD_AND_SE,SE,MGM_W90);
   // spec_gates_end
   // specify_block_begin
   specify

      if(D===1'b0 && RD===1'b0 && SE===1'b1 && SI===1'b0)
      // seq arc CK --> Q
      (posedge CK => (Q : D))  = (1.0,1.0);
      
      if(D===1'b0 && RD===1'b1 && SE===1'b1 && SI===1'b0)
      // seq arc CK --> Q
      (posedge CK => (Q : D))  = (1.0,1.0);
      
      if(D===1'b1 && RD===1'b0 && SE===1'b0 && SI===1'b0)
      // seq arc CK --> Q
      (posedge CK => (Q : D))  = (1.0,1.0);
      
      if(D===1'b1 && RD===1'b0 && SE===1'b1 && SI===1'b0)
      // seq arc CK --> Q
      (posedge CK => (Q : D))  = (1.0,1.0);
      
      if(D===1'b0 && RD===1'b0 && SI===1'b1)
      // seq arc CK --> Q
      (posedge CK => (Q : SE))  = (1.0,1.0);
      
      if(D===1'b0 && RD===1'b1 && SI===1'b1)
      // seq arc CK --> Q
      (posedge CK => (Q : SE))  = (1.0,1.0);
      
      if(D===1'b1 && RD===1'b0 && SI===1'b1)
      // seq arc CK --> Q
      (posedge CK => (Q : SE))  = (1.0,1.0);
      
      if(D===1'b1 && RD===1'b1 && SE===1'b0 && SI===1'b1 || D===1'b0 && RD===1'b0 && SE===1'b0 && SI===1'b0)
      // seq arc CK --> Q
      (posedge CK => (Q : D))  = (1.0,1.0);
      
      if(D===1'b1 && RD===1'b1 && SE===1'b1)
      // seq arc CK --> Q
      (posedge CK => (Q : SI))  = (1.0,1.0);
      
      if(RD===1'b1 && SE===1'b0 && SI===1'b0)
      // seq arc CK --> Q
      (posedge CK => (Q : D))  = (1.0,1.0);
      
      ifnone
      // seq arc CK --> Q
      (posedge CK => (Q : D))  = (1.0,1.0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_NOT_RD_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_NOT_RD_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_NOT_RD_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_NOT_RD_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_NOT_RD_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_NOT_RD_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_NOT_RD_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_NOT_RD_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_RD_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_RD_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_RD_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_RD_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_RD_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_RD_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_RD_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_RD_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_NOT_RD_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_NOT_RD_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_NOT_RD_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_NOT_RD_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_NOT_RD_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_NOT_RD_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_NOT_RD_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_NOT_RD_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_RD_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_RD_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_RD_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_RD_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_RD_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_RD_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_RD_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_RD_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      // hold D-HL CK-LH
      $hold(posedge CK &&& (ENABLE_RD_AND_NOT_SE_AND_NOT_SI === 1'b1),
      negedge D &&& (ENABLE_RD_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold D-LH CK-LH
      $hold(posedge CK &&& (ENABLE_RD_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge D &&& (ENABLE_RD_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup D-HL CK-LH
      $setup(negedge D &&& (ENABLE_RD_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_RD_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup D-LH CK-LH
      $setup(posedge D &&& (ENABLE_RD_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_RD_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold D-HL CK-LH
      $hold(posedge CK &&& (ENABLE_RD_AND_NOT_SE_AND_SI === 1'b1),
      negedge D &&& (ENABLE_RD_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // hold D-LH CK-LH
      $hold(posedge CK &&& (ENABLE_RD_AND_NOT_SE_AND_SI === 1'b1),
      posedge D &&& (ENABLE_RD_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // setup D-HL CK-LH
      $setup(negedge D &&& (ENABLE_RD_AND_NOT_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_RD_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // setup D-LH CK-LH
      $setup(posedge D &&& (ENABLE_RD_AND_NOT_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_RD_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // hold RD-HL CK-LH
      $hold(posedge CK &&& (ENABLE_D_AND_NOT_SE_AND_NOT_SI === 1'b1),
      negedge RD &&& (ENABLE_D_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold RD-LH CK-LH
      $hold(posedge CK &&& (ENABLE_D_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge RD &&& (ENABLE_D_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup RD-HL CK-LH
      $setup(negedge RD &&& (ENABLE_D_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_D_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup RD-LH CK-LH
      $setup(posedge RD &&& (ENABLE_D_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_D_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold RD-HL CK-LH
      $hold(posedge CK &&& (ENABLE_D_AND_NOT_SE_AND_SI === 1'b1),
      negedge RD &&& (ENABLE_D_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // hold RD-LH CK-LH
      $hold(posedge CK &&& (ENABLE_D_AND_NOT_SE_AND_SI === 1'b1),
      posedge RD &&& (ENABLE_D_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // setup RD-HL CK-LH
      $setup(negedge RD &&& (ENABLE_D_AND_NOT_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_D_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // setup RD-LH CK-LH
      $setup(posedge RD &&& (ENABLE_D_AND_NOT_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_D_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // hold SE-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D_AND_NOT_RD_AND_SI === 1'b1),
      negedge SE &&& (ENABLE_NOT_D_AND_NOT_RD_AND_SI === 1'b1),1.0);
      
      // hold SE-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D_AND_NOT_RD_AND_SI === 1'b1),
      posedge SE &&& (ENABLE_NOT_D_AND_NOT_RD_AND_SI === 1'b1),1.0);
      
      // setup SE-HL CK-LH
      $setup(negedge SE &&& (ENABLE_NOT_D_AND_NOT_RD_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_NOT_RD_AND_SI === 1'b1),1.0);
      
      // setup SE-LH CK-LH
      $setup(posedge SE &&& (ENABLE_NOT_D_AND_NOT_RD_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_NOT_RD_AND_SI === 1'b1),1.0);
      
      // hold SE-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D_AND_RD_AND_SI === 1'b1),
      negedge SE &&& (ENABLE_NOT_D_AND_RD_AND_SI === 1'b1),1.0);
      
      // hold SE-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D_AND_RD_AND_SI === 1'b1),
      posedge SE &&& (ENABLE_NOT_D_AND_RD_AND_SI === 1'b1),1.0);
      
      // setup SE-HL CK-LH
      $setup(negedge SE &&& (ENABLE_NOT_D_AND_RD_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_RD_AND_SI === 1'b1),1.0);
      
      // setup SE-LH CK-LH
      $setup(posedge SE &&& (ENABLE_NOT_D_AND_RD_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_RD_AND_SI === 1'b1),1.0);
      
      // hold SE-HL CK-LH
      $hold(posedge CK &&& (ENABLE_D_AND_NOT_RD_AND_SI === 1'b1),
      negedge SE &&& (ENABLE_D_AND_NOT_RD_AND_SI === 1'b1),1.0);
      
      // hold SE-LH CK-LH
      $hold(posedge CK &&& (ENABLE_D_AND_NOT_RD_AND_SI === 1'b1),
      posedge SE &&& (ENABLE_D_AND_NOT_RD_AND_SI === 1'b1),1.0);
      
      // setup SE-HL CK-LH
      $setup(negedge SE &&& (ENABLE_D_AND_NOT_RD_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_D_AND_NOT_RD_AND_SI === 1'b1),1.0);
      
      // setup SE-LH CK-LH
      $setup(posedge SE &&& (ENABLE_D_AND_NOT_RD_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_D_AND_NOT_RD_AND_SI === 1'b1),1.0);
      
      // hold SE-HL CK-LH
      $hold(posedge CK &&& (ENABLE_D_AND_RD_AND_NOT_SI === 1'b1),
      negedge SE &&& (ENABLE_D_AND_RD_AND_NOT_SI === 1'b1),1.0);
      
      // hold SE-LH CK-LH
      $hold(posedge CK &&& (ENABLE_D_AND_RD_AND_NOT_SI === 1'b1),
      posedge SE &&& (ENABLE_D_AND_RD_AND_NOT_SI === 1'b1),1.0);
      
      // setup SE-HL CK-LH
      $setup(negedge SE &&& (ENABLE_D_AND_RD_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_D_AND_RD_AND_NOT_SI === 1'b1),1.0);
      
      // setup SE-LH CK-LH
      $setup(posedge SE &&& (ENABLE_D_AND_RD_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_D_AND_RD_AND_NOT_SI === 1'b1),1.0);
      
      // hold SI-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D_AND_NOT_RD_AND_SE === 1'b1),
      negedge SI &&& (ENABLE_NOT_D_AND_NOT_RD_AND_SE === 1'b1),1.0);
      
      // hold SI-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D_AND_NOT_RD_AND_SE === 1'b1),
      posedge SI &&& (ENABLE_NOT_D_AND_NOT_RD_AND_SE === 1'b1),1.0);
      
      // setup SI-HL CK-LH
      $setup(negedge SI &&& (ENABLE_NOT_D_AND_NOT_RD_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_NOT_RD_AND_SE === 1'b1),1.0);
      
      // setup SI-LH CK-LH
      $setup(posedge SI &&& (ENABLE_NOT_D_AND_NOT_RD_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_NOT_RD_AND_SE === 1'b1),1.0);
      
      // hold SI-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D_AND_RD_AND_SE === 1'b1),
      negedge SI &&& (ENABLE_NOT_D_AND_RD_AND_SE === 1'b1),1.0);
      
      // hold SI-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D_AND_RD_AND_SE === 1'b1),
      posedge SI &&& (ENABLE_NOT_D_AND_RD_AND_SE === 1'b1),1.0);
      
      // setup SI-HL CK-LH
      $setup(negedge SI &&& (ENABLE_NOT_D_AND_RD_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_RD_AND_SE === 1'b1),1.0);
      
      // setup SI-LH CK-LH
      $setup(posedge SI &&& (ENABLE_NOT_D_AND_RD_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_RD_AND_SE === 1'b1),1.0);
      
      // hold SI-HL CK-LH
      $hold(posedge CK &&& (ENABLE_D_AND_NOT_RD_AND_SE === 1'b1),
      negedge SI &&& (ENABLE_D_AND_NOT_RD_AND_SE === 1'b1),1.0);
      
      // hold SI-LH CK-LH
      $hold(posedge CK &&& (ENABLE_D_AND_NOT_RD_AND_SE === 1'b1),
      posedge SI &&& (ENABLE_D_AND_NOT_RD_AND_SE === 1'b1),1.0);
      
      // setup SI-HL CK-LH
      $setup(negedge SI &&& (ENABLE_D_AND_NOT_RD_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_D_AND_NOT_RD_AND_SE === 1'b1),1.0);
      
      // setup SI-LH CK-LH
      $setup(posedge SI &&& (ENABLE_D_AND_NOT_RD_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_D_AND_NOT_RD_AND_SE === 1'b1),1.0);
      
      // hold SI-HL CK-LH
      $hold(posedge CK &&& (ENABLE_D_AND_RD_AND_SE === 1'b1),
      negedge SI &&& (ENABLE_D_AND_RD_AND_SE === 1'b1),1.0);
      
      // hold SI-LH CK-LH
      $hold(posedge CK &&& (ENABLE_D_AND_RD_AND_SE === 1'b1),
      posedge SI &&& (ENABLE_D_AND_RD_AND_SE === 1'b1),1.0);
      
      // setup SI-HL CK-LH
      $setup(negedge SI &&& (ENABLE_D_AND_RD_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_D_AND_RD_AND_SE === 1'b1),1.0);
      
      // setup SI-LH CK-LH
      $setup(posedge SI &&& (ENABLE_D_AND_RD_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_D_AND_RD_AND_SE === 1'b1),1.0);
      
      // mpw CK_lh 
      $width(posedge CK,1.0,0);
      
      // mpw CK_hl 
      $width(negedge CK,1.0,0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_FSDPSYNRBQ_V2_4( Q, CK, D, SI, SE, RD );
input CK, D, RD, SE, SI;
output Q;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_FSDPSYNRBQ_V2_4_func SAEDRVT14_FSDPSYNRBQ_V2_4_behav_inst(.Q(Q),.CK(CK),.D(D),.SI(SI),.SE(SE),.RD(RD));
`else
   SAEDRVT14_FSDPSYNRBQ_V2_4_func SAEDRVT14_FSDPSYNRBQ_V2_4_inst(.Q(Q),.CK(CK),.D(D),.SI(SI),.SE(SE),.RD(RD));
   // spec_gates_begin
   not MGM_G0(MGM_W0,D);
   not MGM_G1(MGM_W1,RD);
   and MGM_G2(MGM_W2,MGM_W1,MGM_W0);
   not MGM_G3(MGM_W3,SE);
   and MGM_G4(MGM_W4,MGM_W3,MGM_W2);
   not MGM_G5(MGM_W5,SI);
   and MGM_G6(ENABLE_NOT_D_AND_NOT_RD_AND_NOT_SE_AND_NOT_SI,MGM_W5,MGM_W4);
   not MGM_G7(MGM_W6,D);
   not MGM_G8(MGM_W7,RD);
   and MGM_G9(MGM_W8,MGM_W7,MGM_W6);
   not MGM_G10(MGM_W9,SE);
   and MGM_G11(MGM_W10,MGM_W9,MGM_W8);
   and MGM_G12(ENABLE_NOT_D_AND_NOT_RD_AND_NOT_SE_AND_SI,SI,MGM_W10);
   not MGM_G13(MGM_W11,D);
   not MGM_G14(MGM_W12,RD);
   and MGM_G15(MGM_W13,MGM_W12,MGM_W11);
   and MGM_G16(MGM_W14,SE,MGM_W13);
   not MGM_G17(MGM_W15,SI);
   and MGM_G18(ENABLE_NOT_D_AND_NOT_RD_AND_SE_AND_NOT_SI,MGM_W15,MGM_W14);
   not MGM_G19(MGM_W16,D);
   not MGM_G20(MGM_W17,RD);
   and MGM_G21(MGM_W18,MGM_W17,MGM_W16);
   and MGM_G22(MGM_W19,SE,MGM_W18);
   and MGM_G23(ENABLE_NOT_D_AND_NOT_RD_AND_SE_AND_SI,SI,MGM_W19);
   not MGM_G24(MGM_W20,D);
   and MGM_G25(MGM_W21,RD,MGM_W20);
   not MGM_G26(MGM_W22,SE);
   and MGM_G27(MGM_W23,MGM_W22,MGM_W21);
   not MGM_G28(MGM_W24,SI);
   and MGM_G29(ENABLE_NOT_D_AND_RD_AND_NOT_SE_AND_NOT_SI,MGM_W24,MGM_W23);
   not MGM_G30(MGM_W25,D);
   and MGM_G31(MGM_W26,RD,MGM_W25);
   not MGM_G32(MGM_W27,SE);
   and MGM_G33(MGM_W28,MGM_W27,MGM_W26);
   and MGM_G34(ENABLE_NOT_D_AND_RD_AND_NOT_SE_AND_SI,SI,MGM_W28);
   not MGM_G35(MGM_W29,D);
   and MGM_G36(MGM_W30,RD,MGM_W29);
   and MGM_G37(MGM_W31,SE,MGM_W30);
   not MGM_G38(MGM_W32,SI);
   and MGM_G39(ENABLE_NOT_D_AND_RD_AND_SE_AND_NOT_SI,MGM_W32,MGM_W31);
   not MGM_G40(MGM_W33,D);
   and MGM_G41(MGM_W34,RD,MGM_W33);
   and MGM_G42(MGM_W35,SE,MGM_W34);
   and MGM_G43(ENABLE_NOT_D_AND_RD_AND_SE_AND_SI,SI,MGM_W35);
   not MGM_G44(MGM_W36,RD);
   and MGM_G45(MGM_W37,MGM_W36,D);
   not MGM_G46(MGM_W38,SE);
   and MGM_G47(MGM_W39,MGM_W38,MGM_W37);
   not MGM_G48(MGM_W40,SI);
   and MGM_G49(ENABLE_D_AND_NOT_RD_AND_NOT_SE_AND_NOT_SI,MGM_W40,MGM_W39);
   not MGM_G50(MGM_W41,RD);
   and MGM_G51(MGM_W42,MGM_W41,D);
   not MGM_G52(MGM_W43,SE);
   and MGM_G53(MGM_W44,MGM_W43,MGM_W42);
   and MGM_G54(ENABLE_D_AND_NOT_RD_AND_NOT_SE_AND_SI,SI,MGM_W44);
   not MGM_G55(MGM_W45,RD);
   and MGM_G56(MGM_W46,MGM_W45,D);
   and MGM_G57(MGM_W47,SE,MGM_W46);
   not MGM_G58(MGM_W48,SI);
   and MGM_G59(ENABLE_D_AND_NOT_RD_AND_SE_AND_NOT_SI,MGM_W48,MGM_W47);
   not MGM_G60(MGM_W49,RD);
   and MGM_G61(MGM_W50,MGM_W49,D);
   and MGM_G62(MGM_W51,SE,MGM_W50);
   and MGM_G63(ENABLE_D_AND_NOT_RD_AND_SE_AND_SI,SI,MGM_W51);
   and MGM_G64(MGM_W52,RD,D);
   not MGM_G65(MGM_W53,SE);
   and MGM_G66(MGM_W54,MGM_W53,MGM_W52);
   not MGM_G67(MGM_W55,SI);
   and MGM_G68(ENABLE_D_AND_RD_AND_NOT_SE_AND_NOT_SI,MGM_W55,MGM_W54);
   and MGM_G69(MGM_W56,RD,D);
   not MGM_G70(MGM_W57,SE);
   and MGM_G71(MGM_W58,MGM_W57,MGM_W56);
   and MGM_G72(ENABLE_D_AND_RD_AND_NOT_SE_AND_SI,SI,MGM_W58);
   and MGM_G73(MGM_W59,RD,D);
   and MGM_G74(MGM_W60,SE,MGM_W59);
   not MGM_G75(MGM_W61,SI);
   and MGM_G76(ENABLE_D_AND_RD_AND_SE_AND_NOT_SI,MGM_W61,MGM_W60);
   and MGM_G77(MGM_W62,RD,D);
   and MGM_G78(MGM_W63,SE,MGM_W62);
   and MGM_G79(ENABLE_D_AND_RD_AND_SE_AND_SI,SI,MGM_W63);
   not MGM_G80(MGM_W64,SE);
   and MGM_G81(MGM_W65,MGM_W64,RD);
   not MGM_G82(MGM_W66,SI);
   and MGM_G83(ENABLE_RD_AND_NOT_SE_AND_NOT_SI,MGM_W66,MGM_W65);
   not MGM_G84(MGM_W67,SE);
   and MGM_G85(MGM_W68,MGM_W67,RD);
   and MGM_G86(ENABLE_RD_AND_NOT_SE_AND_SI,SI,MGM_W68);
   not MGM_G87(MGM_W69,SE);
   and MGM_G88(MGM_W70,MGM_W69,D);
   not MGM_G89(MGM_W71,SI);
   and MGM_G90(ENABLE_D_AND_NOT_SE_AND_NOT_SI,MGM_W71,MGM_W70);
   not MGM_G91(MGM_W72,SE);
   and MGM_G92(MGM_W73,MGM_W72,D);
   and MGM_G93(ENABLE_D_AND_NOT_SE_AND_SI,SI,MGM_W73);
   not MGM_G94(MGM_W74,D);
   not MGM_G95(MGM_W75,RD);
   and MGM_G96(MGM_W76,MGM_W75,MGM_W74);
   and MGM_G97(ENABLE_NOT_D_AND_NOT_RD_AND_SI,SI,MGM_W76);
   not MGM_G98(MGM_W77,D);
   and MGM_G99(MGM_W78,RD,MGM_W77);
   and MGM_G100(ENABLE_NOT_D_AND_RD_AND_SI,SI,MGM_W78);
   not MGM_G101(MGM_W79,RD);
   and MGM_G102(MGM_W80,MGM_W79,D);
   and MGM_G103(ENABLE_D_AND_NOT_RD_AND_SI,SI,MGM_W80);
   and MGM_G104(MGM_W81,RD,D);
   not MGM_G105(MGM_W82,SI);
   and MGM_G106(ENABLE_D_AND_RD_AND_NOT_SI,MGM_W82,MGM_W81);
   not MGM_G107(MGM_W83,D);
   not MGM_G108(MGM_W84,RD);
   and MGM_G109(MGM_W85,MGM_W84,MGM_W83);
   and MGM_G110(ENABLE_NOT_D_AND_NOT_RD_AND_SE,SE,MGM_W85);
   not MGM_G111(MGM_W86,D);
   and MGM_G112(MGM_W87,RD,MGM_W86);
   and MGM_G113(ENABLE_NOT_D_AND_RD_AND_SE,SE,MGM_W87);
   not MGM_G114(MGM_W88,RD);
   and MGM_G115(MGM_W89,MGM_W88,D);
   and MGM_G116(ENABLE_D_AND_NOT_RD_AND_SE,SE,MGM_W89);
   and MGM_G117(MGM_W90,RD,D);
   and MGM_G118(ENABLE_D_AND_RD_AND_SE,SE,MGM_W90);
   // spec_gates_end
   // specify_block_begin
   specify

      if(D===1'b0 && RD===1'b0 && SE===1'b1 && SI===1'b0)
      // seq arc CK --> Q
      (posedge CK => (Q : D))  = (1.0,1.0);
      
      if(D===1'b0 && RD===1'b1 && SE===1'b1 && SI===1'b0)
      // seq arc CK --> Q
      (posedge CK => (Q : D))  = (1.0,1.0);
      
      if(D===1'b1 && RD===1'b0 && SE===1'b0 && SI===1'b0)
      // seq arc CK --> Q
      (posedge CK => (Q : D))  = (1.0,1.0);
      
      if(D===1'b1 && RD===1'b0 && SE===1'b1 && SI===1'b0)
      // seq arc CK --> Q
      (posedge CK => (Q : D))  = (1.0,1.0);
      
      if(D===1'b0 && RD===1'b0 && SI===1'b1)
      // seq arc CK --> Q
      (posedge CK => (Q : SE))  = (1.0,1.0);
      
      if(D===1'b0 && RD===1'b1 && SI===1'b1)
      // seq arc CK --> Q
      (posedge CK => (Q : SE))  = (1.0,1.0);
      
      if(D===1'b1 && RD===1'b0 && SI===1'b1)
      // seq arc CK --> Q
      (posedge CK => (Q : SE))  = (1.0,1.0);
      
      if(D===1'b1 && RD===1'b1 && SE===1'b0 && SI===1'b1 || D===1'b0 && RD===1'b0 && SE===1'b0 && SI===1'b0)
      // seq arc CK --> Q
      (posedge CK => (Q : D))  = (1.0,1.0);
      
      if(D===1'b1 && RD===1'b1 && SE===1'b1)
      // seq arc CK --> Q
      (posedge CK => (Q : SI))  = (1.0,1.0);
      
      if(RD===1'b1 && SE===1'b0 && SI===1'b0)
      // seq arc CK --> Q
      (posedge CK => (Q : D))  = (1.0,1.0);
      
      ifnone
      // seq arc CK --> Q
      (posedge CK => (Q : D))  = (1.0,1.0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_NOT_RD_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_NOT_RD_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_NOT_RD_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_NOT_RD_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_NOT_RD_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_NOT_RD_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_NOT_RD_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_NOT_RD_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_RD_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_RD_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_RD_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_RD_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_RD_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_RD_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_RD_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_RD_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_NOT_RD_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_NOT_RD_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_NOT_RD_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_NOT_RD_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_NOT_RD_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_NOT_RD_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_NOT_RD_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_NOT_RD_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_RD_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_RD_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_RD_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_RD_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_RD_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_RD_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_RD_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_RD_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      // hold D-HL CK-LH
      $hold(posedge CK &&& (ENABLE_RD_AND_NOT_SE_AND_NOT_SI === 1'b1),
      negedge D &&& (ENABLE_RD_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold D-LH CK-LH
      $hold(posedge CK &&& (ENABLE_RD_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge D &&& (ENABLE_RD_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup D-HL CK-LH
      $setup(negedge D &&& (ENABLE_RD_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_RD_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup D-LH CK-LH
      $setup(posedge D &&& (ENABLE_RD_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_RD_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold D-HL CK-LH
      $hold(posedge CK &&& (ENABLE_RD_AND_NOT_SE_AND_SI === 1'b1),
      negedge D &&& (ENABLE_RD_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // hold D-LH CK-LH
      $hold(posedge CK &&& (ENABLE_RD_AND_NOT_SE_AND_SI === 1'b1),
      posedge D &&& (ENABLE_RD_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // setup D-HL CK-LH
      $setup(negedge D &&& (ENABLE_RD_AND_NOT_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_RD_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // setup D-LH CK-LH
      $setup(posedge D &&& (ENABLE_RD_AND_NOT_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_RD_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // hold RD-HL CK-LH
      $hold(posedge CK &&& (ENABLE_D_AND_NOT_SE_AND_NOT_SI === 1'b1),
      negedge RD &&& (ENABLE_D_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold RD-LH CK-LH
      $hold(posedge CK &&& (ENABLE_D_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge RD &&& (ENABLE_D_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup RD-HL CK-LH
      $setup(negedge RD &&& (ENABLE_D_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_D_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup RD-LH CK-LH
      $setup(posedge RD &&& (ENABLE_D_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_D_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold RD-HL CK-LH
      $hold(posedge CK &&& (ENABLE_D_AND_NOT_SE_AND_SI === 1'b1),
      negedge RD &&& (ENABLE_D_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // hold RD-LH CK-LH
      $hold(posedge CK &&& (ENABLE_D_AND_NOT_SE_AND_SI === 1'b1),
      posedge RD &&& (ENABLE_D_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // setup RD-HL CK-LH
      $setup(negedge RD &&& (ENABLE_D_AND_NOT_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_D_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // setup RD-LH CK-LH
      $setup(posedge RD &&& (ENABLE_D_AND_NOT_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_D_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // hold SE-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D_AND_NOT_RD_AND_SI === 1'b1),
      negedge SE &&& (ENABLE_NOT_D_AND_NOT_RD_AND_SI === 1'b1),1.0);
      
      // hold SE-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D_AND_NOT_RD_AND_SI === 1'b1),
      posedge SE &&& (ENABLE_NOT_D_AND_NOT_RD_AND_SI === 1'b1),1.0);
      
      // setup SE-HL CK-LH
      $setup(negedge SE &&& (ENABLE_NOT_D_AND_NOT_RD_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_NOT_RD_AND_SI === 1'b1),1.0);
      
      // setup SE-LH CK-LH
      $setup(posedge SE &&& (ENABLE_NOT_D_AND_NOT_RD_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_NOT_RD_AND_SI === 1'b1),1.0);
      
      // hold SE-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D_AND_RD_AND_SI === 1'b1),
      negedge SE &&& (ENABLE_NOT_D_AND_RD_AND_SI === 1'b1),1.0);
      
      // hold SE-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D_AND_RD_AND_SI === 1'b1),
      posedge SE &&& (ENABLE_NOT_D_AND_RD_AND_SI === 1'b1),1.0);
      
      // setup SE-HL CK-LH
      $setup(negedge SE &&& (ENABLE_NOT_D_AND_RD_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_RD_AND_SI === 1'b1),1.0);
      
      // setup SE-LH CK-LH
      $setup(posedge SE &&& (ENABLE_NOT_D_AND_RD_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_RD_AND_SI === 1'b1),1.0);
      
      // hold SE-HL CK-LH
      $hold(posedge CK &&& (ENABLE_D_AND_NOT_RD_AND_SI === 1'b1),
      negedge SE &&& (ENABLE_D_AND_NOT_RD_AND_SI === 1'b1),1.0);
      
      // hold SE-LH CK-LH
      $hold(posedge CK &&& (ENABLE_D_AND_NOT_RD_AND_SI === 1'b1),
      posedge SE &&& (ENABLE_D_AND_NOT_RD_AND_SI === 1'b1),1.0);
      
      // setup SE-HL CK-LH
      $setup(negedge SE &&& (ENABLE_D_AND_NOT_RD_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_D_AND_NOT_RD_AND_SI === 1'b1),1.0);
      
      // setup SE-LH CK-LH
      $setup(posedge SE &&& (ENABLE_D_AND_NOT_RD_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_D_AND_NOT_RD_AND_SI === 1'b1),1.0);
      
      // hold SE-HL CK-LH
      $hold(posedge CK &&& (ENABLE_D_AND_RD_AND_NOT_SI === 1'b1),
      negedge SE &&& (ENABLE_D_AND_RD_AND_NOT_SI === 1'b1),1.0);
      
      // hold SE-LH CK-LH
      $hold(posedge CK &&& (ENABLE_D_AND_RD_AND_NOT_SI === 1'b1),
      posedge SE &&& (ENABLE_D_AND_RD_AND_NOT_SI === 1'b1),1.0);
      
      // setup SE-HL CK-LH
      $setup(negedge SE &&& (ENABLE_D_AND_RD_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_D_AND_RD_AND_NOT_SI === 1'b1),1.0);
      
      // setup SE-LH CK-LH
      $setup(posedge SE &&& (ENABLE_D_AND_RD_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_D_AND_RD_AND_NOT_SI === 1'b1),1.0);
      
      // hold SI-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D_AND_NOT_RD_AND_SE === 1'b1),
      negedge SI &&& (ENABLE_NOT_D_AND_NOT_RD_AND_SE === 1'b1),1.0);
      
      // hold SI-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D_AND_NOT_RD_AND_SE === 1'b1),
      posedge SI &&& (ENABLE_NOT_D_AND_NOT_RD_AND_SE === 1'b1),1.0);
      
      // setup SI-HL CK-LH
      $setup(negedge SI &&& (ENABLE_NOT_D_AND_NOT_RD_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_NOT_RD_AND_SE === 1'b1),1.0);
      
      // setup SI-LH CK-LH
      $setup(posedge SI &&& (ENABLE_NOT_D_AND_NOT_RD_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_NOT_RD_AND_SE === 1'b1),1.0);
      
      // hold SI-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D_AND_RD_AND_SE === 1'b1),
      negedge SI &&& (ENABLE_NOT_D_AND_RD_AND_SE === 1'b1),1.0);
      
      // hold SI-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D_AND_RD_AND_SE === 1'b1),
      posedge SI &&& (ENABLE_NOT_D_AND_RD_AND_SE === 1'b1),1.0);
      
      // setup SI-HL CK-LH
      $setup(negedge SI &&& (ENABLE_NOT_D_AND_RD_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_RD_AND_SE === 1'b1),1.0);
      
      // setup SI-LH CK-LH
      $setup(posedge SI &&& (ENABLE_NOT_D_AND_RD_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_RD_AND_SE === 1'b1),1.0);
      
      // hold SI-HL CK-LH
      $hold(posedge CK &&& (ENABLE_D_AND_NOT_RD_AND_SE === 1'b1),
      negedge SI &&& (ENABLE_D_AND_NOT_RD_AND_SE === 1'b1),1.0);
      
      // hold SI-LH CK-LH
      $hold(posedge CK &&& (ENABLE_D_AND_NOT_RD_AND_SE === 1'b1),
      posedge SI &&& (ENABLE_D_AND_NOT_RD_AND_SE === 1'b1),1.0);
      
      // setup SI-HL CK-LH
      $setup(negedge SI &&& (ENABLE_D_AND_NOT_RD_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_D_AND_NOT_RD_AND_SE === 1'b1),1.0);
      
      // setup SI-LH CK-LH
      $setup(posedge SI &&& (ENABLE_D_AND_NOT_RD_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_D_AND_NOT_RD_AND_SE === 1'b1),1.0);
      
      // hold SI-HL CK-LH
      $hold(posedge CK &&& (ENABLE_D_AND_RD_AND_SE === 1'b1),
      negedge SI &&& (ENABLE_D_AND_RD_AND_SE === 1'b1),1.0);
      
      // hold SI-LH CK-LH
      $hold(posedge CK &&& (ENABLE_D_AND_RD_AND_SE === 1'b1),
      posedge SI &&& (ENABLE_D_AND_RD_AND_SE === 1'b1),1.0);
      
      // setup SI-HL CK-LH
      $setup(negedge SI &&& (ENABLE_D_AND_RD_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_D_AND_RD_AND_SE === 1'b1),1.0);
      
      // setup SI-LH CK-LH
      $setup(posedge SI &&& (ENABLE_D_AND_RD_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_D_AND_RD_AND_SE === 1'b1),1.0);
      
      // mpw CK_lh 
      $width(posedge CK,1.0,0);
      
      // mpw CK_hl 
      $width(negedge CK,1.0,0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_FSDPSYNRBQ_V3_1( Q, CK, D, SI, SE, RD );
input CK, D, RD, SE, SI;
output Q;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_FSDPSYNRBQ_V3_1_func SAEDRVT14_FSDPSYNRBQ_V3_1_behav_inst(.Q(Q),.CK(CK),.D(D),.SI(SI),.SE(SE),.RD(RD));
`else
   SAEDRVT14_FSDPSYNRBQ_V3_1_func SAEDRVT14_FSDPSYNRBQ_V3_1_inst(.Q(Q),.CK(CK),.D(D),.SI(SI),.SE(SE),.RD(RD));
   // spec_gates_begin
   not MGM_G0(MGM_W0,D);
   not MGM_G1(MGM_W1,RD);
   and MGM_G2(MGM_W2,MGM_W1,MGM_W0);
   not MGM_G3(MGM_W3,SE);
   and MGM_G4(MGM_W4,MGM_W3,MGM_W2);
   not MGM_G5(MGM_W5,SI);
   and MGM_G6(ENABLE_NOT_D_AND_NOT_RD_AND_NOT_SE_AND_NOT_SI,MGM_W5,MGM_W4);
   not MGM_G7(MGM_W6,D);
   not MGM_G8(MGM_W7,RD);
   and MGM_G9(MGM_W8,MGM_W7,MGM_W6);
   not MGM_G10(MGM_W9,SE);
   and MGM_G11(MGM_W10,MGM_W9,MGM_W8);
   and MGM_G12(ENABLE_NOT_D_AND_NOT_RD_AND_NOT_SE_AND_SI,SI,MGM_W10);
   not MGM_G13(MGM_W11,D);
   not MGM_G14(MGM_W12,RD);
   and MGM_G15(MGM_W13,MGM_W12,MGM_W11);
   and MGM_G16(MGM_W14,SE,MGM_W13);
   not MGM_G17(MGM_W15,SI);
   and MGM_G18(ENABLE_NOT_D_AND_NOT_RD_AND_SE_AND_NOT_SI,MGM_W15,MGM_W14);
   not MGM_G19(MGM_W16,D);
   not MGM_G20(MGM_W17,RD);
   and MGM_G21(MGM_W18,MGM_W17,MGM_W16);
   and MGM_G22(MGM_W19,SE,MGM_W18);
   and MGM_G23(ENABLE_NOT_D_AND_NOT_RD_AND_SE_AND_SI,SI,MGM_W19);
   not MGM_G24(MGM_W20,D);
   and MGM_G25(MGM_W21,RD,MGM_W20);
   not MGM_G26(MGM_W22,SE);
   and MGM_G27(MGM_W23,MGM_W22,MGM_W21);
   not MGM_G28(MGM_W24,SI);
   and MGM_G29(ENABLE_NOT_D_AND_RD_AND_NOT_SE_AND_NOT_SI,MGM_W24,MGM_W23);
   not MGM_G30(MGM_W25,D);
   and MGM_G31(MGM_W26,RD,MGM_W25);
   not MGM_G32(MGM_W27,SE);
   and MGM_G33(MGM_W28,MGM_W27,MGM_W26);
   and MGM_G34(ENABLE_NOT_D_AND_RD_AND_NOT_SE_AND_SI,SI,MGM_W28);
   not MGM_G35(MGM_W29,D);
   and MGM_G36(MGM_W30,RD,MGM_W29);
   and MGM_G37(MGM_W31,SE,MGM_W30);
   not MGM_G38(MGM_W32,SI);
   and MGM_G39(ENABLE_NOT_D_AND_RD_AND_SE_AND_NOT_SI,MGM_W32,MGM_W31);
   not MGM_G40(MGM_W33,D);
   and MGM_G41(MGM_W34,RD,MGM_W33);
   and MGM_G42(MGM_W35,SE,MGM_W34);
   and MGM_G43(ENABLE_NOT_D_AND_RD_AND_SE_AND_SI,SI,MGM_W35);
   not MGM_G44(MGM_W36,RD);
   and MGM_G45(MGM_W37,MGM_W36,D);
   not MGM_G46(MGM_W38,SE);
   and MGM_G47(MGM_W39,MGM_W38,MGM_W37);
   not MGM_G48(MGM_W40,SI);
   and MGM_G49(ENABLE_D_AND_NOT_RD_AND_NOT_SE_AND_NOT_SI,MGM_W40,MGM_W39);
   not MGM_G50(MGM_W41,RD);
   and MGM_G51(MGM_W42,MGM_W41,D);
   not MGM_G52(MGM_W43,SE);
   and MGM_G53(MGM_W44,MGM_W43,MGM_W42);
   and MGM_G54(ENABLE_D_AND_NOT_RD_AND_NOT_SE_AND_SI,SI,MGM_W44);
   not MGM_G55(MGM_W45,RD);
   and MGM_G56(MGM_W46,MGM_W45,D);
   and MGM_G57(MGM_W47,SE,MGM_W46);
   not MGM_G58(MGM_W48,SI);
   and MGM_G59(ENABLE_D_AND_NOT_RD_AND_SE_AND_NOT_SI,MGM_W48,MGM_W47);
   not MGM_G60(MGM_W49,RD);
   and MGM_G61(MGM_W50,MGM_W49,D);
   and MGM_G62(MGM_W51,SE,MGM_W50);
   and MGM_G63(ENABLE_D_AND_NOT_RD_AND_SE_AND_SI,SI,MGM_W51);
   and MGM_G64(MGM_W52,RD,D);
   not MGM_G65(MGM_W53,SE);
   and MGM_G66(MGM_W54,MGM_W53,MGM_W52);
   not MGM_G67(MGM_W55,SI);
   and MGM_G68(ENABLE_D_AND_RD_AND_NOT_SE_AND_NOT_SI,MGM_W55,MGM_W54);
   and MGM_G69(MGM_W56,RD,D);
   not MGM_G70(MGM_W57,SE);
   and MGM_G71(MGM_W58,MGM_W57,MGM_W56);
   and MGM_G72(ENABLE_D_AND_RD_AND_NOT_SE_AND_SI,SI,MGM_W58);
   and MGM_G73(MGM_W59,RD,D);
   and MGM_G74(MGM_W60,SE,MGM_W59);
   not MGM_G75(MGM_W61,SI);
   and MGM_G76(ENABLE_D_AND_RD_AND_SE_AND_NOT_SI,MGM_W61,MGM_W60);
   and MGM_G77(MGM_W62,RD,D);
   and MGM_G78(MGM_W63,SE,MGM_W62);
   and MGM_G79(ENABLE_D_AND_RD_AND_SE_AND_SI,SI,MGM_W63);
   not MGM_G80(MGM_W64,SE);
   and MGM_G81(MGM_W65,MGM_W64,RD);
   not MGM_G82(MGM_W66,SI);
   and MGM_G83(ENABLE_RD_AND_NOT_SE_AND_NOT_SI,MGM_W66,MGM_W65);
   not MGM_G84(MGM_W67,SE);
   and MGM_G85(MGM_W68,MGM_W67,RD);
   and MGM_G86(ENABLE_RD_AND_NOT_SE_AND_SI,SI,MGM_W68);
   not MGM_G87(MGM_W69,SE);
   and MGM_G88(MGM_W70,MGM_W69,D);
   not MGM_G89(MGM_W71,SI);
   and MGM_G90(ENABLE_D_AND_NOT_SE_AND_NOT_SI,MGM_W71,MGM_W70);
   not MGM_G91(MGM_W72,SE);
   and MGM_G92(MGM_W73,MGM_W72,D);
   and MGM_G93(ENABLE_D_AND_NOT_SE_AND_SI,SI,MGM_W73);
   not MGM_G94(MGM_W74,D);
   not MGM_G95(MGM_W75,RD);
   and MGM_G96(MGM_W76,MGM_W75,MGM_W74);
   and MGM_G97(ENABLE_NOT_D_AND_NOT_RD_AND_SI,SI,MGM_W76);
   not MGM_G98(MGM_W77,D);
   and MGM_G99(MGM_W78,RD,MGM_W77);
   and MGM_G100(ENABLE_NOT_D_AND_RD_AND_SI,SI,MGM_W78);
   not MGM_G101(MGM_W79,RD);
   and MGM_G102(MGM_W80,MGM_W79,D);
   and MGM_G103(ENABLE_D_AND_NOT_RD_AND_SI,SI,MGM_W80);
   and MGM_G104(MGM_W81,RD,D);
   not MGM_G105(MGM_W82,SI);
   and MGM_G106(ENABLE_D_AND_RD_AND_NOT_SI,MGM_W82,MGM_W81);
   not MGM_G107(MGM_W83,D);
   not MGM_G108(MGM_W84,RD);
   and MGM_G109(MGM_W85,MGM_W84,MGM_W83);
   and MGM_G110(ENABLE_NOT_D_AND_NOT_RD_AND_SE,SE,MGM_W85);
   not MGM_G111(MGM_W86,D);
   and MGM_G112(MGM_W87,RD,MGM_W86);
   and MGM_G113(ENABLE_NOT_D_AND_RD_AND_SE,SE,MGM_W87);
   not MGM_G114(MGM_W88,RD);
   and MGM_G115(MGM_W89,MGM_W88,D);
   and MGM_G116(ENABLE_D_AND_NOT_RD_AND_SE,SE,MGM_W89);
   and MGM_G117(MGM_W90,RD,D);
   and MGM_G118(ENABLE_D_AND_RD_AND_SE,SE,MGM_W90);
   // spec_gates_end
   // specify_block_begin
   specify

      if(D===1'b0 && RD===1'b0 && SE===1'b1 && SI===1'b0)
      // seq arc CK --> Q
      (posedge CK => (Q : D))  = (1.0,1.0);
      
      if(D===1'b0 && RD===1'b1 && SE===1'b1 && SI===1'b0)
      // seq arc CK --> Q
      (posedge CK => (Q : D))  = (1.0,1.0);
      
      if(D===1'b1 && RD===1'b0 && SE===1'b0 && SI===1'b0)
      // seq arc CK --> Q
      (posedge CK => (Q : D))  = (1.0,1.0);
      
      if(D===1'b1 && RD===1'b0 && SE===1'b1 && SI===1'b0)
      // seq arc CK --> Q
      (posedge CK => (Q : D))  = (1.0,1.0);
      
      if(D===1'b0 && RD===1'b0 && SI===1'b1)
      // seq arc CK --> Q
      (posedge CK => (Q : SE))  = (1.0,1.0);
      
      if(D===1'b0 && RD===1'b1 && SI===1'b1)
      // seq arc CK --> Q
      (posedge CK => (Q : SE))  = (1.0,1.0);
      
      if(D===1'b1 && RD===1'b0 && SI===1'b1)
      // seq arc CK --> Q
      (posedge CK => (Q : SE))  = (1.0,1.0);
      
      if(D===1'b1 && RD===1'b1 && SE===1'b0 && SI===1'b1 || D===1'b0 && RD===1'b0 && SE===1'b0 && SI===1'b0)
      // seq arc CK --> Q
      (posedge CK => (Q : D))  = (1.0,1.0);
      
      if(D===1'b1 && RD===1'b1 && SE===1'b1)
      // seq arc CK --> Q
      (posedge CK => (Q : SI))  = (1.0,1.0);
      
      if(RD===1'b1 && SE===1'b0 && SI===1'b0)
      // seq arc CK --> Q
      (posedge CK => (Q : D))  = (1.0,1.0);
      
      ifnone
      // seq arc CK --> Q
      (posedge CK => (Q : D))  = (1.0,1.0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_NOT_RD_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_NOT_RD_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_NOT_RD_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_NOT_RD_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_NOT_RD_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_NOT_RD_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_NOT_RD_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_NOT_RD_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_RD_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_RD_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_RD_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_RD_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_RD_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_RD_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_RD_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_RD_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_NOT_RD_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_NOT_RD_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_NOT_RD_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_NOT_RD_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_NOT_RD_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_NOT_RD_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_NOT_RD_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_NOT_RD_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_RD_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_RD_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_RD_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_RD_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_RD_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_RD_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_RD_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_RD_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      // hold D-HL CK-LH
      $hold(posedge CK &&& (ENABLE_RD_AND_NOT_SE_AND_NOT_SI === 1'b1),
      negedge D &&& (ENABLE_RD_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold D-LH CK-LH
      $hold(posedge CK &&& (ENABLE_RD_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge D &&& (ENABLE_RD_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup D-HL CK-LH
      $setup(negedge D &&& (ENABLE_RD_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_RD_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup D-LH CK-LH
      $setup(posedge D &&& (ENABLE_RD_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_RD_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold D-HL CK-LH
      $hold(posedge CK &&& (ENABLE_RD_AND_NOT_SE_AND_SI === 1'b1),
      negedge D &&& (ENABLE_RD_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // hold D-LH CK-LH
      $hold(posedge CK &&& (ENABLE_RD_AND_NOT_SE_AND_SI === 1'b1),
      posedge D &&& (ENABLE_RD_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // setup D-HL CK-LH
      $setup(negedge D &&& (ENABLE_RD_AND_NOT_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_RD_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // setup D-LH CK-LH
      $setup(posedge D &&& (ENABLE_RD_AND_NOT_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_RD_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // hold RD-HL CK-LH
      $hold(posedge CK &&& (ENABLE_D_AND_NOT_SE_AND_NOT_SI === 1'b1),
      negedge RD &&& (ENABLE_D_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold RD-LH CK-LH
      $hold(posedge CK &&& (ENABLE_D_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge RD &&& (ENABLE_D_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup RD-HL CK-LH
      $setup(negedge RD &&& (ENABLE_D_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_D_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup RD-LH CK-LH
      $setup(posedge RD &&& (ENABLE_D_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_D_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold RD-HL CK-LH
      $hold(posedge CK &&& (ENABLE_D_AND_NOT_SE_AND_SI === 1'b1),
      negedge RD &&& (ENABLE_D_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // hold RD-LH CK-LH
      $hold(posedge CK &&& (ENABLE_D_AND_NOT_SE_AND_SI === 1'b1),
      posedge RD &&& (ENABLE_D_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // setup RD-HL CK-LH
      $setup(negedge RD &&& (ENABLE_D_AND_NOT_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_D_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // setup RD-LH CK-LH
      $setup(posedge RD &&& (ENABLE_D_AND_NOT_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_D_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // hold SE-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D_AND_NOT_RD_AND_SI === 1'b1),
      negedge SE &&& (ENABLE_NOT_D_AND_NOT_RD_AND_SI === 1'b1),1.0);
      
      // hold SE-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D_AND_NOT_RD_AND_SI === 1'b1),
      posedge SE &&& (ENABLE_NOT_D_AND_NOT_RD_AND_SI === 1'b1),1.0);
      
      // setup SE-HL CK-LH
      $setup(negedge SE &&& (ENABLE_NOT_D_AND_NOT_RD_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_NOT_RD_AND_SI === 1'b1),1.0);
      
      // setup SE-LH CK-LH
      $setup(posedge SE &&& (ENABLE_NOT_D_AND_NOT_RD_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_NOT_RD_AND_SI === 1'b1),1.0);
      
      // hold SE-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D_AND_RD_AND_SI === 1'b1),
      negedge SE &&& (ENABLE_NOT_D_AND_RD_AND_SI === 1'b1),1.0);
      
      // hold SE-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D_AND_RD_AND_SI === 1'b1),
      posedge SE &&& (ENABLE_NOT_D_AND_RD_AND_SI === 1'b1),1.0);
      
      // setup SE-HL CK-LH
      $setup(negedge SE &&& (ENABLE_NOT_D_AND_RD_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_RD_AND_SI === 1'b1),1.0);
      
      // setup SE-LH CK-LH
      $setup(posedge SE &&& (ENABLE_NOT_D_AND_RD_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_RD_AND_SI === 1'b1),1.0);
      
      // hold SE-HL CK-LH
      $hold(posedge CK &&& (ENABLE_D_AND_NOT_RD_AND_SI === 1'b1),
      negedge SE &&& (ENABLE_D_AND_NOT_RD_AND_SI === 1'b1),1.0);
      
      // hold SE-LH CK-LH
      $hold(posedge CK &&& (ENABLE_D_AND_NOT_RD_AND_SI === 1'b1),
      posedge SE &&& (ENABLE_D_AND_NOT_RD_AND_SI === 1'b1),1.0);
      
      // setup SE-HL CK-LH
      $setup(negedge SE &&& (ENABLE_D_AND_NOT_RD_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_D_AND_NOT_RD_AND_SI === 1'b1),1.0);
      
      // setup SE-LH CK-LH
      $setup(posedge SE &&& (ENABLE_D_AND_NOT_RD_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_D_AND_NOT_RD_AND_SI === 1'b1),1.0);
      
      // hold SE-HL CK-LH
      $hold(posedge CK &&& (ENABLE_D_AND_RD_AND_NOT_SI === 1'b1),
      negedge SE &&& (ENABLE_D_AND_RD_AND_NOT_SI === 1'b1),1.0);
      
      // hold SE-LH CK-LH
      $hold(posedge CK &&& (ENABLE_D_AND_RD_AND_NOT_SI === 1'b1),
      posedge SE &&& (ENABLE_D_AND_RD_AND_NOT_SI === 1'b1),1.0);
      
      // setup SE-HL CK-LH
      $setup(negedge SE &&& (ENABLE_D_AND_RD_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_D_AND_RD_AND_NOT_SI === 1'b1),1.0);
      
      // setup SE-LH CK-LH
      $setup(posedge SE &&& (ENABLE_D_AND_RD_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_D_AND_RD_AND_NOT_SI === 1'b1),1.0);
      
      // hold SI-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D_AND_NOT_RD_AND_SE === 1'b1),
      negedge SI &&& (ENABLE_NOT_D_AND_NOT_RD_AND_SE === 1'b1),1.0);
      
      // hold SI-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D_AND_NOT_RD_AND_SE === 1'b1),
      posedge SI &&& (ENABLE_NOT_D_AND_NOT_RD_AND_SE === 1'b1),1.0);
      
      // setup SI-HL CK-LH
      $setup(negedge SI &&& (ENABLE_NOT_D_AND_NOT_RD_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_NOT_RD_AND_SE === 1'b1),1.0);
      
      // setup SI-LH CK-LH
      $setup(posedge SI &&& (ENABLE_NOT_D_AND_NOT_RD_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_NOT_RD_AND_SE === 1'b1),1.0);
      
      // hold SI-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D_AND_RD_AND_SE === 1'b1),
      negedge SI &&& (ENABLE_NOT_D_AND_RD_AND_SE === 1'b1),1.0);
      
      // hold SI-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D_AND_RD_AND_SE === 1'b1),
      posedge SI &&& (ENABLE_NOT_D_AND_RD_AND_SE === 1'b1),1.0);
      
      // setup SI-HL CK-LH
      $setup(negedge SI &&& (ENABLE_NOT_D_AND_RD_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_RD_AND_SE === 1'b1),1.0);
      
      // setup SI-LH CK-LH
      $setup(posedge SI &&& (ENABLE_NOT_D_AND_RD_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_RD_AND_SE === 1'b1),1.0);
      
      // hold SI-HL CK-LH
      $hold(posedge CK &&& (ENABLE_D_AND_NOT_RD_AND_SE === 1'b1),
      negedge SI &&& (ENABLE_D_AND_NOT_RD_AND_SE === 1'b1),1.0);
      
      // hold SI-LH CK-LH
      $hold(posedge CK &&& (ENABLE_D_AND_NOT_RD_AND_SE === 1'b1),
      posedge SI &&& (ENABLE_D_AND_NOT_RD_AND_SE === 1'b1),1.0);
      
      // setup SI-HL CK-LH
      $setup(negedge SI &&& (ENABLE_D_AND_NOT_RD_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_D_AND_NOT_RD_AND_SE === 1'b1),1.0);
      
      // setup SI-LH CK-LH
      $setup(posedge SI &&& (ENABLE_D_AND_NOT_RD_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_D_AND_NOT_RD_AND_SE === 1'b1),1.0);
      
      // hold SI-HL CK-LH
      $hold(posedge CK &&& (ENABLE_D_AND_RD_AND_SE === 1'b1),
      negedge SI &&& (ENABLE_D_AND_RD_AND_SE === 1'b1),1.0);
      
      // hold SI-LH CK-LH
      $hold(posedge CK &&& (ENABLE_D_AND_RD_AND_SE === 1'b1),
      posedge SI &&& (ENABLE_D_AND_RD_AND_SE === 1'b1),1.0);
      
      // setup SI-HL CK-LH
      $setup(negedge SI &&& (ENABLE_D_AND_RD_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_D_AND_RD_AND_SE === 1'b1),1.0);
      
      // setup SI-LH CK-LH
      $setup(posedge SI &&& (ENABLE_D_AND_RD_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_D_AND_RD_AND_SE === 1'b1),1.0);
      
      // mpw CK_lh 
      $width(posedge CK,1.0,0);
      
      // mpw CK_hl 
      $width(negedge CK,1.0,0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_FSDPSYNRBQ_V3_2( Q, CK, D, SI, SE, RD );
input CK, D, RD, SE, SI;
output Q;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_FSDPSYNRBQ_V3_2_func SAEDRVT14_FSDPSYNRBQ_V3_2_behav_inst(.Q(Q),.CK(CK),.D(D),.SI(SI),.SE(SE),.RD(RD));
`else
   SAEDRVT14_FSDPSYNRBQ_V3_2_func SAEDRVT14_FSDPSYNRBQ_V3_2_inst(.Q(Q),.CK(CK),.D(D),.SI(SI),.SE(SE),.RD(RD));
   // spec_gates_begin
   not MGM_G0(MGM_W0,D);
   not MGM_G1(MGM_W1,RD);
   and MGM_G2(MGM_W2,MGM_W1,MGM_W0);
   not MGM_G3(MGM_W3,SE);
   and MGM_G4(MGM_W4,MGM_W3,MGM_W2);
   not MGM_G5(MGM_W5,SI);
   and MGM_G6(ENABLE_NOT_D_AND_NOT_RD_AND_NOT_SE_AND_NOT_SI,MGM_W5,MGM_W4);
   not MGM_G7(MGM_W6,D);
   not MGM_G8(MGM_W7,RD);
   and MGM_G9(MGM_W8,MGM_W7,MGM_W6);
   not MGM_G10(MGM_W9,SE);
   and MGM_G11(MGM_W10,MGM_W9,MGM_W8);
   and MGM_G12(ENABLE_NOT_D_AND_NOT_RD_AND_NOT_SE_AND_SI,SI,MGM_W10);
   not MGM_G13(MGM_W11,D);
   not MGM_G14(MGM_W12,RD);
   and MGM_G15(MGM_W13,MGM_W12,MGM_W11);
   and MGM_G16(MGM_W14,SE,MGM_W13);
   not MGM_G17(MGM_W15,SI);
   and MGM_G18(ENABLE_NOT_D_AND_NOT_RD_AND_SE_AND_NOT_SI,MGM_W15,MGM_W14);
   not MGM_G19(MGM_W16,D);
   not MGM_G20(MGM_W17,RD);
   and MGM_G21(MGM_W18,MGM_W17,MGM_W16);
   and MGM_G22(MGM_W19,SE,MGM_W18);
   and MGM_G23(ENABLE_NOT_D_AND_NOT_RD_AND_SE_AND_SI,SI,MGM_W19);
   not MGM_G24(MGM_W20,D);
   and MGM_G25(MGM_W21,RD,MGM_W20);
   not MGM_G26(MGM_W22,SE);
   and MGM_G27(MGM_W23,MGM_W22,MGM_W21);
   not MGM_G28(MGM_W24,SI);
   and MGM_G29(ENABLE_NOT_D_AND_RD_AND_NOT_SE_AND_NOT_SI,MGM_W24,MGM_W23);
   not MGM_G30(MGM_W25,D);
   and MGM_G31(MGM_W26,RD,MGM_W25);
   not MGM_G32(MGM_W27,SE);
   and MGM_G33(MGM_W28,MGM_W27,MGM_W26);
   and MGM_G34(ENABLE_NOT_D_AND_RD_AND_NOT_SE_AND_SI,SI,MGM_W28);
   not MGM_G35(MGM_W29,D);
   and MGM_G36(MGM_W30,RD,MGM_W29);
   and MGM_G37(MGM_W31,SE,MGM_W30);
   not MGM_G38(MGM_W32,SI);
   and MGM_G39(ENABLE_NOT_D_AND_RD_AND_SE_AND_NOT_SI,MGM_W32,MGM_W31);
   not MGM_G40(MGM_W33,D);
   and MGM_G41(MGM_W34,RD,MGM_W33);
   and MGM_G42(MGM_W35,SE,MGM_W34);
   and MGM_G43(ENABLE_NOT_D_AND_RD_AND_SE_AND_SI,SI,MGM_W35);
   not MGM_G44(MGM_W36,RD);
   and MGM_G45(MGM_W37,MGM_W36,D);
   not MGM_G46(MGM_W38,SE);
   and MGM_G47(MGM_W39,MGM_W38,MGM_W37);
   not MGM_G48(MGM_W40,SI);
   and MGM_G49(ENABLE_D_AND_NOT_RD_AND_NOT_SE_AND_NOT_SI,MGM_W40,MGM_W39);
   not MGM_G50(MGM_W41,RD);
   and MGM_G51(MGM_W42,MGM_W41,D);
   not MGM_G52(MGM_W43,SE);
   and MGM_G53(MGM_W44,MGM_W43,MGM_W42);
   and MGM_G54(ENABLE_D_AND_NOT_RD_AND_NOT_SE_AND_SI,SI,MGM_W44);
   not MGM_G55(MGM_W45,RD);
   and MGM_G56(MGM_W46,MGM_W45,D);
   and MGM_G57(MGM_W47,SE,MGM_W46);
   not MGM_G58(MGM_W48,SI);
   and MGM_G59(ENABLE_D_AND_NOT_RD_AND_SE_AND_NOT_SI,MGM_W48,MGM_W47);
   not MGM_G60(MGM_W49,RD);
   and MGM_G61(MGM_W50,MGM_W49,D);
   and MGM_G62(MGM_W51,SE,MGM_W50);
   and MGM_G63(ENABLE_D_AND_NOT_RD_AND_SE_AND_SI,SI,MGM_W51);
   and MGM_G64(MGM_W52,RD,D);
   not MGM_G65(MGM_W53,SE);
   and MGM_G66(MGM_W54,MGM_W53,MGM_W52);
   not MGM_G67(MGM_W55,SI);
   and MGM_G68(ENABLE_D_AND_RD_AND_NOT_SE_AND_NOT_SI,MGM_W55,MGM_W54);
   and MGM_G69(MGM_W56,RD,D);
   not MGM_G70(MGM_W57,SE);
   and MGM_G71(MGM_W58,MGM_W57,MGM_W56);
   and MGM_G72(ENABLE_D_AND_RD_AND_NOT_SE_AND_SI,SI,MGM_W58);
   and MGM_G73(MGM_W59,RD,D);
   and MGM_G74(MGM_W60,SE,MGM_W59);
   not MGM_G75(MGM_W61,SI);
   and MGM_G76(ENABLE_D_AND_RD_AND_SE_AND_NOT_SI,MGM_W61,MGM_W60);
   and MGM_G77(MGM_W62,RD,D);
   and MGM_G78(MGM_W63,SE,MGM_W62);
   and MGM_G79(ENABLE_D_AND_RD_AND_SE_AND_SI,SI,MGM_W63);
   not MGM_G80(MGM_W64,SE);
   and MGM_G81(MGM_W65,MGM_W64,RD);
   not MGM_G82(MGM_W66,SI);
   and MGM_G83(ENABLE_RD_AND_NOT_SE_AND_NOT_SI,MGM_W66,MGM_W65);
   not MGM_G84(MGM_W67,SE);
   and MGM_G85(MGM_W68,MGM_W67,RD);
   and MGM_G86(ENABLE_RD_AND_NOT_SE_AND_SI,SI,MGM_W68);
   not MGM_G87(MGM_W69,SE);
   and MGM_G88(MGM_W70,MGM_W69,D);
   not MGM_G89(MGM_W71,SI);
   and MGM_G90(ENABLE_D_AND_NOT_SE_AND_NOT_SI,MGM_W71,MGM_W70);
   not MGM_G91(MGM_W72,SE);
   and MGM_G92(MGM_W73,MGM_W72,D);
   and MGM_G93(ENABLE_D_AND_NOT_SE_AND_SI,SI,MGM_W73);
   not MGM_G94(MGM_W74,D);
   not MGM_G95(MGM_W75,RD);
   and MGM_G96(MGM_W76,MGM_W75,MGM_W74);
   and MGM_G97(ENABLE_NOT_D_AND_NOT_RD_AND_SI,SI,MGM_W76);
   not MGM_G98(MGM_W77,D);
   and MGM_G99(MGM_W78,RD,MGM_W77);
   and MGM_G100(ENABLE_NOT_D_AND_RD_AND_SI,SI,MGM_W78);
   not MGM_G101(MGM_W79,RD);
   and MGM_G102(MGM_W80,MGM_W79,D);
   and MGM_G103(ENABLE_D_AND_NOT_RD_AND_SI,SI,MGM_W80);
   and MGM_G104(MGM_W81,RD,D);
   not MGM_G105(MGM_W82,SI);
   and MGM_G106(ENABLE_D_AND_RD_AND_NOT_SI,MGM_W82,MGM_W81);
   not MGM_G107(MGM_W83,D);
   not MGM_G108(MGM_W84,RD);
   and MGM_G109(MGM_W85,MGM_W84,MGM_W83);
   and MGM_G110(ENABLE_NOT_D_AND_NOT_RD_AND_SE,SE,MGM_W85);
   not MGM_G111(MGM_W86,D);
   and MGM_G112(MGM_W87,RD,MGM_W86);
   and MGM_G113(ENABLE_NOT_D_AND_RD_AND_SE,SE,MGM_W87);
   not MGM_G114(MGM_W88,RD);
   and MGM_G115(MGM_W89,MGM_W88,D);
   and MGM_G116(ENABLE_D_AND_NOT_RD_AND_SE,SE,MGM_W89);
   and MGM_G117(MGM_W90,RD,D);
   and MGM_G118(ENABLE_D_AND_RD_AND_SE,SE,MGM_W90);
   // spec_gates_end
   // specify_block_begin
   specify

      if(D===1'b0 && RD===1'b0 && SE===1'b1 && SI===1'b0)
      // seq arc CK --> Q
      (posedge CK => (Q : D))  = (1.0,1.0);
      
      if(D===1'b0 && RD===1'b1 && SE===1'b1 && SI===1'b0)
      // seq arc CK --> Q
      (posedge CK => (Q : D))  = (1.0,1.0);
      
      if(D===1'b1 && RD===1'b0 && SE===1'b0 && SI===1'b0)
      // seq arc CK --> Q
      (posedge CK => (Q : D))  = (1.0,1.0);
      
      if(D===1'b1 && RD===1'b0 && SE===1'b1 && SI===1'b0)
      // seq arc CK --> Q
      (posedge CK => (Q : D))  = (1.0,1.0);
      
      if(D===1'b0 && RD===1'b0 && SI===1'b1)
      // seq arc CK --> Q
      (posedge CK => (Q : SE))  = (1.0,1.0);
      
      if(D===1'b0 && RD===1'b1 && SI===1'b1)
      // seq arc CK --> Q
      (posedge CK => (Q : SE))  = (1.0,1.0);
      
      if(D===1'b1 && RD===1'b0 && SI===1'b1)
      // seq arc CK --> Q
      (posedge CK => (Q : SE))  = (1.0,1.0);
      
      if(D===1'b1 && RD===1'b1 && SE===1'b0 && SI===1'b1 || D===1'b0 && RD===1'b0 && SE===1'b0 && SI===1'b0)
      // seq arc CK --> Q
      (posedge CK => (Q : D))  = (1.0,1.0);
      
      if(D===1'b1 && RD===1'b1 && SE===1'b1)
      // seq arc CK --> Q
      (posedge CK => (Q : SI))  = (1.0,1.0);
      
      if(RD===1'b1 && SE===1'b0 && SI===1'b0)
      // seq arc CK --> Q
      (posedge CK => (Q : D))  = (1.0,1.0);
      
      ifnone
      // seq arc CK --> Q
      (posedge CK => (Q : D))  = (1.0,1.0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_NOT_RD_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_NOT_RD_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_NOT_RD_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_NOT_RD_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_NOT_RD_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_NOT_RD_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_NOT_RD_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_NOT_RD_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_RD_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_RD_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_RD_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_RD_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_RD_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_RD_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_RD_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_RD_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_NOT_RD_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_NOT_RD_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_NOT_RD_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_NOT_RD_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_NOT_RD_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_NOT_RD_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_NOT_RD_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_NOT_RD_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_RD_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_RD_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_RD_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_RD_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_RD_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_RD_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_RD_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_RD_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      // hold D-HL CK-LH
      $hold(posedge CK &&& (ENABLE_RD_AND_NOT_SE_AND_NOT_SI === 1'b1),
      negedge D &&& (ENABLE_RD_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold D-LH CK-LH
      $hold(posedge CK &&& (ENABLE_RD_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge D &&& (ENABLE_RD_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup D-HL CK-LH
      $setup(negedge D &&& (ENABLE_RD_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_RD_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup D-LH CK-LH
      $setup(posedge D &&& (ENABLE_RD_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_RD_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold D-HL CK-LH
      $hold(posedge CK &&& (ENABLE_RD_AND_NOT_SE_AND_SI === 1'b1),
      negedge D &&& (ENABLE_RD_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // hold D-LH CK-LH
      $hold(posedge CK &&& (ENABLE_RD_AND_NOT_SE_AND_SI === 1'b1),
      posedge D &&& (ENABLE_RD_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // setup D-HL CK-LH
      $setup(negedge D &&& (ENABLE_RD_AND_NOT_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_RD_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // setup D-LH CK-LH
      $setup(posedge D &&& (ENABLE_RD_AND_NOT_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_RD_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // hold RD-HL CK-LH
      $hold(posedge CK &&& (ENABLE_D_AND_NOT_SE_AND_NOT_SI === 1'b1),
      negedge RD &&& (ENABLE_D_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold RD-LH CK-LH
      $hold(posedge CK &&& (ENABLE_D_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge RD &&& (ENABLE_D_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup RD-HL CK-LH
      $setup(negedge RD &&& (ENABLE_D_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_D_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup RD-LH CK-LH
      $setup(posedge RD &&& (ENABLE_D_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_D_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold RD-HL CK-LH
      $hold(posedge CK &&& (ENABLE_D_AND_NOT_SE_AND_SI === 1'b1),
      negedge RD &&& (ENABLE_D_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // hold RD-LH CK-LH
      $hold(posedge CK &&& (ENABLE_D_AND_NOT_SE_AND_SI === 1'b1),
      posedge RD &&& (ENABLE_D_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // setup RD-HL CK-LH
      $setup(negedge RD &&& (ENABLE_D_AND_NOT_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_D_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // setup RD-LH CK-LH
      $setup(posedge RD &&& (ENABLE_D_AND_NOT_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_D_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // hold SE-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D_AND_NOT_RD_AND_SI === 1'b1),
      negedge SE &&& (ENABLE_NOT_D_AND_NOT_RD_AND_SI === 1'b1),1.0);
      
      // hold SE-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D_AND_NOT_RD_AND_SI === 1'b1),
      posedge SE &&& (ENABLE_NOT_D_AND_NOT_RD_AND_SI === 1'b1),1.0);
      
      // setup SE-HL CK-LH
      $setup(negedge SE &&& (ENABLE_NOT_D_AND_NOT_RD_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_NOT_RD_AND_SI === 1'b1),1.0);
      
      // setup SE-LH CK-LH
      $setup(posedge SE &&& (ENABLE_NOT_D_AND_NOT_RD_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_NOT_RD_AND_SI === 1'b1),1.0);
      
      // hold SE-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D_AND_RD_AND_SI === 1'b1),
      negedge SE &&& (ENABLE_NOT_D_AND_RD_AND_SI === 1'b1),1.0);
      
      // hold SE-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D_AND_RD_AND_SI === 1'b1),
      posedge SE &&& (ENABLE_NOT_D_AND_RD_AND_SI === 1'b1),1.0);
      
      // setup SE-HL CK-LH
      $setup(negedge SE &&& (ENABLE_NOT_D_AND_RD_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_RD_AND_SI === 1'b1),1.0);
      
      // setup SE-LH CK-LH
      $setup(posedge SE &&& (ENABLE_NOT_D_AND_RD_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_RD_AND_SI === 1'b1),1.0);
      
      // hold SE-HL CK-LH
      $hold(posedge CK &&& (ENABLE_D_AND_NOT_RD_AND_SI === 1'b1),
      negedge SE &&& (ENABLE_D_AND_NOT_RD_AND_SI === 1'b1),1.0);
      
      // hold SE-LH CK-LH
      $hold(posedge CK &&& (ENABLE_D_AND_NOT_RD_AND_SI === 1'b1),
      posedge SE &&& (ENABLE_D_AND_NOT_RD_AND_SI === 1'b1),1.0);
      
      // setup SE-HL CK-LH
      $setup(negedge SE &&& (ENABLE_D_AND_NOT_RD_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_D_AND_NOT_RD_AND_SI === 1'b1),1.0);
      
      // setup SE-LH CK-LH
      $setup(posedge SE &&& (ENABLE_D_AND_NOT_RD_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_D_AND_NOT_RD_AND_SI === 1'b1),1.0);
      
      // hold SE-HL CK-LH
      $hold(posedge CK &&& (ENABLE_D_AND_RD_AND_NOT_SI === 1'b1),
      negedge SE &&& (ENABLE_D_AND_RD_AND_NOT_SI === 1'b1),1.0);
      
      // hold SE-LH CK-LH
      $hold(posedge CK &&& (ENABLE_D_AND_RD_AND_NOT_SI === 1'b1),
      posedge SE &&& (ENABLE_D_AND_RD_AND_NOT_SI === 1'b1),1.0);
      
      // setup SE-HL CK-LH
      $setup(negedge SE &&& (ENABLE_D_AND_RD_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_D_AND_RD_AND_NOT_SI === 1'b1),1.0);
      
      // setup SE-LH CK-LH
      $setup(posedge SE &&& (ENABLE_D_AND_RD_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_D_AND_RD_AND_NOT_SI === 1'b1),1.0);
      
      // hold SI-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D_AND_NOT_RD_AND_SE === 1'b1),
      negedge SI &&& (ENABLE_NOT_D_AND_NOT_RD_AND_SE === 1'b1),1.0);
      
      // hold SI-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D_AND_NOT_RD_AND_SE === 1'b1),
      posedge SI &&& (ENABLE_NOT_D_AND_NOT_RD_AND_SE === 1'b1),1.0);
      
      // setup SI-HL CK-LH
      $setup(negedge SI &&& (ENABLE_NOT_D_AND_NOT_RD_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_NOT_RD_AND_SE === 1'b1),1.0);
      
      // setup SI-LH CK-LH
      $setup(posedge SI &&& (ENABLE_NOT_D_AND_NOT_RD_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_NOT_RD_AND_SE === 1'b1),1.0);
      
      // hold SI-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D_AND_RD_AND_SE === 1'b1),
      negedge SI &&& (ENABLE_NOT_D_AND_RD_AND_SE === 1'b1),1.0);
      
      // hold SI-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D_AND_RD_AND_SE === 1'b1),
      posedge SI &&& (ENABLE_NOT_D_AND_RD_AND_SE === 1'b1),1.0);
      
      // setup SI-HL CK-LH
      $setup(negedge SI &&& (ENABLE_NOT_D_AND_RD_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_RD_AND_SE === 1'b1),1.0);
      
      // setup SI-LH CK-LH
      $setup(posedge SI &&& (ENABLE_NOT_D_AND_RD_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_RD_AND_SE === 1'b1),1.0);
      
      // hold SI-HL CK-LH
      $hold(posedge CK &&& (ENABLE_D_AND_NOT_RD_AND_SE === 1'b1),
      negedge SI &&& (ENABLE_D_AND_NOT_RD_AND_SE === 1'b1),1.0);
      
      // hold SI-LH CK-LH
      $hold(posedge CK &&& (ENABLE_D_AND_NOT_RD_AND_SE === 1'b1),
      posedge SI &&& (ENABLE_D_AND_NOT_RD_AND_SE === 1'b1),1.0);
      
      // setup SI-HL CK-LH
      $setup(negedge SI &&& (ENABLE_D_AND_NOT_RD_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_D_AND_NOT_RD_AND_SE === 1'b1),1.0);
      
      // setup SI-LH CK-LH
      $setup(posedge SI &&& (ENABLE_D_AND_NOT_RD_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_D_AND_NOT_RD_AND_SE === 1'b1),1.0);
      
      // hold SI-HL CK-LH
      $hold(posedge CK &&& (ENABLE_D_AND_RD_AND_SE === 1'b1),
      negedge SI &&& (ENABLE_D_AND_RD_AND_SE === 1'b1),1.0);
      
      // hold SI-LH CK-LH
      $hold(posedge CK &&& (ENABLE_D_AND_RD_AND_SE === 1'b1),
      posedge SI &&& (ENABLE_D_AND_RD_AND_SE === 1'b1),1.0);
      
      // setup SI-HL CK-LH
      $setup(negedge SI &&& (ENABLE_D_AND_RD_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_D_AND_RD_AND_SE === 1'b1),1.0);
      
      // setup SI-LH CK-LH
      $setup(posedge SI &&& (ENABLE_D_AND_RD_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_D_AND_RD_AND_SE === 1'b1),1.0);
      
      // mpw CK_lh 
      $width(posedge CK,1.0,0);
      
      // mpw CK_hl 
      $width(negedge CK,1.0,0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_FSDPSYNRBQ_V3_4( Q, CK, D, SI, SE, RD );
input CK, D, RD, SE, SI;
output Q;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_FSDPSYNRBQ_V3_4_func SAEDRVT14_FSDPSYNRBQ_V3_4_behav_inst(.Q(Q),.CK(CK),.D(D),.SI(SI),.SE(SE),.RD(RD));
`else
   SAEDRVT14_FSDPSYNRBQ_V3_4_func SAEDRVT14_FSDPSYNRBQ_V3_4_inst(.Q(Q),.CK(CK),.D(D),.SI(SI),.SE(SE),.RD(RD));
   // spec_gates_begin
   not MGM_G0(MGM_W0,D);
   not MGM_G1(MGM_W1,RD);
   and MGM_G2(MGM_W2,MGM_W1,MGM_W0);
   not MGM_G3(MGM_W3,SE);
   and MGM_G4(MGM_W4,MGM_W3,MGM_W2);
   not MGM_G5(MGM_W5,SI);
   and MGM_G6(ENABLE_NOT_D_AND_NOT_RD_AND_NOT_SE_AND_NOT_SI,MGM_W5,MGM_W4);
   not MGM_G7(MGM_W6,D);
   not MGM_G8(MGM_W7,RD);
   and MGM_G9(MGM_W8,MGM_W7,MGM_W6);
   not MGM_G10(MGM_W9,SE);
   and MGM_G11(MGM_W10,MGM_W9,MGM_W8);
   and MGM_G12(ENABLE_NOT_D_AND_NOT_RD_AND_NOT_SE_AND_SI,SI,MGM_W10);
   not MGM_G13(MGM_W11,D);
   not MGM_G14(MGM_W12,RD);
   and MGM_G15(MGM_W13,MGM_W12,MGM_W11);
   and MGM_G16(MGM_W14,SE,MGM_W13);
   not MGM_G17(MGM_W15,SI);
   and MGM_G18(ENABLE_NOT_D_AND_NOT_RD_AND_SE_AND_NOT_SI,MGM_W15,MGM_W14);
   not MGM_G19(MGM_W16,D);
   not MGM_G20(MGM_W17,RD);
   and MGM_G21(MGM_W18,MGM_W17,MGM_W16);
   and MGM_G22(MGM_W19,SE,MGM_W18);
   and MGM_G23(ENABLE_NOT_D_AND_NOT_RD_AND_SE_AND_SI,SI,MGM_W19);
   not MGM_G24(MGM_W20,D);
   and MGM_G25(MGM_W21,RD,MGM_W20);
   not MGM_G26(MGM_W22,SE);
   and MGM_G27(MGM_W23,MGM_W22,MGM_W21);
   not MGM_G28(MGM_W24,SI);
   and MGM_G29(ENABLE_NOT_D_AND_RD_AND_NOT_SE_AND_NOT_SI,MGM_W24,MGM_W23);
   not MGM_G30(MGM_W25,D);
   and MGM_G31(MGM_W26,RD,MGM_W25);
   not MGM_G32(MGM_W27,SE);
   and MGM_G33(MGM_W28,MGM_W27,MGM_W26);
   and MGM_G34(ENABLE_NOT_D_AND_RD_AND_NOT_SE_AND_SI,SI,MGM_W28);
   not MGM_G35(MGM_W29,D);
   and MGM_G36(MGM_W30,RD,MGM_W29);
   and MGM_G37(MGM_W31,SE,MGM_W30);
   not MGM_G38(MGM_W32,SI);
   and MGM_G39(ENABLE_NOT_D_AND_RD_AND_SE_AND_NOT_SI,MGM_W32,MGM_W31);
   not MGM_G40(MGM_W33,D);
   and MGM_G41(MGM_W34,RD,MGM_W33);
   and MGM_G42(MGM_W35,SE,MGM_W34);
   and MGM_G43(ENABLE_NOT_D_AND_RD_AND_SE_AND_SI,SI,MGM_W35);
   not MGM_G44(MGM_W36,RD);
   and MGM_G45(MGM_W37,MGM_W36,D);
   not MGM_G46(MGM_W38,SE);
   and MGM_G47(MGM_W39,MGM_W38,MGM_W37);
   not MGM_G48(MGM_W40,SI);
   and MGM_G49(ENABLE_D_AND_NOT_RD_AND_NOT_SE_AND_NOT_SI,MGM_W40,MGM_W39);
   not MGM_G50(MGM_W41,RD);
   and MGM_G51(MGM_W42,MGM_W41,D);
   not MGM_G52(MGM_W43,SE);
   and MGM_G53(MGM_W44,MGM_W43,MGM_W42);
   and MGM_G54(ENABLE_D_AND_NOT_RD_AND_NOT_SE_AND_SI,SI,MGM_W44);
   not MGM_G55(MGM_W45,RD);
   and MGM_G56(MGM_W46,MGM_W45,D);
   and MGM_G57(MGM_W47,SE,MGM_W46);
   not MGM_G58(MGM_W48,SI);
   and MGM_G59(ENABLE_D_AND_NOT_RD_AND_SE_AND_NOT_SI,MGM_W48,MGM_W47);
   not MGM_G60(MGM_W49,RD);
   and MGM_G61(MGM_W50,MGM_W49,D);
   and MGM_G62(MGM_W51,SE,MGM_W50);
   and MGM_G63(ENABLE_D_AND_NOT_RD_AND_SE_AND_SI,SI,MGM_W51);
   and MGM_G64(MGM_W52,RD,D);
   not MGM_G65(MGM_W53,SE);
   and MGM_G66(MGM_W54,MGM_W53,MGM_W52);
   not MGM_G67(MGM_W55,SI);
   and MGM_G68(ENABLE_D_AND_RD_AND_NOT_SE_AND_NOT_SI,MGM_W55,MGM_W54);
   and MGM_G69(MGM_W56,RD,D);
   not MGM_G70(MGM_W57,SE);
   and MGM_G71(MGM_W58,MGM_W57,MGM_W56);
   and MGM_G72(ENABLE_D_AND_RD_AND_NOT_SE_AND_SI,SI,MGM_W58);
   and MGM_G73(MGM_W59,RD,D);
   and MGM_G74(MGM_W60,SE,MGM_W59);
   not MGM_G75(MGM_W61,SI);
   and MGM_G76(ENABLE_D_AND_RD_AND_SE_AND_NOT_SI,MGM_W61,MGM_W60);
   and MGM_G77(MGM_W62,RD,D);
   and MGM_G78(MGM_W63,SE,MGM_W62);
   and MGM_G79(ENABLE_D_AND_RD_AND_SE_AND_SI,SI,MGM_W63);
   not MGM_G80(MGM_W64,SE);
   and MGM_G81(MGM_W65,MGM_W64,RD);
   not MGM_G82(MGM_W66,SI);
   and MGM_G83(ENABLE_RD_AND_NOT_SE_AND_NOT_SI,MGM_W66,MGM_W65);
   not MGM_G84(MGM_W67,SE);
   and MGM_G85(MGM_W68,MGM_W67,RD);
   and MGM_G86(ENABLE_RD_AND_NOT_SE_AND_SI,SI,MGM_W68);
   not MGM_G87(MGM_W69,SE);
   and MGM_G88(MGM_W70,MGM_W69,D);
   not MGM_G89(MGM_W71,SI);
   and MGM_G90(ENABLE_D_AND_NOT_SE_AND_NOT_SI,MGM_W71,MGM_W70);
   not MGM_G91(MGM_W72,SE);
   and MGM_G92(MGM_W73,MGM_W72,D);
   and MGM_G93(ENABLE_D_AND_NOT_SE_AND_SI,SI,MGM_W73);
   not MGM_G94(MGM_W74,D);
   not MGM_G95(MGM_W75,RD);
   and MGM_G96(MGM_W76,MGM_W75,MGM_W74);
   and MGM_G97(ENABLE_NOT_D_AND_NOT_RD_AND_SI,SI,MGM_W76);
   not MGM_G98(MGM_W77,D);
   and MGM_G99(MGM_W78,RD,MGM_W77);
   and MGM_G100(ENABLE_NOT_D_AND_RD_AND_SI,SI,MGM_W78);
   not MGM_G101(MGM_W79,RD);
   and MGM_G102(MGM_W80,MGM_W79,D);
   and MGM_G103(ENABLE_D_AND_NOT_RD_AND_SI,SI,MGM_W80);
   and MGM_G104(MGM_W81,RD,D);
   not MGM_G105(MGM_W82,SI);
   and MGM_G106(ENABLE_D_AND_RD_AND_NOT_SI,MGM_W82,MGM_W81);
   not MGM_G107(MGM_W83,D);
   not MGM_G108(MGM_W84,RD);
   and MGM_G109(MGM_W85,MGM_W84,MGM_W83);
   and MGM_G110(ENABLE_NOT_D_AND_NOT_RD_AND_SE,SE,MGM_W85);
   not MGM_G111(MGM_W86,D);
   and MGM_G112(MGM_W87,RD,MGM_W86);
   and MGM_G113(ENABLE_NOT_D_AND_RD_AND_SE,SE,MGM_W87);
   not MGM_G114(MGM_W88,RD);
   and MGM_G115(MGM_W89,MGM_W88,D);
   and MGM_G116(ENABLE_D_AND_NOT_RD_AND_SE,SE,MGM_W89);
   and MGM_G117(MGM_W90,RD,D);
   and MGM_G118(ENABLE_D_AND_RD_AND_SE,SE,MGM_W90);
   // spec_gates_end
   // specify_block_begin
   specify

      if(D===1'b0 && RD===1'b0 && SE===1'b1 && SI===1'b0)
      // seq arc CK --> Q
      (posedge CK => (Q : D))  = (1.0,1.0);
      
      if(D===1'b0 && RD===1'b1 && SE===1'b1 && SI===1'b0)
      // seq arc CK --> Q
      (posedge CK => (Q : D))  = (1.0,1.0);
      
      if(D===1'b1 && RD===1'b0 && SE===1'b0 && SI===1'b0)
      // seq arc CK --> Q
      (posedge CK => (Q : D))  = (1.0,1.0);
      
      if(D===1'b1 && RD===1'b0 && SE===1'b1 && SI===1'b0)
      // seq arc CK --> Q
      (posedge CK => (Q : D))  = (1.0,1.0);
      
      if(D===1'b0 && RD===1'b0 && SI===1'b1)
      // seq arc CK --> Q
      (posedge CK => (Q : SE))  = (1.0,1.0);
      
      if(D===1'b0 && RD===1'b1 && SI===1'b1)
      // seq arc CK --> Q
      (posedge CK => (Q : SE))  = (1.0,1.0);
      
      if(D===1'b1 && RD===1'b0 && SI===1'b1)
      // seq arc CK --> Q
      (posedge CK => (Q : SE))  = (1.0,1.0);
      
      if(D===1'b1 && RD===1'b1 && SE===1'b0 && SI===1'b1 || D===1'b0 && RD===1'b0 && SE===1'b0 && SI===1'b0)
      // seq arc CK --> Q
      (posedge CK => (Q : D))  = (1.0,1.0);
      
      if(D===1'b1 && RD===1'b1 && SE===1'b1)
      // seq arc CK --> Q
      (posedge CK => (Q : SI))  = (1.0,1.0);
      
      if(RD===1'b1 && SE===1'b0 && SI===1'b0)
      // seq arc CK --> Q
      (posedge CK => (Q : D))  = (1.0,1.0);
      
      ifnone
      // seq arc CK --> Q
      (posedge CK => (Q : D))  = (1.0,1.0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_NOT_RD_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_NOT_RD_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_NOT_RD_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_NOT_RD_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_NOT_RD_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_NOT_RD_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_NOT_RD_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_NOT_RD_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_RD_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_RD_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_RD_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_RD_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_RD_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_RD_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_RD_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_RD_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_NOT_RD_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_NOT_RD_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_NOT_RD_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_NOT_RD_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_NOT_RD_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_NOT_RD_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_NOT_RD_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_NOT_RD_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_RD_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_RD_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_RD_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_RD_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_RD_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_RD_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_RD_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_RD_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      // hold D-HL CK-LH
      $hold(posedge CK &&& (ENABLE_RD_AND_NOT_SE_AND_NOT_SI === 1'b1),
      negedge D &&& (ENABLE_RD_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold D-LH CK-LH
      $hold(posedge CK &&& (ENABLE_RD_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge D &&& (ENABLE_RD_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup D-HL CK-LH
      $setup(negedge D &&& (ENABLE_RD_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_RD_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup D-LH CK-LH
      $setup(posedge D &&& (ENABLE_RD_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_RD_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold D-HL CK-LH
      $hold(posedge CK &&& (ENABLE_RD_AND_NOT_SE_AND_SI === 1'b1),
      negedge D &&& (ENABLE_RD_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // hold D-LH CK-LH
      $hold(posedge CK &&& (ENABLE_RD_AND_NOT_SE_AND_SI === 1'b1),
      posedge D &&& (ENABLE_RD_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // setup D-HL CK-LH
      $setup(negedge D &&& (ENABLE_RD_AND_NOT_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_RD_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // setup D-LH CK-LH
      $setup(posedge D &&& (ENABLE_RD_AND_NOT_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_RD_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // hold RD-HL CK-LH
      $hold(posedge CK &&& (ENABLE_D_AND_NOT_SE_AND_NOT_SI === 1'b1),
      negedge RD &&& (ENABLE_D_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold RD-LH CK-LH
      $hold(posedge CK &&& (ENABLE_D_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge RD &&& (ENABLE_D_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup RD-HL CK-LH
      $setup(negedge RD &&& (ENABLE_D_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_D_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup RD-LH CK-LH
      $setup(posedge RD &&& (ENABLE_D_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_D_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold RD-HL CK-LH
      $hold(posedge CK &&& (ENABLE_D_AND_NOT_SE_AND_SI === 1'b1),
      negedge RD &&& (ENABLE_D_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // hold RD-LH CK-LH
      $hold(posedge CK &&& (ENABLE_D_AND_NOT_SE_AND_SI === 1'b1),
      posedge RD &&& (ENABLE_D_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // setup RD-HL CK-LH
      $setup(negedge RD &&& (ENABLE_D_AND_NOT_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_D_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // setup RD-LH CK-LH
      $setup(posedge RD &&& (ENABLE_D_AND_NOT_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_D_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // hold SE-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D_AND_NOT_RD_AND_SI === 1'b1),
      negedge SE &&& (ENABLE_NOT_D_AND_NOT_RD_AND_SI === 1'b1),1.0);
      
      // hold SE-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D_AND_NOT_RD_AND_SI === 1'b1),
      posedge SE &&& (ENABLE_NOT_D_AND_NOT_RD_AND_SI === 1'b1),1.0);
      
      // setup SE-HL CK-LH
      $setup(negedge SE &&& (ENABLE_NOT_D_AND_NOT_RD_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_NOT_RD_AND_SI === 1'b1),1.0);
      
      // setup SE-LH CK-LH
      $setup(posedge SE &&& (ENABLE_NOT_D_AND_NOT_RD_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_NOT_RD_AND_SI === 1'b1),1.0);
      
      // hold SE-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D_AND_RD_AND_SI === 1'b1),
      negedge SE &&& (ENABLE_NOT_D_AND_RD_AND_SI === 1'b1),1.0);
      
      // hold SE-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D_AND_RD_AND_SI === 1'b1),
      posedge SE &&& (ENABLE_NOT_D_AND_RD_AND_SI === 1'b1),1.0);
      
      // setup SE-HL CK-LH
      $setup(negedge SE &&& (ENABLE_NOT_D_AND_RD_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_RD_AND_SI === 1'b1),1.0);
      
      // setup SE-LH CK-LH
      $setup(posedge SE &&& (ENABLE_NOT_D_AND_RD_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_RD_AND_SI === 1'b1),1.0);
      
      // hold SE-HL CK-LH
      $hold(posedge CK &&& (ENABLE_D_AND_NOT_RD_AND_SI === 1'b1),
      negedge SE &&& (ENABLE_D_AND_NOT_RD_AND_SI === 1'b1),1.0);
      
      // hold SE-LH CK-LH
      $hold(posedge CK &&& (ENABLE_D_AND_NOT_RD_AND_SI === 1'b1),
      posedge SE &&& (ENABLE_D_AND_NOT_RD_AND_SI === 1'b1),1.0);
      
      // setup SE-HL CK-LH
      $setup(negedge SE &&& (ENABLE_D_AND_NOT_RD_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_D_AND_NOT_RD_AND_SI === 1'b1),1.0);
      
      // setup SE-LH CK-LH
      $setup(posedge SE &&& (ENABLE_D_AND_NOT_RD_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_D_AND_NOT_RD_AND_SI === 1'b1),1.0);
      
      // hold SE-HL CK-LH
      $hold(posedge CK &&& (ENABLE_D_AND_RD_AND_NOT_SI === 1'b1),
      negedge SE &&& (ENABLE_D_AND_RD_AND_NOT_SI === 1'b1),1.0);
      
      // hold SE-LH CK-LH
      $hold(posedge CK &&& (ENABLE_D_AND_RD_AND_NOT_SI === 1'b1),
      posedge SE &&& (ENABLE_D_AND_RD_AND_NOT_SI === 1'b1),1.0);
      
      // setup SE-HL CK-LH
      $setup(negedge SE &&& (ENABLE_D_AND_RD_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_D_AND_RD_AND_NOT_SI === 1'b1),1.0);
      
      // setup SE-LH CK-LH
      $setup(posedge SE &&& (ENABLE_D_AND_RD_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_D_AND_RD_AND_NOT_SI === 1'b1),1.0);
      
      // hold SI-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D_AND_NOT_RD_AND_SE === 1'b1),
      negedge SI &&& (ENABLE_NOT_D_AND_NOT_RD_AND_SE === 1'b1),1.0);
      
      // hold SI-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D_AND_NOT_RD_AND_SE === 1'b1),
      posedge SI &&& (ENABLE_NOT_D_AND_NOT_RD_AND_SE === 1'b1),1.0);
      
      // setup SI-HL CK-LH
      $setup(negedge SI &&& (ENABLE_NOT_D_AND_NOT_RD_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_NOT_RD_AND_SE === 1'b1),1.0);
      
      // setup SI-LH CK-LH
      $setup(posedge SI &&& (ENABLE_NOT_D_AND_NOT_RD_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_NOT_RD_AND_SE === 1'b1),1.0);
      
      // hold SI-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D_AND_RD_AND_SE === 1'b1),
      negedge SI &&& (ENABLE_NOT_D_AND_RD_AND_SE === 1'b1),1.0);
      
      // hold SI-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D_AND_RD_AND_SE === 1'b1),
      posedge SI &&& (ENABLE_NOT_D_AND_RD_AND_SE === 1'b1),1.0);
      
      // setup SI-HL CK-LH
      $setup(negedge SI &&& (ENABLE_NOT_D_AND_RD_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_RD_AND_SE === 1'b1),1.0);
      
      // setup SI-LH CK-LH
      $setup(posedge SI &&& (ENABLE_NOT_D_AND_RD_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_RD_AND_SE === 1'b1),1.0);
      
      // hold SI-HL CK-LH
      $hold(posedge CK &&& (ENABLE_D_AND_NOT_RD_AND_SE === 1'b1),
      negedge SI &&& (ENABLE_D_AND_NOT_RD_AND_SE === 1'b1),1.0);
      
      // hold SI-LH CK-LH
      $hold(posedge CK &&& (ENABLE_D_AND_NOT_RD_AND_SE === 1'b1),
      posedge SI &&& (ENABLE_D_AND_NOT_RD_AND_SE === 1'b1),1.0);
      
      // setup SI-HL CK-LH
      $setup(negedge SI &&& (ENABLE_D_AND_NOT_RD_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_D_AND_NOT_RD_AND_SE === 1'b1),1.0);
      
      // setup SI-LH CK-LH
      $setup(posedge SI &&& (ENABLE_D_AND_NOT_RD_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_D_AND_NOT_RD_AND_SE === 1'b1),1.0);
      
      // hold SI-HL CK-LH
      $hold(posedge CK &&& (ENABLE_D_AND_RD_AND_SE === 1'b1),
      negedge SI &&& (ENABLE_D_AND_RD_AND_SE === 1'b1),1.0);
      
      // hold SI-LH CK-LH
      $hold(posedge CK &&& (ENABLE_D_AND_RD_AND_SE === 1'b1),
      posedge SI &&& (ENABLE_D_AND_RD_AND_SE === 1'b1),1.0);
      
      // setup SI-HL CK-LH
      $setup(negedge SI &&& (ENABLE_D_AND_RD_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_D_AND_RD_AND_SE === 1'b1),1.0);
      
      // setup SI-LH CK-LH
      $setup(posedge SI &&& (ENABLE_D_AND_RD_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_D_AND_RD_AND_SE === 1'b1),1.0);
      
      // mpw CK_lh 
      $width(posedge CK,1.0,0);
      
      // mpw CK_hl 
      $width(negedge CK,1.0,0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_FSDPSYNSBQ_V2LP_0P5( Q, CK, D, SI, SE, SD );
input CK, D, SD, SE, SI;
output Q;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_FSDPSYNSBQ_V2LP_0P5_func SAEDRVT14_FSDPSYNSBQ_V2LP_0P5_behav_inst(.Q(Q),.CK(CK),.D(D),.SI(SI),.SE(SE),.SD(SD));
`else
   SAEDRVT14_FSDPSYNSBQ_V2LP_0P5_func SAEDRVT14_FSDPSYNSBQ_V2LP_0P5_inst(.Q(Q),.CK(CK),.D(D),.SI(SI),.SE(SE),.SD(SD));
   // spec_gates_begin
   not MGM_G0(MGM_W0,D);
   not MGM_G1(MGM_W1,SD);
   and MGM_G2(MGM_W2,MGM_W1,MGM_W0);
   not MGM_G3(MGM_W3,SE);
   and MGM_G4(MGM_W4,MGM_W3,MGM_W2);
   not MGM_G5(MGM_W5,SI);
   and MGM_G6(ENABLE_NOT_D_AND_NOT_SD_AND_NOT_SE_AND_NOT_SI,MGM_W5,MGM_W4);
   not MGM_G7(MGM_W6,D);
   not MGM_G8(MGM_W7,SD);
   and MGM_G9(MGM_W8,MGM_W7,MGM_W6);
   not MGM_G10(MGM_W9,SE);
   and MGM_G11(MGM_W10,MGM_W9,MGM_W8);
   and MGM_G12(ENABLE_NOT_D_AND_NOT_SD_AND_NOT_SE_AND_SI,SI,MGM_W10);
   not MGM_G13(MGM_W11,D);
   not MGM_G14(MGM_W12,SD);
   and MGM_G15(MGM_W13,MGM_W12,MGM_W11);
   and MGM_G16(MGM_W14,SE,MGM_W13);
   not MGM_G17(MGM_W15,SI);
   and MGM_G18(ENABLE_NOT_D_AND_NOT_SD_AND_SE_AND_NOT_SI,MGM_W15,MGM_W14);
   not MGM_G19(MGM_W16,D);
   not MGM_G20(MGM_W17,SD);
   and MGM_G21(MGM_W18,MGM_W17,MGM_W16);
   and MGM_G22(MGM_W19,SE,MGM_W18);
   and MGM_G23(ENABLE_NOT_D_AND_NOT_SD_AND_SE_AND_SI,SI,MGM_W19);
   not MGM_G24(MGM_W20,D);
   and MGM_G25(MGM_W21,SD,MGM_W20);
   not MGM_G26(MGM_W22,SE);
   and MGM_G27(MGM_W23,MGM_W22,MGM_W21);
   not MGM_G28(MGM_W24,SI);
   and MGM_G29(ENABLE_NOT_D_AND_SD_AND_NOT_SE_AND_NOT_SI,MGM_W24,MGM_W23);
   not MGM_G30(MGM_W25,D);
   and MGM_G31(MGM_W26,SD,MGM_W25);
   not MGM_G32(MGM_W27,SE);
   and MGM_G33(MGM_W28,MGM_W27,MGM_W26);
   and MGM_G34(ENABLE_NOT_D_AND_SD_AND_NOT_SE_AND_SI,SI,MGM_W28);
   not MGM_G35(MGM_W29,D);
   and MGM_G36(MGM_W30,SD,MGM_W29);
   and MGM_G37(MGM_W31,SE,MGM_W30);
   not MGM_G38(MGM_W32,SI);
   and MGM_G39(ENABLE_NOT_D_AND_SD_AND_SE_AND_NOT_SI,MGM_W32,MGM_W31);
   not MGM_G40(MGM_W33,D);
   and MGM_G41(MGM_W34,SD,MGM_W33);
   and MGM_G42(MGM_W35,SE,MGM_W34);
   and MGM_G43(ENABLE_NOT_D_AND_SD_AND_SE_AND_SI,SI,MGM_W35);
   not MGM_G44(MGM_W36,SD);
   and MGM_G45(MGM_W37,MGM_W36,D);
   not MGM_G46(MGM_W38,SE);
   and MGM_G47(MGM_W39,MGM_W38,MGM_W37);
   not MGM_G48(MGM_W40,SI);
   and MGM_G49(ENABLE_D_AND_NOT_SD_AND_NOT_SE_AND_NOT_SI,MGM_W40,MGM_W39);
   not MGM_G50(MGM_W41,SD);
   and MGM_G51(MGM_W42,MGM_W41,D);
   not MGM_G52(MGM_W43,SE);
   and MGM_G53(MGM_W44,MGM_W43,MGM_W42);
   and MGM_G54(ENABLE_D_AND_NOT_SD_AND_NOT_SE_AND_SI,SI,MGM_W44);
   not MGM_G55(MGM_W45,SD);
   and MGM_G56(MGM_W46,MGM_W45,D);
   and MGM_G57(MGM_W47,SE,MGM_W46);
   not MGM_G58(MGM_W48,SI);
   and MGM_G59(ENABLE_D_AND_NOT_SD_AND_SE_AND_NOT_SI,MGM_W48,MGM_W47);
   not MGM_G60(MGM_W49,SD);
   and MGM_G61(MGM_W50,MGM_W49,D);
   and MGM_G62(MGM_W51,SE,MGM_W50);
   and MGM_G63(ENABLE_D_AND_NOT_SD_AND_SE_AND_SI,SI,MGM_W51);
   and MGM_G64(MGM_W52,SD,D);
   not MGM_G65(MGM_W53,SE);
   and MGM_G66(MGM_W54,MGM_W53,MGM_W52);
   not MGM_G67(MGM_W55,SI);
   and MGM_G68(ENABLE_D_AND_SD_AND_NOT_SE_AND_NOT_SI,MGM_W55,MGM_W54);
   and MGM_G69(MGM_W56,SD,D);
   not MGM_G70(MGM_W57,SE);
   and MGM_G71(MGM_W58,MGM_W57,MGM_W56);
   and MGM_G72(ENABLE_D_AND_SD_AND_NOT_SE_AND_SI,SI,MGM_W58);
   and MGM_G73(MGM_W59,SD,D);
   and MGM_G74(MGM_W60,SE,MGM_W59);
   not MGM_G75(MGM_W61,SI);
   and MGM_G76(ENABLE_D_AND_SD_AND_SE_AND_NOT_SI,MGM_W61,MGM_W60);
   and MGM_G77(MGM_W62,SD,D);
   and MGM_G78(MGM_W63,SE,MGM_W62);
   and MGM_G79(ENABLE_D_AND_SD_AND_SE_AND_SI,SI,MGM_W63);
   not MGM_G80(MGM_W64,SE);
   and MGM_G81(MGM_W65,MGM_W64,SD);
   not MGM_G82(MGM_W66,SI);
   and MGM_G83(ENABLE_SD_AND_NOT_SE_AND_NOT_SI,MGM_W66,MGM_W65);
   not MGM_G84(MGM_W67,SE);
   and MGM_G85(MGM_W68,MGM_W67,SD);
   and MGM_G86(ENABLE_SD_AND_NOT_SE_AND_SI,SI,MGM_W68);
   not MGM_G87(MGM_W69,D);
   not MGM_G88(MGM_W70,SE);
   and MGM_G89(MGM_W71,MGM_W70,MGM_W69);
   not MGM_G90(MGM_W72,SI);
   and MGM_G91(ENABLE_NOT_D_AND_NOT_SE_AND_NOT_SI,MGM_W72,MGM_W71);
   not MGM_G92(MGM_W73,D);
   not MGM_G93(MGM_W74,SE);
   and MGM_G94(MGM_W75,MGM_W74,MGM_W73);
   and MGM_G95(ENABLE_NOT_D_AND_NOT_SE_AND_SI,SI,MGM_W75);
   not MGM_G96(MGM_W76,D);
   not MGM_G97(MGM_W77,SD);
   and MGM_G98(MGM_W78,MGM_W77,MGM_W76);
   not MGM_G99(MGM_W79,SI);
   and MGM_G100(ENABLE_NOT_D_AND_NOT_SD_AND_NOT_SI,MGM_W79,MGM_W78);
   not MGM_G101(MGM_W80,D);
   and MGM_G102(MGM_W81,SD,MGM_W80);
   and MGM_G103(ENABLE_NOT_D_AND_SD_AND_SI,SI,MGM_W81);
   not MGM_G104(MGM_W82,SD);
   and MGM_G105(MGM_W83,MGM_W82,D);
   not MGM_G106(MGM_W84,SI);
   and MGM_G107(ENABLE_D_AND_NOT_SD_AND_NOT_SI,MGM_W84,MGM_W83);
   and MGM_G108(MGM_W85,SD,D);
   not MGM_G109(MGM_W86,SI);
   and MGM_G110(ENABLE_D_AND_SD_AND_NOT_SI,MGM_W86,MGM_W85);
   not MGM_G111(MGM_W87,D);
   not MGM_G112(MGM_W88,SD);
   and MGM_G113(MGM_W89,MGM_W88,MGM_W87);
   and MGM_G114(ENABLE_NOT_D_AND_NOT_SD_AND_SE,SE,MGM_W89);
   not MGM_G115(MGM_W90,D);
   and MGM_G116(MGM_W91,SD,MGM_W90);
   and MGM_G117(ENABLE_NOT_D_AND_SD_AND_SE,SE,MGM_W91);
   not MGM_G118(MGM_W92,SD);
   and MGM_G119(MGM_W93,MGM_W92,D);
   and MGM_G120(ENABLE_D_AND_NOT_SD_AND_SE,SE,MGM_W93);
   and MGM_G121(MGM_W94,SD,D);
   and MGM_G122(ENABLE_D_AND_SD_AND_SE,SE,MGM_W94);
   // spec_gates_end
   // specify_block_begin
   specify

      if(D===1'b0 && SD===1'b0 && SE===1'b1 && SI===1'b1)
      // seq arc CK --> Q
      (posedge CK => (Q : D))  = (1.0,1.0);
      
      if(D===1'b1 && SD===1'b0 && SE===1'b0 && SI===1'b1)
      // seq arc CK --> Q
      (posedge CK => (Q : D))  = (1.0,1.0);
      
      if(D===1'b1 && SD===1'b0 && SE===1'b1 && SI===1'b1)
      // seq arc CK --> Q
      (posedge CK => (Q : D))  = (1.0,1.0);
      
      if(D===1'b1 && SD===1'b1 && SE===1'b0 && SI===1'b1)
      // seq arc CK --> Q
      (posedge CK => (Q : D))  = (1.0,1.0);
      
      if(D===1'b0 && SD===1'b0 && SI===1'b0)
      // seq arc CK --> Q
      (posedge CK => (Q : SE))  = (1.0,1.0);
      
      if(D===1'b0 && SE===1'b0 && SI===1'b1)
      // seq arc CK --> Q
      (posedge CK => (Q : SD))  = (1.0,1.0);
      
      if(D===1'b0 && SD===1'b1 && SE===1'b1)
      // seq arc CK --> Q
      (posedge CK => (Q : SI))  = (1.0,1.0);
      
      if(D===1'b1 && SD===1'b0 && SI===1'b0)
      // seq arc CK --> Q
      (posedge CK => (Q : SE))  = (1.0,1.0);
      
      if(D===1'b1 && SD===1'b1 && SE===1'b1)
      // seq arc CK --> Q
      (posedge CK => (Q : SI))  = (1.0,1.0);
      
      if(SD===1'b1 && SE===1'b0 && SI===1'b0)
      // seq arc CK --> Q
      (posedge CK => (Q : D))  = (1.0,1.0);
      
      ifnone
      // seq arc CK --> Q
      (posedge CK => (Q : D))  = (1.0,1.0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_NOT_SD_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_NOT_SD_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_NOT_SD_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_NOT_SD_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_NOT_SD_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_NOT_SD_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_NOT_SD_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_NOT_SD_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_SD_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_SD_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_SD_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_SD_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_SD_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_SD_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_SD_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_SD_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_NOT_SD_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_NOT_SD_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_NOT_SD_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_NOT_SD_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_NOT_SD_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_NOT_SD_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_NOT_SD_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_NOT_SD_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_SD_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_SD_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_SD_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_SD_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_SD_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_SD_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_SD_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_SD_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      // hold D-HL CK-LH
      $hold(posedge CK &&& (ENABLE_SD_AND_NOT_SE_AND_NOT_SI === 1'b1),
      negedge D &&& (ENABLE_SD_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold D-LH CK-LH
      $hold(posedge CK &&& (ENABLE_SD_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge D &&& (ENABLE_SD_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup D-HL CK-LH
      $setup(negedge D &&& (ENABLE_SD_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_SD_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup D-LH CK-LH
      $setup(posedge D &&& (ENABLE_SD_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_SD_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold D-HL CK-LH
      $hold(posedge CK &&& (ENABLE_SD_AND_NOT_SE_AND_SI === 1'b1),
      negedge D &&& (ENABLE_SD_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // hold D-LH CK-LH
      $hold(posedge CK &&& (ENABLE_SD_AND_NOT_SE_AND_SI === 1'b1),
      posedge D &&& (ENABLE_SD_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // setup D-HL CK-LH
      $setup(negedge D &&& (ENABLE_SD_AND_NOT_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_SD_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // setup D-LH CK-LH
      $setup(posedge D &&& (ENABLE_SD_AND_NOT_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_SD_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // hold SD-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D_AND_NOT_SE_AND_NOT_SI === 1'b1),
      negedge SD &&& (ENABLE_NOT_D_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold SD-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge SD &&& (ENABLE_NOT_D_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup SD-HL CK-LH
      $setup(negedge SD &&& (ENABLE_NOT_D_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup SD-LH CK-LH
      $setup(posedge SD &&& (ENABLE_NOT_D_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold SD-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D_AND_NOT_SE_AND_SI === 1'b1),
      negedge SD &&& (ENABLE_NOT_D_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // hold SD-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D_AND_NOT_SE_AND_SI === 1'b1),
      posedge SD &&& (ENABLE_NOT_D_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // setup SD-HL CK-LH
      $setup(negedge SD &&& (ENABLE_NOT_D_AND_NOT_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // setup SD-LH CK-LH
      $setup(posedge SD &&& (ENABLE_NOT_D_AND_NOT_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // hold SE-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D_AND_NOT_SD_AND_NOT_SI === 1'b1),
      negedge SE &&& (ENABLE_NOT_D_AND_NOT_SD_AND_NOT_SI === 1'b1),1.0);
      
      // hold SE-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D_AND_NOT_SD_AND_NOT_SI === 1'b1),
      posedge SE &&& (ENABLE_NOT_D_AND_NOT_SD_AND_NOT_SI === 1'b1),1.0);
      
      // setup SE-HL CK-LH
      $setup(negedge SE &&& (ENABLE_NOT_D_AND_NOT_SD_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_NOT_SD_AND_NOT_SI === 1'b1),1.0);
      
      // setup SE-LH CK-LH
      $setup(posedge SE &&& (ENABLE_NOT_D_AND_NOT_SD_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_NOT_SD_AND_NOT_SI === 1'b1),1.0);
      
      // hold SE-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D_AND_SD_AND_SI === 1'b1),
      negedge SE &&& (ENABLE_NOT_D_AND_SD_AND_SI === 1'b1),1.0);
      
      // hold SE-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D_AND_SD_AND_SI === 1'b1),
      posedge SE &&& (ENABLE_NOT_D_AND_SD_AND_SI === 1'b1),1.0);
      
      // setup SE-HL CK-LH
      $setup(negedge SE &&& (ENABLE_NOT_D_AND_SD_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_SD_AND_SI === 1'b1),1.0);
      
      // setup SE-LH CK-LH
      $setup(posedge SE &&& (ENABLE_NOT_D_AND_SD_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_SD_AND_SI === 1'b1),1.0);
      
      // hold SE-HL CK-LH
      $hold(posedge CK &&& (ENABLE_D_AND_NOT_SD_AND_NOT_SI === 1'b1),
      negedge SE &&& (ENABLE_D_AND_NOT_SD_AND_NOT_SI === 1'b1),1.0);
      
      // hold SE-LH CK-LH
      $hold(posedge CK &&& (ENABLE_D_AND_NOT_SD_AND_NOT_SI === 1'b1),
      posedge SE &&& (ENABLE_D_AND_NOT_SD_AND_NOT_SI === 1'b1),1.0);
      
      // setup SE-HL CK-LH
      $setup(negedge SE &&& (ENABLE_D_AND_NOT_SD_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_D_AND_NOT_SD_AND_NOT_SI === 1'b1),1.0);
      
      // setup SE-LH CK-LH
      $setup(posedge SE &&& (ENABLE_D_AND_NOT_SD_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_D_AND_NOT_SD_AND_NOT_SI === 1'b1),1.0);
      
      // hold SE-HL CK-LH
      $hold(posedge CK &&& (ENABLE_D_AND_SD_AND_NOT_SI === 1'b1),
      negedge SE &&& (ENABLE_D_AND_SD_AND_NOT_SI === 1'b1),1.0);
      
      // hold SE-LH CK-LH
      $hold(posedge CK &&& (ENABLE_D_AND_SD_AND_NOT_SI === 1'b1),
      posedge SE &&& (ENABLE_D_AND_SD_AND_NOT_SI === 1'b1),1.0);
      
      // setup SE-HL CK-LH
      $setup(negedge SE &&& (ENABLE_D_AND_SD_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_D_AND_SD_AND_NOT_SI === 1'b1),1.0);
      
      // setup SE-LH CK-LH
      $setup(posedge SE &&& (ENABLE_D_AND_SD_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_D_AND_SD_AND_NOT_SI === 1'b1),1.0);
      
      // hold SI-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D_AND_NOT_SD_AND_SE === 1'b1),
      negedge SI &&& (ENABLE_NOT_D_AND_NOT_SD_AND_SE === 1'b1),1.0);
      
      // hold SI-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D_AND_NOT_SD_AND_SE === 1'b1),
      posedge SI &&& (ENABLE_NOT_D_AND_NOT_SD_AND_SE === 1'b1),1.0);
      
      // setup SI-HL CK-LH
      $setup(negedge SI &&& (ENABLE_NOT_D_AND_NOT_SD_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_NOT_SD_AND_SE === 1'b1),1.0);
      
      // setup SI-LH CK-LH
      $setup(posedge SI &&& (ENABLE_NOT_D_AND_NOT_SD_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_NOT_SD_AND_SE === 1'b1),1.0);
      
      // hold SI-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D_AND_SD_AND_SE === 1'b1),
      negedge SI &&& (ENABLE_NOT_D_AND_SD_AND_SE === 1'b1),1.0);
      
      // hold SI-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D_AND_SD_AND_SE === 1'b1),
      posedge SI &&& (ENABLE_NOT_D_AND_SD_AND_SE === 1'b1),1.0);
      
      // setup SI-HL CK-LH
      $setup(negedge SI &&& (ENABLE_NOT_D_AND_SD_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_SD_AND_SE === 1'b1),1.0);
      
      // setup SI-LH CK-LH
      $setup(posedge SI &&& (ENABLE_NOT_D_AND_SD_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_SD_AND_SE === 1'b1),1.0);
      
      // hold SI-HL CK-LH
      $hold(posedge CK &&& (ENABLE_D_AND_NOT_SD_AND_SE === 1'b1),
      negedge SI &&& (ENABLE_D_AND_NOT_SD_AND_SE === 1'b1),1.0);
      
      // hold SI-LH CK-LH
      $hold(posedge CK &&& (ENABLE_D_AND_NOT_SD_AND_SE === 1'b1),
      posedge SI &&& (ENABLE_D_AND_NOT_SD_AND_SE === 1'b1),1.0);
      
      // setup SI-HL CK-LH
      $setup(negedge SI &&& (ENABLE_D_AND_NOT_SD_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_D_AND_NOT_SD_AND_SE === 1'b1),1.0);
      
      // setup SI-LH CK-LH
      $setup(posedge SI &&& (ENABLE_D_AND_NOT_SD_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_D_AND_NOT_SD_AND_SE === 1'b1),1.0);
      
      // hold SI-HL CK-LH
      $hold(posedge CK &&& (ENABLE_D_AND_SD_AND_SE === 1'b1),
      negedge SI &&& (ENABLE_D_AND_SD_AND_SE === 1'b1),1.0);
      
      // hold SI-LH CK-LH
      $hold(posedge CK &&& (ENABLE_D_AND_SD_AND_SE === 1'b1),
      posedge SI &&& (ENABLE_D_AND_SD_AND_SE === 1'b1),1.0);
      
      // setup SI-HL CK-LH
      $setup(negedge SI &&& (ENABLE_D_AND_SD_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_D_AND_SD_AND_SE === 1'b1),1.0);
      
      // setup SI-LH CK-LH
      $setup(posedge SI &&& (ENABLE_D_AND_SD_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_D_AND_SD_AND_SE === 1'b1),1.0);
      
      // mpw CK_lh 
      $width(posedge CK,1.0,0);
      
      // mpw CK_hl 
      $width(negedge CK,1.0,0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_FSDPSYNSBQ_V2LP_1( Q, CK, D, SI, SE, SD );
input CK, D, SD, SE, SI;
output Q;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_FSDPSYNSBQ_V2LP_1_func SAEDRVT14_FSDPSYNSBQ_V2LP_1_behav_inst(.Q(Q),.CK(CK),.D(D),.SI(SI),.SE(SE),.SD(SD));
`else
   SAEDRVT14_FSDPSYNSBQ_V2LP_1_func SAEDRVT14_FSDPSYNSBQ_V2LP_1_inst(.Q(Q),.CK(CK),.D(D),.SI(SI),.SE(SE),.SD(SD));
   // spec_gates_begin
   not MGM_G0(MGM_W0,D);
   not MGM_G1(MGM_W1,SD);
   and MGM_G2(MGM_W2,MGM_W1,MGM_W0);
   not MGM_G3(MGM_W3,SE);
   and MGM_G4(MGM_W4,MGM_W3,MGM_W2);
   not MGM_G5(MGM_W5,SI);
   and MGM_G6(ENABLE_NOT_D_AND_NOT_SD_AND_NOT_SE_AND_NOT_SI,MGM_W5,MGM_W4);
   not MGM_G7(MGM_W6,D);
   not MGM_G8(MGM_W7,SD);
   and MGM_G9(MGM_W8,MGM_W7,MGM_W6);
   not MGM_G10(MGM_W9,SE);
   and MGM_G11(MGM_W10,MGM_W9,MGM_W8);
   and MGM_G12(ENABLE_NOT_D_AND_NOT_SD_AND_NOT_SE_AND_SI,SI,MGM_W10);
   not MGM_G13(MGM_W11,D);
   not MGM_G14(MGM_W12,SD);
   and MGM_G15(MGM_W13,MGM_W12,MGM_W11);
   and MGM_G16(MGM_W14,SE,MGM_W13);
   not MGM_G17(MGM_W15,SI);
   and MGM_G18(ENABLE_NOT_D_AND_NOT_SD_AND_SE_AND_NOT_SI,MGM_W15,MGM_W14);
   not MGM_G19(MGM_W16,D);
   not MGM_G20(MGM_W17,SD);
   and MGM_G21(MGM_W18,MGM_W17,MGM_W16);
   and MGM_G22(MGM_W19,SE,MGM_W18);
   and MGM_G23(ENABLE_NOT_D_AND_NOT_SD_AND_SE_AND_SI,SI,MGM_W19);
   not MGM_G24(MGM_W20,D);
   and MGM_G25(MGM_W21,SD,MGM_W20);
   not MGM_G26(MGM_W22,SE);
   and MGM_G27(MGM_W23,MGM_W22,MGM_W21);
   not MGM_G28(MGM_W24,SI);
   and MGM_G29(ENABLE_NOT_D_AND_SD_AND_NOT_SE_AND_NOT_SI,MGM_W24,MGM_W23);
   not MGM_G30(MGM_W25,D);
   and MGM_G31(MGM_W26,SD,MGM_W25);
   not MGM_G32(MGM_W27,SE);
   and MGM_G33(MGM_W28,MGM_W27,MGM_W26);
   and MGM_G34(ENABLE_NOT_D_AND_SD_AND_NOT_SE_AND_SI,SI,MGM_W28);
   not MGM_G35(MGM_W29,D);
   and MGM_G36(MGM_W30,SD,MGM_W29);
   and MGM_G37(MGM_W31,SE,MGM_W30);
   not MGM_G38(MGM_W32,SI);
   and MGM_G39(ENABLE_NOT_D_AND_SD_AND_SE_AND_NOT_SI,MGM_W32,MGM_W31);
   not MGM_G40(MGM_W33,D);
   and MGM_G41(MGM_W34,SD,MGM_W33);
   and MGM_G42(MGM_W35,SE,MGM_W34);
   and MGM_G43(ENABLE_NOT_D_AND_SD_AND_SE_AND_SI,SI,MGM_W35);
   not MGM_G44(MGM_W36,SD);
   and MGM_G45(MGM_W37,MGM_W36,D);
   not MGM_G46(MGM_W38,SE);
   and MGM_G47(MGM_W39,MGM_W38,MGM_W37);
   not MGM_G48(MGM_W40,SI);
   and MGM_G49(ENABLE_D_AND_NOT_SD_AND_NOT_SE_AND_NOT_SI,MGM_W40,MGM_W39);
   not MGM_G50(MGM_W41,SD);
   and MGM_G51(MGM_W42,MGM_W41,D);
   not MGM_G52(MGM_W43,SE);
   and MGM_G53(MGM_W44,MGM_W43,MGM_W42);
   and MGM_G54(ENABLE_D_AND_NOT_SD_AND_NOT_SE_AND_SI,SI,MGM_W44);
   not MGM_G55(MGM_W45,SD);
   and MGM_G56(MGM_W46,MGM_W45,D);
   and MGM_G57(MGM_W47,SE,MGM_W46);
   not MGM_G58(MGM_W48,SI);
   and MGM_G59(ENABLE_D_AND_NOT_SD_AND_SE_AND_NOT_SI,MGM_W48,MGM_W47);
   not MGM_G60(MGM_W49,SD);
   and MGM_G61(MGM_W50,MGM_W49,D);
   and MGM_G62(MGM_W51,SE,MGM_W50);
   and MGM_G63(ENABLE_D_AND_NOT_SD_AND_SE_AND_SI,SI,MGM_W51);
   and MGM_G64(MGM_W52,SD,D);
   not MGM_G65(MGM_W53,SE);
   and MGM_G66(MGM_W54,MGM_W53,MGM_W52);
   not MGM_G67(MGM_W55,SI);
   and MGM_G68(ENABLE_D_AND_SD_AND_NOT_SE_AND_NOT_SI,MGM_W55,MGM_W54);
   and MGM_G69(MGM_W56,SD,D);
   not MGM_G70(MGM_W57,SE);
   and MGM_G71(MGM_W58,MGM_W57,MGM_W56);
   and MGM_G72(ENABLE_D_AND_SD_AND_NOT_SE_AND_SI,SI,MGM_W58);
   and MGM_G73(MGM_W59,SD,D);
   and MGM_G74(MGM_W60,SE,MGM_W59);
   not MGM_G75(MGM_W61,SI);
   and MGM_G76(ENABLE_D_AND_SD_AND_SE_AND_NOT_SI,MGM_W61,MGM_W60);
   and MGM_G77(MGM_W62,SD,D);
   and MGM_G78(MGM_W63,SE,MGM_W62);
   and MGM_G79(ENABLE_D_AND_SD_AND_SE_AND_SI,SI,MGM_W63);
   not MGM_G80(MGM_W64,SE);
   and MGM_G81(MGM_W65,MGM_W64,SD);
   not MGM_G82(MGM_W66,SI);
   and MGM_G83(ENABLE_SD_AND_NOT_SE_AND_NOT_SI,MGM_W66,MGM_W65);
   not MGM_G84(MGM_W67,SE);
   and MGM_G85(MGM_W68,MGM_W67,SD);
   and MGM_G86(ENABLE_SD_AND_NOT_SE_AND_SI,SI,MGM_W68);
   not MGM_G87(MGM_W69,D);
   not MGM_G88(MGM_W70,SE);
   and MGM_G89(MGM_W71,MGM_W70,MGM_W69);
   not MGM_G90(MGM_W72,SI);
   and MGM_G91(ENABLE_NOT_D_AND_NOT_SE_AND_NOT_SI,MGM_W72,MGM_W71);
   not MGM_G92(MGM_W73,D);
   not MGM_G93(MGM_W74,SE);
   and MGM_G94(MGM_W75,MGM_W74,MGM_W73);
   and MGM_G95(ENABLE_NOT_D_AND_NOT_SE_AND_SI,SI,MGM_W75);
   not MGM_G96(MGM_W76,D);
   not MGM_G97(MGM_W77,SD);
   and MGM_G98(MGM_W78,MGM_W77,MGM_W76);
   not MGM_G99(MGM_W79,SI);
   and MGM_G100(ENABLE_NOT_D_AND_NOT_SD_AND_NOT_SI,MGM_W79,MGM_W78);
   not MGM_G101(MGM_W80,D);
   and MGM_G102(MGM_W81,SD,MGM_W80);
   and MGM_G103(ENABLE_NOT_D_AND_SD_AND_SI,SI,MGM_W81);
   not MGM_G104(MGM_W82,SD);
   and MGM_G105(MGM_W83,MGM_W82,D);
   not MGM_G106(MGM_W84,SI);
   and MGM_G107(ENABLE_D_AND_NOT_SD_AND_NOT_SI,MGM_W84,MGM_W83);
   and MGM_G108(MGM_W85,SD,D);
   not MGM_G109(MGM_W86,SI);
   and MGM_G110(ENABLE_D_AND_SD_AND_NOT_SI,MGM_W86,MGM_W85);
   not MGM_G111(MGM_W87,D);
   not MGM_G112(MGM_W88,SD);
   and MGM_G113(MGM_W89,MGM_W88,MGM_W87);
   and MGM_G114(ENABLE_NOT_D_AND_NOT_SD_AND_SE,SE,MGM_W89);
   not MGM_G115(MGM_W90,D);
   and MGM_G116(MGM_W91,SD,MGM_W90);
   and MGM_G117(ENABLE_NOT_D_AND_SD_AND_SE,SE,MGM_W91);
   not MGM_G118(MGM_W92,SD);
   and MGM_G119(MGM_W93,MGM_W92,D);
   and MGM_G120(ENABLE_D_AND_NOT_SD_AND_SE,SE,MGM_W93);
   and MGM_G121(MGM_W94,SD,D);
   and MGM_G122(ENABLE_D_AND_SD_AND_SE,SE,MGM_W94);
   // spec_gates_end
   // specify_block_begin
   specify

      if(D===1'b0 && SD===1'b0 && SE===1'b1 && SI===1'b1)
      // seq arc CK --> Q
      (posedge CK => (Q : D))  = (1.0,1.0);
      
      if(D===1'b1 && SD===1'b0 && SE===1'b0 && SI===1'b1)
      // seq arc CK --> Q
      (posedge CK => (Q : D))  = (1.0,1.0);
      
      if(D===1'b1 && SD===1'b0 && SE===1'b1 && SI===1'b1)
      // seq arc CK --> Q
      (posedge CK => (Q : D))  = (1.0,1.0);
      
      if(D===1'b1 && SD===1'b1 && SE===1'b0 && SI===1'b1)
      // seq arc CK --> Q
      (posedge CK => (Q : D))  = (1.0,1.0);
      
      if(D===1'b0 && SD===1'b0 && SI===1'b0)
      // seq arc CK --> Q
      (posedge CK => (Q : SE))  = (1.0,1.0);
      
      if(D===1'b0 && SE===1'b0 && SI===1'b1)
      // seq arc CK --> Q
      (posedge CK => (Q : SD))  = (1.0,1.0);
      
      if(D===1'b0 && SD===1'b1 && SE===1'b1)
      // seq arc CK --> Q
      (posedge CK => (Q : SI))  = (1.0,1.0);
      
      if(D===1'b1 && SD===1'b0 && SI===1'b0)
      // seq arc CK --> Q
      (posedge CK => (Q : SE))  = (1.0,1.0);
      
      if(D===1'b1 && SD===1'b1 && SE===1'b1)
      // seq arc CK --> Q
      (posedge CK => (Q : SI))  = (1.0,1.0);
      
      if(SD===1'b1 && SE===1'b0 && SI===1'b0)
      // seq arc CK --> Q
      (posedge CK => (Q : D))  = (1.0,1.0);
      
      ifnone
      // seq arc CK --> Q
      (posedge CK => (Q : D))  = (1.0,1.0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_NOT_SD_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_NOT_SD_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_NOT_SD_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_NOT_SD_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_NOT_SD_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_NOT_SD_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_NOT_SD_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_NOT_SD_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_SD_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_SD_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_SD_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_SD_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_SD_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_SD_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_SD_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_SD_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_NOT_SD_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_NOT_SD_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_NOT_SD_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_NOT_SD_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_NOT_SD_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_NOT_SD_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_NOT_SD_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_NOT_SD_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_SD_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_SD_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_SD_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_SD_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_SD_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_SD_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_SD_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_SD_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      // hold D-HL CK-LH
      $hold(posedge CK &&& (ENABLE_SD_AND_NOT_SE_AND_NOT_SI === 1'b1),
      negedge D &&& (ENABLE_SD_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold D-LH CK-LH
      $hold(posedge CK &&& (ENABLE_SD_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge D &&& (ENABLE_SD_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup D-HL CK-LH
      $setup(negedge D &&& (ENABLE_SD_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_SD_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup D-LH CK-LH
      $setup(posedge D &&& (ENABLE_SD_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_SD_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold D-HL CK-LH
      $hold(posedge CK &&& (ENABLE_SD_AND_NOT_SE_AND_SI === 1'b1),
      negedge D &&& (ENABLE_SD_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // hold D-LH CK-LH
      $hold(posedge CK &&& (ENABLE_SD_AND_NOT_SE_AND_SI === 1'b1),
      posedge D &&& (ENABLE_SD_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // setup D-HL CK-LH
      $setup(negedge D &&& (ENABLE_SD_AND_NOT_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_SD_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // setup D-LH CK-LH
      $setup(posedge D &&& (ENABLE_SD_AND_NOT_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_SD_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // hold SD-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D_AND_NOT_SE_AND_NOT_SI === 1'b1),
      negedge SD &&& (ENABLE_NOT_D_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold SD-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge SD &&& (ENABLE_NOT_D_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup SD-HL CK-LH
      $setup(negedge SD &&& (ENABLE_NOT_D_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup SD-LH CK-LH
      $setup(posedge SD &&& (ENABLE_NOT_D_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold SD-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D_AND_NOT_SE_AND_SI === 1'b1),
      negedge SD &&& (ENABLE_NOT_D_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // hold SD-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D_AND_NOT_SE_AND_SI === 1'b1),
      posedge SD &&& (ENABLE_NOT_D_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // setup SD-HL CK-LH
      $setup(negedge SD &&& (ENABLE_NOT_D_AND_NOT_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // setup SD-LH CK-LH
      $setup(posedge SD &&& (ENABLE_NOT_D_AND_NOT_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // hold SE-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D_AND_NOT_SD_AND_NOT_SI === 1'b1),
      negedge SE &&& (ENABLE_NOT_D_AND_NOT_SD_AND_NOT_SI === 1'b1),1.0);
      
      // hold SE-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D_AND_NOT_SD_AND_NOT_SI === 1'b1),
      posedge SE &&& (ENABLE_NOT_D_AND_NOT_SD_AND_NOT_SI === 1'b1),1.0);
      
      // setup SE-HL CK-LH
      $setup(negedge SE &&& (ENABLE_NOT_D_AND_NOT_SD_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_NOT_SD_AND_NOT_SI === 1'b1),1.0);
      
      // setup SE-LH CK-LH
      $setup(posedge SE &&& (ENABLE_NOT_D_AND_NOT_SD_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_NOT_SD_AND_NOT_SI === 1'b1),1.0);
      
      // hold SE-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D_AND_SD_AND_SI === 1'b1),
      negedge SE &&& (ENABLE_NOT_D_AND_SD_AND_SI === 1'b1),1.0);
      
      // hold SE-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D_AND_SD_AND_SI === 1'b1),
      posedge SE &&& (ENABLE_NOT_D_AND_SD_AND_SI === 1'b1),1.0);
      
      // setup SE-HL CK-LH
      $setup(negedge SE &&& (ENABLE_NOT_D_AND_SD_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_SD_AND_SI === 1'b1),1.0);
      
      // setup SE-LH CK-LH
      $setup(posedge SE &&& (ENABLE_NOT_D_AND_SD_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_SD_AND_SI === 1'b1),1.0);
      
      // hold SE-HL CK-LH
      $hold(posedge CK &&& (ENABLE_D_AND_NOT_SD_AND_NOT_SI === 1'b1),
      negedge SE &&& (ENABLE_D_AND_NOT_SD_AND_NOT_SI === 1'b1),1.0);
      
      // hold SE-LH CK-LH
      $hold(posedge CK &&& (ENABLE_D_AND_NOT_SD_AND_NOT_SI === 1'b1),
      posedge SE &&& (ENABLE_D_AND_NOT_SD_AND_NOT_SI === 1'b1),1.0);
      
      // setup SE-HL CK-LH
      $setup(negedge SE &&& (ENABLE_D_AND_NOT_SD_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_D_AND_NOT_SD_AND_NOT_SI === 1'b1),1.0);
      
      // setup SE-LH CK-LH
      $setup(posedge SE &&& (ENABLE_D_AND_NOT_SD_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_D_AND_NOT_SD_AND_NOT_SI === 1'b1),1.0);
      
      // hold SE-HL CK-LH
      $hold(posedge CK &&& (ENABLE_D_AND_SD_AND_NOT_SI === 1'b1),
      negedge SE &&& (ENABLE_D_AND_SD_AND_NOT_SI === 1'b1),1.0);
      
      // hold SE-LH CK-LH
      $hold(posedge CK &&& (ENABLE_D_AND_SD_AND_NOT_SI === 1'b1),
      posedge SE &&& (ENABLE_D_AND_SD_AND_NOT_SI === 1'b1),1.0);
      
      // setup SE-HL CK-LH
      $setup(negedge SE &&& (ENABLE_D_AND_SD_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_D_AND_SD_AND_NOT_SI === 1'b1),1.0);
      
      // setup SE-LH CK-LH
      $setup(posedge SE &&& (ENABLE_D_AND_SD_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_D_AND_SD_AND_NOT_SI === 1'b1),1.0);
      
      // hold SI-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D_AND_NOT_SD_AND_SE === 1'b1),
      negedge SI &&& (ENABLE_NOT_D_AND_NOT_SD_AND_SE === 1'b1),1.0);
      
      // hold SI-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D_AND_NOT_SD_AND_SE === 1'b1),
      posedge SI &&& (ENABLE_NOT_D_AND_NOT_SD_AND_SE === 1'b1),1.0);
      
      // setup SI-HL CK-LH
      $setup(negedge SI &&& (ENABLE_NOT_D_AND_NOT_SD_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_NOT_SD_AND_SE === 1'b1),1.0);
      
      // setup SI-LH CK-LH
      $setup(posedge SI &&& (ENABLE_NOT_D_AND_NOT_SD_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_NOT_SD_AND_SE === 1'b1),1.0);
      
      // hold SI-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D_AND_SD_AND_SE === 1'b1),
      negedge SI &&& (ENABLE_NOT_D_AND_SD_AND_SE === 1'b1),1.0);
      
      // hold SI-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D_AND_SD_AND_SE === 1'b1),
      posedge SI &&& (ENABLE_NOT_D_AND_SD_AND_SE === 1'b1),1.0);
      
      // setup SI-HL CK-LH
      $setup(negedge SI &&& (ENABLE_NOT_D_AND_SD_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_SD_AND_SE === 1'b1),1.0);
      
      // setup SI-LH CK-LH
      $setup(posedge SI &&& (ENABLE_NOT_D_AND_SD_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_SD_AND_SE === 1'b1),1.0);
      
      // hold SI-HL CK-LH
      $hold(posedge CK &&& (ENABLE_D_AND_NOT_SD_AND_SE === 1'b1),
      negedge SI &&& (ENABLE_D_AND_NOT_SD_AND_SE === 1'b1),1.0);
      
      // hold SI-LH CK-LH
      $hold(posedge CK &&& (ENABLE_D_AND_NOT_SD_AND_SE === 1'b1),
      posedge SI &&& (ENABLE_D_AND_NOT_SD_AND_SE === 1'b1),1.0);
      
      // setup SI-HL CK-LH
      $setup(negedge SI &&& (ENABLE_D_AND_NOT_SD_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_D_AND_NOT_SD_AND_SE === 1'b1),1.0);
      
      // setup SI-LH CK-LH
      $setup(posedge SI &&& (ENABLE_D_AND_NOT_SD_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_D_AND_NOT_SD_AND_SE === 1'b1),1.0);
      
      // hold SI-HL CK-LH
      $hold(posedge CK &&& (ENABLE_D_AND_SD_AND_SE === 1'b1),
      negedge SI &&& (ENABLE_D_AND_SD_AND_SE === 1'b1),1.0);
      
      // hold SI-LH CK-LH
      $hold(posedge CK &&& (ENABLE_D_AND_SD_AND_SE === 1'b1),
      posedge SI &&& (ENABLE_D_AND_SD_AND_SE === 1'b1),1.0);
      
      // setup SI-HL CK-LH
      $setup(negedge SI &&& (ENABLE_D_AND_SD_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_D_AND_SD_AND_SE === 1'b1),1.0);
      
      // setup SI-LH CK-LH
      $setup(posedge SI &&& (ENABLE_D_AND_SD_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_D_AND_SD_AND_SE === 1'b1),1.0);
      
      // mpw CK_lh 
      $width(posedge CK,1.0,0);
      
      // mpw CK_hl 
      $width(negedge CK,1.0,0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_FSDPSYNSBQ_V2LP_2( Q, CK, D, SI, SE, SD );
input CK, D, SD, SE, SI;
output Q;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_FSDPSYNSBQ_V2LP_2_func SAEDRVT14_FSDPSYNSBQ_V2LP_2_behav_inst(.Q(Q),.CK(CK),.D(D),.SI(SI),.SE(SE),.SD(SD));
`else
   SAEDRVT14_FSDPSYNSBQ_V2LP_2_func SAEDRVT14_FSDPSYNSBQ_V2LP_2_inst(.Q(Q),.CK(CK),.D(D),.SI(SI),.SE(SE),.SD(SD));
   // spec_gates_begin
   not MGM_G0(MGM_W0,D);
   not MGM_G1(MGM_W1,SD);
   and MGM_G2(MGM_W2,MGM_W1,MGM_W0);
   not MGM_G3(MGM_W3,SE);
   and MGM_G4(MGM_W4,MGM_W3,MGM_W2);
   not MGM_G5(MGM_W5,SI);
   and MGM_G6(ENABLE_NOT_D_AND_NOT_SD_AND_NOT_SE_AND_NOT_SI,MGM_W5,MGM_W4);
   not MGM_G7(MGM_W6,D);
   not MGM_G8(MGM_W7,SD);
   and MGM_G9(MGM_W8,MGM_W7,MGM_W6);
   not MGM_G10(MGM_W9,SE);
   and MGM_G11(MGM_W10,MGM_W9,MGM_W8);
   and MGM_G12(ENABLE_NOT_D_AND_NOT_SD_AND_NOT_SE_AND_SI,SI,MGM_W10);
   not MGM_G13(MGM_W11,D);
   not MGM_G14(MGM_W12,SD);
   and MGM_G15(MGM_W13,MGM_W12,MGM_W11);
   and MGM_G16(MGM_W14,SE,MGM_W13);
   not MGM_G17(MGM_W15,SI);
   and MGM_G18(ENABLE_NOT_D_AND_NOT_SD_AND_SE_AND_NOT_SI,MGM_W15,MGM_W14);
   not MGM_G19(MGM_W16,D);
   not MGM_G20(MGM_W17,SD);
   and MGM_G21(MGM_W18,MGM_W17,MGM_W16);
   and MGM_G22(MGM_W19,SE,MGM_W18);
   and MGM_G23(ENABLE_NOT_D_AND_NOT_SD_AND_SE_AND_SI,SI,MGM_W19);
   not MGM_G24(MGM_W20,D);
   and MGM_G25(MGM_W21,SD,MGM_W20);
   not MGM_G26(MGM_W22,SE);
   and MGM_G27(MGM_W23,MGM_W22,MGM_W21);
   not MGM_G28(MGM_W24,SI);
   and MGM_G29(ENABLE_NOT_D_AND_SD_AND_NOT_SE_AND_NOT_SI,MGM_W24,MGM_W23);
   not MGM_G30(MGM_W25,D);
   and MGM_G31(MGM_W26,SD,MGM_W25);
   not MGM_G32(MGM_W27,SE);
   and MGM_G33(MGM_W28,MGM_W27,MGM_W26);
   and MGM_G34(ENABLE_NOT_D_AND_SD_AND_NOT_SE_AND_SI,SI,MGM_W28);
   not MGM_G35(MGM_W29,D);
   and MGM_G36(MGM_W30,SD,MGM_W29);
   and MGM_G37(MGM_W31,SE,MGM_W30);
   not MGM_G38(MGM_W32,SI);
   and MGM_G39(ENABLE_NOT_D_AND_SD_AND_SE_AND_NOT_SI,MGM_W32,MGM_W31);
   not MGM_G40(MGM_W33,D);
   and MGM_G41(MGM_W34,SD,MGM_W33);
   and MGM_G42(MGM_W35,SE,MGM_W34);
   and MGM_G43(ENABLE_NOT_D_AND_SD_AND_SE_AND_SI,SI,MGM_W35);
   not MGM_G44(MGM_W36,SD);
   and MGM_G45(MGM_W37,MGM_W36,D);
   not MGM_G46(MGM_W38,SE);
   and MGM_G47(MGM_W39,MGM_W38,MGM_W37);
   not MGM_G48(MGM_W40,SI);
   and MGM_G49(ENABLE_D_AND_NOT_SD_AND_NOT_SE_AND_NOT_SI,MGM_W40,MGM_W39);
   not MGM_G50(MGM_W41,SD);
   and MGM_G51(MGM_W42,MGM_W41,D);
   not MGM_G52(MGM_W43,SE);
   and MGM_G53(MGM_W44,MGM_W43,MGM_W42);
   and MGM_G54(ENABLE_D_AND_NOT_SD_AND_NOT_SE_AND_SI,SI,MGM_W44);
   not MGM_G55(MGM_W45,SD);
   and MGM_G56(MGM_W46,MGM_W45,D);
   and MGM_G57(MGM_W47,SE,MGM_W46);
   not MGM_G58(MGM_W48,SI);
   and MGM_G59(ENABLE_D_AND_NOT_SD_AND_SE_AND_NOT_SI,MGM_W48,MGM_W47);
   not MGM_G60(MGM_W49,SD);
   and MGM_G61(MGM_W50,MGM_W49,D);
   and MGM_G62(MGM_W51,SE,MGM_W50);
   and MGM_G63(ENABLE_D_AND_NOT_SD_AND_SE_AND_SI,SI,MGM_W51);
   and MGM_G64(MGM_W52,SD,D);
   not MGM_G65(MGM_W53,SE);
   and MGM_G66(MGM_W54,MGM_W53,MGM_W52);
   not MGM_G67(MGM_W55,SI);
   and MGM_G68(ENABLE_D_AND_SD_AND_NOT_SE_AND_NOT_SI,MGM_W55,MGM_W54);
   and MGM_G69(MGM_W56,SD,D);
   not MGM_G70(MGM_W57,SE);
   and MGM_G71(MGM_W58,MGM_W57,MGM_W56);
   and MGM_G72(ENABLE_D_AND_SD_AND_NOT_SE_AND_SI,SI,MGM_W58);
   and MGM_G73(MGM_W59,SD,D);
   and MGM_G74(MGM_W60,SE,MGM_W59);
   not MGM_G75(MGM_W61,SI);
   and MGM_G76(ENABLE_D_AND_SD_AND_SE_AND_NOT_SI,MGM_W61,MGM_W60);
   and MGM_G77(MGM_W62,SD,D);
   and MGM_G78(MGM_W63,SE,MGM_W62);
   and MGM_G79(ENABLE_D_AND_SD_AND_SE_AND_SI,SI,MGM_W63);
   not MGM_G80(MGM_W64,SE);
   and MGM_G81(MGM_W65,MGM_W64,SD);
   not MGM_G82(MGM_W66,SI);
   and MGM_G83(ENABLE_SD_AND_NOT_SE_AND_NOT_SI,MGM_W66,MGM_W65);
   not MGM_G84(MGM_W67,SE);
   and MGM_G85(MGM_W68,MGM_W67,SD);
   and MGM_G86(ENABLE_SD_AND_NOT_SE_AND_SI,SI,MGM_W68);
   not MGM_G87(MGM_W69,D);
   not MGM_G88(MGM_W70,SE);
   and MGM_G89(MGM_W71,MGM_W70,MGM_W69);
   not MGM_G90(MGM_W72,SI);
   and MGM_G91(ENABLE_NOT_D_AND_NOT_SE_AND_NOT_SI,MGM_W72,MGM_W71);
   not MGM_G92(MGM_W73,D);
   not MGM_G93(MGM_W74,SE);
   and MGM_G94(MGM_W75,MGM_W74,MGM_W73);
   and MGM_G95(ENABLE_NOT_D_AND_NOT_SE_AND_SI,SI,MGM_W75);
   not MGM_G96(MGM_W76,D);
   not MGM_G97(MGM_W77,SD);
   and MGM_G98(MGM_W78,MGM_W77,MGM_W76);
   not MGM_G99(MGM_W79,SI);
   and MGM_G100(ENABLE_NOT_D_AND_NOT_SD_AND_NOT_SI,MGM_W79,MGM_W78);
   not MGM_G101(MGM_W80,D);
   and MGM_G102(MGM_W81,SD,MGM_W80);
   and MGM_G103(ENABLE_NOT_D_AND_SD_AND_SI,SI,MGM_W81);
   not MGM_G104(MGM_W82,SD);
   and MGM_G105(MGM_W83,MGM_W82,D);
   not MGM_G106(MGM_W84,SI);
   and MGM_G107(ENABLE_D_AND_NOT_SD_AND_NOT_SI,MGM_W84,MGM_W83);
   and MGM_G108(MGM_W85,SD,D);
   not MGM_G109(MGM_W86,SI);
   and MGM_G110(ENABLE_D_AND_SD_AND_NOT_SI,MGM_W86,MGM_W85);
   not MGM_G111(MGM_W87,D);
   not MGM_G112(MGM_W88,SD);
   and MGM_G113(MGM_W89,MGM_W88,MGM_W87);
   and MGM_G114(ENABLE_NOT_D_AND_NOT_SD_AND_SE,SE,MGM_W89);
   not MGM_G115(MGM_W90,D);
   and MGM_G116(MGM_W91,SD,MGM_W90);
   and MGM_G117(ENABLE_NOT_D_AND_SD_AND_SE,SE,MGM_W91);
   not MGM_G118(MGM_W92,SD);
   and MGM_G119(MGM_W93,MGM_W92,D);
   and MGM_G120(ENABLE_D_AND_NOT_SD_AND_SE,SE,MGM_W93);
   and MGM_G121(MGM_W94,SD,D);
   and MGM_G122(ENABLE_D_AND_SD_AND_SE,SE,MGM_W94);
   // spec_gates_end
   // specify_block_begin
   specify

      if(D===1'b0 && SD===1'b0 && SE===1'b1 && SI===1'b1)
      // seq arc CK --> Q
      (posedge CK => (Q : D))  = (1.0,1.0);
      
      if(D===1'b1 && SD===1'b0 && SE===1'b0 && SI===1'b1)
      // seq arc CK --> Q
      (posedge CK => (Q : D))  = (1.0,1.0);
      
      if(D===1'b1 && SD===1'b0 && SE===1'b1 && SI===1'b1)
      // seq arc CK --> Q
      (posedge CK => (Q : D))  = (1.0,1.0);
      
      if(D===1'b1 && SD===1'b1 && SE===1'b0 && SI===1'b1)
      // seq arc CK --> Q
      (posedge CK => (Q : D))  = (1.0,1.0);
      
      if(D===1'b0 && SD===1'b0 && SI===1'b0)
      // seq arc CK --> Q
      (posedge CK => (Q : SE))  = (1.0,1.0);
      
      if(D===1'b0 && SE===1'b0 && SI===1'b1)
      // seq arc CK --> Q
      (posedge CK => (Q : SD))  = (1.0,1.0);
      
      if(D===1'b0 && SD===1'b1 && SE===1'b1)
      // seq arc CK --> Q
      (posedge CK => (Q : SI))  = (1.0,1.0);
      
      if(D===1'b1 && SD===1'b0 && SI===1'b0)
      // seq arc CK --> Q
      (posedge CK => (Q : SE))  = (1.0,1.0);
      
      if(D===1'b1 && SD===1'b1 && SE===1'b1)
      // seq arc CK --> Q
      (posedge CK => (Q : SI))  = (1.0,1.0);
      
      if(SD===1'b1 && SE===1'b0 && SI===1'b0)
      // seq arc CK --> Q
      (posedge CK => (Q : D))  = (1.0,1.0);
      
      ifnone
      // seq arc CK --> Q
      (posedge CK => (Q : D))  = (1.0,1.0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_NOT_SD_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_NOT_SD_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_NOT_SD_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_NOT_SD_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_NOT_SD_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_NOT_SD_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_NOT_SD_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_NOT_SD_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_SD_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_SD_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_SD_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_SD_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_SD_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_SD_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_SD_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_SD_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_NOT_SD_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_NOT_SD_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_NOT_SD_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_NOT_SD_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_NOT_SD_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_NOT_SD_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_NOT_SD_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_NOT_SD_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_SD_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_SD_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_SD_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_SD_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_SD_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_SD_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_SD_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_SD_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      // hold D-HL CK-LH
      $hold(posedge CK &&& (ENABLE_SD_AND_NOT_SE_AND_NOT_SI === 1'b1),
      negedge D &&& (ENABLE_SD_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold D-LH CK-LH
      $hold(posedge CK &&& (ENABLE_SD_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge D &&& (ENABLE_SD_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup D-HL CK-LH
      $setup(negedge D &&& (ENABLE_SD_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_SD_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup D-LH CK-LH
      $setup(posedge D &&& (ENABLE_SD_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_SD_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold D-HL CK-LH
      $hold(posedge CK &&& (ENABLE_SD_AND_NOT_SE_AND_SI === 1'b1),
      negedge D &&& (ENABLE_SD_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // hold D-LH CK-LH
      $hold(posedge CK &&& (ENABLE_SD_AND_NOT_SE_AND_SI === 1'b1),
      posedge D &&& (ENABLE_SD_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // setup D-HL CK-LH
      $setup(negedge D &&& (ENABLE_SD_AND_NOT_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_SD_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // setup D-LH CK-LH
      $setup(posedge D &&& (ENABLE_SD_AND_NOT_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_SD_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // hold SD-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D_AND_NOT_SE_AND_NOT_SI === 1'b1),
      negedge SD &&& (ENABLE_NOT_D_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold SD-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge SD &&& (ENABLE_NOT_D_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup SD-HL CK-LH
      $setup(negedge SD &&& (ENABLE_NOT_D_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup SD-LH CK-LH
      $setup(posedge SD &&& (ENABLE_NOT_D_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold SD-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D_AND_NOT_SE_AND_SI === 1'b1),
      negedge SD &&& (ENABLE_NOT_D_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // hold SD-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D_AND_NOT_SE_AND_SI === 1'b1),
      posedge SD &&& (ENABLE_NOT_D_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // setup SD-HL CK-LH
      $setup(negedge SD &&& (ENABLE_NOT_D_AND_NOT_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // setup SD-LH CK-LH
      $setup(posedge SD &&& (ENABLE_NOT_D_AND_NOT_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // hold SE-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D_AND_NOT_SD_AND_NOT_SI === 1'b1),
      negedge SE &&& (ENABLE_NOT_D_AND_NOT_SD_AND_NOT_SI === 1'b1),1.0);
      
      // hold SE-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D_AND_NOT_SD_AND_NOT_SI === 1'b1),
      posedge SE &&& (ENABLE_NOT_D_AND_NOT_SD_AND_NOT_SI === 1'b1),1.0);
      
      // setup SE-HL CK-LH
      $setup(negedge SE &&& (ENABLE_NOT_D_AND_NOT_SD_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_NOT_SD_AND_NOT_SI === 1'b1),1.0);
      
      // setup SE-LH CK-LH
      $setup(posedge SE &&& (ENABLE_NOT_D_AND_NOT_SD_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_NOT_SD_AND_NOT_SI === 1'b1),1.0);
      
      // hold SE-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D_AND_SD_AND_SI === 1'b1),
      negedge SE &&& (ENABLE_NOT_D_AND_SD_AND_SI === 1'b1),1.0);
      
      // hold SE-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D_AND_SD_AND_SI === 1'b1),
      posedge SE &&& (ENABLE_NOT_D_AND_SD_AND_SI === 1'b1),1.0);
      
      // setup SE-HL CK-LH
      $setup(negedge SE &&& (ENABLE_NOT_D_AND_SD_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_SD_AND_SI === 1'b1),1.0);
      
      // setup SE-LH CK-LH
      $setup(posedge SE &&& (ENABLE_NOT_D_AND_SD_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_SD_AND_SI === 1'b1),1.0);
      
      // hold SE-HL CK-LH
      $hold(posedge CK &&& (ENABLE_D_AND_NOT_SD_AND_NOT_SI === 1'b1),
      negedge SE &&& (ENABLE_D_AND_NOT_SD_AND_NOT_SI === 1'b1),1.0);
      
      // hold SE-LH CK-LH
      $hold(posedge CK &&& (ENABLE_D_AND_NOT_SD_AND_NOT_SI === 1'b1),
      posedge SE &&& (ENABLE_D_AND_NOT_SD_AND_NOT_SI === 1'b1),1.0);
      
      // setup SE-HL CK-LH
      $setup(negedge SE &&& (ENABLE_D_AND_NOT_SD_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_D_AND_NOT_SD_AND_NOT_SI === 1'b1),1.0);
      
      // setup SE-LH CK-LH
      $setup(posedge SE &&& (ENABLE_D_AND_NOT_SD_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_D_AND_NOT_SD_AND_NOT_SI === 1'b1),1.0);
      
      // hold SE-HL CK-LH
      $hold(posedge CK &&& (ENABLE_D_AND_SD_AND_NOT_SI === 1'b1),
      negedge SE &&& (ENABLE_D_AND_SD_AND_NOT_SI === 1'b1),1.0);
      
      // hold SE-LH CK-LH
      $hold(posedge CK &&& (ENABLE_D_AND_SD_AND_NOT_SI === 1'b1),
      posedge SE &&& (ENABLE_D_AND_SD_AND_NOT_SI === 1'b1),1.0);
      
      // setup SE-HL CK-LH
      $setup(negedge SE &&& (ENABLE_D_AND_SD_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_D_AND_SD_AND_NOT_SI === 1'b1),1.0);
      
      // setup SE-LH CK-LH
      $setup(posedge SE &&& (ENABLE_D_AND_SD_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_D_AND_SD_AND_NOT_SI === 1'b1),1.0);
      
      // hold SI-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D_AND_NOT_SD_AND_SE === 1'b1),
      negedge SI &&& (ENABLE_NOT_D_AND_NOT_SD_AND_SE === 1'b1),1.0);
      
      // hold SI-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D_AND_NOT_SD_AND_SE === 1'b1),
      posedge SI &&& (ENABLE_NOT_D_AND_NOT_SD_AND_SE === 1'b1),1.0);
      
      // setup SI-HL CK-LH
      $setup(negedge SI &&& (ENABLE_NOT_D_AND_NOT_SD_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_NOT_SD_AND_SE === 1'b1),1.0);
      
      // setup SI-LH CK-LH
      $setup(posedge SI &&& (ENABLE_NOT_D_AND_NOT_SD_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_NOT_SD_AND_SE === 1'b1),1.0);
      
      // hold SI-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D_AND_SD_AND_SE === 1'b1),
      negedge SI &&& (ENABLE_NOT_D_AND_SD_AND_SE === 1'b1),1.0);
      
      // hold SI-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D_AND_SD_AND_SE === 1'b1),
      posedge SI &&& (ENABLE_NOT_D_AND_SD_AND_SE === 1'b1),1.0);
      
      // setup SI-HL CK-LH
      $setup(negedge SI &&& (ENABLE_NOT_D_AND_SD_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_SD_AND_SE === 1'b1),1.0);
      
      // setup SI-LH CK-LH
      $setup(posedge SI &&& (ENABLE_NOT_D_AND_SD_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_SD_AND_SE === 1'b1),1.0);
      
      // hold SI-HL CK-LH
      $hold(posedge CK &&& (ENABLE_D_AND_NOT_SD_AND_SE === 1'b1),
      negedge SI &&& (ENABLE_D_AND_NOT_SD_AND_SE === 1'b1),1.0);
      
      // hold SI-LH CK-LH
      $hold(posedge CK &&& (ENABLE_D_AND_NOT_SD_AND_SE === 1'b1),
      posedge SI &&& (ENABLE_D_AND_NOT_SD_AND_SE === 1'b1),1.0);
      
      // setup SI-HL CK-LH
      $setup(negedge SI &&& (ENABLE_D_AND_NOT_SD_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_D_AND_NOT_SD_AND_SE === 1'b1),1.0);
      
      // setup SI-LH CK-LH
      $setup(posedge SI &&& (ENABLE_D_AND_NOT_SD_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_D_AND_NOT_SD_AND_SE === 1'b1),1.0);
      
      // hold SI-HL CK-LH
      $hold(posedge CK &&& (ENABLE_D_AND_SD_AND_SE === 1'b1),
      negedge SI &&& (ENABLE_D_AND_SD_AND_SE === 1'b1),1.0);
      
      // hold SI-LH CK-LH
      $hold(posedge CK &&& (ENABLE_D_AND_SD_AND_SE === 1'b1),
      posedge SI &&& (ENABLE_D_AND_SD_AND_SE === 1'b1),1.0);
      
      // setup SI-HL CK-LH
      $setup(negedge SI &&& (ENABLE_D_AND_SD_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_D_AND_SD_AND_SE === 1'b1),1.0);
      
      // setup SI-LH CK-LH
      $setup(posedge SI &&& (ENABLE_D_AND_SD_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_D_AND_SD_AND_SE === 1'b1),1.0);
      
      // mpw CK_lh 
      $width(posedge CK,1.0,0);
      
      // mpw CK_hl 
      $width(negedge CK,1.0,0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_FSDPSYNSBQ_V2_0P5( Q, CK, D, SI, SE, SD );
input CK, D, SD, SE, SI;
output Q;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_FSDPSYNSBQ_V2_0P5_func SAEDRVT14_FSDPSYNSBQ_V2_0P5_behav_inst(.Q(Q),.CK(CK),.D(D),.SI(SI),.SE(SE),.SD(SD));
`else
   SAEDRVT14_FSDPSYNSBQ_V2_0P5_func SAEDRVT14_FSDPSYNSBQ_V2_0P5_inst(.Q(Q),.CK(CK),.D(D),.SI(SI),.SE(SE),.SD(SD));
   // spec_gates_begin
   not MGM_G0(MGM_W0,D);
   not MGM_G1(MGM_W1,SD);
   and MGM_G2(MGM_W2,MGM_W1,MGM_W0);
   not MGM_G3(MGM_W3,SE);
   and MGM_G4(MGM_W4,MGM_W3,MGM_W2);
   not MGM_G5(MGM_W5,SI);
   and MGM_G6(ENABLE_NOT_D_AND_NOT_SD_AND_NOT_SE_AND_NOT_SI,MGM_W5,MGM_W4);
   not MGM_G7(MGM_W6,D);
   not MGM_G8(MGM_W7,SD);
   and MGM_G9(MGM_W8,MGM_W7,MGM_W6);
   not MGM_G10(MGM_W9,SE);
   and MGM_G11(MGM_W10,MGM_W9,MGM_W8);
   and MGM_G12(ENABLE_NOT_D_AND_NOT_SD_AND_NOT_SE_AND_SI,SI,MGM_W10);
   not MGM_G13(MGM_W11,D);
   not MGM_G14(MGM_W12,SD);
   and MGM_G15(MGM_W13,MGM_W12,MGM_W11);
   and MGM_G16(MGM_W14,SE,MGM_W13);
   not MGM_G17(MGM_W15,SI);
   and MGM_G18(ENABLE_NOT_D_AND_NOT_SD_AND_SE_AND_NOT_SI,MGM_W15,MGM_W14);
   not MGM_G19(MGM_W16,D);
   not MGM_G20(MGM_W17,SD);
   and MGM_G21(MGM_W18,MGM_W17,MGM_W16);
   and MGM_G22(MGM_W19,SE,MGM_W18);
   and MGM_G23(ENABLE_NOT_D_AND_NOT_SD_AND_SE_AND_SI,SI,MGM_W19);
   not MGM_G24(MGM_W20,D);
   and MGM_G25(MGM_W21,SD,MGM_W20);
   not MGM_G26(MGM_W22,SE);
   and MGM_G27(MGM_W23,MGM_W22,MGM_W21);
   not MGM_G28(MGM_W24,SI);
   and MGM_G29(ENABLE_NOT_D_AND_SD_AND_NOT_SE_AND_NOT_SI,MGM_W24,MGM_W23);
   not MGM_G30(MGM_W25,D);
   and MGM_G31(MGM_W26,SD,MGM_W25);
   not MGM_G32(MGM_W27,SE);
   and MGM_G33(MGM_W28,MGM_W27,MGM_W26);
   and MGM_G34(ENABLE_NOT_D_AND_SD_AND_NOT_SE_AND_SI,SI,MGM_W28);
   not MGM_G35(MGM_W29,D);
   and MGM_G36(MGM_W30,SD,MGM_W29);
   and MGM_G37(MGM_W31,SE,MGM_W30);
   not MGM_G38(MGM_W32,SI);
   and MGM_G39(ENABLE_NOT_D_AND_SD_AND_SE_AND_NOT_SI,MGM_W32,MGM_W31);
   not MGM_G40(MGM_W33,D);
   and MGM_G41(MGM_W34,SD,MGM_W33);
   and MGM_G42(MGM_W35,SE,MGM_W34);
   and MGM_G43(ENABLE_NOT_D_AND_SD_AND_SE_AND_SI,SI,MGM_W35);
   not MGM_G44(MGM_W36,SD);
   and MGM_G45(MGM_W37,MGM_W36,D);
   not MGM_G46(MGM_W38,SE);
   and MGM_G47(MGM_W39,MGM_W38,MGM_W37);
   not MGM_G48(MGM_W40,SI);
   and MGM_G49(ENABLE_D_AND_NOT_SD_AND_NOT_SE_AND_NOT_SI,MGM_W40,MGM_W39);
   not MGM_G50(MGM_W41,SD);
   and MGM_G51(MGM_W42,MGM_W41,D);
   not MGM_G52(MGM_W43,SE);
   and MGM_G53(MGM_W44,MGM_W43,MGM_W42);
   and MGM_G54(ENABLE_D_AND_NOT_SD_AND_NOT_SE_AND_SI,SI,MGM_W44);
   not MGM_G55(MGM_W45,SD);
   and MGM_G56(MGM_W46,MGM_W45,D);
   and MGM_G57(MGM_W47,SE,MGM_W46);
   not MGM_G58(MGM_W48,SI);
   and MGM_G59(ENABLE_D_AND_NOT_SD_AND_SE_AND_NOT_SI,MGM_W48,MGM_W47);
   not MGM_G60(MGM_W49,SD);
   and MGM_G61(MGM_W50,MGM_W49,D);
   and MGM_G62(MGM_W51,SE,MGM_W50);
   and MGM_G63(ENABLE_D_AND_NOT_SD_AND_SE_AND_SI,SI,MGM_W51);
   and MGM_G64(MGM_W52,SD,D);
   not MGM_G65(MGM_W53,SE);
   and MGM_G66(MGM_W54,MGM_W53,MGM_W52);
   not MGM_G67(MGM_W55,SI);
   and MGM_G68(ENABLE_D_AND_SD_AND_NOT_SE_AND_NOT_SI,MGM_W55,MGM_W54);
   and MGM_G69(MGM_W56,SD,D);
   not MGM_G70(MGM_W57,SE);
   and MGM_G71(MGM_W58,MGM_W57,MGM_W56);
   and MGM_G72(ENABLE_D_AND_SD_AND_NOT_SE_AND_SI,SI,MGM_W58);
   and MGM_G73(MGM_W59,SD,D);
   and MGM_G74(MGM_W60,SE,MGM_W59);
   not MGM_G75(MGM_W61,SI);
   and MGM_G76(ENABLE_D_AND_SD_AND_SE_AND_NOT_SI,MGM_W61,MGM_W60);
   and MGM_G77(MGM_W62,SD,D);
   and MGM_G78(MGM_W63,SE,MGM_W62);
   and MGM_G79(ENABLE_D_AND_SD_AND_SE_AND_SI,SI,MGM_W63);
   not MGM_G80(MGM_W64,SE);
   and MGM_G81(MGM_W65,MGM_W64,SD);
   not MGM_G82(MGM_W66,SI);
   and MGM_G83(ENABLE_SD_AND_NOT_SE_AND_NOT_SI,MGM_W66,MGM_W65);
   not MGM_G84(MGM_W67,SE);
   and MGM_G85(MGM_W68,MGM_W67,SD);
   and MGM_G86(ENABLE_SD_AND_NOT_SE_AND_SI,SI,MGM_W68);
   not MGM_G87(MGM_W69,D);
   not MGM_G88(MGM_W70,SE);
   and MGM_G89(MGM_W71,MGM_W70,MGM_W69);
   not MGM_G90(MGM_W72,SI);
   and MGM_G91(ENABLE_NOT_D_AND_NOT_SE_AND_NOT_SI,MGM_W72,MGM_W71);
   not MGM_G92(MGM_W73,D);
   not MGM_G93(MGM_W74,SE);
   and MGM_G94(MGM_W75,MGM_W74,MGM_W73);
   and MGM_G95(ENABLE_NOT_D_AND_NOT_SE_AND_SI,SI,MGM_W75);
   not MGM_G96(MGM_W76,D);
   not MGM_G97(MGM_W77,SD);
   and MGM_G98(MGM_W78,MGM_W77,MGM_W76);
   not MGM_G99(MGM_W79,SI);
   and MGM_G100(ENABLE_NOT_D_AND_NOT_SD_AND_NOT_SI,MGM_W79,MGM_W78);
   not MGM_G101(MGM_W80,D);
   and MGM_G102(MGM_W81,SD,MGM_W80);
   and MGM_G103(ENABLE_NOT_D_AND_SD_AND_SI,SI,MGM_W81);
   not MGM_G104(MGM_W82,SD);
   and MGM_G105(MGM_W83,MGM_W82,D);
   not MGM_G106(MGM_W84,SI);
   and MGM_G107(ENABLE_D_AND_NOT_SD_AND_NOT_SI,MGM_W84,MGM_W83);
   and MGM_G108(MGM_W85,SD,D);
   not MGM_G109(MGM_W86,SI);
   and MGM_G110(ENABLE_D_AND_SD_AND_NOT_SI,MGM_W86,MGM_W85);
   not MGM_G111(MGM_W87,D);
   not MGM_G112(MGM_W88,SD);
   and MGM_G113(MGM_W89,MGM_W88,MGM_W87);
   and MGM_G114(ENABLE_NOT_D_AND_NOT_SD_AND_SE,SE,MGM_W89);
   not MGM_G115(MGM_W90,D);
   and MGM_G116(MGM_W91,SD,MGM_W90);
   and MGM_G117(ENABLE_NOT_D_AND_SD_AND_SE,SE,MGM_W91);
   not MGM_G118(MGM_W92,SD);
   and MGM_G119(MGM_W93,MGM_W92,D);
   and MGM_G120(ENABLE_D_AND_NOT_SD_AND_SE,SE,MGM_W93);
   and MGM_G121(MGM_W94,SD,D);
   and MGM_G122(ENABLE_D_AND_SD_AND_SE,SE,MGM_W94);
   // spec_gates_end
   // specify_block_begin
   specify

      if(D===1'b0 && SD===1'b0 && SE===1'b1 && SI===1'b1)
      // seq arc CK --> Q
      (posedge CK => (Q : D))  = (1.0,1.0);
      
      if(D===1'b1 && SD===1'b0 && SE===1'b0 && SI===1'b1)
      // seq arc CK --> Q
      (posedge CK => (Q : D))  = (1.0,1.0);
      
      if(D===1'b1 && SD===1'b0 && SE===1'b1 && SI===1'b1)
      // seq arc CK --> Q
      (posedge CK => (Q : D))  = (1.0,1.0);
      
      if(D===1'b1 && SD===1'b1 && SE===1'b0 && SI===1'b1)
      // seq arc CK --> Q
      (posedge CK => (Q : D))  = (1.0,1.0);
      
      if(D===1'b0 && SD===1'b0 && SI===1'b0)
      // seq arc CK --> Q
      (posedge CK => (Q : SE))  = (1.0,1.0);
      
      if(D===1'b0 && SE===1'b0 && SI===1'b1)
      // seq arc CK --> Q
      (posedge CK => (Q : SD))  = (1.0,1.0);
      
      if(D===1'b0 && SD===1'b1 && SE===1'b1)
      // seq arc CK --> Q
      (posedge CK => (Q : SI))  = (1.0,1.0);
      
      if(D===1'b1 && SD===1'b0 && SI===1'b0)
      // seq arc CK --> Q
      (posedge CK => (Q : SE))  = (1.0,1.0);
      
      if(D===1'b1 && SD===1'b1 && SE===1'b1)
      // seq arc CK --> Q
      (posedge CK => (Q : SI))  = (1.0,1.0);
      
      if(SD===1'b1 && SE===1'b0 && SI===1'b0)
      // seq arc CK --> Q
      (posedge CK => (Q : D))  = (1.0,1.0);
      
      ifnone
      // seq arc CK --> Q
      (posedge CK => (Q : D))  = (1.0,1.0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_NOT_SD_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_NOT_SD_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_NOT_SD_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_NOT_SD_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_NOT_SD_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_NOT_SD_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_NOT_SD_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_NOT_SD_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_SD_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_SD_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_SD_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_SD_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_SD_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_SD_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_SD_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_SD_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_NOT_SD_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_NOT_SD_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_NOT_SD_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_NOT_SD_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_NOT_SD_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_NOT_SD_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_NOT_SD_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_NOT_SD_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_SD_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_SD_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_SD_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_SD_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_SD_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_SD_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_SD_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_SD_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      // hold D-HL CK-LH
      $hold(posedge CK &&& (ENABLE_SD_AND_NOT_SE_AND_NOT_SI === 1'b1),
      negedge D &&& (ENABLE_SD_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold D-LH CK-LH
      $hold(posedge CK &&& (ENABLE_SD_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge D &&& (ENABLE_SD_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup D-HL CK-LH
      $setup(negedge D &&& (ENABLE_SD_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_SD_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup D-LH CK-LH
      $setup(posedge D &&& (ENABLE_SD_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_SD_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold D-HL CK-LH
      $hold(posedge CK &&& (ENABLE_SD_AND_NOT_SE_AND_SI === 1'b1),
      negedge D &&& (ENABLE_SD_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // hold D-LH CK-LH
      $hold(posedge CK &&& (ENABLE_SD_AND_NOT_SE_AND_SI === 1'b1),
      posedge D &&& (ENABLE_SD_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // setup D-HL CK-LH
      $setup(negedge D &&& (ENABLE_SD_AND_NOT_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_SD_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // setup D-LH CK-LH
      $setup(posedge D &&& (ENABLE_SD_AND_NOT_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_SD_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // hold SD-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D_AND_NOT_SE_AND_NOT_SI === 1'b1),
      negedge SD &&& (ENABLE_NOT_D_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold SD-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge SD &&& (ENABLE_NOT_D_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup SD-HL CK-LH
      $setup(negedge SD &&& (ENABLE_NOT_D_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup SD-LH CK-LH
      $setup(posedge SD &&& (ENABLE_NOT_D_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold SD-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D_AND_NOT_SE_AND_SI === 1'b1),
      negedge SD &&& (ENABLE_NOT_D_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // hold SD-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D_AND_NOT_SE_AND_SI === 1'b1),
      posedge SD &&& (ENABLE_NOT_D_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // setup SD-HL CK-LH
      $setup(negedge SD &&& (ENABLE_NOT_D_AND_NOT_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // setup SD-LH CK-LH
      $setup(posedge SD &&& (ENABLE_NOT_D_AND_NOT_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // hold SE-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D_AND_NOT_SD_AND_NOT_SI === 1'b1),
      negedge SE &&& (ENABLE_NOT_D_AND_NOT_SD_AND_NOT_SI === 1'b1),1.0);
      
      // hold SE-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D_AND_NOT_SD_AND_NOT_SI === 1'b1),
      posedge SE &&& (ENABLE_NOT_D_AND_NOT_SD_AND_NOT_SI === 1'b1),1.0);
      
      // setup SE-HL CK-LH
      $setup(negedge SE &&& (ENABLE_NOT_D_AND_NOT_SD_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_NOT_SD_AND_NOT_SI === 1'b1),1.0);
      
      // setup SE-LH CK-LH
      $setup(posedge SE &&& (ENABLE_NOT_D_AND_NOT_SD_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_NOT_SD_AND_NOT_SI === 1'b1),1.0);
      
      // hold SE-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D_AND_SD_AND_SI === 1'b1),
      negedge SE &&& (ENABLE_NOT_D_AND_SD_AND_SI === 1'b1),1.0);
      
      // hold SE-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D_AND_SD_AND_SI === 1'b1),
      posedge SE &&& (ENABLE_NOT_D_AND_SD_AND_SI === 1'b1),1.0);
      
      // setup SE-HL CK-LH
      $setup(negedge SE &&& (ENABLE_NOT_D_AND_SD_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_SD_AND_SI === 1'b1),1.0);
      
      // setup SE-LH CK-LH
      $setup(posedge SE &&& (ENABLE_NOT_D_AND_SD_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_SD_AND_SI === 1'b1),1.0);
      
      // hold SE-HL CK-LH
      $hold(posedge CK &&& (ENABLE_D_AND_NOT_SD_AND_NOT_SI === 1'b1),
      negedge SE &&& (ENABLE_D_AND_NOT_SD_AND_NOT_SI === 1'b1),1.0);
      
      // hold SE-LH CK-LH
      $hold(posedge CK &&& (ENABLE_D_AND_NOT_SD_AND_NOT_SI === 1'b1),
      posedge SE &&& (ENABLE_D_AND_NOT_SD_AND_NOT_SI === 1'b1),1.0);
      
      // setup SE-HL CK-LH
      $setup(negedge SE &&& (ENABLE_D_AND_NOT_SD_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_D_AND_NOT_SD_AND_NOT_SI === 1'b1),1.0);
      
      // setup SE-LH CK-LH
      $setup(posedge SE &&& (ENABLE_D_AND_NOT_SD_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_D_AND_NOT_SD_AND_NOT_SI === 1'b1),1.0);
      
      // hold SE-HL CK-LH
      $hold(posedge CK &&& (ENABLE_D_AND_SD_AND_NOT_SI === 1'b1),
      negedge SE &&& (ENABLE_D_AND_SD_AND_NOT_SI === 1'b1),1.0);
      
      // hold SE-LH CK-LH
      $hold(posedge CK &&& (ENABLE_D_AND_SD_AND_NOT_SI === 1'b1),
      posedge SE &&& (ENABLE_D_AND_SD_AND_NOT_SI === 1'b1),1.0);
      
      // setup SE-HL CK-LH
      $setup(negedge SE &&& (ENABLE_D_AND_SD_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_D_AND_SD_AND_NOT_SI === 1'b1),1.0);
      
      // setup SE-LH CK-LH
      $setup(posedge SE &&& (ENABLE_D_AND_SD_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_D_AND_SD_AND_NOT_SI === 1'b1),1.0);
      
      // hold SI-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D_AND_NOT_SD_AND_SE === 1'b1),
      negedge SI &&& (ENABLE_NOT_D_AND_NOT_SD_AND_SE === 1'b1),1.0);
      
      // hold SI-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D_AND_NOT_SD_AND_SE === 1'b1),
      posedge SI &&& (ENABLE_NOT_D_AND_NOT_SD_AND_SE === 1'b1),1.0);
      
      // setup SI-HL CK-LH
      $setup(negedge SI &&& (ENABLE_NOT_D_AND_NOT_SD_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_NOT_SD_AND_SE === 1'b1),1.0);
      
      // setup SI-LH CK-LH
      $setup(posedge SI &&& (ENABLE_NOT_D_AND_NOT_SD_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_NOT_SD_AND_SE === 1'b1),1.0);
      
      // hold SI-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D_AND_SD_AND_SE === 1'b1),
      negedge SI &&& (ENABLE_NOT_D_AND_SD_AND_SE === 1'b1),1.0);
      
      // hold SI-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D_AND_SD_AND_SE === 1'b1),
      posedge SI &&& (ENABLE_NOT_D_AND_SD_AND_SE === 1'b1),1.0);
      
      // setup SI-HL CK-LH
      $setup(negedge SI &&& (ENABLE_NOT_D_AND_SD_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_SD_AND_SE === 1'b1),1.0);
      
      // setup SI-LH CK-LH
      $setup(posedge SI &&& (ENABLE_NOT_D_AND_SD_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_SD_AND_SE === 1'b1),1.0);
      
      // hold SI-HL CK-LH
      $hold(posedge CK &&& (ENABLE_D_AND_NOT_SD_AND_SE === 1'b1),
      negedge SI &&& (ENABLE_D_AND_NOT_SD_AND_SE === 1'b1),1.0);
      
      // hold SI-LH CK-LH
      $hold(posedge CK &&& (ENABLE_D_AND_NOT_SD_AND_SE === 1'b1),
      posedge SI &&& (ENABLE_D_AND_NOT_SD_AND_SE === 1'b1),1.0);
      
      // setup SI-HL CK-LH
      $setup(negedge SI &&& (ENABLE_D_AND_NOT_SD_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_D_AND_NOT_SD_AND_SE === 1'b1),1.0);
      
      // setup SI-LH CK-LH
      $setup(posedge SI &&& (ENABLE_D_AND_NOT_SD_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_D_AND_NOT_SD_AND_SE === 1'b1),1.0);
      
      // hold SI-HL CK-LH
      $hold(posedge CK &&& (ENABLE_D_AND_SD_AND_SE === 1'b1),
      negedge SI &&& (ENABLE_D_AND_SD_AND_SE === 1'b1),1.0);
      
      // hold SI-LH CK-LH
      $hold(posedge CK &&& (ENABLE_D_AND_SD_AND_SE === 1'b1),
      posedge SI &&& (ENABLE_D_AND_SD_AND_SE === 1'b1),1.0);
      
      // setup SI-HL CK-LH
      $setup(negedge SI &&& (ENABLE_D_AND_SD_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_D_AND_SD_AND_SE === 1'b1),1.0);
      
      // setup SI-LH CK-LH
      $setup(posedge SI &&& (ENABLE_D_AND_SD_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_D_AND_SD_AND_SE === 1'b1),1.0);
      
      // mpw CK_lh 
      $width(posedge CK,1.0,0);
      
      // mpw CK_hl 
      $width(negedge CK,1.0,0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_FSDPSYNSBQ_V2_1( Q, CK, D, SI, SE, SD );
input CK, D, SD, SE, SI;
output Q;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_FSDPSYNSBQ_V2_1_func SAEDRVT14_FSDPSYNSBQ_V2_1_behav_inst(.Q(Q),.CK(CK),.D(D),.SI(SI),.SE(SE),.SD(SD));
`else
   SAEDRVT14_FSDPSYNSBQ_V2_1_func SAEDRVT14_FSDPSYNSBQ_V2_1_inst(.Q(Q),.CK(CK),.D(D),.SI(SI),.SE(SE),.SD(SD));
   // spec_gates_begin
   not MGM_G0(MGM_W0,D);
   not MGM_G1(MGM_W1,SD);
   and MGM_G2(MGM_W2,MGM_W1,MGM_W0);
   not MGM_G3(MGM_W3,SE);
   and MGM_G4(MGM_W4,MGM_W3,MGM_W2);
   not MGM_G5(MGM_W5,SI);
   and MGM_G6(ENABLE_NOT_D_AND_NOT_SD_AND_NOT_SE_AND_NOT_SI,MGM_W5,MGM_W4);
   not MGM_G7(MGM_W6,D);
   not MGM_G8(MGM_W7,SD);
   and MGM_G9(MGM_W8,MGM_W7,MGM_W6);
   not MGM_G10(MGM_W9,SE);
   and MGM_G11(MGM_W10,MGM_W9,MGM_W8);
   and MGM_G12(ENABLE_NOT_D_AND_NOT_SD_AND_NOT_SE_AND_SI,SI,MGM_W10);
   not MGM_G13(MGM_W11,D);
   not MGM_G14(MGM_W12,SD);
   and MGM_G15(MGM_W13,MGM_W12,MGM_W11);
   and MGM_G16(MGM_W14,SE,MGM_W13);
   not MGM_G17(MGM_W15,SI);
   and MGM_G18(ENABLE_NOT_D_AND_NOT_SD_AND_SE_AND_NOT_SI,MGM_W15,MGM_W14);
   not MGM_G19(MGM_W16,D);
   not MGM_G20(MGM_W17,SD);
   and MGM_G21(MGM_W18,MGM_W17,MGM_W16);
   and MGM_G22(MGM_W19,SE,MGM_W18);
   and MGM_G23(ENABLE_NOT_D_AND_NOT_SD_AND_SE_AND_SI,SI,MGM_W19);
   not MGM_G24(MGM_W20,D);
   and MGM_G25(MGM_W21,SD,MGM_W20);
   not MGM_G26(MGM_W22,SE);
   and MGM_G27(MGM_W23,MGM_W22,MGM_W21);
   not MGM_G28(MGM_W24,SI);
   and MGM_G29(ENABLE_NOT_D_AND_SD_AND_NOT_SE_AND_NOT_SI,MGM_W24,MGM_W23);
   not MGM_G30(MGM_W25,D);
   and MGM_G31(MGM_W26,SD,MGM_W25);
   not MGM_G32(MGM_W27,SE);
   and MGM_G33(MGM_W28,MGM_W27,MGM_W26);
   and MGM_G34(ENABLE_NOT_D_AND_SD_AND_NOT_SE_AND_SI,SI,MGM_W28);
   not MGM_G35(MGM_W29,D);
   and MGM_G36(MGM_W30,SD,MGM_W29);
   and MGM_G37(MGM_W31,SE,MGM_W30);
   not MGM_G38(MGM_W32,SI);
   and MGM_G39(ENABLE_NOT_D_AND_SD_AND_SE_AND_NOT_SI,MGM_W32,MGM_W31);
   not MGM_G40(MGM_W33,D);
   and MGM_G41(MGM_W34,SD,MGM_W33);
   and MGM_G42(MGM_W35,SE,MGM_W34);
   and MGM_G43(ENABLE_NOT_D_AND_SD_AND_SE_AND_SI,SI,MGM_W35);
   not MGM_G44(MGM_W36,SD);
   and MGM_G45(MGM_W37,MGM_W36,D);
   not MGM_G46(MGM_W38,SE);
   and MGM_G47(MGM_W39,MGM_W38,MGM_W37);
   not MGM_G48(MGM_W40,SI);
   and MGM_G49(ENABLE_D_AND_NOT_SD_AND_NOT_SE_AND_NOT_SI,MGM_W40,MGM_W39);
   not MGM_G50(MGM_W41,SD);
   and MGM_G51(MGM_W42,MGM_W41,D);
   not MGM_G52(MGM_W43,SE);
   and MGM_G53(MGM_W44,MGM_W43,MGM_W42);
   and MGM_G54(ENABLE_D_AND_NOT_SD_AND_NOT_SE_AND_SI,SI,MGM_W44);
   not MGM_G55(MGM_W45,SD);
   and MGM_G56(MGM_W46,MGM_W45,D);
   and MGM_G57(MGM_W47,SE,MGM_W46);
   not MGM_G58(MGM_W48,SI);
   and MGM_G59(ENABLE_D_AND_NOT_SD_AND_SE_AND_NOT_SI,MGM_W48,MGM_W47);
   not MGM_G60(MGM_W49,SD);
   and MGM_G61(MGM_W50,MGM_W49,D);
   and MGM_G62(MGM_W51,SE,MGM_W50);
   and MGM_G63(ENABLE_D_AND_NOT_SD_AND_SE_AND_SI,SI,MGM_W51);
   and MGM_G64(MGM_W52,SD,D);
   not MGM_G65(MGM_W53,SE);
   and MGM_G66(MGM_W54,MGM_W53,MGM_W52);
   not MGM_G67(MGM_W55,SI);
   and MGM_G68(ENABLE_D_AND_SD_AND_NOT_SE_AND_NOT_SI,MGM_W55,MGM_W54);
   and MGM_G69(MGM_W56,SD,D);
   not MGM_G70(MGM_W57,SE);
   and MGM_G71(MGM_W58,MGM_W57,MGM_W56);
   and MGM_G72(ENABLE_D_AND_SD_AND_NOT_SE_AND_SI,SI,MGM_W58);
   and MGM_G73(MGM_W59,SD,D);
   and MGM_G74(MGM_W60,SE,MGM_W59);
   not MGM_G75(MGM_W61,SI);
   and MGM_G76(ENABLE_D_AND_SD_AND_SE_AND_NOT_SI,MGM_W61,MGM_W60);
   and MGM_G77(MGM_W62,SD,D);
   and MGM_G78(MGM_W63,SE,MGM_W62);
   and MGM_G79(ENABLE_D_AND_SD_AND_SE_AND_SI,SI,MGM_W63);
   not MGM_G80(MGM_W64,SE);
   and MGM_G81(MGM_W65,MGM_W64,SD);
   not MGM_G82(MGM_W66,SI);
   and MGM_G83(ENABLE_SD_AND_NOT_SE_AND_NOT_SI,MGM_W66,MGM_W65);
   not MGM_G84(MGM_W67,SE);
   and MGM_G85(MGM_W68,MGM_W67,SD);
   and MGM_G86(ENABLE_SD_AND_NOT_SE_AND_SI,SI,MGM_W68);
   not MGM_G87(MGM_W69,D);
   not MGM_G88(MGM_W70,SE);
   and MGM_G89(MGM_W71,MGM_W70,MGM_W69);
   not MGM_G90(MGM_W72,SI);
   and MGM_G91(ENABLE_NOT_D_AND_NOT_SE_AND_NOT_SI,MGM_W72,MGM_W71);
   not MGM_G92(MGM_W73,D);
   not MGM_G93(MGM_W74,SE);
   and MGM_G94(MGM_W75,MGM_W74,MGM_W73);
   and MGM_G95(ENABLE_NOT_D_AND_NOT_SE_AND_SI,SI,MGM_W75);
   not MGM_G96(MGM_W76,D);
   not MGM_G97(MGM_W77,SD);
   and MGM_G98(MGM_W78,MGM_W77,MGM_W76);
   not MGM_G99(MGM_W79,SI);
   and MGM_G100(ENABLE_NOT_D_AND_NOT_SD_AND_NOT_SI,MGM_W79,MGM_W78);
   not MGM_G101(MGM_W80,D);
   and MGM_G102(MGM_W81,SD,MGM_W80);
   and MGM_G103(ENABLE_NOT_D_AND_SD_AND_SI,SI,MGM_W81);
   not MGM_G104(MGM_W82,SD);
   and MGM_G105(MGM_W83,MGM_W82,D);
   not MGM_G106(MGM_W84,SI);
   and MGM_G107(ENABLE_D_AND_NOT_SD_AND_NOT_SI,MGM_W84,MGM_W83);
   and MGM_G108(MGM_W85,SD,D);
   not MGM_G109(MGM_W86,SI);
   and MGM_G110(ENABLE_D_AND_SD_AND_NOT_SI,MGM_W86,MGM_W85);
   not MGM_G111(MGM_W87,D);
   not MGM_G112(MGM_W88,SD);
   and MGM_G113(MGM_W89,MGM_W88,MGM_W87);
   and MGM_G114(ENABLE_NOT_D_AND_NOT_SD_AND_SE,SE,MGM_W89);
   not MGM_G115(MGM_W90,D);
   and MGM_G116(MGM_W91,SD,MGM_W90);
   and MGM_G117(ENABLE_NOT_D_AND_SD_AND_SE,SE,MGM_W91);
   not MGM_G118(MGM_W92,SD);
   and MGM_G119(MGM_W93,MGM_W92,D);
   and MGM_G120(ENABLE_D_AND_NOT_SD_AND_SE,SE,MGM_W93);
   and MGM_G121(MGM_W94,SD,D);
   and MGM_G122(ENABLE_D_AND_SD_AND_SE,SE,MGM_W94);
   // spec_gates_end
   // specify_block_begin
   specify

      if(D===1'b0 && SD===1'b0 && SE===1'b1 && SI===1'b1)
      // seq arc CK --> Q
      (posedge CK => (Q : D))  = (1.0,1.0);
      
      if(D===1'b1 && SD===1'b0 && SE===1'b0 && SI===1'b1)
      // seq arc CK --> Q
      (posedge CK => (Q : D))  = (1.0,1.0);
      
      if(D===1'b1 && SD===1'b0 && SE===1'b1 && SI===1'b1)
      // seq arc CK --> Q
      (posedge CK => (Q : D))  = (1.0,1.0);
      
      if(D===1'b1 && SD===1'b1 && SE===1'b0 && SI===1'b1)
      // seq arc CK --> Q
      (posedge CK => (Q : D))  = (1.0,1.0);
      
      if(D===1'b0 && SD===1'b0 && SI===1'b0)
      // seq arc CK --> Q
      (posedge CK => (Q : SE))  = (1.0,1.0);
      
      if(D===1'b0 && SE===1'b0 && SI===1'b1)
      // seq arc CK --> Q
      (posedge CK => (Q : SD))  = (1.0,1.0);
      
      if(D===1'b0 && SD===1'b1 && SE===1'b1)
      // seq arc CK --> Q
      (posedge CK => (Q : SI))  = (1.0,1.0);
      
      if(D===1'b1 && SD===1'b0 && SI===1'b0)
      // seq arc CK --> Q
      (posedge CK => (Q : SE))  = (1.0,1.0);
      
      if(D===1'b1 && SD===1'b1 && SE===1'b1)
      // seq arc CK --> Q
      (posedge CK => (Q : SI))  = (1.0,1.0);
      
      if(SD===1'b1 && SE===1'b0 && SI===1'b0)
      // seq arc CK --> Q
      (posedge CK => (Q : D))  = (1.0,1.0);
      
      ifnone
      // seq arc CK --> Q
      (posedge CK => (Q : D))  = (1.0,1.0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_NOT_SD_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_NOT_SD_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_NOT_SD_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_NOT_SD_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_NOT_SD_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_NOT_SD_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_NOT_SD_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_NOT_SD_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_SD_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_SD_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_SD_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_SD_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_SD_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_SD_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_SD_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_SD_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_NOT_SD_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_NOT_SD_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_NOT_SD_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_NOT_SD_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_NOT_SD_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_NOT_SD_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_NOT_SD_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_NOT_SD_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_SD_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_SD_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_SD_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_SD_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_SD_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_SD_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_SD_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_SD_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      // hold D-HL CK-LH
      $hold(posedge CK &&& (ENABLE_SD_AND_NOT_SE_AND_NOT_SI === 1'b1),
      negedge D &&& (ENABLE_SD_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold D-LH CK-LH
      $hold(posedge CK &&& (ENABLE_SD_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge D &&& (ENABLE_SD_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup D-HL CK-LH
      $setup(negedge D &&& (ENABLE_SD_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_SD_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup D-LH CK-LH
      $setup(posedge D &&& (ENABLE_SD_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_SD_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold D-HL CK-LH
      $hold(posedge CK &&& (ENABLE_SD_AND_NOT_SE_AND_SI === 1'b1),
      negedge D &&& (ENABLE_SD_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // hold D-LH CK-LH
      $hold(posedge CK &&& (ENABLE_SD_AND_NOT_SE_AND_SI === 1'b1),
      posedge D &&& (ENABLE_SD_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // setup D-HL CK-LH
      $setup(negedge D &&& (ENABLE_SD_AND_NOT_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_SD_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // setup D-LH CK-LH
      $setup(posedge D &&& (ENABLE_SD_AND_NOT_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_SD_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // hold SD-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D_AND_NOT_SE_AND_NOT_SI === 1'b1),
      negedge SD &&& (ENABLE_NOT_D_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold SD-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge SD &&& (ENABLE_NOT_D_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup SD-HL CK-LH
      $setup(negedge SD &&& (ENABLE_NOT_D_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup SD-LH CK-LH
      $setup(posedge SD &&& (ENABLE_NOT_D_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold SD-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D_AND_NOT_SE_AND_SI === 1'b1),
      negedge SD &&& (ENABLE_NOT_D_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // hold SD-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D_AND_NOT_SE_AND_SI === 1'b1),
      posedge SD &&& (ENABLE_NOT_D_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // setup SD-HL CK-LH
      $setup(negedge SD &&& (ENABLE_NOT_D_AND_NOT_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // setup SD-LH CK-LH
      $setup(posedge SD &&& (ENABLE_NOT_D_AND_NOT_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // hold SE-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D_AND_NOT_SD_AND_NOT_SI === 1'b1),
      negedge SE &&& (ENABLE_NOT_D_AND_NOT_SD_AND_NOT_SI === 1'b1),1.0);
      
      // hold SE-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D_AND_NOT_SD_AND_NOT_SI === 1'b1),
      posedge SE &&& (ENABLE_NOT_D_AND_NOT_SD_AND_NOT_SI === 1'b1),1.0);
      
      // setup SE-HL CK-LH
      $setup(negedge SE &&& (ENABLE_NOT_D_AND_NOT_SD_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_NOT_SD_AND_NOT_SI === 1'b1),1.0);
      
      // setup SE-LH CK-LH
      $setup(posedge SE &&& (ENABLE_NOT_D_AND_NOT_SD_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_NOT_SD_AND_NOT_SI === 1'b1),1.0);
      
      // hold SE-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D_AND_SD_AND_SI === 1'b1),
      negedge SE &&& (ENABLE_NOT_D_AND_SD_AND_SI === 1'b1),1.0);
      
      // hold SE-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D_AND_SD_AND_SI === 1'b1),
      posedge SE &&& (ENABLE_NOT_D_AND_SD_AND_SI === 1'b1),1.0);
      
      // setup SE-HL CK-LH
      $setup(negedge SE &&& (ENABLE_NOT_D_AND_SD_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_SD_AND_SI === 1'b1),1.0);
      
      // setup SE-LH CK-LH
      $setup(posedge SE &&& (ENABLE_NOT_D_AND_SD_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_SD_AND_SI === 1'b1),1.0);
      
      // hold SE-HL CK-LH
      $hold(posedge CK &&& (ENABLE_D_AND_NOT_SD_AND_NOT_SI === 1'b1),
      negedge SE &&& (ENABLE_D_AND_NOT_SD_AND_NOT_SI === 1'b1),1.0);
      
      // hold SE-LH CK-LH
      $hold(posedge CK &&& (ENABLE_D_AND_NOT_SD_AND_NOT_SI === 1'b1),
      posedge SE &&& (ENABLE_D_AND_NOT_SD_AND_NOT_SI === 1'b1),1.0);
      
      // setup SE-HL CK-LH
      $setup(negedge SE &&& (ENABLE_D_AND_NOT_SD_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_D_AND_NOT_SD_AND_NOT_SI === 1'b1),1.0);
      
      // setup SE-LH CK-LH
      $setup(posedge SE &&& (ENABLE_D_AND_NOT_SD_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_D_AND_NOT_SD_AND_NOT_SI === 1'b1),1.0);
      
      // hold SE-HL CK-LH
      $hold(posedge CK &&& (ENABLE_D_AND_SD_AND_NOT_SI === 1'b1),
      negedge SE &&& (ENABLE_D_AND_SD_AND_NOT_SI === 1'b1),1.0);
      
      // hold SE-LH CK-LH
      $hold(posedge CK &&& (ENABLE_D_AND_SD_AND_NOT_SI === 1'b1),
      posedge SE &&& (ENABLE_D_AND_SD_AND_NOT_SI === 1'b1),1.0);
      
      // setup SE-HL CK-LH
      $setup(negedge SE &&& (ENABLE_D_AND_SD_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_D_AND_SD_AND_NOT_SI === 1'b1),1.0);
      
      // setup SE-LH CK-LH
      $setup(posedge SE &&& (ENABLE_D_AND_SD_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_D_AND_SD_AND_NOT_SI === 1'b1),1.0);
      
      // hold SI-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D_AND_NOT_SD_AND_SE === 1'b1),
      negedge SI &&& (ENABLE_NOT_D_AND_NOT_SD_AND_SE === 1'b1),1.0);
      
      // hold SI-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D_AND_NOT_SD_AND_SE === 1'b1),
      posedge SI &&& (ENABLE_NOT_D_AND_NOT_SD_AND_SE === 1'b1),1.0);
      
      // setup SI-HL CK-LH
      $setup(negedge SI &&& (ENABLE_NOT_D_AND_NOT_SD_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_NOT_SD_AND_SE === 1'b1),1.0);
      
      // setup SI-LH CK-LH
      $setup(posedge SI &&& (ENABLE_NOT_D_AND_NOT_SD_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_NOT_SD_AND_SE === 1'b1),1.0);
      
      // hold SI-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D_AND_SD_AND_SE === 1'b1),
      negedge SI &&& (ENABLE_NOT_D_AND_SD_AND_SE === 1'b1),1.0);
      
      // hold SI-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D_AND_SD_AND_SE === 1'b1),
      posedge SI &&& (ENABLE_NOT_D_AND_SD_AND_SE === 1'b1),1.0);
      
      // setup SI-HL CK-LH
      $setup(negedge SI &&& (ENABLE_NOT_D_AND_SD_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_SD_AND_SE === 1'b1),1.0);
      
      // setup SI-LH CK-LH
      $setup(posedge SI &&& (ENABLE_NOT_D_AND_SD_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_SD_AND_SE === 1'b1),1.0);
      
      // hold SI-HL CK-LH
      $hold(posedge CK &&& (ENABLE_D_AND_NOT_SD_AND_SE === 1'b1),
      negedge SI &&& (ENABLE_D_AND_NOT_SD_AND_SE === 1'b1),1.0);
      
      // hold SI-LH CK-LH
      $hold(posedge CK &&& (ENABLE_D_AND_NOT_SD_AND_SE === 1'b1),
      posedge SI &&& (ENABLE_D_AND_NOT_SD_AND_SE === 1'b1),1.0);
      
      // setup SI-HL CK-LH
      $setup(negedge SI &&& (ENABLE_D_AND_NOT_SD_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_D_AND_NOT_SD_AND_SE === 1'b1),1.0);
      
      // setup SI-LH CK-LH
      $setup(posedge SI &&& (ENABLE_D_AND_NOT_SD_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_D_AND_NOT_SD_AND_SE === 1'b1),1.0);
      
      // hold SI-HL CK-LH
      $hold(posedge CK &&& (ENABLE_D_AND_SD_AND_SE === 1'b1),
      negedge SI &&& (ENABLE_D_AND_SD_AND_SE === 1'b1),1.0);
      
      // hold SI-LH CK-LH
      $hold(posedge CK &&& (ENABLE_D_AND_SD_AND_SE === 1'b1),
      posedge SI &&& (ENABLE_D_AND_SD_AND_SE === 1'b1),1.0);
      
      // setup SI-HL CK-LH
      $setup(negedge SI &&& (ENABLE_D_AND_SD_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_D_AND_SD_AND_SE === 1'b1),1.0);
      
      // setup SI-LH CK-LH
      $setup(posedge SI &&& (ENABLE_D_AND_SD_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_D_AND_SD_AND_SE === 1'b1),1.0);
      
      // mpw CK_lh 
      $width(posedge CK,1.0,0);
      
      // mpw CK_hl 
      $width(negedge CK,1.0,0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_FSDPSYNSBQ_V2_2( Q, CK, D, SI, SE, SD );
input CK, D, SD, SE, SI;
output Q;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_FSDPSYNSBQ_V2_2_func SAEDRVT14_FSDPSYNSBQ_V2_2_behav_inst(.Q(Q),.CK(CK),.D(D),.SI(SI),.SE(SE),.SD(SD));
`else
   SAEDRVT14_FSDPSYNSBQ_V2_2_func SAEDRVT14_FSDPSYNSBQ_V2_2_inst(.Q(Q),.CK(CK),.D(D),.SI(SI),.SE(SE),.SD(SD));
   // spec_gates_begin
   not MGM_G0(MGM_W0,D);
   not MGM_G1(MGM_W1,SD);
   and MGM_G2(MGM_W2,MGM_W1,MGM_W0);
   not MGM_G3(MGM_W3,SE);
   and MGM_G4(MGM_W4,MGM_W3,MGM_W2);
   not MGM_G5(MGM_W5,SI);
   and MGM_G6(ENABLE_NOT_D_AND_NOT_SD_AND_NOT_SE_AND_NOT_SI,MGM_W5,MGM_W4);
   not MGM_G7(MGM_W6,D);
   not MGM_G8(MGM_W7,SD);
   and MGM_G9(MGM_W8,MGM_W7,MGM_W6);
   not MGM_G10(MGM_W9,SE);
   and MGM_G11(MGM_W10,MGM_W9,MGM_W8);
   and MGM_G12(ENABLE_NOT_D_AND_NOT_SD_AND_NOT_SE_AND_SI,SI,MGM_W10);
   not MGM_G13(MGM_W11,D);
   not MGM_G14(MGM_W12,SD);
   and MGM_G15(MGM_W13,MGM_W12,MGM_W11);
   and MGM_G16(MGM_W14,SE,MGM_W13);
   not MGM_G17(MGM_W15,SI);
   and MGM_G18(ENABLE_NOT_D_AND_NOT_SD_AND_SE_AND_NOT_SI,MGM_W15,MGM_W14);
   not MGM_G19(MGM_W16,D);
   not MGM_G20(MGM_W17,SD);
   and MGM_G21(MGM_W18,MGM_W17,MGM_W16);
   and MGM_G22(MGM_W19,SE,MGM_W18);
   and MGM_G23(ENABLE_NOT_D_AND_NOT_SD_AND_SE_AND_SI,SI,MGM_W19);
   not MGM_G24(MGM_W20,D);
   and MGM_G25(MGM_W21,SD,MGM_W20);
   not MGM_G26(MGM_W22,SE);
   and MGM_G27(MGM_W23,MGM_W22,MGM_W21);
   not MGM_G28(MGM_W24,SI);
   and MGM_G29(ENABLE_NOT_D_AND_SD_AND_NOT_SE_AND_NOT_SI,MGM_W24,MGM_W23);
   not MGM_G30(MGM_W25,D);
   and MGM_G31(MGM_W26,SD,MGM_W25);
   not MGM_G32(MGM_W27,SE);
   and MGM_G33(MGM_W28,MGM_W27,MGM_W26);
   and MGM_G34(ENABLE_NOT_D_AND_SD_AND_NOT_SE_AND_SI,SI,MGM_W28);
   not MGM_G35(MGM_W29,D);
   and MGM_G36(MGM_W30,SD,MGM_W29);
   and MGM_G37(MGM_W31,SE,MGM_W30);
   not MGM_G38(MGM_W32,SI);
   and MGM_G39(ENABLE_NOT_D_AND_SD_AND_SE_AND_NOT_SI,MGM_W32,MGM_W31);
   not MGM_G40(MGM_W33,D);
   and MGM_G41(MGM_W34,SD,MGM_W33);
   and MGM_G42(MGM_W35,SE,MGM_W34);
   and MGM_G43(ENABLE_NOT_D_AND_SD_AND_SE_AND_SI,SI,MGM_W35);
   not MGM_G44(MGM_W36,SD);
   and MGM_G45(MGM_W37,MGM_W36,D);
   not MGM_G46(MGM_W38,SE);
   and MGM_G47(MGM_W39,MGM_W38,MGM_W37);
   not MGM_G48(MGM_W40,SI);
   and MGM_G49(ENABLE_D_AND_NOT_SD_AND_NOT_SE_AND_NOT_SI,MGM_W40,MGM_W39);
   not MGM_G50(MGM_W41,SD);
   and MGM_G51(MGM_W42,MGM_W41,D);
   not MGM_G52(MGM_W43,SE);
   and MGM_G53(MGM_W44,MGM_W43,MGM_W42);
   and MGM_G54(ENABLE_D_AND_NOT_SD_AND_NOT_SE_AND_SI,SI,MGM_W44);
   not MGM_G55(MGM_W45,SD);
   and MGM_G56(MGM_W46,MGM_W45,D);
   and MGM_G57(MGM_W47,SE,MGM_W46);
   not MGM_G58(MGM_W48,SI);
   and MGM_G59(ENABLE_D_AND_NOT_SD_AND_SE_AND_NOT_SI,MGM_W48,MGM_W47);
   not MGM_G60(MGM_W49,SD);
   and MGM_G61(MGM_W50,MGM_W49,D);
   and MGM_G62(MGM_W51,SE,MGM_W50);
   and MGM_G63(ENABLE_D_AND_NOT_SD_AND_SE_AND_SI,SI,MGM_W51);
   and MGM_G64(MGM_W52,SD,D);
   not MGM_G65(MGM_W53,SE);
   and MGM_G66(MGM_W54,MGM_W53,MGM_W52);
   not MGM_G67(MGM_W55,SI);
   and MGM_G68(ENABLE_D_AND_SD_AND_NOT_SE_AND_NOT_SI,MGM_W55,MGM_W54);
   and MGM_G69(MGM_W56,SD,D);
   not MGM_G70(MGM_W57,SE);
   and MGM_G71(MGM_W58,MGM_W57,MGM_W56);
   and MGM_G72(ENABLE_D_AND_SD_AND_NOT_SE_AND_SI,SI,MGM_W58);
   and MGM_G73(MGM_W59,SD,D);
   and MGM_G74(MGM_W60,SE,MGM_W59);
   not MGM_G75(MGM_W61,SI);
   and MGM_G76(ENABLE_D_AND_SD_AND_SE_AND_NOT_SI,MGM_W61,MGM_W60);
   and MGM_G77(MGM_W62,SD,D);
   and MGM_G78(MGM_W63,SE,MGM_W62);
   and MGM_G79(ENABLE_D_AND_SD_AND_SE_AND_SI,SI,MGM_W63);
   not MGM_G80(MGM_W64,SE);
   and MGM_G81(MGM_W65,MGM_W64,SD);
   not MGM_G82(MGM_W66,SI);
   and MGM_G83(ENABLE_SD_AND_NOT_SE_AND_NOT_SI,MGM_W66,MGM_W65);
   not MGM_G84(MGM_W67,SE);
   and MGM_G85(MGM_W68,MGM_W67,SD);
   and MGM_G86(ENABLE_SD_AND_NOT_SE_AND_SI,SI,MGM_W68);
   not MGM_G87(MGM_W69,D);
   not MGM_G88(MGM_W70,SE);
   and MGM_G89(MGM_W71,MGM_W70,MGM_W69);
   not MGM_G90(MGM_W72,SI);
   and MGM_G91(ENABLE_NOT_D_AND_NOT_SE_AND_NOT_SI,MGM_W72,MGM_W71);
   not MGM_G92(MGM_W73,D);
   not MGM_G93(MGM_W74,SE);
   and MGM_G94(MGM_W75,MGM_W74,MGM_W73);
   and MGM_G95(ENABLE_NOT_D_AND_NOT_SE_AND_SI,SI,MGM_W75);
   not MGM_G96(MGM_W76,D);
   not MGM_G97(MGM_W77,SD);
   and MGM_G98(MGM_W78,MGM_W77,MGM_W76);
   not MGM_G99(MGM_W79,SI);
   and MGM_G100(ENABLE_NOT_D_AND_NOT_SD_AND_NOT_SI,MGM_W79,MGM_W78);
   not MGM_G101(MGM_W80,D);
   and MGM_G102(MGM_W81,SD,MGM_W80);
   and MGM_G103(ENABLE_NOT_D_AND_SD_AND_SI,SI,MGM_W81);
   not MGM_G104(MGM_W82,SD);
   and MGM_G105(MGM_W83,MGM_W82,D);
   not MGM_G106(MGM_W84,SI);
   and MGM_G107(ENABLE_D_AND_NOT_SD_AND_NOT_SI,MGM_W84,MGM_W83);
   and MGM_G108(MGM_W85,SD,D);
   not MGM_G109(MGM_W86,SI);
   and MGM_G110(ENABLE_D_AND_SD_AND_NOT_SI,MGM_W86,MGM_W85);
   not MGM_G111(MGM_W87,D);
   not MGM_G112(MGM_W88,SD);
   and MGM_G113(MGM_W89,MGM_W88,MGM_W87);
   and MGM_G114(ENABLE_NOT_D_AND_NOT_SD_AND_SE,SE,MGM_W89);
   not MGM_G115(MGM_W90,D);
   and MGM_G116(MGM_W91,SD,MGM_W90);
   and MGM_G117(ENABLE_NOT_D_AND_SD_AND_SE,SE,MGM_W91);
   not MGM_G118(MGM_W92,SD);
   and MGM_G119(MGM_W93,MGM_W92,D);
   and MGM_G120(ENABLE_D_AND_NOT_SD_AND_SE,SE,MGM_W93);
   and MGM_G121(MGM_W94,SD,D);
   and MGM_G122(ENABLE_D_AND_SD_AND_SE,SE,MGM_W94);
   // spec_gates_end
   // specify_block_begin
   specify

      if(D===1'b0 && SD===1'b0 && SE===1'b1 && SI===1'b1)
      // seq arc CK --> Q
      (posedge CK => (Q : D))  = (1.0,1.0);
      
      if(D===1'b1 && SD===1'b0 && SE===1'b0 && SI===1'b1)
      // seq arc CK --> Q
      (posedge CK => (Q : D))  = (1.0,1.0);
      
      if(D===1'b1 && SD===1'b0 && SE===1'b1 && SI===1'b1)
      // seq arc CK --> Q
      (posedge CK => (Q : D))  = (1.0,1.0);
      
      if(D===1'b1 && SD===1'b1 && SE===1'b0 && SI===1'b1)
      // seq arc CK --> Q
      (posedge CK => (Q : D))  = (1.0,1.0);
      
      if(D===1'b0 && SD===1'b0 && SI===1'b0)
      // seq arc CK --> Q
      (posedge CK => (Q : SE))  = (1.0,1.0);
      
      if(D===1'b0 && SE===1'b0 && SI===1'b1)
      // seq arc CK --> Q
      (posedge CK => (Q : SD))  = (1.0,1.0);
      
      if(D===1'b0 && SD===1'b1 && SE===1'b1)
      // seq arc CK --> Q
      (posedge CK => (Q : SI))  = (1.0,1.0);
      
      if(D===1'b1 && SD===1'b0 && SI===1'b0)
      // seq arc CK --> Q
      (posedge CK => (Q : SE))  = (1.0,1.0);
      
      if(D===1'b1 && SD===1'b1 && SE===1'b1)
      // seq arc CK --> Q
      (posedge CK => (Q : SI))  = (1.0,1.0);
      
      if(SD===1'b1 && SE===1'b0 && SI===1'b0)
      // seq arc CK --> Q
      (posedge CK => (Q : D))  = (1.0,1.0);
      
      ifnone
      // seq arc CK --> Q
      (posedge CK => (Q : D))  = (1.0,1.0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_NOT_SD_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_NOT_SD_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_NOT_SD_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_NOT_SD_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_NOT_SD_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_NOT_SD_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_NOT_SD_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_NOT_SD_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_SD_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_SD_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_SD_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_SD_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_SD_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_SD_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_SD_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_SD_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_NOT_SD_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_NOT_SD_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_NOT_SD_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_NOT_SD_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_NOT_SD_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_NOT_SD_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_NOT_SD_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_NOT_SD_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_SD_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_SD_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_SD_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_SD_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_SD_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_SD_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_SD_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_SD_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      // hold D-HL CK-LH
      $hold(posedge CK &&& (ENABLE_SD_AND_NOT_SE_AND_NOT_SI === 1'b1),
      negedge D &&& (ENABLE_SD_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold D-LH CK-LH
      $hold(posedge CK &&& (ENABLE_SD_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge D &&& (ENABLE_SD_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup D-HL CK-LH
      $setup(negedge D &&& (ENABLE_SD_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_SD_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup D-LH CK-LH
      $setup(posedge D &&& (ENABLE_SD_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_SD_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold D-HL CK-LH
      $hold(posedge CK &&& (ENABLE_SD_AND_NOT_SE_AND_SI === 1'b1),
      negedge D &&& (ENABLE_SD_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // hold D-LH CK-LH
      $hold(posedge CK &&& (ENABLE_SD_AND_NOT_SE_AND_SI === 1'b1),
      posedge D &&& (ENABLE_SD_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // setup D-HL CK-LH
      $setup(negedge D &&& (ENABLE_SD_AND_NOT_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_SD_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // setup D-LH CK-LH
      $setup(posedge D &&& (ENABLE_SD_AND_NOT_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_SD_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // hold SD-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D_AND_NOT_SE_AND_NOT_SI === 1'b1),
      negedge SD &&& (ENABLE_NOT_D_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold SD-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge SD &&& (ENABLE_NOT_D_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup SD-HL CK-LH
      $setup(negedge SD &&& (ENABLE_NOT_D_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup SD-LH CK-LH
      $setup(posedge SD &&& (ENABLE_NOT_D_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold SD-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D_AND_NOT_SE_AND_SI === 1'b1),
      negedge SD &&& (ENABLE_NOT_D_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // hold SD-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D_AND_NOT_SE_AND_SI === 1'b1),
      posedge SD &&& (ENABLE_NOT_D_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // setup SD-HL CK-LH
      $setup(negedge SD &&& (ENABLE_NOT_D_AND_NOT_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // setup SD-LH CK-LH
      $setup(posedge SD &&& (ENABLE_NOT_D_AND_NOT_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // hold SE-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D_AND_NOT_SD_AND_NOT_SI === 1'b1),
      negedge SE &&& (ENABLE_NOT_D_AND_NOT_SD_AND_NOT_SI === 1'b1),1.0);
      
      // hold SE-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D_AND_NOT_SD_AND_NOT_SI === 1'b1),
      posedge SE &&& (ENABLE_NOT_D_AND_NOT_SD_AND_NOT_SI === 1'b1),1.0);
      
      // setup SE-HL CK-LH
      $setup(negedge SE &&& (ENABLE_NOT_D_AND_NOT_SD_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_NOT_SD_AND_NOT_SI === 1'b1),1.0);
      
      // setup SE-LH CK-LH
      $setup(posedge SE &&& (ENABLE_NOT_D_AND_NOT_SD_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_NOT_SD_AND_NOT_SI === 1'b1),1.0);
      
      // hold SE-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D_AND_SD_AND_SI === 1'b1),
      negedge SE &&& (ENABLE_NOT_D_AND_SD_AND_SI === 1'b1),1.0);
      
      // hold SE-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D_AND_SD_AND_SI === 1'b1),
      posedge SE &&& (ENABLE_NOT_D_AND_SD_AND_SI === 1'b1),1.0);
      
      // setup SE-HL CK-LH
      $setup(negedge SE &&& (ENABLE_NOT_D_AND_SD_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_SD_AND_SI === 1'b1),1.0);
      
      // setup SE-LH CK-LH
      $setup(posedge SE &&& (ENABLE_NOT_D_AND_SD_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_SD_AND_SI === 1'b1),1.0);
      
      // hold SE-HL CK-LH
      $hold(posedge CK &&& (ENABLE_D_AND_NOT_SD_AND_NOT_SI === 1'b1),
      negedge SE &&& (ENABLE_D_AND_NOT_SD_AND_NOT_SI === 1'b1),1.0);
      
      // hold SE-LH CK-LH
      $hold(posedge CK &&& (ENABLE_D_AND_NOT_SD_AND_NOT_SI === 1'b1),
      posedge SE &&& (ENABLE_D_AND_NOT_SD_AND_NOT_SI === 1'b1),1.0);
      
      // setup SE-HL CK-LH
      $setup(negedge SE &&& (ENABLE_D_AND_NOT_SD_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_D_AND_NOT_SD_AND_NOT_SI === 1'b1),1.0);
      
      // setup SE-LH CK-LH
      $setup(posedge SE &&& (ENABLE_D_AND_NOT_SD_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_D_AND_NOT_SD_AND_NOT_SI === 1'b1),1.0);
      
      // hold SE-HL CK-LH
      $hold(posedge CK &&& (ENABLE_D_AND_SD_AND_NOT_SI === 1'b1),
      negedge SE &&& (ENABLE_D_AND_SD_AND_NOT_SI === 1'b1),1.0);
      
      // hold SE-LH CK-LH
      $hold(posedge CK &&& (ENABLE_D_AND_SD_AND_NOT_SI === 1'b1),
      posedge SE &&& (ENABLE_D_AND_SD_AND_NOT_SI === 1'b1),1.0);
      
      // setup SE-HL CK-LH
      $setup(negedge SE &&& (ENABLE_D_AND_SD_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_D_AND_SD_AND_NOT_SI === 1'b1),1.0);
      
      // setup SE-LH CK-LH
      $setup(posedge SE &&& (ENABLE_D_AND_SD_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_D_AND_SD_AND_NOT_SI === 1'b1),1.0);
      
      // hold SI-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D_AND_NOT_SD_AND_SE === 1'b1),
      negedge SI &&& (ENABLE_NOT_D_AND_NOT_SD_AND_SE === 1'b1),1.0);
      
      // hold SI-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D_AND_NOT_SD_AND_SE === 1'b1),
      posedge SI &&& (ENABLE_NOT_D_AND_NOT_SD_AND_SE === 1'b1),1.0);
      
      // setup SI-HL CK-LH
      $setup(negedge SI &&& (ENABLE_NOT_D_AND_NOT_SD_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_NOT_SD_AND_SE === 1'b1),1.0);
      
      // setup SI-LH CK-LH
      $setup(posedge SI &&& (ENABLE_NOT_D_AND_NOT_SD_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_NOT_SD_AND_SE === 1'b1),1.0);
      
      // hold SI-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D_AND_SD_AND_SE === 1'b1),
      negedge SI &&& (ENABLE_NOT_D_AND_SD_AND_SE === 1'b1),1.0);
      
      // hold SI-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D_AND_SD_AND_SE === 1'b1),
      posedge SI &&& (ENABLE_NOT_D_AND_SD_AND_SE === 1'b1),1.0);
      
      // setup SI-HL CK-LH
      $setup(negedge SI &&& (ENABLE_NOT_D_AND_SD_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_SD_AND_SE === 1'b1),1.0);
      
      // setup SI-LH CK-LH
      $setup(posedge SI &&& (ENABLE_NOT_D_AND_SD_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_SD_AND_SE === 1'b1),1.0);
      
      // hold SI-HL CK-LH
      $hold(posedge CK &&& (ENABLE_D_AND_NOT_SD_AND_SE === 1'b1),
      negedge SI &&& (ENABLE_D_AND_NOT_SD_AND_SE === 1'b1),1.0);
      
      // hold SI-LH CK-LH
      $hold(posedge CK &&& (ENABLE_D_AND_NOT_SD_AND_SE === 1'b1),
      posedge SI &&& (ENABLE_D_AND_NOT_SD_AND_SE === 1'b1),1.0);
      
      // setup SI-HL CK-LH
      $setup(negedge SI &&& (ENABLE_D_AND_NOT_SD_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_D_AND_NOT_SD_AND_SE === 1'b1),1.0);
      
      // setup SI-LH CK-LH
      $setup(posedge SI &&& (ENABLE_D_AND_NOT_SD_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_D_AND_NOT_SD_AND_SE === 1'b1),1.0);
      
      // hold SI-HL CK-LH
      $hold(posedge CK &&& (ENABLE_D_AND_SD_AND_SE === 1'b1),
      negedge SI &&& (ENABLE_D_AND_SD_AND_SE === 1'b1),1.0);
      
      // hold SI-LH CK-LH
      $hold(posedge CK &&& (ENABLE_D_AND_SD_AND_SE === 1'b1),
      posedge SI &&& (ENABLE_D_AND_SD_AND_SE === 1'b1),1.0);
      
      // setup SI-HL CK-LH
      $setup(negedge SI &&& (ENABLE_D_AND_SD_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_D_AND_SD_AND_SE === 1'b1),1.0);
      
      // setup SI-LH CK-LH
      $setup(posedge SI &&& (ENABLE_D_AND_SD_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_D_AND_SD_AND_SE === 1'b1),1.0);
      
      // mpw CK_lh 
      $width(posedge CK,1.0,0);
      
      // mpw CK_hl 
      $width(negedge CK,1.0,0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_FSDPSYNSBQ_V2_4( Q, CK, D, SI, SE, SD );
input CK, D, SD, SE, SI;
output Q;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_FSDPSYNSBQ_V2_4_func SAEDRVT14_FSDPSYNSBQ_V2_4_behav_inst(.Q(Q),.CK(CK),.D(D),.SI(SI),.SE(SE),.SD(SD));
`else
   SAEDRVT14_FSDPSYNSBQ_V2_4_func SAEDRVT14_FSDPSYNSBQ_V2_4_inst(.Q(Q),.CK(CK),.D(D),.SI(SI),.SE(SE),.SD(SD));
   // spec_gates_begin
   not MGM_G0(MGM_W0,D);
   not MGM_G1(MGM_W1,SD);
   and MGM_G2(MGM_W2,MGM_W1,MGM_W0);
   not MGM_G3(MGM_W3,SE);
   and MGM_G4(MGM_W4,MGM_W3,MGM_W2);
   not MGM_G5(MGM_W5,SI);
   and MGM_G6(ENABLE_NOT_D_AND_NOT_SD_AND_NOT_SE_AND_NOT_SI,MGM_W5,MGM_W4);
   not MGM_G7(MGM_W6,D);
   not MGM_G8(MGM_W7,SD);
   and MGM_G9(MGM_W8,MGM_W7,MGM_W6);
   not MGM_G10(MGM_W9,SE);
   and MGM_G11(MGM_W10,MGM_W9,MGM_W8);
   and MGM_G12(ENABLE_NOT_D_AND_NOT_SD_AND_NOT_SE_AND_SI,SI,MGM_W10);
   not MGM_G13(MGM_W11,D);
   not MGM_G14(MGM_W12,SD);
   and MGM_G15(MGM_W13,MGM_W12,MGM_W11);
   and MGM_G16(MGM_W14,SE,MGM_W13);
   not MGM_G17(MGM_W15,SI);
   and MGM_G18(ENABLE_NOT_D_AND_NOT_SD_AND_SE_AND_NOT_SI,MGM_W15,MGM_W14);
   not MGM_G19(MGM_W16,D);
   not MGM_G20(MGM_W17,SD);
   and MGM_G21(MGM_W18,MGM_W17,MGM_W16);
   and MGM_G22(MGM_W19,SE,MGM_W18);
   and MGM_G23(ENABLE_NOT_D_AND_NOT_SD_AND_SE_AND_SI,SI,MGM_W19);
   not MGM_G24(MGM_W20,D);
   and MGM_G25(MGM_W21,SD,MGM_W20);
   not MGM_G26(MGM_W22,SE);
   and MGM_G27(MGM_W23,MGM_W22,MGM_W21);
   not MGM_G28(MGM_W24,SI);
   and MGM_G29(ENABLE_NOT_D_AND_SD_AND_NOT_SE_AND_NOT_SI,MGM_W24,MGM_W23);
   not MGM_G30(MGM_W25,D);
   and MGM_G31(MGM_W26,SD,MGM_W25);
   not MGM_G32(MGM_W27,SE);
   and MGM_G33(MGM_W28,MGM_W27,MGM_W26);
   and MGM_G34(ENABLE_NOT_D_AND_SD_AND_NOT_SE_AND_SI,SI,MGM_W28);
   not MGM_G35(MGM_W29,D);
   and MGM_G36(MGM_W30,SD,MGM_W29);
   and MGM_G37(MGM_W31,SE,MGM_W30);
   not MGM_G38(MGM_W32,SI);
   and MGM_G39(ENABLE_NOT_D_AND_SD_AND_SE_AND_NOT_SI,MGM_W32,MGM_W31);
   not MGM_G40(MGM_W33,D);
   and MGM_G41(MGM_W34,SD,MGM_W33);
   and MGM_G42(MGM_W35,SE,MGM_W34);
   and MGM_G43(ENABLE_NOT_D_AND_SD_AND_SE_AND_SI,SI,MGM_W35);
   not MGM_G44(MGM_W36,SD);
   and MGM_G45(MGM_W37,MGM_W36,D);
   not MGM_G46(MGM_W38,SE);
   and MGM_G47(MGM_W39,MGM_W38,MGM_W37);
   not MGM_G48(MGM_W40,SI);
   and MGM_G49(ENABLE_D_AND_NOT_SD_AND_NOT_SE_AND_NOT_SI,MGM_W40,MGM_W39);
   not MGM_G50(MGM_W41,SD);
   and MGM_G51(MGM_W42,MGM_W41,D);
   not MGM_G52(MGM_W43,SE);
   and MGM_G53(MGM_W44,MGM_W43,MGM_W42);
   and MGM_G54(ENABLE_D_AND_NOT_SD_AND_NOT_SE_AND_SI,SI,MGM_W44);
   not MGM_G55(MGM_W45,SD);
   and MGM_G56(MGM_W46,MGM_W45,D);
   and MGM_G57(MGM_W47,SE,MGM_W46);
   not MGM_G58(MGM_W48,SI);
   and MGM_G59(ENABLE_D_AND_NOT_SD_AND_SE_AND_NOT_SI,MGM_W48,MGM_W47);
   not MGM_G60(MGM_W49,SD);
   and MGM_G61(MGM_W50,MGM_W49,D);
   and MGM_G62(MGM_W51,SE,MGM_W50);
   and MGM_G63(ENABLE_D_AND_NOT_SD_AND_SE_AND_SI,SI,MGM_W51);
   and MGM_G64(MGM_W52,SD,D);
   not MGM_G65(MGM_W53,SE);
   and MGM_G66(MGM_W54,MGM_W53,MGM_W52);
   not MGM_G67(MGM_W55,SI);
   and MGM_G68(ENABLE_D_AND_SD_AND_NOT_SE_AND_NOT_SI,MGM_W55,MGM_W54);
   and MGM_G69(MGM_W56,SD,D);
   not MGM_G70(MGM_W57,SE);
   and MGM_G71(MGM_W58,MGM_W57,MGM_W56);
   and MGM_G72(ENABLE_D_AND_SD_AND_NOT_SE_AND_SI,SI,MGM_W58);
   and MGM_G73(MGM_W59,SD,D);
   and MGM_G74(MGM_W60,SE,MGM_W59);
   not MGM_G75(MGM_W61,SI);
   and MGM_G76(ENABLE_D_AND_SD_AND_SE_AND_NOT_SI,MGM_W61,MGM_W60);
   and MGM_G77(MGM_W62,SD,D);
   and MGM_G78(MGM_W63,SE,MGM_W62);
   and MGM_G79(ENABLE_D_AND_SD_AND_SE_AND_SI,SI,MGM_W63);
   not MGM_G80(MGM_W64,SE);
   and MGM_G81(MGM_W65,MGM_W64,SD);
   not MGM_G82(MGM_W66,SI);
   and MGM_G83(ENABLE_SD_AND_NOT_SE_AND_NOT_SI,MGM_W66,MGM_W65);
   not MGM_G84(MGM_W67,SE);
   and MGM_G85(MGM_W68,MGM_W67,SD);
   and MGM_G86(ENABLE_SD_AND_NOT_SE_AND_SI,SI,MGM_W68);
   not MGM_G87(MGM_W69,D);
   not MGM_G88(MGM_W70,SE);
   and MGM_G89(MGM_W71,MGM_W70,MGM_W69);
   not MGM_G90(MGM_W72,SI);
   and MGM_G91(ENABLE_NOT_D_AND_NOT_SE_AND_NOT_SI,MGM_W72,MGM_W71);
   not MGM_G92(MGM_W73,D);
   not MGM_G93(MGM_W74,SE);
   and MGM_G94(MGM_W75,MGM_W74,MGM_W73);
   and MGM_G95(ENABLE_NOT_D_AND_NOT_SE_AND_SI,SI,MGM_W75);
   not MGM_G96(MGM_W76,D);
   not MGM_G97(MGM_W77,SD);
   and MGM_G98(MGM_W78,MGM_W77,MGM_W76);
   not MGM_G99(MGM_W79,SI);
   and MGM_G100(ENABLE_NOT_D_AND_NOT_SD_AND_NOT_SI,MGM_W79,MGM_W78);
   not MGM_G101(MGM_W80,D);
   and MGM_G102(MGM_W81,SD,MGM_W80);
   and MGM_G103(ENABLE_NOT_D_AND_SD_AND_SI,SI,MGM_W81);
   not MGM_G104(MGM_W82,SD);
   and MGM_G105(MGM_W83,MGM_W82,D);
   not MGM_G106(MGM_W84,SI);
   and MGM_G107(ENABLE_D_AND_NOT_SD_AND_NOT_SI,MGM_W84,MGM_W83);
   and MGM_G108(MGM_W85,SD,D);
   not MGM_G109(MGM_W86,SI);
   and MGM_G110(ENABLE_D_AND_SD_AND_NOT_SI,MGM_W86,MGM_W85);
   not MGM_G111(MGM_W87,D);
   not MGM_G112(MGM_W88,SD);
   and MGM_G113(MGM_W89,MGM_W88,MGM_W87);
   and MGM_G114(ENABLE_NOT_D_AND_NOT_SD_AND_SE,SE,MGM_W89);
   not MGM_G115(MGM_W90,D);
   and MGM_G116(MGM_W91,SD,MGM_W90);
   and MGM_G117(ENABLE_NOT_D_AND_SD_AND_SE,SE,MGM_W91);
   not MGM_G118(MGM_W92,SD);
   and MGM_G119(MGM_W93,MGM_W92,D);
   and MGM_G120(ENABLE_D_AND_NOT_SD_AND_SE,SE,MGM_W93);
   and MGM_G121(MGM_W94,SD,D);
   and MGM_G122(ENABLE_D_AND_SD_AND_SE,SE,MGM_W94);
   // spec_gates_end
   // specify_block_begin
   specify

      if(D===1'b0 && SD===1'b0 && SE===1'b1 && SI===1'b1)
      // seq arc CK --> Q
      (posedge CK => (Q : D))  = (1.0,1.0);
      
      if(D===1'b1 && SD===1'b0 && SE===1'b0 && SI===1'b1)
      // seq arc CK --> Q
      (posedge CK => (Q : D))  = (1.0,1.0);
      
      if(D===1'b1 && SD===1'b0 && SE===1'b1 && SI===1'b1)
      // seq arc CK --> Q
      (posedge CK => (Q : D))  = (1.0,1.0);
      
      if(D===1'b1 && SD===1'b1 && SE===1'b0 && SI===1'b1)
      // seq arc CK --> Q
      (posedge CK => (Q : D))  = (1.0,1.0);
      
      if(D===1'b0 && SD===1'b0 && SI===1'b0)
      // seq arc CK --> Q
      (posedge CK => (Q : SE))  = (1.0,1.0);
      
      if(D===1'b0 && SE===1'b0 && SI===1'b1)
      // seq arc CK --> Q
      (posedge CK => (Q : SD))  = (1.0,1.0);
      
      if(D===1'b0 && SD===1'b1 && SE===1'b1)
      // seq arc CK --> Q
      (posedge CK => (Q : SI))  = (1.0,1.0);
      
      if(D===1'b1 && SD===1'b0 && SI===1'b0)
      // seq arc CK --> Q
      (posedge CK => (Q : SE))  = (1.0,1.0);
      
      if(D===1'b1 && SD===1'b1 && SE===1'b1)
      // seq arc CK --> Q
      (posedge CK => (Q : SI))  = (1.0,1.0);
      
      if(SD===1'b1 && SE===1'b0 && SI===1'b0)
      // seq arc CK --> Q
      (posedge CK => (Q : D))  = (1.0,1.0);
      
      ifnone
      // seq arc CK --> Q
      (posedge CK => (Q : D))  = (1.0,1.0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_NOT_SD_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_NOT_SD_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_NOT_SD_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_NOT_SD_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_NOT_SD_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_NOT_SD_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_NOT_SD_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_NOT_SD_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_SD_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_SD_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_SD_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_SD_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_SD_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_SD_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_SD_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_SD_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_NOT_SD_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_NOT_SD_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_NOT_SD_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_NOT_SD_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_NOT_SD_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_NOT_SD_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_NOT_SD_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_NOT_SD_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_SD_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_SD_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_SD_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_SD_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_SD_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_SD_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_SD_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_SD_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      // hold D-HL CK-LH
      $hold(posedge CK &&& (ENABLE_SD_AND_NOT_SE_AND_NOT_SI === 1'b1),
      negedge D &&& (ENABLE_SD_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold D-LH CK-LH
      $hold(posedge CK &&& (ENABLE_SD_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge D &&& (ENABLE_SD_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup D-HL CK-LH
      $setup(negedge D &&& (ENABLE_SD_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_SD_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup D-LH CK-LH
      $setup(posedge D &&& (ENABLE_SD_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_SD_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold D-HL CK-LH
      $hold(posedge CK &&& (ENABLE_SD_AND_NOT_SE_AND_SI === 1'b1),
      negedge D &&& (ENABLE_SD_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // hold D-LH CK-LH
      $hold(posedge CK &&& (ENABLE_SD_AND_NOT_SE_AND_SI === 1'b1),
      posedge D &&& (ENABLE_SD_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // setup D-HL CK-LH
      $setup(negedge D &&& (ENABLE_SD_AND_NOT_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_SD_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // setup D-LH CK-LH
      $setup(posedge D &&& (ENABLE_SD_AND_NOT_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_SD_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // hold SD-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D_AND_NOT_SE_AND_NOT_SI === 1'b1),
      negedge SD &&& (ENABLE_NOT_D_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold SD-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge SD &&& (ENABLE_NOT_D_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup SD-HL CK-LH
      $setup(negedge SD &&& (ENABLE_NOT_D_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup SD-LH CK-LH
      $setup(posedge SD &&& (ENABLE_NOT_D_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold SD-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D_AND_NOT_SE_AND_SI === 1'b1),
      negedge SD &&& (ENABLE_NOT_D_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // hold SD-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D_AND_NOT_SE_AND_SI === 1'b1),
      posedge SD &&& (ENABLE_NOT_D_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // setup SD-HL CK-LH
      $setup(negedge SD &&& (ENABLE_NOT_D_AND_NOT_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // setup SD-LH CK-LH
      $setup(posedge SD &&& (ENABLE_NOT_D_AND_NOT_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // hold SE-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D_AND_NOT_SD_AND_NOT_SI === 1'b1),
      negedge SE &&& (ENABLE_NOT_D_AND_NOT_SD_AND_NOT_SI === 1'b1),1.0);
      
      // hold SE-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D_AND_NOT_SD_AND_NOT_SI === 1'b1),
      posedge SE &&& (ENABLE_NOT_D_AND_NOT_SD_AND_NOT_SI === 1'b1),1.0);
      
      // setup SE-HL CK-LH
      $setup(negedge SE &&& (ENABLE_NOT_D_AND_NOT_SD_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_NOT_SD_AND_NOT_SI === 1'b1),1.0);
      
      // setup SE-LH CK-LH
      $setup(posedge SE &&& (ENABLE_NOT_D_AND_NOT_SD_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_NOT_SD_AND_NOT_SI === 1'b1),1.0);
      
      // hold SE-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D_AND_SD_AND_SI === 1'b1),
      negedge SE &&& (ENABLE_NOT_D_AND_SD_AND_SI === 1'b1),1.0);
      
      // hold SE-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D_AND_SD_AND_SI === 1'b1),
      posedge SE &&& (ENABLE_NOT_D_AND_SD_AND_SI === 1'b1),1.0);
      
      // setup SE-HL CK-LH
      $setup(negedge SE &&& (ENABLE_NOT_D_AND_SD_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_SD_AND_SI === 1'b1),1.0);
      
      // setup SE-LH CK-LH
      $setup(posedge SE &&& (ENABLE_NOT_D_AND_SD_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_SD_AND_SI === 1'b1),1.0);
      
      // hold SE-HL CK-LH
      $hold(posedge CK &&& (ENABLE_D_AND_NOT_SD_AND_NOT_SI === 1'b1),
      negedge SE &&& (ENABLE_D_AND_NOT_SD_AND_NOT_SI === 1'b1),1.0);
      
      // hold SE-LH CK-LH
      $hold(posedge CK &&& (ENABLE_D_AND_NOT_SD_AND_NOT_SI === 1'b1),
      posedge SE &&& (ENABLE_D_AND_NOT_SD_AND_NOT_SI === 1'b1),1.0);
      
      // setup SE-HL CK-LH
      $setup(negedge SE &&& (ENABLE_D_AND_NOT_SD_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_D_AND_NOT_SD_AND_NOT_SI === 1'b1),1.0);
      
      // setup SE-LH CK-LH
      $setup(posedge SE &&& (ENABLE_D_AND_NOT_SD_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_D_AND_NOT_SD_AND_NOT_SI === 1'b1),1.0);
      
      // hold SE-HL CK-LH
      $hold(posedge CK &&& (ENABLE_D_AND_SD_AND_NOT_SI === 1'b1),
      negedge SE &&& (ENABLE_D_AND_SD_AND_NOT_SI === 1'b1),1.0);
      
      // hold SE-LH CK-LH
      $hold(posedge CK &&& (ENABLE_D_AND_SD_AND_NOT_SI === 1'b1),
      posedge SE &&& (ENABLE_D_AND_SD_AND_NOT_SI === 1'b1),1.0);
      
      // setup SE-HL CK-LH
      $setup(negedge SE &&& (ENABLE_D_AND_SD_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_D_AND_SD_AND_NOT_SI === 1'b1),1.0);
      
      // setup SE-LH CK-LH
      $setup(posedge SE &&& (ENABLE_D_AND_SD_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_D_AND_SD_AND_NOT_SI === 1'b1),1.0);
      
      // hold SI-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D_AND_NOT_SD_AND_SE === 1'b1),
      negedge SI &&& (ENABLE_NOT_D_AND_NOT_SD_AND_SE === 1'b1),1.0);
      
      // hold SI-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D_AND_NOT_SD_AND_SE === 1'b1),
      posedge SI &&& (ENABLE_NOT_D_AND_NOT_SD_AND_SE === 1'b1),1.0);
      
      // setup SI-HL CK-LH
      $setup(negedge SI &&& (ENABLE_NOT_D_AND_NOT_SD_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_NOT_SD_AND_SE === 1'b1),1.0);
      
      // setup SI-LH CK-LH
      $setup(posedge SI &&& (ENABLE_NOT_D_AND_NOT_SD_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_NOT_SD_AND_SE === 1'b1),1.0);
      
      // hold SI-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D_AND_SD_AND_SE === 1'b1),
      negedge SI &&& (ENABLE_NOT_D_AND_SD_AND_SE === 1'b1),1.0);
      
      // hold SI-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D_AND_SD_AND_SE === 1'b1),
      posedge SI &&& (ENABLE_NOT_D_AND_SD_AND_SE === 1'b1),1.0);
      
      // setup SI-HL CK-LH
      $setup(negedge SI &&& (ENABLE_NOT_D_AND_SD_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_SD_AND_SE === 1'b1),1.0);
      
      // setup SI-LH CK-LH
      $setup(posedge SI &&& (ENABLE_NOT_D_AND_SD_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_SD_AND_SE === 1'b1),1.0);
      
      // hold SI-HL CK-LH
      $hold(posedge CK &&& (ENABLE_D_AND_NOT_SD_AND_SE === 1'b1),
      negedge SI &&& (ENABLE_D_AND_NOT_SD_AND_SE === 1'b1),1.0);
      
      // hold SI-LH CK-LH
      $hold(posedge CK &&& (ENABLE_D_AND_NOT_SD_AND_SE === 1'b1),
      posedge SI &&& (ENABLE_D_AND_NOT_SD_AND_SE === 1'b1),1.0);
      
      // setup SI-HL CK-LH
      $setup(negedge SI &&& (ENABLE_D_AND_NOT_SD_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_D_AND_NOT_SD_AND_SE === 1'b1),1.0);
      
      // setup SI-LH CK-LH
      $setup(posedge SI &&& (ENABLE_D_AND_NOT_SD_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_D_AND_NOT_SD_AND_SE === 1'b1),1.0);
      
      // hold SI-HL CK-LH
      $hold(posedge CK &&& (ENABLE_D_AND_SD_AND_SE === 1'b1),
      negedge SI &&& (ENABLE_D_AND_SD_AND_SE === 1'b1),1.0);
      
      // hold SI-LH CK-LH
      $hold(posedge CK &&& (ENABLE_D_AND_SD_AND_SE === 1'b1),
      posedge SI &&& (ENABLE_D_AND_SD_AND_SE === 1'b1),1.0);
      
      // setup SI-HL CK-LH
      $setup(negedge SI &&& (ENABLE_D_AND_SD_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_D_AND_SD_AND_SE === 1'b1),1.0);
      
      // setup SI-LH CK-LH
      $setup(posedge SI &&& (ENABLE_D_AND_SD_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_D_AND_SD_AND_SE === 1'b1),1.0);
      
      // mpw CK_lh 
      $width(posedge CK,1.0,0);
      
      // mpw CK_hl 
      $width(negedge CK,1.0,0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine

`celldefine
module SAEDRVT14_FSDP_V2LP_1( Q, QN, CK, D, SI, SE );
input CK, D, SE, SI;
output Q, QN;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_FSDP_V2LP_1_func SAEDRVT14_FSDP_V2LP_1_behav_inst(.Q(Q),.QN(QN),.CK(CK),.D(D),.SI(SI),.SE(SE));
`else
   SAEDRVT14_FSDP_V2LP_1_func SAEDRVT14_FSDP_V2LP_1_inst(.Q(Q),.QN(QN),.CK(CK),.D(D),.SI(SI),.SE(SE));
   // spec_gates_begin
   not MGM_G0(MGM_W0,D);
   not MGM_G1(MGM_W1,SE);
   and MGM_G2(MGM_W2,MGM_W1,MGM_W0);
   not MGM_G3(MGM_W3,SI);
   and MGM_G4(ENABLE_NOT_D_AND_NOT_SE_AND_NOT_SI,MGM_W3,MGM_W2);
   not MGM_G5(MGM_W4,D);
   not MGM_G6(MGM_W5,SE);
   and MGM_G7(MGM_W6,MGM_W5,MGM_W4);
   and MGM_G8(ENABLE_NOT_D_AND_NOT_SE_AND_SI,SI,MGM_W6);
   not MGM_G9(MGM_W7,D);
   and MGM_G10(MGM_W8,SE,MGM_W7);
   not MGM_G11(MGM_W9,SI);
   and MGM_G12(ENABLE_NOT_D_AND_SE_AND_NOT_SI,MGM_W9,MGM_W8);
   not MGM_G13(MGM_W10,D);
   and MGM_G14(MGM_W11,SE,MGM_W10);
   and MGM_G15(ENABLE_NOT_D_AND_SE_AND_SI,SI,MGM_W11);
   not MGM_G16(MGM_W12,SE);
   and MGM_G17(MGM_W13,MGM_W12,D);
   not MGM_G18(MGM_W14,SI);
   and MGM_G19(ENABLE_D_AND_NOT_SE_AND_NOT_SI,MGM_W14,MGM_W13);
   not MGM_G20(MGM_W15,SE);
   and MGM_G21(MGM_W16,MGM_W15,D);
   and MGM_G22(ENABLE_D_AND_NOT_SE_AND_SI,SI,MGM_W16);
   and MGM_G23(MGM_W17,SE,D);
   not MGM_G24(MGM_W18,SI);
   and MGM_G25(ENABLE_D_AND_SE_AND_NOT_SI,MGM_W18,MGM_W17);
   and MGM_G26(MGM_W19,SE,D);
   and MGM_G27(ENABLE_D_AND_SE_AND_SI,SI,MGM_W19);
   not MGM_G28(MGM_W20,SE);
   not MGM_G29(MGM_W21,SI);
   and MGM_G30(ENABLE_NOT_SE_AND_NOT_SI,MGM_W21,MGM_W20);
   not MGM_G31(MGM_W22,SE);
   and MGM_G32(ENABLE_NOT_SE_AND_SI,SI,MGM_W22);
   not MGM_G33(MGM_W23,D);
   and MGM_G34(ENABLE_NOT_D_AND_SI,SI,MGM_W23);
   not MGM_G35(MGM_W24,SI);
   and MGM_G36(ENABLE_D_AND_NOT_SI,MGM_W24,D);
   not MGM_G37(MGM_W25,D);
   and MGM_G38(ENABLE_NOT_D_AND_SE,SE,MGM_W25);
   and MGM_G39(ENABLE_D_AND_SE,SE,D);
   // spec_gates_end
   // specify_block_begin
   specify

      if(D===1'b0 && SI===1'b1)
      // seq arc CK --> Q
      (posedge CK => (Q : SE))  = (1.0,1.0);
      
      if(SE===1'b0 && SI===1'b0)
      // seq arc CK --> Q
      (posedge CK => (Q : D))  = (1.0,1.0);
      
      if(D===1'b1 && SE===1'b0 && SI===1'b1 || D===1'b0 && SE===1'b1 && SI===1'b0)
      // seq arc CK --> Q
      (posedge CK => (Q : D))  = (1.0,1.0);
      
      if(D===1'b1 && SE===1'b1)
      // seq arc CK --> Q
      (posedge CK => (Q : SI))  = (1.0,1.0);
      
      ifnone
      // seq arc CK --> Q
      (posedge CK => (Q : D))  = (1.0,1.0);
      
      if(D===1'b0 && SI===1'b1)
      // seq arc CK --> QN
      (posedge CK => (QN : SE))  = (1.0,1.0);
      
      if(SE===1'b0 && SI===1'b0)
      // seq arc CK --> QN
      (posedge CK => (QN : D))  = (1.0,1.0);
      
      if(D===1'b1 && SE===1'b0 && SI===1'b1 || D===1'b0 && SE===1'b1 && SI===1'b0)
      // seq arc CK --> QN
      (posedge CK => (QN : D))  = (1.0,1.0);
      
      if(D===1'b1 && SE===1'b1)
      // seq arc CK --> QN
      (posedge CK => (QN : SI))  = (1.0,1.0);
      
      ifnone
      // seq arc CK --> QN
      (posedge CK => (QN : D))  = (1.0,1.0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      // hold D-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),
      negedge D &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold D-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),
      posedge D &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup D-HL CK-LH
      $setup(negedge D &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup D-LH CK-LH
      $setup(posedge D &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold D-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_SE_AND_SI === 1'b1),
      negedge D &&& (ENABLE_NOT_SE_AND_SI === 1'b1),1.0);
      
      // hold D-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_SE_AND_SI === 1'b1),
      posedge D &&& (ENABLE_NOT_SE_AND_SI === 1'b1),1.0);
      
      // setup D-HL CK-LH
      $setup(negedge D &&& (ENABLE_NOT_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_SE_AND_SI === 1'b1),1.0);
      
      // setup D-LH CK-LH
      $setup(posedge D &&& (ENABLE_NOT_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_SE_AND_SI === 1'b1),1.0);
      
      // hold SE-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D_AND_SI === 1'b1),
      negedge SE &&& (ENABLE_NOT_D_AND_SI === 1'b1),1.0);
      
      // hold SE-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D_AND_SI === 1'b1),
      posedge SE &&& (ENABLE_NOT_D_AND_SI === 1'b1),1.0);
      
      // setup SE-HL CK-LH
      $setup(negedge SE &&& (ENABLE_NOT_D_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_SI === 1'b1),1.0);
      
      // setup SE-LH CK-LH
      $setup(posedge SE &&& (ENABLE_NOT_D_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_SI === 1'b1),1.0);
      
      // hold SE-HL CK-LH
      $hold(posedge CK &&& (ENABLE_D_AND_NOT_SI === 1'b1),
      negedge SE &&& (ENABLE_D_AND_NOT_SI === 1'b1),1.0);
      
      // hold SE-LH CK-LH
      $hold(posedge CK &&& (ENABLE_D_AND_NOT_SI === 1'b1),
      posedge SE &&& (ENABLE_D_AND_NOT_SI === 1'b1),1.0);
      
      // setup SE-HL CK-LH
      $setup(negedge SE &&& (ENABLE_D_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_D_AND_NOT_SI === 1'b1),1.0);
      
      // setup SE-LH CK-LH
      $setup(posedge SE &&& (ENABLE_D_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_D_AND_NOT_SI === 1'b1),1.0);
      
      // hold SI-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D_AND_SE === 1'b1),
      negedge SI &&& (ENABLE_NOT_D_AND_SE === 1'b1),1.0);
      
      // hold SI-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D_AND_SE === 1'b1),
      posedge SI &&& (ENABLE_NOT_D_AND_SE === 1'b1),1.0);
      
      // setup SI-HL CK-LH
      $setup(negedge SI &&& (ENABLE_NOT_D_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_SE === 1'b1),1.0);
      
      // setup SI-LH CK-LH
      $setup(posedge SI &&& (ENABLE_NOT_D_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_SE === 1'b1),1.0);
      
      // hold SI-HL CK-LH
      $hold(posedge CK &&& (ENABLE_D_AND_SE === 1'b1),
      negedge SI &&& (ENABLE_D_AND_SE === 1'b1),1.0);
      
      // hold SI-LH CK-LH
      $hold(posedge CK &&& (ENABLE_D_AND_SE === 1'b1),
      posedge SI &&& (ENABLE_D_AND_SE === 1'b1),1.0);
      
      // setup SI-HL CK-LH
      $setup(negedge SI &&& (ENABLE_D_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_D_AND_SE === 1'b1),1.0);
      
      // setup SI-LH CK-LH
      $setup(posedge SI &&& (ENABLE_D_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_D_AND_SE === 1'b1),1.0);
      
      // mpw CK_lh 
      $width(posedge CK,1.0,0);
      
      // mpw CK_hl 
      $width(negedge CK,1.0,0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_FSDP_V2LP_2( Q, QN, CK, D, SI, SE );
input CK, D, SE, SI;
output Q, QN;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_FSDP_V2LP_2_func SAEDRVT14_FSDP_V2LP_2_behav_inst(.Q(Q),.QN(QN),.CK(CK),.D(D),.SI(SI),.SE(SE));
`else
   SAEDRVT14_FSDP_V2LP_2_func SAEDRVT14_FSDP_V2LP_2_inst(.Q(Q),.QN(QN),.CK(CK),.D(D),.SI(SI),.SE(SE));
   // spec_gates_begin
   not MGM_G0(MGM_W0,D);
   not MGM_G1(MGM_W1,SE);
   and MGM_G2(MGM_W2,MGM_W1,MGM_W0);
   not MGM_G3(MGM_W3,SI);
   and MGM_G4(ENABLE_NOT_D_AND_NOT_SE_AND_NOT_SI,MGM_W3,MGM_W2);
   not MGM_G5(MGM_W4,D);
   not MGM_G6(MGM_W5,SE);
   and MGM_G7(MGM_W6,MGM_W5,MGM_W4);
   and MGM_G8(ENABLE_NOT_D_AND_NOT_SE_AND_SI,SI,MGM_W6);
   not MGM_G9(MGM_W7,D);
   and MGM_G10(MGM_W8,SE,MGM_W7);
   not MGM_G11(MGM_W9,SI);
   and MGM_G12(ENABLE_NOT_D_AND_SE_AND_NOT_SI,MGM_W9,MGM_W8);
   not MGM_G13(MGM_W10,D);
   and MGM_G14(MGM_W11,SE,MGM_W10);
   and MGM_G15(ENABLE_NOT_D_AND_SE_AND_SI,SI,MGM_W11);
   not MGM_G16(MGM_W12,SE);
   and MGM_G17(MGM_W13,MGM_W12,D);
   not MGM_G18(MGM_W14,SI);
   and MGM_G19(ENABLE_D_AND_NOT_SE_AND_NOT_SI,MGM_W14,MGM_W13);
   not MGM_G20(MGM_W15,SE);
   and MGM_G21(MGM_W16,MGM_W15,D);
   and MGM_G22(ENABLE_D_AND_NOT_SE_AND_SI,SI,MGM_W16);
   and MGM_G23(MGM_W17,SE,D);
   not MGM_G24(MGM_W18,SI);
   and MGM_G25(ENABLE_D_AND_SE_AND_NOT_SI,MGM_W18,MGM_W17);
   and MGM_G26(MGM_W19,SE,D);
   and MGM_G27(ENABLE_D_AND_SE_AND_SI,SI,MGM_W19);
   not MGM_G28(MGM_W20,SE);
   not MGM_G29(MGM_W21,SI);
   and MGM_G30(ENABLE_NOT_SE_AND_NOT_SI,MGM_W21,MGM_W20);
   not MGM_G31(MGM_W22,SE);
   and MGM_G32(ENABLE_NOT_SE_AND_SI,SI,MGM_W22);
   not MGM_G33(MGM_W23,D);
   and MGM_G34(ENABLE_NOT_D_AND_SI,SI,MGM_W23);
   not MGM_G35(MGM_W24,SI);
   and MGM_G36(ENABLE_D_AND_NOT_SI,MGM_W24,D);
   not MGM_G37(MGM_W25,D);
   and MGM_G38(ENABLE_NOT_D_AND_SE,SE,MGM_W25);
   and MGM_G39(ENABLE_D_AND_SE,SE,D);
   // spec_gates_end
   // specify_block_begin
   specify

      if(D===1'b0 && SI===1'b1)
      // seq arc CK --> Q
      (posedge CK => (Q : SE))  = (1.0,1.0);
      
      if(SE===1'b0 && SI===1'b0)
      // seq arc CK --> Q
      (posedge CK => (Q : D))  = (1.0,1.0);
      
      if(D===1'b1 && SE===1'b0 && SI===1'b1 || D===1'b0 && SE===1'b1 && SI===1'b0)
      // seq arc CK --> Q
      (posedge CK => (Q : D))  = (1.0,1.0);
      
      if(D===1'b1 && SE===1'b1)
      // seq arc CK --> Q
      (posedge CK => (Q : SI))  = (1.0,1.0);
      
      ifnone
      // seq arc CK --> Q
      (posedge CK => (Q : D))  = (1.0,1.0);
      
      if(D===1'b0 && SI===1'b1)
      // seq arc CK --> QN
      (posedge CK => (QN : SE))  = (1.0,1.0);
      
      if(SE===1'b0 && SI===1'b0)
      // seq arc CK --> QN
      (posedge CK => (QN : D))  = (1.0,1.0);
      
      if(D===1'b1 && SE===1'b0 && SI===1'b1 || D===1'b0 && SE===1'b1 && SI===1'b0)
      // seq arc CK --> QN
      (posedge CK => (QN : D))  = (1.0,1.0);
      
      if(D===1'b1 && SE===1'b1)
      // seq arc CK --> QN
      (posedge CK => (QN : SI))  = (1.0,1.0);
      
      ifnone
      // seq arc CK --> QN
      (posedge CK => (QN : D))  = (1.0,1.0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      // hold D-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),
      negedge D &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold D-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),
      posedge D &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup D-HL CK-LH
      $setup(negedge D &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup D-LH CK-LH
      $setup(posedge D &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold D-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_SE_AND_SI === 1'b1),
      negedge D &&& (ENABLE_NOT_SE_AND_SI === 1'b1),1.0);
      
      // hold D-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_SE_AND_SI === 1'b1),
      posedge D &&& (ENABLE_NOT_SE_AND_SI === 1'b1),1.0);
      
      // setup D-HL CK-LH
      $setup(negedge D &&& (ENABLE_NOT_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_SE_AND_SI === 1'b1),1.0);
      
      // setup D-LH CK-LH
      $setup(posedge D &&& (ENABLE_NOT_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_SE_AND_SI === 1'b1),1.0);
      
      // hold SE-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D_AND_SI === 1'b1),
      negedge SE &&& (ENABLE_NOT_D_AND_SI === 1'b1),1.0);
      
      // hold SE-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D_AND_SI === 1'b1),
      posedge SE &&& (ENABLE_NOT_D_AND_SI === 1'b1),1.0);
      
      // setup SE-HL CK-LH
      $setup(negedge SE &&& (ENABLE_NOT_D_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_SI === 1'b1),1.0);
      
      // setup SE-LH CK-LH
      $setup(posedge SE &&& (ENABLE_NOT_D_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_SI === 1'b1),1.0);
      
      // hold SE-HL CK-LH
      $hold(posedge CK &&& (ENABLE_D_AND_NOT_SI === 1'b1),
      negedge SE &&& (ENABLE_D_AND_NOT_SI === 1'b1),1.0);
      
      // hold SE-LH CK-LH
      $hold(posedge CK &&& (ENABLE_D_AND_NOT_SI === 1'b1),
      posedge SE &&& (ENABLE_D_AND_NOT_SI === 1'b1),1.0);
      
      // setup SE-HL CK-LH
      $setup(negedge SE &&& (ENABLE_D_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_D_AND_NOT_SI === 1'b1),1.0);
      
      // setup SE-LH CK-LH
      $setup(posedge SE &&& (ENABLE_D_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_D_AND_NOT_SI === 1'b1),1.0);
      
      // hold SI-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D_AND_SE === 1'b1),
      negedge SI &&& (ENABLE_NOT_D_AND_SE === 1'b1),1.0);
      
      // hold SI-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D_AND_SE === 1'b1),
      posedge SI &&& (ENABLE_NOT_D_AND_SE === 1'b1),1.0);
      
      // setup SI-HL CK-LH
      $setup(negedge SI &&& (ENABLE_NOT_D_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_SE === 1'b1),1.0);
      
      // setup SI-LH CK-LH
      $setup(posedge SI &&& (ENABLE_NOT_D_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_SE === 1'b1),1.0);
      
      // hold SI-HL CK-LH
      $hold(posedge CK &&& (ENABLE_D_AND_SE === 1'b1),
      negedge SI &&& (ENABLE_D_AND_SE === 1'b1),1.0);
      
      // hold SI-LH CK-LH
      $hold(posedge CK &&& (ENABLE_D_AND_SE === 1'b1),
      posedge SI &&& (ENABLE_D_AND_SE === 1'b1),1.0);
      
      // setup SI-HL CK-LH
      $setup(negedge SI &&& (ENABLE_D_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_D_AND_SE === 1'b1),1.0);
      
      // setup SI-LH CK-LH
      $setup(posedge SI &&& (ENABLE_D_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_D_AND_SE === 1'b1),1.0);
      
      // mpw CK_lh 
      $width(posedge CK,1.0,0);
      
      // mpw CK_hl 
      $width(negedge CK,1.0,0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_FSDP_V2_0P5( Q, QN, CK, D, SI, SE );
input CK, D, SE, SI;
output Q, QN;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_FSDP_V2_0P5_func SAEDRVT14_FSDP_V2_0P5_behav_inst(.Q(Q),.QN(QN),.CK(CK),.D(D),.SI(SI),.SE(SE));
`else
   SAEDRVT14_FSDP_V2_0P5_func SAEDRVT14_FSDP_V2_0P5_inst(.Q(Q),.QN(QN),.CK(CK),.D(D),.SI(SI),.SE(SE));
   // spec_gates_begin
   not MGM_G0(MGM_W0,D);
   not MGM_G1(MGM_W1,SE);
   and MGM_G2(MGM_W2,MGM_W1,MGM_W0);
   not MGM_G3(MGM_W3,SI);
   and MGM_G4(ENABLE_NOT_D_AND_NOT_SE_AND_NOT_SI,MGM_W3,MGM_W2);
   not MGM_G5(MGM_W4,D);
   not MGM_G6(MGM_W5,SE);
   and MGM_G7(MGM_W6,MGM_W5,MGM_W4);
   and MGM_G8(ENABLE_NOT_D_AND_NOT_SE_AND_SI,SI,MGM_W6);
   not MGM_G9(MGM_W7,D);
   and MGM_G10(MGM_W8,SE,MGM_W7);
   not MGM_G11(MGM_W9,SI);
   and MGM_G12(ENABLE_NOT_D_AND_SE_AND_NOT_SI,MGM_W9,MGM_W8);
   not MGM_G13(MGM_W10,D);
   and MGM_G14(MGM_W11,SE,MGM_W10);
   and MGM_G15(ENABLE_NOT_D_AND_SE_AND_SI,SI,MGM_W11);
   not MGM_G16(MGM_W12,SE);
   and MGM_G17(MGM_W13,MGM_W12,D);
   not MGM_G18(MGM_W14,SI);
   and MGM_G19(ENABLE_D_AND_NOT_SE_AND_NOT_SI,MGM_W14,MGM_W13);
   not MGM_G20(MGM_W15,SE);
   and MGM_G21(MGM_W16,MGM_W15,D);
   and MGM_G22(ENABLE_D_AND_NOT_SE_AND_SI,SI,MGM_W16);
   and MGM_G23(MGM_W17,SE,D);
   not MGM_G24(MGM_W18,SI);
   and MGM_G25(ENABLE_D_AND_SE_AND_NOT_SI,MGM_W18,MGM_W17);
   and MGM_G26(MGM_W19,SE,D);
   and MGM_G27(ENABLE_D_AND_SE_AND_SI,SI,MGM_W19);
   not MGM_G28(MGM_W20,SE);
   not MGM_G29(MGM_W21,SI);
   and MGM_G30(ENABLE_NOT_SE_AND_NOT_SI,MGM_W21,MGM_W20);
   not MGM_G31(MGM_W22,SE);
   and MGM_G32(ENABLE_NOT_SE_AND_SI,SI,MGM_W22);
   not MGM_G33(MGM_W23,D);
   and MGM_G34(ENABLE_NOT_D_AND_SI,SI,MGM_W23);
   not MGM_G35(MGM_W24,SI);
   and MGM_G36(ENABLE_D_AND_NOT_SI,MGM_W24,D);
   not MGM_G37(MGM_W25,D);
   and MGM_G38(ENABLE_NOT_D_AND_SE,SE,MGM_W25);
   and MGM_G39(ENABLE_D_AND_SE,SE,D);
   // spec_gates_end
   // specify_block_begin
   specify

      if(D===1'b0 && SI===1'b1)
      // seq arc CK --> Q
      (posedge CK => (Q : SE))  = (1.0,1.0);
      
      if(SE===1'b0 && SI===1'b0)
      // seq arc CK --> Q
      (posedge CK => (Q : D))  = (1.0,1.0);
      
      if(D===1'b1 && SE===1'b0 && SI===1'b1 || D===1'b0 && SE===1'b1 && SI===1'b0)
      // seq arc CK --> Q
      (posedge CK => (Q : D))  = (1.0,1.0);
      
      if(D===1'b1 && SE===1'b1)
      // seq arc CK --> Q
      (posedge CK => (Q : SI))  = (1.0,1.0);
      
      ifnone
      // seq arc CK --> Q
      (posedge CK => (Q : D))  = (1.0,1.0);
      
      if(D===1'b0 && SI===1'b1)
      // seq arc CK --> QN
      (posedge CK => (QN : SE))  = (1.0,1.0);
      
      if(SE===1'b0 && SI===1'b0)
      // seq arc CK --> QN
      (posedge CK => (QN : D))  = (1.0,1.0);
      
      if(D===1'b1 && SE===1'b0 && SI===1'b1 || D===1'b0 && SE===1'b1 && SI===1'b0)
      // seq arc CK --> QN
      (posedge CK => (QN : D))  = (1.0,1.0);
      
      if(D===1'b1 && SE===1'b1)
      // seq arc CK --> QN
      (posedge CK => (QN : SI))  = (1.0,1.0);
      
      ifnone
      // seq arc CK --> QN
      (posedge CK => (QN : D))  = (1.0,1.0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      // hold D-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),
      negedge D &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold D-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),
      posedge D &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup D-HL CK-LH
      $setup(negedge D &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup D-LH CK-LH
      $setup(posedge D &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold D-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_SE_AND_SI === 1'b1),
      negedge D &&& (ENABLE_NOT_SE_AND_SI === 1'b1),1.0);
      
      // hold D-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_SE_AND_SI === 1'b1),
      posedge D &&& (ENABLE_NOT_SE_AND_SI === 1'b1),1.0);
      
      // setup D-HL CK-LH
      $setup(negedge D &&& (ENABLE_NOT_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_SE_AND_SI === 1'b1),1.0);
      
      // setup D-LH CK-LH
      $setup(posedge D &&& (ENABLE_NOT_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_SE_AND_SI === 1'b1),1.0);
      
      // hold SE-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D_AND_SI === 1'b1),
      negedge SE &&& (ENABLE_NOT_D_AND_SI === 1'b1),1.0);
      
      // hold SE-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D_AND_SI === 1'b1),
      posedge SE &&& (ENABLE_NOT_D_AND_SI === 1'b1),1.0);
      
      // setup SE-HL CK-LH
      $setup(negedge SE &&& (ENABLE_NOT_D_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_SI === 1'b1),1.0);
      
      // setup SE-LH CK-LH
      $setup(posedge SE &&& (ENABLE_NOT_D_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_SI === 1'b1),1.0);
      
      // hold SE-HL CK-LH
      $hold(posedge CK &&& (ENABLE_D_AND_NOT_SI === 1'b1),
      negedge SE &&& (ENABLE_D_AND_NOT_SI === 1'b1),1.0);
      
      // hold SE-LH CK-LH
      $hold(posedge CK &&& (ENABLE_D_AND_NOT_SI === 1'b1),
      posedge SE &&& (ENABLE_D_AND_NOT_SI === 1'b1),1.0);
      
      // setup SE-HL CK-LH
      $setup(negedge SE &&& (ENABLE_D_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_D_AND_NOT_SI === 1'b1),1.0);
      
      // setup SE-LH CK-LH
      $setup(posedge SE &&& (ENABLE_D_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_D_AND_NOT_SI === 1'b1),1.0);
      
      // hold SI-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D_AND_SE === 1'b1),
      negedge SI &&& (ENABLE_NOT_D_AND_SE === 1'b1),1.0);
      
      // hold SI-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D_AND_SE === 1'b1),
      posedge SI &&& (ENABLE_NOT_D_AND_SE === 1'b1),1.0);
      
      // setup SI-HL CK-LH
      $setup(negedge SI &&& (ENABLE_NOT_D_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_SE === 1'b1),1.0);
      
      // setup SI-LH CK-LH
      $setup(posedge SI &&& (ENABLE_NOT_D_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_SE === 1'b1),1.0);
      
      // hold SI-HL CK-LH
      $hold(posedge CK &&& (ENABLE_D_AND_SE === 1'b1),
      negedge SI &&& (ENABLE_D_AND_SE === 1'b1),1.0);
      
      // hold SI-LH CK-LH
      $hold(posedge CK &&& (ENABLE_D_AND_SE === 1'b1),
      posedge SI &&& (ENABLE_D_AND_SE === 1'b1),1.0);
      
      // setup SI-HL CK-LH
      $setup(negedge SI &&& (ENABLE_D_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_D_AND_SE === 1'b1),1.0);
      
      // setup SI-LH CK-LH
      $setup(posedge SI &&& (ENABLE_D_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_D_AND_SE === 1'b1),1.0);
      
      // mpw CK_lh 
      $width(posedge CK,1.0,0);
      
      // mpw CK_hl 
      $width(negedge CK,1.0,0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_FSDP_V2_1( Q, QN, CK, D, SI, SE );
input CK, D, SE, SI;
output Q, QN;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_FSDP_V2_1_func SAEDRVT14_FSDP_V2_1_behav_inst(.Q(Q),.QN(QN),.CK(CK),.D(D),.SI(SI),.SE(SE));
`else
   SAEDRVT14_FSDP_V2_1_func SAEDRVT14_FSDP_V2_1_inst(.Q(Q),.QN(QN),.CK(CK),.D(D),.SI(SI),.SE(SE));
   // spec_gates_begin
   not MGM_G0(MGM_W0,D);
   not MGM_G1(MGM_W1,SE);
   and MGM_G2(MGM_W2,MGM_W1,MGM_W0);
   not MGM_G3(MGM_W3,SI);
   and MGM_G4(ENABLE_NOT_D_AND_NOT_SE_AND_NOT_SI,MGM_W3,MGM_W2);
   not MGM_G5(MGM_W4,D);
   not MGM_G6(MGM_W5,SE);
   and MGM_G7(MGM_W6,MGM_W5,MGM_W4);
   and MGM_G8(ENABLE_NOT_D_AND_NOT_SE_AND_SI,SI,MGM_W6);
   not MGM_G9(MGM_W7,D);
   and MGM_G10(MGM_W8,SE,MGM_W7);
   not MGM_G11(MGM_W9,SI);
   and MGM_G12(ENABLE_NOT_D_AND_SE_AND_NOT_SI,MGM_W9,MGM_W8);
   not MGM_G13(MGM_W10,D);
   and MGM_G14(MGM_W11,SE,MGM_W10);
   and MGM_G15(ENABLE_NOT_D_AND_SE_AND_SI,SI,MGM_W11);
   not MGM_G16(MGM_W12,SE);
   and MGM_G17(MGM_W13,MGM_W12,D);
   not MGM_G18(MGM_W14,SI);
   and MGM_G19(ENABLE_D_AND_NOT_SE_AND_NOT_SI,MGM_W14,MGM_W13);
   not MGM_G20(MGM_W15,SE);
   and MGM_G21(MGM_W16,MGM_W15,D);
   and MGM_G22(ENABLE_D_AND_NOT_SE_AND_SI,SI,MGM_W16);
   and MGM_G23(MGM_W17,SE,D);
   not MGM_G24(MGM_W18,SI);
   and MGM_G25(ENABLE_D_AND_SE_AND_NOT_SI,MGM_W18,MGM_W17);
   and MGM_G26(MGM_W19,SE,D);
   and MGM_G27(ENABLE_D_AND_SE_AND_SI,SI,MGM_W19);
   not MGM_G28(MGM_W20,SE);
   not MGM_G29(MGM_W21,SI);
   and MGM_G30(ENABLE_NOT_SE_AND_NOT_SI,MGM_W21,MGM_W20);
   not MGM_G31(MGM_W22,SE);
   and MGM_G32(ENABLE_NOT_SE_AND_SI,SI,MGM_W22);
   not MGM_G33(MGM_W23,D);
   and MGM_G34(ENABLE_NOT_D_AND_SI,SI,MGM_W23);
   not MGM_G35(MGM_W24,SI);
   and MGM_G36(ENABLE_D_AND_NOT_SI,MGM_W24,D);
   not MGM_G37(MGM_W25,D);
   and MGM_G38(ENABLE_NOT_D_AND_SE,SE,MGM_W25);
   and MGM_G39(ENABLE_D_AND_SE,SE,D);
   // spec_gates_end
   // specify_block_begin
   specify

      if(D===1'b0 && SI===1'b1)
      // seq arc CK --> Q
      (posedge CK => (Q : SE))  = (1.0,1.0);
      
      if(SE===1'b0 && SI===1'b0)
      // seq arc CK --> Q
      (posedge CK => (Q : D))  = (1.0,1.0);
      
      if(D===1'b1 && SE===1'b0 && SI===1'b1 || D===1'b0 && SE===1'b1 && SI===1'b0)
      // seq arc CK --> Q
      (posedge CK => (Q : D))  = (1.0,1.0);
      
      if(D===1'b1 && SE===1'b1)
      // seq arc CK --> Q
      (posedge CK => (Q : SI))  = (1.0,1.0);
      
      ifnone
      // seq arc CK --> Q
      (posedge CK => (Q : D))  = (1.0,1.0);
      
      if(D===1'b0 && SI===1'b1)
      // seq arc CK --> QN
      (posedge CK => (QN : SE))  = (1.0,1.0);
      
      if(SE===1'b0 && SI===1'b0)
      // seq arc CK --> QN
      (posedge CK => (QN : D))  = (1.0,1.0);
      
      if(D===1'b1 && SE===1'b0 && SI===1'b1 || D===1'b0 && SE===1'b1 && SI===1'b0)
      // seq arc CK --> QN
      (posedge CK => (QN : D))  = (1.0,1.0);
      
      if(D===1'b1 && SE===1'b1)
      // seq arc CK --> QN
      (posedge CK => (QN : SI))  = (1.0,1.0);
      
      ifnone
      // seq arc CK --> QN
      (posedge CK => (QN : D))  = (1.0,1.0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      // hold D-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),
      negedge D &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold D-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),
      posedge D &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup D-HL CK-LH
      $setup(negedge D &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup D-LH CK-LH
      $setup(posedge D &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold D-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_SE_AND_SI === 1'b1),
      negedge D &&& (ENABLE_NOT_SE_AND_SI === 1'b1),1.0);
      
      // hold D-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_SE_AND_SI === 1'b1),
      posedge D &&& (ENABLE_NOT_SE_AND_SI === 1'b1),1.0);
      
      // setup D-HL CK-LH
      $setup(negedge D &&& (ENABLE_NOT_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_SE_AND_SI === 1'b1),1.0);
      
      // setup D-LH CK-LH
      $setup(posedge D &&& (ENABLE_NOT_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_SE_AND_SI === 1'b1),1.0);
      
      // hold SE-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D_AND_SI === 1'b1),
      negedge SE &&& (ENABLE_NOT_D_AND_SI === 1'b1),1.0);
      
      // hold SE-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D_AND_SI === 1'b1),
      posedge SE &&& (ENABLE_NOT_D_AND_SI === 1'b1),1.0);
      
      // setup SE-HL CK-LH
      $setup(negedge SE &&& (ENABLE_NOT_D_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_SI === 1'b1),1.0);
      
      // setup SE-LH CK-LH
      $setup(posedge SE &&& (ENABLE_NOT_D_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_SI === 1'b1),1.0);
      
      // hold SE-HL CK-LH
      $hold(posedge CK &&& (ENABLE_D_AND_NOT_SI === 1'b1),
      negedge SE &&& (ENABLE_D_AND_NOT_SI === 1'b1),1.0);
      
      // hold SE-LH CK-LH
      $hold(posedge CK &&& (ENABLE_D_AND_NOT_SI === 1'b1),
      posedge SE &&& (ENABLE_D_AND_NOT_SI === 1'b1),1.0);
      
      // setup SE-HL CK-LH
      $setup(negedge SE &&& (ENABLE_D_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_D_AND_NOT_SI === 1'b1),1.0);
      
      // setup SE-LH CK-LH
      $setup(posedge SE &&& (ENABLE_D_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_D_AND_NOT_SI === 1'b1),1.0);
      
      // hold SI-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D_AND_SE === 1'b1),
      negedge SI &&& (ENABLE_NOT_D_AND_SE === 1'b1),1.0);
      
      // hold SI-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D_AND_SE === 1'b1),
      posedge SI &&& (ENABLE_NOT_D_AND_SE === 1'b1),1.0);
      
      // setup SI-HL CK-LH
      $setup(negedge SI &&& (ENABLE_NOT_D_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_SE === 1'b1),1.0);
      
      // setup SI-LH CK-LH
      $setup(posedge SI &&& (ENABLE_NOT_D_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_SE === 1'b1),1.0);
      
      // hold SI-HL CK-LH
      $hold(posedge CK &&& (ENABLE_D_AND_SE === 1'b1),
      negedge SI &&& (ENABLE_D_AND_SE === 1'b1),1.0);
      
      // hold SI-LH CK-LH
      $hold(posedge CK &&& (ENABLE_D_AND_SE === 1'b1),
      posedge SI &&& (ENABLE_D_AND_SE === 1'b1),1.0);
      
      // setup SI-HL CK-LH
      $setup(negedge SI &&& (ENABLE_D_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_D_AND_SE === 1'b1),1.0);
      
      // setup SI-LH CK-LH
      $setup(posedge SI &&& (ENABLE_D_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_D_AND_SE === 1'b1),1.0);
      
      // mpw CK_lh 
      $width(posedge CK,1.0,0);
      
      // mpw CK_hl 
      $width(negedge CK,1.0,0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_FSDP_V2_2( Q, QN, CK, D, SI, SE );
input CK, D, SE, SI;
output Q, QN;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_FSDP_V2_2_func SAEDRVT14_FSDP_V2_2_behav_inst(.Q(Q),.QN(QN),.CK(CK),.D(D),.SI(SI),.SE(SE));
`else
   SAEDRVT14_FSDP_V2_2_func SAEDRVT14_FSDP_V2_2_inst(.Q(Q),.QN(QN),.CK(CK),.D(D),.SI(SI),.SE(SE));
   // spec_gates_begin
   not MGM_G0(MGM_W0,D);
   not MGM_G1(MGM_W1,SE);
   and MGM_G2(MGM_W2,MGM_W1,MGM_W0);
   not MGM_G3(MGM_W3,SI);
   and MGM_G4(ENABLE_NOT_D_AND_NOT_SE_AND_NOT_SI,MGM_W3,MGM_W2);
   not MGM_G5(MGM_W4,D);
   not MGM_G6(MGM_W5,SE);
   and MGM_G7(MGM_W6,MGM_W5,MGM_W4);
   and MGM_G8(ENABLE_NOT_D_AND_NOT_SE_AND_SI,SI,MGM_W6);
   not MGM_G9(MGM_W7,D);
   and MGM_G10(MGM_W8,SE,MGM_W7);
   not MGM_G11(MGM_W9,SI);
   and MGM_G12(ENABLE_NOT_D_AND_SE_AND_NOT_SI,MGM_W9,MGM_W8);
   not MGM_G13(MGM_W10,D);
   and MGM_G14(MGM_W11,SE,MGM_W10);
   and MGM_G15(ENABLE_NOT_D_AND_SE_AND_SI,SI,MGM_W11);
   not MGM_G16(MGM_W12,SE);
   and MGM_G17(MGM_W13,MGM_W12,D);
   not MGM_G18(MGM_W14,SI);
   and MGM_G19(ENABLE_D_AND_NOT_SE_AND_NOT_SI,MGM_W14,MGM_W13);
   not MGM_G20(MGM_W15,SE);
   and MGM_G21(MGM_W16,MGM_W15,D);
   and MGM_G22(ENABLE_D_AND_NOT_SE_AND_SI,SI,MGM_W16);
   and MGM_G23(MGM_W17,SE,D);
   not MGM_G24(MGM_W18,SI);
   and MGM_G25(ENABLE_D_AND_SE_AND_NOT_SI,MGM_W18,MGM_W17);
   and MGM_G26(MGM_W19,SE,D);
   and MGM_G27(ENABLE_D_AND_SE_AND_SI,SI,MGM_W19);
   not MGM_G28(MGM_W20,SE);
   not MGM_G29(MGM_W21,SI);
   and MGM_G30(ENABLE_NOT_SE_AND_NOT_SI,MGM_W21,MGM_W20);
   not MGM_G31(MGM_W22,SE);
   and MGM_G32(ENABLE_NOT_SE_AND_SI,SI,MGM_W22);
   not MGM_G33(MGM_W23,D);
   and MGM_G34(ENABLE_NOT_D_AND_SI,SI,MGM_W23);
   not MGM_G35(MGM_W24,SI);
   and MGM_G36(ENABLE_D_AND_NOT_SI,MGM_W24,D);
   not MGM_G37(MGM_W25,D);
   and MGM_G38(ENABLE_NOT_D_AND_SE,SE,MGM_W25);
   and MGM_G39(ENABLE_D_AND_SE,SE,D);
   // spec_gates_end
   // specify_block_begin
   specify

      if(D===1'b0 && SI===1'b1)
      // seq arc CK --> Q
      (posedge CK => (Q : SE))  = (1.0,1.0);
      
      if(SE===1'b0 && SI===1'b0)
      // seq arc CK --> Q
      (posedge CK => (Q : D))  = (1.0,1.0);
      
      if(D===1'b1 && SE===1'b0 && SI===1'b1 || D===1'b0 && SE===1'b1 && SI===1'b0)
      // seq arc CK --> Q
      (posedge CK => (Q : D))  = (1.0,1.0);
      
      if(D===1'b1 && SE===1'b1)
      // seq arc CK --> Q
      (posedge CK => (Q : SI))  = (1.0,1.0);
      
      ifnone
      // seq arc CK --> Q
      (posedge CK => (Q : D))  = (1.0,1.0);
      
      if(D===1'b0 && SI===1'b1)
      // seq arc CK --> QN
      (posedge CK => (QN : SE))  = (1.0,1.0);
      
      if(SE===1'b0 && SI===1'b0)
      // seq arc CK --> QN
      (posedge CK => (QN : D))  = (1.0,1.0);
      
      if(D===1'b1 && SE===1'b0 && SI===1'b1 || D===1'b0 && SE===1'b1 && SI===1'b0)
      // seq arc CK --> QN
      (posedge CK => (QN : D))  = (1.0,1.0);
      
      if(D===1'b1 && SE===1'b1)
      // seq arc CK --> QN
      (posedge CK => (QN : SI))  = (1.0,1.0);
      
      ifnone
      // seq arc CK --> QN
      (posedge CK => (QN : D))  = (1.0,1.0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      // hold D-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),
      negedge D &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold D-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),
      posedge D &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup D-HL CK-LH
      $setup(negedge D &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup D-LH CK-LH
      $setup(posedge D &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold D-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_SE_AND_SI === 1'b1),
      negedge D &&& (ENABLE_NOT_SE_AND_SI === 1'b1),1.0);
      
      // hold D-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_SE_AND_SI === 1'b1),
      posedge D &&& (ENABLE_NOT_SE_AND_SI === 1'b1),1.0);
      
      // setup D-HL CK-LH
      $setup(negedge D &&& (ENABLE_NOT_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_SE_AND_SI === 1'b1),1.0);
      
      // setup D-LH CK-LH
      $setup(posedge D &&& (ENABLE_NOT_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_SE_AND_SI === 1'b1),1.0);
      
      // hold SE-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D_AND_SI === 1'b1),
      negedge SE &&& (ENABLE_NOT_D_AND_SI === 1'b1),1.0);
      
      // hold SE-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D_AND_SI === 1'b1),
      posedge SE &&& (ENABLE_NOT_D_AND_SI === 1'b1),1.0);
      
      // setup SE-HL CK-LH
      $setup(negedge SE &&& (ENABLE_NOT_D_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_SI === 1'b1),1.0);
      
      // setup SE-LH CK-LH
      $setup(posedge SE &&& (ENABLE_NOT_D_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_SI === 1'b1),1.0);
      
      // hold SE-HL CK-LH
      $hold(posedge CK &&& (ENABLE_D_AND_NOT_SI === 1'b1),
      negedge SE &&& (ENABLE_D_AND_NOT_SI === 1'b1),1.0);
      
      // hold SE-LH CK-LH
      $hold(posedge CK &&& (ENABLE_D_AND_NOT_SI === 1'b1),
      posedge SE &&& (ENABLE_D_AND_NOT_SI === 1'b1),1.0);
      
      // setup SE-HL CK-LH
      $setup(negedge SE &&& (ENABLE_D_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_D_AND_NOT_SI === 1'b1),1.0);
      
      // setup SE-LH CK-LH
      $setup(posedge SE &&& (ENABLE_D_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_D_AND_NOT_SI === 1'b1),1.0);
      
      // hold SI-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D_AND_SE === 1'b1),
      negedge SI &&& (ENABLE_NOT_D_AND_SE === 1'b1),1.0);
      
      // hold SI-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D_AND_SE === 1'b1),
      posedge SI &&& (ENABLE_NOT_D_AND_SE === 1'b1),1.0);
      
      // setup SI-HL CK-LH
      $setup(negedge SI &&& (ENABLE_NOT_D_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_SE === 1'b1),1.0);
      
      // setup SI-LH CK-LH
      $setup(posedge SI &&& (ENABLE_NOT_D_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_SE === 1'b1),1.0);
      
      // hold SI-HL CK-LH
      $hold(posedge CK &&& (ENABLE_D_AND_SE === 1'b1),
      negedge SI &&& (ENABLE_D_AND_SE === 1'b1),1.0);
      
      // hold SI-LH CK-LH
      $hold(posedge CK &&& (ENABLE_D_AND_SE === 1'b1),
      posedge SI &&& (ENABLE_D_AND_SE === 1'b1),1.0);
      
      // setup SI-HL CK-LH
      $setup(negedge SI &&& (ENABLE_D_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_D_AND_SE === 1'b1),1.0);
      
      // setup SI-LH CK-LH
      $setup(posedge SI &&& (ENABLE_D_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_D_AND_SE === 1'b1),1.0);
      
      // mpw CK_lh 
      $width(posedge CK,1.0,0);
      
      // mpw CK_hl 
      $width(negedge CK,1.0,0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_FSDP_V2_4( Q, QN, CK, D, SI, SE );
input CK, D, SE, SI;
output Q, QN;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_FSDP_V2_4_func SAEDRVT14_FSDP_V2_4_behav_inst(.Q(Q),.QN(QN),.CK(CK),.D(D),.SI(SI),.SE(SE));
`else
   SAEDRVT14_FSDP_V2_4_func SAEDRVT14_FSDP_V2_4_inst(.Q(Q),.QN(QN),.CK(CK),.D(D),.SI(SI),.SE(SE));
   // spec_gates_begin
   not MGM_G0(MGM_W0,D);
   not MGM_G1(MGM_W1,SE);
   and MGM_G2(MGM_W2,MGM_W1,MGM_W0);
   not MGM_G3(MGM_W3,SI);
   and MGM_G4(ENABLE_NOT_D_AND_NOT_SE_AND_NOT_SI,MGM_W3,MGM_W2);
   not MGM_G5(MGM_W4,D);
   not MGM_G6(MGM_W5,SE);
   and MGM_G7(MGM_W6,MGM_W5,MGM_W4);
   and MGM_G8(ENABLE_NOT_D_AND_NOT_SE_AND_SI,SI,MGM_W6);
   not MGM_G9(MGM_W7,D);
   and MGM_G10(MGM_W8,SE,MGM_W7);
   not MGM_G11(MGM_W9,SI);
   and MGM_G12(ENABLE_NOT_D_AND_SE_AND_NOT_SI,MGM_W9,MGM_W8);
   not MGM_G13(MGM_W10,D);
   and MGM_G14(MGM_W11,SE,MGM_W10);
   and MGM_G15(ENABLE_NOT_D_AND_SE_AND_SI,SI,MGM_W11);
   not MGM_G16(MGM_W12,SE);
   and MGM_G17(MGM_W13,MGM_W12,D);
   not MGM_G18(MGM_W14,SI);
   and MGM_G19(ENABLE_D_AND_NOT_SE_AND_NOT_SI,MGM_W14,MGM_W13);
   not MGM_G20(MGM_W15,SE);
   and MGM_G21(MGM_W16,MGM_W15,D);
   and MGM_G22(ENABLE_D_AND_NOT_SE_AND_SI,SI,MGM_W16);
   and MGM_G23(MGM_W17,SE,D);
   not MGM_G24(MGM_W18,SI);
   and MGM_G25(ENABLE_D_AND_SE_AND_NOT_SI,MGM_W18,MGM_W17);
   and MGM_G26(MGM_W19,SE,D);
   and MGM_G27(ENABLE_D_AND_SE_AND_SI,SI,MGM_W19);
   not MGM_G28(MGM_W20,SE);
   not MGM_G29(MGM_W21,SI);
   and MGM_G30(ENABLE_NOT_SE_AND_NOT_SI,MGM_W21,MGM_W20);
   not MGM_G31(MGM_W22,SE);
   and MGM_G32(ENABLE_NOT_SE_AND_SI,SI,MGM_W22);
   not MGM_G33(MGM_W23,D);
   and MGM_G34(ENABLE_NOT_D_AND_SI,SI,MGM_W23);
   not MGM_G35(MGM_W24,SI);
   and MGM_G36(ENABLE_D_AND_NOT_SI,MGM_W24,D);
   not MGM_G37(MGM_W25,D);
   and MGM_G38(ENABLE_NOT_D_AND_SE,SE,MGM_W25);
   and MGM_G39(ENABLE_D_AND_SE,SE,D);
   // spec_gates_end
   // specify_block_begin
   specify

      if(D===1'b0 && SI===1'b1)
      // seq arc CK --> Q
      (posedge CK => (Q : SE))  = (1.0,1.0);
      
      if(SE===1'b0 && SI===1'b0)
      // seq arc CK --> Q
      (posedge CK => (Q : D))  = (1.0,1.0);
      
      if(D===1'b1 && SE===1'b0 && SI===1'b1 || D===1'b0 && SE===1'b1 && SI===1'b0)
      // seq arc CK --> Q
      (posedge CK => (Q : D))  = (1.0,1.0);
      
      if(D===1'b1 && SE===1'b1)
      // seq arc CK --> Q
      (posedge CK => (Q : SI))  = (1.0,1.0);
      
      ifnone
      // seq arc CK --> Q
      (posedge CK => (Q : D))  = (1.0,1.0);
      
      if(D===1'b0 && SI===1'b1)
      // seq arc CK --> QN
      (posedge CK => (QN : SE))  = (1.0,1.0);
      
      if(SE===1'b0 && SI===1'b0)
      // seq arc CK --> QN
      (posedge CK => (QN : D))  = (1.0,1.0);
      
      if(D===1'b1 && SE===1'b0 && SI===1'b1 || D===1'b0 && SE===1'b1 && SI===1'b0)
      // seq arc CK --> QN
      (posedge CK => (QN : D))  = (1.0,1.0);
      
      if(D===1'b1 && SE===1'b1)
      // seq arc CK --> QN
      (posedge CK => (QN : SI))  = (1.0,1.0);
      
      ifnone
      // seq arc CK --> QN
      (posedge CK => (QN : D))  = (1.0,1.0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      // hold D-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),
      negedge D &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold D-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),
      posedge D &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup D-HL CK-LH
      $setup(negedge D &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup D-LH CK-LH
      $setup(posedge D &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold D-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_SE_AND_SI === 1'b1),
      negedge D &&& (ENABLE_NOT_SE_AND_SI === 1'b1),1.0);
      
      // hold D-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_SE_AND_SI === 1'b1),
      posedge D &&& (ENABLE_NOT_SE_AND_SI === 1'b1),1.0);
      
      // setup D-HL CK-LH
      $setup(negedge D &&& (ENABLE_NOT_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_SE_AND_SI === 1'b1),1.0);
      
      // setup D-LH CK-LH
      $setup(posedge D &&& (ENABLE_NOT_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_SE_AND_SI === 1'b1),1.0);
      
      // hold SE-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D_AND_SI === 1'b1),
      negedge SE &&& (ENABLE_NOT_D_AND_SI === 1'b1),1.0);
      
      // hold SE-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D_AND_SI === 1'b1),
      posedge SE &&& (ENABLE_NOT_D_AND_SI === 1'b1),1.0);
      
      // setup SE-HL CK-LH
      $setup(negedge SE &&& (ENABLE_NOT_D_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_SI === 1'b1),1.0);
      
      // setup SE-LH CK-LH
      $setup(posedge SE &&& (ENABLE_NOT_D_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_SI === 1'b1),1.0);
      
      // hold SE-HL CK-LH
      $hold(posedge CK &&& (ENABLE_D_AND_NOT_SI === 1'b1),
      negedge SE &&& (ENABLE_D_AND_NOT_SI === 1'b1),1.0);
      
      // hold SE-LH CK-LH
      $hold(posedge CK &&& (ENABLE_D_AND_NOT_SI === 1'b1),
      posedge SE &&& (ENABLE_D_AND_NOT_SI === 1'b1),1.0);
      
      // setup SE-HL CK-LH
      $setup(negedge SE &&& (ENABLE_D_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_D_AND_NOT_SI === 1'b1),1.0);
      
      // setup SE-LH CK-LH
      $setup(posedge SE &&& (ENABLE_D_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_D_AND_NOT_SI === 1'b1),1.0);
      
      // hold SI-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D_AND_SE === 1'b1),
      negedge SI &&& (ENABLE_NOT_D_AND_SE === 1'b1),1.0);
      
      // hold SI-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D_AND_SE === 1'b1),
      posedge SI &&& (ENABLE_NOT_D_AND_SE === 1'b1),1.0);
      
      // setup SI-HL CK-LH
      $setup(negedge SI &&& (ENABLE_NOT_D_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_SE === 1'b1),1.0);
      
      // setup SI-LH CK-LH
      $setup(posedge SI &&& (ENABLE_NOT_D_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_SE === 1'b1),1.0);
      
      // hold SI-HL CK-LH
      $hold(posedge CK &&& (ENABLE_D_AND_SE === 1'b1),
      negedge SI &&& (ENABLE_D_AND_SE === 1'b1),1.0);
      
      // hold SI-LH CK-LH
      $hold(posedge CK &&& (ENABLE_D_AND_SE === 1'b1),
      posedge SI &&& (ENABLE_D_AND_SE === 1'b1),1.0);
      
      // setup SI-HL CK-LH
      $setup(negedge SI &&& (ENABLE_D_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_D_AND_SE === 1'b1),1.0);
      
      // setup SI-LH CK-LH
      $setup(posedge SI &&& (ENABLE_D_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_D_AND_SE === 1'b1),1.0);
      
      // mpw CK_lh 
      $width(posedge CK,1.0,0);
      
      // mpw CK_hl 
      $width(negedge CK,1.0,0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_LDCKNR2PQ_5( Q, G1, G2, D );
input D, G1, G2;
output Q;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_LDCKNR2PQ_5_func SAEDRVT14_LDCKNR2PQ_5_behav_inst(.Q(Q),.G1(G1),.G2(G2),.D(D));
`else
   SAEDRVT14_LDCKNR2PQ_5_func SAEDRVT14_LDCKNR2PQ_5_inst(.Q(Q),.G1(G1),.G2(G2),.D(D));
   // spec_gates_begin
   not MGM_G0(ENABLE_NOT_G2,G2);
   not MGM_G1(ENABLE_NOT_G1,G1);
   not MGM_G2(MGM_W0,D);
   not MGM_G3(MGM_W1,G2);
   and MGM_G4(ENABLE_NOT_D_AND_NOT_G2,MGM_W1,MGM_W0);
   not MGM_G5(MGM_W2,G2);
   and MGM_G6(ENABLE_D_AND_NOT_G2,MGM_W2,D);
   not MGM_G7(MGM_W3,D);
   not MGM_G8(MGM_W4,G1);
   and MGM_G9(ENABLE_NOT_D_AND_NOT_G1,MGM_W4,MGM_W3);
   not MGM_G10(MGM_W5,G1);
   and MGM_G11(ENABLE_D_AND_NOT_G1,MGM_W5,D);
   // spec_gates_end
   // specify_block_begin
   specify

      if(G1===1'b0 && G2===1'b1)
      // comb arc D --> Q
      (D => Q) = (1.0,1.0);
      
      if(G1===1'b1 && G2===1'b0)
      // comb arc D --> Q
      (D => Q) = (1.0,1.0);
      
      if(G1===1'b1 && G2===1'b1)
      // comb arc D --> Q
      (D => Q) = (1.0,1.0);
      
      ifnone
      // comb arc D --> Q
      (D => Q) = (1.0,1.0);
      
      // seq arc G1 --> Q
      (posedge G1 => (Q : D))  = (1.0,1.0);
      
      // seq arc G2 --> Q
      (posedge G2 => (Q : D))  = (1.0,1.0);
      
      // hold D-HL G1-HL
      $hold(negedge G1 &&& (ENABLE_NOT_G2 === 1'b1),
      negedge D &&& (ENABLE_NOT_G2 === 1'b1),1.0);
      
      // hold D-LH G1-HL
      $hold(negedge G1 &&& (ENABLE_NOT_G2 === 1'b1),
      posedge D &&& (ENABLE_NOT_G2 === 1'b1),1.0);
      
      // setup D-HL G1-HL
      $setup(negedge D &&& (ENABLE_NOT_G2 === 1'b1),
      negedge G1 &&& (ENABLE_NOT_G2 === 1'b1),1.0);
      
      // setup D-LH G1-HL
      $setup(posedge D &&& (ENABLE_NOT_G2 === 1'b1),
      negedge G1 &&& (ENABLE_NOT_G2 === 1'b1),1.0);
      
      // hold D-HL G2-HL
      $hold(negedge G2 &&& (ENABLE_NOT_G1 === 1'b1),
      negedge D &&& (ENABLE_NOT_G1 === 1'b1),1.0);
      
      // hold D-LH G2-HL
      $hold(negedge G2 &&& (ENABLE_NOT_G1 === 1'b1),
      posedge D &&& (ENABLE_NOT_G1 === 1'b1),1.0);
      
      // setup D-HL G2-HL
      $setup(negedge D &&& (ENABLE_NOT_G1 === 1'b1),
      negedge G2 &&& (ENABLE_NOT_G1 === 1'b1),1.0);
      
      // setup D-LH G2-HL
      $setup(posedge D &&& (ENABLE_NOT_G1 === 1'b1),
      negedge G2 &&& (ENABLE_NOT_G1 === 1'b1),1.0);
      
      $width(posedge G1 &&& (ENABLE_NOT_D_AND_NOT_G2 === 1'b1)
      ,1.0,0);
      
      $width(posedge G1 &&& (ENABLE_D_AND_NOT_G2 === 1'b1)
      ,1.0,0);
      
      $width(posedge G2 &&& (ENABLE_NOT_D_AND_NOT_G1 === 1'b1)
      ,1.0,0);
      
      $width(posedge G2 &&& (ENABLE_D_AND_NOT_G1 === 1'b1)
      ,1.0,0);
      
      // mpw G1_lh 
      $width(posedge G1,1.0,0);
      
      // mpw G2_lh 
      $width(posedge G2,1.0,0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_LDND2NQ_1( Q, G, EN, SE );
input EN, G, SE;
output Q;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_LDND2NQ_1_func SAEDRVT14_LDND2NQ_1_behav_inst(.Q(Q),.G(G),.EN(EN),.SE(SE));
`else
   SAEDRVT14_LDND2NQ_1_func SAEDRVT14_LDND2NQ_1_inst(.Q(Q),.G(G),.EN(EN),.SE(SE));
   // spec_gates_begin
   buf MGM_G0(ENABLE_SE,SE);
   not MGM_G1(MGM_W0,EN);
   not MGM_G2(MGM_W1,SE);
   and MGM_G3(ENABLE_NOT_EN_AND_NOT_SE,MGM_W1,MGM_W0);
   not MGM_G4(MGM_W2,EN);
   and MGM_G5(ENABLE_NOT_EN_AND_SE,SE,MGM_W2);
   not MGM_G6(MGM_W3,SE);
   and MGM_G7(ENABLE_EN_AND_NOT_SE,MGM_W3,EN);
   and MGM_G8(ENABLE_EN_AND_SE,SE,EN);
   buf MGM_G9(ENABLE_EN,EN);
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc EN --> Q
      (EN => Q) = (1.0,1.0);
      
      if(EN===1'b0 && SE===1'b0)
      // seq arc G --> Q
      (negedge G => (Q : EN))  = (1.0,1.0);
      
      if(EN===1'b1 && SE===1'b0)
      // seq arc G --> Q
      (negedge G => (Q : EN))  = (1.0,1.0);
      
      if(SE===1'b1)
      // seq arc G --> Q
      (negedge G => (Q : EN))  = (1.0,1.0);
      
      ifnone
      // seq arc G --> Q
      (negedge G => (Q : EN))  = (1.0,1.0);
      
      // comb arc SE --> Q
      (SE => Q) = (1.0,1.0);
      
      // hold EN-HL G-LH
      $hold(posedge G &&& (ENABLE_SE === 1'b1),
      negedge EN &&& (ENABLE_SE === 1'b1),1.0);
      
      // hold EN-LH G-LH
      $hold(posedge G &&& (ENABLE_SE === 1'b1),
      posedge EN &&& (ENABLE_SE === 1'b1),1.0);
      
      // setup EN-HL G-LH
      $setup(negedge EN &&& (ENABLE_SE === 1'b1),
      posedge G &&& (ENABLE_SE === 1'b1),1.0);
      
      // setup EN-LH G-LH
      $setup(posedge EN &&& (ENABLE_SE === 1'b1),
      posedge G &&& (ENABLE_SE === 1'b1),1.0);
      
      $width(negedge G &&& (ENABLE_NOT_EN_AND_NOT_SE === 1'b1)
      ,1.0,0);
      
      $width(negedge G &&& (ENABLE_NOT_EN_AND_SE === 1'b1)
      ,1.0,0);
      
      $width(negedge G &&& (ENABLE_EN_AND_NOT_SE === 1'b1)
      ,1.0,0);
      
      $width(negedge G &&& (ENABLE_EN_AND_SE === 1'b1)
      ,1.0,0);
      
      // hold SE-HL G-LH
      $hold(posedge G &&& (ENABLE_EN === 1'b1),
      negedge SE &&& (ENABLE_EN === 1'b1),1.0);
      
      // hold SE-LH G-LH
      $hold(posedge G &&& (ENABLE_EN === 1'b1),
      posedge SE &&& (ENABLE_EN === 1'b1),1.0);
      
      // setup SE-HL G-LH
      $setup(negedge SE &&& (ENABLE_EN === 1'b1),
      posedge G &&& (ENABLE_EN === 1'b1),1.0);
      
      // setup SE-LH G-LH
      $setup(posedge SE &&& (ENABLE_EN === 1'b1),
      posedge G &&& (ENABLE_EN === 1'b1),1.0);
      
      // mpw G_hl 
      $width(negedge G,1.0,0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_LDND2NQ_2( Q, G, EN, SE );
input EN, G, SE;
output Q;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_LDND2NQ_2_func SAEDRVT14_LDND2NQ_2_behav_inst(.Q(Q),.G(G),.EN(EN),.SE(SE));
`else
   SAEDRVT14_LDND2NQ_2_func SAEDRVT14_LDND2NQ_2_inst(.Q(Q),.G(G),.EN(EN),.SE(SE));
   // spec_gates_begin
   buf MGM_G0(ENABLE_SE,SE);
   not MGM_G1(MGM_W0,EN);
   not MGM_G2(MGM_W1,SE);
   and MGM_G3(ENABLE_NOT_EN_AND_NOT_SE,MGM_W1,MGM_W0);
   not MGM_G4(MGM_W2,EN);
   and MGM_G5(ENABLE_NOT_EN_AND_SE,SE,MGM_W2);
   not MGM_G6(MGM_W3,SE);
   and MGM_G7(ENABLE_EN_AND_NOT_SE,MGM_W3,EN);
   and MGM_G8(ENABLE_EN_AND_SE,SE,EN);
   buf MGM_G9(ENABLE_EN,EN);
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc EN --> Q
      (EN => Q) = (1.0,1.0);
      
      if(EN===1'b0 && SE===1'b0)
      // seq arc G --> Q
      (negedge G => (Q : EN))  = (1.0,1.0);
      
      if(EN===1'b1 && SE===1'b0)
      // seq arc G --> Q
      (negedge G => (Q : EN))  = (1.0,1.0);
      
      if(SE===1'b1)
      // seq arc G --> Q
      (negedge G => (Q : EN))  = (1.0,1.0);
      
      ifnone
      // seq arc G --> Q
      (negedge G => (Q : EN))  = (1.0,1.0);
      
      // comb arc SE --> Q
      (SE => Q) = (1.0,1.0);
      
      // hold EN-HL G-LH
      $hold(posedge G &&& (ENABLE_SE === 1'b1),
      negedge EN &&& (ENABLE_SE === 1'b1),1.0);
      
      // hold EN-LH G-LH
      $hold(posedge G &&& (ENABLE_SE === 1'b1),
      posedge EN &&& (ENABLE_SE === 1'b1),1.0);
      
      // setup EN-HL G-LH
      $setup(negedge EN &&& (ENABLE_SE === 1'b1),
      posedge G &&& (ENABLE_SE === 1'b1),1.0);
      
      // setup EN-LH G-LH
      $setup(posedge EN &&& (ENABLE_SE === 1'b1),
      posedge G &&& (ENABLE_SE === 1'b1),1.0);
      
      $width(negedge G &&& (ENABLE_NOT_EN_AND_NOT_SE === 1'b1)
      ,1.0,0);
      
      $width(negedge G &&& (ENABLE_NOT_EN_AND_SE === 1'b1)
      ,1.0,0);
      
      $width(negedge G &&& (ENABLE_EN_AND_NOT_SE === 1'b1)
      ,1.0,0);
      
      $width(negedge G &&& (ENABLE_EN_AND_SE === 1'b1)
      ,1.0,0);
      
      // hold SE-HL G-LH
      $hold(posedge G &&& (ENABLE_EN === 1'b1),
      negedge SE &&& (ENABLE_EN === 1'b1),1.0);
      
      // hold SE-LH G-LH
      $hold(posedge G &&& (ENABLE_EN === 1'b1),
      posedge SE &&& (ENABLE_EN === 1'b1),1.0);
      
      // setup SE-HL G-LH
      $setup(negedge SE &&& (ENABLE_EN === 1'b1),
      posedge G &&& (ENABLE_EN === 1'b1),1.0);
      
      // setup SE-LH G-LH
      $setup(posedge SE &&& (ENABLE_EN === 1'b1),
      posedge G &&& (ENABLE_EN === 1'b1),1.0);
      
      // mpw G_hl 
      $width(negedge G,1.0,0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_LDND2NQ_4( Q, G, EN, SE );
input EN, G, SE;
output Q;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_LDND2NQ_4_func SAEDRVT14_LDND2NQ_4_behav_inst(.Q(Q),.G(G),.EN(EN),.SE(SE));
`else
   SAEDRVT14_LDND2NQ_4_func SAEDRVT14_LDND2NQ_4_inst(.Q(Q),.G(G),.EN(EN),.SE(SE));
   // spec_gates_begin
   buf MGM_G0(ENABLE_SE,SE);
   not MGM_G1(MGM_W0,EN);
   not MGM_G2(MGM_W1,SE);
   and MGM_G3(ENABLE_NOT_EN_AND_NOT_SE,MGM_W1,MGM_W0);
   not MGM_G4(MGM_W2,EN);
   and MGM_G5(ENABLE_NOT_EN_AND_SE,SE,MGM_W2);
   not MGM_G6(MGM_W3,SE);
   and MGM_G7(ENABLE_EN_AND_NOT_SE,MGM_W3,EN);
   and MGM_G8(ENABLE_EN_AND_SE,SE,EN);
   buf MGM_G9(ENABLE_EN,EN);
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc EN --> Q
      (EN => Q) = (1.0,1.0);
      
      if(EN===1'b0 && SE===1'b0)
      // seq arc G --> Q
      (negedge G => (Q : EN))  = (1.0,1.0);
      
      if(EN===1'b1 && SE===1'b0)
      // seq arc G --> Q
      (negedge G => (Q : EN))  = (1.0,1.0);
      
      if(SE===1'b1)
      // seq arc G --> Q
      (negedge G => (Q : EN))  = (1.0,1.0);
      
      ifnone
      // seq arc G --> Q
      (negedge G => (Q : EN))  = (1.0,1.0);
      
      // comb arc SE --> Q
      (SE => Q) = (1.0,1.0);
      
      // hold EN-HL G-LH
      $hold(posedge G &&& (ENABLE_SE === 1'b1),
      negedge EN &&& (ENABLE_SE === 1'b1),1.0);
      
      // hold EN-LH G-LH
      $hold(posedge G &&& (ENABLE_SE === 1'b1),
      posedge EN &&& (ENABLE_SE === 1'b1),1.0);
      
      // setup EN-HL G-LH
      $setup(negedge EN &&& (ENABLE_SE === 1'b1),
      posedge G &&& (ENABLE_SE === 1'b1),1.0);
      
      // setup EN-LH G-LH
      $setup(posedge EN &&& (ENABLE_SE === 1'b1),
      posedge G &&& (ENABLE_SE === 1'b1),1.0);
      
      $width(negedge G &&& (ENABLE_NOT_EN_AND_NOT_SE === 1'b1)
      ,1.0,0);
      
      $width(negedge G &&& (ENABLE_NOT_EN_AND_SE === 1'b1)
      ,1.0,0);
      
      $width(negedge G &&& (ENABLE_EN_AND_NOT_SE === 1'b1)
      ,1.0,0);
      
      $width(negedge G &&& (ENABLE_EN_AND_SE === 1'b1)
      ,1.0,0);
      
      // hold SE-HL G-LH
      $hold(posedge G &&& (ENABLE_EN === 1'b1),
      negedge SE &&& (ENABLE_EN === 1'b1),1.0);
      
      // hold SE-LH G-LH
      $hold(posedge G &&& (ENABLE_EN === 1'b1),
      posedge SE &&& (ENABLE_EN === 1'b1),1.0);
      
      // setup SE-HL G-LH
      $setup(negedge SE &&& (ENABLE_EN === 1'b1),
      posedge G &&& (ENABLE_EN === 1'b1),1.0);
      
      // setup SE-LH G-LH
      $setup(posedge SE &&& (ENABLE_EN === 1'b1),
      posedge G &&& (ENABLE_EN === 1'b1),1.0);
      
      // mpw G_hl 
      $width(negedge G,1.0,0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_LDNQOR2_1( Q, G, TEN, EN );
input EN, G, TEN;
output Q;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_LDNQOR2_1_func SAEDRVT14_LDNQOR2_1_behav_inst(.Q(Q),.G(G),.TEN(TEN),.EN(EN));
`else
   SAEDRVT14_LDNQOR2_1_func SAEDRVT14_LDNQOR2_1_inst(.Q(Q),.G(G),.TEN(TEN),.EN(EN));
   // spec_gates_begin
   not MGM_G0(ENABLE_NOT_TEN,TEN);
   not MGM_G1(MGM_W0,EN);
   not MGM_G2(MGM_W1,TEN);
   and MGM_G3(ENABLE_NOT_EN_AND_NOT_TEN,MGM_W1,MGM_W0);
   not MGM_G4(MGM_W2,EN);
   and MGM_G5(ENABLE_NOT_EN_AND_TEN,TEN,MGM_W2);
   not MGM_G6(MGM_W3,TEN);
   and MGM_G7(ENABLE_EN_AND_NOT_TEN,MGM_W3,EN);
   and MGM_G8(ENABLE_EN_AND_TEN,TEN,EN);
   not MGM_G9(ENABLE_NOT_EN,EN);
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc EN --> Q
      (EN => Q) = (1.0,1.0);
      
      if(EN===1'b1 && TEN===1'b0)
      // seq arc G --> Q
      (negedge G => (Q : EN))  = (1.0,1.0);
      
      if(EN===1'b1 && TEN===1'b1)
      // seq arc G --> Q
      (negedge G => (Q : EN))  = (1.0,1.0);
      
      if(EN===1'b0)
      // seq arc G --> Q
      (negedge G => (Q : TEN))  = (1.0,1.0);
      
      ifnone
      // seq arc G --> Q
      (negedge G => (Q : EN))  = (1.0,1.0);
      
      // comb arc TEN --> Q
      (TEN => Q) = (1.0,1.0);
      
      // hold EN-HL G-LH
      $hold(posedge G &&& (ENABLE_NOT_TEN === 1'b1),
      negedge EN &&& (ENABLE_NOT_TEN === 1'b1),1.0);
      
      // hold EN-LH G-LH
      $hold(posedge G &&& (ENABLE_NOT_TEN === 1'b1),
      posedge EN &&& (ENABLE_NOT_TEN === 1'b1),1.0);
      
      // setup EN-HL G-LH
      $setup(negedge EN &&& (ENABLE_NOT_TEN === 1'b1),
      posedge G &&& (ENABLE_NOT_TEN === 1'b1),1.0);
      
      // setup EN-LH G-LH
      $setup(posedge EN &&& (ENABLE_NOT_TEN === 1'b1),
      posedge G &&& (ENABLE_NOT_TEN === 1'b1),1.0);
      
      $width(negedge G &&& (ENABLE_NOT_EN_AND_NOT_TEN === 1'b1)
      ,1.0,0);
      
      $width(negedge G &&& (ENABLE_NOT_EN_AND_TEN === 1'b1)
      ,1.0,0);
      
      $width(negedge G &&& (ENABLE_EN_AND_NOT_TEN === 1'b1)
      ,1.0,0);
      
      $width(negedge G &&& (ENABLE_EN_AND_TEN === 1'b1)
      ,1.0,0);
      
      // hold TEN-HL G-LH
      $hold(posedge G &&& (ENABLE_NOT_EN === 1'b1),
      negedge TEN &&& (ENABLE_NOT_EN === 1'b1),1.0);
      
      // hold TEN-LH G-LH
      $hold(posedge G &&& (ENABLE_NOT_EN === 1'b1),
      posedge TEN &&& (ENABLE_NOT_EN === 1'b1),1.0);
      
      // setup TEN-HL G-LH
      $setup(negedge TEN &&& (ENABLE_NOT_EN === 1'b1),
      posedge G &&& (ENABLE_NOT_EN === 1'b1),1.0);
      
      // setup TEN-LH G-LH
      $setup(posedge TEN &&& (ENABLE_NOT_EN === 1'b1),
      posedge G &&& (ENABLE_NOT_EN === 1'b1),1.0);
      
      // mpw G_hl 
      $width(negedge G,1.0,0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_LDNQOR2_2( Q, G, TEN, EN );
input EN, G, TEN;
output Q;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_LDNQOR2_2_func SAEDRVT14_LDNQOR2_2_behav_inst(.Q(Q),.G(G),.TEN(TEN),.EN(EN));
`else
   SAEDRVT14_LDNQOR2_2_func SAEDRVT14_LDNQOR2_2_inst(.Q(Q),.G(G),.TEN(TEN),.EN(EN));
   // spec_gates_begin
   not MGM_G0(ENABLE_NOT_TEN,TEN);
   not MGM_G1(MGM_W0,EN);
   not MGM_G2(MGM_W1,TEN);
   and MGM_G3(ENABLE_NOT_EN_AND_NOT_TEN,MGM_W1,MGM_W0);
   not MGM_G4(MGM_W2,EN);
   and MGM_G5(ENABLE_NOT_EN_AND_TEN,TEN,MGM_W2);
   not MGM_G6(MGM_W3,TEN);
   and MGM_G7(ENABLE_EN_AND_NOT_TEN,MGM_W3,EN);
   and MGM_G8(ENABLE_EN_AND_TEN,TEN,EN);
   not MGM_G9(ENABLE_NOT_EN,EN);
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc EN --> Q
      (EN => Q) = (1.0,1.0);
      
      if(EN===1'b1 && TEN===1'b0)
      // seq arc G --> Q
      (negedge G => (Q : EN))  = (1.0,1.0);
      
      if(EN===1'b1 && TEN===1'b1)
      // seq arc G --> Q
      (negedge G => (Q : EN))  = (1.0,1.0);
      
      if(EN===1'b0)
      // seq arc G --> Q
      (negedge G => (Q : TEN))  = (1.0,1.0);
      
      ifnone
      // seq arc G --> Q
      (negedge G => (Q : EN))  = (1.0,1.0);
      
      // comb arc TEN --> Q
      (TEN => Q) = (1.0,1.0);
      
      // hold EN-HL G-LH
      $hold(posedge G &&& (ENABLE_NOT_TEN === 1'b1),
      negedge EN &&& (ENABLE_NOT_TEN === 1'b1),1.0);
      
      // hold EN-LH G-LH
      $hold(posedge G &&& (ENABLE_NOT_TEN === 1'b1),
      posedge EN &&& (ENABLE_NOT_TEN === 1'b1),1.0);
      
      // setup EN-HL G-LH
      $setup(negedge EN &&& (ENABLE_NOT_TEN === 1'b1),
      posedge G &&& (ENABLE_NOT_TEN === 1'b1),1.0);
      
      // setup EN-LH G-LH
      $setup(posedge EN &&& (ENABLE_NOT_TEN === 1'b1),
      posedge G &&& (ENABLE_NOT_TEN === 1'b1),1.0);
      
      $width(negedge G &&& (ENABLE_NOT_EN_AND_NOT_TEN === 1'b1)
      ,1.0,0);
      
      $width(negedge G &&& (ENABLE_NOT_EN_AND_TEN === 1'b1)
      ,1.0,0);
      
      $width(negedge G &&& (ENABLE_EN_AND_NOT_TEN === 1'b1)
      ,1.0,0);
      
      $width(negedge G &&& (ENABLE_EN_AND_TEN === 1'b1)
      ,1.0,0);
      
      // hold TEN-HL G-LH
      $hold(posedge G &&& (ENABLE_NOT_EN === 1'b1),
      negedge TEN &&& (ENABLE_NOT_EN === 1'b1),1.0);
      
      // hold TEN-LH G-LH
      $hold(posedge G &&& (ENABLE_NOT_EN === 1'b1),
      posedge TEN &&& (ENABLE_NOT_EN === 1'b1),1.0);
      
      // setup TEN-HL G-LH
      $setup(negedge TEN &&& (ENABLE_NOT_EN === 1'b1),
      posedge G &&& (ENABLE_NOT_EN === 1'b1),1.0);
      
      // setup TEN-LH G-LH
      $setup(posedge TEN &&& (ENABLE_NOT_EN === 1'b1),
      posedge G &&& (ENABLE_NOT_EN === 1'b1),1.0);
      
      // mpw G_hl 
      $width(negedge G,1.0,0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_LDNQOR2_4( G, Q, TEN, EN );
input EN, G, TEN;
output Q;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_LDNQOR2_4_func SAEDRVT14_LDNQOR2_4_behav_inst(.G(G),.Q(Q),.TEN(TEN),.EN(EN));
`else
   SAEDRVT14_LDNQOR2_4_func SAEDRVT14_LDNQOR2_4_inst(.G(G),.Q(Q),.TEN(TEN),.EN(EN));
   // spec_gates_begin
   not MGM_G0(ENABLE_NOT_TEN,TEN);
   not MGM_G1(MGM_W0,EN);
   not MGM_G2(MGM_W1,TEN);
   and MGM_G3(ENABLE_NOT_EN_AND_NOT_TEN,MGM_W1,MGM_W0);
   not MGM_G4(MGM_W2,EN);
   and MGM_G5(ENABLE_NOT_EN_AND_TEN,TEN,MGM_W2);
   not MGM_G6(MGM_W3,TEN);
   and MGM_G7(ENABLE_EN_AND_NOT_TEN,MGM_W3,EN);
   and MGM_G8(ENABLE_EN_AND_TEN,TEN,EN);
   not MGM_G9(ENABLE_NOT_EN,EN);
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc EN --> Q
      (EN => Q) = (1.0,1.0);
      
      if(EN===1'b1 && TEN===1'b0)
      // seq arc G --> Q
      (negedge G => (Q : EN))  = (1.0,1.0);
      
      if(EN===1'b1 && TEN===1'b1)
      // seq arc G --> Q
      (negedge G => (Q : EN))  = (1.0,1.0);
      
      if(EN===1'b0)
      // seq arc G --> Q
      (negedge G => (Q : TEN))  = (1.0,1.0);
      
      ifnone
      // seq arc G --> Q
      (negedge G => (Q : EN))  = (1.0,1.0);
      
      // comb arc TEN --> Q
      (TEN => Q) = (1.0,1.0);
      
      // hold EN-HL G-LH
      $hold(posedge G &&& (ENABLE_NOT_TEN === 1'b1),
      negedge EN &&& (ENABLE_NOT_TEN === 1'b1),1.0);
      
      // hold EN-LH G-LH
      $hold(posedge G &&& (ENABLE_NOT_TEN === 1'b1),
      posedge EN &&& (ENABLE_NOT_TEN === 1'b1),1.0);
      
      // setup EN-HL G-LH
      $setup(negedge EN &&& (ENABLE_NOT_TEN === 1'b1),
      posedge G &&& (ENABLE_NOT_TEN === 1'b1),1.0);
      
      // setup EN-LH G-LH
      $setup(posedge EN &&& (ENABLE_NOT_TEN === 1'b1),
      posedge G &&& (ENABLE_NOT_TEN === 1'b1),1.0);
      
      $width(negedge G &&& (ENABLE_NOT_EN_AND_NOT_TEN === 1'b1)
      ,1.0,0);
      
      $width(negedge G &&& (ENABLE_NOT_EN_AND_TEN === 1'b1)
      ,1.0,0);
      
      $width(negedge G &&& (ENABLE_EN_AND_NOT_TEN === 1'b1)
      ,1.0,0);
      
      $width(negedge G &&& (ENABLE_EN_AND_TEN === 1'b1)
      ,1.0,0);
      
      // hold TEN-HL G-LH
      $hold(posedge G &&& (ENABLE_NOT_EN === 1'b1),
      negedge TEN &&& (ENABLE_NOT_EN === 1'b1),1.0);
      
      // hold TEN-LH G-LH
      $hold(posedge G &&& (ENABLE_NOT_EN === 1'b1),
      posedge TEN &&& (ENABLE_NOT_EN === 1'b1),1.0);
      
      // setup TEN-HL G-LH
      $setup(negedge TEN &&& (ENABLE_NOT_EN === 1'b1),
      posedge G &&& (ENABLE_NOT_EN === 1'b1),1.0);
      
      // setup TEN-LH G-LH
      $setup(posedge TEN &&& (ENABLE_NOT_EN === 1'b1),
      posedge G &&& (ENABLE_NOT_EN === 1'b1),1.0);
      
      // mpw G_hl 
      $width(negedge G,1.0,0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_LDNQ_1( Q, G, D );
input D, G;
output Q;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_LDNQ_1_func SAEDRVT14_LDNQ_1_behav_inst(.Q(Q),.G(G),.D(D));
`else
   SAEDRVT14_LDNQ_1_func SAEDRVT14_LDNQ_1_inst(.Q(Q),.G(G),.D(D));
   // spec_gates_begin
   not MGM_G0(ENABLE_NOT_D,D);
   buf MGM_G1(ENABLE_D,D);
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc D --> Q
      (D => Q) = (1.0,1.0);
      
      // seq arc G --> Q
      (negedge G => (Q : D))  = (1.0,1.0);
      
      // hold D-HL G-LH
      $hold(posedge G,negedge D,1.0);
      
      // hold D-LH G-LH
      $hold(posedge G,posedge D,1.0);
      
      // setup D-HL G-LH
      $setup(negedge D,posedge G,1.0);
      
      // setup D-LH G-LH
      $setup(posedge D,posedge G,1.0);
      
      $width(negedge G &&& (ENABLE_NOT_D === 1'b1)
      ,1.0,0);
      
      $width(negedge G &&& (ENABLE_D === 1'b1)
      ,1.0,0);
      
      // mpw G_hl 
      $width(negedge G,1.0,0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_LDNQ_2( Q, G, D );
input D, G;
output Q;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_LDNQ_2_func SAEDRVT14_LDNQ_2_behav_inst(.Q(Q),.G(G),.D(D));
`else
   SAEDRVT14_LDNQ_2_func SAEDRVT14_LDNQ_2_inst(.Q(Q),.G(G),.D(D));
   // spec_gates_begin
   not MGM_G0(ENABLE_NOT_D,D);
   buf MGM_G1(ENABLE_D,D);
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc D --> Q
      (D => Q) = (1.0,1.0);
      
      // seq arc G --> Q
      (negedge G => (Q : D))  = (1.0,1.0);
      
      // hold D-HL G-LH
      $hold(posedge G,negedge D,1.0);
      
      // hold D-LH G-LH
      $hold(posedge G,posedge D,1.0);
      
      // setup D-HL G-LH
      $setup(negedge D,posedge G,1.0);
      
      // setup D-LH G-LH
      $setup(posedge D,posedge G,1.0);
      
      $width(negedge G &&& (ENABLE_NOT_D === 1'b1)
      ,1.0,0);
      
      $width(negedge G &&& (ENABLE_D === 1'b1)
      ,1.0,0);
      
      // mpw G_hl 
      $width(negedge G,1.0,0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_LDNQ_3( Q, G, D );
input D, G;
output Q;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_LDNQ_3_func SAEDRVT14_LDNQ_3_behav_inst(.Q(Q),.G(G),.D(D));
`else
   SAEDRVT14_LDNQ_3_func SAEDRVT14_LDNQ_3_inst(.Q(Q),.G(G),.D(D));
   // spec_gates_begin
   not MGM_G0(ENABLE_NOT_D,D);
   buf MGM_G1(ENABLE_D,D);
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc D --> Q
      (D => Q) = (1.0,1.0);
      
      // seq arc G --> Q
      (negedge G => (Q : D))  = (1.0,1.0);
      
      // hold D-HL G-LH
      $hold(posedge G,negedge D,1.0);
      
      // hold D-LH G-LH
      $hold(posedge G,posedge D,1.0);
      
      // setup D-HL G-LH
      $setup(negedge D,posedge G,1.0);
      
      // setup D-LH G-LH
      $setup(posedge D,posedge G,1.0);
      
      $width(negedge G &&& (ENABLE_NOT_D === 1'b1)
      ,1.0,0);
      
      $width(negedge G &&& (ENABLE_D === 1'b1)
      ,1.0,0);
      
      // mpw G_hl 
      $width(negedge G,1.0,0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_LDNQ_4( Q, G, D );
input D, G;
output Q;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_LDNQ_4_func SAEDRVT14_LDNQ_4_behav_inst(.Q(Q),.G(G),.D(D));
`else
   SAEDRVT14_LDNQ_4_func SAEDRVT14_LDNQ_4_inst(.Q(Q),.G(G),.D(D));
   // spec_gates_begin
   not MGM_G0(ENABLE_NOT_D,D);
   buf MGM_G1(ENABLE_D,D);
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc D --> Q
      (D => Q) = (1.0,1.0);
      
      // seq arc G --> Q
      (negedge G => (Q : D))  = (1.0,1.0);
      
      // hold D-HL G-LH
      $hold(posedge G,negedge D,1.0);
      
      // hold D-LH G-LH
      $hold(posedge G,posedge D,1.0);
      
      // setup D-HL G-LH
      $setup(negedge D,posedge G,1.0);
      
      // setup D-LH G-LH
      $setup(posedge D,posedge G,1.0);
      
      $width(negedge G &&& (ENABLE_NOT_D === 1'b1)
      ,1.0,0);
      
      $width(negedge G &&& (ENABLE_D === 1'b1)
      ,1.0,0);
      
      // mpw G_hl 
      $width(negedge G,1.0,0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_LDNQ_5( Q, G, D );
input D, G;
output Q;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_LDNQ_5_func SAEDRVT14_LDNQ_5_behav_inst(.Q(Q),.G(G),.D(D));
`else
   SAEDRVT14_LDNQ_5_func SAEDRVT14_LDNQ_5_inst(.Q(Q),.G(G),.D(D));
   // spec_gates_begin
   not MGM_G0(ENABLE_NOT_D,D);
   buf MGM_G1(ENABLE_D,D);
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc D --> Q
      (D => Q) = (1.0,1.0);
      
      // seq arc G --> Q
      (negedge G => (Q : D))  = (1.0,1.0);
      
      // hold D-HL G-LH
      $hold(posedge G,negedge D,1.0);
      
      // hold D-LH G-LH
      $hold(posedge G,posedge D,1.0);
      
      // setup D-HL G-LH
      $setup(negedge D,posedge G,1.0);
      
      // setup D-LH G-LH
      $setup(posedge D,posedge G,1.0);
      
      $width(negedge G &&& (ENABLE_NOT_D === 1'b1)
      ,1.0,0);
      
      $width(negedge G &&& (ENABLE_D === 1'b1)
      ,1.0,0);
      
      // mpw G_hl 
      $width(negedge G,1.0,0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_LDNQ_6( Q, G, D );
input D, G;
output Q;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_LDNQ_6_func SAEDRVT14_LDNQ_6_behav_inst(.Q(Q),.G(G),.D(D));
`else
   SAEDRVT14_LDNQ_6_func SAEDRVT14_LDNQ_6_inst(.Q(Q),.G(G),.D(D));
   // spec_gates_begin
   not MGM_G0(ENABLE_NOT_D,D);
   buf MGM_G1(ENABLE_D,D);
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc D --> Q
      (D => Q) = (1.0,1.0);
      
      // seq arc G --> Q
      (negedge G => (Q : D))  = (1.0,1.0);
      
      // hold D-HL G-LH
      $hold(posedge G,negedge D,1.0);
      
      // hold D-LH G-LH
      $hold(posedge G,posedge D,1.0);
      
      // setup D-HL G-LH
      $setup(negedge D,posedge G,1.0);
      
      // setup D-LH G-LH
      $setup(posedge D,posedge G,1.0);
      
      $width(negedge G &&& (ENABLE_NOT_D === 1'b1)
      ,1.0,0);
      
      $width(negedge G &&& (ENABLE_D === 1'b1)
      ,1.0,0);
      
      // mpw G_hl 
      $width(negedge G,1.0,0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_LDNQ_8( Q, G, D );
input D, G;
output Q;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_LDNQ_8_func SAEDRVT14_LDNQ_8_behav_inst(.Q(Q),.G(G),.D(D));
`else
   SAEDRVT14_LDNQ_8_func SAEDRVT14_LDNQ_8_inst(.Q(Q),.G(G),.D(D));
   // spec_gates_begin
   not MGM_G0(ENABLE_NOT_D,D);
   buf MGM_G1(ENABLE_D,D);
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc D --> Q
      (D => Q) = (1.0,1.0);
      
      // seq arc G --> Q
      (negedge G => (Q : D))  = (1.0,1.0);
      
      // hold D-HL G-LH
      $hold(posedge G,negedge D,1.0);
      
      // hold D-LH G-LH
      $hold(posedge G,posedge D,1.0);
      
      // setup D-HL G-LH
      $setup(negedge D,posedge G,1.0);
      
      // setup D-LH G-LH
      $setup(posedge D,posedge G,1.0);
      
      $width(negedge G &&& (ENABLE_NOT_D === 1'b1)
      ,1.0,0);
      
      $width(negedge G &&& (ENABLE_D === 1'b1)
      ,1.0,0);
      
      // mpw G_hl 
      $width(negedge G,1.0,0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_LDNQ_U_0P5( Q, G, D );
input D, G;
output Q;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_LDNQ_U_0P5_func SAEDRVT14_LDNQ_U_0P5_behav_inst(.Q(Q),.G(G),.D(D));
`else
   SAEDRVT14_LDNQ_U_0P5_func SAEDRVT14_LDNQ_U_0P5_inst(.Q(Q),.G(G),.D(D));
   // spec_gates_begin
   not MGM_G0(ENABLE_NOT_D,D);
   buf MGM_G1(ENABLE_D,D);
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc D --> Q
      (D => Q) = (1.0,1.0);
      
      // seq arc G --> Q
      (negedge G => (Q : D))  = (1.0,1.0);
      
      // hold D-HL G-LH
      $hold(posedge G,negedge D,1.0);
      
      // hold D-LH G-LH
      $hold(posedge G,posedge D,1.0);
      
      // setup D-HL G-LH
      $setup(negedge D,posedge G,1.0);
      
      // setup D-LH G-LH
      $setup(posedge D,posedge G,1.0);
      
      $width(negedge G &&& (ENABLE_NOT_D === 1'b1)
      ,1.0,0);
      
      $width(negedge G &&& (ENABLE_D === 1'b1)
      ,1.0,0);
      
      // mpw G_hl 
      $width(negedge G,1.0,0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_LDNQ_V1_1( Q, G, D );
input D, G;
output Q;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_LDNQ_V1_1_func SAEDRVT14_LDNQ_V1_1_behav_inst(.Q(Q),.G(G),.D(D));
`else
   SAEDRVT14_LDNQ_V1_1_func SAEDRVT14_LDNQ_V1_1_inst(.Q(Q),.G(G),.D(D));
   // spec_gates_begin
   not MGM_G0(ENABLE_NOT_D,D);
   buf MGM_G1(ENABLE_D,D);
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc D --> Q
      (D => Q) = (1.0,1.0);
      
      // seq arc G --> Q
      (negedge G => (Q : D))  = (1.0,1.0);
      
      // hold D-HL G-LH
      $hold(posedge G,negedge D,1.0);
      
      // hold D-LH G-LH
      $hold(posedge G,posedge D,1.0);
      
      // setup D-HL G-LH
      $setup(negedge D,posedge G,1.0);
      
      // setup D-LH G-LH
      $setup(posedge D,posedge G,1.0);
      
      $width(negedge G &&& (ENABLE_NOT_D === 1'b1)
      ,1.0,0);
      
      $width(negedge G &&& (ENABLE_D === 1'b1)
      ,1.0,0);
      
      // mpw G_hl 
      $width(negedge G,1.0,0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_LDNQ_V1_2( Q, G, D );
input D, G;
output Q;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_LDNQ_V1_2_func SAEDRVT14_LDNQ_V1_2_behav_inst(.Q(Q),.G(G),.D(D));
`else
   SAEDRVT14_LDNQ_V1_2_func SAEDRVT14_LDNQ_V1_2_inst(.Q(Q),.G(G),.D(D));
   // spec_gates_begin
   not MGM_G0(ENABLE_NOT_D,D);
   buf MGM_G1(ENABLE_D,D);
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc D --> Q
      (D => Q) = (1.0,1.0);
      
      // seq arc G --> Q
      (negedge G => (Q : D))  = (1.0,1.0);
      
      // hold D-HL G-LH
      $hold(posedge G,negedge D,1.0);
      
      // hold D-LH G-LH
      $hold(posedge G,posedge D,1.0);
      
      // setup D-HL G-LH
      $setup(negedge D,posedge G,1.0);
      
      // setup D-LH G-LH
      $setup(posedge D,posedge G,1.0);
      
      $width(negedge G &&& (ENABLE_NOT_D === 1'b1)
      ,1.0,0);
      
      $width(negedge G &&& (ENABLE_D === 1'b1)
      ,1.0,0);
      
      // mpw G_hl 
      $width(negedge G,1.0,0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_LDNQ_V1_4( Q, G, D );
input D, G;
output Q;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_LDNQ_V1_4_func SAEDRVT14_LDNQ_V1_4_behav_inst(.Q(Q),.G(G),.D(D));
`else
   SAEDRVT14_LDNQ_V1_4_func SAEDRVT14_LDNQ_V1_4_inst(.Q(Q),.G(G),.D(D));
   // spec_gates_begin
   not MGM_G0(ENABLE_NOT_D,D);
   buf MGM_G1(ENABLE_D,D);
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc D --> Q
      (D => Q) = (1.0,1.0);
      
      // seq arc G --> Q
      (negedge G => (Q : D))  = (1.0,1.0);
      
      // hold D-HL G-LH
      $hold(posedge G,negedge D,1.0);
      
      // hold D-LH G-LH
      $hold(posedge G,posedge D,1.0);
      
      // setup D-HL G-LH
      $setup(negedge D,posedge G,1.0);
      
      // setup D-LH G-LH
      $setup(posedge D,posedge G,1.0);
      
      $width(negedge G &&& (ENABLE_NOT_D === 1'b1)
      ,1.0,0);
      
      $width(negedge G &&& (ENABLE_D === 1'b1)
      ,1.0,0);
      
      // mpw G_hl 
      $width(negedge G,1.0,0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_LDNR2PQ_1( Q, G, EN, SE );
input EN, G, SE;
output Q;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_LDNR2PQ_1_func SAEDRVT14_LDNR2PQ_1_behav_inst(.Q(Q),.G(G),.EN(EN),.SE(SE));
`else
   SAEDRVT14_LDNR2PQ_1_func SAEDRVT14_LDNR2PQ_1_inst(.Q(Q),.G(G),.EN(EN),.SE(SE));
   // spec_gates_begin
   not MGM_G0(ENABLE_NOT_SE,SE);
   not MGM_G1(MGM_W0,EN);
   not MGM_G2(MGM_W1,SE);
   and MGM_G3(ENABLE_NOT_EN_AND_NOT_SE,MGM_W1,MGM_W0);
   not MGM_G4(MGM_W2,EN);
   and MGM_G5(ENABLE_NOT_EN_AND_SE,SE,MGM_W2);
   not MGM_G6(MGM_W3,SE);
   and MGM_G7(ENABLE_EN_AND_NOT_SE,MGM_W3,EN);
   and MGM_G8(ENABLE_EN_AND_SE,SE,EN);
   not MGM_G9(ENABLE_NOT_EN,EN);
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc EN --> Q
      (EN => Q) = (1.0,1.0);
      
      if(EN===1'b1 && SE===1'b0)
      // seq arc G --> Q
      (negedge G => (Q : EN))  = (1.0,1.0);
      
      if(EN===1'b1 && SE===1'b1)
      // seq arc G --> Q
      (negedge G => (Q : EN))  = (1.0,1.0);
      
      if(EN===1'b0)
      // seq arc G --> Q
      (negedge G => (Q : SE))  = (1.0,1.0);
      
      ifnone
      // seq arc G --> Q
      (negedge G => (Q : EN))  = (1.0,1.0);
      
      // comb arc SE --> Q
      (SE => Q) = (1.0,1.0);
      
      // hold EN-HL G-LH
      $hold(posedge G &&& (ENABLE_NOT_SE === 1'b1),
      negedge EN &&& (ENABLE_NOT_SE === 1'b1),1.0);
      
      // hold EN-LH G-LH
      $hold(posedge G &&& (ENABLE_NOT_SE === 1'b1),
      posedge EN &&& (ENABLE_NOT_SE === 1'b1),1.0);
      
      // setup EN-HL G-LH
      $setup(negedge EN &&& (ENABLE_NOT_SE === 1'b1),
      posedge G &&& (ENABLE_NOT_SE === 1'b1),1.0);
      
      // setup EN-LH G-LH
      $setup(posedge EN &&& (ENABLE_NOT_SE === 1'b1),
      posedge G &&& (ENABLE_NOT_SE === 1'b1),1.0);
      
      $width(negedge G &&& (ENABLE_NOT_EN_AND_NOT_SE === 1'b1)
      ,1.0,0);
      
      $width(negedge G &&& (ENABLE_NOT_EN_AND_SE === 1'b1)
      ,1.0,0);
      
      $width(negedge G &&& (ENABLE_EN_AND_NOT_SE === 1'b1)
      ,1.0,0);
      
      $width(negedge G &&& (ENABLE_EN_AND_SE === 1'b1)
      ,1.0,0);
      
      // hold SE-HL G-LH
      $hold(posedge G &&& (ENABLE_NOT_EN === 1'b1),
      negedge SE &&& (ENABLE_NOT_EN === 1'b1),1.0);
      
      // hold SE-LH G-LH
      $hold(posedge G &&& (ENABLE_NOT_EN === 1'b1),
      posedge SE &&& (ENABLE_NOT_EN === 1'b1),1.0);
      
      // setup SE-HL G-LH
      $setup(negedge SE &&& (ENABLE_NOT_EN === 1'b1),
      posedge G &&& (ENABLE_NOT_EN === 1'b1),1.0);
      
      // setup SE-LH G-LH
      $setup(posedge SE &&& (ENABLE_NOT_EN === 1'b1),
      posedge G &&& (ENABLE_NOT_EN === 1'b1),1.0);
      
      // mpw G_hl 
      $width(negedge G,1.0,0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_LDNR2PQ_2( Q, G, EN, SE );
input EN, G, SE;
output Q;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_LDNR2PQ_2_func SAEDRVT14_LDNR2PQ_2_behav_inst(.Q(Q),.G(G),.EN(EN),.SE(SE));
`else
   SAEDRVT14_LDNR2PQ_2_func SAEDRVT14_LDNR2PQ_2_inst(.Q(Q),.G(G),.EN(EN),.SE(SE));
   // spec_gates_begin
   not MGM_G0(ENABLE_NOT_SE,SE);
   not MGM_G1(MGM_W0,EN);
   not MGM_G2(MGM_W1,SE);
   and MGM_G3(ENABLE_NOT_EN_AND_NOT_SE,MGM_W1,MGM_W0);
   not MGM_G4(MGM_W2,EN);
   and MGM_G5(ENABLE_NOT_EN_AND_SE,SE,MGM_W2);
   not MGM_G6(MGM_W3,SE);
   and MGM_G7(ENABLE_EN_AND_NOT_SE,MGM_W3,EN);
   and MGM_G8(ENABLE_EN_AND_SE,SE,EN);
   not MGM_G9(ENABLE_NOT_EN,EN);
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc EN --> Q
      (EN => Q) = (1.0,1.0);
      
      if(EN===1'b1 && SE===1'b0)
      // seq arc G --> Q
      (negedge G => (Q : EN))  = (1.0,1.0);
      
      if(EN===1'b1 && SE===1'b1)
      // seq arc G --> Q
      (negedge G => (Q : EN))  = (1.0,1.0);
      
      if(EN===1'b0)
      // seq arc G --> Q
      (negedge G => (Q : SE))  = (1.0,1.0);
      
      ifnone
      // seq arc G --> Q
      (negedge G => (Q : EN))  = (1.0,1.0);
      
      // comb arc SE --> Q
      (SE => Q) = (1.0,1.0);
      
      // hold EN-HL G-LH
      $hold(posedge G &&& (ENABLE_NOT_SE === 1'b1),
      negedge EN &&& (ENABLE_NOT_SE === 1'b1),1.0);
      
      // hold EN-LH G-LH
      $hold(posedge G &&& (ENABLE_NOT_SE === 1'b1),
      posedge EN &&& (ENABLE_NOT_SE === 1'b1),1.0);
      
      // setup EN-HL G-LH
      $setup(negedge EN &&& (ENABLE_NOT_SE === 1'b1),
      posedge G &&& (ENABLE_NOT_SE === 1'b1),1.0);
      
      // setup EN-LH G-LH
      $setup(posedge EN &&& (ENABLE_NOT_SE === 1'b1),
      posedge G &&& (ENABLE_NOT_SE === 1'b1),1.0);
      
      $width(negedge G &&& (ENABLE_NOT_EN_AND_NOT_SE === 1'b1)
      ,1.0,0);
      
      $width(negedge G &&& (ENABLE_NOT_EN_AND_SE === 1'b1)
      ,1.0,0);
      
      $width(negedge G &&& (ENABLE_EN_AND_NOT_SE === 1'b1)
      ,1.0,0);
      
      $width(negedge G &&& (ENABLE_EN_AND_SE === 1'b1)
      ,1.0,0);
      
      // hold SE-HL G-LH
      $hold(posedge G &&& (ENABLE_NOT_EN === 1'b1),
      negedge SE &&& (ENABLE_NOT_EN === 1'b1),1.0);
      
      // hold SE-LH G-LH
      $hold(posedge G &&& (ENABLE_NOT_EN === 1'b1),
      posedge SE &&& (ENABLE_NOT_EN === 1'b1),1.0);
      
      // setup SE-HL G-LH
      $setup(negedge SE &&& (ENABLE_NOT_EN === 1'b1),
      posedge G &&& (ENABLE_NOT_EN === 1'b1),1.0);
      
      // setup SE-LH G-LH
      $setup(posedge SE &&& (ENABLE_NOT_EN === 1'b1),
      posedge G &&& (ENABLE_NOT_EN === 1'b1),1.0);
      
      // mpw G_hl 
      $width(negedge G,1.0,0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_LDNR2PQ_4( Q, G, EN, SE );
input EN, G, SE;
output Q;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_LDNR2PQ_4_func SAEDRVT14_LDNR2PQ_4_behav_inst(.Q(Q),.G(G),.EN(EN),.SE(SE));
`else
   SAEDRVT14_LDNR2PQ_4_func SAEDRVT14_LDNR2PQ_4_inst(.Q(Q),.G(G),.EN(EN),.SE(SE));
   // spec_gates_begin
   not MGM_G0(ENABLE_NOT_SE,SE);
   not MGM_G1(MGM_W0,EN);
   not MGM_G2(MGM_W1,SE);
   and MGM_G3(ENABLE_NOT_EN_AND_NOT_SE,MGM_W1,MGM_W0);
   not MGM_G4(MGM_W2,EN);
   and MGM_G5(ENABLE_NOT_EN_AND_SE,SE,MGM_W2);
   not MGM_G6(MGM_W3,SE);
   and MGM_G7(ENABLE_EN_AND_NOT_SE,MGM_W3,EN);
   and MGM_G8(ENABLE_EN_AND_SE,SE,EN);
   not MGM_G9(ENABLE_NOT_EN,EN);
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc EN --> Q
      (EN => Q) = (1.0,1.0);
      
      if(EN===1'b1 && SE===1'b0)
      // seq arc G --> Q
      (negedge G => (Q : EN))  = (1.0,1.0);
      
      if(EN===1'b1 && SE===1'b1)
      // seq arc G --> Q
      (negedge G => (Q : EN))  = (1.0,1.0);
      
      if(EN===1'b0)
      // seq arc G --> Q
      (negedge G => (Q : SE))  = (1.0,1.0);
      
      ifnone
      // seq arc G --> Q
      (negedge G => (Q : EN))  = (1.0,1.0);
      
      // comb arc SE --> Q
      (SE => Q) = (1.0,1.0);
      
      // hold EN-HL G-LH
      $hold(posedge G &&& (ENABLE_NOT_SE === 1'b1),
      negedge EN &&& (ENABLE_NOT_SE === 1'b1),1.0);
      
      // hold EN-LH G-LH
      $hold(posedge G &&& (ENABLE_NOT_SE === 1'b1),
      posedge EN &&& (ENABLE_NOT_SE === 1'b1),1.0);
      
      // setup EN-HL G-LH
      $setup(negedge EN &&& (ENABLE_NOT_SE === 1'b1),
      posedge G &&& (ENABLE_NOT_SE === 1'b1),1.0);
      
      // setup EN-LH G-LH
      $setup(posedge EN &&& (ENABLE_NOT_SE === 1'b1),
      posedge G &&& (ENABLE_NOT_SE === 1'b1),1.0);
      
      $width(negedge G &&& (ENABLE_NOT_EN_AND_NOT_SE === 1'b1)
      ,1.0,0);
      
      $width(negedge G &&& (ENABLE_NOT_EN_AND_SE === 1'b1)
      ,1.0,0);
      
      $width(negedge G &&& (ENABLE_EN_AND_NOT_SE === 1'b1)
      ,1.0,0);
      
      $width(negedge G &&& (ENABLE_EN_AND_SE === 1'b1)
      ,1.0,0);
      
      // hold SE-HL G-LH
      $hold(posedge G &&& (ENABLE_NOT_EN === 1'b1),
      negedge SE &&& (ENABLE_NOT_EN === 1'b1),1.0);
      
      // hold SE-LH G-LH
      $hold(posedge G &&& (ENABLE_NOT_EN === 1'b1),
      posedge SE &&& (ENABLE_NOT_EN === 1'b1),1.0);
      
      // setup SE-HL G-LH
      $setup(negedge SE &&& (ENABLE_NOT_EN === 1'b1),
      posedge G &&& (ENABLE_NOT_EN === 1'b1),1.0);
      
      // setup SE-LH G-LH
      $setup(posedge SE &&& (ENABLE_NOT_EN === 1'b1),
      posedge G &&& (ENABLE_NOT_EN === 1'b1),1.0);
      
      // mpw G_hl 
      $width(negedge G,1.0,0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_LDNRBQ_V2_0P5( Q, G, D, RD );
input D, G, RD;
output Q;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_LDNRBQ_V2_0P5_func SAEDRVT14_LDNRBQ_V2_0P5_behav_inst(.Q(Q),.G(G),.D(D),.RD(RD));
`else
   SAEDRVT14_LDNRBQ_V2_0P5_func SAEDRVT14_LDNRBQ_V2_0P5_inst(.Q(Q),.G(G),.D(D),.RD(RD));
   // spec_gates_begin
   buf MGM_G0(ENABLE_RD,RD);
   not MGM_G1(MGM_W0,D);
   and MGM_G2(ENABLE_NOT_D_AND_RD,RD,MGM_W0);
   and MGM_G3(ENABLE_D_AND_RD,RD,D);
   buf MGM_G4(ENABLE_D,D);
   not MGM_G5(MGM_W1,D);
   and MGM_G6(ENABLE_NOT_D_AND_G,G,MGM_W1);
   and MGM_G7(ENABLE_D_AND_G,G,D);
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc D --> Q
      (D => Q) = (1.0,1.0);
      
      // seq arc G --> Q
      (negedge G => (Q : D))  = (1.0,1.0);
      
      if(D===1'b0 && G===1'b1)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(D===1'b1 && G===1'b0)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(D===1'b1 && G===1'b1)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      ifnone
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      // hold D-HL G-LH
      $hold(posedge G &&& (ENABLE_RD === 1'b1),
      negedge D &&& (ENABLE_RD === 1'b1),1.0);
      
      // hold D-LH G-LH
      $hold(posedge G &&& (ENABLE_RD === 1'b1),
      posedge D &&& (ENABLE_RD === 1'b1),1.0);
      
      // setup D-HL G-LH
      $setup(negedge D &&& (ENABLE_RD === 1'b1),
      posedge G &&& (ENABLE_RD === 1'b1),1.0);
      
      // setup D-LH G-LH
      $setup(posedge D &&& (ENABLE_RD === 1'b1),
      posedge G &&& (ENABLE_RD === 1'b1),1.0);
      
      $width(negedge G &&& (ENABLE_NOT_D_AND_RD === 1'b1)
      ,1.0,0);
      
      $width(negedge G &&& (ENABLE_D_AND_RD === 1'b1)
      ,1.0,0);
      
      // recovery RD-LH G-LH
      $recovery(posedge RD &&& (ENABLE_D === 1'b1),
      posedge G &&& (ENABLE_D === 1'b1),1.0);
      
      // removal RD-LH G-LH
      $removal(posedge RD &&& (ENABLE_D === 1'b1),
      posedge G &&& (ENABLE_D === 1'b1),1.0);
      
      $width(negedge RD &&& (ENABLE_NOT_D_AND_G === 1'b1)
      ,1.0,0);
      
      $width(negedge RD &&& (ENABLE_D_AND_G === 1'b1)
      ,1.0,0);
      
      // mpw G_hl 
      $width(negedge G,1.0,0);
      
      // mpw RD_hl 
      $width(negedge RD,1.0,0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_LDNRBQ_V2_1( Q, G, D, RD );
input D, G, RD;
output Q;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_LDNRBQ_V2_1_func SAEDRVT14_LDNRBQ_V2_1_behav_inst(.Q(Q),.G(G),.D(D),.RD(RD));
`else
   SAEDRVT14_LDNRBQ_V2_1_func SAEDRVT14_LDNRBQ_V2_1_inst(.Q(Q),.G(G),.D(D),.RD(RD));
   // spec_gates_begin
   buf MGM_G0(ENABLE_RD,RD);
   not MGM_G1(MGM_W0,D);
   and MGM_G2(ENABLE_NOT_D_AND_RD,RD,MGM_W0);
   and MGM_G3(ENABLE_D_AND_RD,RD,D);
   buf MGM_G4(ENABLE_D,D);
   not MGM_G5(MGM_W1,D);
   and MGM_G6(ENABLE_NOT_D_AND_G,G,MGM_W1);
   and MGM_G7(ENABLE_D_AND_G,G,D);
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc D --> Q
      (D => Q) = (1.0,1.0);
      
      // seq arc G --> Q
      (negedge G => (Q : D))  = (1.0,1.0);
      
      if(D===1'b0 && G===1'b1)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(D===1'b1 && G===1'b0)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(D===1'b1 && G===1'b1)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      ifnone
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      // hold D-HL G-LH
      $hold(posedge G &&& (ENABLE_RD === 1'b1),
      negedge D &&& (ENABLE_RD === 1'b1),1.0);
      
      // hold D-LH G-LH
      $hold(posedge G &&& (ENABLE_RD === 1'b1),
      posedge D &&& (ENABLE_RD === 1'b1),1.0);
      
      // setup D-HL G-LH
      $setup(negedge D &&& (ENABLE_RD === 1'b1),
      posedge G &&& (ENABLE_RD === 1'b1),1.0);
      
      // setup D-LH G-LH
      $setup(posedge D &&& (ENABLE_RD === 1'b1),
      posedge G &&& (ENABLE_RD === 1'b1),1.0);
      
      $width(negedge G &&& (ENABLE_NOT_D_AND_RD === 1'b1)
      ,1.0,0);
      
      $width(negedge G &&& (ENABLE_D_AND_RD === 1'b1)
      ,1.0,0);
      
      // recovery RD-LH G-LH
      $recovery(posedge RD &&& (ENABLE_D === 1'b1),
      posedge G &&& (ENABLE_D === 1'b1),1.0);
      
      // removal RD-LH G-LH
      $removal(posedge RD &&& (ENABLE_D === 1'b1),
      posedge G &&& (ENABLE_D === 1'b1),1.0);
      
      $width(negedge RD &&& (ENABLE_NOT_D_AND_G === 1'b1)
      ,1.0,0);
      
      $width(negedge RD &&& (ENABLE_D_AND_G === 1'b1)
      ,1.0,0);
      
      // mpw G_hl 
      $width(negedge G,1.0,0);
      
      // mpw RD_hl 
      $width(negedge RD,1.0,0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_LDNRBQ_V2_2( Q, G, D, RD );
input D, G, RD;
output Q;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_LDNRBQ_V2_2_func SAEDRVT14_LDNRBQ_V2_2_behav_inst(.Q(Q),.G(G),.D(D),.RD(RD));
`else
   SAEDRVT14_LDNRBQ_V2_2_func SAEDRVT14_LDNRBQ_V2_2_inst(.Q(Q),.G(G),.D(D),.RD(RD));
   // spec_gates_begin
   buf MGM_G0(ENABLE_RD,RD);
   not MGM_G1(MGM_W0,D);
   and MGM_G2(ENABLE_NOT_D_AND_RD,RD,MGM_W0);
   and MGM_G3(ENABLE_D_AND_RD,RD,D);
   buf MGM_G4(ENABLE_D,D);
   not MGM_G5(MGM_W1,D);
   and MGM_G6(ENABLE_NOT_D_AND_G,G,MGM_W1);
   and MGM_G7(ENABLE_D_AND_G,G,D);
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc D --> Q
      (D => Q) = (1.0,1.0);
      
      // seq arc G --> Q
      (negedge G => (Q : D))  = (1.0,1.0);
      
      if(D===1'b0 && G===1'b1)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(D===1'b1 && G===1'b0)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(D===1'b1 && G===1'b1)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      ifnone
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      // hold D-HL G-LH
      $hold(posedge G &&& (ENABLE_RD === 1'b1),
      negedge D &&& (ENABLE_RD === 1'b1),1.0);
      
      // hold D-LH G-LH
      $hold(posedge G &&& (ENABLE_RD === 1'b1),
      posedge D &&& (ENABLE_RD === 1'b1),1.0);
      
      // setup D-HL G-LH
      $setup(negedge D &&& (ENABLE_RD === 1'b1),
      posedge G &&& (ENABLE_RD === 1'b1),1.0);
      
      // setup D-LH G-LH
      $setup(posedge D &&& (ENABLE_RD === 1'b1),
      posedge G &&& (ENABLE_RD === 1'b1),1.0);
      
      $width(negedge G &&& (ENABLE_NOT_D_AND_RD === 1'b1)
      ,1.0,0);
      
      $width(negedge G &&& (ENABLE_D_AND_RD === 1'b1)
      ,1.0,0);
      
      // recovery RD-LH G-LH
      $recovery(posedge RD &&& (ENABLE_D === 1'b1),
      posedge G &&& (ENABLE_D === 1'b1),1.0);
      
      // removal RD-LH G-LH
      $removal(posedge RD &&& (ENABLE_D === 1'b1),
      posedge G &&& (ENABLE_D === 1'b1),1.0);
      
      $width(negedge RD &&& (ENABLE_NOT_D_AND_G === 1'b1)
      ,1.0,0);
      
      $width(negedge RD &&& (ENABLE_D_AND_G === 1'b1)
      ,1.0,0);
      
      // mpw G_hl 
      $width(negedge G,1.0,0);
      
      // mpw RD_hl 
      $width(negedge RD,1.0,0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_LDNRBQ_V2_4( Q, G, D, RD );
input D, G, RD;
output Q;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_LDNRBQ_V2_4_func SAEDRVT14_LDNRBQ_V2_4_behav_inst(.Q(Q),.G(G),.D(D),.RD(RD));
`else
   SAEDRVT14_LDNRBQ_V2_4_func SAEDRVT14_LDNRBQ_V2_4_inst(.Q(Q),.G(G),.D(D),.RD(RD));
   // spec_gates_begin
   buf MGM_G0(ENABLE_RD,RD);
   not MGM_G1(MGM_W0,D);
   and MGM_G2(ENABLE_NOT_D_AND_RD,RD,MGM_W0);
   and MGM_G3(ENABLE_D_AND_RD,RD,D);
   buf MGM_G4(ENABLE_D,D);
   not MGM_G5(MGM_W1,D);
   and MGM_G6(ENABLE_NOT_D_AND_G,G,MGM_W1);
   and MGM_G7(ENABLE_D_AND_G,G,D);
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc D --> Q
      (D => Q) = (1.0,1.0);
      
      // seq arc G --> Q
      (negedge G => (Q : D))  = (1.0,1.0);
      
      if(D===1'b0 && G===1'b1)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(D===1'b1 && G===1'b0)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(D===1'b1 && G===1'b1)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      ifnone
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      // hold D-HL G-LH
      $hold(posedge G &&& (ENABLE_RD === 1'b1),
      negedge D &&& (ENABLE_RD === 1'b1),1.0);
      
      // hold D-LH G-LH
      $hold(posedge G &&& (ENABLE_RD === 1'b1),
      posedge D &&& (ENABLE_RD === 1'b1),1.0);
      
      // setup D-HL G-LH
      $setup(negedge D &&& (ENABLE_RD === 1'b1),
      posedge G &&& (ENABLE_RD === 1'b1),1.0);
      
      // setup D-LH G-LH
      $setup(posedge D &&& (ENABLE_RD === 1'b1),
      posedge G &&& (ENABLE_RD === 1'b1),1.0);
      
      $width(negedge G &&& (ENABLE_NOT_D_AND_RD === 1'b1)
      ,1.0,0);
      
      $width(negedge G &&& (ENABLE_D_AND_RD === 1'b1)
      ,1.0,0);
      
      // recovery RD-LH G-LH
      $recovery(posedge RD &&& (ENABLE_D === 1'b1),
      posedge G &&& (ENABLE_D === 1'b1),1.0);
      
      // removal RD-LH G-LH
      $removal(posedge RD &&& (ENABLE_D === 1'b1),
      posedge G &&& (ENABLE_D === 1'b1),1.0);
      
      $width(negedge RD &&& (ENABLE_NOT_D_AND_G === 1'b1)
      ,1.0,0);
      
      $width(negedge RD &&& (ENABLE_D_AND_G === 1'b1)
      ,1.0,0);
      
      // mpw G_hl 
      $width(negedge G,1.0,0);
      
      // mpw RD_hl 
      $width(negedge RD,1.0,0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_LDOR2PQ_1( Q, G, EN, SE );
input EN, G, SE;
output Q;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_LDOR2PQ_1_func SAEDRVT14_LDOR2PQ_1_behav_inst(.Q(Q),.G(G),.EN(EN),.SE(SE));
`else
   SAEDRVT14_LDOR2PQ_1_func SAEDRVT14_LDOR2PQ_1_inst(.Q(Q),.G(G),.EN(EN),.SE(SE));
   // spec_gates_begin
   not MGM_G0(ENABLE_NOT_SE,SE);
   not MGM_G1(MGM_W0,EN);
   not MGM_G2(MGM_W1,SE);
   and MGM_G3(ENABLE_NOT_EN_AND_NOT_SE,MGM_W1,MGM_W0);
   not MGM_G4(MGM_W2,EN);
   and MGM_G5(ENABLE_NOT_EN_AND_SE,SE,MGM_W2);
   not MGM_G6(MGM_W3,SE);
   and MGM_G7(ENABLE_EN_AND_NOT_SE,MGM_W3,EN);
   and MGM_G8(ENABLE_EN_AND_SE,SE,EN);
   not MGM_G9(ENABLE_NOT_EN,EN);
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc EN --> Q
      (EN => Q) = (1.0,1.0);
      
      if(EN===1'b1 && SE===1'b0)
      // seq arc G --> Q
      (posedge G => (Q : EN))  = (1.0,1.0);
      
      if(EN===1'b1 && SE===1'b1)
      // seq arc G --> Q
      (posedge G => (Q : EN))  = (1.0,1.0);
      
      if(EN===1'b0)
      // seq arc G --> Q
      (posedge G => (Q : SE))  = (1.0,1.0);
      
      ifnone
      // seq arc G --> Q
      (posedge G => (Q : EN))  = (1.0,1.0);
      
      // comb arc SE --> Q
      (SE => Q) = (1.0,1.0);
      
      // hold EN-HL G-HL
      $hold(negedge G &&& (ENABLE_NOT_SE === 1'b1),
      negedge EN &&& (ENABLE_NOT_SE === 1'b1),1.0);
      
      // hold EN-LH G-HL
      $hold(negedge G &&& (ENABLE_NOT_SE === 1'b1),
      posedge EN &&& (ENABLE_NOT_SE === 1'b1),1.0);
      
      // setup EN-HL G-HL
      $setup(negedge EN &&& (ENABLE_NOT_SE === 1'b1),
      negedge G &&& (ENABLE_NOT_SE === 1'b1),1.0);
      
      // setup EN-LH G-HL
      $setup(posedge EN &&& (ENABLE_NOT_SE === 1'b1),
      negedge G &&& (ENABLE_NOT_SE === 1'b1),1.0);
      
      $width(posedge G &&& (ENABLE_NOT_EN_AND_NOT_SE === 1'b1)
      ,1.0,0);
      
      $width(posedge G &&& (ENABLE_NOT_EN_AND_SE === 1'b1)
      ,1.0,0);
      
      $width(posedge G &&& (ENABLE_EN_AND_NOT_SE === 1'b1)
      ,1.0,0);
      
      $width(posedge G &&& (ENABLE_EN_AND_SE === 1'b1)
      ,1.0,0);
      
      // hold SE-HL G-HL
      $hold(negedge G &&& (ENABLE_NOT_EN === 1'b1),
      negedge SE &&& (ENABLE_NOT_EN === 1'b1),1.0);
      
      // hold SE-LH G-HL
      $hold(negedge G &&& (ENABLE_NOT_EN === 1'b1),
      posedge SE &&& (ENABLE_NOT_EN === 1'b1),1.0);
      
      // setup SE-HL G-HL
      $setup(negedge SE &&& (ENABLE_NOT_EN === 1'b1),
      negedge G &&& (ENABLE_NOT_EN === 1'b1),1.0);
      
      // setup SE-LH G-HL
      $setup(posedge SE &&& (ENABLE_NOT_EN === 1'b1),
      negedge G &&& (ENABLE_NOT_EN === 1'b1),1.0);
      
      // mpw G_lh 
      $width(posedge G,1.0,0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_LDOR2PQ_2( Q, G, EN, SE );
input EN, G, SE;
output Q;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_LDOR2PQ_2_func SAEDRVT14_LDOR2PQ_2_behav_inst(.Q(Q),.G(G),.EN(EN),.SE(SE));
`else
   SAEDRVT14_LDOR2PQ_2_func SAEDRVT14_LDOR2PQ_2_inst(.Q(Q),.G(G),.EN(EN),.SE(SE));
   // spec_gates_begin
   not MGM_G0(ENABLE_NOT_SE,SE);
   not MGM_G1(MGM_W0,EN);
   not MGM_G2(MGM_W1,SE);
   and MGM_G3(ENABLE_NOT_EN_AND_NOT_SE,MGM_W1,MGM_W0);
   not MGM_G4(MGM_W2,EN);
   and MGM_G5(ENABLE_NOT_EN_AND_SE,SE,MGM_W2);
   not MGM_G6(MGM_W3,SE);
   and MGM_G7(ENABLE_EN_AND_NOT_SE,MGM_W3,EN);
   and MGM_G8(ENABLE_EN_AND_SE,SE,EN);
   not MGM_G9(ENABLE_NOT_EN,EN);
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc EN --> Q
      (EN => Q) = (1.0,1.0);
      
      if(EN===1'b1 && SE===1'b0)
      // seq arc G --> Q
      (posedge G => (Q : EN))  = (1.0,1.0);
      
      if(EN===1'b1 && SE===1'b1)
      // seq arc G --> Q
      (posedge G => (Q : EN))  = (1.0,1.0);
      
      if(EN===1'b0)
      // seq arc G --> Q
      (posedge G => (Q : SE))  = (1.0,1.0);
      
      ifnone
      // seq arc G --> Q
      (posedge G => (Q : EN))  = (1.0,1.0);
      
      // comb arc SE --> Q
      (SE => Q) = (1.0,1.0);
      
      // hold EN-HL G-HL
      $hold(negedge G &&& (ENABLE_NOT_SE === 1'b1),
      negedge EN &&& (ENABLE_NOT_SE === 1'b1),1.0);
      
      // hold EN-LH G-HL
      $hold(negedge G &&& (ENABLE_NOT_SE === 1'b1),
      posedge EN &&& (ENABLE_NOT_SE === 1'b1),1.0);
      
      // setup EN-HL G-HL
      $setup(negedge EN &&& (ENABLE_NOT_SE === 1'b1),
      negedge G &&& (ENABLE_NOT_SE === 1'b1),1.0);
      
      // setup EN-LH G-HL
      $setup(posedge EN &&& (ENABLE_NOT_SE === 1'b1),
      negedge G &&& (ENABLE_NOT_SE === 1'b1),1.0);
      
      $width(posedge G &&& (ENABLE_NOT_EN_AND_NOT_SE === 1'b1)
      ,1.0,0);
      
      $width(posedge G &&& (ENABLE_NOT_EN_AND_SE === 1'b1)
      ,1.0,0);
      
      $width(posedge G &&& (ENABLE_EN_AND_NOT_SE === 1'b1)
      ,1.0,0);
      
      $width(posedge G &&& (ENABLE_EN_AND_SE === 1'b1)
      ,1.0,0);
      
      // hold SE-HL G-HL
      $hold(negedge G &&& (ENABLE_NOT_EN === 1'b1),
      negedge SE &&& (ENABLE_NOT_EN === 1'b1),1.0);
      
      // hold SE-LH G-HL
      $hold(negedge G &&& (ENABLE_NOT_EN === 1'b1),
      posedge SE &&& (ENABLE_NOT_EN === 1'b1),1.0);
      
      // setup SE-HL G-HL
      $setup(negedge SE &&& (ENABLE_NOT_EN === 1'b1),
      negedge G &&& (ENABLE_NOT_EN === 1'b1),1.0);
      
      // setup SE-LH G-HL
      $setup(posedge SE &&& (ENABLE_NOT_EN === 1'b1),
      negedge G &&& (ENABLE_NOT_EN === 1'b1),1.0);
      
      // mpw G_lh 
      $width(posedge G,1.0,0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_LDOR2PQ_4( Q, G, EN, SE );
input EN, G, SE;
output Q;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_LDOR2PQ_4_func SAEDRVT14_LDOR2PQ_4_behav_inst(.Q(Q),.G(G),.EN(EN),.SE(SE));
`else
   SAEDRVT14_LDOR2PQ_4_func SAEDRVT14_LDOR2PQ_4_inst(.Q(Q),.G(G),.EN(EN),.SE(SE));
   // spec_gates_begin
   not MGM_G0(ENABLE_NOT_SE,SE);
   not MGM_G1(MGM_W0,EN);
   not MGM_G2(MGM_W1,SE);
   and MGM_G3(ENABLE_NOT_EN_AND_NOT_SE,MGM_W1,MGM_W0);
   not MGM_G4(MGM_W2,EN);
   and MGM_G5(ENABLE_NOT_EN_AND_SE,SE,MGM_W2);
   not MGM_G6(MGM_W3,SE);
   and MGM_G7(ENABLE_EN_AND_NOT_SE,MGM_W3,EN);
   and MGM_G8(ENABLE_EN_AND_SE,SE,EN);
   not MGM_G9(ENABLE_NOT_EN,EN);
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc EN --> Q
      (EN => Q) = (1.0,1.0);
      
      if(EN===1'b1 && SE===1'b0)
      // seq arc G --> Q
      (posedge G => (Q : EN))  = (1.0,1.0);
      
      if(EN===1'b1 && SE===1'b1)
      // seq arc G --> Q
      (posedge G => (Q : EN))  = (1.0,1.0);
      
      if(EN===1'b0)
      // seq arc G --> Q
      (posedge G => (Q : SE))  = (1.0,1.0);
      
      ifnone
      // seq arc G --> Q
      (posedge G => (Q : EN))  = (1.0,1.0);
      
      // comb arc SE --> Q
      (SE => Q) = (1.0,1.0);
      
      // hold EN-HL G-HL
      $hold(negedge G &&& (ENABLE_NOT_SE === 1'b1),
      negedge EN &&& (ENABLE_NOT_SE === 1'b1),1.0);
      
      // hold EN-LH G-HL
      $hold(negedge G &&& (ENABLE_NOT_SE === 1'b1),
      posedge EN &&& (ENABLE_NOT_SE === 1'b1),1.0);
      
      // setup EN-HL G-HL
      $setup(negedge EN &&& (ENABLE_NOT_SE === 1'b1),
      negedge G &&& (ENABLE_NOT_SE === 1'b1),1.0);
      
      // setup EN-LH G-HL
      $setup(posedge EN &&& (ENABLE_NOT_SE === 1'b1),
      negedge G &&& (ENABLE_NOT_SE === 1'b1),1.0);
      
      $width(posedge G &&& (ENABLE_NOT_EN_AND_NOT_SE === 1'b1)
      ,1.0,0);
      
      $width(posedge G &&& (ENABLE_NOT_EN_AND_SE === 1'b1)
      ,1.0,0);
      
      $width(posedge G &&& (ENABLE_EN_AND_NOT_SE === 1'b1)
      ,1.0,0);
      
      $width(posedge G &&& (ENABLE_EN_AND_SE === 1'b1)
      ,1.0,0);
      
      // hold SE-HL G-HL
      $hold(negedge G &&& (ENABLE_NOT_EN === 1'b1),
      negedge SE &&& (ENABLE_NOT_EN === 1'b1),1.0);
      
      // hold SE-LH G-HL
      $hold(negedge G &&& (ENABLE_NOT_EN === 1'b1),
      posedge SE &&& (ENABLE_NOT_EN === 1'b1),1.0);
      
      // setup SE-HL G-HL
      $setup(negedge SE &&& (ENABLE_NOT_EN === 1'b1),
      negedge G &&& (ENABLE_NOT_EN === 1'b1),1.0);
      
      // setup SE-LH G-HL
      $setup(posedge SE &&& (ENABLE_NOT_EN === 1'b1),
      negedge G &&& (ENABLE_NOT_EN === 1'b1),1.0);
      
      // mpw G_lh 
      $width(posedge G,1.0,0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_LDPQ_1( Q, G, D );
input D, G;
output Q;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_LDPQ_1_func SAEDRVT14_LDPQ_1_behav_inst(.Q(Q),.G(G),.D(D));
`else
   SAEDRVT14_LDPQ_1_func SAEDRVT14_LDPQ_1_inst(.Q(Q),.G(G),.D(D));
   // spec_gates_begin
   not MGM_G0(ENABLE_NOT_D,D);
   buf MGM_G1(ENABLE_D,D);
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc D --> Q
      (D => Q) = (1.0,1.0);
      
      // seq arc G --> Q
      (posedge G => (Q : D))  = (1.0,1.0);
      
      // hold D-HL G-HL
      $hold(negedge G,negedge D,1.0);
      
      // hold D-LH G-HL
      $hold(negedge G,posedge D,1.0);
      
      // setup D-HL G-HL
      $setup(negedge D,negedge G,1.0);
      
      // setup D-LH G-HL
      $setup(posedge D,negedge G,1.0);
      
      $width(posedge G &&& (ENABLE_NOT_D === 1'b1)
      ,1.0,0);
      
      $width(posedge G &&& (ENABLE_D === 1'b1)
      ,1.0,0);
      
      // mpw G_lh 
      $width(posedge G,1.0,0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_LDPQ_2( Q, G, D );
input D, G;
output Q;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_LDPQ_2_func SAEDRVT14_LDPQ_2_behav_inst(.Q(Q),.G(G),.D(D));
`else
   SAEDRVT14_LDPQ_2_func SAEDRVT14_LDPQ_2_inst(.Q(Q),.G(G),.D(D));
   // spec_gates_begin
   not MGM_G0(ENABLE_NOT_D,D);
   buf MGM_G1(ENABLE_D,D);
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc D --> Q
      (D => Q) = (1.0,1.0);
      
      // seq arc G --> Q
      (posedge G => (Q : D))  = (1.0,1.0);
      
      // hold D-HL G-HL
      $hold(negedge G,negedge D,1.0);
      
      // hold D-LH G-HL
      $hold(negedge G,posedge D,1.0);
      
      // setup D-HL G-HL
      $setup(negedge D,negedge G,1.0);
      
      // setup D-LH G-HL
      $setup(posedge D,negedge G,1.0);
      
      $width(posedge G &&& (ENABLE_NOT_D === 1'b1)
      ,1.0,0);
      
      $width(posedge G &&& (ENABLE_D === 1'b1)
      ,1.0,0);
      
      // mpw G_lh 
      $width(posedge G,1.0,0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_LDPQ_3( Q, G, D );
input D, G;
output Q;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_LDPQ_3_func SAEDRVT14_LDPQ_3_behav_inst(.Q(Q),.G(G),.D(D));
`else
   SAEDRVT14_LDPQ_3_func SAEDRVT14_LDPQ_3_inst(.Q(Q),.G(G),.D(D));
   // spec_gates_begin
   not MGM_G0(ENABLE_NOT_D,D);
   buf MGM_G1(ENABLE_D,D);
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc D --> Q
      (D => Q) = (1.0,1.0);
      
      // seq arc G --> Q
      (posedge G => (Q : D))  = (1.0,1.0);
      
      // hold D-HL G-HL
      $hold(negedge G,negedge D,1.0);
      
      // hold D-LH G-HL
      $hold(negedge G,posedge D,1.0);
      
      // setup D-HL G-HL
      $setup(negedge D,negedge G,1.0);
      
      // setup D-LH G-HL
      $setup(posedge D,negedge G,1.0);
      
      $width(posedge G &&& (ENABLE_NOT_D === 1'b1)
      ,1.0,0);
      
      $width(posedge G &&& (ENABLE_D === 1'b1)
      ,1.0,0);
      
      // mpw G_lh 
      $width(posedge G,1.0,0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_LDPQ_4( Q, G, D );
input D, G;
output Q;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_LDPQ_4_func SAEDRVT14_LDPQ_4_behav_inst(.Q(Q),.G(G),.D(D));
`else
   SAEDRVT14_LDPQ_4_func SAEDRVT14_LDPQ_4_inst(.Q(Q),.G(G),.D(D));
   // spec_gates_begin
   not MGM_G0(ENABLE_NOT_D,D);
   buf MGM_G1(ENABLE_D,D);
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc D --> Q
      (D => Q) = (1.0,1.0);
      
      // seq arc G --> Q
      (posedge G => (Q : D))  = (1.0,1.0);
      
      // hold D-HL G-HL
      $hold(negedge G,negedge D,1.0);
      
      // hold D-LH G-HL
      $hold(negedge G,posedge D,1.0);
      
      // setup D-HL G-HL
      $setup(negedge D,negedge G,1.0);
      
      // setup D-LH G-HL
      $setup(posedge D,negedge G,1.0);
      
      $width(posedge G &&& (ENABLE_NOT_D === 1'b1)
      ,1.0,0);
      
      $width(posedge G &&& (ENABLE_D === 1'b1)
      ,1.0,0);
      
      // mpw G_lh 
      $width(posedge G,1.0,0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_LDPQ_5( Q, G, D );
input D, G;
output Q;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_LDPQ_5_func SAEDRVT14_LDPQ_5_behav_inst(.Q(Q),.G(G),.D(D));
`else
   SAEDRVT14_LDPQ_5_func SAEDRVT14_LDPQ_5_inst(.Q(Q),.G(G),.D(D));
   // spec_gates_begin
   not MGM_G0(ENABLE_NOT_D,D);
   buf MGM_G1(ENABLE_D,D);
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc D --> Q
      (D => Q) = (1.0,1.0);
      
      // seq arc G --> Q
      (posedge G => (Q : D))  = (1.0,1.0);
      
      // hold D-HL G-HL
      $hold(negedge G,negedge D,1.0);
      
      // hold D-LH G-HL
      $hold(negedge G,posedge D,1.0);
      
      // setup D-HL G-HL
      $setup(negedge D,negedge G,1.0);
      
      // setup D-LH G-HL
      $setup(posedge D,negedge G,1.0);
      
      $width(posedge G &&& (ENABLE_NOT_D === 1'b1)
      ,1.0,0);
      
      $width(posedge G &&& (ENABLE_D === 1'b1)
      ,1.0,0);
      
      // mpw G_lh 
      $width(posedge G,1.0,0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_LDPQ_6( Q, G, D );
input D, G;
output Q;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_LDPQ_6_func SAEDRVT14_LDPQ_6_behav_inst(.Q(Q),.G(G),.D(D));
`else
   SAEDRVT14_LDPQ_6_func SAEDRVT14_LDPQ_6_inst(.Q(Q),.G(G),.D(D));
   // spec_gates_begin
   not MGM_G0(ENABLE_NOT_D,D);
   buf MGM_G1(ENABLE_D,D);
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc D --> Q
      (D => Q) = (1.0,1.0);
      
      // seq arc G --> Q
      (posedge G => (Q : D))  = (1.0,1.0);
      
      // hold D-HL G-HL
      $hold(negedge G,negedge D,1.0);
      
      // hold D-LH G-HL
      $hold(negedge G,posedge D,1.0);
      
      // setup D-HL G-HL
      $setup(negedge D,negedge G,1.0);
      
      // setup D-LH G-HL
      $setup(posedge D,negedge G,1.0);
      
      $width(posedge G &&& (ENABLE_NOT_D === 1'b1)
      ,1.0,0);
      
      $width(posedge G &&& (ENABLE_D === 1'b1)
      ,1.0,0);
      
      // mpw G_lh 
      $width(posedge G,1.0,0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_LDPQ_8( Q, G, D );
input D, G;
output Q;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_LDPQ_8_func SAEDRVT14_LDPQ_8_behav_inst(.Q(Q),.G(G),.D(D));
`else
   SAEDRVT14_LDPQ_8_func SAEDRVT14_LDPQ_8_inst(.Q(Q),.G(G),.D(D));
   // spec_gates_begin
   not MGM_G0(ENABLE_NOT_D,D);
   buf MGM_G1(ENABLE_D,D);
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc D --> Q
      (D => Q) = (1.0,1.0);
      
      // seq arc G --> Q
      (posedge G => (Q : D))  = (1.0,1.0);
      
      // hold D-HL G-HL
      $hold(negedge G,negedge D,1.0);
      
      // hold D-LH G-HL
      $hold(negedge G,posedge D,1.0);
      
      // setup D-HL G-HL
      $setup(negedge D,negedge G,1.0);
      
      // setup D-LH G-HL
      $setup(posedge D,negedge G,1.0);
      
      $width(posedge G &&& (ENABLE_NOT_D === 1'b1)
      ,1.0,0);
      
      $width(posedge G &&& (ENABLE_D === 1'b1)
      ,1.0,0);
      
      // mpw G_lh 
      $width(posedge G,1.0,0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_LDPQ_ECO_1( Q, G, D );
input D, G;
output Q;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_LDPQ_ECO_1_func SAEDRVT14_LDPQ_ECO_1_behav_inst(.Q(Q),.G(G),.D(D));
`else
   SAEDRVT14_LDPQ_ECO_1_func SAEDRVT14_LDPQ_ECO_1_inst(.Q(Q),.G(G),.D(D));
   // spec_gates_begin
   not MGM_G0(ENABLE_NOT_D,D);
   buf MGM_G1(ENABLE_D,D);
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc D --> Q
      (D => Q) = (1.0,1.0);
      
      // seq arc G --> Q
      (posedge G => (Q : D))  = (1.0,1.0);
      
      // hold D-HL G-HL
      $hold(negedge G,negedge D,1.0);
      
      // hold D-LH G-HL
      $hold(negedge G,posedge D,1.0);
      
      // setup D-HL G-HL
      $setup(negedge D,negedge G,1.0);
      
      // setup D-LH G-HL
      $setup(posedge D,negedge G,1.0);
      
      $width(posedge G &&& (ENABLE_NOT_D === 1'b1)
      ,1.0,0);
      
      $width(posedge G &&& (ENABLE_D === 1'b1)
      ,1.0,0);
      
      // mpw G_lh 
      $width(posedge G,1.0,0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_LDPQ_U_0P5( Q, G, D );
input D, G;
output Q;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_LDPQ_U_0P5_func SAEDRVT14_LDPQ_U_0P5_behav_inst(.Q(Q),.G(G),.D(D));
`else
   SAEDRVT14_LDPQ_U_0P5_func SAEDRVT14_LDPQ_U_0P5_inst(.Q(Q),.G(G),.D(D));
   // spec_gates_begin
   not MGM_G0(ENABLE_NOT_D,D);
   buf MGM_G1(ENABLE_D,D);
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc D --> Q
      (D => Q) = (1.0,1.0);
      
      // seq arc G --> Q
      (posedge G => (Q : D))  = (1.0,1.0);
      
      // hold D-HL G-HL
      $hold(negedge G,negedge D,1.0);
      
      // hold D-LH G-HL
      $hold(negedge G,posedge D,1.0);
      
      // setup D-HL G-HL
      $setup(negedge D,negedge G,1.0);
      
      // setup D-LH G-HL
      $setup(posedge D,negedge G,1.0);
      
      $width(posedge G &&& (ENABLE_NOT_D === 1'b1)
      ,1.0,0);
      
      $width(posedge G &&& (ENABLE_D === 1'b1)
      ,1.0,0);
      
      // mpw G_lh 
      $width(posedge G,1.0,0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_LDPQ_V1_1( Q, G, D );
input D, G;
output Q;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_LDPQ_V1_1_func SAEDRVT14_LDPQ_V1_1_behav_inst(.Q(Q),.G(G),.D(D));
`else
   SAEDRVT14_LDPQ_V1_1_func SAEDRVT14_LDPQ_V1_1_inst(.Q(Q),.G(G),.D(D));
   // spec_gates_begin
   not MGM_G0(ENABLE_NOT_D,D);
   buf MGM_G1(ENABLE_D,D);
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc D --> Q
      (D => Q) = (1.0,1.0);
      
      // seq arc G --> Q
      (posedge G => (Q : D))  = (1.0,1.0);
      
      // hold D-HL G-HL
      $hold(negedge G,negedge D,1.0);
      
      // hold D-LH G-HL
      $hold(negedge G,posedge D,1.0);
      
      // setup D-HL G-HL
      $setup(negedge D,negedge G,1.0);
      
      // setup D-LH G-HL
      $setup(posedge D,negedge G,1.0);
      
      $width(posedge G &&& (ENABLE_NOT_D === 1'b1)
      ,1.0,0);
      
      $width(posedge G &&& (ENABLE_D === 1'b1)
      ,1.0,0);
      
      // mpw G_lh 
      $width(posedge G,1.0,0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_LDPQ_V1_2( Q, G, D );
input D, G;
output Q;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_LDPQ_V1_2_func SAEDRVT14_LDPQ_V1_2_behav_inst(.Q(Q),.G(G),.D(D));
`else
   SAEDRVT14_LDPQ_V1_2_func SAEDRVT14_LDPQ_V1_2_inst(.Q(Q),.G(G),.D(D));
   // spec_gates_begin
   not MGM_G0(ENABLE_NOT_D,D);
   buf MGM_G1(ENABLE_D,D);
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc D --> Q
      (D => Q) = (1.0,1.0);
      
      // seq arc G --> Q
      (posedge G => (Q : D))  = (1.0,1.0);
      
      // hold D-HL G-HL
      $hold(negedge G,negedge D,1.0);
      
      // hold D-LH G-HL
      $hold(negedge G,posedge D,1.0);
      
      // setup D-HL G-HL
      $setup(negedge D,negedge G,1.0);
      
      // setup D-LH G-HL
      $setup(posedge D,negedge G,1.0);
      
      $width(posedge G &&& (ENABLE_NOT_D === 1'b1)
      ,1.0,0);
      
      $width(posedge G &&& (ENABLE_D === 1'b1)
      ,1.0,0);
      
      // mpw G_lh 
      $width(posedge G,1.0,0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_LDPQ_V1_4( Q, G, D );
input D, G;
output Q;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_LDPQ_V1_4_func SAEDRVT14_LDPQ_V1_4_behav_inst(.Q(Q),.G(G),.D(D));
`else
   SAEDRVT14_LDPQ_V1_4_func SAEDRVT14_LDPQ_V1_4_inst(.Q(Q),.G(G),.D(D));
   // spec_gates_begin
   not MGM_G0(ENABLE_NOT_D,D);
   buf MGM_G1(ENABLE_D,D);
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc D --> Q
      (D => Q) = (1.0,1.0);
      
      // seq arc G --> Q
      (posedge G => (Q : D))  = (1.0,1.0);
      
      // hold D-HL G-HL
      $hold(negedge G,negedge D,1.0);
      
      // hold D-LH G-HL
      $hold(negedge G,posedge D,1.0);
      
      // setup D-HL G-HL
      $setup(negedge D,negedge G,1.0);
      
      // setup D-LH G-HL
      $setup(posedge D,negedge G,1.0);
      
      $width(posedge G &&& (ENABLE_NOT_D === 1'b1)
      ,1.0,0);
      
      $width(posedge G &&& (ENABLE_D === 1'b1)
      ,1.0,0);
      
      // mpw G_lh 
      $width(posedge G,1.0,0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_LDPRSQB_1( QN, G, D, RD, SD );
input D, G, RD, SD;
output QN;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_LDPRSQB_1_func SAEDRVT14_LDPRSQB_1_behav_inst(.QN(QN),.G(G),.D(D),.RD(RD),.SD(SD));
`else
   SAEDRVT14_LDPRSQB_1_func SAEDRVT14_LDPRSQB_1_inst(.QN(QN),.G(G),.D(D),.RD(RD),.SD(SD));
   // spec_gates_begin
   not MGM_G0(MGM_W0,RD);
   not MGM_G1(MGM_W1,SD);
   and MGM_G2(ENABLE_NOT_RD_AND_NOT_SD,MGM_W1,MGM_W0);
   not MGM_G3(MGM_W2,D);
   not MGM_G4(MGM_W3,RD);
   and MGM_G5(MGM_W4,MGM_W3,MGM_W2);
   not MGM_G6(MGM_W5,SD);
   and MGM_G7(ENABLE_NOT_D_AND_NOT_RD_AND_NOT_SD,MGM_W5,MGM_W4);
   not MGM_G8(MGM_W6,RD);
   and MGM_G9(MGM_W7,MGM_W6,D);
   not MGM_G10(MGM_W8,SD);
   and MGM_G11(ENABLE_D_AND_NOT_RD_AND_NOT_SD,MGM_W8,MGM_W7);
   not MGM_G12(MGM_W9,SD);
   and MGM_G13(ENABLE_D_AND_NOT_SD,MGM_W9,D);
   not MGM_G14(MGM_W10,D);
   not MGM_G15(MGM_W11,G);
   and MGM_G16(MGM_W12,MGM_W11,MGM_W10);
   not MGM_G17(MGM_W13,SD);
   and MGM_G18(ENABLE_NOT_D_AND_NOT_G_AND_NOT_SD,MGM_W13,MGM_W12);
   not MGM_G19(MGM_W14,G);
   and MGM_G20(MGM_W15,MGM_W14,D);
   not MGM_G21(MGM_W16,SD);
   and MGM_G22(ENABLE_D_AND_NOT_G_AND_NOT_SD,MGM_W16,MGM_W15);
   not MGM_G23(MGM_W17,D);
   not MGM_G24(MGM_W18,G);
   and MGM_G25(ENABLE_NOT_D_AND_NOT_G,MGM_W18,MGM_W17);
   not MGM_G26(MGM_W19,G);
   and MGM_G27(ENABLE_D_AND_NOT_G,MGM_W19,D);
   not MGM_G28(MGM_W20,D);
   not MGM_G29(MGM_W21,RD);
   and MGM_G30(ENABLE_NOT_D_AND_NOT_RD,MGM_W21,MGM_W20);
   not MGM_G31(MGM_W22,D);
   not MGM_G32(MGM_W23,G);
   and MGM_G33(MGM_W24,MGM_W23,MGM_W22);
   not MGM_G34(MGM_W25,RD);
   and MGM_G35(ENABLE_NOT_D_AND_NOT_G_AND_NOT_RD,MGM_W25,MGM_W24);
   not MGM_G36(MGM_W26,G);
   and MGM_G37(MGM_W27,MGM_W26,D);
   not MGM_G38(MGM_W28,RD);
   and MGM_G39(ENABLE_D_AND_NOT_G_AND_NOT_RD,MGM_W28,MGM_W27);
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc D --> QN
      (D => QN) = (1.0,1.0);
      
      // seq arc G --> QN
      (posedge G => (QN : D))  = (1.0,1.0);
      
      if(D===1'b0 && G===1'b0)
      // seq arc RD --> QN
      (RD => QN)  = (1.0,1.0);
      
      if(D===1'b1 && G===1'b0)
      // seq arc RD --> QN
      (RD => QN)  = (1.0,1.0);
      
      if(D===1'b1 && G===1'b1)
      // seq arc RD --> QN
      (RD => QN)  = (1.0,1.0);
      
      ifnone
      // seq arc RD --> QN
      (RD => QN)  = (1.0,1.0);
      
      if(D===1'b0 && G===1'b0 && RD===1'b0)
      // seq arc SD --> QN
      (SD => QN)  = (1.0,1.0);
      
      if(D===1'b0 && G===1'b0 && RD===1'b1)
      // seq arc SD --> QN
      (SD => QN)  = (1.0,1.0);
      
      if(D===1'b0 && G===1'b1 && RD===1'b0)
      // seq arc SD --> QN
      (SD => QN)  = (1.0,1.0);
      
      if(D===1'b0 && G===1'b1 && RD===1'b1)
      // seq arc SD --> QN
      (SD => QN)  = (1.0,1.0);
      
      if(D===1'b1 && G===1'b0 && RD===1'b0)
      // seq arc SD --> QN
      (SD => QN)  = (1.0,1.0);
      
      if(D===1'b1 && G===1'b0 && RD===1'b1)
      // seq arc SD --> QN
      (SD => QN)  = (1.0,1.0);
      
      if(D===1'b1 && G===1'b1 && RD===1'b1)
      // seq arc SD --> QN
      (SD => QN)  = (1.0,1.0);
      
      ifnone
      // seq arc SD --> QN
      (SD => QN)  = (1.0,1.0);
      
      // hold D-HL G-HL
      $hold(negedge G &&& (ENABLE_NOT_RD_AND_NOT_SD === 1'b1),
      negedge D &&& (ENABLE_NOT_RD_AND_NOT_SD === 1'b1),1.0);
      
      // hold D-LH G-HL
      $hold(negedge G &&& (ENABLE_NOT_RD_AND_NOT_SD === 1'b1),
      posedge D &&& (ENABLE_NOT_RD_AND_NOT_SD === 1'b1),1.0);
      
      // setup D-HL G-HL
      $setup(negedge D &&& (ENABLE_NOT_RD_AND_NOT_SD === 1'b1),
      negedge G &&& (ENABLE_NOT_RD_AND_NOT_SD === 1'b1),1.0);
      
      // setup D-LH G-HL
      $setup(posedge D &&& (ENABLE_NOT_RD_AND_NOT_SD === 1'b1),
      negedge G &&& (ENABLE_NOT_RD_AND_NOT_SD === 1'b1),1.0);
      
      $width(posedge G &&& (ENABLE_NOT_D_AND_NOT_RD_AND_NOT_SD === 1'b1)
      ,1.0,0);
      
      $width(posedge G &&& (ENABLE_D_AND_NOT_RD_AND_NOT_SD === 1'b1)
      ,1.0,0);
      
      // recovery RD-HL G-HL
      $recovery(negedge RD &&& (ENABLE_D_AND_NOT_SD === 1'b1),
      negedge G &&& (ENABLE_D_AND_NOT_SD === 1'b1),1.0);
      
      // removal RD-HL G-HL
      $removal(negedge RD &&& (ENABLE_D_AND_NOT_SD === 1'b1),
      negedge G &&& (ENABLE_D_AND_NOT_SD === 1'b1),1.0);
      
      $width(posedge RD &&& (ENABLE_NOT_D_AND_NOT_G_AND_NOT_SD === 1'b1)
      ,1.0,0);
      
      $width(posedge RD &&& (ENABLE_D_AND_NOT_G_AND_NOT_SD === 1'b1)
      ,1.0,0);
      
      // hold RD-HL SD-HL
      $hold(negedge SD &&& (ENABLE_NOT_D_AND_NOT_G === 1'b1),
      negedge RD &&& (ENABLE_NOT_D_AND_NOT_G === 1'b1),1.0);
      
      // setup RD-HL SD-HL
      $setup(negedge RD &&& (ENABLE_NOT_D_AND_NOT_G === 1'b1),
      negedge SD &&& (ENABLE_NOT_D_AND_NOT_G === 1'b1),1.0);
      
      // hold RD-HL SD-HL
      $hold(negedge SD &&& (ENABLE_D_AND_NOT_G === 1'b1),
      negedge RD &&& (ENABLE_D_AND_NOT_G === 1'b1),1.0);
      
      // setup RD-HL SD-HL
      $setup(negedge RD &&& (ENABLE_D_AND_NOT_G === 1'b1),
      negedge SD &&& (ENABLE_D_AND_NOT_G === 1'b1),1.0);
      
      // recovery SD-HL G-HL
      $recovery(negedge SD &&& (ENABLE_NOT_D_AND_NOT_RD === 1'b1),
      negedge G &&& (ENABLE_NOT_D_AND_NOT_RD === 1'b1),1.0);
      
      // removal SD-HL G-HL
      $removal(negedge SD &&& (ENABLE_NOT_D_AND_NOT_RD === 1'b1),
      negedge G &&& (ENABLE_NOT_D_AND_NOT_RD === 1'b1),1.0);
      
      // hold SD-HL RD-HL
      $hold(negedge RD &&& (ENABLE_NOT_D_AND_NOT_G === 1'b1),
      negedge SD &&& (ENABLE_NOT_D_AND_NOT_G === 1'b1),1.0);
      
      // setup SD-HL RD-HL
      $setup(negedge SD &&& (ENABLE_NOT_D_AND_NOT_G === 1'b1),
      negedge RD &&& (ENABLE_NOT_D_AND_NOT_G === 1'b1),1.0);
      
      // hold SD-HL RD-HL
      $hold(negedge RD &&& (ENABLE_D_AND_NOT_G === 1'b1),
      negedge SD &&& (ENABLE_D_AND_NOT_G === 1'b1),1.0);
      
      // setup SD-HL RD-HL
      $setup(negedge SD &&& (ENABLE_D_AND_NOT_G === 1'b1),
      negedge RD &&& (ENABLE_D_AND_NOT_G === 1'b1),1.0);
      
      $width(posedge SD &&& (ENABLE_NOT_D_AND_NOT_G_AND_NOT_RD === 1'b1)
      ,1.0,0);
      
      $width(posedge SD &&& (ENABLE_D_AND_NOT_G_AND_NOT_RD === 1'b1)
      ,1.0,0);
      
      // mpw G_lh 
      $width(posedge G,1.0,0);
      
      // mpw RD_lh 
      $width(posedge RD,1.0,0);
      
      // mpw SD_lh 
      $width(posedge SD,1.0,0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_LDPSBQ_V2_0P5( Q, G, D, SD );
input D, G, SD;
output Q;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_LDPSBQ_V2_0P5_func SAEDRVT14_LDPSBQ_V2_0P5_behav_inst(.Q(Q),.G(G),.D(D),.SD(SD));
`else
   SAEDRVT14_LDPSBQ_V2_0P5_func SAEDRVT14_LDPSBQ_V2_0P5_inst(.Q(Q),.G(G),.D(D),.SD(SD));
   // spec_gates_begin
   buf MGM_G0(ENABLE_SD,SD);
   not MGM_G1(MGM_W0,D);
   and MGM_G2(ENABLE_NOT_D_AND_SD,SD,MGM_W0);
   and MGM_G3(ENABLE_D_AND_SD,SD,D);
   not MGM_G4(ENABLE_NOT_D,D);
   not MGM_G5(MGM_W1,D);
   not MGM_G6(MGM_W2,G);
   and MGM_G7(ENABLE_NOT_D_AND_NOT_G,MGM_W2,MGM_W1);
   not MGM_G8(MGM_W3,G);
   and MGM_G9(ENABLE_D_AND_NOT_G,MGM_W3,D);
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc D --> Q
      (D => Q) = (1.0,1.0);
      
      // seq arc G --> Q
      (posedge G => (Q : D))  = (1.0,1.0);
      
      if(D===1'b0 && G===1'b0)
      // seq arc SD --> Q
      (SD => Q)  = (1.0,1.0);
      
      if(D===1'b0 && G===1'b1)
      // seq arc SD --> Q
      (SD => Q)  = (1.0,1.0);
      
      if(D===1'b1 && G===1'b0)
      // seq arc SD --> Q
      (SD => Q)  = (1.0,1.0);
      
      ifnone
      // seq arc SD --> Q
      (SD => Q)  = (1.0,1.0);
      
      // hold D-HL G-HL
      $hold(negedge G &&& (ENABLE_SD === 1'b1),
      negedge D &&& (ENABLE_SD === 1'b1),1.0);
      
      // hold D-LH G-HL
      $hold(negedge G &&& (ENABLE_SD === 1'b1),
      posedge D &&& (ENABLE_SD === 1'b1),1.0);
      
      // setup D-HL G-HL
      $setup(negedge D &&& (ENABLE_SD === 1'b1),
      negedge G &&& (ENABLE_SD === 1'b1),1.0);
      
      // setup D-LH G-HL
      $setup(posedge D &&& (ENABLE_SD === 1'b1),
      negedge G &&& (ENABLE_SD === 1'b1),1.0);
      
      $width(posedge G &&& (ENABLE_NOT_D_AND_SD === 1'b1)
      ,1.0,0);
      
      $width(posedge G &&& (ENABLE_D_AND_SD === 1'b1)
      ,1.0,0);
      
      // recovery SD-LH G-HL
      $recovery(posedge SD &&& (ENABLE_NOT_D === 1'b1),
      negedge G &&& (ENABLE_NOT_D === 1'b1),1.0);
      
      // removal SD-LH G-HL
      $removal(posedge SD &&& (ENABLE_NOT_D === 1'b1),
      negedge G &&& (ENABLE_NOT_D === 1'b1),1.0);
      
      $width(negedge SD &&& (ENABLE_NOT_D_AND_NOT_G === 1'b1)
      ,1.0,0);
      
      $width(negedge SD &&& (ENABLE_D_AND_NOT_G === 1'b1)
      ,1.0,0);
      
      // mpw G_lh 
      $width(posedge G,1.0,0);
      
      // mpw SD_hl 
      $width(negedge SD,1.0,0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_LDPSBQ_V2_1( Q, G, D, SD );
input D, G, SD;
output Q;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_LDPSBQ_V2_1_func SAEDRVT14_LDPSBQ_V2_1_behav_inst(.Q(Q),.G(G),.D(D),.SD(SD));
`else
   SAEDRVT14_LDPSBQ_V2_1_func SAEDRVT14_LDPSBQ_V2_1_inst(.Q(Q),.G(G),.D(D),.SD(SD));
   // spec_gates_begin
   buf MGM_G0(ENABLE_SD,SD);
   not MGM_G1(MGM_W0,D);
   and MGM_G2(ENABLE_NOT_D_AND_SD,SD,MGM_W0);
   and MGM_G3(ENABLE_D_AND_SD,SD,D);
   not MGM_G4(ENABLE_NOT_D,D);
   not MGM_G5(MGM_W1,D);
   not MGM_G6(MGM_W2,G);
   and MGM_G7(ENABLE_NOT_D_AND_NOT_G,MGM_W2,MGM_W1);
   not MGM_G8(MGM_W3,G);
   and MGM_G9(ENABLE_D_AND_NOT_G,MGM_W3,D);
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc D --> Q
      (D => Q) = (1.0,1.0);
      
      // seq arc G --> Q
      (posedge G => (Q : D))  = (1.0,1.0);
      
      if(D===1'b0 && G===1'b0)
      // seq arc SD --> Q
      (SD => Q)  = (1.0,1.0);
      
      if(D===1'b0 && G===1'b1)
      // seq arc SD --> Q
      (SD => Q)  = (1.0,1.0);
      
      if(D===1'b1 && G===1'b0)
      // seq arc SD --> Q
      (SD => Q)  = (1.0,1.0);
      
      ifnone
      // seq arc SD --> Q
      (SD => Q)  = (1.0,1.0);
      
      // hold D-HL G-HL
      $hold(negedge G &&& (ENABLE_SD === 1'b1),
      negedge D &&& (ENABLE_SD === 1'b1),1.0);
      
      // hold D-LH G-HL
      $hold(negedge G &&& (ENABLE_SD === 1'b1),
      posedge D &&& (ENABLE_SD === 1'b1),1.0);
      
      // setup D-HL G-HL
      $setup(negedge D &&& (ENABLE_SD === 1'b1),
      negedge G &&& (ENABLE_SD === 1'b1),1.0);
      
      // setup D-LH G-HL
      $setup(posedge D &&& (ENABLE_SD === 1'b1),
      negedge G &&& (ENABLE_SD === 1'b1),1.0);
      
      $width(posedge G &&& (ENABLE_NOT_D_AND_SD === 1'b1)
      ,1.0,0);
      
      $width(posedge G &&& (ENABLE_D_AND_SD === 1'b1)
      ,1.0,0);
      
      // recovery SD-LH G-HL
      $recovery(posedge SD &&& (ENABLE_NOT_D === 1'b1),
      negedge G &&& (ENABLE_NOT_D === 1'b1),1.0);
      
      // removal SD-LH G-HL
      $removal(posedge SD &&& (ENABLE_NOT_D === 1'b1),
      negedge G &&& (ENABLE_NOT_D === 1'b1),1.0);
      
      $width(negedge SD &&& (ENABLE_NOT_D_AND_NOT_G === 1'b1)
      ,1.0,0);
      
      $width(negedge SD &&& (ENABLE_D_AND_NOT_G === 1'b1)
      ,1.0,0);
      
      // mpw G_lh 
      $width(posedge G,1.0,0);
      
      // mpw SD_hl 
      $width(negedge SD,1.0,0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_LDPSBQ_V2_2( Q, G, D, SD );
input D, G, SD;
output Q;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_LDPSBQ_V2_2_func SAEDRVT14_LDPSBQ_V2_2_behav_inst(.Q(Q),.G(G),.D(D),.SD(SD));
`else
   SAEDRVT14_LDPSBQ_V2_2_func SAEDRVT14_LDPSBQ_V2_2_inst(.Q(Q),.G(G),.D(D),.SD(SD));
   // spec_gates_begin
   buf MGM_G0(ENABLE_SD,SD);
   not MGM_G1(MGM_W0,D);
   and MGM_G2(ENABLE_NOT_D_AND_SD,SD,MGM_W0);
   and MGM_G3(ENABLE_D_AND_SD,SD,D);
   not MGM_G4(ENABLE_NOT_D,D);
   not MGM_G5(MGM_W1,D);
   not MGM_G6(MGM_W2,G);
   and MGM_G7(ENABLE_NOT_D_AND_NOT_G,MGM_W2,MGM_W1);
   not MGM_G8(MGM_W3,G);
   and MGM_G9(ENABLE_D_AND_NOT_G,MGM_W3,D);
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc D --> Q
      (D => Q) = (1.0,1.0);
      
      // seq arc G --> Q
      (posedge G => (Q : D))  = (1.0,1.0);
      
      if(D===1'b0 && G===1'b0)
      // seq arc SD --> Q
      (SD => Q)  = (1.0,1.0);
      
      if(D===1'b0 && G===1'b1)
      // seq arc SD --> Q
      (SD => Q)  = (1.0,1.0);
      
      if(D===1'b1 && G===1'b0)
      // seq arc SD --> Q
      (SD => Q)  = (1.0,1.0);
      
      ifnone
      // seq arc SD --> Q
      (SD => Q)  = (1.0,1.0);
      
      // hold D-HL G-HL
      $hold(negedge G &&& (ENABLE_SD === 1'b1),
      negedge D &&& (ENABLE_SD === 1'b1),1.0);
      
      // hold D-LH G-HL
      $hold(negedge G &&& (ENABLE_SD === 1'b1),
      posedge D &&& (ENABLE_SD === 1'b1),1.0);
      
      // setup D-HL G-HL
      $setup(negedge D &&& (ENABLE_SD === 1'b1),
      negedge G &&& (ENABLE_SD === 1'b1),1.0);
      
      // setup D-LH G-HL
      $setup(posedge D &&& (ENABLE_SD === 1'b1),
      negedge G &&& (ENABLE_SD === 1'b1),1.0);
      
      $width(posedge G &&& (ENABLE_NOT_D_AND_SD === 1'b1)
      ,1.0,0);
      
      $width(posedge G &&& (ENABLE_D_AND_SD === 1'b1)
      ,1.0,0);
      
      // recovery SD-LH G-HL
      $recovery(posedge SD &&& (ENABLE_NOT_D === 1'b1),
      negedge G &&& (ENABLE_NOT_D === 1'b1),1.0);
      
      // removal SD-LH G-HL
      $removal(posedge SD &&& (ENABLE_NOT_D === 1'b1),
      negedge G &&& (ENABLE_NOT_D === 1'b1),1.0);
      
      $width(negedge SD &&& (ENABLE_NOT_D_AND_NOT_G === 1'b1)
      ,1.0,0);
      
      $width(negedge SD &&& (ENABLE_D_AND_NOT_G === 1'b1)
      ,1.0,0);
      
      // mpw G_lh 
      $width(posedge G,1.0,0);
      
      // mpw SD_hl 
      $width(negedge SD,1.0,0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_LDPSBQ_V2_4( Q, G, D, SD );
input D, G, SD;
output Q;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_LDPSBQ_V2_4_func SAEDRVT14_LDPSBQ_V2_4_behav_inst(.Q(Q),.G(G),.D(D),.SD(SD));
`else
   SAEDRVT14_LDPSBQ_V2_4_func SAEDRVT14_LDPSBQ_V2_4_inst(.Q(Q),.G(G),.D(D),.SD(SD));
   // spec_gates_begin
   buf MGM_G0(ENABLE_SD,SD);
   not MGM_G1(MGM_W0,D);
   and MGM_G2(ENABLE_NOT_D_AND_SD,SD,MGM_W0);
   and MGM_G3(ENABLE_D_AND_SD,SD,D);
   not MGM_G4(ENABLE_NOT_D,D);
   not MGM_G5(MGM_W1,D);
   not MGM_G6(MGM_W2,G);
   and MGM_G7(ENABLE_NOT_D_AND_NOT_G,MGM_W2,MGM_W1);
   not MGM_G8(MGM_W3,G);
   and MGM_G9(ENABLE_D_AND_NOT_G,MGM_W3,D);
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc D --> Q
      (D => Q) = (1.0,1.0);
      
      // seq arc G --> Q
      (posedge G => (Q : D))  = (1.0,1.0);
      
      if(D===1'b0 && G===1'b0)
      // seq arc SD --> Q
      (SD => Q)  = (1.0,1.0);
      
      if(D===1'b0 && G===1'b1)
      // seq arc SD --> Q
      (SD => Q)  = (1.0,1.0);
      
      if(D===1'b1 && G===1'b0)
      // seq arc SD --> Q
      (SD => Q)  = (1.0,1.0);
      
      ifnone
      // seq arc SD --> Q
      (SD => Q)  = (1.0,1.0);
      
      // hold D-HL G-HL
      $hold(negedge G &&& (ENABLE_SD === 1'b1),
      negedge D &&& (ENABLE_SD === 1'b1),1.0);
      
      // hold D-LH G-HL
      $hold(negedge G &&& (ENABLE_SD === 1'b1),
      posedge D &&& (ENABLE_SD === 1'b1),1.0);
      
      // setup D-HL G-HL
      $setup(negedge D &&& (ENABLE_SD === 1'b1),
      negedge G &&& (ENABLE_SD === 1'b1),1.0);
      
      // setup D-LH G-HL
      $setup(posedge D &&& (ENABLE_SD === 1'b1),
      negedge G &&& (ENABLE_SD === 1'b1),1.0);
      
      $width(posedge G &&& (ENABLE_NOT_D_AND_SD === 1'b1)
      ,1.0,0);
      
      $width(posedge G &&& (ENABLE_D_AND_SD === 1'b1)
      ,1.0,0);
      
      // recovery SD-LH G-HL
      $recovery(posedge SD &&& (ENABLE_NOT_D === 1'b1),
      negedge G &&& (ENABLE_NOT_D === 1'b1),1.0);
      
      // removal SD-LH G-HL
      $removal(posedge SD &&& (ENABLE_NOT_D === 1'b1),
      negedge G &&& (ENABLE_NOT_D === 1'b1),1.0);
      
      $width(negedge SD &&& (ENABLE_NOT_D_AND_NOT_G === 1'b1)
      ,1.0,0);
      
      $width(negedge SD &&& (ENABLE_D_AND_NOT_G === 1'b1)
      ,1.0,0);
      
      // mpw G_lh 
      $width(posedge G,1.0,0);
      
      // mpw SD_hl 
      $width(negedge SD,1.0,0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine
//****************************************************************************//
// Verilog models generated by SiliconSmart M-2017.03-SP3 build date: Aug 22, 2017 15:59:14. (SMSC-2) //
// Siliconsmart Path: /global/apps/siliconsmart_2017.03-SP3/linux64/bin/siliconsmart //
// Host Name: am04dwamd078.internal.synopsys.com, User Name: saroyan, PID: 3749  //
// Directory: /remote/saed/meruzha/CHAR/rvt/processes_std/tt0p8v25c/siliconsmart/simulation_isol_isol_ao //
//                                                                            //
// File generated on Tue Jan 02 16:48:30 AMT 2018. (SMSC-3)                   //
//****************************************************************************//






`celldefine
module SAEDRVT14_AN2B_PMM_2( X, A, B );
input A, B;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_AN2B_PMM_2_func SAEDRVT14_AN2B_PMM_2_behav_inst(.X(X),.A(A),.B(B));
`else
   SAEDRVT14_AN2B_PMM_2_func SAEDRVT14_AN2B_PMM_2_inst(.X(X),.A(A),.B(B));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A --> X
      (A => X) = (1.0,1.0);
      
      // comb arc B --> X
      (B => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_AN2B_PMM_8( X, A, B );
input A, B;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_AN2B_PMM_8_func SAEDRVT14_AN2B_PMM_8_behav_inst(.X(X),.A(A),.B(B));
`else
   SAEDRVT14_AN2B_PMM_8_func SAEDRVT14_AN2B_PMM_8_inst(.X(X),.A(A),.B(B));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A --> X
      (A => X) = (1.0,1.0);
      
      // comb arc B --> X
      (B => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_AN2B_PSECO_1( X, A, B );
input A, B;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_AN2B_PSECO_1_func SAEDRVT14_AN2B_PSECO_1_behav_inst(.X(X),.A(A),.B(B));
`else
   SAEDRVT14_AN2B_PSECO_1_func SAEDRVT14_AN2B_PSECO_1_inst(.X(X),.A(A),.B(B));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A --> X
      (A => X) = (1.0,1.0);
      
      // comb arc B --> X
      (B => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_AN2B_PSECO_2( X, A, B );
input A, B;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_AN2B_PSECO_2_func SAEDRVT14_AN2B_PSECO_2_behav_inst(.X(X),.A(A),.B(B));
`else
   SAEDRVT14_AN2B_PSECO_2_func SAEDRVT14_AN2B_PSECO_2_inst(.X(X),.A(A),.B(B));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A --> X
      (A => X) = (1.0,1.0);
      
      // comb arc B --> X
      (B => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_AN2B_PSECO_4( X, A, B );
input A, B;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_AN2B_PSECO_4_func SAEDRVT14_AN2B_PSECO_4_behav_inst(.X(X),.A(A),.B(B));
`else
   SAEDRVT14_AN2B_PSECO_4_func SAEDRVT14_AN2B_PSECO_4_inst(.X(X),.A(A),.B(B));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A --> X
      (A => X) = (1.0,1.0);
      
      // comb arc B --> X
      (B => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_AN2B_PSECO_8( X, A, B );
input A, B;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_AN2B_PSECO_8_func SAEDRVT14_AN2B_PSECO_8_behav_inst(.X(X),.A(A),.B(B));
`else
   SAEDRVT14_AN2B_PSECO_8_func SAEDRVT14_AN2B_PSECO_8_inst(.X(X),.A(A),.B(B));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A --> X
      (A => X) = (1.0,1.0);
      
      // comb arc B --> X
      (B => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_BUF_PECO_1( X, A );
input A;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_BUF_PECO_1_func SAEDRVT14_BUF_PECO_1_behav_inst(.X(X),.A(A));
`else
   SAEDRVT14_BUF_PECO_1_func SAEDRVT14_BUF_PECO_1_inst(.X(X),.A(A));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A --> X
      (A => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_BUF_PECO_12( X, A );
input A;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_BUF_PECO_12_func SAEDRVT14_BUF_PECO_12_behav_inst(.X(X),.A(A));
`else
   SAEDRVT14_BUF_PECO_12_func SAEDRVT14_BUF_PECO_12_inst(.X(X),.A(A));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A --> X
      (A => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_BUF_PECO_2( X, A );
input A;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_BUF_PECO_2_func SAEDRVT14_BUF_PECO_2_behav_inst(.X(X),.A(A));
`else
   SAEDRVT14_BUF_PECO_2_func SAEDRVT14_BUF_PECO_2_inst(.X(X),.A(A));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A --> X
      (A => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_BUF_PECO_4( X, A );
input A;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_BUF_PECO_4_func SAEDRVT14_BUF_PECO_4_behav_inst(.X(X),.A(A));
`else
   SAEDRVT14_BUF_PECO_4_func SAEDRVT14_BUF_PECO_4_inst(.X(X),.A(A));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A --> X
      (A => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_BUF_PECO_8( X, A );
input A;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_BUF_PECO_8_func SAEDRVT14_BUF_PECO_8_behav_inst(.X(X),.A(A));
`else
   SAEDRVT14_BUF_PECO_8_func SAEDRVT14_BUF_PECO_8_inst(.X(X),.A(A));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A --> X
      (A => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_BUF_PS_0P75( X, A );
input A;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_BUF_PS_0P75_func SAEDRVT14_BUF_PS_0P75_behav_inst(.X(X),.A(A));
`else
   SAEDRVT14_BUF_PS_0P75_func SAEDRVT14_BUF_PS_0P75_inst(.X(X),.A(A));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A --> X
      (A => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_BUF_PS_1P5( X, A );
input A;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_BUF_PS_1P5_func SAEDRVT14_BUF_PS_1P5_behav_inst(.X(X),.A(A));
`else
   SAEDRVT14_BUF_PS_1P5_func SAEDRVT14_BUF_PS_1P5_inst(.X(X),.A(A));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A --> X
      (A => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_BUF_PS_3( X, A );
input A;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_BUF_PS_3_func SAEDRVT14_BUF_PS_3_behav_inst(.X(X),.A(A));
`else
   SAEDRVT14_BUF_PS_3_func SAEDRVT14_BUF_PS_3_inst(.X(X),.A(A));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A --> X
      (A => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_BUF_PS_6( X, A );
input A;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_BUF_PS_6_func SAEDRVT14_BUF_PS_6_behav_inst(.X(X),.A(A));
`else
   SAEDRVT14_BUF_PS_6_func SAEDRVT14_BUF_PS_6_inst(.X(X),.A(A));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A --> X
      (A => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_DEL_PR2V2_1( X, A );
input A;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_DEL_PR2V2_1_func SAEDRVT14_DEL_PR2V2_1_behav_inst(.X(X),.A(A));
`else
   SAEDRVT14_DEL_PR2V2_1_func SAEDRVT14_DEL_PR2V2_1_inst(.X(X),.A(A));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A --> X
      (A => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_INV_PECO_1( X, A );
input A;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_INV_PECO_1_func SAEDRVT14_INV_PECO_1_behav_inst(.X(X),.A(A));
`else
   SAEDRVT14_INV_PECO_1_func SAEDRVT14_INV_PECO_1_inst(.X(X),.A(A));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A --> X
      (A => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_INV_PECO_12( X, A );
input A;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_INV_PECO_12_func SAEDRVT14_INV_PECO_12_behav_inst(.X(X),.A(A));
`else
   SAEDRVT14_INV_PECO_12_func SAEDRVT14_INV_PECO_12_inst(.X(X),.A(A));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A --> X
      (A => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_INV_PECO_2( X, A );
input A;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_INV_PECO_2_func SAEDRVT14_INV_PECO_2_behav_inst(.X(X),.A(A));
`else
   SAEDRVT14_INV_PECO_2_func SAEDRVT14_INV_PECO_2_inst(.X(X),.A(A));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A --> X
      (A => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_INV_PECO_4( X, A );
input A;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_INV_PECO_4_func SAEDRVT14_INV_PECO_4_behav_inst(.X(X),.A(A));
`else
   SAEDRVT14_INV_PECO_4_func SAEDRVT14_INV_PECO_4_inst(.X(X),.A(A));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A --> X
      (A => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_INV_PECO_8( X, A );
input A;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_INV_PECO_8_func SAEDRVT14_INV_PECO_8_behav_inst(.X(X),.A(A));
`else
   SAEDRVT14_INV_PECO_8_func SAEDRVT14_INV_PECO_8_inst(.X(X),.A(A));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A --> X
      (A => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_INV_PS_1( X, A );
input A;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_INV_PS_1_func SAEDRVT14_INV_PS_1_behav_inst(.X(X),.A(A));
`else
   SAEDRVT14_INV_PS_1_func SAEDRVT14_INV_PS_1_inst(.X(X),.A(A));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A --> X
      (A => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_INV_PS_2( X, A );
input A;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_INV_PS_2_func SAEDRVT14_INV_PS_2_behav_inst(.X(X),.A(A));
`else
   SAEDRVT14_INV_PS_2_func SAEDRVT14_INV_PS_2_inst(.X(X),.A(A));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A --> X
      (A => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_INV_PS_3( X, A );
input A;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_INV_PS_3_func SAEDRVT14_INV_PS_3_behav_inst(.X(X),.A(A));
`else
   SAEDRVT14_INV_PS_3_func SAEDRVT14_INV_PS_3_inst(.X(X),.A(A));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A --> X
      (A => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_INV_PS_6( X, A );
input A;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_INV_PS_6_func SAEDRVT14_INV_PS_6_behav_inst(.X(X),.A(A));
`else
   SAEDRVT14_INV_PS_6_func SAEDRVT14_INV_PS_6_inst(.X(X),.A(A));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A --> X
      (A => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_ISOFSDPQ_PECO_4( Q, CK, D, SI, SE, ISON );
input CK, D, ISON, SE, SI;
output Q;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_ISOFSDPQ_PECO_4_func SAEDRVT14_ISOFSDPQ_PECO_4_behav_inst(.Q(Q),.CK(CK),.D(D),.SI(SI),.SE(SE),.ISON(ISON));
`else
   SAEDRVT14_ISOFSDPQ_PECO_4_func SAEDRVT14_ISOFSDPQ_PECO_4_inst(.Q(Q),.CK(CK),.D(D),.SI(SI),.SE(SE),.ISON(ISON));
   // spec_gates_begin
   not MGM_G0(MGM_W0,D);
   not MGM_G1(MGM_W1,ISON);
   and MGM_G2(MGM_W2,MGM_W1,MGM_W0);
   not MGM_G3(MGM_W3,SE);
   and MGM_G4(MGM_W4,MGM_W3,MGM_W2);
   not MGM_G5(MGM_W5,SI);
   and MGM_G6(ENABLE_NOT_D_AND_NOT_ISON_AND_NOT_SE_AND_NOT_SI,MGM_W5,MGM_W4);
   not MGM_G7(MGM_W6,D);
   not MGM_G8(MGM_W7,ISON);
   and MGM_G9(MGM_W8,MGM_W7,MGM_W6);
   not MGM_G10(MGM_W9,SE);
   and MGM_G11(MGM_W10,MGM_W9,MGM_W8);
   and MGM_G12(ENABLE_NOT_D_AND_NOT_ISON_AND_NOT_SE_AND_SI,SI,MGM_W10);
   not MGM_G13(MGM_W11,D);
   not MGM_G14(MGM_W12,ISON);
   and MGM_G15(MGM_W13,MGM_W12,MGM_W11);
   and MGM_G16(MGM_W14,SE,MGM_W13);
   not MGM_G17(MGM_W15,SI);
   and MGM_G18(ENABLE_NOT_D_AND_NOT_ISON_AND_SE_AND_NOT_SI,MGM_W15,MGM_W14);
   not MGM_G19(MGM_W16,D);
   not MGM_G20(MGM_W17,ISON);
   and MGM_G21(MGM_W18,MGM_W17,MGM_W16);
   and MGM_G22(MGM_W19,SE,MGM_W18);
   and MGM_G23(ENABLE_NOT_D_AND_NOT_ISON_AND_SE_AND_SI,SI,MGM_W19);
   not MGM_G24(MGM_W20,D);
   and MGM_G25(MGM_W21,ISON,MGM_W20);
   not MGM_G26(MGM_W22,SE);
   and MGM_G27(MGM_W23,MGM_W22,MGM_W21);
   not MGM_G28(MGM_W24,SI);
   and MGM_G29(ENABLE_NOT_D_AND_ISON_AND_NOT_SE_AND_NOT_SI,MGM_W24,MGM_W23);
   not MGM_G30(MGM_W25,D);
   and MGM_G31(MGM_W26,ISON,MGM_W25);
   not MGM_G32(MGM_W27,SE);
   and MGM_G33(MGM_W28,MGM_W27,MGM_W26);
   and MGM_G34(ENABLE_NOT_D_AND_ISON_AND_NOT_SE_AND_SI,SI,MGM_W28);
   not MGM_G35(MGM_W29,D);
   and MGM_G36(MGM_W30,ISON,MGM_W29);
   and MGM_G37(MGM_W31,SE,MGM_W30);
   not MGM_G38(MGM_W32,SI);
   and MGM_G39(ENABLE_NOT_D_AND_ISON_AND_SE_AND_NOT_SI,MGM_W32,MGM_W31);
   not MGM_G40(MGM_W33,D);
   and MGM_G41(MGM_W34,ISON,MGM_W33);
   and MGM_G42(MGM_W35,SE,MGM_W34);
   and MGM_G43(ENABLE_NOT_D_AND_ISON_AND_SE_AND_SI,SI,MGM_W35);
   not MGM_G44(MGM_W36,ISON);
   and MGM_G45(MGM_W37,MGM_W36,D);
   not MGM_G46(MGM_W38,SE);
   and MGM_G47(MGM_W39,MGM_W38,MGM_W37);
   not MGM_G48(MGM_W40,SI);
   and MGM_G49(ENABLE_D_AND_NOT_ISON_AND_NOT_SE_AND_NOT_SI,MGM_W40,MGM_W39);
   not MGM_G50(MGM_W41,ISON);
   and MGM_G51(MGM_W42,MGM_W41,D);
   not MGM_G52(MGM_W43,SE);
   and MGM_G53(MGM_W44,MGM_W43,MGM_W42);
   and MGM_G54(ENABLE_D_AND_NOT_ISON_AND_NOT_SE_AND_SI,SI,MGM_W44);
   not MGM_G55(MGM_W45,ISON);
   and MGM_G56(MGM_W46,MGM_W45,D);
   and MGM_G57(MGM_W47,SE,MGM_W46);
   not MGM_G58(MGM_W48,SI);
   and MGM_G59(ENABLE_D_AND_NOT_ISON_AND_SE_AND_NOT_SI,MGM_W48,MGM_W47);
   not MGM_G60(MGM_W49,ISON);
   and MGM_G61(MGM_W50,MGM_W49,D);
   and MGM_G62(MGM_W51,SE,MGM_W50);
   and MGM_G63(ENABLE_D_AND_NOT_ISON_AND_SE_AND_SI,SI,MGM_W51);
   and MGM_G64(MGM_W52,ISON,D);
   not MGM_G65(MGM_W53,SE);
   and MGM_G66(MGM_W54,MGM_W53,MGM_W52);
   not MGM_G67(MGM_W55,SI);
   and MGM_G68(ENABLE_D_AND_ISON_AND_NOT_SE_AND_NOT_SI,MGM_W55,MGM_W54);
   and MGM_G69(MGM_W56,ISON,D);
   not MGM_G70(MGM_W57,SE);
   and MGM_G71(MGM_W58,MGM_W57,MGM_W56);
   and MGM_G72(ENABLE_D_AND_ISON_AND_NOT_SE_AND_SI,SI,MGM_W58);
   and MGM_G73(MGM_W59,ISON,D);
   and MGM_G74(MGM_W60,SE,MGM_W59);
   not MGM_G75(MGM_W61,SI);
   and MGM_G76(ENABLE_D_AND_ISON_AND_SE_AND_NOT_SI,MGM_W61,MGM_W60);
   and MGM_G77(MGM_W62,ISON,D);
   and MGM_G78(MGM_W63,SE,MGM_W62);
   and MGM_G79(ENABLE_D_AND_ISON_AND_SE_AND_SI,SI,MGM_W63);
   not MGM_G80(MGM_W64,ISON);
   not MGM_G81(MGM_W65,SE);
   and MGM_G82(MGM_W66,MGM_W65,MGM_W64);
   not MGM_G83(MGM_W67,SI);
   and MGM_G84(ENABLE_NOT_ISON_AND_NOT_SE_AND_NOT_SI,MGM_W67,MGM_W66);
   not MGM_G85(MGM_W68,ISON);
   not MGM_G86(MGM_W69,SE);
   and MGM_G87(MGM_W70,MGM_W69,MGM_W68);
   and MGM_G88(ENABLE_NOT_ISON_AND_NOT_SE_AND_SI,SI,MGM_W70);
   not MGM_G89(MGM_W71,ISON);
   and MGM_G90(MGM_W72,SE,MGM_W71);
   not MGM_G91(MGM_W73,SI);
   and MGM_G92(ENABLE_NOT_ISON_AND_SE_AND_NOT_SI,MGM_W73,MGM_W72);
   not MGM_G93(MGM_W74,ISON);
   and MGM_G94(MGM_W75,SE,MGM_W74);
   and MGM_G95(ENABLE_NOT_ISON_AND_SE_AND_SI,SI,MGM_W75);
   not MGM_G96(MGM_W76,SE);
   and MGM_G97(MGM_W77,MGM_W76,ISON);
   not MGM_G98(MGM_W78,SI);
   and MGM_G99(ENABLE_ISON_AND_NOT_SE_AND_NOT_SI,MGM_W78,MGM_W77);
   not MGM_G100(MGM_W79,SE);
   and MGM_G101(MGM_W80,MGM_W79,ISON);
   and MGM_G102(ENABLE_ISON_AND_NOT_SE_AND_SI,SI,MGM_W80);
   not MGM_G103(MGM_W81,D);
   and MGM_G104(MGM_W82,SE,MGM_W81);
   and MGM_G105(ENABLE_NOT_D_AND_SE_AND_SI,SI,MGM_W82);
   and MGM_G106(MGM_W83,SE,D);
   not MGM_G107(MGM_W84,SI);
   and MGM_G108(ENABLE_D_AND_SE_AND_NOT_SI,MGM_W84,MGM_W83);
   not MGM_G109(MGM_W85,D);
   and MGM_G110(MGM_W86,ISON,MGM_W85);
   and MGM_G111(ENABLE_NOT_D_AND_ISON_AND_SI,SI,MGM_W86);
   and MGM_G112(MGM_W87,ISON,D);
   not MGM_G113(MGM_W88,SI);
   and MGM_G114(ENABLE_D_AND_ISON_AND_NOT_SI,MGM_W88,MGM_W87);
   not MGM_G115(MGM_W89,D);
   and MGM_G116(MGM_W90,ISON,MGM_W89);
   and MGM_G117(ENABLE_NOT_D_AND_ISON_AND_SE,SE,MGM_W90);
   and MGM_G118(MGM_W91,ISON,D);
   and MGM_G119(ENABLE_D_AND_ISON_AND_SE,SE,MGM_W91);
   // spec_gates_end
   // specify_block_begin
   specify

      if(D===1'b0 && SE===1'b1 && SI===1'b1)
      // seq arc CK --> Q
      (posedge CK => (Q : ISON))  = (1.0,1.0);
      
      if(ISON===1'b0 && SE===1'b0 && SI===1'b0)
      // seq arc CK --> Q
      (posedge CK => (Q : D))  = (1.0,1.0);
      
      if(ISON===1'b0 && SE===1'b0 && SI===1'b1)
      // seq arc CK --> Q
      (posedge CK => (Q : D))  = (1.0,1.0);
      
      if(ISON===1'b0 && SE===1'b1 && SI===1'b0)
      // seq arc CK --> Q
      (posedge CK => (Q : D))  = (1.0,1.0);
      
      if(D===1'b1 && ISON===1'b0 && SE===1'b1 && SI===1'b1 || D===1'b0 && ISON===1'b1 && SE===1'b0 && SI===1'b0)
      // seq arc CK --> Q
      (posedge CK => (Q : D))  = (1.0,1.0);
      
      if(D===1'b1 && ISON===1'b1 && SI===1'b0)
      // seq arc CK --> Q
      (posedge CK => (Q : SE))  = (1.0,1.0);
      
      if(D===1'b1 && ISON===1'b1 && SE===1'b1 && SI===1'b1 || D===1'b0 && ISON===1'b1 && SE===1'b1 && SI===1'b0)
      // seq arc CK --> Q
      (posedge CK => (Q : D))  = (1.0,1.0);
      
      if(ISON===1'b1 && SE===1'b0 && SI===1'b1)
      // seq arc CK --> Q
      (posedge CK => (Q : D))  = (1.0,1.0);
      
      ifnone
      // seq arc CK --> Q
      (posedge CK => (Q : D))  = (1.0,1.0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_NOT_ISON_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_NOT_ISON_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_NOT_ISON_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_NOT_ISON_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_NOT_ISON_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_NOT_ISON_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_NOT_ISON_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_NOT_ISON_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_ISON_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_ISON_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_ISON_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_ISON_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_ISON_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_ISON_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_ISON_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_ISON_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_NOT_ISON_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_NOT_ISON_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_NOT_ISON_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_NOT_ISON_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_NOT_ISON_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_NOT_ISON_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_NOT_ISON_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_NOT_ISON_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_ISON_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_ISON_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_ISON_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_ISON_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_ISON_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_ISON_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_ISON_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_ISON_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      // hold D-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_ISON_AND_NOT_SE_AND_NOT_SI === 1'b1),
      negedge D &&& (ENABLE_NOT_ISON_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold D-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_ISON_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge D &&& (ENABLE_NOT_ISON_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup D-HL CK-LH
      $setup(negedge D &&& (ENABLE_NOT_ISON_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_ISON_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup D-LH CK-LH
      $setup(posedge D &&& (ENABLE_NOT_ISON_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_ISON_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold D-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_ISON_AND_NOT_SE_AND_SI === 1'b1),
      negedge D &&& (ENABLE_NOT_ISON_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // hold D-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_ISON_AND_NOT_SE_AND_SI === 1'b1),
      posedge D &&& (ENABLE_NOT_ISON_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // setup D-HL CK-LH
      $setup(negedge D &&& (ENABLE_NOT_ISON_AND_NOT_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_ISON_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // setup D-LH CK-LH
      $setup(posedge D &&& (ENABLE_NOT_ISON_AND_NOT_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_ISON_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // hold D-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_ISON_AND_SE_AND_NOT_SI === 1'b1),
      negedge D &&& (ENABLE_NOT_ISON_AND_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold D-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_ISON_AND_SE_AND_NOT_SI === 1'b1),
      posedge D &&& (ENABLE_NOT_ISON_AND_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup D-HL CK-LH
      $setup(negedge D &&& (ENABLE_NOT_ISON_AND_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_ISON_AND_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup D-LH CK-LH
      $setup(posedge D &&& (ENABLE_NOT_ISON_AND_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_ISON_AND_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold D-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_ISON_AND_SE_AND_SI === 1'b1),
      negedge D &&& (ENABLE_NOT_ISON_AND_SE_AND_SI === 1'b1),1.0);
      
      // hold D-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_ISON_AND_SE_AND_SI === 1'b1),
      posedge D &&& (ENABLE_NOT_ISON_AND_SE_AND_SI === 1'b1),1.0);
      
      // setup D-HL CK-LH
      $setup(negedge D &&& (ENABLE_NOT_ISON_AND_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_ISON_AND_SE_AND_SI === 1'b1),1.0);
      
      // setup D-LH CK-LH
      $setup(posedge D &&& (ENABLE_NOT_ISON_AND_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_ISON_AND_SE_AND_SI === 1'b1),1.0);
      
      // hold D-HL CK-LH
      $hold(posedge CK &&& (ENABLE_ISON_AND_NOT_SE_AND_NOT_SI === 1'b1),
      negedge D &&& (ENABLE_ISON_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold D-LH CK-LH
      $hold(posedge CK &&& (ENABLE_ISON_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge D &&& (ENABLE_ISON_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup D-HL CK-LH
      $setup(negedge D &&& (ENABLE_ISON_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_ISON_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup D-LH CK-LH
      $setup(posedge D &&& (ENABLE_ISON_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_ISON_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold D-HL CK-LH
      $hold(posedge CK &&& (ENABLE_ISON_AND_NOT_SE_AND_SI === 1'b1),
      negedge D &&& (ENABLE_ISON_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // hold D-LH CK-LH
      $hold(posedge CK &&& (ENABLE_ISON_AND_NOT_SE_AND_SI === 1'b1),
      posedge D &&& (ENABLE_ISON_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // setup D-HL CK-LH
      $setup(negedge D &&& (ENABLE_ISON_AND_NOT_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_ISON_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // setup D-LH CK-LH
      $setup(posedge D &&& (ENABLE_ISON_AND_NOT_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_ISON_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // hold ISON-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D_AND_SE_AND_SI === 1'b1),
      negedge ISON &&& (ENABLE_NOT_D_AND_SE_AND_SI === 1'b1),1.0);
      
      // hold ISON-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D_AND_SE_AND_SI === 1'b1),
      posedge ISON &&& (ENABLE_NOT_D_AND_SE_AND_SI === 1'b1),1.0);
      
      // setup ISON-HL CK-LH
      $setup(negedge ISON &&& (ENABLE_NOT_D_AND_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_SE_AND_SI === 1'b1),1.0);
      
      // setup ISON-LH CK-LH
      $setup(posedge ISON &&& (ENABLE_NOT_D_AND_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_SE_AND_SI === 1'b1),1.0);
      
      // hold ISON-HL CK-LH
      $hold(posedge CK &&& (ENABLE_D_AND_SE_AND_NOT_SI === 1'b1),
      negedge ISON &&& (ENABLE_D_AND_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold ISON-LH CK-LH
      $hold(posedge CK &&& (ENABLE_D_AND_SE_AND_NOT_SI === 1'b1),
      posedge ISON &&& (ENABLE_D_AND_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup ISON-HL CK-LH
      $setup(negedge ISON &&& (ENABLE_D_AND_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_D_AND_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup ISON-LH CK-LH
      $setup(posedge ISON &&& (ENABLE_D_AND_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_D_AND_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold SE-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D_AND_ISON_AND_SI === 1'b1),
      negedge SE &&& (ENABLE_NOT_D_AND_ISON_AND_SI === 1'b1),1.0);
      
      // hold SE-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D_AND_ISON_AND_SI === 1'b1),
      posedge SE &&& (ENABLE_NOT_D_AND_ISON_AND_SI === 1'b1),1.0);
      
      // setup SE-HL CK-LH
      $setup(negedge SE &&& (ENABLE_NOT_D_AND_ISON_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_ISON_AND_SI === 1'b1),1.0);
      
      // setup SE-LH CK-LH
      $setup(posedge SE &&& (ENABLE_NOT_D_AND_ISON_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_ISON_AND_SI === 1'b1),1.0);
      
      // hold SE-HL CK-LH
      $hold(posedge CK &&& (ENABLE_D_AND_ISON_AND_NOT_SI === 1'b1),
      negedge SE &&& (ENABLE_D_AND_ISON_AND_NOT_SI === 1'b1),1.0);
      
      // hold SE-LH CK-LH
      $hold(posedge CK &&& (ENABLE_D_AND_ISON_AND_NOT_SI === 1'b1),
      posedge SE &&& (ENABLE_D_AND_ISON_AND_NOT_SI === 1'b1),1.0);
      
      // setup SE-HL CK-LH
      $setup(negedge SE &&& (ENABLE_D_AND_ISON_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_D_AND_ISON_AND_NOT_SI === 1'b1),1.0);
      
      // setup SE-LH CK-LH
      $setup(posedge SE &&& (ENABLE_D_AND_ISON_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_D_AND_ISON_AND_NOT_SI === 1'b1),1.0);
      
      // hold SI-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D_AND_ISON_AND_SE === 1'b1),
      negedge SI &&& (ENABLE_NOT_D_AND_ISON_AND_SE === 1'b1),1.0);
      
      // hold SI-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D_AND_ISON_AND_SE === 1'b1),
      posedge SI &&& (ENABLE_NOT_D_AND_ISON_AND_SE === 1'b1),1.0);
      
      // setup SI-HL CK-LH
      $setup(negedge SI &&& (ENABLE_NOT_D_AND_ISON_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_ISON_AND_SE === 1'b1),1.0);
      
      // setup SI-LH CK-LH
      $setup(posedge SI &&& (ENABLE_NOT_D_AND_ISON_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_ISON_AND_SE === 1'b1),1.0);
      
      // hold SI-HL CK-LH
      $hold(posedge CK &&& (ENABLE_D_AND_ISON_AND_SE === 1'b1),
      negedge SI &&& (ENABLE_D_AND_ISON_AND_SE === 1'b1),1.0);
      
      // hold SI-LH CK-LH
      $hold(posedge CK &&& (ENABLE_D_AND_ISON_AND_SE === 1'b1),
      posedge SI &&& (ENABLE_D_AND_ISON_AND_SE === 1'b1),1.0);
      
      // setup SI-HL CK-LH
      $setup(negedge SI &&& (ENABLE_D_AND_ISON_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_D_AND_ISON_AND_SE === 1'b1),1.0);
      
      // setup SI-LH CK-LH
      $setup(posedge SI &&& (ENABLE_D_AND_ISON_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_D_AND_ISON_AND_SE === 1'b1),1.0);
      
      // mpw CK_lh 
      $width(posedge CK,1.0,0);
      
      // mpw CK_hl 
      $width(negedge CK,1.0,0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_ISOFSDPQ_PECO_8( Q, CK, D, SI, SE, ISON );
input CK, D, ISON, SE, SI;
output Q;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_ISOFSDPQ_PECO_8_func SAEDRVT14_ISOFSDPQ_PECO_8_behav_inst(.Q(Q),.CK(CK),.D(D),.SI(SI),.SE(SE),.ISON(ISON));
`else
   SAEDRVT14_ISOFSDPQ_PECO_8_func SAEDRVT14_ISOFSDPQ_PECO_8_inst(.Q(Q),.CK(CK),.D(D),.SI(SI),.SE(SE),.ISON(ISON));
   // spec_gates_begin
   not MGM_G0(MGM_W0,D);
   not MGM_G1(MGM_W1,ISON);
   and MGM_G2(MGM_W2,MGM_W1,MGM_W0);
   not MGM_G3(MGM_W3,SE);
   and MGM_G4(MGM_W4,MGM_W3,MGM_W2);
   not MGM_G5(MGM_W5,SI);
   and MGM_G6(ENABLE_NOT_D_AND_NOT_ISON_AND_NOT_SE_AND_NOT_SI,MGM_W5,MGM_W4);
   not MGM_G7(MGM_W6,D);
   not MGM_G8(MGM_W7,ISON);
   and MGM_G9(MGM_W8,MGM_W7,MGM_W6);
   not MGM_G10(MGM_W9,SE);
   and MGM_G11(MGM_W10,MGM_W9,MGM_W8);
   and MGM_G12(ENABLE_NOT_D_AND_NOT_ISON_AND_NOT_SE_AND_SI,SI,MGM_W10);
   not MGM_G13(MGM_W11,D);
   not MGM_G14(MGM_W12,ISON);
   and MGM_G15(MGM_W13,MGM_W12,MGM_W11);
   and MGM_G16(MGM_W14,SE,MGM_W13);
   not MGM_G17(MGM_W15,SI);
   and MGM_G18(ENABLE_NOT_D_AND_NOT_ISON_AND_SE_AND_NOT_SI,MGM_W15,MGM_W14);
   not MGM_G19(MGM_W16,D);
   not MGM_G20(MGM_W17,ISON);
   and MGM_G21(MGM_W18,MGM_W17,MGM_W16);
   and MGM_G22(MGM_W19,SE,MGM_W18);
   and MGM_G23(ENABLE_NOT_D_AND_NOT_ISON_AND_SE_AND_SI,SI,MGM_W19);
   not MGM_G24(MGM_W20,D);
   and MGM_G25(MGM_W21,ISON,MGM_W20);
   not MGM_G26(MGM_W22,SE);
   and MGM_G27(MGM_W23,MGM_W22,MGM_W21);
   not MGM_G28(MGM_W24,SI);
   and MGM_G29(ENABLE_NOT_D_AND_ISON_AND_NOT_SE_AND_NOT_SI,MGM_W24,MGM_W23);
   not MGM_G30(MGM_W25,D);
   and MGM_G31(MGM_W26,ISON,MGM_W25);
   not MGM_G32(MGM_W27,SE);
   and MGM_G33(MGM_W28,MGM_W27,MGM_W26);
   and MGM_G34(ENABLE_NOT_D_AND_ISON_AND_NOT_SE_AND_SI,SI,MGM_W28);
   not MGM_G35(MGM_W29,D);
   and MGM_G36(MGM_W30,ISON,MGM_W29);
   and MGM_G37(MGM_W31,SE,MGM_W30);
   not MGM_G38(MGM_W32,SI);
   and MGM_G39(ENABLE_NOT_D_AND_ISON_AND_SE_AND_NOT_SI,MGM_W32,MGM_W31);
   not MGM_G40(MGM_W33,D);
   and MGM_G41(MGM_W34,ISON,MGM_W33);
   and MGM_G42(MGM_W35,SE,MGM_W34);
   and MGM_G43(ENABLE_NOT_D_AND_ISON_AND_SE_AND_SI,SI,MGM_W35);
   not MGM_G44(MGM_W36,ISON);
   and MGM_G45(MGM_W37,MGM_W36,D);
   not MGM_G46(MGM_W38,SE);
   and MGM_G47(MGM_W39,MGM_W38,MGM_W37);
   not MGM_G48(MGM_W40,SI);
   and MGM_G49(ENABLE_D_AND_NOT_ISON_AND_NOT_SE_AND_NOT_SI,MGM_W40,MGM_W39);
   not MGM_G50(MGM_W41,ISON);
   and MGM_G51(MGM_W42,MGM_W41,D);
   not MGM_G52(MGM_W43,SE);
   and MGM_G53(MGM_W44,MGM_W43,MGM_W42);
   and MGM_G54(ENABLE_D_AND_NOT_ISON_AND_NOT_SE_AND_SI,SI,MGM_W44);
   not MGM_G55(MGM_W45,ISON);
   and MGM_G56(MGM_W46,MGM_W45,D);
   and MGM_G57(MGM_W47,SE,MGM_W46);
   not MGM_G58(MGM_W48,SI);
   and MGM_G59(ENABLE_D_AND_NOT_ISON_AND_SE_AND_NOT_SI,MGM_W48,MGM_W47);
   not MGM_G60(MGM_W49,ISON);
   and MGM_G61(MGM_W50,MGM_W49,D);
   and MGM_G62(MGM_W51,SE,MGM_W50);
   and MGM_G63(ENABLE_D_AND_NOT_ISON_AND_SE_AND_SI,SI,MGM_W51);
   and MGM_G64(MGM_W52,ISON,D);
   not MGM_G65(MGM_W53,SE);
   and MGM_G66(MGM_W54,MGM_W53,MGM_W52);
   not MGM_G67(MGM_W55,SI);
   and MGM_G68(ENABLE_D_AND_ISON_AND_NOT_SE_AND_NOT_SI,MGM_W55,MGM_W54);
   and MGM_G69(MGM_W56,ISON,D);
   not MGM_G70(MGM_W57,SE);
   and MGM_G71(MGM_W58,MGM_W57,MGM_W56);
   and MGM_G72(ENABLE_D_AND_ISON_AND_NOT_SE_AND_SI,SI,MGM_W58);
   and MGM_G73(MGM_W59,ISON,D);
   and MGM_G74(MGM_W60,SE,MGM_W59);
   not MGM_G75(MGM_W61,SI);
   and MGM_G76(ENABLE_D_AND_ISON_AND_SE_AND_NOT_SI,MGM_W61,MGM_W60);
   and MGM_G77(MGM_W62,ISON,D);
   and MGM_G78(MGM_W63,SE,MGM_W62);
   and MGM_G79(ENABLE_D_AND_ISON_AND_SE_AND_SI,SI,MGM_W63);
   not MGM_G80(MGM_W64,ISON);
   not MGM_G81(MGM_W65,SE);
   and MGM_G82(MGM_W66,MGM_W65,MGM_W64);
   not MGM_G83(MGM_W67,SI);
   and MGM_G84(ENABLE_NOT_ISON_AND_NOT_SE_AND_NOT_SI,MGM_W67,MGM_W66);
   not MGM_G85(MGM_W68,ISON);
   not MGM_G86(MGM_W69,SE);
   and MGM_G87(MGM_W70,MGM_W69,MGM_W68);
   and MGM_G88(ENABLE_NOT_ISON_AND_NOT_SE_AND_SI,SI,MGM_W70);
   not MGM_G89(MGM_W71,ISON);
   and MGM_G90(MGM_W72,SE,MGM_W71);
   not MGM_G91(MGM_W73,SI);
   and MGM_G92(ENABLE_NOT_ISON_AND_SE_AND_NOT_SI,MGM_W73,MGM_W72);
   not MGM_G93(MGM_W74,ISON);
   and MGM_G94(MGM_W75,SE,MGM_W74);
   and MGM_G95(ENABLE_NOT_ISON_AND_SE_AND_SI,SI,MGM_W75);
   not MGM_G96(MGM_W76,SE);
   and MGM_G97(MGM_W77,MGM_W76,ISON);
   not MGM_G98(MGM_W78,SI);
   and MGM_G99(ENABLE_ISON_AND_NOT_SE_AND_NOT_SI,MGM_W78,MGM_W77);
   not MGM_G100(MGM_W79,SE);
   and MGM_G101(MGM_W80,MGM_W79,ISON);
   and MGM_G102(ENABLE_ISON_AND_NOT_SE_AND_SI,SI,MGM_W80);
   not MGM_G103(MGM_W81,D);
   and MGM_G104(MGM_W82,SE,MGM_W81);
   and MGM_G105(ENABLE_NOT_D_AND_SE_AND_SI,SI,MGM_W82);
   and MGM_G106(MGM_W83,SE,D);
   not MGM_G107(MGM_W84,SI);
   and MGM_G108(ENABLE_D_AND_SE_AND_NOT_SI,MGM_W84,MGM_W83);
   not MGM_G109(MGM_W85,D);
   and MGM_G110(MGM_W86,ISON,MGM_W85);
   and MGM_G111(ENABLE_NOT_D_AND_ISON_AND_SI,SI,MGM_W86);
   and MGM_G112(MGM_W87,ISON,D);
   not MGM_G113(MGM_W88,SI);
   and MGM_G114(ENABLE_D_AND_ISON_AND_NOT_SI,MGM_W88,MGM_W87);
   not MGM_G115(MGM_W89,D);
   and MGM_G116(MGM_W90,ISON,MGM_W89);
   and MGM_G117(ENABLE_NOT_D_AND_ISON_AND_SE,SE,MGM_W90);
   and MGM_G118(MGM_W91,ISON,D);
   and MGM_G119(ENABLE_D_AND_ISON_AND_SE,SE,MGM_W91);
   // spec_gates_end
   // specify_block_begin
   specify

      if(D===1'b0 && SE===1'b1 && SI===1'b1)
      // seq arc CK --> Q
      (posedge CK => (Q : ISON))  = (1.0,1.0);
      
      if(ISON===1'b0 && SE===1'b0 && SI===1'b0)
      // seq arc CK --> Q
      (posedge CK => (Q : D))  = (1.0,1.0);
      
      if(ISON===1'b0 && SE===1'b0 && SI===1'b1)
      // seq arc CK --> Q
      (posedge CK => (Q : D))  = (1.0,1.0);
      
      if(ISON===1'b0 && SE===1'b1 && SI===1'b0)
      // seq arc CK --> Q
      (posedge CK => (Q : D))  = (1.0,1.0);
      
      if(D===1'b1 && ISON===1'b0 && SE===1'b1 && SI===1'b1 || D===1'b0 && ISON===1'b1 && SE===1'b0 && SI===1'b0)
      // seq arc CK --> Q
      (posedge CK => (Q : D))  = (1.0,1.0);
      
      if(D===1'b1 && ISON===1'b1 && SI===1'b0)
      // seq arc CK --> Q
      (posedge CK => (Q : SE))  = (1.0,1.0);
      
      if(D===1'b1 && ISON===1'b1 && SE===1'b1 && SI===1'b1 || D===1'b0 && ISON===1'b1 && SE===1'b1 && SI===1'b0)
      // seq arc CK --> Q
      (posedge CK => (Q : D))  = (1.0,1.0);
      
      if(ISON===1'b1 && SE===1'b0 && SI===1'b1)
      // seq arc CK --> Q
      (posedge CK => (Q : D))  = (1.0,1.0);
      
      ifnone
      // seq arc CK --> Q
      (posedge CK => (Q : D))  = (1.0,1.0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_NOT_ISON_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_NOT_ISON_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_NOT_ISON_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_NOT_ISON_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_NOT_ISON_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_NOT_ISON_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_NOT_ISON_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_NOT_ISON_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_ISON_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_ISON_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_ISON_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_ISON_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_ISON_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_ISON_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_ISON_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_ISON_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_NOT_ISON_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_NOT_ISON_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_NOT_ISON_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_NOT_ISON_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_NOT_ISON_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_NOT_ISON_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_NOT_ISON_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_NOT_ISON_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_ISON_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_ISON_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_ISON_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_ISON_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_ISON_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_ISON_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_ISON_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_ISON_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      // hold D-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_ISON_AND_NOT_SE_AND_NOT_SI === 1'b1),
      negedge D &&& (ENABLE_NOT_ISON_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold D-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_ISON_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge D &&& (ENABLE_NOT_ISON_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup D-HL CK-LH
      $setup(negedge D &&& (ENABLE_NOT_ISON_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_ISON_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup D-LH CK-LH
      $setup(posedge D &&& (ENABLE_NOT_ISON_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_ISON_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold D-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_ISON_AND_NOT_SE_AND_SI === 1'b1),
      negedge D &&& (ENABLE_NOT_ISON_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // hold D-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_ISON_AND_NOT_SE_AND_SI === 1'b1),
      posedge D &&& (ENABLE_NOT_ISON_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // setup D-HL CK-LH
      $setup(negedge D &&& (ENABLE_NOT_ISON_AND_NOT_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_ISON_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // setup D-LH CK-LH
      $setup(posedge D &&& (ENABLE_NOT_ISON_AND_NOT_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_ISON_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // hold D-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_ISON_AND_SE_AND_NOT_SI === 1'b1),
      negedge D &&& (ENABLE_NOT_ISON_AND_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold D-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_ISON_AND_SE_AND_NOT_SI === 1'b1),
      posedge D &&& (ENABLE_NOT_ISON_AND_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup D-HL CK-LH
      $setup(negedge D &&& (ENABLE_NOT_ISON_AND_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_ISON_AND_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup D-LH CK-LH
      $setup(posedge D &&& (ENABLE_NOT_ISON_AND_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_ISON_AND_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold D-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_ISON_AND_SE_AND_SI === 1'b1),
      negedge D &&& (ENABLE_NOT_ISON_AND_SE_AND_SI === 1'b1),1.0);
      
      // hold D-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_ISON_AND_SE_AND_SI === 1'b1),
      posedge D &&& (ENABLE_NOT_ISON_AND_SE_AND_SI === 1'b1),1.0);
      
      // setup D-HL CK-LH
      $setup(negedge D &&& (ENABLE_NOT_ISON_AND_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_ISON_AND_SE_AND_SI === 1'b1),1.0);
      
      // setup D-LH CK-LH
      $setup(posedge D &&& (ENABLE_NOT_ISON_AND_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_ISON_AND_SE_AND_SI === 1'b1),1.0);
      
      // hold D-HL CK-LH
      $hold(posedge CK &&& (ENABLE_ISON_AND_NOT_SE_AND_NOT_SI === 1'b1),
      negedge D &&& (ENABLE_ISON_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold D-LH CK-LH
      $hold(posedge CK &&& (ENABLE_ISON_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge D &&& (ENABLE_ISON_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup D-HL CK-LH
      $setup(negedge D &&& (ENABLE_ISON_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_ISON_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup D-LH CK-LH
      $setup(posedge D &&& (ENABLE_ISON_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_ISON_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold D-HL CK-LH
      $hold(posedge CK &&& (ENABLE_ISON_AND_NOT_SE_AND_SI === 1'b1),
      negedge D &&& (ENABLE_ISON_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // hold D-LH CK-LH
      $hold(posedge CK &&& (ENABLE_ISON_AND_NOT_SE_AND_SI === 1'b1),
      posedge D &&& (ENABLE_ISON_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // setup D-HL CK-LH
      $setup(negedge D &&& (ENABLE_ISON_AND_NOT_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_ISON_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // setup D-LH CK-LH
      $setup(posedge D &&& (ENABLE_ISON_AND_NOT_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_ISON_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // hold ISON-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D_AND_SE_AND_SI === 1'b1),
      negedge ISON &&& (ENABLE_NOT_D_AND_SE_AND_SI === 1'b1),1.0);
      
      // hold ISON-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D_AND_SE_AND_SI === 1'b1),
      posedge ISON &&& (ENABLE_NOT_D_AND_SE_AND_SI === 1'b1),1.0);
      
      // setup ISON-HL CK-LH
      $setup(negedge ISON &&& (ENABLE_NOT_D_AND_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_SE_AND_SI === 1'b1),1.0);
      
      // setup ISON-LH CK-LH
      $setup(posedge ISON &&& (ENABLE_NOT_D_AND_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_SE_AND_SI === 1'b1),1.0);
      
      // hold ISON-HL CK-LH
      $hold(posedge CK &&& (ENABLE_D_AND_SE_AND_NOT_SI === 1'b1),
      negedge ISON &&& (ENABLE_D_AND_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold ISON-LH CK-LH
      $hold(posedge CK &&& (ENABLE_D_AND_SE_AND_NOT_SI === 1'b1),
      posedge ISON &&& (ENABLE_D_AND_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup ISON-HL CK-LH
      $setup(negedge ISON &&& (ENABLE_D_AND_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_D_AND_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup ISON-LH CK-LH
      $setup(posedge ISON &&& (ENABLE_D_AND_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_D_AND_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold SE-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D_AND_ISON_AND_SI === 1'b1),
      negedge SE &&& (ENABLE_NOT_D_AND_ISON_AND_SI === 1'b1),1.0);
      
      // hold SE-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D_AND_ISON_AND_SI === 1'b1),
      posedge SE &&& (ENABLE_NOT_D_AND_ISON_AND_SI === 1'b1),1.0);
      
      // setup SE-HL CK-LH
      $setup(negedge SE &&& (ENABLE_NOT_D_AND_ISON_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_ISON_AND_SI === 1'b1),1.0);
      
      // setup SE-LH CK-LH
      $setup(posedge SE &&& (ENABLE_NOT_D_AND_ISON_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_ISON_AND_SI === 1'b1),1.0);
      
      // hold SE-HL CK-LH
      $hold(posedge CK &&& (ENABLE_D_AND_ISON_AND_NOT_SI === 1'b1),
      negedge SE &&& (ENABLE_D_AND_ISON_AND_NOT_SI === 1'b1),1.0);
      
      // hold SE-LH CK-LH
      $hold(posedge CK &&& (ENABLE_D_AND_ISON_AND_NOT_SI === 1'b1),
      posedge SE &&& (ENABLE_D_AND_ISON_AND_NOT_SI === 1'b1),1.0);
      
      // setup SE-HL CK-LH
      $setup(negedge SE &&& (ENABLE_D_AND_ISON_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_D_AND_ISON_AND_NOT_SI === 1'b1),1.0);
      
      // setup SE-LH CK-LH
      $setup(posedge SE &&& (ENABLE_D_AND_ISON_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_D_AND_ISON_AND_NOT_SI === 1'b1),1.0);
      
      // hold SI-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D_AND_ISON_AND_SE === 1'b1),
      negedge SI &&& (ENABLE_NOT_D_AND_ISON_AND_SE === 1'b1),1.0);
      
      // hold SI-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D_AND_ISON_AND_SE === 1'b1),
      posedge SI &&& (ENABLE_NOT_D_AND_ISON_AND_SE === 1'b1),1.0);
      
      // setup SI-HL CK-LH
      $setup(negedge SI &&& (ENABLE_NOT_D_AND_ISON_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_ISON_AND_SE === 1'b1),1.0);
      
      // setup SI-LH CK-LH
      $setup(posedge SI &&& (ENABLE_NOT_D_AND_ISON_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_NOT_D_AND_ISON_AND_SE === 1'b1),1.0);
      
      // hold SI-HL CK-LH
      $hold(posedge CK &&& (ENABLE_D_AND_ISON_AND_SE === 1'b1),
      negedge SI &&& (ENABLE_D_AND_ISON_AND_SE === 1'b1),1.0);
      
      // hold SI-LH CK-LH
      $hold(posedge CK &&& (ENABLE_D_AND_ISON_AND_SE === 1'b1),
      posedge SI &&& (ENABLE_D_AND_ISON_AND_SE === 1'b1),1.0);
      
      // setup SI-HL CK-LH
      $setup(negedge SI &&& (ENABLE_D_AND_ISON_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_D_AND_ISON_AND_SE === 1'b1),1.0);
      
      // setup SI-LH CK-LH
      $setup(posedge SI &&& (ENABLE_D_AND_ISON_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_D_AND_ISON_AND_SE === 1'b1),1.0);
      
      // mpw CK_lh 
      $width(posedge CK,1.0,0);
      
      // mpw CK_hl 
      $width(negedge CK,1.0,0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_ISOS0CL1_PECO_1( X, A, EN0 );
input A, EN0;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_ISOS0CL1_PECO_1_func SAEDRVT14_ISOS0CL1_PECO_1_behav_inst(.X(X),.A(A),.EN0(EN0));
`else
   SAEDRVT14_ISOS0CL1_PECO_1_func SAEDRVT14_ISOS0CL1_PECO_1_inst(.X(X),.A(A),.EN0(EN0));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A --> X
      (A => X) = (1.0,1.0);
      
      // comb arc EN0 --> X
      (EN0 => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_ISOS0CL1_PECO_2( X, A, EN0 );
input A, EN0;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_ISOS0CL1_PECO_2_func SAEDRVT14_ISOS0CL1_PECO_2_behav_inst(.X(X),.A(A),.EN0(EN0));
`else
   SAEDRVT14_ISOS0CL1_PECO_2_func SAEDRVT14_ISOS0CL1_PECO_2_inst(.X(X),.A(A),.EN0(EN0));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A --> X
      (A => X) = (1.0,1.0);
      
      // comb arc EN0 --> X
      (EN0 => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_ISOS0CL1_PECO_4( X, A, EN0 );
input A, EN0;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_ISOS0CL1_PECO_4_func SAEDRVT14_ISOS0CL1_PECO_4_behav_inst(.X(X),.A(A),.EN0(EN0));
`else
   SAEDRVT14_ISOS0CL1_PECO_4_func SAEDRVT14_ISOS0CL1_PECO_4_inst(.X(X),.A(A),.EN0(EN0));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A --> X
      (A => X) = (1.0,1.0);
      
      // comb arc EN0 --> X
      (EN0 => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_ISOS0CL1_PECO_8( X, A, EN0 );
input A, EN0;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_ISOS0CL1_PECO_8_func SAEDRVT14_ISOS0CL1_PECO_8_behav_inst(.X(X),.A(A),.EN0(EN0));
`else
   SAEDRVT14_ISOS0CL1_PECO_8_func SAEDRVT14_ISOS0CL1_PECO_8_inst(.X(X),.A(A),.EN0(EN0));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A --> X
      (A => X) = (1.0,1.0);
      
      // comb arc EN0 --> X
      (EN0 => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_ISOS0CL1_P_2( X, A, EN0 );
input A, EN0;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_ISOS0CL1_P_2_func SAEDRVT14_ISOS0CL1_P_2_behav_inst(.X(X),.A(A),.EN0(EN0));
`else
   SAEDRVT14_ISOS0CL1_P_2_func SAEDRVT14_ISOS0CL1_P_2_inst(.X(X),.A(A),.EN0(EN0));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A --> X
      (A => X) = (1.0,1.0);
      
      // comb arc EN0 --> X
      (EN0 => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_ISOS0CL1_P_8( X, A, EN0 );
input A, EN0;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_ISOS0CL1_P_8_func SAEDRVT14_ISOS0CL1_P_8_behav_inst(.X(X),.A(A),.EN0(EN0));
`else
   SAEDRVT14_ISOS0CL1_P_8_func SAEDRVT14_ISOS0CL1_P_8_inst(.X(X),.A(A),.EN0(EN0));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A --> X
      (A => X) = (1.0,1.0);
      
      // comb arc EN0 --> X
      (EN0 => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_ISOS1CL0_PECO_1( X, A, EN );
input A, EN;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_ISOS1CL0_PECO_1_func SAEDRVT14_ISOS1CL0_PECO_1_behav_inst(.X(X),.A(A),.EN(EN));
`else
   SAEDRVT14_ISOS1CL0_PECO_1_func SAEDRVT14_ISOS1CL0_PECO_1_inst(.X(X),.A(A),.EN(EN));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A --> X
      (A => X) = (1.0,1.0);
      
      // comb arc EN --> X
      (EN => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_ISOS1CL0_PECO_2( X, A, EN );
input A, EN;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_ISOS1CL0_PECO_2_func SAEDRVT14_ISOS1CL0_PECO_2_behav_inst(.X(X),.A(A),.EN(EN));
`else
   SAEDRVT14_ISOS1CL0_PECO_2_func SAEDRVT14_ISOS1CL0_PECO_2_inst(.X(X),.A(A),.EN(EN));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A --> X
      (A => X) = (1.0,1.0);
      
      // comb arc EN --> X
      (EN => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_ISOS1CL0_PECO_4( X, A, EN );
input A, EN;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_ISOS1CL0_PECO_4_func SAEDRVT14_ISOS1CL0_PECO_4_behav_inst(.X(X),.A(A),.EN(EN));
`else
   SAEDRVT14_ISOS1CL0_PECO_4_func SAEDRVT14_ISOS1CL0_PECO_4_inst(.X(X),.A(A),.EN(EN));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A --> X
      (A => X) = (1.0,1.0);
      
      // comb arc EN --> X
      (EN => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_ISOS1CL0_PECO_8( X, A, EN );
input A, EN;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_ISOS1CL0_PECO_8_func SAEDRVT14_ISOS1CL0_PECO_8_behav_inst(.X(X),.A(A),.EN(EN));
`else
   SAEDRVT14_ISOS1CL0_PECO_8_func SAEDRVT14_ISOS1CL0_PECO_8_inst(.X(X),.A(A),.EN(EN));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A --> X
      (A => X) = (1.0,1.0);
      
      // comb arc EN --> X
      (EN => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_ISOS1CL0_P_2( X, A, EN );
input A, EN;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_ISOS1CL0_P_2_func SAEDRVT14_ISOS1CL0_P_2_behav_inst(.X(X),.A(A),.EN(EN));
`else
   SAEDRVT14_ISOS1CL0_P_2_func SAEDRVT14_ISOS1CL0_P_2_inst(.X(X),.A(A),.EN(EN));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A --> X
      (A => X) = (1.0,1.0);
      
      // comb arc EN --> X
      (EN => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_ISOS1CL0_P_8( X, A, EN );
input A, EN;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_ISOS1CL0_P_8_func SAEDRVT14_ISOS1CL0_P_8_behav_inst(.X(X),.A(A),.EN(EN));
`else
   SAEDRVT14_ISOS1CL0_P_8_func SAEDRVT14_ISOS1CL0_P_8_inst(.X(X),.A(A),.EN(EN));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A --> X
      (A => X) = (1.0,1.0);
      
      // comb arc EN --> X
      (EN => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_OR2B_PMM_2( X, A, B );
input A, B;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_OR2B_PMM_2_func SAEDRVT14_OR2B_PMM_2_behav_inst(.X(X),.A(A),.B(B));
`else
   SAEDRVT14_OR2B_PMM_2_func SAEDRVT14_OR2B_PMM_2_inst(.X(X),.A(A),.B(B));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A --> X
      (A => X) = (1.0,1.0);
      
      // comb arc B --> X
      (B => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_OR2B_PMM_8( X, A, B );
input A, B;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_OR2B_PMM_8_func SAEDRVT14_OR2B_PMM_8_behav_inst(.X(X),.A(A),.B(B));
`else
   SAEDRVT14_OR2B_PMM_8_func SAEDRVT14_OR2B_PMM_8_inst(.X(X),.A(A),.B(B));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A --> X
      (A => X) = (1.0,1.0);
      
      // comb arc B --> X
      (B => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_OR2B_PSECO_1( X, A, B );
input A, B;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_OR2B_PSECO_1_func SAEDRVT14_OR2B_PSECO_1_behav_inst(.X(X),.A(A),.B(B));
`else
   SAEDRVT14_OR2B_PSECO_1_func SAEDRVT14_OR2B_PSECO_1_inst(.X(X),.A(A),.B(B));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A --> X
      (A => X) = (1.0,1.0);
      
      // comb arc B --> X
      (B => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_OR2B_PSECO_2( X, A, B );
input A, B;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_OR2B_PSECO_2_func SAEDRVT14_OR2B_PSECO_2_behav_inst(.X(X),.A(A),.B(B));
`else
   SAEDRVT14_OR2B_PSECO_2_func SAEDRVT14_OR2B_PSECO_2_inst(.X(X),.A(A),.B(B));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A --> X
      (A => X) = (1.0,1.0);
      
      // comb arc B --> X
      (B => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_OR2B_PSECO_4( X, A, B );
input A, B;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_OR2B_PSECO_4_func SAEDRVT14_OR2B_PSECO_4_behav_inst(.X(X),.A(A),.B(B));
`else
   SAEDRVT14_OR2B_PSECO_4_func SAEDRVT14_OR2B_PSECO_4_inst(.X(X),.A(A),.B(B));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A --> X
      (A => X) = (1.0,1.0);
      
      // comb arc B --> X
      (B => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_OR2B_PSECO_8( X, A, B );
input A, B;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_OR2B_PSECO_8_func SAEDRVT14_OR2B_PSECO_8_behav_inst(.X(X),.A(A),.B(B));
`else
   SAEDRVT14_OR2B_PSECO_8_func SAEDRVT14_OR2B_PSECO_8_inst(.X(X),.A(A),.B(B));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A --> X
      (A => X) = (1.0,1.0);
      
      // comb arc B --> X
      (B => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine
//****************************************************************************//
// Verilog models generated by SiliconSmart M-2017.03-SP3 build date: Aug 22, 2017 15:59:14. (SMSC-2) //
// Siliconsmart Path: /global/apps/siliconsmart_2017.03-SP3/linux64/bin/siliconsmart //
// Host Name: am04dwamd080.internal.synopsys.com, User Name: saroyan, PID: 24315  //
// Directory: /remote/saed/meruzha/CHAR/rvt/processes_std/tt0p8v25c/siliconsmart/simulation_tie_ao_tie_dcap //
//                                                                            //
// File generated on Tue Jan 02 16:45:06 AMT 2018. (SMSC-3)                   //
//****************************************************************************//






`celldefine
module SAEDRVT14_DCAP_PV1ECO_12(  );

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_DCAP_PV1ECO_12_func SAEDRVT14_DCAP_PV1ECO_12_behav_inst();
`else
   SAEDRVT14_DCAP_PV1ECO_12_func SAEDRVT14_DCAP_PV1ECO_12_inst();
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_DCAP_PV1ECO_15(  );

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_DCAP_PV1ECO_15_func SAEDRVT14_DCAP_PV1ECO_15_behav_inst();
`else
   SAEDRVT14_DCAP_PV1ECO_15_func SAEDRVT14_DCAP_PV1ECO_15_inst();
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_DCAP_PV1ECO_18(  );

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_DCAP_PV1ECO_18_func SAEDRVT14_DCAP_PV1ECO_18_behav_inst();
`else
   SAEDRVT14_DCAP_PV1ECO_18_func SAEDRVT14_DCAP_PV1ECO_18_inst();
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_DCAP_PV1ECO_6(  );

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_DCAP_PV1ECO_6_func SAEDRVT14_DCAP_PV1ECO_6_behav_inst();
`else
   SAEDRVT14_DCAP_PV1ECO_6_func SAEDRVT14_DCAP_PV1ECO_6_inst();
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_DCAP_PV1ECO_9(  );

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_DCAP_PV1ECO_9_func SAEDRVT14_DCAP_PV1ECO_9_behav_inst();
`else
   SAEDRVT14_DCAP_PV1ECO_9_func SAEDRVT14_DCAP_PV1ECO_9_inst();
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_DCAP_PV3_3(  );

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_DCAP_PV3_3_func SAEDRVT14_DCAP_PV3_3_behav_inst();
`else
   SAEDRVT14_DCAP_PV3_3_func SAEDRVT14_DCAP_PV3_3_inst();
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_TIE0_4( X );
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_TIE0_4_func SAEDRVT14_TIE0_4_behav_inst(.X(X));
`else
   SAEDRVT14_TIE0_4_func SAEDRVT14_TIE0_4_inst(.X(X));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_TIE0_PV1ECO_1( X );
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_TIE0_PV1ECO_1_func SAEDRVT14_TIE0_PV1ECO_1_behav_inst(.X(X));
`else
   SAEDRVT14_TIE0_PV1ECO_1_func SAEDRVT14_TIE0_PV1ECO_1_inst(.X(X));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_TIE0_V1_2( X );
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_TIE0_V1_2_func SAEDRVT14_TIE0_V1_2_behav_inst(.X(X));
`else
   SAEDRVT14_TIE0_V1_2_func SAEDRVT14_TIE0_V1_2_inst(.X(X));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_TIE1_4( X );
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_TIE1_4_func SAEDRVT14_TIE1_4_behav_inst(.X(X));
`else
   SAEDRVT14_TIE1_4_func SAEDRVT14_TIE1_4_inst(.X(X));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_TIE1_PV1ECO_1( X );
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_TIE1_PV1ECO_1_func SAEDRVT14_TIE1_PV1ECO_1_behav_inst(.X(X));
`else
   SAEDRVT14_TIE1_PV1ECO_1_func SAEDRVT14_TIE1_PV1ECO_1_inst(.X(X));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_TIE1_V1ECO_1( X );
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_TIE1_V1ECO_1_func SAEDRVT14_TIE1_V1ECO_1_behav_inst(.X(X));
`else
   SAEDRVT14_TIE1_V1ECO_1_func SAEDRVT14_TIE1_V1ECO_1_inst(.X(X));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_TIE1_V1_2( X );
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_TIE1_V1_2_func SAEDRVT14_TIE1_V1_2_behav_inst(.X(X));
`else
   SAEDRVT14_TIE1_V1_2_func SAEDRVT14_TIE1_V1_2_inst(.X(X));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_TIEDIN_4( X );
input X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_TIEDIN_4_func SAEDRVT14_TIEDIN_4_behav_inst(.X(X));
`else
   SAEDRVT14_TIEDIN_4_func SAEDRVT14_TIEDIN_4_inst(.X(X));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_TIEDIN_PV1ECO_6( X );
input X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_TIEDIN_PV1ECO_6_func SAEDRVT14_TIEDIN_PV1ECO_6_behav_inst(.X(X));
`else
   SAEDRVT14_TIEDIN_PV1ECO_6_func SAEDRVT14_TIEDIN_PV1ECO_6_inst(.X(X));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_TIEDIN_V1ECO_6( X );
input X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_TIEDIN_V1ECO_6_func SAEDRVT14_TIEDIN_V1ECO_6_behav_inst(.X(X));
`else
   SAEDRVT14_TIEDIN_V1ECO_6_func SAEDRVT14_TIEDIN_V1ECO_6_inst(.X(X));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine
//****************************************************************************//
// Verilog models generated by SiliconSmart M-2017.03-SP3 build date: Aug 22, 2017 15:59:14. (SMSC-2) //
// Siliconsmart Path: /global/apps/siliconsmart_2017.03-SP3/linux64/bin/siliconsmart //
// Host Name: am04dwamd076.internal.synopsys.com, User Name: lenag, PID: 4732  //
// Directory: /remote/saed/meruzha/CHAR/rvt/processes_std/tt0p8v25c/siliconsmart/simulation_additional //
//                                                                            //
// File generated on Mon Dec 11 12:49:10 AMT 2017. (SMSC-3)                   //
//****************************************************************************//






`celldefine
module SAEDRVT14_FDPCBQ_V3_4( Q, CK, D, RS );
input CK, D, RS;
output Q;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_FDPCBQ_V3_4_func SAEDRVT14_FDPCBQ_V3_4_behav_inst(.Q(Q),.CK(CK),.D(D),.RS(RS));
`else
   SAEDRVT14_FDPCBQ_V3_4_func SAEDRVT14_FDPCBQ_V3_4_inst(.Q(Q),.CK(CK),.D(D),.RS(RS));
   // spec_gates_begin
   not MGM_G0(MGM_W0,D);
   not MGM_G1(MGM_W1,RS);
   and MGM_G2(ENABLE_NOT_D_AND_NOT_RS,MGM_W1,MGM_W0);
   not MGM_G3(MGM_W2,D);
   and MGM_G4(ENABLE_NOT_D_AND_RS,RS,MGM_W2);
   not MGM_G5(MGM_W3,RS);
   and MGM_G6(ENABLE_D_AND_NOT_RS,MGM_W3,D);
   and MGM_G7(ENABLE_D_AND_RS,RS,D);
   buf MGM_G8(ENABLE_RS,RS);
   buf MGM_G9(ENABLE_D,D);
   // spec_gates_end
   // specify_block_begin
   specify

      if(D===1'b0 && RS===1'b0)
      // seq arc CK --> Q
      (posedge CK => (Q : D))  = (1.0,1.0);
      
      if(D===1'b1 && RS===1'b0)
      // seq arc CK --> Q
      (posedge CK => (Q : D))  = (1.0,1.0);
      
      if(RS===1'b1)
      // seq arc CK --> Q
      (posedge CK => (Q : D))  = (1.0,1.0);
      
      ifnone
      // seq arc CK --> Q
      (posedge CK => (Q : D))  = (1.0,1.0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_NOT_RS === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_NOT_RS === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D_AND_RS === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D_AND_RS === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_NOT_RS === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_NOT_RS === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D_AND_RS === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D_AND_RS === 1'b1)
      ,1.0,0);
      
      // hold D-HL CK-LH
      $hold(posedge CK &&& (ENABLE_RS === 1'b1),
      negedge D &&& (ENABLE_RS === 1'b1),1.0);
      
      // hold D-LH CK-LH
      $hold(posedge CK &&& (ENABLE_RS === 1'b1),
      posedge D &&& (ENABLE_RS === 1'b1),1.0);
      
      // setup D-HL CK-LH
      $setup(negedge D &&& (ENABLE_RS === 1'b1),
      posedge CK &&& (ENABLE_RS === 1'b1),1.0);
      
      // setup D-LH CK-LH
      $setup(posedge D &&& (ENABLE_RS === 1'b1),
      posedge CK &&& (ENABLE_RS === 1'b1),1.0);
      
      // hold RS-HL CK-LH
      $hold(posedge CK &&& (ENABLE_D === 1'b1),
      negedge RS &&& (ENABLE_D === 1'b1),1.0);
      
      // hold RS-LH CK-LH
      $hold(posedge CK &&& (ENABLE_D === 1'b1),
      posedge RS &&& (ENABLE_D === 1'b1),1.0);
      
      // setup RS-HL CK-LH
      $setup(negedge RS &&& (ENABLE_D === 1'b1),
      posedge CK &&& (ENABLE_D === 1'b1),1.0);
      
      // setup RS-LH CK-LH
      $setup(posedge RS &&& (ENABLE_D === 1'b1),
      posedge CK &&& (ENABLE_D === 1'b1),1.0);
      
      // mpw CK_lh 
      $width(posedge CK,1.0,0);
      
      // mpw CK_hl 
      $width(negedge CK,1.0,0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine
//****************************************************************************//
// Verilog models generated by SiliconSmart M-2017.03-SP3 build date: Aug 22, 2017 15:59:14. (SMSC-2) //
// Siliconsmart Path: /global/apps/siliconsmart_2017.03-SP3/linux64/bin/siliconsmart //
// Host Name: am04dwemt015.internal.synopsys.com, User Name: rostomya, PID: 24608  //
// Directory: /remote/saed/meruzha/CHAR/lvl/dlvl/rvt/processes/tt0p8v25c_i0p8v/siliconsmart/simulation_ao_dlvl //
//                                                                            //
// File generated on Tue Jan 02 17:17:34 AMT 2018. (SMSC-3)                   //
//****************************************************************************//






`celldefine
module SAEDRVT14_ELVLDNOR_V2_1( A, EN, X );
input A, EN;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_ELVLDNOR_V2_1_func SAEDRVT14_ELVLDNOR_V2_1_behav_inst(.A(A),.EN(EN),.X(X));
`else
   SAEDRVT14_ELVLDNOR_V2_1_func SAEDRVT14_ELVLDNOR_V2_1_inst(.A(A),.EN(EN),.X(X));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A --> X
      (A => X) = (1.0,1.0);
      
      // comb arc EN --> X
      (EN => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_ELVLDNOR_V2_10( A, EN, X );
input A, EN;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_ELVLDNOR_V2_10_func SAEDRVT14_ELVLDNOR_V2_10_behav_inst(.A(A),.EN(EN),.X(X));
`else
   SAEDRVT14_ELVLDNOR_V2_10_func SAEDRVT14_ELVLDNOR_V2_10_inst(.A(A),.EN(EN),.X(X));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A --> X
      (A => X) = (1.0,1.0);
      
      // comb arc EN --> X
      (EN => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_ELVLDNOR_V2_12( A, EN, X );
input A, EN;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_ELVLDNOR_V2_12_func SAEDRVT14_ELVLDNOR_V2_12_behav_inst(.A(A),.EN(EN),.X(X));
`else
   SAEDRVT14_ELVLDNOR_V2_12_func SAEDRVT14_ELVLDNOR_V2_12_inst(.A(A),.EN(EN),.X(X));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A --> X
      (A => X) = (1.0,1.0);
      
      // comb arc EN --> X
      (EN => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_ELVLDNOR_V2_2( A, EN, X );
input A, EN;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_ELVLDNOR_V2_2_func SAEDRVT14_ELVLDNOR_V2_2_behav_inst(.A(A),.EN(EN),.X(X));
`else
   SAEDRVT14_ELVLDNOR_V2_2_func SAEDRVT14_ELVLDNOR_V2_2_inst(.A(A),.EN(EN),.X(X));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A --> X
      (A => X) = (1.0,1.0);
      
      // comb arc EN --> X
      (EN => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_ELVLDNOR_V2_3( A, EN, X );
input A, EN;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_ELVLDNOR_V2_3_func SAEDRVT14_ELVLDNOR_V2_3_behav_inst(.A(A),.EN(EN),.X(X));
`else
   SAEDRVT14_ELVLDNOR_V2_3_func SAEDRVT14_ELVLDNOR_V2_3_inst(.A(A),.EN(EN),.X(X));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A --> X
      (A => X) = (1.0,1.0);
      
      // comb arc EN --> X
      (EN => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_ELVLDNOR_V2_4( A, EN, X );
input A, EN;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_ELVLDNOR_V2_4_func SAEDRVT14_ELVLDNOR_V2_4_behav_inst(.A(A),.EN(EN),.X(X));
`else
   SAEDRVT14_ELVLDNOR_V2_4_func SAEDRVT14_ELVLDNOR_V2_4_inst(.A(A),.EN(EN),.X(X));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A --> X
      (A => X) = (1.0,1.0);
      
      // comb arc EN --> X
      (EN => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_ELVLDNOR_V2_6( A, EN, X );
input A, EN;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_ELVLDNOR_V2_6_func SAEDRVT14_ELVLDNOR_V2_6_behav_inst(.A(A),.EN(EN),.X(X));
`else
   SAEDRVT14_ELVLDNOR_V2_6_func SAEDRVT14_ELVLDNOR_V2_6_inst(.A(A),.EN(EN),.X(X));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A --> X
      (A => X) = (1.0,1.0);
      
      // comb arc EN --> X
      (EN => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_ELVLDNOR_V2_8( A, EN, X );
input A, EN;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_ELVLDNOR_V2_8_func SAEDRVT14_ELVLDNOR_V2_8_behav_inst(.A(A),.EN(EN),.X(X));
`else
   SAEDRVT14_ELVLDNOR_V2_8_func SAEDRVT14_ELVLDNOR_V2_8_inst(.A(A),.EN(EN),.X(X));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A --> X
      (A => X) = (1.0,1.0);
      
      // comb arc EN --> X
      (EN => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine
//****************************************************************************//
// Verilog models generated by SiliconSmart M-2017.03-SP3 build date: Aug 22, 2017 15:59:14. (SMSC-2) //
// Siliconsmart Path: /global/apps/siliconsmart_2017.03-SP3/linux64/bin/siliconsmart //
// Host Name: am04dwamd076.internal.synopsys.com, User Name: baskovch, PID: 25338  //
// Directory: /remote/saed/meruzha/CHAR/lvl/dlvl/rvt/processes/tt0p8v25c_i0p8v/siliconsmart/simulation_dlvl //
//                                                                            //
// File generated on Sat Nov 04 19:11:48 AMT 2017. (SMSC-3)                   //
//****************************************************************************//






`celldefine
module SAEDRVT14_LVLDBUFE0_IY2V1_1( X, A, EN );
input A, EN;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_LVLDBUFE0_IY2V1_1_func SAEDRVT14_LVLDBUFE0_IY2V1_1_behav_inst(.X(X),.A(A),.EN(EN));
`else
   SAEDRVT14_LVLDBUFE0_IY2V1_1_func SAEDRVT14_LVLDBUFE0_IY2V1_1_inst(.X(X),.A(A),.EN(EN));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A --> X
      (A => X) = (1.0,1.0);
      
      // comb arc EN --> X
      (EN => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_LVLDBUFE0_IY2V1_10( X, A, EN );
input A, EN;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_LVLDBUFE0_IY2V1_10_func SAEDRVT14_LVLDBUFE0_IY2V1_10_behav_inst(.X(X),.A(A),.EN(EN));
`else
   SAEDRVT14_LVLDBUFE0_IY2V1_10_func SAEDRVT14_LVLDBUFE0_IY2V1_10_inst(.X(X),.A(A),.EN(EN));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A --> X
      (A => X) = (1.0,1.0);
      
      // comb arc EN --> X
      (EN => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_LVLDBUFE0_IY2V1_12( X, A, EN );
input A, EN;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_LVLDBUFE0_IY2V1_12_func SAEDRVT14_LVLDBUFE0_IY2V1_12_behav_inst(.X(X),.A(A),.EN(EN));
`else
   SAEDRVT14_LVLDBUFE0_IY2V1_12_func SAEDRVT14_LVLDBUFE0_IY2V1_12_inst(.X(X),.A(A),.EN(EN));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A --> X
      (A => X) = (1.0,1.0);
      
      // comb arc EN --> X
      (EN => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_LVLDBUFE0_IY2V1_2( X, A, EN );
input A, EN;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_LVLDBUFE0_IY2V1_2_func SAEDRVT14_LVLDBUFE0_IY2V1_2_behav_inst(.X(X),.A(A),.EN(EN));
`else
   SAEDRVT14_LVLDBUFE0_IY2V1_2_func SAEDRVT14_LVLDBUFE0_IY2V1_2_inst(.X(X),.A(A),.EN(EN));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A --> X
      (A => X) = (1.0,1.0);
      
      // comb arc EN --> X
      (EN => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_LVLDBUFE0_IY2V1_3( X, A, EN );
input A, EN;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_LVLDBUFE0_IY2V1_3_func SAEDRVT14_LVLDBUFE0_IY2V1_3_behav_inst(.X(X),.A(A),.EN(EN));
`else
   SAEDRVT14_LVLDBUFE0_IY2V1_3_func SAEDRVT14_LVLDBUFE0_IY2V1_3_inst(.X(X),.A(A),.EN(EN));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A --> X
      (A => X) = (1.0,1.0);
      
      // comb arc EN --> X
      (EN => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_LVLDBUFE0_IY2V1_4( X, A, EN );
input A, EN;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_LVLDBUFE0_IY2V1_4_func SAEDRVT14_LVLDBUFE0_IY2V1_4_behav_inst(.X(X),.A(A),.EN(EN));
`else
   SAEDRVT14_LVLDBUFE0_IY2V1_4_func SAEDRVT14_LVLDBUFE0_IY2V1_4_inst(.X(X),.A(A),.EN(EN));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A --> X
      (A => X) = (1.0,1.0);
      
      // comb arc EN --> X
      (EN => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_LVLDBUFE0_IY2V1_6( X, A, EN );
input A, EN;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_LVLDBUFE0_IY2V1_6_func SAEDRVT14_LVLDBUFE0_IY2V1_6_behav_inst(.X(X),.A(A),.EN(EN));
`else
   SAEDRVT14_LVLDBUFE0_IY2V1_6_func SAEDRVT14_LVLDBUFE0_IY2V1_6_inst(.X(X),.A(A),.EN(EN));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A --> X
      (A => X) = (1.0,1.0);
      
      // comb arc EN --> X
      (EN => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_LVLDBUFE0_IY2V1_8( X, A, EN );
input A, EN;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_LVLDBUFE0_IY2V1_8_func SAEDRVT14_LVLDBUFE0_IY2V1_8_behav_inst(.X(X),.A(A),.EN(EN));
`else
   SAEDRVT14_LVLDBUFE0_IY2V1_8_func SAEDRVT14_LVLDBUFE0_IY2V1_8_inst(.X(X),.A(A),.EN(EN));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A --> X
      (A => X) = (1.0,1.0);
      
      // comb arc EN --> X
      (EN => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_LVLDBUFE0_IY2_1( X, A, EN );
input A, EN;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_LVLDBUFE0_IY2_1_func SAEDRVT14_LVLDBUFE0_IY2_1_behav_inst(.X(X),.A(A),.EN(EN));
`else
   SAEDRVT14_LVLDBUFE0_IY2_1_func SAEDRVT14_LVLDBUFE0_IY2_1_inst(.X(X),.A(A),.EN(EN));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A --> X
      (A => X) = (1.0,1.0);
      
      // comb arc EN --> X
      (EN => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_LVLDBUFE0_IY2_10( X, A, EN );
input A, EN;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_LVLDBUFE0_IY2_10_func SAEDRVT14_LVLDBUFE0_IY2_10_behav_inst(.X(X),.A(A),.EN(EN));
`else
   SAEDRVT14_LVLDBUFE0_IY2_10_func SAEDRVT14_LVLDBUFE0_IY2_10_inst(.X(X),.A(A),.EN(EN));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A --> X
      (A => X) = (1.0,1.0);
      
      // comb arc EN --> X
      (EN => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_LVLDBUFE0_IY2_12( X, A, EN );
input A, EN;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_LVLDBUFE0_IY2_12_func SAEDRVT14_LVLDBUFE0_IY2_12_behav_inst(.X(X),.A(A),.EN(EN));
`else
   SAEDRVT14_LVLDBUFE0_IY2_12_func SAEDRVT14_LVLDBUFE0_IY2_12_inst(.X(X),.A(A),.EN(EN));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A --> X
      (A => X) = (1.0,1.0);
      
      // comb arc EN --> X
      (EN => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_LVLDBUFE0_IY2_2( X, A, EN );
input A, EN;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_LVLDBUFE0_IY2_2_func SAEDRVT14_LVLDBUFE0_IY2_2_behav_inst(.X(X),.A(A),.EN(EN));
`else
   SAEDRVT14_LVLDBUFE0_IY2_2_func SAEDRVT14_LVLDBUFE0_IY2_2_inst(.X(X),.A(A),.EN(EN));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A --> X
      (A => X) = (1.0,1.0);
      
      // comb arc EN --> X
      (EN => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_LVLDBUFE0_IY2_3( X, A, EN );
input A, EN;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_LVLDBUFE0_IY2_3_func SAEDRVT14_LVLDBUFE0_IY2_3_behav_inst(.X(X),.A(A),.EN(EN));
`else
   SAEDRVT14_LVLDBUFE0_IY2_3_func SAEDRVT14_LVLDBUFE0_IY2_3_inst(.X(X),.A(A),.EN(EN));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A --> X
      (A => X) = (1.0,1.0);
      
      // comb arc EN --> X
      (EN => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_LVLDBUFE0_IY2_4( X, A, EN );
input A, EN;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_LVLDBUFE0_IY2_4_func SAEDRVT14_LVLDBUFE0_IY2_4_behav_inst(.X(X),.A(A),.EN(EN));
`else
   SAEDRVT14_LVLDBUFE0_IY2_4_func SAEDRVT14_LVLDBUFE0_IY2_4_inst(.X(X),.A(A),.EN(EN));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A --> X
      (A => X) = (1.0,1.0);
      
      // comb arc EN --> X
      (EN => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_LVLDBUFE0_IY2_6( X, A, EN );
input A, EN;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_LVLDBUFE0_IY2_6_func SAEDRVT14_LVLDBUFE0_IY2_6_behav_inst(.X(X),.A(A),.EN(EN));
`else
   SAEDRVT14_LVLDBUFE0_IY2_6_func SAEDRVT14_LVLDBUFE0_IY2_6_inst(.X(X),.A(A),.EN(EN));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A --> X
      (A => X) = (1.0,1.0);
      
      // comb arc EN --> X
      (EN => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_LVLDBUFE1_IY2V1_1( X, A, EN );
input A, EN;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_LVLDBUFE1_IY2V1_1_func SAEDRVT14_LVLDBUFE1_IY2V1_1_behav_inst(.X(X),.A(A),.EN(EN));
`else
   SAEDRVT14_LVLDBUFE1_IY2V1_1_func SAEDRVT14_LVLDBUFE1_IY2V1_1_inst(.X(X),.A(A),.EN(EN));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A --> X
      (A => X) = (1.0,1.0);
      
      // comb arc EN --> X
      (EN => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_LVLDBUFE1_IY2V1_10( X, A, EN );
input A, EN;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_LVLDBUFE1_IY2V1_10_func SAEDRVT14_LVLDBUFE1_IY2V1_10_behav_inst(.X(X),.A(A),.EN(EN));
`else
   SAEDRVT14_LVLDBUFE1_IY2V1_10_func SAEDRVT14_LVLDBUFE1_IY2V1_10_inst(.X(X),.A(A),.EN(EN));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A --> X
      (A => X) = (1.0,1.0);
      
      // comb arc EN --> X
      (EN => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_LVLDBUFE1_IY2V1_12( X, A, EN );
input A, EN;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_LVLDBUFE1_IY2V1_12_func SAEDRVT14_LVLDBUFE1_IY2V1_12_behav_inst(.X(X),.A(A),.EN(EN));
`else
   SAEDRVT14_LVLDBUFE1_IY2V1_12_func SAEDRVT14_LVLDBUFE1_IY2V1_12_inst(.X(X),.A(A),.EN(EN));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A --> X
      (A => X) = (1.0,1.0);
      
      // comb arc EN --> X
      (EN => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_LVLDBUFE1_IY2V1_2( X, A, EN );
input A, EN;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_LVLDBUFE1_IY2V1_2_func SAEDRVT14_LVLDBUFE1_IY2V1_2_behav_inst(.X(X),.A(A),.EN(EN));
`else
   SAEDRVT14_LVLDBUFE1_IY2V1_2_func SAEDRVT14_LVLDBUFE1_IY2V1_2_inst(.X(X),.A(A),.EN(EN));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A --> X
      (A => X) = (1.0,1.0);
      
      // comb arc EN --> X
      (EN => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_LVLDBUFE1_IY2V1_3( X, A, EN );
input A, EN;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_LVLDBUFE1_IY2V1_3_func SAEDRVT14_LVLDBUFE1_IY2V1_3_behav_inst(.X(X),.A(A),.EN(EN));
`else
   SAEDRVT14_LVLDBUFE1_IY2V1_3_func SAEDRVT14_LVLDBUFE1_IY2V1_3_inst(.X(X),.A(A),.EN(EN));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A --> X
      (A => X) = (1.0,1.0);
      
      // comb arc EN --> X
      (EN => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_LVLDBUFE1_IY2V1_4( X, A, EN );
input A, EN;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_LVLDBUFE1_IY2V1_4_func SAEDRVT14_LVLDBUFE1_IY2V1_4_behav_inst(.X(X),.A(A),.EN(EN));
`else
   SAEDRVT14_LVLDBUFE1_IY2V1_4_func SAEDRVT14_LVLDBUFE1_IY2V1_4_inst(.X(X),.A(A),.EN(EN));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A --> X
      (A => X) = (1.0,1.0);
      
      // comb arc EN --> X
      (EN => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_LVLDBUFE1_IY2V1_6( X, A, EN );
input A, EN;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_LVLDBUFE1_IY2V1_6_func SAEDRVT14_LVLDBUFE1_IY2V1_6_behav_inst(.X(X),.A(A),.EN(EN));
`else
   SAEDRVT14_LVLDBUFE1_IY2V1_6_func SAEDRVT14_LVLDBUFE1_IY2V1_6_inst(.X(X),.A(A),.EN(EN));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A --> X
      (A => X) = (1.0,1.0);
      
      // comb arc EN --> X
      (EN => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_LVLDBUFE1_IY2V1_8( X, A, EN );
input A, EN;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_LVLDBUFE1_IY2V1_8_func SAEDRVT14_LVLDBUFE1_IY2V1_8_behav_inst(.X(X),.A(A),.EN(EN));
`else
   SAEDRVT14_LVLDBUFE1_IY2V1_8_func SAEDRVT14_LVLDBUFE1_IY2V1_8_inst(.X(X),.A(A),.EN(EN));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A --> X
      (A => X) = (1.0,1.0);
      
      // comb arc EN --> X
      (EN => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_LVLDBUFE1_IY2_1( X, A, EN );
input A, EN;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_LVLDBUFE1_IY2_1_func SAEDRVT14_LVLDBUFE1_IY2_1_behav_inst(.X(X),.A(A),.EN(EN));
`else
   SAEDRVT14_LVLDBUFE1_IY2_1_func SAEDRVT14_LVLDBUFE1_IY2_1_inst(.X(X),.A(A),.EN(EN));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A --> X
      (A => X) = (1.0,1.0);
      
      // comb arc EN --> X
      (EN => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_LVLDBUFE1_IY2_10( X, A, EN );
input A, EN;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_LVLDBUFE1_IY2_10_func SAEDRVT14_LVLDBUFE1_IY2_10_behav_inst(.X(X),.A(A),.EN(EN));
`else
   SAEDRVT14_LVLDBUFE1_IY2_10_func SAEDRVT14_LVLDBUFE1_IY2_10_inst(.X(X),.A(A),.EN(EN));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A --> X
      (A => X) = (1.0,1.0);
      
      // comb arc EN --> X
      (EN => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_LVLDBUFE1_IY2_12( X, A, EN );
input A, EN;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_LVLDBUFE1_IY2_12_func SAEDRVT14_LVLDBUFE1_IY2_12_behav_inst(.X(X),.A(A),.EN(EN));
`else
   SAEDRVT14_LVLDBUFE1_IY2_12_func SAEDRVT14_LVLDBUFE1_IY2_12_inst(.X(X),.A(A),.EN(EN));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A --> X
      (A => X) = (1.0,1.0);
      
      // comb arc EN --> X
      (EN => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_LVLDBUFE1_IY2_2( X, A, EN );
input A, EN;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_LVLDBUFE1_IY2_2_func SAEDRVT14_LVLDBUFE1_IY2_2_behav_inst(.X(X),.A(A),.EN(EN));
`else
   SAEDRVT14_LVLDBUFE1_IY2_2_func SAEDRVT14_LVLDBUFE1_IY2_2_inst(.X(X),.A(A),.EN(EN));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A --> X
      (A => X) = (1.0,1.0);
      
      // comb arc EN --> X
      (EN => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_LVLDBUFE1_IY2_4( X, A, EN );
input A, EN;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_LVLDBUFE1_IY2_4_func SAEDRVT14_LVLDBUFE1_IY2_4_behav_inst(.X(X),.A(A),.EN(EN));
`else
   SAEDRVT14_LVLDBUFE1_IY2_4_func SAEDRVT14_LVLDBUFE1_IY2_4_inst(.X(X),.A(A),.EN(EN));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A --> X
      (A => X) = (1.0,1.0);
      
      // comb arc EN --> X
      (EN => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_LVLDBUFE1_IY2_6( X, A, EN );
input A, EN;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_LVLDBUFE1_IY2_6_func SAEDRVT14_LVLDBUFE1_IY2_6_behav_inst(.X(X),.A(A),.EN(EN));
`else
   SAEDRVT14_LVLDBUFE1_IY2_6_func SAEDRVT14_LVLDBUFE1_IY2_6_inst(.X(X),.A(A),.EN(EN));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A --> X
      (A => X) = (1.0,1.0);
      
      // comb arc EN --> X
      (EN => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_LVLDBUFE1_IY2_8( X, A, EN );
input A, EN;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_LVLDBUFE1_IY2_8_func SAEDRVT14_LVLDBUFE1_IY2_8_behav_inst(.X(X),.A(A),.EN(EN));
`else
   SAEDRVT14_LVLDBUFE1_IY2_8_func SAEDRVT14_LVLDBUFE1_IY2_8_inst(.X(X),.A(A),.EN(EN));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A --> X
      (A => X) = (1.0,1.0);
      
      // comb arc EN --> X
      (EN => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_LVLDBUF_IY2V1_1( X, A );
input A;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_LVLDBUF_IY2V1_1_func SAEDRVT14_LVLDBUF_IY2V1_1_behav_inst(.X(X),.A(A));
`else
   SAEDRVT14_LVLDBUF_IY2V1_1_func SAEDRVT14_LVLDBUF_IY2V1_1_inst(.X(X),.A(A));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A --> X
      (A => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_LVLDBUF_IY2V1_10( X, A );
input A;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_LVLDBUF_IY2V1_10_func SAEDRVT14_LVLDBUF_IY2V1_10_behav_inst(.X(X),.A(A));
`else
   SAEDRVT14_LVLDBUF_IY2V1_10_func SAEDRVT14_LVLDBUF_IY2V1_10_inst(.X(X),.A(A));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A --> X
      (A => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_LVLDBUF_IY2V1_12( X, A );
input A;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_LVLDBUF_IY2V1_12_func SAEDRVT14_LVLDBUF_IY2V1_12_behav_inst(.X(X),.A(A));
`else
   SAEDRVT14_LVLDBUF_IY2V1_12_func SAEDRVT14_LVLDBUF_IY2V1_12_inst(.X(X),.A(A));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A --> X
      (A => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_LVLDBUF_IY2V1_2( X, A );
input A;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_LVLDBUF_IY2V1_2_func SAEDRVT14_LVLDBUF_IY2V1_2_behav_inst(.X(X),.A(A));
`else
   SAEDRVT14_LVLDBUF_IY2V1_2_func SAEDRVT14_LVLDBUF_IY2V1_2_inst(.X(X),.A(A));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A --> X
      (A => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_LVLDBUF_IY2V1_3( X, A );
input A;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_LVLDBUF_IY2V1_3_func SAEDRVT14_LVLDBUF_IY2V1_3_behav_inst(.X(X),.A(A));
`else
   SAEDRVT14_LVLDBUF_IY2V1_3_func SAEDRVT14_LVLDBUF_IY2V1_3_inst(.X(X),.A(A));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A --> X
      (A => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_LVLDBUF_IY2V1_4( X, A );
input A;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_LVLDBUF_IY2V1_4_func SAEDRVT14_LVLDBUF_IY2V1_4_behav_inst(.X(X),.A(A));
`else
   SAEDRVT14_LVLDBUF_IY2V1_4_func SAEDRVT14_LVLDBUF_IY2V1_4_inst(.X(X),.A(A));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A --> X
      (A => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_LVLDBUF_IY2V1_6( X, A );
input A;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_LVLDBUF_IY2V1_6_func SAEDRVT14_LVLDBUF_IY2V1_6_behav_inst(.X(X),.A(A));
`else
   SAEDRVT14_LVLDBUF_IY2V1_6_func SAEDRVT14_LVLDBUF_IY2V1_6_inst(.X(X),.A(A));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A --> X
      (A => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_LVLDBUF_IY2V1_8( X, A );
input A;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_LVLDBUF_IY2V1_8_func SAEDRVT14_LVLDBUF_IY2V1_8_behav_inst(.X(X),.A(A));
`else
   SAEDRVT14_LVLDBUF_IY2V1_8_func SAEDRVT14_LVLDBUF_IY2V1_8_inst(.X(X),.A(A));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A --> X
      (A => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine
//****************************************************************************//
// Verilog models generated by SiliconSmart M-2017.03-SP3 build date: Aug 22, 2017 15:59:14. (SMSC-2) //
// Siliconsmart Path: /global/apps/siliconsmart_2017.03-SP3/linux64/bin/siliconsmart //
// Host Name: am04dwamd078.internal.synopsys.com, User Name: saroyan, PID: 6136  //
// Directory: /remote/saed/meruzha/CHAR/lvl/ulvl/rvt/processes/tt0p8v25c_i0p8v/siliconsmart/simulation_ao_ulvl //
//                                                                            //
// File generated on Thu Jan 04 13:29:15 AMT 2018. (SMSC-3)                   //
//****************************************************************************//






`celldefine
module SAEDRVT14_AOLVLUBUFE0_IY2V1_1( X, A, EN );
input A, EN;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_AOLVLUBUFE0_IY2V1_1_func SAEDRVT14_AOLVLUBUFE0_IY2V1_1_behav_inst(.X(X),.A(A),.EN(EN));
`else
   SAEDRVT14_AOLVLUBUFE0_IY2V1_1_func SAEDRVT14_AOLVLUBUFE0_IY2V1_1_inst(.X(X),.A(A),.EN(EN));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A --> X
      (A => X) = (1.0,1.0);
      
      // comb arc EN --> X
      (EN => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_AOLVLUBUFE0_IY2V1_10( X, A, EN );
input A, EN;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_AOLVLUBUFE0_IY2V1_10_func SAEDRVT14_AOLVLUBUFE0_IY2V1_10_behav_inst(.X(X),.A(A),.EN(EN));
`else
   SAEDRVT14_AOLVLUBUFE0_IY2V1_10_func SAEDRVT14_AOLVLUBUFE0_IY2V1_10_inst(.X(X),.A(A),.EN(EN));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A --> X
      (A => X) = (1.0,1.0);
      
      // comb arc EN --> X
      (EN => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_AOLVLUBUFE0_IY2V1_12( X, A, EN );
input A, EN;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_AOLVLUBUFE0_IY2V1_12_func SAEDRVT14_AOLVLUBUFE0_IY2V1_12_behav_inst(.X(X),.A(A),.EN(EN));
`else
   SAEDRVT14_AOLVLUBUFE0_IY2V1_12_func SAEDRVT14_AOLVLUBUFE0_IY2V1_12_inst(.X(X),.A(A),.EN(EN));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A --> X
      (A => X) = (1.0,1.0);
      
      // comb arc EN --> X
      (EN => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_AOLVLUBUFE0_IY2V1_2( X, A, EN );
input A, EN;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_AOLVLUBUFE0_IY2V1_2_func SAEDRVT14_AOLVLUBUFE0_IY2V1_2_behav_inst(.X(X),.A(A),.EN(EN));
`else
   SAEDRVT14_AOLVLUBUFE0_IY2V1_2_func SAEDRVT14_AOLVLUBUFE0_IY2V1_2_inst(.X(X),.A(A),.EN(EN));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A --> X
      (A => X) = (1.0,1.0);
      
      // comb arc EN --> X
      (EN => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_AOLVLUBUFE0_IY2V1_3( X, A, EN );
input A, EN;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_AOLVLUBUFE0_IY2V1_3_func SAEDRVT14_AOLVLUBUFE0_IY2V1_3_behav_inst(.X(X),.A(A),.EN(EN));
`else
   SAEDRVT14_AOLVLUBUFE0_IY2V1_3_func SAEDRVT14_AOLVLUBUFE0_IY2V1_3_inst(.X(X),.A(A),.EN(EN));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A --> X
      (A => X) = (1.0,1.0);
      
      // comb arc EN --> X
      (EN => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_AOLVLUBUFE0_IY2V1_4( X, A, EN );
input A, EN;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_AOLVLUBUFE0_IY2V1_4_func SAEDRVT14_AOLVLUBUFE0_IY2V1_4_behav_inst(.X(X),.A(A),.EN(EN));
`else
   SAEDRVT14_AOLVLUBUFE0_IY2V1_4_func SAEDRVT14_AOLVLUBUFE0_IY2V1_4_inst(.X(X),.A(A),.EN(EN));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A --> X
      (A => X) = (1.0,1.0);
      
      // comb arc EN --> X
      (EN => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_AOLVLUBUFE0_IY2V1_6( X, A, EN );
input A, EN;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_AOLVLUBUFE0_IY2V1_6_func SAEDRVT14_AOLVLUBUFE0_IY2V1_6_behav_inst(.X(X),.A(A),.EN(EN));
`else
   SAEDRVT14_AOLVLUBUFE0_IY2V1_6_func SAEDRVT14_AOLVLUBUFE0_IY2V1_6_inst(.X(X),.A(A),.EN(EN));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A --> X
      (A => X) = (1.0,1.0);
      
      // comb arc EN --> X
      (EN => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_AOLVLUBUFE0_IY2V1_8( X, A, EN );
input A, EN;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_AOLVLUBUFE0_IY2V1_8_func SAEDRVT14_AOLVLUBUFE0_IY2V1_8_behav_inst(.X(X),.A(A),.EN(EN));
`else
   SAEDRVT14_AOLVLUBUFE0_IY2V1_8_func SAEDRVT14_AOLVLUBUFE0_IY2V1_8_inst(.X(X),.A(A),.EN(EN));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A --> X
      (A => X) = (1.0,1.0);
      
      // comb arc EN --> X
      (EN => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_AOLVLUBUFE1_IY2V1_1( X, A, EN );
input A, EN;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_AOLVLUBUFE1_IY2V1_1_func SAEDRVT14_AOLVLUBUFE1_IY2V1_1_behav_inst(.X(X),.A(A),.EN(EN));
`else
   SAEDRVT14_AOLVLUBUFE1_IY2V1_1_func SAEDRVT14_AOLVLUBUFE1_IY2V1_1_inst(.X(X),.A(A),.EN(EN));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A --> X
      (A => X) = (1.0,1.0);
      
      // comb arc EN --> X
      (EN => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_AOLVLUBUFE1_IY2V1_10( X, A, EN );
input A, EN;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_AOLVLUBUFE1_IY2V1_10_func SAEDRVT14_AOLVLUBUFE1_IY2V1_10_behav_inst(.X(X),.A(A),.EN(EN));
`else
   SAEDRVT14_AOLVLUBUFE1_IY2V1_10_func SAEDRVT14_AOLVLUBUFE1_IY2V1_10_inst(.X(X),.A(A),.EN(EN));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A --> X
      (A => X) = (1.0,1.0);
      
      // comb arc EN --> X
      (EN => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_AOLVLUBUFE1_IY2V1_12( X, A, EN );
input A, EN;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_AOLVLUBUFE1_IY2V1_12_func SAEDRVT14_AOLVLUBUFE1_IY2V1_12_behav_inst(.X(X),.A(A),.EN(EN));
`else
   SAEDRVT14_AOLVLUBUFE1_IY2V1_12_func SAEDRVT14_AOLVLUBUFE1_IY2V1_12_inst(.X(X),.A(A),.EN(EN));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A --> X
      (A => X) = (1.0,1.0);
      
      // comb arc EN --> X
      (EN => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_AOLVLUBUFE1_IY2V1_2( X, A, EN );
input A, EN;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_AOLVLUBUFE1_IY2V1_2_func SAEDRVT14_AOLVLUBUFE1_IY2V1_2_behav_inst(.X(X),.A(A),.EN(EN));
`else
   SAEDRVT14_AOLVLUBUFE1_IY2V1_2_func SAEDRVT14_AOLVLUBUFE1_IY2V1_2_inst(.X(X),.A(A),.EN(EN));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A --> X
      (A => X) = (1.0,1.0);
      
      // comb arc EN --> X
      (EN => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_AOLVLUBUFE1_IY2V1_3( X, A, EN );
input A, EN;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_AOLVLUBUFE1_IY2V1_3_func SAEDRVT14_AOLVLUBUFE1_IY2V1_3_behav_inst(.X(X),.A(A),.EN(EN));
`else
   SAEDRVT14_AOLVLUBUFE1_IY2V1_3_func SAEDRVT14_AOLVLUBUFE1_IY2V1_3_inst(.X(X),.A(A),.EN(EN));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A --> X
      (A => X) = (1.0,1.0);
      
      // comb arc EN --> X
      (EN => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_AOLVLUBUFE1_IY2V1_4( X, A, EN );
input A, EN;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_AOLVLUBUFE1_IY2V1_4_func SAEDRVT14_AOLVLUBUFE1_IY2V1_4_behav_inst(.X(X),.A(A),.EN(EN));
`else
   SAEDRVT14_AOLVLUBUFE1_IY2V1_4_func SAEDRVT14_AOLVLUBUFE1_IY2V1_4_inst(.X(X),.A(A),.EN(EN));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A --> X
      (A => X) = (1.0,1.0);
      
      // comb arc EN --> X
      (EN => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_AOLVLUBUFE1_IY2V1_6( X, A, EN );
input A, EN;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_AOLVLUBUFE1_IY2V1_6_func SAEDRVT14_AOLVLUBUFE1_IY2V1_6_behav_inst(.X(X),.A(A),.EN(EN));
`else
   SAEDRVT14_AOLVLUBUFE1_IY2V1_6_func SAEDRVT14_AOLVLUBUFE1_IY2V1_6_inst(.X(X),.A(A),.EN(EN));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A --> X
      (A => X) = (1.0,1.0);
      
      // comb arc EN --> X
      (EN => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_AOLVLUBUFE1_IY2V1_8( X, A, EN );
input A, EN;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_AOLVLUBUFE1_IY2V1_8_func SAEDRVT14_AOLVLUBUFE1_IY2V1_8_behav_inst(.X(X),.A(A),.EN(EN));
`else
   SAEDRVT14_AOLVLUBUFE1_IY2V1_8_func SAEDRVT14_AOLVLUBUFE1_IY2V1_8_inst(.X(X),.A(A),.EN(EN));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A --> X
      (A => X) = (1.0,1.0);
      
      // comb arc EN --> X
      (EN => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_AOLVLUBUF_IY2V1_1( X, A );
input A;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_AOLVLUBUF_IY2V1_1_func SAEDRVT14_AOLVLUBUF_IY2V1_1_behav_inst(.X(X),.A(A));
`else
   SAEDRVT14_AOLVLUBUF_IY2V1_1_func SAEDRVT14_AOLVLUBUF_IY2V1_1_inst(.X(X),.A(A));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A --> X
      (A => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_AOLVLUBUF_IY2V1_10( X, A );
input A;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_AOLVLUBUF_IY2V1_10_func SAEDRVT14_AOLVLUBUF_IY2V1_10_behav_inst(.X(X),.A(A));
`else
   SAEDRVT14_AOLVLUBUF_IY2V1_10_func SAEDRVT14_AOLVLUBUF_IY2V1_10_inst(.X(X),.A(A));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A --> X
      (A => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_AOLVLUBUF_IY2V1_12( X, A );
input A;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_AOLVLUBUF_IY2V1_12_func SAEDRVT14_AOLVLUBUF_IY2V1_12_behav_inst(.X(X),.A(A));
`else
   SAEDRVT14_AOLVLUBUF_IY2V1_12_func SAEDRVT14_AOLVLUBUF_IY2V1_12_inst(.X(X),.A(A));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A --> X
      (A => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_AOLVLUBUF_IY2V1_2( X, A );
input A;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_AOLVLUBUF_IY2V1_2_func SAEDRVT14_AOLVLUBUF_IY2V1_2_behav_inst(.X(X),.A(A));
`else
   SAEDRVT14_AOLVLUBUF_IY2V1_2_func SAEDRVT14_AOLVLUBUF_IY2V1_2_inst(.X(X),.A(A));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A --> X
      (A => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_AOLVLUBUF_IY2V1_3( X, A );
input A;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_AOLVLUBUF_IY2V1_3_func SAEDRVT14_AOLVLUBUF_IY2V1_3_behav_inst(.X(X),.A(A));
`else
   SAEDRVT14_AOLVLUBUF_IY2V1_3_func SAEDRVT14_AOLVLUBUF_IY2V1_3_inst(.X(X),.A(A));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A --> X
      (A => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_AOLVLUBUF_IY2V1_4( X, A );
input A;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_AOLVLUBUF_IY2V1_4_func SAEDRVT14_AOLVLUBUF_IY2V1_4_behav_inst(.X(X),.A(A));
`else
   SAEDRVT14_AOLVLUBUF_IY2V1_4_func SAEDRVT14_AOLVLUBUF_IY2V1_4_inst(.X(X),.A(A));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A --> X
      (A => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_AOLVLUBUF_IY2V1_6( X, A );
input A;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_AOLVLUBUF_IY2V1_6_func SAEDRVT14_AOLVLUBUF_IY2V1_6_behav_inst(.X(X),.A(A));
`else
   SAEDRVT14_AOLVLUBUF_IY2V1_6_func SAEDRVT14_AOLVLUBUF_IY2V1_6_inst(.X(X),.A(A));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A --> X
      (A => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_AOLVLUBUF_IY2V1_8( X, A );
input A;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_AOLVLUBUF_IY2V1_8_func SAEDRVT14_AOLVLUBUF_IY2V1_8_behav_inst(.X(X),.A(A));
`else
   SAEDRVT14_AOLVLUBUF_IY2V1_8_func SAEDRVT14_AOLVLUBUF_IY2V1_8_inst(.X(X),.A(A));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A --> X
      (A => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_ELVLUNOR_V2_1( A, EN, X );
input A, EN;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_ELVLUNOR_V2_1_func SAEDRVT14_ELVLUNOR_V2_1_behav_inst(.A(A),.EN(EN),.X(X));
`else
   SAEDRVT14_ELVLUNOR_V2_1_func SAEDRVT14_ELVLUNOR_V2_1_inst(.A(A),.EN(EN),.X(X));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A --> X
      (A => X) = (1.0,1.0);
      
      // comb arc EN --> X
      (EN => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_ELVLUNOR_V2_10( A, EN, X );
input A, EN;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_ELVLUNOR_V2_10_func SAEDRVT14_ELVLUNOR_V2_10_behav_inst(.A(A),.EN(EN),.X(X));
`else
   SAEDRVT14_ELVLUNOR_V2_10_func SAEDRVT14_ELVLUNOR_V2_10_inst(.A(A),.EN(EN),.X(X));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A --> X
      (A => X) = (1.0,1.0);
      
      // comb arc EN --> X
      (EN => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_ELVLUNOR_V2_12( A, EN, X );
input A, EN;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_ELVLUNOR_V2_12_func SAEDRVT14_ELVLUNOR_V2_12_behav_inst(.A(A),.EN(EN),.X(X));
`else
   SAEDRVT14_ELVLUNOR_V2_12_func SAEDRVT14_ELVLUNOR_V2_12_inst(.A(A),.EN(EN),.X(X));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A --> X
      (A => X) = (1.0,1.0);
      
      // comb arc EN --> X
      (EN => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_ELVLUNOR_V2_2( A, EN, X );
input A, EN;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_ELVLUNOR_V2_2_func SAEDRVT14_ELVLUNOR_V2_2_behav_inst(.A(A),.EN(EN),.X(X));
`else
   SAEDRVT14_ELVLUNOR_V2_2_func SAEDRVT14_ELVLUNOR_V2_2_inst(.A(A),.EN(EN),.X(X));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A --> X
      (A => X) = (1.0,1.0);
      
      // comb arc EN --> X
      (EN => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_ELVLUNOR_V2_3( A, EN, X );
input A, EN;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_ELVLUNOR_V2_3_func SAEDRVT14_ELVLUNOR_V2_3_behav_inst(.A(A),.EN(EN),.X(X));
`else
   SAEDRVT14_ELVLUNOR_V2_3_func SAEDRVT14_ELVLUNOR_V2_3_inst(.A(A),.EN(EN),.X(X));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A --> X
      (A => X) = (1.0,1.0);
      
      // comb arc EN --> X
      (EN => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_ELVLUNOR_V2_4( A, EN, X );
input A, EN;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_ELVLUNOR_V2_4_func SAEDRVT14_ELVLUNOR_V2_4_behav_inst(.A(A),.EN(EN),.X(X));
`else
   SAEDRVT14_ELVLUNOR_V2_4_func SAEDRVT14_ELVLUNOR_V2_4_inst(.A(A),.EN(EN),.X(X));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A --> X
      (A => X) = (1.0,1.0);
      
      // comb arc EN --> X
      (EN => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_ELVLUNOR_V2_6( A, EN, X );
input A, EN;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_ELVLUNOR_V2_6_func SAEDRVT14_ELVLUNOR_V2_6_behav_inst(.A(A),.EN(EN),.X(X));
`else
   SAEDRVT14_ELVLUNOR_V2_6_func SAEDRVT14_ELVLUNOR_V2_6_inst(.A(A),.EN(EN),.X(X));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A --> X
      (A => X) = (1.0,1.0);
      
      // comb arc EN --> X
      (EN => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_ELVLUNOR_V2_8( A, EN, X );
input A, EN;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_ELVLUNOR_V2_8_func SAEDRVT14_ELVLUNOR_V2_8_behav_inst(.A(A),.EN(EN),.X(X));
`else
   SAEDRVT14_ELVLUNOR_V2_8_func SAEDRVT14_ELVLUNOR_V2_8_inst(.A(A),.EN(EN),.X(X));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A --> X
      (A => X) = (1.0,1.0);
      
      // comb arc EN --> X
      (EN => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_LVLUBUF4E0_IY2_2( EN, A1, A2, A3, A4, X1, X2, X3, X4 );
input A1, A2, A3, A4, EN;
output X1, X2, X3, X4;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_LVLUBUF4E0_IY2_2_func SAEDRVT14_LVLUBUF4E0_IY2_2_behav_inst(.EN(EN),.A1(A1),.A2(A2),.A3(A3),.A4(A4),.X1(X1),.X2(X2),.X3(X3),.X4(X4));
`else
   SAEDRVT14_LVLUBUF4E0_IY2_2_func SAEDRVT14_LVLUBUF4E0_IY2_2_inst(.EN(EN),.A1(A1),.A2(A2),.A3(A3),.A4(A4),.X1(X1),.X2(X2),.X3(X3),.X4(X4));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A1 --> X1
      (A1 => X1) = (1.0,1.0);
      
      // comb arc EN --> X1
      (EN => X1) = (1.0,1.0);
      
      // comb arc A2 --> X2
      (A2 => X2) = (1.0,1.0);
      
      // comb arc EN --> X2
      (EN => X2) = (1.0,1.0);
      
      // comb arc A3 --> X3
      (A3 => X3) = (1.0,1.0);
      
      // comb arc EN --> X3
      (EN => X3) = (1.0,1.0);
      
      // comb arc A4 --> X4
      (A4 => X4) = (1.0,1.0);
      
      // comb arc EN --> X4
      (EN => X4) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_LVLUBUF4E0_IY2_4( EN, A1, A2, A3, A4, X1, X2, X3, X4 );
input A1, A2, A3, A4, EN;
output X1, X2, X3, X4;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_LVLUBUF4E0_IY2_4_func SAEDRVT14_LVLUBUF4E0_IY2_4_behav_inst(.EN(EN),.A1(A1),.A2(A2),.A3(A3),.A4(A4),.X1(X1),.X2(X2),.X3(X3),.X4(X4));
`else
   SAEDRVT14_LVLUBUF4E0_IY2_4_func SAEDRVT14_LVLUBUF4E0_IY2_4_inst(.EN(EN),.A1(A1),.A2(A2),.A3(A3),.A4(A4),.X1(X1),.X2(X2),.X3(X3),.X4(X4));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A1 --> X1
      (A1 => X1) = (1.0,1.0);
      
      // comb arc EN --> X1
      (EN => X1) = (1.0,1.0);
      
      // comb arc A2 --> X2
      (A2 => X2) = (1.0,1.0);
      
      // comb arc EN --> X2
      (EN => X2) = (1.0,1.0);
      
      // comb arc A3 --> X3
      (A3 => X3) = (1.0,1.0);
      
      // comb arc EN --> X3
      (EN => X3) = (1.0,1.0);
      
      // comb arc A4 --> X4
      (A4 => X4) = (1.0,1.0);
      
      // comb arc EN --> X4
      (EN => X4) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_LVLUBUF4E0_IY2_8( EN, A1, A2, A3, A4, X1, X2, X3, X4 );
input A1, A2, A3, A4, EN;
output X1, X2, X3, X4;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_LVLUBUF4E0_IY2_8_func SAEDRVT14_LVLUBUF4E0_IY2_8_behav_inst(.EN(EN),.A1(A1),.A2(A2),.A3(A3),.A4(A4),.X1(X1),.X2(X2),.X3(X3),.X4(X4));
`else
   SAEDRVT14_LVLUBUF4E0_IY2_8_func SAEDRVT14_LVLUBUF4E0_IY2_8_inst(.EN(EN),.A1(A1),.A2(A2),.A3(A3),.A4(A4),.X1(X1),.X2(X2),.X3(X3),.X4(X4));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A1 --> X1
      (A1 => X1) = (1.0,1.0);
      
      // comb arc EN --> X1
      (EN => X1) = (1.0,1.0);
      
      // comb arc A2 --> X2
      (A2 => X2) = (1.0,1.0);
      
      // comb arc EN --> X2
      (EN => X2) = (1.0,1.0);
      
      // comb arc A3 --> X3
      (A3 => X3) = (1.0,1.0);
      
      // comb arc EN --> X3
      (EN => X3) = (1.0,1.0);
      
      // comb arc A4 --> X4
      (A4 => X4) = (1.0,1.0);
      
      // comb arc EN --> X4
      (EN => X4) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine
//****************************************************************************//
// Verilog models generated by SiliconSmart M-2017.03-SP3 build date: Aug 22, 2017 15:59:14. (SMSC-2) //
// Siliconsmart Path: /global/apps/siliconsmart_2017.03-SP3/linux64/bin/siliconsmart //
// Host Name: am04dwamd080.internal.synopsys.com, User Name: rostomya, PID: 19306  //
// Directory: /remote/saed/meruzha/CHAR/lvl/ulvl/rvt/processes/tt0p8v25c_i0p8v/siliconsmart/simulation_ulvl //
//                                                                            //
// File generated on Tue Nov 07 09:40:50 AMT 2017. (SMSC-3)                   //
//****************************************************************************//






`celldefine
module SAEDRVT14_LVLUBUFE0_IY2V1_1( X, A, EN );
input A, EN;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_LVLUBUFE0_IY2V1_1_func SAEDRVT14_LVLUBUFE0_IY2V1_1_behav_inst(.X(X),.A(A),.EN(EN));
`else
   SAEDRVT14_LVLUBUFE0_IY2V1_1_func SAEDRVT14_LVLUBUFE0_IY2V1_1_inst(.X(X),.A(A),.EN(EN));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A --> X
      (A => X) = (1.0,1.0);
      
      // comb arc EN --> X
      (EN => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_LVLUBUFE0_IY2V1_10( X, A, EN );
input A, EN;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_LVLUBUFE0_IY2V1_10_func SAEDRVT14_LVLUBUFE0_IY2V1_10_behav_inst(.X(X),.A(A),.EN(EN));
`else
   SAEDRVT14_LVLUBUFE0_IY2V1_10_func SAEDRVT14_LVLUBUFE0_IY2V1_10_inst(.X(X),.A(A),.EN(EN));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A --> X
      (A => X) = (1.0,1.0);
      
      // comb arc EN --> X
      (EN => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_LVLUBUFE0_IY2V1_12( X, A, EN );
input A, EN;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_LVLUBUFE0_IY2V1_12_func SAEDRVT14_LVLUBUFE0_IY2V1_12_behav_inst(.X(X),.A(A),.EN(EN));
`else
   SAEDRVT14_LVLUBUFE0_IY2V1_12_func SAEDRVT14_LVLUBUFE0_IY2V1_12_inst(.X(X),.A(A),.EN(EN));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A --> X
      (A => X) = (1.0,1.0);
      
      // comb arc EN --> X
      (EN => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_LVLUBUFE0_IY2V1_2( X, A, EN );
input A, EN;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_LVLUBUFE0_IY2V1_2_func SAEDRVT14_LVLUBUFE0_IY2V1_2_behav_inst(.X(X),.A(A),.EN(EN));
`else
   SAEDRVT14_LVLUBUFE0_IY2V1_2_func SAEDRVT14_LVLUBUFE0_IY2V1_2_inst(.X(X),.A(A),.EN(EN));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A --> X
      (A => X) = (1.0,1.0);
      
      // comb arc EN --> X
      (EN => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_LVLUBUFE0_IY2V1_3( X, A, EN );
input A, EN;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_LVLUBUFE0_IY2V1_3_func SAEDRVT14_LVLUBUFE0_IY2V1_3_behav_inst(.X(X),.A(A),.EN(EN));
`else
   SAEDRVT14_LVLUBUFE0_IY2V1_3_func SAEDRVT14_LVLUBUFE0_IY2V1_3_inst(.X(X),.A(A),.EN(EN));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A --> X
      (A => X) = (1.0,1.0);
      
      // comb arc EN --> X
      (EN => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_LVLUBUFE0_IY2V1_4( X, A, EN );
input A, EN;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_LVLUBUFE0_IY2V1_4_func SAEDRVT14_LVLUBUFE0_IY2V1_4_behav_inst(.X(X),.A(A),.EN(EN));
`else
   SAEDRVT14_LVLUBUFE0_IY2V1_4_func SAEDRVT14_LVLUBUFE0_IY2V1_4_inst(.X(X),.A(A),.EN(EN));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A --> X
      (A => X) = (1.0,1.0);
      
      // comb arc EN --> X
      (EN => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_LVLUBUFE0_IY2V1_6( X, A, EN );
input A, EN;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_LVLUBUFE0_IY2V1_6_func SAEDRVT14_LVLUBUFE0_IY2V1_6_behav_inst(.X(X),.A(A),.EN(EN));
`else
   SAEDRVT14_LVLUBUFE0_IY2V1_6_func SAEDRVT14_LVLUBUFE0_IY2V1_6_inst(.X(X),.A(A),.EN(EN));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A --> X
      (A => X) = (1.0,1.0);
      
      // comb arc EN --> X
      (EN => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_LVLUBUFE0_IY2V1_8( X, A, EN );
input A, EN;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_LVLUBUFE0_IY2V1_8_func SAEDRVT14_LVLUBUFE0_IY2V1_8_behav_inst(.X(X),.A(A),.EN(EN));
`else
   SAEDRVT14_LVLUBUFE0_IY2V1_8_func SAEDRVT14_LVLUBUFE0_IY2V1_8_inst(.X(X),.A(A),.EN(EN));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A --> X
      (A => X) = (1.0,1.0);
      
      // comb arc EN --> X
      (EN => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_LVLUBUFE0_IY2_1( X, A, EN );
input A, EN;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_LVLUBUFE0_IY2_1_func SAEDRVT14_LVLUBUFE0_IY2_1_behav_inst(.X(X),.A(A),.EN(EN));
`else
   SAEDRVT14_LVLUBUFE0_IY2_1_func SAEDRVT14_LVLUBUFE0_IY2_1_inst(.X(X),.A(A),.EN(EN));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A --> X
      (A => X) = (1.0,1.0);
      
      // comb arc EN --> X
      (EN => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_LVLUBUFE0_IY2_10( X, A, EN );
input A, EN;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_LVLUBUFE0_IY2_10_func SAEDRVT14_LVLUBUFE0_IY2_10_behav_inst(.X(X),.A(A),.EN(EN));
`else
   SAEDRVT14_LVLUBUFE0_IY2_10_func SAEDRVT14_LVLUBUFE0_IY2_10_inst(.X(X),.A(A),.EN(EN));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A --> X
      (A => X) = (1.0,1.0);
      
      // comb arc EN --> X
      (EN => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_LVLUBUFE0_IY2_12( X, A, EN );
input A, EN;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_LVLUBUFE0_IY2_12_func SAEDRVT14_LVLUBUFE0_IY2_12_behav_inst(.X(X),.A(A),.EN(EN));
`else
   SAEDRVT14_LVLUBUFE0_IY2_12_func SAEDRVT14_LVLUBUFE0_IY2_12_inst(.X(X),.A(A),.EN(EN));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A --> X
      (A => X) = (1.0,1.0);
      
      // comb arc EN --> X
      (EN => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_LVLUBUFE0_IY2_2( X, A, EN );
input A, EN;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_LVLUBUFE0_IY2_2_func SAEDRVT14_LVLUBUFE0_IY2_2_behav_inst(.X(X),.A(A),.EN(EN));
`else
   SAEDRVT14_LVLUBUFE0_IY2_2_func SAEDRVT14_LVLUBUFE0_IY2_2_inst(.X(X),.A(A),.EN(EN));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A --> X
      (A => X) = (1.0,1.0);
      
      // comb arc EN --> X
      (EN => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_LVLUBUFE0_IY2_3( X, A, EN );
input A, EN;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_LVLUBUFE0_IY2_3_func SAEDRVT14_LVLUBUFE0_IY2_3_behav_inst(.X(X),.A(A),.EN(EN));
`else
   SAEDRVT14_LVLUBUFE0_IY2_3_func SAEDRVT14_LVLUBUFE0_IY2_3_inst(.X(X),.A(A),.EN(EN));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A --> X
      (A => X) = (1.0,1.0);
      
      // comb arc EN --> X
      (EN => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_LVLUBUFE0_IY2_4( X, A, EN );
input A, EN;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_LVLUBUFE0_IY2_4_func SAEDRVT14_LVLUBUFE0_IY2_4_behav_inst(.X(X),.A(A),.EN(EN));
`else
   SAEDRVT14_LVLUBUFE0_IY2_4_func SAEDRVT14_LVLUBUFE0_IY2_4_inst(.X(X),.A(A),.EN(EN));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A --> X
      (A => X) = (1.0,1.0);
      
      // comb arc EN --> X
      (EN => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_LVLUBUFE0_IY2_6( X, A, EN );
input A, EN;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_LVLUBUFE0_IY2_6_func SAEDRVT14_LVLUBUFE0_IY2_6_behav_inst(.X(X),.A(A),.EN(EN));
`else
   SAEDRVT14_LVLUBUFE0_IY2_6_func SAEDRVT14_LVLUBUFE0_IY2_6_inst(.X(X),.A(A),.EN(EN));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A --> X
      (A => X) = (1.0,1.0);
      
      // comb arc EN --> X
      (EN => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_LVLUBUFE0_IY2_8( X, A, EN );
input A, EN;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_LVLUBUFE0_IY2_8_func SAEDRVT14_LVLUBUFE0_IY2_8_behav_inst(.X(X),.A(A),.EN(EN));
`else
   SAEDRVT14_LVLUBUFE0_IY2_8_func SAEDRVT14_LVLUBUFE0_IY2_8_inst(.X(X),.A(A),.EN(EN));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A --> X
      (A => X) = (1.0,1.0);
      
      // comb arc EN --> X
      (EN => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_LVLUBUFE1_IY2V1_1( X, A, EN );
input A, EN;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_LVLUBUFE1_IY2V1_1_func SAEDRVT14_LVLUBUFE1_IY2V1_1_behav_inst(.X(X),.A(A),.EN(EN));
`else
   SAEDRVT14_LVLUBUFE1_IY2V1_1_func SAEDRVT14_LVLUBUFE1_IY2V1_1_inst(.X(X),.A(A),.EN(EN));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A --> X
      (A => X) = (1.0,1.0);
      
      // comb arc EN --> X
      (EN => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_LVLUBUFE1_IY2V1_10( X, A, EN );
input A, EN;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_LVLUBUFE1_IY2V1_10_func SAEDRVT14_LVLUBUFE1_IY2V1_10_behav_inst(.X(X),.A(A),.EN(EN));
`else
   SAEDRVT14_LVLUBUFE1_IY2V1_10_func SAEDRVT14_LVLUBUFE1_IY2V1_10_inst(.X(X),.A(A),.EN(EN));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A --> X
      (A => X) = (1.0,1.0);
      
      // comb arc EN --> X
      (EN => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_LVLUBUFE1_IY2V1_12( X, A, EN );
input A, EN;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_LVLUBUFE1_IY2V1_12_func SAEDRVT14_LVLUBUFE1_IY2V1_12_behav_inst(.X(X),.A(A),.EN(EN));
`else
   SAEDRVT14_LVLUBUFE1_IY2V1_12_func SAEDRVT14_LVLUBUFE1_IY2V1_12_inst(.X(X),.A(A),.EN(EN));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A --> X
      (A => X) = (1.0,1.0);
      
      // comb arc EN --> X
      (EN => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_LVLUBUFE1_IY2V1_2( X, A, EN );
input A, EN;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_LVLUBUFE1_IY2V1_2_func SAEDRVT14_LVLUBUFE1_IY2V1_2_behav_inst(.X(X),.A(A),.EN(EN));
`else
   SAEDRVT14_LVLUBUFE1_IY2V1_2_func SAEDRVT14_LVLUBUFE1_IY2V1_2_inst(.X(X),.A(A),.EN(EN));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A --> X
      (A => X) = (1.0,1.0);
      
      // comb arc EN --> X
      (EN => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_LVLUBUFE1_IY2V1_3( X, A, EN );
input A, EN;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_LVLUBUFE1_IY2V1_3_func SAEDRVT14_LVLUBUFE1_IY2V1_3_behav_inst(.X(X),.A(A),.EN(EN));
`else
   SAEDRVT14_LVLUBUFE1_IY2V1_3_func SAEDRVT14_LVLUBUFE1_IY2V1_3_inst(.X(X),.A(A),.EN(EN));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A --> X
      (A => X) = (1.0,1.0);
      
      // comb arc EN --> X
      (EN => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_LVLUBUFE1_IY2V1_4( X, A, EN );
input A, EN;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_LVLUBUFE1_IY2V1_4_func SAEDRVT14_LVLUBUFE1_IY2V1_4_behav_inst(.X(X),.A(A),.EN(EN));
`else
   SAEDRVT14_LVLUBUFE1_IY2V1_4_func SAEDRVT14_LVLUBUFE1_IY2V1_4_inst(.X(X),.A(A),.EN(EN));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A --> X
      (A => X) = (1.0,1.0);
      
      // comb arc EN --> X
      (EN => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_LVLUBUFE1_IY2V1_6( X, A, EN );
input A, EN;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_LVLUBUFE1_IY2V1_6_func SAEDRVT14_LVLUBUFE1_IY2V1_6_behav_inst(.X(X),.A(A),.EN(EN));
`else
   SAEDRVT14_LVLUBUFE1_IY2V1_6_func SAEDRVT14_LVLUBUFE1_IY2V1_6_inst(.X(X),.A(A),.EN(EN));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A --> X
      (A => X) = (1.0,1.0);
      
      // comb arc EN --> X
      (EN => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_LVLUBUFE1_IY2V1_8( X, A, EN );
input A, EN;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_LVLUBUFE1_IY2V1_8_func SAEDRVT14_LVLUBUFE1_IY2V1_8_behav_inst(.X(X),.A(A),.EN(EN));
`else
   SAEDRVT14_LVLUBUFE1_IY2V1_8_func SAEDRVT14_LVLUBUFE1_IY2V1_8_inst(.X(X),.A(A),.EN(EN));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A --> X
      (A => X) = (1.0,1.0);
      
      // comb arc EN --> X
      (EN => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_LVLUBUFE1_IY2_1( X, A, EN );
input A, EN;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_LVLUBUFE1_IY2_1_func SAEDRVT14_LVLUBUFE1_IY2_1_behav_inst(.X(X),.A(A),.EN(EN));
`else
   SAEDRVT14_LVLUBUFE1_IY2_1_func SAEDRVT14_LVLUBUFE1_IY2_1_inst(.X(X),.A(A),.EN(EN));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A --> X
      (A => X) = (1.0,1.0);
      
      // comb arc EN --> X
      (EN => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_LVLUBUFE1_IY2_10( X, A, EN );
input A, EN;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_LVLUBUFE1_IY2_10_func SAEDRVT14_LVLUBUFE1_IY2_10_behav_inst(.X(X),.A(A),.EN(EN));
`else
   SAEDRVT14_LVLUBUFE1_IY2_10_func SAEDRVT14_LVLUBUFE1_IY2_10_inst(.X(X),.A(A),.EN(EN));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A --> X
      (A => X) = (1.0,1.0);
      
      // comb arc EN --> X
      (EN => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_LVLUBUFE1_IY2_12( X, A, EN );
input A, EN;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_LVLUBUFE1_IY2_12_func SAEDRVT14_LVLUBUFE1_IY2_12_behav_inst(.X(X),.A(A),.EN(EN));
`else
   SAEDRVT14_LVLUBUFE1_IY2_12_func SAEDRVT14_LVLUBUFE1_IY2_12_inst(.X(X),.A(A),.EN(EN));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A --> X
      (A => X) = (1.0,1.0);
      
      // comb arc EN --> X
      (EN => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_LVLUBUFE1_IY2_2( X, A, EN );
input A, EN;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_LVLUBUFE1_IY2_2_func SAEDRVT14_LVLUBUFE1_IY2_2_behav_inst(.X(X),.A(A),.EN(EN));
`else
   SAEDRVT14_LVLUBUFE1_IY2_2_func SAEDRVT14_LVLUBUFE1_IY2_2_inst(.X(X),.A(A),.EN(EN));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A --> X
      (A => X) = (1.0,1.0);
      
      // comb arc EN --> X
      (EN => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_LVLUBUFE1_IY2_3( X, A, EN );
input A, EN;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_LVLUBUFE1_IY2_3_func SAEDRVT14_LVLUBUFE1_IY2_3_behav_inst(.X(X),.A(A),.EN(EN));
`else
   SAEDRVT14_LVLUBUFE1_IY2_3_func SAEDRVT14_LVLUBUFE1_IY2_3_inst(.X(X),.A(A),.EN(EN));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A --> X
      (A => X) = (1.0,1.0);
      
      // comb arc EN --> X
      (EN => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_LVLUBUFE1_IY2_4( X, A, EN );
input A, EN;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_LVLUBUFE1_IY2_4_func SAEDRVT14_LVLUBUFE1_IY2_4_behav_inst(.X(X),.A(A),.EN(EN));
`else
   SAEDRVT14_LVLUBUFE1_IY2_4_func SAEDRVT14_LVLUBUFE1_IY2_4_inst(.X(X),.A(A),.EN(EN));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A --> X
      (A => X) = (1.0,1.0);
      
      // comb arc EN --> X
      (EN => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_LVLUBUFE1_IY2_6( X, A, EN );
input A, EN;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_LVLUBUFE1_IY2_6_func SAEDRVT14_LVLUBUFE1_IY2_6_behav_inst(.X(X),.A(A),.EN(EN));
`else
   SAEDRVT14_LVLUBUFE1_IY2_6_func SAEDRVT14_LVLUBUFE1_IY2_6_inst(.X(X),.A(A),.EN(EN));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A --> X
      (A => X) = (1.0,1.0);
      
      // comb arc EN --> X
      (EN => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_LVLUBUFE1_IY2_8( X, A, EN );
input A, EN;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_LVLUBUFE1_IY2_8_func SAEDRVT14_LVLUBUFE1_IY2_8_behav_inst(.X(X),.A(A),.EN(EN));
`else
   SAEDRVT14_LVLUBUFE1_IY2_8_func SAEDRVT14_LVLUBUFE1_IY2_8_inst(.X(X),.A(A),.EN(EN));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A --> X
      (A => X) = (1.0,1.0);
      
      // comb arc EN --> X
      (EN => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_LVLUBUF_IY2V1_1( X, A );
input A;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_LVLUBUF_IY2V1_1_func SAEDRVT14_LVLUBUF_IY2V1_1_behav_inst(.X(X),.A(A));
`else
   SAEDRVT14_LVLUBUF_IY2V1_1_func SAEDRVT14_LVLUBUF_IY2V1_1_inst(.X(X),.A(A));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A --> X
      (A => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_LVLUBUF_IY2V1_10( X, A );
input A;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_LVLUBUF_IY2V1_10_func SAEDRVT14_LVLUBUF_IY2V1_10_behav_inst(.X(X),.A(A));
`else
   SAEDRVT14_LVLUBUF_IY2V1_10_func SAEDRVT14_LVLUBUF_IY2V1_10_inst(.X(X),.A(A));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A --> X
      (A => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_LVLUBUF_IY2V1_12( X, A );
input A;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_LVLUBUF_IY2V1_12_func SAEDRVT14_LVLUBUF_IY2V1_12_behav_inst(.X(X),.A(A));
`else
   SAEDRVT14_LVLUBUF_IY2V1_12_func SAEDRVT14_LVLUBUF_IY2V1_12_inst(.X(X),.A(A));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A --> X
      (A => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_LVLUBUF_IY2V1_2( X, A );
input A;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_LVLUBUF_IY2V1_2_func SAEDRVT14_LVLUBUF_IY2V1_2_behav_inst(.X(X),.A(A));
`else
   SAEDRVT14_LVLUBUF_IY2V1_2_func SAEDRVT14_LVLUBUF_IY2V1_2_inst(.X(X),.A(A));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A --> X
      (A => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_LVLUBUF_IY2V1_3( X, A );
input A;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_LVLUBUF_IY2V1_3_func SAEDRVT14_LVLUBUF_IY2V1_3_behav_inst(.X(X),.A(A));
`else
   SAEDRVT14_LVLUBUF_IY2V1_3_func SAEDRVT14_LVLUBUF_IY2V1_3_inst(.X(X),.A(A));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A --> X
      (A => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_LVLUBUF_IY2V1_4( X, A );
input A;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_LVLUBUF_IY2V1_4_func SAEDRVT14_LVLUBUF_IY2V1_4_behav_inst(.X(X),.A(A));
`else
   SAEDRVT14_LVLUBUF_IY2V1_4_func SAEDRVT14_LVLUBUF_IY2V1_4_inst(.X(X),.A(A));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A --> X
      (A => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_LVLUBUF_IY2V1_6( X, A );
input A;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_LVLUBUF_IY2V1_6_func SAEDRVT14_LVLUBUF_IY2V1_6_behav_inst(.X(X),.A(A));
`else
   SAEDRVT14_LVLUBUF_IY2V1_6_func SAEDRVT14_LVLUBUF_IY2V1_6_inst(.X(X),.A(A));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A --> X
      (A => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_LVLUBUF_IY2V1_8( X, A );
input A;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_LVLUBUF_IY2V1_8_func SAEDRVT14_LVLUBUF_IY2V1_8_behav_inst(.X(X),.A(A));
`else
   SAEDRVT14_LVLUBUF_IY2V1_8_func SAEDRVT14_LVLUBUF_IY2V1_8_inst(.X(X),.A(A));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A --> X
      (A => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_LVLUBUF_IY2_1( X, A );
input A;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_LVLUBUF_IY2_1_func SAEDRVT14_LVLUBUF_IY2_1_behav_inst(.X(X),.A(A));
`else
   SAEDRVT14_LVLUBUF_IY2_1_func SAEDRVT14_LVLUBUF_IY2_1_inst(.X(X),.A(A));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A --> X
      (A => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_LVLUBUF_IY2_10( X, A );
input A;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_LVLUBUF_IY2_10_func SAEDRVT14_LVLUBUF_IY2_10_behav_inst(.X(X),.A(A));
`else
   SAEDRVT14_LVLUBUF_IY2_10_func SAEDRVT14_LVLUBUF_IY2_10_inst(.X(X),.A(A));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A --> X
      (A => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_LVLUBUF_IY2_12( X, A );
input A;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_LVLUBUF_IY2_12_func SAEDRVT14_LVLUBUF_IY2_12_behav_inst(.X(X),.A(A));
`else
   SAEDRVT14_LVLUBUF_IY2_12_func SAEDRVT14_LVLUBUF_IY2_12_inst(.X(X),.A(A));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A --> X
      (A => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_LVLUBUF_IY2_2( X, A );
input A;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_LVLUBUF_IY2_2_func SAEDRVT14_LVLUBUF_IY2_2_behav_inst(.X(X),.A(A));
`else
   SAEDRVT14_LVLUBUF_IY2_2_func SAEDRVT14_LVLUBUF_IY2_2_inst(.X(X),.A(A));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A --> X
      (A => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_LVLUBUF_IY2_3( X, A );
input A;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_LVLUBUF_IY2_3_func SAEDRVT14_LVLUBUF_IY2_3_behav_inst(.X(X),.A(A));
`else
   SAEDRVT14_LVLUBUF_IY2_3_func SAEDRVT14_LVLUBUF_IY2_3_inst(.X(X),.A(A));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A --> X
      (A => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_LVLUBUF_IY2_4( X, A );
input A;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_LVLUBUF_IY2_4_func SAEDRVT14_LVLUBUF_IY2_4_behav_inst(.X(X),.A(A));
`else
   SAEDRVT14_LVLUBUF_IY2_4_func SAEDRVT14_LVLUBUF_IY2_4_inst(.X(X),.A(A));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A --> X
      (A => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_LVLUBUF_IY2_6( X, A );
input A;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_LVLUBUF_IY2_6_func SAEDRVT14_LVLUBUF_IY2_6_behav_inst(.X(X),.A(A));
`else
   SAEDRVT14_LVLUBUF_IY2_6_func SAEDRVT14_LVLUBUF_IY2_6_inst(.X(X),.A(A));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A --> X
      (A => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_LVLUBUF_IY2_8( X, A );
input A;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_LVLUBUF_IY2_8_func SAEDRVT14_LVLUBUF_IY2_8_behav_inst(.X(X),.A(A));
`else
   SAEDRVT14_LVLUBUF_IY2_8_func SAEDRVT14_LVLUBUF_IY2_8_inst(.X(X),.A(A));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A --> X
      (A => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine






`celldefine
module SAEDRVT14_ADDF_V1_0P5( S, CO, A, B, CI );
input A, B, CI;
output CO, S;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_ADDF_V1_0P5_func SAEDRVT14_ADDF_V1_0P5_behav_inst(.S(S),.CO(CO),.A(A),.B(B),.CI(CI));
`else
   SAEDRVT14_ADDF_V1_0P5_func SAEDRVT14_ADDF_V1_0P5_inst(.S(S),.CO(CO),.A(A),.B(B),.CI(CI));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      if(B===1'b0 && CI===1'b1)
      // comb arc A --> CO
      (A => CO) = (1.0,1.0);
      
      if(B===1'b1 && CI===1'b0)
      // comb arc A --> CO
      (A => CO) = (1.0,1.0);
      
      ifnone
      // comb arc A --> CO
      (A => CO) = (1.0,1.0);
      
      if(A===1'b0 && CI===1'b1)
      // comb arc B --> CO
      (B => CO) = (1.0,1.0);
      
      if(A===1'b1 && CI===1'b0)
      // comb arc B --> CO
      (B => CO) = (1.0,1.0);
      
      ifnone
      // comb arc B --> CO
      (B => CO) = (1.0,1.0);
      
      if(A===1'b0 && B===1'b1)
      // comb arc CI --> CO
      (CI => CO) = (1.0,1.0);
      
      if(A===1'b1 && B===1'b0)
      // comb arc CI --> CO
      (CI => CO) = (1.0,1.0);
      
      ifnone
      // comb arc CI --> CO
      (CI => CO) = (1.0,1.0);
      
      if(B===1'b0 && CI===1'b1)
      // comb arc A --> S
      (A => S) = (1.0,1.0);
      
      if(B===1'b1 && CI===1'b0)
      // comb arc A --> S
      (A => S) = (1.0,1.0);
      
      ifnone
      // comb arc posedge A --> (S:A)
      (posedge A => (S:A)) = (1.0,1.0);
      
      ifnone
      // comb arc negedge A --> (S:A)
      (negedge A => (S:A)) = (1.0,1.0);
      
      if(B===1'b0 && CI===1'b0)
      // comb arc A --> S
      (A => S) = (1.0,1.0);
      
      if(B===1'b1 && CI===1'b1)
      // comb arc A --> S
      (A => S) = (1.0,1.0);
      
      if(A===1'b0 && CI===1'b1)
      // comb arc B --> S
      (B => S) = (1.0,1.0);
      
      if(A===1'b1 && CI===1'b0)
      // comb arc B --> S
      (B => S) = (1.0,1.0);
      
      ifnone
      // comb arc posedge B --> (S:B)
      (posedge B => (S:B)) = (1.0,1.0);
      
      ifnone
      // comb arc negedge B --> (S:B)
      (negedge B => (S:B)) = (1.0,1.0);
      
      if(A===1'b0 && CI===1'b0)
      // comb arc B --> S
      (B => S) = (1.0,1.0);
      
      if(A===1'b1 && CI===1'b1)
      // comb arc B --> S
      (B => S) = (1.0,1.0);
      
      if(A===1'b0 && B===1'b1)
      // comb arc CI --> S
      (CI => S) = (1.0,1.0);
      
      if(A===1'b1 && B===1'b0)
      // comb arc CI --> S
      (CI => S) = (1.0,1.0);
      
      ifnone
      // comb arc posedge CI --> (S:CI)
      (posedge CI => (S:CI)) = (1.0,1.0);
      
      ifnone
      // comb arc negedge CI --> (S:CI)
      (negedge CI => (S:CI)) = (1.0,1.0);
      
      if(A===1'b0 && B===1'b0)
      // comb arc CI --> S
      (CI => S) = (1.0,1.0);
      
      if(A===1'b1 && B===1'b1)
      // comb arc CI --> S
      (CI => S) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_ADDF_V1_1( S, CO, A, B, CI );
input A, B, CI;
output CO, S;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_ADDF_V1_1_func SAEDRVT14_ADDF_V1_1_behav_inst(.S(S),.CO(CO),.A(A),.B(B),.CI(CI));
`else
   SAEDRVT14_ADDF_V1_1_func SAEDRVT14_ADDF_V1_1_inst(.S(S),.CO(CO),.A(A),.B(B),.CI(CI));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      if(B===1'b0 && CI===1'b1)
      // comb arc A --> CO
      (A => CO) = (1.0,1.0);
      
      if(B===1'b1 && CI===1'b0)
      // comb arc A --> CO
      (A => CO) = (1.0,1.0);
      
      ifnone
      // comb arc A --> CO
      (A => CO) = (1.0,1.0);
      
      if(A===1'b0 && CI===1'b1)
      // comb arc B --> CO
      (B => CO) = (1.0,1.0);
      
      if(A===1'b1 && CI===1'b0)
      // comb arc B --> CO
      (B => CO) = (1.0,1.0);
      
      ifnone
      // comb arc B --> CO
      (B => CO) = (1.0,1.0);
      
      if(A===1'b0 && B===1'b1)
      // comb arc CI --> CO
      (CI => CO) = (1.0,1.0);
      
      if(A===1'b1 && B===1'b0)
      // comb arc CI --> CO
      (CI => CO) = (1.0,1.0);
      
      ifnone
      // comb arc CI --> CO
      (CI => CO) = (1.0,1.0);
      
      if(B===1'b0 && CI===1'b1)
      // comb arc A --> S
      (A => S) = (1.0,1.0);
      
      if(B===1'b1 && CI===1'b0)
      // comb arc A --> S
      (A => S) = (1.0,1.0);
      
      ifnone
      // comb arc posedge A --> (S:A)
      (posedge A => (S:A)) = (1.0,1.0);
      
      ifnone
      // comb arc negedge A --> (S:A)
      (negedge A => (S:A)) = (1.0,1.0);
      
      if(B===1'b0 && CI===1'b0)
      // comb arc A --> S
      (A => S) = (1.0,1.0);
      
      if(B===1'b1 && CI===1'b1)
      // comb arc A --> S
      (A => S) = (1.0,1.0);
      
      if(A===1'b0 && CI===1'b1)
      // comb arc B --> S
      (B => S) = (1.0,1.0);
      
      if(A===1'b1 && CI===1'b0)
      // comb arc B --> S
      (B => S) = (1.0,1.0);
      
      ifnone
      // comb arc posedge B --> (S:B)
      (posedge B => (S:B)) = (1.0,1.0);
      
      ifnone
      // comb arc negedge B --> (S:B)
      (negedge B => (S:B)) = (1.0,1.0);
      
      if(A===1'b0 && CI===1'b0)
      // comb arc B --> S
      (B => S) = (1.0,1.0);
      
      if(A===1'b1 && CI===1'b1)
      // comb arc B --> S
      (B => S) = (1.0,1.0);
      
      if(A===1'b0 && B===1'b1)
      // comb arc CI --> S
      (CI => S) = (1.0,1.0);
      
      if(A===1'b1 && B===1'b0)
      // comb arc CI --> S
      (CI => S) = (1.0,1.0);
      
      ifnone
      // comb arc posedge CI --> (S:CI)
      (posedge CI => (S:CI)) = (1.0,1.0);
      
      ifnone
      // comb arc negedge CI --> (S:CI)
      (negedge CI => (S:CI)) = (1.0,1.0);
      
      if(A===1'b0 && B===1'b0)
      // comb arc CI --> S
      (CI => S) = (1.0,1.0);
      
      if(A===1'b1 && B===1'b1)
      // comb arc CI --> S
      (CI => S) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_ADDF_V1_2( S, CO, A, B, CI );
input A, B, CI;
output CO, S;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_ADDF_V1_2_func SAEDRVT14_ADDF_V1_2_behav_inst(.S(S),.CO(CO),.A(A),.B(B),.CI(CI));
`else
   SAEDRVT14_ADDF_V1_2_func SAEDRVT14_ADDF_V1_2_inst(.S(S),.CO(CO),.A(A),.B(B),.CI(CI));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      if(B===1'b0 && CI===1'b1)
      // comb arc A --> CO
      (A => CO) = (1.0,1.0);
      
      if(B===1'b1 && CI===1'b0)
      // comb arc A --> CO
      (A => CO) = (1.0,1.0);
      
      ifnone
      // comb arc A --> CO
      (A => CO) = (1.0,1.0);
      
      if(A===1'b0 && CI===1'b1)
      // comb arc B --> CO
      (B => CO) = (1.0,1.0);
      
      if(A===1'b1 && CI===1'b0)
      // comb arc B --> CO
      (B => CO) = (1.0,1.0);
      
      ifnone
      // comb arc B --> CO
      (B => CO) = (1.0,1.0);
      
      if(A===1'b0 && B===1'b1)
      // comb arc CI --> CO
      (CI => CO) = (1.0,1.0);
      
      if(A===1'b1 && B===1'b0)
      // comb arc CI --> CO
      (CI => CO) = (1.0,1.0);
      
      ifnone
      // comb arc CI --> CO
      (CI => CO) = (1.0,1.0);
      
      if(B===1'b0 && CI===1'b1)
      // comb arc A --> S
      (A => S) = (1.0,1.0);
      
      if(B===1'b1 && CI===1'b0)
      // comb arc A --> S
      (A => S) = (1.0,1.0);
      
      ifnone
      // comb arc posedge A --> (S:A)
      (posedge A => (S:A)) = (1.0,1.0);
      
      ifnone
      // comb arc negedge A --> (S:A)
      (negedge A => (S:A)) = (1.0,1.0);
      
      if(B===1'b0 && CI===1'b0)
      // comb arc A --> S
      (A => S) = (1.0,1.0);
      
      if(B===1'b1 && CI===1'b1)
      // comb arc A --> S
      (A => S) = (1.0,1.0);
      
      if(A===1'b0 && CI===1'b1)
      // comb arc B --> S
      (B => S) = (1.0,1.0);
      
      if(A===1'b1 && CI===1'b0)
      // comb arc B --> S
      (B => S) = (1.0,1.0);
      
      ifnone
      // comb arc posedge B --> (S:B)
      (posedge B => (S:B)) = (1.0,1.0);
      
      ifnone
      // comb arc negedge B --> (S:B)
      (negedge B => (S:B)) = (1.0,1.0);
      
      if(A===1'b0 && CI===1'b0)
      // comb arc B --> S
      (B => S) = (1.0,1.0);
      
      if(A===1'b1 && CI===1'b1)
      // comb arc B --> S
      (B => S) = (1.0,1.0);
      
      if(A===1'b0 && B===1'b1)
      // comb arc CI --> S
      (CI => S) = (1.0,1.0);
      
      if(A===1'b1 && B===1'b0)
      // comb arc CI --> S
      (CI => S) = (1.0,1.0);
      
      ifnone
      // comb arc posedge CI --> (S:CI)
      (posedge CI => (S:CI)) = (1.0,1.0);
      
      ifnone
      // comb arc negedge CI --> (S:CI)
      (negedge CI => (S:CI)) = (1.0,1.0);
      
      if(A===1'b0 && B===1'b0)
      // comb arc CI --> S
      (CI => S) = (1.0,1.0);
      
      if(A===1'b1 && B===1'b1)
      // comb arc CI --> S
      (CI => S) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_ADDF_V2_0P5( S, CO, A, B, CI );
input A, B, CI;
output CO, S;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_ADDF_V2_0P5_func SAEDRVT14_ADDF_V2_0P5_behav_inst(.S(S),.CO(CO),.A(A),.B(B),.CI(CI));
`else
   SAEDRVT14_ADDF_V2_0P5_func SAEDRVT14_ADDF_V2_0P5_inst(.S(S),.CO(CO),.A(A),.B(B),.CI(CI));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      if(B===1'b0 && CI===1'b1)
      // comb arc A --> CO
      (A => CO) = (1.0,1.0);
      
      if(B===1'b1 && CI===1'b0)
      // comb arc A --> CO
      (A => CO) = (1.0,1.0);
      
      ifnone
      // comb arc A --> CO
      (A => CO) = (1.0,1.0);
      
      if(A===1'b0 && CI===1'b1)
      // comb arc B --> CO
      (B => CO) = (1.0,1.0);
      
      if(A===1'b1 && CI===1'b0)
      // comb arc B --> CO
      (B => CO) = (1.0,1.0);
      
      ifnone
      // comb arc B --> CO
      (B => CO) = (1.0,1.0);
      
      if(A===1'b0 && B===1'b1)
      // comb arc CI --> CO
      (CI => CO) = (1.0,1.0);
      
      if(A===1'b1 && B===1'b0)
      // comb arc CI --> CO
      (CI => CO) = (1.0,1.0);
      
      ifnone
      // comb arc CI --> CO
      (CI => CO) = (1.0,1.0);
      
      if(B===1'b0 && CI===1'b1)
      // comb arc A --> S
      (A => S) = (1.0,1.0);
      
      if(B===1'b1 && CI===1'b0)
      // comb arc A --> S
      (A => S) = (1.0,1.0);
      
      ifnone
      // comb arc posedge A --> (S:A)
      (posedge A => (S:A)) = (1.0,1.0);
      
      ifnone
      // comb arc negedge A --> (S:A)
      (negedge A => (S:A)) = (1.0,1.0);
      
      if(B===1'b0 && CI===1'b0)
      // comb arc A --> S
      (A => S) = (1.0,1.0);
      
      if(B===1'b1 && CI===1'b1)
      // comb arc A --> S
      (A => S) = (1.0,1.0);
      
      if(A===1'b0 && CI===1'b1)
      // comb arc B --> S
      (B => S) = (1.0,1.0);
      
      if(A===1'b1 && CI===1'b0)
      // comb arc B --> S
      (B => S) = (1.0,1.0);
      
      ifnone
      // comb arc posedge B --> (S:B)
      (posedge B => (S:B)) = (1.0,1.0);
      
      ifnone
      // comb arc negedge B --> (S:B)
      (negedge B => (S:B)) = (1.0,1.0);
      
      if(A===1'b0 && CI===1'b0)
      // comb arc B --> S
      (B => S) = (1.0,1.0);
      
      if(A===1'b1 && CI===1'b1)
      // comb arc B --> S
      (B => S) = (1.0,1.0);
      
      if(A===1'b0 && B===1'b1)
      // comb arc CI --> S
      (CI => S) = (1.0,1.0);
      
      if(A===1'b1 && B===1'b0)
      // comb arc CI --> S
      (CI => S) = (1.0,1.0);
      
      ifnone
      // comb arc posedge CI --> (S:CI)
      (posedge CI => (S:CI)) = (1.0,1.0);
      
      ifnone
      // comb arc negedge CI --> (S:CI)
      (negedge CI => (S:CI)) = (1.0,1.0);
      
      if(A===1'b0 && B===1'b0)
      // comb arc CI --> S
      (CI => S) = (1.0,1.0);
      
      if(A===1'b1 && B===1'b1)
      // comb arc CI --> S
      (CI => S) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_ADDF_V2_1( S, CO, A, B, CI );
input A, B, CI;
output CO, S;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_ADDF_V2_1_func SAEDRVT14_ADDF_V2_1_behav_inst(.S(S),.CO(CO),.A(A),.B(B),.CI(CI));
`else
   SAEDRVT14_ADDF_V2_1_func SAEDRVT14_ADDF_V2_1_inst(.S(S),.CO(CO),.A(A),.B(B),.CI(CI));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      if(B===1'b0 && CI===1'b1)
      // comb arc A --> CO
      (A => CO) = (1.0,1.0);
      
      if(B===1'b1 && CI===1'b0)
      // comb arc A --> CO
      (A => CO) = (1.0,1.0);
      
      ifnone
      // comb arc A --> CO
      (A => CO) = (1.0,1.0);
      
      if(A===1'b0 && CI===1'b1)
      // comb arc B --> CO
      (B => CO) = (1.0,1.0);
      
      if(A===1'b1 && CI===1'b0)
      // comb arc B --> CO
      (B => CO) = (1.0,1.0);
      
      ifnone
      // comb arc B --> CO
      (B => CO) = (1.0,1.0);
      
      if(A===1'b0 && B===1'b1)
      // comb arc CI --> CO
      (CI => CO) = (1.0,1.0);
      
      if(A===1'b1 && B===1'b0)
      // comb arc CI --> CO
      (CI => CO) = (1.0,1.0);
      
      ifnone
      // comb arc CI --> CO
      (CI => CO) = (1.0,1.0);
      
      if(B===1'b0 && CI===1'b1)
      // comb arc A --> S
      (A => S) = (1.0,1.0);
      
      if(B===1'b1 && CI===1'b0)
      // comb arc A --> S
      (A => S) = (1.0,1.0);
      
      ifnone
      // comb arc posedge A --> (S:A)
      (posedge A => (S:A)) = (1.0,1.0);
      
      ifnone
      // comb arc negedge A --> (S:A)
      (negedge A => (S:A)) = (1.0,1.0);
      
      if(B===1'b0 && CI===1'b0)
      // comb arc A --> S
      (A => S) = (1.0,1.0);
      
      if(B===1'b1 && CI===1'b1)
      // comb arc A --> S
      (A => S) = (1.0,1.0);
      
      if(A===1'b0 && CI===1'b1)
      // comb arc B --> S
      (B => S) = (1.0,1.0);
      
      if(A===1'b1 && CI===1'b0)
      // comb arc B --> S
      (B => S) = (1.0,1.0);
      
      ifnone
      // comb arc posedge B --> (S:B)
      (posedge B => (S:B)) = (1.0,1.0);
      
      ifnone
      // comb arc negedge B --> (S:B)
      (negedge B => (S:B)) = (1.0,1.0);
      
      if(A===1'b0 && CI===1'b0)
      // comb arc B --> S
      (B => S) = (1.0,1.0);
      
      if(A===1'b1 && CI===1'b1)
      // comb arc B --> S
      (B => S) = (1.0,1.0);
      
      if(A===1'b0 && B===1'b1)
      // comb arc CI --> S
      (CI => S) = (1.0,1.0);
      
      if(A===1'b1 && B===1'b0)
      // comb arc CI --> S
      (CI => S) = (1.0,1.0);
      
      ifnone
      // comb arc posedge CI --> (S:CI)
      (posedge CI => (S:CI)) = (1.0,1.0);
      
      ifnone
      // comb arc negedge CI --> (S:CI)
      (negedge CI => (S:CI)) = (1.0,1.0);
      
      if(A===1'b0 && B===1'b0)
      // comb arc CI --> S
      (CI => S) = (1.0,1.0);
      
      if(A===1'b1 && B===1'b1)
      // comb arc CI --> S
      (CI => S) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_ADDF_V2_2( S, CO, A, B, CI );
input A, B, CI;
output CO, S;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_ADDF_V2_2_func SAEDRVT14_ADDF_V2_2_behav_inst(.S(S),.CO(CO),.A(A),.B(B),.CI(CI));
`else
   SAEDRVT14_ADDF_V2_2_func SAEDRVT14_ADDF_V2_2_inst(.S(S),.CO(CO),.A(A),.B(B),.CI(CI));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      if(B===1'b0 && CI===1'b1)
      // comb arc A --> CO
      (A => CO) = (1.0,1.0);
      
      if(B===1'b1 && CI===1'b0)
      // comb arc A --> CO
      (A => CO) = (1.0,1.0);
      
      ifnone
      // comb arc A --> CO
      (A => CO) = (1.0,1.0);
      
      if(A===1'b0 && CI===1'b1)
      // comb arc B --> CO
      (B => CO) = (1.0,1.0);
      
      if(A===1'b1 && CI===1'b0)
      // comb arc B --> CO
      (B => CO) = (1.0,1.0);
      
      ifnone
      // comb arc B --> CO
      (B => CO) = (1.0,1.0);
      
      if(A===1'b0 && B===1'b1)
      // comb arc CI --> CO
      (CI => CO) = (1.0,1.0);
      
      if(A===1'b1 && B===1'b0)
      // comb arc CI --> CO
      (CI => CO) = (1.0,1.0);
      
      ifnone
      // comb arc CI --> CO
      (CI => CO) = (1.0,1.0);
      
      if(B===1'b0 && CI===1'b1)
      // comb arc A --> S
      (A => S) = (1.0,1.0);
      
      if(B===1'b1 && CI===1'b0)
      // comb arc A --> S
      (A => S) = (1.0,1.0);
      
      ifnone
      // comb arc posedge A --> (S:A)
      (posedge A => (S:A)) = (1.0,1.0);
      
      ifnone
      // comb arc negedge A --> (S:A)
      (negedge A => (S:A)) = (1.0,1.0);
      
      if(B===1'b0 && CI===1'b0)
      // comb arc A --> S
      (A => S) = (1.0,1.0);
      
      if(B===1'b1 && CI===1'b1)
      // comb arc A --> S
      (A => S) = (1.0,1.0);
      
      if(A===1'b0 && CI===1'b1)
      // comb arc B --> S
      (B => S) = (1.0,1.0);
      
      if(A===1'b1 && CI===1'b0)
      // comb arc B --> S
      (B => S) = (1.0,1.0);
      
      ifnone
      // comb arc posedge B --> (S:B)
      (posedge B => (S:B)) = (1.0,1.0);
      
      ifnone
      // comb arc negedge B --> (S:B)
      (negedge B => (S:B)) = (1.0,1.0);
      
      if(A===1'b0 && CI===1'b0)
      // comb arc B --> S
      (B => S) = (1.0,1.0);
      
      if(A===1'b1 && CI===1'b1)
      // comb arc B --> S
      (B => S) = (1.0,1.0);
      
      if(A===1'b0 && B===1'b1)
      // comb arc CI --> S
      (CI => S) = (1.0,1.0);
      
      if(A===1'b1 && B===1'b0)
      // comb arc CI --> S
      (CI => S) = (1.0,1.0);
      
      ifnone
      // comb arc posedge CI --> (S:CI)
      (posedge CI => (S:CI)) = (1.0,1.0);
      
      ifnone
      // comb arc negedge CI --> (S:CI)
      (negedge CI => (S:CI)) = (1.0,1.0);
      
      if(A===1'b0 && B===1'b0)
      // comb arc CI --> S
      (CI => S) = (1.0,1.0);
      
      if(A===1'b1 && B===1'b1)
      // comb arc CI --> S
      (CI => S) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_ADDH_0P5( S, CO, A, B );
input A, B;
output CO, S;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_ADDH_0P5_func SAEDRVT14_ADDH_0P5_behav_inst(.S(S),.CO(CO),.A(A),.B(B));
`else
   SAEDRVT14_ADDH_0P5_func SAEDRVT14_ADDH_0P5_inst(.S(S),.CO(CO),.A(A),.B(B));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A --> CO
      (A => CO) = (1.0,1.0);
      
      // comb arc B --> CO
      (B => CO) = (1.0,1.0);
      
      ifnone
      // comb arc posedge A --> (S:A)
      (posedge A => (S:A)) = (1.0,1.0);
      
      ifnone
      // comb arc negedge A --> (S:A)
      (negedge A => (S:A)) = (1.0,1.0);
      
      ifnone
      // comb arc posedge B --> (S:B)
      (posedge B => (S:B)) = (1.0,1.0);
      
      ifnone
      // comb arc negedge B --> (S:B)
      (negedge B => (S:B)) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_ADDH_1( S, CO, A, B );
input A, B;
output CO, S;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_ADDH_1_func SAEDRVT14_ADDH_1_behav_inst(.S(S),.CO(CO),.A(A),.B(B));
`else
   SAEDRVT14_ADDH_1_func SAEDRVT14_ADDH_1_inst(.S(S),.CO(CO),.A(A),.B(B));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A --> CO
      (A => CO) = (1.0,1.0);
      
      // comb arc B --> CO
      (B => CO) = (1.0,1.0);
      
      ifnone
      // comb arc posedge A --> (S:A)
      (posedge A => (S:A)) = (1.0,1.0);
      
      ifnone
      // comb arc negedge A --> (S:A)
      (negedge A => (S:A)) = (1.0,1.0);
      
      ifnone
      // comb arc posedge B --> (S:B)
      (posedge B => (S:B)) = (1.0,1.0);
      
      ifnone
      // comb arc negedge B --> (S:B)
      (negedge B => (S:B)) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_ADDH_2( S, CO, A, B );
input A, B;
output CO, S;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_ADDH_2_func SAEDRVT14_ADDH_2_behav_inst(.S(S),.CO(CO),.A(A),.B(B));
`else
   SAEDRVT14_ADDH_2_func SAEDRVT14_ADDH_2_inst(.S(S),.CO(CO),.A(A),.B(B));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A --> CO
      (A => CO) = (1.0,1.0);
      
      // comb arc B --> CO
      (B => CO) = (1.0,1.0);
      
      ifnone
      // comb arc posedge A --> (S:A)
      (posedge A => (S:A)) = (1.0,1.0);
      
      ifnone
      // comb arc negedge A --> (S:A)
      (negedge A => (S:A)) = (1.0,1.0);
      
      ifnone
      // comb arc posedge B --> (S:B)
      (posedge B => (S:B)) = (1.0,1.0);
      
      ifnone
      // comb arc negedge B --> (S:B)
      (negedge B => (S:B)) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_ADDH_4( A, B, CO, S );
input A, B;
output CO, S;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_ADDH_4_func SAEDRVT14_ADDH_4_behav_inst(.A(A),.B(B),.CO(CO),.S(S));
`else
   SAEDRVT14_ADDH_4_func SAEDRVT14_ADDH_4_inst(.A(A),.B(B),.CO(CO),.S(S));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A --> CO
      (A => CO) = (1.0,1.0);
      
      // comb arc B --> CO
      (B => CO) = (1.0,1.0);
      
      ifnone
      // comb arc posedge A --> (S:A)
      (posedge A => (S:A)) = (1.0,1.0);
      
      ifnone
      // comb arc negedge A --> (S:A)
      (negedge A => (S:A)) = (1.0,1.0);
      
      ifnone
      // comb arc posedge B --> (S:B)
      (posedge B => (S:B)) = (1.0,1.0);
      
      ifnone
      // comb arc negedge B --> (S:B)
      (negedge B => (S:B)) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_AN2B_MM_1( A, B, X );
input A, B;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_AN2B_MM_1_func SAEDRVT14_AN2B_MM_1_behav_inst(.A(A),.B(B),.X(X));
`else
   SAEDRVT14_AN2B_MM_1_func SAEDRVT14_AN2B_MM_1_inst(.A(A),.B(B),.X(X));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A --> X
      (A => X) = (1.0,1.0);
      
      // comb arc B --> X
      (B => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_AN2B_MM_12( A, B, X );
input A, B;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_AN2B_MM_12_func SAEDRVT14_AN2B_MM_12_behav_inst(.A(A),.B(B),.X(X));
`else
   SAEDRVT14_AN2B_MM_12_func SAEDRVT14_AN2B_MM_12_inst(.A(A),.B(B),.X(X));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A --> X
      (A => X) = (1.0,1.0);
      
      // comb arc B --> X
      (B => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_AN2B_MM_16( A, B, X );
input A, B;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_AN2B_MM_16_func SAEDRVT14_AN2B_MM_16_behav_inst(.A(A),.B(B),.X(X));
`else
   SAEDRVT14_AN2B_MM_16_func SAEDRVT14_AN2B_MM_16_inst(.A(A),.B(B),.X(X));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A --> X
      (A => X) = (1.0,1.0);
      
      // comb arc B --> X
      (B => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_AN2B_MM_2( A, B, X );
input A, B;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_AN2B_MM_2_func SAEDRVT14_AN2B_MM_2_behav_inst(.A(A),.B(B),.X(X));
`else
   SAEDRVT14_AN2B_MM_2_func SAEDRVT14_AN2B_MM_2_inst(.A(A),.B(B),.X(X));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A --> X
      (A => X) = (1.0,1.0);
      
      // comb arc B --> X
      (B => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_AN2B_MM_20( A, B, X );
input A, B;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_AN2B_MM_20_func SAEDRVT14_AN2B_MM_20_behav_inst(.A(A),.B(B),.X(X));
`else
   SAEDRVT14_AN2B_MM_20_func SAEDRVT14_AN2B_MM_20_inst(.A(A),.B(B),.X(X));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A --> X
      (A => X) = (1.0,1.0);
      
      // comb arc B --> X
      (B => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_AN2B_MM_4( A, B, X );
input A, B;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_AN2B_MM_4_func SAEDRVT14_AN2B_MM_4_behav_inst(.A(A),.B(B),.X(X));
`else
   SAEDRVT14_AN2B_MM_4_func SAEDRVT14_AN2B_MM_4_inst(.A(A),.B(B),.X(X));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A --> X
      (A => X) = (1.0,1.0);
      
      // comb arc B --> X
      (B => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_AN2B_MM_6( A, B, X );
input A, B;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_AN2B_MM_6_func SAEDRVT14_AN2B_MM_6_behav_inst(.A(A),.B(B),.X(X));
`else
   SAEDRVT14_AN2B_MM_6_func SAEDRVT14_AN2B_MM_6_inst(.A(A),.B(B),.X(X));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A --> X
      (A => X) = (1.0,1.0);
      
      // comb arc B --> X
      (B => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_AN2B_MM_8( A, B, X );
input A, B;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_AN2B_MM_8_func SAEDRVT14_AN2B_MM_8_behav_inst(.A(A),.B(B),.X(X));
`else
   SAEDRVT14_AN2B_MM_8_func SAEDRVT14_AN2B_MM_8_inst(.A(A),.B(B),.X(X));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A --> X
      (A => X) = (1.0,1.0);
      
      // comb arc B --> X
      (B => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_AN2_0P5( X, A1, A2 );
input A1, A2;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_AN2_0P5_func SAEDRVT14_AN2_0P5_behav_inst(.X(X),.A1(A1),.A2(A2));
`else
   SAEDRVT14_AN2_0P5_func SAEDRVT14_AN2_0P5_inst(.X(X),.A1(A1),.A2(A2));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_AN2_0P75( X, A1, A2 );
input A1, A2;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_AN2_0P75_func SAEDRVT14_AN2_0P75_behav_inst(.X(X),.A1(A1),.A2(A2));
`else
   SAEDRVT14_AN2_0P75_func SAEDRVT14_AN2_0P75_inst(.X(X),.A1(A1),.A2(A2));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_AN2_1( X, A1, A2 );
input A1, A2;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_AN2_1_func SAEDRVT14_AN2_1_behav_inst(.X(X),.A1(A1),.A2(A2));
`else
   SAEDRVT14_AN2_1_func SAEDRVT14_AN2_1_inst(.X(X),.A1(A1),.A2(A2));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_AN2_2( X, A1, A2 );
input A1, A2;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_AN2_2_func SAEDRVT14_AN2_2_behav_inst(.X(X),.A1(A1),.A2(A2));
`else
   SAEDRVT14_AN2_2_func SAEDRVT14_AN2_2_inst(.X(X),.A1(A1),.A2(A2));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_AN2_4( X, A1, A2 );
input A1, A2;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_AN2_4_func SAEDRVT14_AN2_4_behav_inst(.X(X),.A1(A1),.A2(A2));
`else
   SAEDRVT14_AN2_4_func SAEDRVT14_AN2_4_inst(.X(X),.A1(A1),.A2(A2));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_AN2_8( X, A1, A2 );
input A1, A2;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_AN2_8_func SAEDRVT14_AN2_8_behav_inst(.X(X),.A1(A1),.A2(A2));
`else
   SAEDRVT14_AN2_8_func SAEDRVT14_AN2_8_inst(.X(X),.A1(A1),.A2(A2));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_AN2_ECO_2( X, A1, A2 );
input A1, A2;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_AN2_ECO_2_func SAEDRVT14_AN2_ECO_2_behav_inst(.X(X),.A1(A1),.A2(A2));
`else
   SAEDRVT14_AN2_ECO_2_func SAEDRVT14_AN2_ECO_2_inst(.X(X),.A1(A1),.A2(A2));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_AN2_MM_0P5( X, A1, A2 );
input A1, A2;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_AN2_MM_0P5_func SAEDRVT14_AN2_MM_0P5_behav_inst(.X(X),.A1(A1),.A2(A2));
`else
   SAEDRVT14_AN2_MM_0P5_func SAEDRVT14_AN2_MM_0P5_inst(.X(X),.A1(A1),.A2(A2));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_AN2_MM_1( X, A1, A2 );
input A1, A2;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_AN2_MM_1_func SAEDRVT14_AN2_MM_1_behav_inst(.X(X),.A1(A1),.A2(A2));
`else
   SAEDRVT14_AN2_MM_1_func SAEDRVT14_AN2_MM_1_inst(.X(X),.A1(A1),.A2(A2));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_AN2_MM_12( X, A1, A2 );
input A1, A2;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_AN2_MM_12_func SAEDRVT14_AN2_MM_12_behav_inst(.X(X),.A1(A1),.A2(A2));
`else
   SAEDRVT14_AN2_MM_12_func SAEDRVT14_AN2_MM_12_inst(.X(X),.A1(A1),.A2(A2));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_AN2_MM_16( X, A1, A2 );
input A1, A2;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_AN2_MM_16_func SAEDRVT14_AN2_MM_16_behav_inst(.X(X),.A1(A1),.A2(A2));
`else
   SAEDRVT14_AN2_MM_16_func SAEDRVT14_AN2_MM_16_inst(.X(X),.A1(A1),.A2(A2));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_AN2_MM_2( X, A1, A2 );
input A1, A2;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_AN2_MM_2_func SAEDRVT14_AN2_MM_2_behav_inst(.X(X),.A1(A1),.A2(A2));
`else
   SAEDRVT14_AN2_MM_2_func SAEDRVT14_AN2_MM_2_inst(.X(X),.A1(A1),.A2(A2));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_AN2_MM_20( X, A1, A2 );
input A1, A2;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_AN2_MM_20_func SAEDRVT14_AN2_MM_20_behav_inst(.X(X),.A1(A1),.A2(A2));
`else
   SAEDRVT14_AN2_MM_20_func SAEDRVT14_AN2_MM_20_inst(.X(X),.A1(A1),.A2(A2));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_AN2_MM_3( X, A1, A2 );
input A1, A2;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_AN2_MM_3_func SAEDRVT14_AN2_MM_3_behav_inst(.X(X),.A1(A1),.A2(A2));
`else
   SAEDRVT14_AN2_MM_3_func SAEDRVT14_AN2_MM_3_inst(.X(X),.A1(A1),.A2(A2));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_AN2_MM_4( X, A1, A2 );
input A1, A2;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_AN2_MM_4_func SAEDRVT14_AN2_MM_4_behav_inst(.X(X),.A1(A1),.A2(A2));
`else
   SAEDRVT14_AN2_MM_4_func SAEDRVT14_AN2_MM_4_inst(.X(X),.A1(A1),.A2(A2));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_AN2_MM_6( X, A1, A2 );
input A1, A2;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_AN2_MM_6_func SAEDRVT14_AN2_MM_6_behav_inst(.X(X),.A1(A1),.A2(A2));
`else
   SAEDRVT14_AN2_MM_6_func SAEDRVT14_AN2_MM_6_inst(.X(X),.A1(A1),.A2(A2));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_AN2_MM_8( X, A1, A2 );
input A1, A2;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_AN2_MM_8_func SAEDRVT14_AN2_MM_8_behav_inst(.X(X),.A1(A1),.A2(A2));
`else
   SAEDRVT14_AN2_MM_8_func SAEDRVT14_AN2_MM_8_inst(.X(X),.A1(A1),.A2(A2));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_AN3_0P5( X, A1, A2, A3 );
input A1, A2, A3;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_AN3_0P5_func SAEDRVT14_AN3_0P5_behav_inst(.X(X),.A1(A1),.A2(A2),.A3(A3));
`else
   SAEDRVT14_AN3_0P5_func SAEDRVT14_AN3_0P5_inst(.X(X),.A1(A1),.A2(A2),.A3(A3));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      // comb arc A3 --> X
      (A3 => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_AN3_0P75( X, A1, A2, A3 );
input A1, A2, A3;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_AN3_0P75_func SAEDRVT14_AN3_0P75_behav_inst(.X(X),.A1(A1),.A2(A2),.A3(A3));
`else
   SAEDRVT14_AN3_0P75_func SAEDRVT14_AN3_0P75_inst(.X(X),.A1(A1),.A2(A2),.A3(A3));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      // comb arc A3 --> X
      (A3 => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_AN3_1( X, A1, A2, A3 );
input A1, A2, A3;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_AN3_1_func SAEDRVT14_AN3_1_behav_inst(.X(X),.A1(A1),.A2(A2),.A3(A3));
`else
   SAEDRVT14_AN3_1_func SAEDRVT14_AN3_1_inst(.X(X),.A1(A1),.A2(A2),.A3(A3));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      // comb arc A3 --> X
      (A3 => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_AN3_2( X, A1, A2, A3 );
input A1, A2, A3;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_AN3_2_func SAEDRVT14_AN3_2_behav_inst(.X(X),.A1(A1),.A2(A2),.A3(A3));
`else
   SAEDRVT14_AN3_2_func SAEDRVT14_AN3_2_inst(.X(X),.A1(A1),.A2(A2),.A3(A3));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      // comb arc A3 --> X
      (A3 => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_AN3_4( X, A1, A2, A3 );
input A1, A2, A3;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_AN3_4_func SAEDRVT14_AN3_4_behav_inst(.X(X),.A1(A1),.A2(A2),.A3(A3));
`else
   SAEDRVT14_AN3_4_func SAEDRVT14_AN3_4_inst(.X(X),.A1(A1),.A2(A2),.A3(A3));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      // comb arc A3 --> X
      (A3 => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_AN3_8( X, A1, A2, A3 );
input A1, A2, A3;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_AN3_8_func SAEDRVT14_AN3_8_behav_inst(.X(X),.A1(A1),.A2(A2),.A3(A3));
`else
   SAEDRVT14_AN3_8_func SAEDRVT14_AN3_8_inst(.X(X),.A1(A1),.A2(A2),.A3(A3));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      // comb arc A3 --> X
      (A3 => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_AN3_ECO_1( X, A1, A2, A3 );
input A1, A2, A3;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_AN3_ECO_1_func SAEDRVT14_AN3_ECO_1_behav_inst(.X(X),.A1(A1),.A2(A2),.A3(A3));
`else
   SAEDRVT14_AN3_ECO_1_func SAEDRVT14_AN3_ECO_1_inst(.X(X),.A1(A1),.A2(A2),.A3(A3));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      // comb arc A3 --> X
      (A3 => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_AN4_0P5( X, A1, A2, A3, A4 );
input A1, A2, A3, A4;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_AN4_0P5_func SAEDRVT14_AN4_0P5_behav_inst(.X(X),.A1(A1),.A2(A2),.A3(A3),.A4(A4));
`else
   SAEDRVT14_AN4_0P5_func SAEDRVT14_AN4_0P5_inst(.X(X),.A1(A1),.A2(A2),.A3(A3),.A4(A4));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      // comb arc A3 --> X
      (A3 => X) = (1.0,1.0);
      
      // comb arc A4 --> X
      (A4 => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_AN4_0P75( X, A1, A2, A3, A4 );
input A1, A2, A3, A4;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_AN4_0P75_func SAEDRVT14_AN4_0P75_behav_inst(.X(X),.A1(A1),.A2(A2),.A3(A3),.A4(A4));
`else
   SAEDRVT14_AN4_0P75_func SAEDRVT14_AN4_0P75_inst(.X(X),.A1(A1),.A2(A2),.A3(A3),.A4(A4));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      // comb arc A3 --> X
      (A3 => X) = (1.0,1.0);
      
      // comb arc A4 --> X
      (A4 => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_AN4_1( X, A1, A2, A3, A4 );
input A1, A2, A3, A4;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_AN4_1_func SAEDRVT14_AN4_1_behav_inst(.X(X),.A1(A1),.A2(A2),.A3(A3),.A4(A4));
`else
   SAEDRVT14_AN4_1_func SAEDRVT14_AN4_1_inst(.X(X),.A1(A1),.A2(A2),.A3(A3),.A4(A4));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      // comb arc A3 --> X
      (A3 => X) = (1.0,1.0);
      
      // comb arc A4 --> X
      (A4 => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_AN4_2( X, A1, A2, A3, A4 );
input A1, A2, A3, A4;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_AN4_2_func SAEDRVT14_AN4_2_behav_inst(.X(X),.A1(A1),.A2(A2),.A3(A3),.A4(A4));
`else
   SAEDRVT14_AN4_2_func SAEDRVT14_AN4_2_inst(.X(X),.A1(A1),.A2(A2),.A3(A3),.A4(A4));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      // comb arc A3 --> X
      (A3 => X) = (1.0,1.0);
      
      // comb arc A4 --> X
      (A4 => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_AN4_4( X, A1, A2, A3, A4 );
input A1, A2, A3, A4;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_AN4_4_func SAEDRVT14_AN4_4_behav_inst(.X(X),.A1(A1),.A2(A2),.A3(A3),.A4(A4));
`else
   SAEDRVT14_AN4_4_func SAEDRVT14_AN4_4_inst(.X(X),.A1(A1),.A2(A2),.A3(A3),.A4(A4));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      // comb arc A3 --> X
      (A3 => X) = (1.0,1.0);
      
      // comb arc A4 --> X
      (A4 => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_AN4_8( X, A1, A2, A3, A4 );
input A1, A2, A3, A4;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_AN4_8_func SAEDRVT14_AN4_8_behav_inst(.X(X),.A1(A1),.A2(A2),.A3(A3),.A4(A4));
`else
   SAEDRVT14_AN4_8_func SAEDRVT14_AN4_8_inst(.X(X),.A1(A1),.A2(A2),.A3(A3),.A4(A4));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      // comb arc A3 --> X
      (A3 => X) = (1.0,1.0);
      
      // comb arc A4 --> X
      (A4 => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_AN4_ECO_2( X, A1, A2, A3, A4 );
input A1, A2, A3, A4;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_AN4_ECO_2_func SAEDRVT14_AN4_ECO_2_behav_inst(.X(X),.A1(A1),.A2(A2),.A3(A3),.A4(A4));
`else
   SAEDRVT14_AN4_ECO_2_func SAEDRVT14_AN4_ECO_2_inst(.X(X),.A1(A1),.A2(A2),.A3(A3),.A4(A4));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      // comb arc A3 --> X
      (A3 => X) = (1.0,1.0);
      
      // comb arc A4 --> X
      (A4 => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_AO211_1( X, A1, A2, B1, B2 );
input A1, A2, B1, B2;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_AO211_1_func SAEDRVT14_AO211_1_behav_inst(.X(X),.A1(A1),.A2(A2),.B1(B1),.B2(B2));
`else
   SAEDRVT14_AO211_1_func SAEDRVT14_AO211_1_inst(.X(X),.A1(A1),.A2(A2),.B1(B1),.B2(B2));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      ifnone
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      ifnone
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_AO211_2( X, A1, A2, B1, B2 );
input A1, A2, B1, B2;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_AO211_2_func SAEDRVT14_AO211_2_behav_inst(.X(X),.A1(A1),.A2(A2),.B1(B1),.B2(B2));
`else
   SAEDRVT14_AO211_2_func SAEDRVT14_AO211_2_inst(.X(X),.A1(A1),.A2(A2),.B1(B1),.B2(B2));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      ifnone
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      ifnone
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_AO211_4( X, A1, A2, B1, B2 );
input A1, A2, B1, B2;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_AO211_4_func SAEDRVT14_AO211_4_behav_inst(.X(X),.A1(A1),.A2(A2),.B1(B1),.B2(B2));
`else
   SAEDRVT14_AO211_4_func SAEDRVT14_AO211_4_inst(.X(X),.A1(A1),.A2(A2),.B1(B1),.B2(B2));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      ifnone
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      ifnone
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_AO211_U_0P5( X, A1, A2, B1, B2 );
input A1, A2, B1, B2;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_AO211_U_0P5_func SAEDRVT14_AO211_U_0P5_behav_inst(.X(X),.A1(A1),.A2(A2),.B1(B1),.B2(B2));
`else
   SAEDRVT14_AO211_U_0P5_func SAEDRVT14_AO211_U_0P5_inst(.X(X),.A1(A1),.A2(A2),.B1(B1),.B2(B2));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      ifnone
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      ifnone
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_AO21B_0P5( X, A1, A2, B );
input A1, A2, B;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_AO21B_0P5_func SAEDRVT14_AO21B_0P5_behav_inst(.X(X),.A1(A1),.A2(A2),.B(B));
`else
   SAEDRVT14_AO21B_0P5_func SAEDRVT14_AO21B_0P5_inst(.X(X),.A1(A1),.A2(A2),.B(B));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0)
      // comb arc B --> X
      (B => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1)
      // comb arc B --> X
      (B => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0)
      // comb arc B --> X
      (B => X) = (1.0,1.0);
      
      ifnone
      // comb arc B --> X
      (B => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_AO21B_1( X, A1, A2, B );
input A1, A2, B;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_AO21B_1_func SAEDRVT14_AO21B_1_behav_inst(.X(X),.A1(A1),.A2(A2),.B(B));
`else
   SAEDRVT14_AO21B_1_func SAEDRVT14_AO21B_1_inst(.X(X),.A1(A1),.A2(A2),.B(B));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0)
      // comb arc B --> X
      (B => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1)
      // comb arc B --> X
      (B => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0)
      // comb arc B --> X
      (B => X) = (1.0,1.0);
      
      ifnone
      // comb arc B --> X
      (B => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_AO21B_2( X, A1, A2, B );
input A1, A2, B;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_AO21B_2_func SAEDRVT14_AO21B_2_behav_inst(.X(X),.A1(A1),.A2(A2),.B(B));
`else
   SAEDRVT14_AO21B_2_func SAEDRVT14_AO21B_2_inst(.X(X),.A1(A1),.A2(A2),.B(B));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0)
      // comb arc B --> X
      (B => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1)
      // comb arc B --> X
      (B => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0)
      // comb arc B --> X
      (B => X) = (1.0,1.0);
      
      ifnone
      // comb arc B --> X
      (B => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_AO21B_4( X, A1, A2, B );
input A1, A2, B;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_AO21B_4_func SAEDRVT14_AO21B_4_behav_inst(.X(X),.A1(A1),.A2(A2),.B(B));
`else
   SAEDRVT14_AO21B_4_func SAEDRVT14_AO21B_4_inst(.X(X),.A1(A1),.A2(A2),.B(B));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0)
      // comb arc B --> X
      (B => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1)
      // comb arc B --> X
      (B => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0)
      // comb arc B --> X
      (B => X) = (1.0,1.0);
      
      ifnone
      // comb arc B --> X
      (B => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_AO21_1( X, A1, A2, B );
input A1, A2, B;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_AO21_1_func SAEDRVT14_AO21_1_behav_inst(.X(X),.A1(A1),.A2(A2),.B(B));
`else
   SAEDRVT14_AO21_1_func SAEDRVT14_AO21_1_inst(.X(X),.A1(A1),.A2(A2),.B(B));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0)
      // comb arc B --> X
      (B => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1)
      // comb arc B --> X
      (B => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0)
      // comb arc B --> X
      (B => X) = (1.0,1.0);
      
      ifnone
      // comb arc B --> X
      (B => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_AO21_2( X, A1, A2, B );
input A1, A2, B;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_AO21_2_func SAEDRVT14_AO21_2_behav_inst(.X(X),.A1(A1),.A2(A2),.B(B));
`else
   SAEDRVT14_AO21_2_func SAEDRVT14_AO21_2_inst(.X(X),.A1(A1),.A2(A2),.B(B));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0)
      // comb arc B --> X
      (B => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1)
      // comb arc B --> X
      (B => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0)
      // comb arc B --> X
      (B => X) = (1.0,1.0);
      
      ifnone
      // comb arc B --> X
      (B => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_AO21_4( X, A1, A2, B );
input A1, A2, B;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_AO21_4_func SAEDRVT14_AO21_4_behav_inst(.X(X),.A1(A1),.A2(A2),.B(B));
`else
   SAEDRVT14_AO21_4_func SAEDRVT14_AO21_4_inst(.X(X),.A1(A1),.A2(A2),.B(B));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0)
      // comb arc B --> X
      (B => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1)
      // comb arc B --> X
      (B => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0)
      // comb arc B --> X
      (B => X) = (1.0,1.0);
      
      ifnone
      // comb arc B --> X
      (B => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_AO21_ECO_1( X, A1, A2, B );
input A1, A2, B;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_AO21_ECO_1_func SAEDRVT14_AO21_ECO_1_behav_inst(.X(X),.A1(A1),.A2(A2),.B(B));
`else
   SAEDRVT14_AO21_ECO_1_func SAEDRVT14_AO21_ECO_1_inst(.X(X),.A1(A1),.A2(A2),.B(B));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0)
      // comb arc B --> X
      (B => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1)
      // comb arc B --> X
      (B => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0)
      // comb arc B --> X
      (B => X) = (1.0,1.0);
      
      ifnone
      // comb arc B --> X
      (B => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_AO21_U_0P5( X, A1, A2, B );
input A1, A2, B;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_AO21_U_0P5_func SAEDRVT14_AO21_U_0P5_behav_inst(.X(X),.A1(A1),.A2(A2),.B(B));
`else
   SAEDRVT14_AO21_U_0P5_func SAEDRVT14_AO21_U_0P5_inst(.X(X),.A1(A1),.A2(A2),.B(B));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0)
      // comb arc B --> X
      (B => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1)
      // comb arc B --> X
      (B => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0)
      // comb arc B --> X
      (B => X) = (1.0,1.0);
      
      ifnone
      // comb arc B --> X
      (B => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_AO221_0P5( X, A1, A2, B1, B2, C );
input A1, A2, B1, B2, C;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_AO221_0P5_func SAEDRVT14_AO221_0P5_behav_inst(.X(X),.A1(A1),.A2(A2),.B1(B1),.B2(B2),.C(C));
`else
   SAEDRVT14_AO221_0P5_func SAEDRVT14_AO221_0P5_inst(.X(X),.A1(A1),.A2(A2),.B1(B1),.B2(B2),.C(C));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      if(B1===1'b0 && B2===1'b0)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b1)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b0)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      ifnone
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b0)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b1)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b0)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      ifnone
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      ifnone
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      ifnone
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0 && B1===1'b0 && B2===1'b0)
      // comb arc C --> X
      (C => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0 && B1===1'b0 && B2===1'b1)
      // comb arc C --> X
      (C => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0 && B1===1'b1 && B2===1'b0)
      // comb arc C --> X
      (C => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && B1===1'b0 && B2===1'b0)
      // comb arc C --> X
      (C => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && B1===1'b0 && B2===1'b1)
      // comb arc C --> X
      (C => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && B1===1'b1 && B2===1'b0)
      // comb arc C --> X
      (C => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && B1===1'b0 && B2===1'b0)
      // comb arc C --> X
      (C => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && B1===1'b0 && B2===1'b1)
      // comb arc C --> X
      (C => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && B1===1'b1 && B2===1'b0)
      // comb arc C --> X
      (C => X) = (1.0,1.0);
      
      ifnone
      // comb arc C --> X
      (C => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_AO221_1( X, A1, A2, B1, B2, C );
input A1, A2, B1, B2, C;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_AO221_1_func SAEDRVT14_AO221_1_behav_inst(.X(X),.A1(A1),.A2(A2),.B1(B1),.B2(B2),.C(C));
`else
   SAEDRVT14_AO221_1_func SAEDRVT14_AO221_1_inst(.X(X),.A1(A1),.A2(A2),.B1(B1),.B2(B2),.C(C));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      if(B1===1'b0 && B2===1'b0)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b1)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b0)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      ifnone
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b0)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b1)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b0)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      ifnone
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      ifnone
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      ifnone
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0 && B1===1'b0 && B2===1'b0)
      // comb arc C --> X
      (C => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0 && B1===1'b0 && B2===1'b1)
      // comb arc C --> X
      (C => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0 && B1===1'b1 && B2===1'b0)
      // comb arc C --> X
      (C => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && B1===1'b0 && B2===1'b0)
      // comb arc C --> X
      (C => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && B1===1'b0 && B2===1'b1)
      // comb arc C --> X
      (C => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && B1===1'b1 && B2===1'b0)
      // comb arc C --> X
      (C => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && B1===1'b0 && B2===1'b0)
      // comb arc C --> X
      (C => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && B1===1'b0 && B2===1'b1)
      // comb arc C --> X
      (C => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && B1===1'b1 && B2===1'b0)
      // comb arc C --> X
      (C => X) = (1.0,1.0);
      
      ifnone
      // comb arc C --> X
      (C => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_AO221_2( X, A1, A2, B1, B2, C );
input A1, A2, B1, B2, C;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_AO221_2_func SAEDRVT14_AO221_2_behav_inst(.X(X),.A1(A1),.A2(A2),.B1(B1),.B2(B2),.C(C));
`else
   SAEDRVT14_AO221_2_func SAEDRVT14_AO221_2_inst(.X(X),.A1(A1),.A2(A2),.B1(B1),.B2(B2),.C(C));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      if(B1===1'b0 && B2===1'b0)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b1)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b0)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      ifnone
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b0)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b1)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b0)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      ifnone
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      ifnone
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      ifnone
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0 && B1===1'b0 && B2===1'b0)
      // comb arc C --> X
      (C => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0 && B1===1'b0 && B2===1'b1)
      // comb arc C --> X
      (C => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0 && B1===1'b1 && B2===1'b0)
      // comb arc C --> X
      (C => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && B1===1'b0 && B2===1'b0)
      // comb arc C --> X
      (C => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && B1===1'b0 && B2===1'b1)
      // comb arc C --> X
      (C => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && B1===1'b1 && B2===1'b0)
      // comb arc C --> X
      (C => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && B1===1'b0 && B2===1'b0)
      // comb arc C --> X
      (C => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && B1===1'b0 && B2===1'b1)
      // comb arc C --> X
      (C => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && B1===1'b1 && B2===1'b0)
      // comb arc C --> X
      (C => X) = (1.0,1.0);
      
      ifnone
      // comb arc C --> X
      (C => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_AO221_4( X, A1, A2, B1, B2, C );
input A1, A2, B1, B2, C;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_AO221_4_func SAEDRVT14_AO221_4_behav_inst(.X(X),.A1(A1),.A2(A2),.B1(B1),.B2(B2),.C(C));
`else
   SAEDRVT14_AO221_4_func SAEDRVT14_AO221_4_inst(.X(X),.A1(A1),.A2(A2),.B1(B1),.B2(B2),.C(C));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      if(B1===1'b0 && B2===1'b0)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b1)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b0)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      ifnone
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b0)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b1)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b0)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      ifnone
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      ifnone
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      ifnone
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0 && B1===1'b0 && B2===1'b0)
      // comb arc C --> X
      (C => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0 && B1===1'b0 && B2===1'b1)
      // comb arc C --> X
      (C => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0 && B1===1'b1 && B2===1'b0)
      // comb arc C --> X
      (C => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && B1===1'b0 && B2===1'b0)
      // comb arc C --> X
      (C => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && B1===1'b0 && B2===1'b1)
      // comb arc C --> X
      (C => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && B1===1'b1 && B2===1'b0)
      // comb arc C --> X
      (C => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && B1===1'b0 && B2===1'b0)
      // comb arc C --> X
      (C => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && B1===1'b0 && B2===1'b1)
      // comb arc C --> X
      (C => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && B1===1'b1 && B2===1'b0)
      // comb arc C --> X
      (C => X) = (1.0,1.0);
      
      ifnone
      // comb arc C --> X
      (C => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_AO222_1( X, A1, A2, B1, B2, C1, C2 );
input A1, A2, B1, B2, C1, C2;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_AO222_1_func SAEDRVT14_AO222_1_behav_inst(.X(X),.A1(A1),.A2(A2),.B1(B1),.B2(B2),.C1(C1),.C2(C2));
`else
   SAEDRVT14_AO222_1_func SAEDRVT14_AO222_1_inst(.X(X),.A1(A1),.A2(A2),.B1(B1),.B2(B2),.C1(C1),.C2(C2));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      if(B1===1'b0 && B2===1'b0 && C1===1'b0 && C2===1'b0)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b0 && C1===1'b0 && C2===1'b1)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b0 && C1===1'b1 && C2===1'b0)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b1 && C1===1'b0 && C2===1'b0)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b1 && C1===1'b0 && C2===1'b1)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b1 && C1===1'b1 && C2===1'b0)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b0 && C1===1'b0 && C2===1'b0)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b0 && C1===1'b0 && C2===1'b1)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b0 && C1===1'b1 && C2===1'b0)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      ifnone
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b0 && C1===1'b0 && C2===1'b0)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b0 && C1===1'b0 && C2===1'b1)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b0 && C1===1'b1 && C2===1'b0)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b1 && C1===1'b0 && C2===1'b0)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b1 && C1===1'b0 && C2===1'b1)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b1 && C1===1'b1 && C2===1'b0)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b0 && C1===1'b0 && C2===1'b0)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b0 && C1===1'b0 && C2===1'b1)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b0 && C1===1'b1 && C2===1'b0)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      ifnone
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0 && C1===1'b0 && C2===1'b0)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0 && C1===1'b0 && C2===1'b1)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0 && C1===1'b1 && C2===1'b0)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && C1===1'b0 && C2===1'b0)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && C1===1'b0 && C2===1'b1)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && C1===1'b1 && C2===1'b0)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && C1===1'b0 && C2===1'b0)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && C1===1'b0 && C2===1'b1)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && C1===1'b1 && C2===1'b0)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      ifnone
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0 && C1===1'b0 && C2===1'b0)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0 && C1===1'b0 && C2===1'b1)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0 && C1===1'b1 && C2===1'b0)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && C1===1'b0 && C2===1'b0)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && C1===1'b0 && C2===1'b1)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && C1===1'b1 && C2===1'b0)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && C1===1'b0 && C2===1'b0)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && C1===1'b0 && C2===1'b1)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && C1===1'b1 && C2===1'b0)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      ifnone
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0 && B1===1'b0 && B2===1'b0)
      // comb arc C1 --> X
      (C1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0 && B1===1'b0 && B2===1'b1)
      // comb arc C1 --> X
      (C1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0 && B1===1'b1 && B2===1'b0)
      // comb arc C1 --> X
      (C1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && B1===1'b0 && B2===1'b0)
      // comb arc C1 --> X
      (C1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && B1===1'b0 && B2===1'b1)
      // comb arc C1 --> X
      (C1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && B1===1'b1 && B2===1'b0)
      // comb arc C1 --> X
      (C1 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && B1===1'b0 && B2===1'b0)
      // comb arc C1 --> X
      (C1 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && B1===1'b0 && B2===1'b1)
      // comb arc C1 --> X
      (C1 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && B1===1'b1 && B2===1'b0)
      // comb arc C1 --> X
      (C1 => X) = (1.0,1.0);
      
      ifnone
      // comb arc C1 --> X
      (C1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0 && B1===1'b0 && B2===1'b0)
      // comb arc C2 --> X
      (C2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0 && B1===1'b0 && B2===1'b1)
      // comb arc C2 --> X
      (C2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0 && B1===1'b1 && B2===1'b0)
      // comb arc C2 --> X
      (C2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && B1===1'b0 && B2===1'b0)
      // comb arc C2 --> X
      (C2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && B1===1'b0 && B2===1'b1)
      // comb arc C2 --> X
      (C2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && B1===1'b1 && B2===1'b0)
      // comb arc C2 --> X
      (C2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && B1===1'b0 && B2===1'b0)
      // comb arc C2 --> X
      (C2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && B1===1'b0 && B2===1'b1)
      // comb arc C2 --> X
      (C2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && B1===1'b1 && B2===1'b0)
      // comb arc C2 --> X
      (C2 => X) = (1.0,1.0);
      
      ifnone
      // comb arc C2 --> X
      (C2 => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_AO222_2( X, A1, A2, B1, B2, C1, C2 );
input A1, A2, B1, B2, C1, C2;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_AO222_2_func SAEDRVT14_AO222_2_behav_inst(.X(X),.A1(A1),.A2(A2),.B1(B1),.B2(B2),.C1(C1),.C2(C2));
`else
   SAEDRVT14_AO222_2_func SAEDRVT14_AO222_2_inst(.X(X),.A1(A1),.A2(A2),.B1(B1),.B2(B2),.C1(C1),.C2(C2));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      if(B1===1'b0 && B2===1'b0 && C1===1'b0 && C2===1'b0)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b0 && C1===1'b0 && C2===1'b1)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b0 && C1===1'b1 && C2===1'b0)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b1 && C1===1'b0 && C2===1'b0)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b1 && C1===1'b0 && C2===1'b1)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b1 && C1===1'b1 && C2===1'b0)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b0 && C1===1'b0 && C2===1'b0)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b0 && C1===1'b0 && C2===1'b1)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b0 && C1===1'b1 && C2===1'b0)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      ifnone
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b0 && C1===1'b0 && C2===1'b0)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b0 && C1===1'b0 && C2===1'b1)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b0 && C1===1'b1 && C2===1'b0)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b1 && C1===1'b0 && C2===1'b0)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b1 && C1===1'b0 && C2===1'b1)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b1 && C1===1'b1 && C2===1'b0)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b0 && C1===1'b0 && C2===1'b0)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b0 && C1===1'b0 && C2===1'b1)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b0 && C1===1'b1 && C2===1'b0)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      ifnone
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0 && C1===1'b0 && C2===1'b0)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0 && C1===1'b0 && C2===1'b1)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0 && C1===1'b1 && C2===1'b0)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && C1===1'b0 && C2===1'b0)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && C1===1'b0 && C2===1'b1)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && C1===1'b1 && C2===1'b0)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && C1===1'b0 && C2===1'b0)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && C1===1'b0 && C2===1'b1)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && C1===1'b1 && C2===1'b0)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      ifnone
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0 && C1===1'b0 && C2===1'b0)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0 && C1===1'b0 && C2===1'b1)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0 && C1===1'b1 && C2===1'b0)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && C1===1'b0 && C2===1'b0)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && C1===1'b0 && C2===1'b1)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && C1===1'b1 && C2===1'b0)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && C1===1'b0 && C2===1'b0)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && C1===1'b0 && C2===1'b1)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && C1===1'b1 && C2===1'b0)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      ifnone
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0 && B1===1'b0 && B2===1'b0)
      // comb arc C1 --> X
      (C1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0 && B1===1'b0 && B2===1'b1)
      // comb arc C1 --> X
      (C1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0 && B1===1'b1 && B2===1'b0)
      // comb arc C1 --> X
      (C1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && B1===1'b0 && B2===1'b0)
      // comb arc C1 --> X
      (C1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && B1===1'b0 && B2===1'b1)
      // comb arc C1 --> X
      (C1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && B1===1'b1 && B2===1'b0)
      // comb arc C1 --> X
      (C1 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && B1===1'b0 && B2===1'b0)
      // comb arc C1 --> X
      (C1 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && B1===1'b0 && B2===1'b1)
      // comb arc C1 --> X
      (C1 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && B1===1'b1 && B2===1'b0)
      // comb arc C1 --> X
      (C1 => X) = (1.0,1.0);
      
      ifnone
      // comb arc C1 --> X
      (C1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0 && B1===1'b0 && B2===1'b0)
      // comb arc C2 --> X
      (C2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0 && B1===1'b0 && B2===1'b1)
      // comb arc C2 --> X
      (C2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0 && B1===1'b1 && B2===1'b0)
      // comb arc C2 --> X
      (C2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && B1===1'b0 && B2===1'b0)
      // comb arc C2 --> X
      (C2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && B1===1'b0 && B2===1'b1)
      // comb arc C2 --> X
      (C2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && B1===1'b1 && B2===1'b0)
      // comb arc C2 --> X
      (C2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && B1===1'b0 && B2===1'b0)
      // comb arc C2 --> X
      (C2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && B1===1'b0 && B2===1'b1)
      // comb arc C2 --> X
      (C2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && B1===1'b1 && B2===1'b0)
      // comb arc C2 --> X
      (C2 => X) = (1.0,1.0);
      
      ifnone
      // comb arc C2 --> X
      (C2 => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_AO222_4( X, A1, A2, B1, B2, C1, C2 );
input A1, A2, B1, B2, C1, C2;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_AO222_4_func SAEDRVT14_AO222_4_behav_inst(.X(X),.A1(A1),.A2(A2),.B1(B1),.B2(B2),.C1(C1),.C2(C2));
`else
   SAEDRVT14_AO222_4_func SAEDRVT14_AO222_4_inst(.X(X),.A1(A1),.A2(A2),.B1(B1),.B2(B2),.C1(C1),.C2(C2));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      if(B1===1'b0 && B2===1'b0 && C1===1'b0 && C2===1'b0)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b0 && C1===1'b0 && C2===1'b1)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b0 && C1===1'b1 && C2===1'b0)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b1 && C1===1'b0 && C2===1'b0)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b1 && C1===1'b0 && C2===1'b1)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b1 && C1===1'b1 && C2===1'b0)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b0 && C1===1'b0 && C2===1'b0)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b0 && C1===1'b0 && C2===1'b1)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b0 && C1===1'b1 && C2===1'b0)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      ifnone
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b0 && C1===1'b0 && C2===1'b0)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b0 && C1===1'b0 && C2===1'b1)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b0 && C1===1'b1 && C2===1'b0)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b1 && C1===1'b0 && C2===1'b0)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b1 && C1===1'b0 && C2===1'b1)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b1 && C1===1'b1 && C2===1'b0)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b0 && C1===1'b0 && C2===1'b0)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b0 && C1===1'b0 && C2===1'b1)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b0 && C1===1'b1 && C2===1'b0)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      ifnone
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0 && C1===1'b0 && C2===1'b0)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0 && C1===1'b0 && C2===1'b1)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0 && C1===1'b1 && C2===1'b0)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && C1===1'b0 && C2===1'b0)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && C1===1'b0 && C2===1'b1)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && C1===1'b1 && C2===1'b0)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && C1===1'b0 && C2===1'b0)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && C1===1'b0 && C2===1'b1)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && C1===1'b1 && C2===1'b0)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      ifnone
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0 && C1===1'b0 && C2===1'b0)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0 && C1===1'b0 && C2===1'b1)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0 && C1===1'b1 && C2===1'b0)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && C1===1'b0 && C2===1'b0)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && C1===1'b0 && C2===1'b1)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && C1===1'b1 && C2===1'b0)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && C1===1'b0 && C2===1'b0)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && C1===1'b0 && C2===1'b1)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && C1===1'b1 && C2===1'b0)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      ifnone
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0 && B1===1'b0 && B2===1'b0)
      // comb arc C1 --> X
      (C1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0 && B1===1'b0 && B2===1'b1)
      // comb arc C1 --> X
      (C1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0 && B1===1'b1 && B2===1'b0)
      // comb arc C1 --> X
      (C1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && B1===1'b0 && B2===1'b0)
      // comb arc C1 --> X
      (C1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && B1===1'b0 && B2===1'b1)
      // comb arc C1 --> X
      (C1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && B1===1'b1 && B2===1'b0)
      // comb arc C1 --> X
      (C1 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && B1===1'b0 && B2===1'b0)
      // comb arc C1 --> X
      (C1 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && B1===1'b0 && B2===1'b1)
      // comb arc C1 --> X
      (C1 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && B1===1'b1 && B2===1'b0)
      // comb arc C1 --> X
      (C1 => X) = (1.0,1.0);
      
      ifnone
      // comb arc C1 --> X
      (C1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0 && B1===1'b0 && B2===1'b0)
      // comb arc C2 --> X
      (C2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0 && B1===1'b0 && B2===1'b1)
      // comb arc C2 --> X
      (C2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0 && B1===1'b1 && B2===1'b0)
      // comb arc C2 --> X
      (C2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && B1===1'b0 && B2===1'b0)
      // comb arc C2 --> X
      (C2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && B1===1'b0 && B2===1'b1)
      // comb arc C2 --> X
      (C2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && B1===1'b1 && B2===1'b0)
      // comb arc C2 --> X
      (C2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && B1===1'b0 && B2===1'b0)
      // comb arc C2 --> X
      (C2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && B1===1'b0 && B2===1'b1)
      // comb arc C2 --> X
      (C2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && B1===1'b1 && B2===1'b0)
      // comb arc C2 --> X
      (C2 => X) = (1.0,1.0);
      
      ifnone
      // comb arc C2 --> X
      (C2 => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_AO222_U_0P5( X, A1, A2, B1, B2, C1, C2 );
input A1, A2, B1, B2, C1, C2;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_AO222_U_0P5_func SAEDRVT14_AO222_U_0P5_behav_inst(.X(X),.A1(A1),.A2(A2),.B1(B1),.B2(B2),.C1(C1),.C2(C2));
`else
   SAEDRVT14_AO222_U_0P5_func SAEDRVT14_AO222_U_0P5_inst(.X(X),.A1(A1),.A2(A2),.B1(B1),.B2(B2),.C1(C1),.C2(C2));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      if(B1===1'b0 && B2===1'b0 && C1===1'b0 && C2===1'b0)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b0 && C1===1'b0 && C2===1'b1)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b0 && C1===1'b1 && C2===1'b0)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b1 && C1===1'b0 && C2===1'b0)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b1 && C1===1'b0 && C2===1'b1)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b1 && C1===1'b1 && C2===1'b0)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b0 && C1===1'b0 && C2===1'b0)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b0 && C1===1'b0 && C2===1'b1)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b0 && C1===1'b1 && C2===1'b0)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      ifnone
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b0 && C1===1'b0 && C2===1'b0)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b0 && C1===1'b0 && C2===1'b1)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b0 && C1===1'b1 && C2===1'b0)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b1 && C1===1'b0 && C2===1'b0)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b1 && C1===1'b0 && C2===1'b1)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b1 && C1===1'b1 && C2===1'b0)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b0 && C1===1'b0 && C2===1'b0)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b0 && C1===1'b0 && C2===1'b1)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b0 && C1===1'b1 && C2===1'b0)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      ifnone
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0 && C1===1'b0 && C2===1'b0)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0 && C1===1'b0 && C2===1'b1)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0 && C1===1'b1 && C2===1'b0)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && C1===1'b0 && C2===1'b0)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && C1===1'b0 && C2===1'b1)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && C1===1'b1 && C2===1'b0)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && C1===1'b0 && C2===1'b0)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && C1===1'b0 && C2===1'b1)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && C1===1'b1 && C2===1'b0)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      ifnone
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0 && C1===1'b0 && C2===1'b0)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0 && C1===1'b0 && C2===1'b1)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0 && C1===1'b1 && C2===1'b0)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && C1===1'b0 && C2===1'b0)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && C1===1'b0 && C2===1'b1)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && C1===1'b1 && C2===1'b0)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && C1===1'b0 && C2===1'b0)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && C1===1'b0 && C2===1'b1)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && C1===1'b1 && C2===1'b0)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      ifnone
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0 && B1===1'b0 && B2===1'b0)
      // comb arc C1 --> X
      (C1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0 && B1===1'b0 && B2===1'b1)
      // comb arc C1 --> X
      (C1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0 && B1===1'b1 && B2===1'b0)
      // comb arc C1 --> X
      (C1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && B1===1'b0 && B2===1'b0)
      // comb arc C1 --> X
      (C1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && B1===1'b0 && B2===1'b1)
      // comb arc C1 --> X
      (C1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && B1===1'b1 && B2===1'b0)
      // comb arc C1 --> X
      (C1 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && B1===1'b0 && B2===1'b0)
      // comb arc C1 --> X
      (C1 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && B1===1'b0 && B2===1'b1)
      // comb arc C1 --> X
      (C1 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && B1===1'b1 && B2===1'b0)
      // comb arc C1 --> X
      (C1 => X) = (1.0,1.0);
      
      ifnone
      // comb arc C1 --> X
      (C1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0 && B1===1'b0 && B2===1'b0)
      // comb arc C2 --> X
      (C2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0 && B1===1'b0 && B2===1'b1)
      // comb arc C2 --> X
      (C2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0 && B1===1'b1 && B2===1'b0)
      // comb arc C2 --> X
      (C2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && B1===1'b0 && B2===1'b0)
      // comb arc C2 --> X
      (C2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && B1===1'b0 && B2===1'b1)
      // comb arc C2 --> X
      (C2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && B1===1'b1 && B2===1'b0)
      // comb arc C2 --> X
      (C2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && B1===1'b0 && B2===1'b0)
      // comb arc C2 --> X
      (C2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && B1===1'b0 && B2===1'b1)
      // comb arc C2 --> X
      (C2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && B1===1'b1 && B2===1'b0)
      // comb arc C2 --> X
      (C2 => X) = (1.0,1.0);
      
      ifnone
      // comb arc C2 --> X
      (C2 => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_AO22_0P5( X, A1, A2, B1, B2 );
input A1, A2, B1, B2;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_AO22_0P5_func SAEDRVT14_AO22_0P5_behav_inst(.X(X),.A1(A1),.A2(A2),.B1(B1),.B2(B2));
`else
   SAEDRVT14_AO22_0P5_func SAEDRVT14_AO22_0P5_inst(.X(X),.A1(A1),.A2(A2),.B1(B1),.B2(B2));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      if(B1===1'b0 && B2===1'b0)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b1)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b0)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      ifnone
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b0)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b1)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b0)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      ifnone
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      ifnone
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      ifnone
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_AO22_0P75( X, A1, A2, B1, B2 );
input A1, A2, B1, B2;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_AO22_0P75_func SAEDRVT14_AO22_0P75_behav_inst(.X(X),.A1(A1),.A2(A2),.B1(B1),.B2(B2));
`else
   SAEDRVT14_AO22_0P75_func SAEDRVT14_AO22_0P75_inst(.X(X),.A1(A1),.A2(A2),.B1(B1),.B2(B2));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      if(B1===1'b0 && B2===1'b0)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b1)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b0)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      ifnone
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b0)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b1)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b0)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      ifnone
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      ifnone
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      ifnone
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_AO22_1( X, A1, A2, B1, B2 );
input A1, A2, B1, B2;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_AO22_1_func SAEDRVT14_AO22_1_behav_inst(.X(X),.A1(A1),.A2(A2),.B1(B1),.B2(B2));
`else
   SAEDRVT14_AO22_1_func SAEDRVT14_AO22_1_inst(.X(X),.A1(A1),.A2(A2),.B1(B1),.B2(B2));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      if(B1===1'b0 && B2===1'b0)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b1)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b0)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      ifnone
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b0)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b1)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b0)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      ifnone
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      ifnone
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      ifnone
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_AO22_2( X, A1, A2, B1, B2 );
input A1, A2, B1, B2;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_AO22_2_func SAEDRVT14_AO22_2_behav_inst(.X(X),.A1(A1),.A2(A2),.B1(B1),.B2(B2));
`else
   SAEDRVT14_AO22_2_func SAEDRVT14_AO22_2_inst(.X(X),.A1(A1),.A2(A2),.B1(B1),.B2(B2));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      if(B1===1'b0 && B2===1'b0)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b1)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b0)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      ifnone
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b0)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b1)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b0)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      ifnone
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      ifnone
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      ifnone
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_AO22_4( X, A1, A2, B1, B2 );
input A1, A2, B1, B2;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_AO22_4_func SAEDRVT14_AO22_4_behav_inst(.X(X),.A1(A1),.A2(A2),.B1(B1),.B2(B2));
`else
   SAEDRVT14_AO22_4_func SAEDRVT14_AO22_4_inst(.X(X),.A1(A1),.A2(A2),.B1(B1),.B2(B2));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      if(B1===1'b0 && B2===1'b0)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b1)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b0)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      ifnone
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b0)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b1)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b0)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      ifnone
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      ifnone
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      ifnone
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_AO2BB2_0P5( X, A1, A2, B1, B2 );
input A1, A2, B1, B2;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_AO2BB2_0P5_func SAEDRVT14_AO2BB2_0P5_behav_inst(.X(X),.A1(A1),.A2(A2),.B1(B1),.B2(B2));
`else
   SAEDRVT14_AO2BB2_0P5_func SAEDRVT14_AO2BB2_0P5_inst(.X(X),.A1(A1),.A2(A2),.B1(B1),.B2(B2));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      if(B1===1'b0 && B2===1'b0)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b1)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b0)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      ifnone
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b0)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b1)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b0)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      ifnone
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      ifnone
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      ifnone
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_AO2BB2_1( X, A1, A2, B1, B2 );
input A1, A2, B1, B2;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_AO2BB2_1_func SAEDRVT14_AO2BB2_1_behav_inst(.X(X),.A1(A1),.A2(A2),.B1(B1),.B2(B2));
`else
   SAEDRVT14_AO2BB2_1_func SAEDRVT14_AO2BB2_1_inst(.X(X),.A1(A1),.A2(A2),.B1(B1),.B2(B2));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      if(B1===1'b0 && B2===1'b0)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b1)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b0)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      ifnone
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b0)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b1)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b0)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      ifnone
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      ifnone
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      ifnone
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_AO2BB2_2( X, A1, A2, B1, B2 );
input A1, A2, B1, B2;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_AO2BB2_2_func SAEDRVT14_AO2BB2_2_behav_inst(.X(X),.A1(A1),.A2(A2),.B1(B1),.B2(B2));
`else
   SAEDRVT14_AO2BB2_2_func SAEDRVT14_AO2BB2_2_inst(.X(X),.A1(A1),.A2(A2),.B1(B1),.B2(B2));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      if(B1===1'b0 && B2===1'b0)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b1)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b0)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      ifnone
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b0)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b1)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b0)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      ifnone
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      ifnone
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      ifnone
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_AO2BB2_4( X, A1, A2, B1, B2 );
input A1, A2, B1, B2;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_AO2BB2_4_func SAEDRVT14_AO2BB2_4_behav_inst(.X(X),.A1(A1),.A2(A2),.B1(B1),.B2(B2));
`else
   SAEDRVT14_AO2BB2_4_func SAEDRVT14_AO2BB2_4_inst(.X(X),.A1(A1),.A2(A2),.B1(B1),.B2(B2));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      if(B1===1'b0 && B2===1'b0)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b1)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b0)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      ifnone
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b0)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b1)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b0)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      ifnone
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      ifnone
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      ifnone
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_AO2BB2_V1_0P5( X, A1, A2, B1, B2 );
input A1, A2, B1, B2;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_AO2BB2_V1_0P5_func SAEDRVT14_AO2BB2_V1_0P5_behav_inst(.X(X),.A1(A1),.A2(A2),.B1(B1),.B2(B2));
`else
   SAEDRVT14_AO2BB2_V1_0P5_func SAEDRVT14_AO2BB2_V1_0P5_inst(.X(X),.A1(A1),.A2(A2),.B1(B1),.B2(B2));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      if(B1===1'b0 && B2===1'b0)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b1)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b0)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      ifnone
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b0)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b1)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b0)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      ifnone
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      ifnone
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      ifnone
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_AO2BB2_V1_0P75( X, A1, A2, B1, B2 );
input A1, A2, B1, B2;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_AO2BB2_V1_0P75_func SAEDRVT14_AO2BB2_V1_0P75_behav_inst(.X(X),.A1(A1),.A2(A2),.B1(B1),.B2(B2));
`else
   SAEDRVT14_AO2BB2_V1_0P75_func SAEDRVT14_AO2BB2_V1_0P75_inst(.X(X),.A1(A1),.A2(A2),.B1(B1),.B2(B2));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      if(B1===1'b0 && B2===1'b0)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b1)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b0)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      ifnone
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b0)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b1)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b0)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      ifnone
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      ifnone
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      ifnone
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_AO2BB2_V1_1( X, A1, A2, B1, B2 );
input A1, A2, B1, B2;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_AO2BB2_V1_1_func SAEDRVT14_AO2BB2_V1_1_behav_inst(.X(X),.A1(A1),.A2(A2),.B1(B1),.B2(B2));
`else
   SAEDRVT14_AO2BB2_V1_1_func SAEDRVT14_AO2BB2_V1_1_inst(.X(X),.A1(A1),.A2(A2),.B1(B1),.B2(B2));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      if(B1===1'b0 && B2===1'b0)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b1)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b0)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      ifnone
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b0)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b1)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b0)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      ifnone
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      ifnone
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      ifnone
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_AO2BB2_V1_2( X, A1, A2, B1, B2 );
input A1, A2, B1, B2;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_AO2BB2_V1_2_func SAEDRVT14_AO2BB2_V1_2_behav_inst(.X(X),.A1(A1),.A2(A2),.B1(B1),.B2(B2));
`else
   SAEDRVT14_AO2BB2_V1_2_func SAEDRVT14_AO2BB2_V1_2_inst(.X(X),.A1(A1),.A2(A2),.B1(B1),.B2(B2));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      if(B1===1'b0 && B2===1'b0)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b1)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b0)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      ifnone
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b0)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b1)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b0)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      ifnone
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      ifnone
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      ifnone
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_AO2BB2_V1_4( X, A1, A2, B1, B2 );
input A1, A2, B1, B2;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_AO2BB2_V1_4_func SAEDRVT14_AO2BB2_V1_4_behav_inst(.X(X),.A1(A1),.A2(A2),.B1(B1),.B2(B2));
`else
   SAEDRVT14_AO2BB2_V1_4_func SAEDRVT14_AO2BB2_V1_4_inst(.X(X),.A1(A1),.A2(A2),.B1(B1),.B2(B2));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      if(B1===1'b0 && B2===1'b0)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b1)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b0)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      ifnone
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b0)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b1)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b0)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      ifnone
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      ifnone
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      ifnone
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_AO31_1( X, A1, A2, A3, B );
input A1, A2, A3, B;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_AO31_1_func SAEDRVT14_AO31_1_behav_inst(.X(X),.A1(A1),.A2(A2),.A3(A3),.B(B));
`else
   SAEDRVT14_AO31_1_func SAEDRVT14_AO31_1_inst(.X(X),.A1(A1),.A2(A2),.A3(A3),.B(B));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      // comb arc A3 --> X
      (A3 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0 && A3===1'b0)
      // comb arc B --> X
      (B => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0 && A3===1'b1)
      // comb arc B --> X
      (B => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && A3===1'b0)
      // comb arc B --> X
      (B => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && A3===1'b1)
      // comb arc B --> X
      (B => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && A3===1'b0)
      // comb arc B --> X
      (B => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && A3===1'b1)
      // comb arc B --> X
      (B => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1 && A3===1'b0)
      // comb arc B --> X
      (B => X) = (1.0,1.0);
      
      ifnone
      // comb arc B --> X
      (B => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_AO31_2( X, A1, A2, A3, B );
input A1, A2, A3, B;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_AO31_2_func SAEDRVT14_AO31_2_behav_inst(.X(X),.A1(A1),.A2(A2),.A3(A3),.B(B));
`else
   SAEDRVT14_AO31_2_func SAEDRVT14_AO31_2_inst(.X(X),.A1(A1),.A2(A2),.A3(A3),.B(B));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      // comb arc A3 --> X
      (A3 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0 && A3===1'b0)
      // comb arc B --> X
      (B => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0 && A3===1'b1)
      // comb arc B --> X
      (B => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && A3===1'b0)
      // comb arc B --> X
      (B => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && A3===1'b1)
      // comb arc B --> X
      (B => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && A3===1'b0)
      // comb arc B --> X
      (B => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && A3===1'b1)
      // comb arc B --> X
      (B => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1 && A3===1'b0)
      // comb arc B --> X
      (B => X) = (1.0,1.0);
      
      ifnone
      // comb arc B --> X
      (B => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_AO31_4( X, A1, A2, A3, B );
input A1, A2, A3, B;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_AO31_4_func SAEDRVT14_AO31_4_behav_inst(.X(X),.A1(A1),.A2(A2),.A3(A3),.B(B));
`else
   SAEDRVT14_AO31_4_func SAEDRVT14_AO31_4_inst(.X(X),.A1(A1),.A2(A2),.A3(A3),.B(B));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      // comb arc A3 --> X
      (A3 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0 && A3===1'b0)
      // comb arc B --> X
      (B => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0 && A3===1'b1)
      // comb arc B --> X
      (B => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && A3===1'b0)
      // comb arc B --> X
      (B => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && A3===1'b1)
      // comb arc B --> X
      (B => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && A3===1'b0)
      // comb arc B --> X
      (B => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && A3===1'b1)
      // comb arc B --> X
      (B => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1 && A3===1'b0)
      // comb arc B --> X
      (B => X) = (1.0,1.0);
      
      ifnone
      // comb arc B --> X
      (B => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_AO31_U_0P5( X, A1, A2, A3, B );
input A1, A2, A3, B;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_AO31_U_0P5_func SAEDRVT14_AO31_U_0P5_behav_inst(.X(X),.A1(A1),.A2(A2),.A3(A3),.B(B));
`else
   SAEDRVT14_AO31_U_0P5_func SAEDRVT14_AO31_U_0P5_inst(.X(X),.A1(A1),.A2(A2),.A3(A3),.B(B));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      // comb arc A3 --> X
      (A3 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0 && A3===1'b0)
      // comb arc B --> X
      (B => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0 && A3===1'b1)
      // comb arc B --> X
      (B => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && A3===1'b0)
      // comb arc B --> X
      (B => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && A3===1'b1)
      // comb arc B --> X
      (B => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && A3===1'b0)
      // comb arc B --> X
      (B => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && A3===1'b1)
      // comb arc B --> X
      (B => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1 && A3===1'b0)
      // comb arc B --> X
      (B => X) = (1.0,1.0);
      
      ifnone
      // comb arc B --> X
      (B => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_AO32_1( X, A1, A2, A3, B1, B2 );
input A1, A2, A3, B1, B2;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_AO32_1_func SAEDRVT14_AO32_1_behav_inst(.X(X),.A1(A1),.A2(A2),.A3(A3),.B1(B1),.B2(B2));
`else
   SAEDRVT14_AO32_1_func SAEDRVT14_AO32_1_inst(.X(X),.A1(A1),.A2(A2),.A3(A3),.B1(B1),.B2(B2));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      if(B1===1'b0 && B2===1'b0)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b1)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b0)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      ifnone
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b0)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b1)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b0)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      ifnone
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b0)
      // comb arc A3 --> X
      (A3 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b1)
      // comb arc A3 --> X
      (A3 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b0)
      // comb arc A3 --> X
      (A3 => X) = (1.0,1.0);
      
      ifnone
      // comb arc A3 --> X
      (A3 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0 && A3===1'b0)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0 && A3===1'b1)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && A3===1'b0)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && A3===1'b1)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && A3===1'b0)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && A3===1'b1)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1 && A3===1'b0)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      ifnone
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0 && A3===1'b0)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0 && A3===1'b1)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && A3===1'b0)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && A3===1'b1)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && A3===1'b0)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && A3===1'b1)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1 && A3===1'b0)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      ifnone
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_AO32_2( X, A1, A2, A3, B1, B2 );
input A1, A2, A3, B1, B2;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_AO32_2_func SAEDRVT14_AO32_2_behav_inst(.X(X),.A1(A1),.A2(A2),.A3(A3),.B1(B1),.B2(B2));
`else
   SAEDRVT14_AO32_2_func SAEDRVT14_AO32_2_inst(.X(X),.A1(A1),.A2(A2),.A3(A3),.B1(B1),.B2(B2));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      if(B1===1'b0 && B2===1'b0)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b1)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b0)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      ifnone
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b0)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b1)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b0)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      ifnone
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b0)
      // comb arc A3 --> X
      (A3 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b1)
      // comb arc A3 --> X
      (A3 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b0)
      // comb arc A3 --> X
      (A3 => X) = (1.0,1.0);
      
      ifnone
      // comb arc A3 --> X
      (A3 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0 && A3===1'b0)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0 && A3===1'b1)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && A3===1'b0)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && A3===1'b1)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && A3===1'b0)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && A3===1'b1)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1 && A3===1'b0)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      ifnone
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0 && A3===1'b0)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0 && A3===1'b1)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && A3===1'b0)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && A3===1'b1)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && A3===1'b0)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && A3===1'b1)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1 && A3===1'b0)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      ifnone
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_AO32_4( X, A1, A2, A3, B1, B2 );
input A1, A2, A3, B1, B2;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_AO32_4_func SAEDRVT14_AO32_4_behav_inst(.X(X),.A1(A1),.A2(A2),.A3(A3),.B1(B1),.B2(B2));
`else
   SAEDRVT14_AO32_4_func SAEDRVT14_AO32_4_inst(.X(X),.A1(A1),.A2(A2),.A3(A3),.B1(B1),.B2(B2));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      if(B1===1'b0 && B2===1'b0)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b1)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b0)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      ifnone
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b0)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b1)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b0)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      ifnone
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b0)
      // comb arc A3 --> X
      (A3 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b1)
      // comb arc A3 --> X
      (A3 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b0)
      // comb arc A3 --> X
      (A3 => X) = (1.0,1.0);
      
      ifnone
      // comb arc A3 --> X
      (A3 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0 && A3===1'b0)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0 && A3===1'b1)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && A3===1'b0)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && A3===1'b1)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && A3===1'b0)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && A3===1'b1)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1 && A3===1'b0)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      ifnone
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0 && A3===1'b0)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0 && A3===1'b1)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && A3===1'b0)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && A3===1'b1)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && A3===1'b0)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && A3===1'b1)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1 && A3===1'b0)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      ifnone
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_AO32_U_0P5( X, A1, A2, A3, B1, B2 );
input A1, A2, A3, B1, B2;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_AO32_U_0P5_func SAEDRVT14_AO32_U_0P5_behav_inst(.X(X),.A1(A1),.A2(A2),.A3(A3),.B1(B1),.B2(B2));
`else
   SAEDRVT14_AO32_U_0P5_func SAEDRVT14_AO32_U_0P5_inst(.X(X),.A1(A1),.A2(A2),.A3(A3),.B1(B1),.B2(B2));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      if(B1===1'b0 && B2===1'b0)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b1)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b0)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      ifnone
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b0)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b1)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b0)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      ifnone
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b0)
      // comb arc A3 --> X
      (A3 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b1)
      // comb arc A3 --> X
      (A3 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b0)
      // comb arc A3 --> X
      (A3 => X) = (1.0,1.0);
      
      ifnone
      // comb arc A3 --> X
      (A3 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0 && A3===1'b0)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0 && A3===1'b1)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && A3===1'b0)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && A3===1'b1)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && A3===1'b0)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && A3===1'b1)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1 && A3===1'b0)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      ifnone
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0 && A3===1'b0)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0 && A3===1'b1)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && A3===1'b0)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && A3===1'b1)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && A3===1'b0)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && A3===1'b1)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1 && A3===1'b0)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      ifnone
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_AO33_1( X, A1, A2, A3, B1, B2, B3 );
input A1, A2, A3, B1, B2, B3;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_AO33_1_func SAEDRVT14_AO33_1_behav_inst(.X(X),.A1(A1),.A2(A2),.A3(A3),.B1(B1),.B2(B2),.B3(B3));
`else
   SAEDRVT14_AO33_1_func SAEDRVT14_AO33_1_inst(.X(X),.A1(A1),.A2(A2),.A3(A3),.B1(B1),.B2(B2),.B3(B3));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      if(B1===1'b0 && B2===1'b0 && B3===1'b0)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b0 && B3===1'b1)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b1 && B3===1'b0)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b1 && B3===1'b1)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b0 && B3===1'b0)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b0 && B3===1'b1)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b1 && B3===1'b0)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      ifnone
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b0 && B3===1'b0)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b0 && B3===1'b1)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b1 && B3===1'b0)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b1 && B3===1'b1)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b0 && B3===1'b0)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b0 && B3===1'b1)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b1 && B3===1'b0)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      ifnone
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b0 && B3===1'b0)
      // comb arc A3 --> X
      (A3 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b0 && B3===1'b1)
      // comb arc A3 --> X
      (A3 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b1 && B3===1'b0)
      // comb arc A3 --> X
      (A3 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b1 && B3===1'b1)
      // comb arc A3 --> X
      (A3 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b0 && B3===1'b0)
      // comb arc A3 --> X
      (A3 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b0 && B3===1'b1)
      // comb arc A3 --> X
      (A3 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b1 && B3===1'b0)
      // comb arc A3 --> X
      (A3 => X) = (1.0,1.0);
      
      ifnone
      // comb arc A3 --> X
      (A3 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0 && A3===1'b0)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0 && A3===1'b1)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && A3===1'b0)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && A3===1'b1)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && A3===1'b0)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && A3===1'b1)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1 && A3===1'b0)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      ifnone
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0 && A3===1'b0)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0 && A3===1'b1)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && A3===1'b0)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && A3===1'b1)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && A3===1'b0)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && A3===1'b1)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1 && A3===1'b0)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      ifnone
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0 && A3===1'b0)
      // comb arc B3 --> X
      (B3 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0 && A3===1'b1)
      // comb arc B3 --> X
      (B3 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && A3===1'b0)
      // comb arc B3 --> X
      (B3 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && A3===1'b1)
      // comb arc B3 --> X
      (B3 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && A3===1'b0)
      // comb arc B3 --> X
      (B3 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && A3===1'b1)
      // comb arc B3 --> X
      (B3 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1 && A3===1'b0)
      // comb arc B3 --> X
      (B3 => X) = (1.0,1.0);
      
      ifnone
      // comb arc B3 --> X
      (B3 => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_AO33_2( X, A1, A2, A3, B1, B2, B3 );
input A1, A2, A3, B1, B2, B3;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_AO33_2_func SAEDRVT14_AO33_2_behav_inst(.X(X),.A1(A1),.A2(A2),.A3(A3),.B1(B1),.B2(B2),.B3(B3));
`else
   SAEDRVT14_AO33_2_func SAEDRVT14_AO33_2_inst(.X(X),.A1(A1),.A2(A2),.A3(A3),.B1(B1),.B2(B2),.B3(B3));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      if(B1===1'b0 && B2===1'b0 && B3===1'b0)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b0 && B3===1'b1)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b1 && B3===1'b0)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b1 && B3===1'b1)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b0 && B3===1'b0)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b0 && B3===1'b1)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b1 && B3===1'b0)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      ifnone
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b0 && B3===1'b0)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b0 && B3===1'b1)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b1 && B3===1'b0)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b1 && B3===1'b1)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b0 && B3===1'b0)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b0 && B3===1'b1)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b1 && B3===1'b0)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      ifnone
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b0 && B3===1'b0)
      // comb arc A3 --> X
      (A3 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b0 && B3===1'b1)
      // comb arc A3 --> X
      (A3 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b1 && B3===1'b0)
      // comb arc A3 --> X
      (A3 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b1 && B3===1'b1)
      // comb arc A3 --> X
      (A3 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b0 && B3===1'b0)
      // comb arc A3 --> X
      (A3 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b0 && B3===1'b1)
      // comb arc A3 --> X
      (A3 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b1 && B3===1'b0)
      // comb arc A3 --> X
      (A3 => X) = (1.0,1.0);
      
      ifnone
      // comb arc A3 --> X
      (A3 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0 && A3===1'b0)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0 && A3===1'b1)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && A3===1'b0)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && A3===1'b1)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && A3===1'b0)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && A3===1'b1)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1 && A3===1'b0)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      ifnone
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0 && A3===1'b0)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0 && A3===1'b1)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && A3===1'b0)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && A3===1'b1)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && A3===1'b0)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && A3===1'b1)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1 && A3===1'b0)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      ifnone
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0 && A3===1'b0)
      // comb arc B3 --> X
      (B3 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0 && A3===1'b1)
      // comb arc B3 --> X
      (B3 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && A3===1'b0)
      // comb arc B3 --> X
      (B3 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && A3===1'b1)
      // comb arc B3 --> X
      (B3 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && A3===1'b0)
      // comb arc B3 --> X
      (B3 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && A3===1'b1)
      // comb arc B3 --> X
      (B3 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1 && A3===1'b0)
      // comb arc B3 --> X
      (B3 => X) = (1.0,1.0);
      
      ifnone
      // comb arc B3 --> X
      (B3 => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_AO33_4( X, A1, A2, A3, B1, B2, B3 );
input A1, A2, A3, B1, B2, B3;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_AO33_4_func SAEDRVT14_AO33_4_behav_inst(.X(X),.A1(A1),.A2(A2),.A3(A3),.B1(B1),.B2(B2),.B3(B3));
`else
   SAEDRVT14_AO33_4_func SAEDRVT14_AO33_4_inst(.X(X),.A1(A1),.A2(A2),.A3(A3),.B1(B1),.B2(B2),.B3(B3));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      if(B1===1'b0 && B2===1'b0 && B3===1'b0)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b0 && B3===1'b1)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b1 && B3===1'b0)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b1 && B3===1'b1)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b0 && B3===1'b0)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b0 && B3===1'b1)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b1 && B3===1'b0)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      ifnone
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b0 && B3===1'b0)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b0 && B3===1'b1)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b1 && B3===1'b0)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b1 && B3===1'b1)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b0 && B3===1'b0)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b0 && B3===1'b1)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b1 && B3===1'b0)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      ifnone
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b0 && B3===1'b0)
      // comb arc A3 --> X
      (A3 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b0 && B3===1'b1)
      // comb arc A3 --> X
      (A3 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b1 && B3===1'b0)
      // comb arc A3 --> X
      (A3 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b1 && B3===1'b1)
      // comb arc A3 --> X
      (A3 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b0 && B3===1'b0)
      // comb arc A3 --> X
      (A3 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b0 && B3===1'b1)
      // comb arc A3 --> X
      (A3 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b1 && B3===1'b0)
      // comb arc A3 --> X
      (A3 => X) = (1.0,1.0);
      
      ifnone
      // comb arc A3 --> X
      (A3 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0 && A3===1'b0)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0 && A3===1'b1)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && A3===1'b0)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && A3===1'b1)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && A3===1'b0)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && A3===1'b1)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1 && A3===1'b0)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      ifnone
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0 && A3===1'b0)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0 && A3===1'b1)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && A3===1'b0)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && A3===1'b1)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && A3===1'b0)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && A3===1'b1)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1 && A3===1'b0)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      ifnone
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0 && A3===1'b0)
      // comb arc B3 --> X
      (B3 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0 && A3===1'b1)
      // comb arc B3 --> X
      (B3 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && A3===1'b0)
      // comb arc B3 --> X
      (B3 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && A3===1'b1)
      // comb arc B3 --> X
      (B3 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && A3===1'b0)
      // comb arc B3 --> X
      (B3 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && A3===1'b1)
      // comb arc B3 --> X
      (B3 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1 && A3===1'b0)
      // comb arc B3 --> X
      (B3 => X) = (1.0,1.0);
      
      ifnone
      // comb arc B3 --> X
      (B3 => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_AO33_U_0P5( X, A1, A2, A3, B1, B2, B3 );
input A1, A2, A3, B1, B2, B3;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_AO33_U_0P5_func SAEDRVT14_AO33_U_0P5_behav_inst(.X(X),.A1(A1),.A2(A2),.A3(A3),.B1(B1),.B2(B2),.B3(B3));
`else
   SAEDRVT14_AO33_U_0P5_func SAEDRVT14_AO33_U_0P5_inst(.X(X),.A1(A1),.A2(A2),.A3(A3),.B1(B1),.B2(B2),.B3(B3));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      if(B1===1'b0 && B2===1'b0 && B3===1'b0)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b0 && B3===1'b1)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b1 && B3===1'b0)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b1 && B3===1'b1)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b0 && B3===1'b0)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b0 && B3===1'b1)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b1 && B3===1'b0)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      ifnone
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b0 && B3===1'b0)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b0 && B3===1'b1)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b1 && B3===1'b0)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b1 && B3===1'b1)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b0 && B3===1'b0)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b0 && B3===1'b1)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b1 && B3===1'b0)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      ifnone
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b0 && B3===1'b0)
      // comb arc A3 --> X
      (A3 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b0 && B3===1'b1)
      // comb arc A3 --> X
      (A3 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b1 && B3===1'b0)
      // comb arc A3 --> X
      (A3 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b1 && B3===1'b1)
      // comb arc A3 --> X
      (A3 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b0 && B3===1'b0)
      // comb arc A3 --> X
      (A3 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b0 && B3===1'b1)
      // comb arc A3 --> X
      (A3 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b1 && B3===1'b0)
      // comb arc A3 --> X
      (A3 => X) = (1.0,1.0);
      
      ifnone
      // comb arc A3 --> X
      (A3 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0 && A3===1'b0)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0 && A3===1'b1)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && A3===1'b0)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && A3===1'b1)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && A3===1'b0)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && A3===1'b1)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1 && A3===1'b0)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      ifnone
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0 && A3===1'b0)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0 && A3===1'b1)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && A3===1'b0)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && A3===1'b1)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && A3===1'b0)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && A3===1'b1)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1 && A3===1'b0)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      ifnone
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0 && A3===1'b0)
      // comb arc B3 --> X
      (B3 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0 && A3===1'b1)
      // comb arc B3 --> X
      (B3 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && A3===1'b0)
      // comb arc B3 --> X
      (B3 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && A3===1'b1)
      // comb arc B3 --> X
      (B3 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && A3===1'b0)
      // comb arc B3 --> X
      (B3 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && A3===1'b1)
      // comb arc B3 --> X
      (B3 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1 && A3===1'b0)
      // comb arc B3 --> X
      (B3 => X) = (1.0,1.0);
      
      ifnone
      // comb arc B3 --> X
      (B3 => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_AOI211_0P5( X, A1, A2, B1, B2 );
input A1, A2, B1, B2;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_AOI211_0P5_func SAEDRVT14_AOI211_0P5_behav_inst(.X(X),.A1(A1),.A2(A2),.B1(B1),.B2(B2));
`else
   SAEDRVT14_AOI211_0P5_func SAEDRVT14_AOI211_0P5_inst(.X(X),.A1(A1),.A2(A2),.B1(B1),.B2(B2));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      ifnone
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      ifnone
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_AOI211_1( X, A1, A2, B1, B2 );
input A1, A2, B1, B2;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_AOI211_1_func SAEDRVT14_AOI211_1_behav_inst(.X(X),.A1(A1),.A2(A2),.B1(B1),.B2(B2));
`else
   SAEDRVT14_AOI211_1_func SAEDRVT14_AOI211_1_inst(.X(X),.A1(A1),.A2(A2),.B1(B1),.B2(B2));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      ifnone
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      ifnone
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_AOI211_2( X, A1, A2, B1, B2 );
input A1, A2, B1, B2;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_AOI211_2_func SAEDRVT14_AOI211_2_behav_inst(.X(X),.A1(A1),.A2(A2),.B1(B1),.B2(B2));
`else
   SAEDRVT14_AOI211_2_func SAEDRVT14_AOI211_2_inst(.X(X),.A1(A1),.A2(A2),.B1(B1),.B2(B2));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      ifnone
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      ifnone
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_AOI211_4( X, A1, A2, B1, B2 );
input A1, A2, B1, B2;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_AOI211_4_func SAEDRVT14_AOI211_4_behav_inst(.X(X),.A1(A1),.A2(A2),.B1(B1),.B2(B2));
`else
   SAEDRVT14_AOI211_4_func SAEDRVT14_AOI211_4_inst(.X(X),.A1(A1),.A2(A2),.B1(B1),.B2(B2));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      ifnone
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      ifnone
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_AOI21_0P5( X, A1, A2, B );
input A1, A2, B;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_AOI21_0P5_func SAEDRVT14_AOI21_0P5_behav_inst(.X(X),.A1(A1),.A2(A2),.B(B));
`else
   SAEDRVT14_AOI21_0P5_func SAEDRVT14_AOI21_0P5_inst(.X(X),.A1(A1),.A2(A2),.B(B));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0)
      // comb arc B --> X
      (B => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1)
      // comb arc B --> X
      (B => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0)
      // comb arc B --> X
      (B => X) = (1.0,1.0);
      
      ifnone
      // comb arc B --> X
      (B => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_AOI21_0P75( X, A1, A2, B );
input A1, A2, B;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_AOI21_0P75_func SAEDRVT14_AOI21_0P75_behav_inst(.X(X),.A1(A1),.A2(A2),.B(B));
`else
   SAEDRVT14_AOI21_0P75_func SAEDRVT14_AOI21_0P75_inst(.X(X),.A1(A1),.A2(A2),.B(B));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0)
      // comb arc B --> X
      (B => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1)
      // comb arc B --> X
      (B => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0)
      // comb arc B --> X
      (B => X) = (1.0,1.0);
      
      ifnone
      // comb arc B --> X
      (B => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_AOI21_1( X, A1, A2, B );
input A1, A2, B;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_AOI21_1_func SAEDRVT14_AOI21_1_behav_inst(.X(X),.A1(A1),.A2(A2),.B(B));
`else
   SAEDRVT14_AOI21_1_func SAEDRVT14_AOI21_1_inst(.X(X),.A1(A1),.A2(A2),.B(B));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0)
      // comb arc B --> X
      (B => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1)
      // comb arc B --> X
      (B => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0)
      // comb arc B --> X
      (B => X) = (1.0,1.0);
      
      ifnone
      // comb arc B --> X
      (B => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_AOI21_1P5( X, A1, A2, B );
input A1, A2, B;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_AOI21_1P5_func SAEDRVT14_AOI21_1P5_behav_inst(.X(X),.A1(A1),.A2(A2),.B(B));
`else
   SAEDRVT14_AOI21_1P5_func SAEDRVT14_AOI21_1P5_inst(.X(X),.A1(A1),.A2(A2),.B(B));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0)
      // comb arc B --> X
      (B => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1)
      // comb arc B --> X
      (B => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0)
      // comb arc B --> X
      (B => X) = (1.0,1.0);
      
      ifnone
      // comb arc B --> X
      (B => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_AOI21_2( X, A1, A2, B );
input A1, A2, B;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_AOI21_2_func SAEDRVT14_AOI21_2_behav_inst(.X(X),.A1(A1),.A2(A2),.B(B));
`else
   SAEDRVT14_AOI21_2_func SAEDRVT14_AOI21_2_inst(.X(X),.A1(A1),.A2(A2),.B(B));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0)
      // comb arc B --> X
      (B => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1)
      // comb arc B --> X
      (B => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0)
      // comb arc B --> X
      (B => X) = (1.0,1.0);
      
      ifnone
      // comb arc B --> X
      (B => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_AOI21_3( X, A1, A2, B );
input A1, A2, B;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_AOI21_3_func SAEDRVT14_AOI21_3_behav_inst(.X(X),.A1(A1),.A2(A2),.B(B));
`else
   SAEDRVT14_AOI21_3_func SAEDRVT14_AOI21_3_inst(.X(X),.A1(A1),.A2(A2),.B(B));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0)
      // comb arc B --> X
      (B => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1)
      // comb arc B --> X
      (B => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0)
      // comb arc B --> X
      (B => X) = (1.0,1.0);
      
      ifnone
      // comb arc B --> X
      (B => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_AOI21_4( X, A1, A2, B );
input A1, A2, B;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_AOI21_4_func SAEDRVT14_AOI21_4_behav_inst(.X(X),.A1(A1),.A2(A2),.B(B));
`else
   SAEDRVT14_AOI21_4_func SAEDRVT14_AOI21_4_inst(.X(X),.A1(A1),.A2(A2),.B(B));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0)
      // comb arc B --> X
      (B => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1)
      // comb arc B --> X
      (B => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0)
      // comb arc B --> X
      (B => X) = (1.0,1.0);
      
      ifnone
      // comb arc B --> X
      (B => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_AOI21_6( X, A1, A2, B );
input A1, A2, B;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_AOI21_6_func SAEDRVT14_AOI21_6_behav_inst(.X(X),.A1(A1),.A2(A2),.B(B));
`else
   SAEDRVT14_AOI21_6_func SAEDRVT14_AOI21_6_inst(.X(X),.A1(A1),.A2(A2),.B(B));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0)
      // comb arc B --> X
      (B => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1)
      // comb arc B --> X
      (B => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0)
      // comb arc B --> X
      (B => X) = (1.0,1.0);
      
      ifnone
      // comb arc B --> X
      (B => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_AOI21_8( X, A1, A2, B );
input A1, A2, B;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_AOI21_8_func SAEDRVT14_AOI21_8_behav_inst(.X(X),.A1(A1),.A2(A2),.B(B));
`else
   SAEDRVT14_AOI21_8_func SAEDRVT14_AOI21_8_inst(.X(X),.A1(A1),.A2(A2),.B(B));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0)
      // comb arc B --> X
      (B => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1)
      // comb arc B --> X
      (B => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0)
      // comb arc B --> X
      (B => X) = (1.0,1.0);
      
      ifnone
      // comb arc B --> X
      (B => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_AOI21_ECO_1( X, A1, A2, B );
input A1, A2, B;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_AOI21_ECO_1_func SAEDRVT14_AOI21_ECO_1_behav_inst(.X(X),.A1(A1),.A2(A2),.B(B));
`else
   SAEDRVT14_AOI21_ECO_1_func SAEDRVT14_AOI21_ECO_1_inst(.X(X),.A1(A1),.A2(A2),.B(B));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0)
      // comb arc B --> X
      (B => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1)
      // comb arc B --> X
      (B => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0)
      // comb arc B --> X
      (B => X) = (1.0,1.0);
      
      ifnone
      // comb arc B --> X
      (B => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_AOI21_V1_4( X, A1, A2, B );
input A1, A2, B;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_AOI21_V1_4_func SAEDRVT14_AOI21_V1_4_behav_inst(.X(X),.A1(A1),.A2(A2),.B(B));
`else
   SAEDRVT14_AOI21_V1_4_func SAEDRVT14_AOI21_V1_4_inst(.X(X),.A1(A1),.A2(A2),.B(B));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0)
      // comb arc B --> X
      (B => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1)
      // comb arc B --> X
      (B => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0)
      // comb arc B --> X
      (B => X) = (1.0,1.0);
      
      ifnone
      // comb arc B --> X
      (B => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_AOI21_V1_6( X, A1, A2, B );
input A1, A2, B;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_AOI21_V1_6_func SAEDRVT14_AOI21_V1_6_behav_inst(.X(X),.A1(A1),.A2(A2),.B(B));
`else
   SAEDRVT14_AOI21_V1_6_func SAEDRVT14_AOI21_V1_6_inst(.X(X),.A1(A1),.A2(A2),.B(B));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0)
      // comb arc B --> X
      (B => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1)
      // comb arc B --> X
      (B => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0)
      // comb arc B --> X
      (B => X) = (1.0,1.0);
      
      ifnone
      // comb arc B --> X
      (B => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_AOI21_V1_8( X, A1, A2, B );
input A1, A2, B;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_AOI21_V1_8_func SAEDRVT14_AOI21_V1_8_behav_inst(.X(X),.A1(A1),.A2(A2),.B(B));
`else
   SAEDRVT14_AOI21_V1_8_func SAEDRVT14_AOI21_V1_8_inst(.X(X),.A1(A1),.A2(A2),.B(B));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0)
      // comb arc B --> X
      (B => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1)
      // comb arc B --> X
      (B => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0)
      // comb arc B --> X
      (B => X) = (1.0,1.0);
      
      ifnone
      // comb arc B --> X
      (B => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_AOI221_0P5( X, A1, A2, B1, B2, C );
input A1, A2, B1, B2, C;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_AOI221_0P5_func SAEDRVT14_AOI221_0P5_behav_inst(.X(X),.A1(A1),.A2(A2),.B1(B1),.B2(B2),.C(C));
`else
   SAEDRVT14_AOI221_0P5_func SAEDRVT14_AOI221_0P5_inst(.X(X),.A1(A1),.A2(A2),.B1(B1),.B2(B2),.C(C));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      if(B1===1'b0 && B2===1'b0)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b1)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b0)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      ifnone
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b0)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b1)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b0)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      ifnone
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      ifnone
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      ifnone
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0 && B1===1'b0 && B2===1'b0)
      // comb arc C --> X
      (C => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0 && B1===1'b0 && B2===1'b1)
      // comb arc C --> X
      (C => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0 && B1===1'b1 && B2===1'b0)
      // comb arc C --> X
      (C => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && B1===1'b0 && B2===1'b0)
      // comb arc C --> X
      (C => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && B1===1'b0 && B2===1'b1)
      // comb arc C --> X
      (C => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && B1===1'b1 && B2===1'b0)
      // comb arc C --> X
      (C => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && B1===1'b0 && B2===1'b0)
      // comb arc C --> X
      (C => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && B1===1'b0 && B2===1'b1)
      // comb arc C --> X
      (C => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && B1===1'b1 && B2===1'b0)
      // comb arc C --> X
      (C => X) = (1.0,1.0);
      
      ifnone
      // comb arc C --> X
      (C => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_AOI221_1( X, A1, A2, B1, B2, C );
input A1, A2, B1, B2, C;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_AOI221_1_func SAEDRVT14_AOI221_1_behav_inst(.X(X),.A1(A1),.A2(A2),.B1(B1),.B2(B2),.C(C));
`else
   SAEDRVT14_AOI221_1_func SAEDRVT14_AOI221_1_inst(.X(X),.A1(A1),.A2(A2),.B1(B1),.B2(B2),.C(C));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      if(B1===1'b0 && B2===1'b0)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b1)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b0)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      ifnone
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b0)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b1)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b0)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      ifnone
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      ifnone
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      ifnone
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0 && B1===1'b0 && B2===1'b0)
      // comb arc C --> X
      (C => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0 && B1===1'b0 && B2===1'b1)
      // comb arc C --> X
      (C => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0 && B1===1'b1 && B2===1'b0)
      // comb arc C --> X
      (C => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && B1===1'b0 && B2===1'b0)
      // comb arc C --> X
      (C => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && B1===1'b0 && B2===1'b1)
      // comb arc C --> X
      (C => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && B1===1'b1 && B2===1'b0)
      // comb arc C --> X
      (C => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && B1===1'b0 && B2===1'b0)
      // comb arc C --> X
      (C => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && B1===1'b0 && B2===1'b1)
      // comb arc C --> X
      (C => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && B1===1'b1 && B2===1'b0)
      // comb arc C --> X
      (C => X) = (1.0,1.0);
      
      ifnone
      // comb arc C --> X
      (C => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_AOI221_2( X, A1, A2, B1, B2, C );
input A1, A2, B1, B2, C;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_AOI221_2_func SAEDRVT14_AOI221_2_behav_inst(.X(X),.A1(A1),.A2(A2),.B1(B1),.B2(B2),.C(C));
`else
   SAEDRVT14_AOI221_2_func SAEDRVT14_AOI221_2_inst(.X(X),.A1(A1),.A2(A2),.B1(B1),.B2(B2),.C(C));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      if(B1===1'b0 && B2===1'b0)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b1)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b0)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      ifnone
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b0)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b1)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b0)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      ifnone
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      ifnone
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      ifnone
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0 && B1===1'b0 && B2===1'b0)
      // comb arc C --> X
      (C => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0 && B1===1'b0 && B2===1'b1)
      // comb arc C --> X
      (C => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0 && B1===1'b1 && B2===1'b0)
      // comb arc C --> X
      (C => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && B1===1'b0 && B2===1'b0)
      // comb arc C --> X
      (C => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && B1===1'b0 && B2===1'b1)
      // comb arc C --> X
      (C => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && B1===1'b1 && B2===1'b0)
      // comb arc C --> X
      (C => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && B1===1'b0 && B2===1'b0)
      // comb arc C --> X
      (C => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && B1===1'b0 && B2===1'b1)
      // comb arc C --> X
      (C => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && B1===1'b1 && B2===1'b0)
      // comb arc C --> X
      (C => X) = (1.0,1.0);
      
      ifnone
      // comb arc C --> X
      (C => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_AOI221_4( X, A1, A2, B1, B2, C );
input A1, A2, B1, B2, C;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_AOI221_4_func SAEDRVT14_AOI221_4_behav_inst(.X(X),.A1(A1),.A2(A2),.B1(B1),.B2(B2),.C(C));
`else
   SAEDRVT14_AOI221_4_func SAEDRVT14_AOI221_4_inst(.X(X),.A1(A1),.A2(A2),.B1(B1),.B2(B2),.C(C));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      if(B1===1'b0 && B2===1'b0)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b1)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b0)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      ifnone
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b0)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b1)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b0)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      ifnone
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      ifnone
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      ifnone
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0 && B1===1'b0 && B2===1'b0)
      // comb arc C --> X
      (C => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0 && B1===1'b0 && B2===1'b1)
      // comb arc C --> X
      (C => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0 && B1===1'b1 && B2===1'b0)
      // comb arc C --> X
      (C => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && B1===1'b0 && B2===1'b0)
      // comb arc C --> X
      (C => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && B1===1'b0 && B2===1'b1)
      // comb arc C --> X
      (C => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && B1===1'b1 && B2===1'b0)
      // comb arc C --> X
      (C => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && B1===1'b0 && B2===1'b0)
      // comb arc C --> X
      (C => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && B1===1'b0 && B2===1'b1)
      // comb arc C --> X
      (C => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && B1===1'b1 && B2===1'b0)
      // comb arc C --> X
      (C => X) = (1.0,1.0);
      
      ifnone
      // comb arc C --> X
      (C => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_AOI222_0P5( X, A1, A2, B1, B2, C1, C2 );
input A1, A2, B1, B2, C1, C2;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_AOI222_0P5_func SAEDRVT14_AOI222_0P5_behav_inst(.X(X),.A1(A1),.A2(A2),.B1(B1),.B2(B2),.C1(C1),.C2(C2));
`else
   SAEDRVT14_AOI222_0P5_func SAEDRVT14_AOI222_0P5_inst(.X(X),.A1(A1),.A2(A2),.B1(B1),.B2(B2),.C1(C1),.C2(C2));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      if(B1===1'b0 && B2===1'b0 && C1===1'b0 && C2===1'b0)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b0 && C1===1'b0 && C2===1'b1)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b0 && C1===1'b1 && C2===1'b0)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b1 && C1===1'b0 && C2===1'b0)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b1 && C1===1'b0 && C2===1'b1)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b1 && C1===1'b1 && C2===1'b0)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b0 && C1===1'b0 && C2===1'b0)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b0 && C1===1'b0 && C2===1'b1)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b0 && C1===1'b1 && C2===1'b0)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      ifnone
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b0 && C1===1'b0 && C2===1'b0)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b0 && C1===1'b0 && C2===1'b1)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b0 && C1===1'b1 && C2===1'b0)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b1 && C1===1'b0 && C2===1'b0)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b1 && C1===1'b0 && C2===1'b1)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b1 && C1===1'b1 && C2===1'b0)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b0 && C1===1'b0 && C2===1'b0)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b0 && C1===1'b0 && C2===1'b1)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b0 && C1===1'b1 && C2===1'b0)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      ifnone
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0 && C1===1'b0 && C2===1'b0)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0 && C1===1'b0 && C2===1'b1)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0 && C1===1'b1 && C2===1'b0)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && C1===1'b0 && C2===1'b0)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && C1===1'b0 && C2===1'b1)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && C1===1'b1 && C2===1'b0)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && C1===1'b0 && C2===1'b0)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && C1===1'b0 && C2===1'b1)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && C1===1'b1 && C2===1'b0)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      ifnone
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0 && C1===1'b0 && C2===1'b0)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0 && C1===1'b0 && C2===1'b1)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0 && C1===1'b1 && C2===1'b0)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && C1===1'b0 && C2===1'b0)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && C1===1'b0 && C2===1'b1)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && C1===1'b1 && C2===1'b0)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && C1===1'b0 && C2===1'b0)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && C1===1'b0 && C2===1'b1)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && C1===1'b1 && C2===1'b0)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      ifnone
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0 && B1===1'b0 && B2===1'b0)
      // comb arc C1 --> X
      (C1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0 && B1===1'b0 && B2===1'b1)
      // comb arc C1 --> X
      (C1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0 && B1===1'b1 && B2===1'b0)
      // comb arc C1 --> X
      (C1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && B1===1'b0 && B2===1'b0)
      // comb arc C1 --> X
      (C1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && B1===1'b0 && B2===1'b1)
      // comb arc C1 --> X
      (C1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && B1===1'b1 && B2===1'b0)
      // comb arc C1 --> X
      (C1 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && B1===1'b0 && B2===1'b0)
      // comb arc C1 --> X
      (C1 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && B1===1'b0 && B2===1'b1)
      // comb arc C1 --> X
      (C1 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && B1===1'b1 && B2===1'b0)
      // comb arc C1 --> X
      (C1 => X) = (1.0,1.0);
      
      ifnone
      // comb arc C1 --> X
      (C1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0 && B1===1'b0 && B2===1'b0)
      // comb arc C2 --> X
      (C2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0 && B1===1'b0 && B2===1'b1)
      // comb arc C2 --> X
      (C2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0 && B1===1'b1 && B2===1'b0)
      // comb arc C2 --> X
      (C2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && B1===1'b0 && B2===1'b0)
      // comb arc C2 --> X
      (C2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && B1===1'b0 && B2===1'b1)
      // comb arc C2 --> X
      (C2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && B1===1'b1 && B2===1'b0)
      // comb arc C2 --> X
      (C2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && B1===1'b0 && B2===1'b0)
      // comb arc C2 --> X
      (C2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && B1===1'b0 && B2===1'b1)
      // comb arc C2 --> X
      (C2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && B1===1'b1 && B2===1'b0)
      // comb arc C2 --> X
      (C2 => X) = (1.0,1.0);
      
      ifnone
      // comb arc C2 --> X
      (C2 => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_AOI222_1( X, A1, A2, B1, B2, C1, C2 );
input A1, A2, B1, B2, C1, C2;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_AOI222_1_func SAEDRVT14_AOI222_1_behav_inst(.X(X),.A1(A1),.A2(A2),.B1(B1),.B2(B2),.C1(C1),.C2(C2));
`else
   SAEDRVT14_AOI222_1_func SAEDRVT14_AOI222_1_inst(.X(X),.A1(A1),.A2(A2),.B1(B1),.B2(B2),.C1(C1),.C2(C2));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      if(B1===1'b0 && B2===1'b0 && C1===1'b0 && C2===1'b0)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b0 && C1===1'b0 && C2===1'b1)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b0 && C1===1'b1 && C2===1'b0)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b1 && C1===1'b0 && C2===1'b0)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b1 && C1===1'b0 && C2===1'b1)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b1 && C1===1'b1 && C2===1'b0)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b0 && C1===1'b0 && C2===1'b0)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b0 && C1===1'b0 && C2===1'b1)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b0 && C1===1'b1 && C2===1'b0)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      ifnone
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b0 && C1===1'b0 && C2===1'b0)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b0 && C1===1'b0 && C2===1'b1)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b0 && C1===1'b1 && C2===1'b0)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b1 && C1===1'b0 && C2===1'b0)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b1 && C1===1'b0 && C2===1'b1)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b1 && C1===1'b1 && C2===1'b0)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b0 && C1===1'b0 && C2===1'b0)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b0 && C1===1'b0 && C2===1'b1)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b0 && C1===1'b1 && C2===1'b0)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      ifnone
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0 && C1===1'b0 && C2===1'b0)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0 && C1===1'b0 && C2===1'b1)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0 && C1===1'b1 && C2===1'b0)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && C1===1'b0 && C2===1'b0)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && C1===1'b0 && C2===1'b1)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && C1===1'b1 && C2===1'b0)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && C1===1'b0 && C2===1'b0)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && C1===1'b0 && C2===1'b1)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && C1===1'b1 && C2===1'b0)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      ifnone
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0 && C1===1'b0 && C2===1'b0)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0 && C1===1'b0 && C2===1'b1)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0 && C1===1'b1 && C2===1'b0)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && C1===1'b0 && C2===1'b0)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && C1===1'b0 && C2===1'b1)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && C1===1'b1 && C2===1'b0)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && C1===1'b0 && C2===1'b0)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && C1===1'b0 && C2===1'b1)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && C1===1'b1 && C2===1'b0)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      ifnone
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0 && B1===1'b0 && B2===1'b0)
      // comb arc C1 --> X
      (C1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0 && B1===1'b0 && B2===1'b1)
      // comb arc C1 --> X
      (C1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0 && B1===1'b1 && B2===1'b0)
      // comb arc C1 --> X
      (C1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && B1===1'b0 && B2===1'b0)
      // comb arc C1 --> X
      (C1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && B1===1'b0 && B2===1'b1)
      // comb arc C1 --> X
      (C1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && B1===1'b1 && B2===1'b0)
      // comb arc C1 --> X
      (C1 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && B1===1'b0 && B2===1'b0)
      // comb arc C1 --> X
      (C1 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && B1===1'b0 && B2===1'b1)
      // comb arc C1 --> X
      (C1 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && B1===1'b1 && B2===1'b0)
      // comb arc C1 --> X
      (C1 => X) = (1.0,1.0);
      
      ifnone
      // comb arc C1 --> X
      (C1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0 && B1===1'b0 && B2===1'b0)
      // comb arc C2 --> X
      (C2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0 && B1===1'b0 && B2===1'b1)
      // comb arc C2 --> X
      (C2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0 && B1===1'b1 && B2===1'b0)
      // comb arc C2 --> X
      (C2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && B1===1'b0 && B2===1'b0)
      // comb arc C2 --> X
      (C2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && B1===1'b0 && B2===1'b1)
      // comb arc C2 --> X
      (C2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && B1===1'b1 && B2===1'b0)
      // comb arc C2 --> X
      (C2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && B1===1'b0 && B2===1'b0)
      // comb arc C2 --> X
      (C2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && B1===1'b0 && B2===1'b1)
      // comb arc C2 --> X
      (C2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && B1===1'b1 && B2===1'b0)
      // comb arc C2 --> X
      (C2 => X) = (1.0,1.0);
      
      ifnone
      // comb arc C2 --> X
      (C2 => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_AOI222_2( X, A1, A2, B1, B2, C1, C2 );
input A1, A2, B1, B2, C1, C2;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_AOI222_2_func SAEDRVT14_AOI222_2_behav_inst(.X(X),.A1(A1),.A2(A2),.B1(B1),.B2(B2),.C1(C1),.C2(C2));
`else
   SAEDRVT14_AOI222_2_func SAEDRVT14_AOI222_2_inst(.X(X),.A1(A1),.A2(A2),.B1(B1),.B2(B2),.C1(C1),.C2(C2));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      if(B1===1'b0 && B2===1'b0 && C1===1'b0 && C2===1'b0)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b0 && C1===1'b0 && C2===1'b1)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b0 && C1===1'b1 && C2===1'b0)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b1 && C1===1'b0 && C2===1'b0)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b1 && C1===1'b0 && C2===1'b1)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b1 && C1===1'b1 && C2===1'b0)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b0 && C1===1'b0 && C2===1'b0)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b0 && C1===1'b0 && C2===1'b1)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b0 && C1===1'b1 && C2===1'b0)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      ifnone
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b0 && C1===1'b0 && C2===1'b0)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b0 && C1===1'b0 && C2===1'b1)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b0 && C1===1'b1 && C2===1'b0)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b1 && C1===1'b0 && C2===1'b0)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b1 && C1===1'b0 && C2===1'b1)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b1 && C1===1'b1 && C2===1'b0)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b0 && C1===1'b0 && C2===1'b0)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b0 && C1===1'b0 && C2===1'b1)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b0 && C1===1'b1 && C2===1'b0)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      ifnone
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0 && C1===1'b0 && C2===1'b0)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0 && C1===1'b0 && C2===1'b1)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0 && C1===1'b1 && C2===1'b0)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && C1===1'b0 && C2===1'b0)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && C1===1'b0 && C2===1'b1)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && C1===1'b1 && C2===1'b0)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && C1===1'b0 && C2===1'b0)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && C1===1'b0 && C2===1'b1)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && C1===1'b1 && C2===1'b0)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      ifnone
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0 && C1===1'b0 && C2===1'b0)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0 && C1===1'b0 && C2===1'b1)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0 && C1===1'b1 && C2===1'b0)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && C1===1'b0 && C2===1'b0)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && C1===1'b0 && C2===1'b1)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && C1===1'b1 && C2===1'b0)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && C1===1'b0 && C2===1'b0)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && C1===1'b0 && C2===1'b1)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && C1===1'b1 && C2===1'b0)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      ifnone
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0 && B1===1'b0 && B2===1'b0)
      // comb arc C1 --> X
      (C1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0 && B1===1'b0 && B2===1'b1)
      // comb arc C1 --> X
      (C1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0 && B1===1'b1 && B2===1'b0)
      // comb arc C1 --> X
      (C1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && B1===1'b0 && B2===1'b0)
      // comb arc C1 --> X
      (C1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && B1===1'b0 && B2===1'b1)
      // comb arc C1 --> X
      (C1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && B1===1'b1 && B2===1'b0)
      // comb arc C1 --> X
      (C1 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && B1===1'b0 && B2===1'b0)
      // comb arc C1 --> X
      (C1 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && B1===1'b0 && B2===1'b1)
      // comb arc C1 --> X
      (C1 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && B1===1'b1 && B2===1'b0)
      // comb arc C1 --> X
      (C1 => X) = (1.0,1.0);
      
      ifnone
      // comb arc C1 --> X
      (C1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0 && B1===1'b0 && B2===1'b0)
      // comb arc C2 --> X
      (C2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0 && B1===1'b0 && B2===1'b1)
      // comb arc C2 --> X
      (C2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0 && B1===1'b1 && B2===1'b0)
      // comb arc C2 --> X
      (C2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && B1===1'b0 && B2===1'b0)
      // comb arc C2 --> X
      (C2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && B1===1'b0 && B2===1'b1)
      // comb arc C2 --> X
      (C2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && B1===1'b1 && B2===1'b0)
      // comb arc C2 --> X
      (C2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && B1===1'b0 && B2===1'b0)
      // comb arc C2 --> X
      (C2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && B1===1'b0 && B2===1'b1)
      // comb arc C2 --> X
      (C2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && B1===1'b1 && B2===1'b0)
      // comb arc C2 --> X
      (C2 => X) = (1.0,1.0);
      
      ifnone
      // comb arc C2 --> X
      (C2 => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_AOI222_4( X, A1, A2, B1, B2, C1, C2 );
input A1, A2, B1, B2, C1, C2;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_AOI222_4_func SAEDRVT14_AOI222_4_behav_inst(.X(X),.A1(A1),.A2(A2),.B1(B1),.B2(B2),.C1(C1),.C2(C2));
`else
   SAEDRVT14_AOI222_4_func SAEDRVT14_AOI222_4_inst(.X(X),.A1(A1),.A2(A2),.B1(B1),.B2(B2),.C1(C1),.C2(C2));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      if(B1===1'b0 && B2===1'b0 && C1===1'b0 && C2===1'b0)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b0 && C1===1'b0 && C2===1'b1)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b0 && C1===1'b1 && C2===1'b0)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b1 && C1===1'b0 && C2===1'b0)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b1 && C1===1'b0 && C2===1'b1)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b1 && C1===1'b1 && C2===1'b0)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b0 && C1===1'b0 && C2===1'b0)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b0 && C1===1'b0 && C2===1'b1)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b0 && C1===1'b1 && C2===1'b0)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      ifnone
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b0 && C1===1'b0 && C2===1'b0)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b0 && C1===1'b0 && C2===1'b1)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b0 && C1===1'b1 && C2===1'b0)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b1 && C1===1'b0 && C2===1'b0)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b1 && C1===1'b0 && C2===1'b1)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b1 && C1===1'b1 && C2===1'b0)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b0 && C1===1'b0 && C2===1'b0)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b0 && C1===1'b0 && C2===1'b1)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b0 && C1===1'b1 && C2===1'b0)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      ifnone
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0 && C1===1'b0 && C2===1'b0)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0 && C1===1'b0 && C2===1'b1)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0 && C1===1'b1 && C2===1'b0)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && C1===1'b0 && C2===1'b0)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && C1===1'b0 && C2===1'b1)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && C1===1'b1 && C2===1'b0)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && C1===1'b0 && C2===1'b0)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && C1===1'b0 && C2===1'b1)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && C1===1'b1 && C2===1'b0)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      ifnone
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0 && C1===1'b0 && C2===1'b0)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0 && C1===1'b0 && C2===1'b1)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0 && C1===1'b1 && C2===1'b0)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && C1===1'b0 && C2===1'b0)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && C1===1'b0 && C2===1'b1)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && C1===1'b1 && C2===1'b0)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && C1===1'b0 && C2===1'b0)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && C1===1'b0 && C2===1'b1)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && C1===1'b1 && C2===1'b0)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      ifnone
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0 && B1===1'b0 && B2===1'b0)
      // comb arc C1 --> X
      (C1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0 && B1===1'b0 && B2===1'b1)
      // comb arc C1 --> X
      (C1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0 && B1===1'b1 && B2===1'b0)
      // comb arc C1 --> X
      (C1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && B1===1'b0 && B2===1'b0)
      // comb arc C1 --> X
      (C1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && B1===1'b0 && B2===1'b1)
      // comb arc C1 --> X
      (C1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && B1===1'b1 && B2===1'b0)
      // comb arc C1 --> X
      (C1 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && B1===1'b0 && B2===1'b0)
      // comb arc C1 --> X
      (C1 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && B1===1'b0 && B2===1'b1)
      // comb arc C1 --> X
      (C1 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && B1===1'b1 && B2===1'b0)
      // comb arc C1 --> X
      (C1 => X) = (1.0,1.0);
      
      ifnone
      // comb arc C1 --> X
      (C1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0 && B1===1'b0 && B2===1'b0)
      // comb arc C2 --> X
      (C2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0 && B1===1'b0 && B2===1'b1)
      // comb arc C2 --> X
      (C2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0 && B1===1'b1 && B2===1'b0)
      // comb arc C2 --> X
      (C2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && B1===1'b0 && B2===1'b0)
      // comb arc C2 --> X
      (C2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && B1===1'b0 && B2===1'b1)
      // comb arc C2 --> X
      (C2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && B1===1'b1 && B2===1'b0)
      // comb arc C2 --> X
      (C2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && B1===1'b0 && B2===1'b0)
      // comb arc C2 --> X
      (C2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && B1===1'b0 && B2===1'b1)
      // comb arc C2 --> X
      (C2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && B1===1'b1 && B2===1'b0)
      // comb arc C2 --> X
      (C2 => X) = (1.0,1.0);
      
      ifnone
      // comb arc C2 --> X
      (C2 => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_AOI22_0P5( X, A1, A2, B1, B2 );
input A1, A2, B1, B2;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_AOI22_0P5_func SAEDRVT14_AOI22_0P5_behav_inst(.X(X),.A1(A1),.A2(A2),.B1(B1),.B2(B2));
`else
   SAEDRVT14_AOI22_0P5_func SAEDRVT14_AOI22_0P5_inst(.X(X),.A1(A1),.A2(A2),.B1(B1),.B2(B2));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      if(B1===1'b0 && B2===1'b0)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b1)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b0)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      ifnone
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b0)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b1)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b0)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      ifnone
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      ifnone
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      ifnone
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_AOI22_0P75( X, A1, A2, B1, B2 );
input A1, A2, B1, B2;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_AOI22_0P75_func SAEDRVT14_AOI22_0P75_behav_inst(.X(X),.A1(A1),.A2(A2),.B1(B1),.B2(B2));
`else
   SAEDRVT14_AOI22_0P75_func SAEDRVT14_AOI22_0P75_inst(.X(X),.A1(A1),.A2(A2),.B1(B1),.B2(B2));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      if(B1===1'b0 && B2===1'b0)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b1)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b0)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      ifnone
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b0)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b1)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b0)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      ifnone
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      ifnone
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      ifnone
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_AOI22_1( X, A1, A2, B1, B2 );
input A1, A2, B1, B2;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_AOI22_1_func SAEDRVT14_AOI22_1_behav_inst(.X(X),.A1(A1),.A2(A2),.B1(B1),.B2(B2));
`else
   SAEDRVT14_AOI22_1_func SAEDRVT14_AOI22_1_inst(.X(X),.A1(A1),.A2(A2),.B1(B1),.B2(B2));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      if(B1===1'b0 && B2===1'b0)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b1)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b0)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      ifnone
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b0)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b1)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b0)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      ifnone
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      ifnone
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      ifnone
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_AOI22_1P5( X, A1, A2, B1, B2 );
input A1, A2, B1, B2;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_AOI22_1P5_func SAEDRVT14_AOI22_1P5_behav_inst(.X(X),.A1(A1),.A2(A2),.B1(B1),.B2(B2));
`else
   SAEDRVT14_AOI22_1P5_func SAEDRVT14_AOI22_1P5_inst(.X(X),.A1(A1),.A2(A2),.B1(B1),.B2(B2));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      if(B1===1'b0 && B2===1'b0)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b1)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b0)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      ifnone
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b0)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b1)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b0)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      ifnone
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      ifnone
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      ifnone
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_AOI22_2( X, A1, A2, B1, B2 );
input A1, A2, B1, B2;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_AOI22_2_func SAEDRVT14_AOI22_2_behav_inst(.X(X),.A1(A1),.A2(A2),.B1(B1),.B2(B2));
`else
   SAEDRVT14_AOI22_2_func SAEDRVT14_AOI22_2_inst(.X(X),.A1(A1),.A2(A2),.B1(B1),.B2(B2));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      if(B1===1'b0 && B2===1'b0)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b1)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b0)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      ifnone
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b0)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b1)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b0)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      ifnone
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      ifnone
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      ifnone
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_AOI22_3( X, A1, A2, B1, B2 );
input A1, A2, B1, B2;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_AOI22_3_func SAEDRVT14_AOI22_3_behav_inst(.X(X),.A1(A1),.A2(A2),.B1(B1),.B2(B2));
`else
   SAEDRVT14_AOI22_3_func SAEDRVT14_AOI22_3_inst(.X(X),.A1(A1),.A2(A2),.B1(B1),.B2(B2));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      if(B1===1'b0 && B2===1'b0)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b1)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b0)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      ifnone
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b0)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b1)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b0)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      ifnone
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      ifnone
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      ifnone
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_AOI22_4( X, A1, A2, B1, B2 );
input A1, A2, B1, B2;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_AOI22_4_func SAEDRVT14_AOI22_4_behav_inst(.X(X),.A1(A1),.A2(A2),.B1(B1),.B2(B2));
`else
   SAEDRVT14_AOI22_4_func SAEDRVT14_AOI22_4_inst(.X(X),.A1(A1),.A2(A2),.B1(B1),.B2(B2));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      if(B1===1'b0 && B2===1'b0)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b1)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b0)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      ifnone
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b0)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b1)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b0)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      ifnone
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      ifnone
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      ifnone
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_AOI22_6( X, A1, A2, B1, B2 );
input A1, A2, B1, B2;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_AOI22_6_func SAEDRVT14_AOI22_6_behav_inst(.X(X),.A1(A1),.A2(A2),.B1(B1),.B2(B2));
`else
   SAEDRVT14_AOI22_6_func SAEDRVT14_AOI22_6_inst(.X(X),.A1(A1),.A2(A2),.B1(B1),.B2(B2));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      if(B1===1'b0 && B2===1'b0)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b1)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b0)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      ifnone
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b0)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b1)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b0)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      ifnone
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      ifnone
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      ifnone
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_AOI22_ECO_1( X, A1, A2, B1, B2 );
input A1, A2, B1, B2;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_AOI22_ECO_1_func SAEDRVT14_AOI22_ECO_1_behav_inst(.X(X),.A1(A1),.A2(A2),.B1(B1),.B2(B2));
`else
   SAEDRVT14_AOI22_ECO_1_func SAEDRVT14_AOI22_ECO_1_inst(.X(X),.A1(A1),.A2(A2),.B1(B1),.B2(B2));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      if(B1===1'b0 && B2===1'b0)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b1)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b0)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      ifnone
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b0)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b1)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b0)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      ifnone
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      ifnone
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      ifnone
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_AOI311_0P5( X, A1, A2, A3, B1, B2 );
input A1, A2, A3, B1, B2;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_AOI311_0P5_func SAEDRVT14_AOI311_0P5_behav_inst(.X(X),.A1(A1),.A2(A2),.A3(A3),.B1(B1),.B2(B2));
`else
   SAEDRVT14_AOI311_0P5_func SAEDRVT14_AOI311_0P5_inst(.X(X),.A1(A1),.A2(A2),.A3(A3),.B1(B1),.B2(B2));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      // comb arc A3 --> X
      (A3 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0 && A3===1'b0)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0 && A3===1'b1)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && A3===1'b0)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && A3===1'b1)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && A3===1'b0)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && A3===1'b1)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1 && A3===1'b0)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      ifnone
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0 && A3===1'b0)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0 && A3===1'b1)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && A3===1'b0)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && A3===1'b1)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && A3===1'b0)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && A3===1'b1)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1 && A3===1'b0)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      ifnone
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_AOI311_0P75( X, A1, A2, A3, B1, B2 );
input A1, A2, A3, B1, B2;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_AOI311_0P75_func SAEDRVT14_AOI311_0P75_behav_inst(.X(X),.A1(A1),.A2(A2),.A3(A3),.B1(B1),.B2(B2));
`else
   SAEDRVT14_AOI311_0P75_func SAEDRVT14_AOI311_0P75_inst(.X(X),.A1(A1),.A2(A2),.A3(A3),.B1(B1),.B2(B2));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      // comb arc A3 --> X
      (A3 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0 && A3===1'b0)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0 && A3===1'b1)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && A3===1'b0)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && A3===1'b1)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && A3===1'b0)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && A3===1'b1)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1 && A3===1'b0)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      ifnone
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0 && A3===1'b0)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0 && A3===1'b1)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && A3===1'b0)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && A3===1'b1)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && A3===1'b0)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && A3===1'b1)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1 && A3===1'b0)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      ifnone
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_AOI311_1( X, A1, A2, A3, B1, B2 );
input A1, A2, A3, B1, B2;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_AOI311_1_func SAEDRVT14_AOI311_1_behav_inst(.X(X),.A1(A1),.A2(A2),.A3(A3),.B1(B1),.B2(B2));
`else
   SAEDRVT14_AOI311_1_func SAEDRVT14_AOI311_1_inst(.X(X),.A1(A1),.A2(A2),.A3(A3),.B1(B1),.B2(B2));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      // comb arc A3 --> X
      (A3 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0 && A3===1'b0)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0 && A3===1'b1)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && A3===1'b0)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && A3===1'b1)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && A3===1'b0)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && A3===1'b1)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1 && A3===1'b0)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      ifnone
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0 && A3===1'b0)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0 && A3===1'b1)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && A3===1'b0)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && A3===1'b1)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && A3===1'b0)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && A3===1'b1)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1 && A3===1'b0)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      ifnone
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_AOI311_2( X, A1, A2, A3, B1, B2 );
input A1, A2, A3, B1, B2;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_AOI311_2_func SAEDRVT14_AOI311_2_behav_inst(.X(X),.A1(A1),.A2(A2),.A3(A3),.B1(B1),.B2(B2));
`else
   SAEDRVT14_AOI311_2_func SAEDRVT14_AOI311_2_inst(.X(X),.A1(A1),.A2(A2),.A3(A3),.B1(B1),.B2(B2));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      // comb arc A3 --> X
      (A3 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0 && A3===1'b0)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0 && A3===1'b1)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && A3===1'b0)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && A3===1'b1)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && A3===1'b0)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && A3===1'b1)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1 && A3===1'b0)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      ifnone
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0 && A3===1'b0)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0 && A3===1'b1)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && A3===1'b0)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && A3===1'b1)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && A3===1'b0)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && A3===1'b1)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1 && A3===1'b0)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      ifnone
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_AOI311_4( X, A1, A2, A3, B1, B2 );
input A1, A2, A3, B1, B2;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_AOI311_4_func SAEDRVT14_AOI311_4_behav_inst(.X(X),.A1(A1),.A2(A2),.A3(A3),.B1(B1),.B2(B2));
`else
   SAEDRVT14_AOI311_4_func SAEDRVT14_AOI311_4_inst(.X(X),.A1(A1),.A2(A2),.A3(A3),.B1(B1),.B2(B2));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      // comb arc A3 --> X
      (A3 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0 && A3===1'b0)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0 && A3===1'b1)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && A3===1'b0)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && A3===1'b1)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && A3===1'b0)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && A3===1'b1)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1 && A3===1'b0)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      ifnone
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0 && A3===1'b0)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0 && A3===1'b1)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && A3===1'b0)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && A3===1'b1)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && A3===1'b0)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && A3===1'b1)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1 && A3===1'b0)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      ifnone
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_AOI31_0P5( X, A1, A2, A3, B );
input A1, A2, A3, B;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_AOI31_0P5_func SAEDRVT14_AOI31_0P5_behav_inst(.X(X),.A1(A1),.A2(A2),.A3(A3),.B(B));
`else
   SAEDRVT14_AOI31_0P5_func SAEDRVT14_AOI31_0P5_inst(.X(X),.A1(A1),.A2(A2),.A3(A3),.B(B));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      // comb arc A3 --> X
      (A3 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0 && A3===1'b0)
      // comb arc B --> X
      (B => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0 && A3===1'b1)
      // comb arc B --> X
      (B => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && A3===1'b0)
      // comb arc B --> X
      (B => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && A3===1'b1)
      // comb arc B --> X
      (B => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && A3===1'b0)
      // comb arc B --> X
      (B => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && A3===1'b1)
      // comb arc B --> X
      (B => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1 && A3===1'b0)
      // comb arc B --> X
      (B => X) = (1.0,1.0);
      
      ifnone
      // comb arc B --> X
      (B => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_AOI31_0P75( X, A1, A2, A3, B );
input A1, A2, A3, B;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_AOI31_0P75_func SAEDRVT14_AOI31_0P75_behav_inst(.X(X),.A1(A1),.A2(A2),.A3(A3),.B(B));
`else
   SAEDRVT14_AOI31_0P75_func SAEDRVT14_AOI31_0P75_inst(.X(X),.A1(A1),.A2(A2),.A3(A3),.B(B));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      // comb arc A3 --> X
      (A3 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0 && A3===1'b0)
      // comb arc B --> X
      (B => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0 && A3===1'b1)
      // comb arc B --> X
      (B => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && A3===1'b0)
      // comb arc B --> X
      (B => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && A3===1'b1)
      // comb arc B --> X
      (B => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && A3===1'b0)
      // comb arc B --> X
      (B => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && A3===1'b1)
      // comb arc B --> X
      (B => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1 && A3===1'b0)
      // comb arc B --> X
      (B => X) = (1.0,1.0);
      
      ifnone
      // comb arc B --> X
      (B => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_AOI31_1( X, A1, A2, A3, B );
input A1, A2, A3, B;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_AOI31_1_func SAEDRVT14_AOI31_1_behav_inst(.X(X),.A1(A1),.A2(A2),.A3(A3),.B(B));
`else
   SAEDRVT14_AOI31_1_func SAEDRVT14_AOI31_1_inst(.X(X),.A1(A1),.A2(A2),.A3(A3),.B(B));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      // comb arc A3 --> X
      (A3 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0 && A3===1'b0)
      // comb arc B --> X
      (B => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0 && A3===1'b1)
      // comb arc B --> X
      (B => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && A3===1'b0)
      // comb arc B --> X
      (B => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && A3===1'b1)
      // comb arc B --> X
      (B => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && A3===1'b0)
      // comb arc B --> X
      (B => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && A3===1'b1)
      // comb arc B --> X
      (B => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1 && A3===1'b0)
      // comb arc B --> X
      (B => X) = (1.0,1.0);
      
      ifnone
      // comb arc B --> X
      (B => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_AOI31_2( X, A1, A2, A3, B );
input A1, A2, A3, B;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_AOI31_2_func SAEDRVT14_AOI31_2_behav_inst(.X(X),.A1(A1),.A2(A2),.A3(A3),.B(B));
`else
   SAEDRVT14_AOI31_2_func SAEDRVT14_AOI31_2_inst(.X(X),.A1(A1),.A2(A2),.A3(A3),.B(B));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      // comb arc A3 --> X
      (A3 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0 && A3===1'b0)
      // comb arc B --> X
      (B => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0 && A3===1'b1)
      // comb arc B --> X
      (B => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && A3===1'b0)
      // comb arc B --> X
      (B => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && A3===1'b1)
      // comb arc B --> X
      (B => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && A3===1'b0)
      // comb arc B --> X
      (B => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && A3===1'b1)
      // comb arc B --> X
      (B => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1 && A3===1'b0)
      // comb arc B --> X
      (B => X) = (1.0,1.0);
      
      ifnone
      // comb arc B --> X
      (B => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_AOI31_4( X, A1, A2, A3, B );
input A1, A2, A3, B;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_AOI31_4_func SAEDRVT14_AOI31_4_behav_inst(.X(X),.A1(A1),.A2(A2),.A3(A3),.B(B));
`else
   SAEDRVT14_AOI31_4_func SAEDRVT14_AOI31_4_inst(.X(X),.A1(A1),.A2(A2),.A3(A3),.B(B));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      // comb arc A3 --> X
      (A3 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0 && A3===1'b0)
      // comb arc B --> X
      (B => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0 && A3===1'b1)
      // comb arc B --> X
      (B => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && A3===1'b0)
      // comb arc B --> X
      (B => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && A3===1'b1)
      // comb arc B --> X
      (B => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && A3===1'b0)
      // comb arc B --> X
      (B => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && A3===1'b1)
      // comb arc B --> X
      (B => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1 && A3===1'b0)
      // comb arc B --> X
      (B => X) = (1.0,1.0);
      
      ifnone
      // comb arc B --> X
      (B => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_AOI31_ECO_1( X, A1, A2, A3, B );
input A1, A2, A3, B;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_AOI31_ECO_1_func SAEDRVT14_AOI31_ECO_1_behav_inst(.X(X),.A1(A1),.A2(A2),.A3(A3),.B(B));
`else
   SAEDRVT14_AOI31_ECO_1_func SAEDRVT14_AOI31_ECO_1_inst(.X(X),.A1(A1),.A2(A2),.A3(A3),.B(B));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      // comb arc A3 --> X
      (A3 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0 && A3===1'b0)
      // comb arc B --> X
      (B => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0 && A3===1'b1)
      // comb arc B --> X
      (B => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && A3===1'b0)
      // comb arc B --> X
      (B => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && A3===1'b1)
      // comb arc B --> X
      (B => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && A3===1'b0)
      // comb arc B --> X
      (B => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && A3===1'b1)
      // comb arc B --> X
      (B => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1 && A3===1'b0)
      // comb arc B --> X
      (B => X) = (1.0,1.0);
      
      ifnone
      // comb arc B --> X
      (B => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_AOI32_0P5( X, A1, A2, A3, B1, B2 );
input A1, A2, A3, B1, B2;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_AOI32_0P5_func SAEDRVT14_AOI32_0P5_behav_inst(.X(X),.A1(A1),.A2(A2),.A3(A3),.B1(B1),.B2(B2));
`else
   SAEDRVT14_AOI32_0P5_func SAEDRVT14_AOI32_0P5_inst(.X(X),.A1(A1),.A2(A2),.A3(A3),.B1(B1),.B2(B2));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      if(B1===1'b0 && B2===1'b0)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b1)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b0)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      ifnone
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b0)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b1)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b0)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      ifnone
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b0)
      // comb arc A3 --> X
      (A3 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b1)
      // comb arc A3 --> X
      (A3 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b0)
      // comb arc A3 --> X
      (A3 => X) = (1.0,1.0);
      
      ifnone
      // comb arc A3 --> X
      (A3 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0 && A3===1'b0)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0 && A3===1'b1)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && A3===1'b0)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && A3===1'b1)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && A3===1'b0)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && A3===1'b1)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1 && A3===1'b0)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      ifnone
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0 && A3===1'b0)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0 && A3===1'b1)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && A3===1'b0)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && A3===1'b1)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && A3===1'b0)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && A3===1'b1)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1 && A3===1'b0)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      ifnone
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_AOI32_0P75( X, A1, A2, A3, B1, B2 );
input A1, A2, A3, B1, B2;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_AOI32_0P75_func SAEDRVT14_AOI32_0P75_behav_inst(.X(X),.A1(A1),.A2(A2),.A3(A3),.B1(B1),.B2(B2));
`else
   SAEDRVT14_AOI32_0P75_func SAEDRVT14_AOI32_0P75_inst(.X(X),.A1(A1),.A2(A2),.A3(A3),.B1(B1),.B2(B2));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      if(B1===1'b0 && B2===1'b0)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b1)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b0)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      ifnone
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b0)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b1)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b0)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      ifnone
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b0)
      // comb arc A3 --> X
      (A3 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b1)
      // comb arc A3 --> X
      (A3 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b0)
      // comb arc A3 --> X
      (A3 => X) = (1.0,1.0);
      
      ifnone
      // comb arc A3 --> X
      (A3 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0 && A3===1'b0)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0 && A3===1'b1)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && A3===1'b0)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && A3===1'b1)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && A3===1'b0)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && A3===1'b1)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1 && A3===1'b0)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      ifnone
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0 && A3===1'b0)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0 && A3===1'b1)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && A3===1'b0)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && A3===1'b1)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && A3===1'b0)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && A3===1'b1)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1 && A3===1'b0)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      ifnone
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_AOI32_1( X, A1, A2, A3, B1, B2 );
input A1, A2, A3, B1, B2;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_AOI32_1_func SAEDRVT14_AOI32_1_behav_inst(.X(X),.A1(A1),.A2(A2),.A3(A3),.B1(B1),.B2(B2));
`else
   SAEDRVT14_AOI32_1_func SAEDRVT14_AOI32_1_inst(.X(X),.A1(A1),.A2(A2),.A3(A3),.B1(B1),.B2(B2));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      if(B1===1'b0 && B2===1'b0)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b1)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b0)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      ifnone
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b0)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b1)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b0)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      ifnone
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b0)
      // comb arc A3 --> X
      (A3 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b1)
      // comb arc A3 --> X
      (A3 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b0)
      // comb arc A3 --> X
      (A3 => X) = (1.0,1.0);
      
      ifnone
      // comb arc A3 --> X
      (A3 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0 && A3===1'b0)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0 && A3===1'b1)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && A3===1'b0)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && A3===1'b1)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && A3===1'b0)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && A3===1'b1)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1 && A3===1'b0)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      ifnone
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0 && A3===1'b0)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0 && A3===1'b1)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && A3===1'b0)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && A3===1'b1)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && A3===1'b0)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && A3===1'b1)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1 && A3===1'b0)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      ifnone
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_AOI32_2( X, A1, A2, A3, B1, B2 );
input A1, A2, A3, B1, B2;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_AOI32_2_func SAEDRVT14_AOI32_2_behav_inst(.X(X),.A1(A1),.A2(A2),.A3(A3),.B1(B1),.B2(B2));
`else
   SAEDRVT14_AOI32_2_func SAEDRVT14_AOI32_2_inst(.X(X),.A1(A1),.A2(A2),.A3(A3),.B1(B1),.B2(B2));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      if(B1===1'b0 && B2===1'b0)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b1)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b0)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      ifnone
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b0)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b1)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b0)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      ifnone
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b0)
      // comb arc A3 --> X
      (A3 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b1)
      // comb arc A3 --> X
      (A3 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b0)
      // comb arc A3 --> X
      (A3 => X) = (1.0,1.0);
      
      ifnone
      // comb arc A3 --> X
      (A3 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0 && A3===1'b0)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0 && A3===1'b1)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && A3===1'b0)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && A3===1'b1)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && A3===1'b0)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && A3===1'b1)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1 && A3===1'b0)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      ifnone
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0 && A3===1'b0)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0 && A3===1'b1)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && A3===1'b0)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && A3===1'b1)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && A3===1'b0)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && A3===1'b1)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1 && A3===1'b0)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      ifnone
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_AOI32_4( X, A1, A2, A3, B1, B2 );
input A1, A2, A3, B1, B2;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_AOI32_4_func SAEDRVT14_AOI32_4_behav_inst(.X(X),.A1(A1),.A2(A2),.A3(A3),.B1(B1),.B2(B2));
`else
   SAEDRVT14_AOI32_4_func SAEDRVT14_AOI32_4_inst(.X(X),.A1(A1),.A2(A2),.A3(A3),.B1(B1),.B2(B2));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      if(B1===1'b0 && B2===1'b0)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b1)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b0)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      ifnone
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b0)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b1)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b0)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      ifnone
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b0)
      // comb arc A3 --> X
      (A3 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b1)
      // comb arc A3 --> X
      (A3 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b0)
      // comb arc A3 --> X
      (A3 => X) = (1.0,1.0);
      
      ifnone
      // comb arc A3 --> X
      (A3 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0 && A3===1'b0)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0 && A3===1'b1)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && A3===1'b0)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && A3===1'b1)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && A3===1'b0)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && A3===1'b1)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1 && A3===1'b0)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      ifnone
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0 && A3===1'b0)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0 && A3===1'b1)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && A3===1'b0)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && A3===1'b1)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && A3===1'b0)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && A3===1'b1)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1 && A3===1'b0)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      ifnone
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_AOI33_0P5( X, A1, A2, A3, B1, B2, B3 );
input A1, A2, A3, B1, B2, B3;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_AOI33_0P5_func SAEDRVT14_AOI33_0P5_behav_inst(.X(X),.A1(A1),.A2(A2),.A3(A3),.B1(B1),.B2(B2),.B3(B3));
`else
   SAEDRVT14_AOI33_0P5_func SAEDRVT14_AOI33_0P5_inst(.X(X),.A1(A1),.A2(A2),.A3(A3),.B1(B1),.B2(B2),.B3(B3));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      if(B1===1'b0 && B2===1'b0 && B3===1'b0)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b0 && B3===1'b1)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b1 && B3===1'b0)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b1 && B3===1'b1)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b0 && B3===1'b0)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b0 && B3===1'b1)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b1 && B3===1'b0)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      ifnone
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b0 && B3===1'b0)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b0 && B3===1'b1)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b1 && B3===1'b0)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b1 && B3===1'b1)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b0 && B3===1'b0)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b0 && B3===1'b1)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b1 && B3===1'b0)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      ifnone
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b0 && B3===1'b0)
      // comb arc A3 --> X
      (A3 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b0 && B3===1'b1)
      // comb arc A3 --> X
      (A3 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b1 && B3===1'b0)
      // comb arc A3 --> X
      (A3 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b1 && B3===1'b1)
      // comb arc A3 --> X
      (A3 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b0 && B3===1'b0)
      // comb arc A3 --> X
      (A3 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b0 && B3===1'b1)
      // comb arc A3 --> X
      (A3 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b1 && B3===1'b0)
      // comb arc A3 --> X
      (A3 => X) = (1.0,1.0);
      
      ifnone
      // comb arc A3 --> X
      (A3 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0 && A3===1'b0)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0 && A3===1'b1)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && A3===1'b0)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && A3===1'b1)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && A3===1'b0)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && A3===1'b1)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1 && A3===1'b0)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      ifnone
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0 && A3===1'b0)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0 && A3===1'b1)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && A3===1'b0)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && A3===1'b1)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && A3===1'b0)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && A3===1'b1)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1 && A3===1'b0)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      ifnone
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0 && A3===1'b0)
      // comb arc B3 --> X
      (B3 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0 && A3===1'b1)
      // comb arc B3 --> X
      (B3 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && A3===1'b0)
      // comb arc B3 --> X
      (B3 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && A3===1'b1)
      // comb arc B3 --> X
      (B3 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && A3===1'b0)
      // comb arc B3 --> X
      (B3 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && A3===1'b1)
      // comb arc B3 --> X
      (B3 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1 && A3===1'b0)
      // comb arc B3 --> X
      (B3 => X) = (1.0,1.0);
      
      ifnone
      // comb arc B3 --> X
      (B3 => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_AOI33_0P75( X, A1, A2, A3, B1, B2, B3 );
input A1, A2, A3, B1, B2, B3;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_AOI33_0P75_func SAEDRVT14_AOI33_0P75_behav_inst(.X(X),.A1(A1),.A2(A2),.A3(A3),.B1(B1),.B2(B2),.B3(B3));
`else
   SAEDRVT14_AOI33_0P75_func SAEDRVT14_AOI33_0P75_inst(.X(X),.A1(A1),.A2(A2),.A3(A3),.B1(B1),.B2(B2),.B3(B3));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      if(B1===1'b0 && B2===1'b0 && B3===1'b0)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b0 && B3===1'b1)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b1 && B3===1'b0)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b1 && B3===1'b1)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b0 && B3===1'b0)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b0 && B3===1'b1)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b1 && B3===1'b0)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      ifnone
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b0 && B3===1'b0)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b0 && B3===1'b1)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b1 && B3===1'b0)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b1 && B3===1'b1)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b0 && B3===1'b0)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b0 && B3===1'b1)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b1 && B3===1'b0)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      ifnone
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b0 && B3===1'b0)
      // comb arc A3 --> X
      (A3 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b0 && B3===1'b1)
      // comb arc A3 --> X
      (A3 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b1 && B3===1'b0)
      // comb arc A3 --> X
      (A3 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b1 && B3===1'b1)
      // comb arc A3 --> X
      (A3 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b0 && B3===1'b0)
      // comb arc A3 --> X
      (A3 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b0 && B3===1'b1)
      // comb arc A3 --> X
      (A3 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b1 && B3===1'b0)
      // comb arc A3 --> X
      (A3 => X) = (1.0,1.0);
      
      ifnone
      // comb arc A3 --> X
      (A3 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0 && A3===1'b0)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0 && A3===1'b1)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && A3===1'b0)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && A3===1'b1)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && A3===1'b0)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && A3===1'b1)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1 && A3===1'b0)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      ifnone
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0 && A3===1'b0)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0 && A3===1'b1)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && A3===1'b0)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && A3===1'b1)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && A3===1'b0)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && A3===1'b1)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1 && A3===1'b0)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      ifnone
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0 && A3===1'b0)
      // comb arc B3 --> X
      (B3 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0 && A3===1'b1)
      // comb arc B3 --> X
      (B3 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && A3===1'b0)
      // comb arc B3 --> X
      (B3 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && A3===1'b1)
      // comb arc B3 --> X
      (B3 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && A3===1'b0)
      // comb arc B3 --> X
      (B3 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && A3===1'b1)
      // comb arc B3 --> X
      (B3 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1 && A3===1'b0)
      // comb arc B3 --> X
      (B3 => X) = (1.0,1.0);
      
      ifnone
      // comb arc B3 --> X
      (B3 => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_AOI33_1( X, A1, A2, A3, B1, B2, B3 );
input A1, A2, A3, B1, B2, B3;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_AOI33_1_func SAEDRVT14_AOI33_1_behav_inst(.X(X),.A1(A1),.A2(A2),.A3(A3),.B1(B1),.B2(B2),.B3(B3));
`else
   SAEDRVT14_AOI33_1_func SAEDRVT14_AOI33_1_inst(.X(X),.A1(A1),.A2(A2),.A3(A3),.B1(B1),.B2(B2),.B3(B3));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      if(B1===1'b0 && B2===1'b0 && B3===1'b0)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b0 && B3===1'b1)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b1 && B3===1'b0)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b1 && B3===1'b1)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b0 && B3===1'b0)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b0 && B3===1'b1)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b1 && B3===1'b0)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      ifnone
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b0 && B3===1'b0)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b0 && B3===1'b1)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b1 && B3===1'b0)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b1 && B3===1'b1)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b0 && B3===1'b0)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b0 && B3===1'b1)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b1 && B3===1'b0)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      ifnone
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b0 && B3===1'b0)
      // comb arc A3 --> X
      (A3 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b0 && B3===1'b1)
      // comb arc A3 --> X
      (A3 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b1 && B3===1'b0)
      // comb arc A3 --> X
      (A3 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b1 && B3===1'b1)
      // comb arc A3 --> X
      (A3 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b0 && B3===1'b0)
      // comb arc A3 --> X
      (A3 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b0 && B3===1'b1)
      // comb arc A3 --> X
      (A3 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b1 && B3===1'b0)
      // comb arc A3 --> X
      (A3 => X) = (1.0,1.0);
      
      ifnone
      // comb arc A3 --> X
      (A3 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0 && A3===1'b0)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0 && A3===1'b1)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && A3===1'b0)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && A3===1'b1)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && A3===1'b0)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && A3===1'b1)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1 && A3===1'b0)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      ifnone
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0 && A3===1'b0)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0 && A3===1'b1)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && A3===1'b0)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && A3===1'b1)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && A3===1'b0)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && A3===1'b1)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1 && A3===1'b0)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      ifnone
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0 && A3===1'b0)
      // comb arc B3 --> X
      (B3 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0 && A3===1'b1)
      // comb arc B3 --> X
      (B3 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && A3===1'b0)
      // comb arc B3 --> X
      (B3 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && A3===1'b1)
      // comb arc B3 --> X
      (B3 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && A3===1'b0)
      // comb arc B3 --> X
      (B3 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && A3===1'b1)
      // comb arc B3 --> X
      (B3 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1 && A3===1'b0)
      // comb arc B3 --> X
      (B3 => X) = (1.0,1.0);
      
      ifnone
      // comb arc B3 --> X
      (B3 => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_AOI33_2( X, A1, A2, A3, B1, B2, B3 );
input A1, A2, A3, B1, B2, B3;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_AOI33_2_func SAEDRVT14_AOI33_2_behav_inst(.X(X),.A1(A1),.A2(A2),.A3(A3),.B1(B1),.B2(B2),.B3(B3));
`else
   SAEDRVT14_AOI33_2_func SAEDRVT14_AOI33_2_inst(.X(X),.A1(A1),.A2(A2),.A3(A3),.B1(B1),.B2(B2),.B3(B3));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      if(B1===1'b0 && B2===1'b0 && B3===1'b0)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b0 && B3===1'b1)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b1 && B3===1'b0)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b1 && B3===1'b1)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b0 && B3===1'b0)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b0 && B3===1'b1)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b1 && B3===1'b0)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      ifnone
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b0 && B3===1'b0)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b0 && B3===1'b1)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b1 && B3===1'b0)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b1 && B3===1'b1)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b0 && B3===1'b0)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b0 && B3===1'b1)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b1 && B3===1'b0)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      ifnone
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b0 && B3===1'b0)
      // comb arc A3 --> X
      (A3 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b0 && B3===1'b1)
      // comb arc A3 --> X
      (A3 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b1 && B3===1'b0)
      // comb arc A3 --> X
      (A3 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b1 && B3===1'b1)
      // comb arc A3 --> X
      (A3 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b0 && B3===1'b0)
      // comb arc A3 --> X
      (A3 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b0 && B3===1'b1)
      // comb arc A3 --> X
      (A3 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b1 && B3===1'b0)
      // comb arc A3 --> X
      (A3 => X) = (1.0,1.0);
      
      ifnone
      // comb arc A3 --> X
      (A3 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0 && A3===1'b0)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0 && A3===1'b1)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && A3===1'b0)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && A3===1'b1)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && A3===1'b0)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && A3===1'b1)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1 && A3===1'b0)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      ifnone
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0 && A3===1'b0)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0 && A3===1'b1)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && A3===1'b0)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && A3===1'b1)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && A3===1'b0)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && A3===1'b1)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1 && A3===1'b0)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      ifnone
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0 && A3===1'b0)
      // comb arc B3 --> X
      (B3 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0 && A3===1'b1)
      // comb arc B3 --> X
      (B3 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && A3===1'b0)
      // comb arc B3 --> X
      (B3 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && A3===1'b1)
      // comb arc B3 --> X
      (B3 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && A3===1'b0)
      // comb arc B3 --> X
      (B3 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && A3===1'b1)
      // comb arc B3 --> X
      (B3 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1 && A3===1'b0)
      // comb arc B3 --> X
      (B3 => X) = (1.0,1.0);
      
      ifnone
      // comb arc B3 --> X
      (B3 => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_AOI33_4( X, A1, A2, A3, B1, B2, B3 );
input A1, A2, A3, B1, B2, B3;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_AOI33_4_func SAEDRVT14_AOI33_4_behav_inst(.X(X),.A1(A1),.A2(A2),.A3(A3),.B1(B1),.B2(B2),.B3(B3));
`else
   SAEDRVT14_AOI33_4_func SAEDRVT14_AOI33_4_inst(.X(X),.A1(A1),.A2(A2),.A3(A3),.B1(B1),.B2(B2),.B3(B3));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      if(B1===1'b0 && B2===1'b0 && B3===1'b0)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b0 && B3===1'b1)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b1 && B3===1'b0)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b1 && B3===1'b1)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b0 && B3===1'b0)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b0 && B3===1'b1)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b1 && B3===1'b0)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      ifnone
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b0 && B3===1'b0)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b0 && B3===1'b1)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b1 && B3===1'b0)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b1 && B3===1'b1)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b0 && B3===1'b0)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b0 && B3===1'b1)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b1 && B3===1'b0)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      ifnone
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b0 && B3===1'b0)
      // comb arc A3 --> X
      (A3 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b0 && B3===1'b1)
      // comb arc A3 --> X
      (A3 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b1 && B3===1'b0)
      // comb arc A3 --> X
      (A3 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b1 && B3===1'b1)
      // comb arc A3 --> X
      (A3 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b0 && B3===1'b0)
      // comb arc A3 --> X
      (A3 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b0 && B3===1'b1)
      // comb arc A3 --> X
      (A3 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b1 && B3===1'b0)
      // comb arc A3 --> X
      (A3 => X) = (1.0,1.0);
      
      ifnone
      // comb arc A3 --> X
      (A3 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0 && A3===1'b0)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0 && A3===1'b1)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && A3===1'b0)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && A3===1'b1)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && A3===1'b0)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && A3===1'b1)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1 && A3===1'b0)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      ifnone
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0 && A3===1'b0)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0 && A3===1'b1)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && A3===1'b0)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && A3===1'b1)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && A3===1'b0)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && A3===1'b1)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1 && A3===1'b0)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      ifnone
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0 && A3===1'b0)
      // comb arc B3 --> X
      (B3 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0 && A3===1'b1)
      // comb arc B3 --> X
      (B3 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && A3===1'b0)
      // comb arc B3 --> X
      (B3 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && A3===1'b1)
      // comb arc B3 --> X
      (B3 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && A3===1'b0)
      // comb arc B3 --> X
      (B3 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && A3===1'b1)
      // comb arc B3 --> X
      (B3 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1 && A3===1'b0)
      // comb arc B3 --> X
      (B3 => X) = (1.0,1.0);
      
      ifnone
      // comb arc B3 --> X
      (B3 => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_BUF_1( X, A );
input A;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_BUF_1_func SAEDRVT14_BUF_1_behav_inst(.X(X),.A(A));
`else
   SAEDRVT14_BUF_1_func SAEDRVT14_BUF_1_inst(.X(X),.A(A));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A --> X
      (A => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_BUF_10( X, A );
input A;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_BUF_10_func SAEDRVT14_BUF_10_behav_inst(.X(X),.A(A));
`else
   SAEDRVT14_BUF_10_func SAEDRVT14_BUF_10_inst(.X(X),.A(A));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A --> X
      (A => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_BUF_12( X, A );
input A;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_BUF_12_func SAEDRVT14_BUF_12_behav_inst(.X(X),.A(A));
`else
   SAEDRVT14_BUF_12_func SAEDRVT14_BUF_12_inst(.X(X),.A(A));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A --> X
      (A => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_BUF_16( X, A );
input A;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_BUF_16_func SAEDRVT14_BUF_16_behav_inst(.X(X),.A(A));
`else
   SAEDRVT14_BUF_16_func SAEDRVT14_BUF_16_inst(.X(X),.A(A));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A --> X
      (A => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_BUF_1P5( X, A );
input A;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_BUF_1P5_func SAEDRVT14_BUF_1P5_behav_inst(.X(X),.A(A));
`else
   SAEDRVT14_BUF_1P5_func SAEDRVT14_BUF_1P5_inst(.X(X),.A(A));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A --> X
      (A => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_BUF_2( X, A );
input A;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_BUF_2_func SAEDRVT14_BUF_2_behav_inst(.X(X),.A(A));
`else
   SAEDRVT14_BUF_2_func SAEDRVT14_BUF_2_inst(.X(X),.A(A));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A --> X
      (A => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_BUF_20( X, A );
input A;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_BUF_20_func SAEDRVT14_BUF_20_behav_inst(.X(X),.A(A));
`else
   SAEDRVT14_BUF_20_func SAEDRVT14_BUF_20_inst(.X(X),.A(A));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A --> X
      (A => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_BUF_3( X, A );
input A;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_BUF_3_func SAEDRVT14_BUF_3_behav_inst(.X(X),.A(A));
`else
   SAEDRVT14_BUF_3_func SAEDRVT14_BUF_3_inst(.X(X),.A(A));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A --> X
      (A => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_BUF_4( X, A );
input A;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_BUF_4_func SAEDRVT14_BUF_4_behav_inst(.X(X),.A(A));
`else
   SAEDRVT14_BUF_4_func SAEDRVT14_BUF_4_inst(.X(X),.A(A));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A --> X
      (A => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_BUF_6( X, A );
input A;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_BUF_6_func SAEDRVT14_BUF_6_behav_inst(.X(X),.A(A));
`else
   SAEDRVT14_BUF_6_func SAEDRVT14_BUF_6_inst(.X(X),.A(A));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A --> X
      (A => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_BUF_8( X, A );
input A;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_BUF_8_func SAEDRVT14_BUF_8_behav_inst(.X(X),.A(A));
`else
   SAEDRVT14_BUF_8_func SAEDRVT14_BUF_8_inst(.X(X),.A(A));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A --> X
      (A => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_BUF_CDC_2( X, A );
input A;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_BUF_CDC_2_func SAEDRVT14_BUF_CDC_2_behav_inst(.X(X),.A(A));
`else
   SAEDRVT14_BUF_CDC_2_func SAEDRVT14_BUF_CDC_2_inst(.X(X),.A(A));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A --> X
      (A => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_BUF_CDC_4( X, A );
input A;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_BUF_CDC_4_func SAEDRVT14_BUF_CDC_4_behav_inst(.X(X),.A(A));
`else
   SAEDRVT14_BUF_CDC_4_func SAEDRVT14_BUF_CDC_4_inst(.X(X),.A(A));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A --> X
      (A => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_BUF_ECO_1( X, A );
input A;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_BUF_ECO_1_func SAEDRVT14_BUF_ECO_1_behav_inst(.X(X),.A(A));
`else
   SAEDRVT14_BUF_ECO_1_func SAEDRVT14_BUF_ECO_1_inst(.X(X),.A(A));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A --> X
      (A => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_BUF_ECO_2( X, A );
input A;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_BUF_ECO_2_func SAEDRVT14_BUF_ECO_2_behav_inst(.X(X),.A(A));
`else
   SAEDRVT14_BUF_ECO_2_func SAEDRVT14_BUF_ECO_2_inst(.X(X),.A(A));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A --> X
      (A => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_BUF_ECO_3( X, A );
input A;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_BUF_ECO_3_func SAEDRVT14_BUF_ECO_3_behav_inst(.X(X),.A(A));
`else
   SAEDRVT14_BUF_ECO_3_func SAEDRVT14_BUF_ECO_3_inst(.X(X),.A(A));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A --> X
      (A => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_BUF_ECO_4( X, A );
input A;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_BUF_ECO_4_func SAEDRVT14_BUF_ECO_4_behav_inst(.X(X),.A(A));
`else
   SAEDRVT14_BUF_ECO_4_func SAEDRVT14_BUF_ECO_4_inst(.X(X),.A(A));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A --> X
      (A => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_BUF_ECO_6( X, A );
input A;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_BUF_ECO_6_func SAEDRVT14_BUF_ECO_6_behav_inst(.X(X),.A(A));
`else
   SAEDRVT14_BUF_ECO_6_func SAEDRVT14_BUF_ECO_6_inst(.X(X),.A(A));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A --> X
      (A => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_BUF_ECO_7( X, A );
input A;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_BUF_ECO_7_func SAEDRVT14_BUF_ECO_7_behav_inst(.X(X),.A(A));
`else
   SAEDRVT14_BUF_ECO_7_func SAEDRVT14_BUF_ECO_7_inst(.X(X),.A(A));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A --> X
      (A => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_BUF_ECO_8( X, A );
input A;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_BUF_ECO_8_func SAEDRVT14_BUF_ECO_8_behav_inst(.X(X),.A(A));
`else
   SAEDRVT14_BUF_ECO_8_func SAEDRVT14_BUF_ECO_8_inst(.X(X),.A(A));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A --> X
      (A => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_BUF_S_0P5( X, A );
input A;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_BUF_S_0P5_func SAEDRVT14_BUF_S_0P5_behav_inst(.X(X),.A(A));
`else
   SAEDRVT14_BUF_S_0P5_func SAEDRVT14_BUF_S_0P5_inst(.X(X),.A(A));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A --> X
      (A => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_BUF_S_0P75( X, A );
input A;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_BUF_S_0P75_func SAEDRVT14_BUF_S_0P75_behav_inst(.X(X),.A(A));
`else
   SAEDRVT14_BUF_S_0P75_func SAEDRVT14_BUF_S_0P75_inst(.X(X),.A(A));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A --> X
      (A => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_BUF_S_1( X, A );
input A;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_BUF_S_1_func SAEDRVT14_BUF_S_1_behav_inst(.X(X),.A(A));
`else
   SAEDRVT14_BUF_S_1_func SAEDRVT14_BUF_S_1_inst(.X(X),.A(A));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A --> X
      (A => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_BUF_S_10( X, A );
input A;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_BUF_S_10_func SAEDRVT14_BUF_S_10_behav_inst(.X(X),.A(A));
`else
   SAEDRVT14_BUF_S_10_func SAEDRVT14_BUF_S_10_inst(.X(X),.A(A));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A --> X
      (A => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_BUF_S_12( X, A );
input A;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_BUF_S_12_func SAEDRVT14_BUF_S_12_behav_inst(.X(X),.A(A));
`else
   SAEDRVT14_BUF_S_12_func SAEDRVT14_BUF_S_12_inst(.X(X),.A(A));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A --> X
      (A => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_BUF_S_16( X, A );
input A;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_BUF_S_16_func SAEDRVT14_BUF_S_16_behav_inst(.X(X),.A(A));
`else
   SAEDRVT14_BUF_S_16_func SAEDRVT14_BUF_S_16_inst(.X(X),.A(A));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A --> X
      (A => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_BUF_S_1P5( X, A );
input A;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_BUF_S_1P5_func SAEDRVT14_BUF_S_1P5_behav_inst(.X(X),.A(A));
`else
   SAEDRVT14_BUF_S_1P5_func SAEDRVT14_BUF_S_1P5_inst(.X(X),.A(A));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A --> X
      (A => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_BUF_S_2( X, A );
input A;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_BUF_S_2_func SAEDRVT14_BUF_S_2_behav_inst(.X(X),.A(A));
`else
   SAEDRVT14_BUF_S_2_func SAEDRVT14_BUF_S_2_inst(.X(X),.A(A));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A --> X
      (A => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_BUF_S_20( X, A );
input A;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_BUF_S_20_func SAEDRVT14_BUF_S_20_behav_inst(.X(X),.A(A));
`else
   SAEDRVT14_BUF_S_20_func SAEDRVT14_BUF_S_20_inst(.X(X),.A(A));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A --> X
      (A => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_BUF_S_3( X, A );
input A;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_BUF_S_3_func SAEDRVT14_BUF_S_3_behav_inst(.X(X),.A(A));
`else
   SAEDRVT14_BUF_S_3_func SAEDRVT14_BUF_S_3_inst(.X(X),.A(A));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A --> X
      (A => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_BUF_S_4( X, A );
input A;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_BUF_S_4_func SAEDRVT14_BUF_S_4_behav_inst(.X(X),.A(A));
`else
   SAEDRVT14_BUF_S_4_func SAEDRVT14_BUF_S_4_inst(.X(X),.A(A));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A --> X
      (A => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_BUF_S_6( X, A );
input A;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_BUF_S_6_func SAEDRVT14_BUF_S_6_behav_inst(.X(X),.A(A));
`else
   SAEDRVT14_BUF_S_6_func SAEDRVT14_BUF_S_6_inst(.X(X),.A(A));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A --> X
      (A => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_BUF_S_8( X, A );
input A;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_BUF_S_8_func SAEDRVT14_BUF_S_8_behav_inst(.X(X),.A(A));
`else
   SAEDRVT14_BUF_S_8_func SAEDRVT14_BUF_S_8_inst(.X(X),.A(A));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A --> X
      (A => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_BUF_UCDC_0P5( X, A );
input A;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_BUF_UCDC_0P5_func SAEDRVT14_BUF_UCDC_0P5_behav_inst(.X(X),.A(A));
`else
   SAEDRVT14_BUF_UCDC_0P5_func SAEDRVT14_BUF_UCDC_0P5_inst(.X(X),.A(A));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A --> X
      (A => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_BUF_UCDC_1( X, A );
input A;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_BUF_UCDC_1_func SAEDRVT14_BUF_UCDC_1_behav_inst(.X(X),.A(A));
`else
   SAEDRVT14_BUF_UCDC_1_func SAEDRVT14_BUF_UCDC_1_inst(.X(X),.A(A));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A --> X
      (A => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_BUF_U_0P5( X, A );
input A;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_BUF_U_0P5_func SAEDRVT14_BUF_U_0P5_behav_inst(.X(X),.A(A));
`else
   SAEDRVT14_BUF_U_0P5_func SAEDRVT14_BUF_U_0P5_inst(.X(X),.A(A));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A --> X
      (A => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_BUF_U_0P75( X, A );
input A;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_BUF_U_0P75_func SAEDRVT14_BUF_U_0P75_behav_inst(.X(X),.A(A));
`else
   SAEDRVT14_BUF_U_0P75_func SAEDRVT14_BUF_U_0P75_inst(.X(X),.A(A));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A --> X
      (A => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_DCAP_ECO_12(  );

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_DCAP_ECO_12_func SAEDRVT14_DCAP_ECO_12_behav_inst();
`else
   SAEDRVT14_DCAP_ECO_12_func SAEDRVT14_DCAP_ECO_12_inst();
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_DCAP_ECO_15(  );

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_DCAP_ECO_15_func SAEDRVT14_DCAP_ECO_15_behav_inst();
`else
   SAEDRVT14_DCAP_ECO_15_func SAEDRVT14_DCAP_ECO_15_inst();
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_DCAP_ECO_18(  );

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_DCAP_ECO_18_func SAEDRVT14_DCAP_ECO_18_behav_inst();
`else
   SAEDRVT14_DCAP_ECO_18_func SAEDRVT14_DCAP_ECO_18_inst();
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_DCAP_ECO_6(  );

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_DCAP_ECO_6_func SAEDRVT14_DCAP_ECO_6_behav_inst();
`else
   SAEDRVT14_DCAP_ECO_6_func SAEDRVT14_DCAP_ECO_6_inst();
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_DCAP_ECO_9(  );

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_DCAP_ECO_9_func SAEDRVT14_DCAP_ECO_9_behav_inst();
`else
   SAEDRVT14_DCAP_ECO_9_func SAEDRVT14_DCAP_ECO_9_inst();
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_DCAP_V4_16(  );

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_DCAP_V4_16_func SAEDRVT14_DCAP_V4_16_behav_inst();
`else
   SAEDRVT14_DCAP_V4_16_func SAEDRVT14_DCAP_V4_16_inst();
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_DCAP_V4_32(  );

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_DCAP_V4_32_func SAEDRVT14_DCAP_V4_32_behav_inst();
`else
   SAEDRVT14_DCAP_V4_32_func SAEDRVT14_DCAP_V4_32_inst();
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_DCAP_V4_5(  );

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_DCAP_V4_5_func SAEDRVT14_DCAP_V4_5_behav_inst();
`else
   SAEDRVT14_DCAP_V4_5_func SAEDRVT14_DCAP_V4_5_inst();
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_DCAP_V4_64(  );

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_DCAP_V4_64_func SAEDRVT14_DCAP_V4_64_behav_inst();
`else
   SAEDRVT14_DCAP_V4_64_func SAEDRVT14_DCAP_V4_64_inst();
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_DCAP_V4_8(  );

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_DCAP_V4_8_func SAEDRVT14_DCAP_V4_8_behav_inst();
`else
   SAEDRVT14_DCAP_V4_8_func SAEDRVT14_DCAP_V4_8_inst();
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_DELPROGS4_12( X, A, S0, S1, S2, S3 );
input A, S0, S1, S2, S3;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_DELPROGS4_12_func SAEDRVT14_DELPROGS4_12_behav_inst(.X(X),.A(A),.S0(S0),.S1(S1),.S2(S2),.S3(S3));
`else
   SAEDRVT14_DELPROGS4_12_func SAEDRVT14_DELPROGS4_12_inst(.X(X),.A(A),.S0(S0),.S1(S1),.S2(S2),.S3(S3));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      if(S0===1'b0 && S1===1'b0 && S2===1'b0 && S3===1'b1)
      // comb arc A --> X
      (A => X) = (1.0,1.0);
      
      if(S0===1'b0 && S1===1'b0 && S2===1'b1 && S3===1'b0)
      // comb arc A --> X
      (A => X) = (1.0,1.0);
      
      if(S0===1'b0 && S1===1'b1 && S2===1'b0 && S3===1'b0)
      // comb arc A --> X
      (A => X) = (1.0,1.0);
      
      if(S0===1'b1 && S1===1'b0 && S2===1'b0 && S3===1'b0)
      // comb arc A --> X
      (A => X) = (1.0,1.0);
      
      ifnone
      // comb arc A --> X
      (A => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_DELPROGS4_16( X, A, S0, S1, S2, S3 );
input A, S0, S1, S2, S3;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_DELPROGS4_16_func SAEDRVT14_DELPROGS4_16_behav_inst(.X(X),.A(A),.S0(S0),.S1(S1),.S2(S2),.S3(S3));
`else
   SAEDRVT14_DELPROGS4_16_func SAEDRVT14_DELPROGS4_16_inst(.X(X),.A(A),.S0(S0),.S1(S1),.S2(S2),.S3(S3));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      if(S0===1'b0 && S1===1'b0 && S2===1'b0 && S3===1'b1)
      // comb arc A --> X
      (A => X) = (1.0,1.0);
      
      if(S0===1'b0 && S1===1'b0 && S2===1'b1 && S3===1'b0)
      // comb arc A --> X
      (A => X) = (1.0,1.0);
      
      if(S0===1'b0 && S1===1'b1 && S2===1'b0 && S3===1'b0)
      // comb arc A --> X
      (A => X) = (1.0,1.0);
      
      if(S0===1'b1 && S1===1'b0 && S2===1'b0 && S3===1'b0)
      // comb arc A --> X
      (A => X) = (1.0,1.0);
      
      ifnone
      // comb arc A --> X
      (A => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_DELPROGS4_4( X, A, S0, S1, S2, S3 );
input A, S0, S1, S2, S3;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_DELPROGS4_4_func SAEDRVT14_DELPROGS4_4_behav_inst(.X(X),.A(A),.S0(S0),.S1(S1),.S2(S2),.S3(S3));
`else
   SAEDRVT14_DELPROGS4_4_func SAEDRVT14_DELPROGS4_4_inst(.X(X),.A(A),.S0(S0),.S1(S1),.S2(S2),.S3(S3));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      if(S0===1'b0 && S1===1'b0 && S2===1'b0 && S3===1'b1)
      // comb arc A --> X
      (A => X) = (1.0,1.0);
      
      if(S0===1'b0 && S1===1'b0 && S2===1'b1 && S3===1'b0)
      // comb arc A --> X
      (A => X) = (1.0,1.0);
      
      if(S0===1'b0 && S1===1'b1 && S2===1'b0 && S3===1'b0)
      // comb arc A --> X
      (A => X) = (1.0,1.0);
      
      if(S0===1'b1 && S1===1'b0 && S2===1'b0 && S3===1'b0)
      // comb arc A --> X
      (A => X) = (1.0,1.0);
      
      ifnone
      // comb arc A --> X
      (A => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_DELPROGS4_6( X, A, S0, S1, S2, S3 );
input A, S0, S1, S2, S3;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_DELPROGS4_6_func SAEDRVT14_DELPROGS4_6_behav_inst(.X(X),.A(A),.S0(S0),.S1(S1),.S2(S2),.S3(S3));
`else
   SAEDRVT14_DELPROGS4_6_func SAEDRVT14_DELPROGS4_6_inst(.X(X),.A(A),.S0(S0),.S1(S1),.S2(S2),.S3(S3));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      if(S0===1'b0 && S1===1'b0 && S2===1'b0 && S3===1'b1)
      // comb arc A --> X
      (A => X) = (1.0,1.0);
      
      if(S0===1'b0 && S1===1'b0 && S2===1'b1 && S3===1'b0)
      // comb arc A --> X
      (A => X) = (1.0,1.0);
      
      if(S0===1'b0 && S1===1'b1 && S2===1'b0 && S3===1'b0)
      // comb arc A --> X
      (A => X) = (1.0,1.0);
      
      if(S0===1'b1 && S1===1'b0 && S2===1'b0 && S3===1'b0)
      // comb arc A --> X
      (A => X) = (1.0,1.0);
      
      ifnone
      // comb arc A --> X
      (A => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_DELPROGS4_8( X, A, S0, S1, S2, S3 );
input A, S0, S1, S2, S3;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_DELPROGS4_8_func SAEDRVT14_DELPROGS4_8_behav_inst(.X(X),.A(A),.S0(S0),.S1(S1),.S2(S2),.S3(S3));
`else
   SAEDRVT14_DELPROGS4_8_func SAEDRVT14_DELPROGS4_8_inst(.X(X),.A(A),.S0(S0),.S1(S1),.S2(S2),.S3(S3));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      if(S0===1'b0 && S1===1'b0 && S2===1'b0 && S3===1'b1)
      // comb arc A --> X
      (A => X) = (1.0,1.0);
      
      if(S0===1'b0 && S1===1'b0 && S2===1'b1 && S3===1'b0)
      // comb arc A --> X
      (A => X) = (1.0,1.0);
      
      if(S0===1'b0 && S1===1'b1 && S2===1'b0 && S3===1'b0)
      // comb arc A --> X
      (A => X) = (1.0,1.0);
      
      if(S0===1'b1 && S1===1'b0 && S2===1'b0 && S3===1'b0)
      // comb arc A --> X
      (A => X) = (1.0,1.0);
      
      ifnone
      // comb arc A --> X
      (A => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_DELPROGS4_Y2_24( X, A, S0, S1, S2, S3 );
input A, S0, S1, S2, S3;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_DELPROGS4_Y2_24_func SAEDRVT14_DELPROGS4_Y2_24_behav_inst(.X(X),.A(A),.S0(S0),.S1(S1),.S2(S2),.S3(S3));
`else
   SAEDRVT14_DELPROGS4_Y2_24_func SAEDRVT14_DELPROGS4_Y2_24_inst(.X(X),.A(A),.S0(S0),.S1(S1),.S2(S2),.S3(S3));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      if(S0===1'b0 && S1===1'b0 && S2===1'b0 && S3===1'b1)
      // comb arc A --> X
      (A => X) = (1.0,1.0);
      
      if(S0===1'b0 && S1===1'b0 && S2===1'b1 && S3===1'b0)
      // comb arc A --> X
      (A => X) = (1.0,1.0);
      
      if(S0===1'b0 && S1===1'b1 && S2===1'b0 && S3===1'b0)
      // comb arc A --> X
      (A => X) = (1.0,1.0);
      
      if(S0===1'b1 && S1===1'b0 && S2===1'b0 && S3===1'b0)
      // comb arc A --> X
      (A => X) = (1.0,1.0);
      
      ifnone
      // comb arc A --> X
      (A => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_DELPROGS9_V1_4( X, A, S0, S1, S2, S3, S4, S5, S6, S7, S8 );
input A, S0, S1, S2, S3, S4, S5, S6, S7, S8;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_DELPROGS9_V1_4_func SAEDRVT14_DELPROGS9_V1_4_behav_inst(.X(X),.A(A),.S0(S0),.S1(S1),.S2(S2),.S3(S3),.S4(S4),.S5(S5),.S6(S6),.S7(S7),.S8(S8));
`else
   SAEDRVT14_DELPROGS9_V1_4_func SAEDRVT14_DELPROGS9_V1_4_inst(.X(X),.A(A),.S0(S0),.S1(S1),.S2(S2),.S3(S3),.S4(S4),.S5(S5),.S6(S6),.S7(S7),.S8(S8));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      if(S0===1'b0 && S1===1'b0 && S2===1'b0 && S3===1'b0 && S4===1'b0 && S5===1'b0 && S6===1'b0 && S7===1'b0 && S8===1'b1)
      // comb arc A --> X
      (A => X) = (1.0,1.0);
      
      if(S0===1'b0 && S1===1'b0 && S2===1'b0 && S3===1'b0 && S4===1'b0 && S5===1'b0 && S6===1'b0 && S7===1'b1 && S8===1'b0)
      // comb arc A --> X
      (A => X) = (1.0,1.0);
      
      if(S0===1'b0 && S1===1'b0 && S2===1'b0 && S3===1'b0 && S4===1'b0 && S5===1'b0 && S6===1'b1 && S7===1'b0 && S8===1'b0)
      // comb arc A --> X
      (A => X) = (1.0,1.0);
      
      if(S0===1'b0 && S1===1'b0 && S2===1'b0 && S3===1'b0 && S4===1'b0 && S5===1'b1 && S6===1'b0 && S7===1'b0 && S8===1'b0)
      // comb arc A --> X
      (A => X) = (1.0,1.0);
      
      if(S0===1'b0 && S1===1'b0 && S2===1'b0 && S3===1'b0 && S4===1'b1 && S5===1'b0 && S6===1'b0 && S7===1'b0 && S8===1'b0)
      // comb arc A --> X
      (A => X) = (1.0,1.0);
      
      if(S0===1'b0 && S1===1'b0 && S2===1'b0 && S3===1'b1 && S4===1'b0 && S5===1'b0 && S6===1'b0 && S7===1'b0 && S8===1'b0)
      // comb arc A --> X
      (A => X) = (1.0,1.0);
      
      if(S0===1'b0 && S1===1'b0 && S2===1'b1 && S3===1'b0 && S4===1'b0 && S5===1'b0 && S6===1'b0 && S7===1'b0 && S8===1'b0)
      // comb arc A --> X
      (A => X) = (1.0,1.0);
      
      if(S0===1'b0 && S1===1'b1 && S2===1'b0 && S3===1'b0 && S4===1'b0 && S5===1'b0 && S6===1'b0 && S7===1'b0 && S8===1'b0)
      // comb arc A --> X
      (A => X) = (1.0,1.0);
      
      if(S0===1'b1 && S1===1'b0 && S2===1'b0 && S3===1'b0 && S4===1'b0 && S5===1'b0 && S6===1'b0 && S7===1'b0 && S8===1'b0)
      // comb arc A --> X
      (A => X) = (1.0,1.0);
      
      ifnone
      // comb arc A --> X
      (A => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_DELPROGS9_V2_4( X, A, S0, S1, S2, S3, S4, S5, S6, S7, S8 );
input A, S0, S1, S2, S3, S4, S5, S6, S7, S8;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_DELPROGS9_V2_4_func SAEDRVT14_DELPROGS9_V2_4_behav_inst(.X(X),.A(A),.S0(S0),.S1(S1),.S2(S2),.S3(S3),.S4(S4),.S5(S5),.S6(S6),.S7(S7),.S8(S8));
`else
   SAEDRVT14_DELPROGS9_V2_4_func SAEDRVT14_DELPROGS9_V2_4_inst(.X(X),.A(A),.S0(S0),.S1(S1),.S2(S2),.S3(S3),.S4(S4),.S5(S5),.S6(S6),.S7(S7),.S8(S8));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      if(S0===1'b0 && S1===1'b0 && S2===1'b0 && S3===1'b0 && S4===1'b0 && S5===1'b0 && S6===1'b0 && S7===1'b0 && S8===1'b1)
      // comb arc A --> X
      (A => X) = (1.0,1.0);
      
      if(S0===1'b0 && S1===1'b0 && S2===1'b0 && S3===1'b0 && S4===1'b0 && S5===1'b0 && S6===1'b0 && S7===1'b1 && S8===1'b0)
      // comb arc A --> X
      (A => X) = (1.0,1.0);
      
      if(S0===1'b0 && S1===1'b0 && S2===1'b0 && S3===1'b0 && S4===1'b0 && S5===1'b0 && S6===1'b1 && S7===1'b0 && S8===1'b0)
      // comb arc A --> X
      (A => X) = (1.0,1.0);
      
      if(S0===1'b0 && S1===1'b0 && S2===1'b0 && S3===1'b0 && S4===1'b0 && S5===1'b1 && S6===1'b0 && S7===1'b0 && S8===1'b0)
      // comb arc A --> X
      (A => X) = (1.0,1.0);
      
      if(S0===1'b0 && S1===1'b0 && S2===1'b0 && S3===1'b0 && S4===1'b1 && S5===1'b0 && S6===1'b0 && S7===1'b0 && S8===1'b0)
      // comb arc A --> X
      (A => X) = (1.0,1.0);
      
      if(S0===1'b0 && S1===1'b0 && S2===1'b0 && S3===1'b1 && S4===1'b0 && S5===1'b0 && S6===1'b0 && S7===1'b0 && S8===1'b0)
      // comb arc A --> X
      (A => X) = (1.0,1.0);
      
      if(S0===1'b0 && S1===1'b0 && S2===1'b1 && S3===1'b0 && S4===1'b0 && S5===1'b0 && S6===1'b0 && S7===1'b0 && S8===1'b0)
      // comb arc A --> X
      (A => X) = (1.0,1.0);
      
      if(S0===1'b0 && S1===1'b1 && S2===1'b0 && S3===1'b0 && S4===1'b0 && S5===1'b0 && S6===1'b0 && S7===1'b0 && S8===1'b0)
      // comb arc A --> X
      (A => X) = (1.0,1.0);
      
      if(S0===1'b1 && S1===1'b0 && S2===1'b0 && S3===1'b0 && S4===1'b0 && S5===1'b0 && S6===1'b0 && S7===1'b0 && S8===1'b0)
      // comb arc A --> X
      (A => X) = (1.0,1.0);
      
      ifnone
      // comb arc A --> X
      (A => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_DEL_L4D100_1( X, A );
input A;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_DEL_L4D100_1_func SAEDRVT14_DEL_L4D100_1_behav_inst(.X(X),.A(A));
`else
   SAEDRVT14_DEL_L4D100_1_func SAEDRVT14_DEL_L4D100_1_inst(.X(X),.A(A));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A --> X
      (A => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_DEL_L4D100_2( X, A );
input A;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_DEL_L4D100_2_func SAEDRVT14_DEL_L4D100_2_behav_inst(.X(X),.A(A));
`else
   SAEDRVT14_DEL_L4D100_2_func SAEDRVT14_DEL_L4D100_2_inst(.X(X),.A(A));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A --> X
      (A => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_DEL_R2V1_1( X, A );
input A;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_DEL_R2V1_1_func SAEDRVT14_DEL_R2V1_1_behav_inst(.X(X),.A(A));
`else
   SAEDRVT14_DEL_R2V1_1_func SAEDRVT14_DEL_R2V1_1_inst(.X(X),.A(A));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A --> X
      (A => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_DEL_R2V1_2( X, A );
input A;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_DEL_R2V1_2_func SAEDRVT14_DEL_R2V1_2_behav_inst(.X(X),.A(A));
`else
   SAEDRVT14_DEL_R2V1_2_func SAEDRVT14_DEL_R2V1_2_inst(.X(X),.A(A));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A --> X
      (A => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_DEL_R2V2_1( X, A );
input A;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_DEL_R2V2_1_func SAEDRVT14_DEL_R2V2_1_behav_inst(.X(X),.A(A));
`else
   SAEDRVT14_DEL_R2V2_1_func SAEDRVT14_DEL_R2V2_1_inst(.X(X),.A(A));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A --> X
      (A => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_DEL_R2V2_2( X, A );
input A;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_DEL_R2V2_2_func SAEDRVT14_DEL_R2V2_2_behav_inst(.X(X),.A(A));
`else
   SAEDRVT14_DEL_R2V2_2_func SAEDRVT14_DEL_R2V2_2_inst(.X(X),.A(A));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A --> X
      (A => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_DEL_R2V3_1( X, A );
input A;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_DEL_R2V3_1_func SAEDRVT14_DEL_R2V3_1_behav_inst(.X(X),.A(A));
`else
   SAEDRVT14_DEL_R2V3_1_func SAEDRVT14_DEL_R2V3_1_inst(.X(X),.A(A));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A --> X
      (A => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_DEL_R2V3_2( X, A );
input A;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_DEL_R2V3_2_func SAEDRVT14_DEL_R2V3_2_behav_inst(.X(X),.A(A));
`else
   SAEDRVT14_DEL_R2V3_2_func SAEDRVT14_DEL_R2V3_2_inst(.X(X),.A(A));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A --> X
      (A => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_EN2_0P5( X, A1, A2 );
input A1, A2;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_EN2_0P5_func SAEDRVT14_EN2_0P5_behav_inst(.X(X),.A1(A1),.A2(A2));
`else
   SAEDRVT14_EN2_0P5_func SAEDRVT14_EN2_0P5_inst(.X(X),.A1(A1),.A2(A2));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      ifnone
      // comb arc posedge A1 --> (X:A1)
      (posedge A1 => (X:A1)) = (1.0,1.0);
      
      ifnone
      // comb arc negedge A1 --> (X:A1)
      (negedge A1 => (X:A1)) = (1.0,1.0);
      
      ifnone
      // comb arc posedge A2 --> (X:A2)
      (posedge A2 => (X:A2)) = (1.0,1.0);
      
      ifnone
      // comb arc negedge A2 --> (X:A2)
      (negedge A2 => (X:A2)) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_EN2_1( X, A1, A2 );
input A1, A2;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_EN2_1_func SAEDRVT14_EN2_1_behav_inst(.X(X),.A1(A1),.A2(A2));
`else
   SAEDRVT14_EN2_1_func SAEDRVT14_EN2_1_inst(.X(X),.A1(A1),.A2(A2));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      ifnone
      // comb arc posedge A1 --> (X:A1)
      (posedge A1 => (X:A1)) = (1.0,1.0);
      
      ifnone
      // comb arc negedge A1 --> (X:A1)
      (negedge A1 => (X:A1)) = (1.0,1.0);
      
      ifnone
      // comb arc posedge A2 --> (X:A2)
      (posedge A2 => (X:A2)) = (1.0,1.0);
      
      ifnone
      // comb arc negedge A2 --> (X:A2)
      (negedge A2 => (X:A2)) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_EN2_1P5( X, A1, A2 );
input A1, A2;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_EN2_1P5_func SAEDRVT14_EN2_1P5_behav_inst(.X(X),.A1(A1),.A2(A2));
`else
   SAEDRVT14_EN2_1P5_func SAEDRVT14_EN2_1P5_inst(.X(X),.A1(A1),.A2(A2));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      ifnone
      // comb arc posedge A1 --> (X:A1)
      (posedge A1 => (X:A1)) = (1.0,1.0);
      
      ifnone
      // comb arc negedge A1 --> (X:A1)
      (negedge A1 => (X:A1)) = (1.0,1.0);
      
      ifnone
      // comb arc posedge A2 --> (X:A2)
      (posedge A2 => (X:A2)) = (1.0,1.0);
      
      ifnone
      // comb arc negedge A2 --> (X:A2)
      (negedge A2 => (X:A2)) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_EN2_2( X, A1, A2 );
input A1, A2;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_EN2_2_func SAEDRVT14_EN2_2_behav_inst(.X(X),.A1(A1),.A2(A2));
`else
   SAEDRVT14_EN2_2_func SAEDRVT14_EN2_2_inst(.X(X),.A1(A1),.A2(A2));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      ifnone
      // comb arc posedge A1 --> (X:A1)
      (posedge A1 => (X:A1)) = (1.0,1.0);
      
      ifnone
      // comb arc negedge A1 --> (X:A1)
      (negedge A1 => (X:A1)) = (1.0,1.0);
      
      ifnone
      // comb arc posedge A2 --> (X:A2)
      (posedge A2 => (X:A2)) = (1.0,1.0);
      
      ifnone
      // comb arc negedge A2 --> (X:A2)
      (negedge A2 => (X:A2)) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_EN2_3( X, A1, A2 );
input A1, A2;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_EN2_3_func SAEDRVT14_EN2_3_behav_inst(.X(X),.A1(A1),.A2(A2));
`else
   SAEDRVT14_EN2_3_func SAEDRVT14_EN2_3_inst(.X(X),.A1(A1),.A2(A2));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      ifnone
      // comb arc posedge A1 --> (X:A1)
      (posedge A1 => (X:A1)) = (1.0,1.0);
      
      ifnone
      // comb arc negedge A1 --> (X:A1)
      (negedge A1 => (X:A1)) = (1.0,1.0);
      
      ifnone
      // comb arc posedge A2 --> (X:A2)
      (posedge A2 => (X:A2)) = (1.0,1.0);
      
      ifnone
      // comb arc negedge A2 --> (X:A2)
      (negedge A2 => (X:A2)) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_EN2_4( X, A1, A2 );
input A1, A2;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_EN2_4_func SAEDRVT14_EN2_4_behav_inst(.X(X),.A1(A1),.A2(A2));
`else
   SAEDRVT14_EN2_4_func SAEDRVT14_EN2_4_inst(.X(X),.A1(A1),.A2(A2));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      ifnone
      // comb arc posedge A1 --> (X:A1)
      (posedge A1 => (X:A1)) = (1.0,1.0);
      
      ifnone
      // comb arc negedge A1 --> (X:A1)
      (negedge A1 => (X:A1)) = (1.0,1.0);
      
      ifnone
      // comb arc posedge A2 --> (X:A2)
      (posedge A2 => (X:A2)) = (1.0,1.0);
      
      ifnone
      // comb arc negedge A2 --> (X:A2)
      (negedge A2 => (X:A2)) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_EN2_ECO_1( X, A1, A2 );
input A1, A2;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_EN2_ECO_1_func SAEDRVT14_EN2_ECO_1_behav_inst(.X(X),.A1(A1),.A2(A2));
`else
   SAEDRVT14_EN2_ECO_1_func SAEDRVT14_EN2_ECO_1_inst(.X(X),.A1(A1),.A2(A2));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      ifnone
      // comb arc posedge A1 --> (X:A1)
      (posedge A1 => (X:A1)) = (1.0,1.0);
      
      ifnone
      // comb arc negedge A1 --> (X:A1)
      (negedge A1 => (X:A1)) = (1.0,1.0);
      
      ifnone
      // comb arc posedge A2 --> (X:A2)
      (posedge A2 => (X:A2)) = (1.0,1.0);
      
      ifnone
      // comb arc negedge A2 --> (X:A2)
      (negedge A2 => (X:A2)) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_EN2_V1_0P75( X, A1, A2 );
input A1, A2;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_EN2_V1_0P75_func SAEDRVT14_EN2_V1_0P75_behav_inst(.X(X),.A1(A1),.A2(A2));
`else
   SAEDRVT14_EN2_V1_0P75_func SAEDRVT14_EN2_V1_0P75_inst(.X(X),.A1(A1),.A2(A2));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      ifnone
      // comb arc posedge A1 --> (X:A1)
      (posedge A1 => (X:A1)) = (1.0,1.0);
      
      ifnone
      // comb arc negedge A1 --> (X:A1)
      (negedge A1 => (X:A1)) = (1.0,1.0);
      
      ifnone
      // comb arc posedge A2 --> (X:A2)
      (posedge A2 => (X:A2)) = (1.0,1.0);
      
      ifnone
      // comb arc negedge A2 --> (X:A2)
      (negedge A2 => (X:A2)) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_EN2_V1_1P5( X, A1, A2 );
input A1, A2;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_EN2_V1_1P5_func SAEDRVT14_EN2_V1_1P5_behav_inst(.X(X),.A1(A1),.A2(A2));
`else
   SAEDRVT14_EN2_V1_1P5_func SAEDRVT14_EN2_V1_1P5_inst(.X(X),.A1(A1),.A2(A2));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      ifnone
      // comb arc posedge A1 --> (X:A1)
      (posedge A1 => (X:A1)) = (1.0,1.0);
      
      ifnone
      // comb arc negedge A1 --> (X:A1)
      (negedge A1 => (X:A1)) = (1.0,1.0);
      
      ifnone
      // comb arc posedge A2 --> (X:A2)
      (posedge A2 => (X:A2)) = (1.0,1.0);
      
      ifnone
      // comb arc negedge A2 --> (X:A2)
      (negedge A2 => (X:A2)) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_EN3_1( X, A1, A2, A3 );
input A1, A2, A3;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_EN3_1_func SAEDRVT14_EN3_1_behav_inst(.X(X),.A1(A1),.A2(A2),.A3(A3));
`else
   SAEDRVT14_EN3_1_func SAEDRVT14_EN3_1_inst(.X(X),.A1(A1),.A2(A2),.A3(A3));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      if(A2===1'b0 && A3===1'b0)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(A2===1'b1 && A3===1'b1)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      ifnone
      // comb arc posedge A1 --> (X:A1)
      (posedge A1 => (X:A1)) = (1.0,1.0);
      
      ifnone
      // comb arc negedge A1 --> (X:A1)
      (negedge A1 => (X:A1)) = (1.0,1.0);
      
      if(A2===1'b0 && A3===1'b1)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(A2===1'b1 && A3===1'b0)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A3===1'b0)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A3===1'b1)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      ifnone
      // comb arc posedge A2 --> (X:A2)
      (posedge A2 => (X:A2)) = (1.0,1.0);
      
      ifnone
      // comb arc negedge A2 --> (X:A2)
      (negedge A2 => (X:A2)) = (1.0,1.0);
      
      if(A1===1'b0 && A3===1'b1)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A3===1'b0)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0)
      // comb arc A3 --> X
      (A3 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1)
      // comb arc A3 --> X
      (A3 => X) = (1.0,1.0);
      
      ifnone
      // comb arc posedge A3 --> (X:A3)
      (posedge A3 => (X:A3)) = (1.0,1.0);
      
      ifnone
      // comb arc negedge A3 --> (X:A3)
      (negedge A3 => (X:A3)) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1)
      // comb arc A3 --> X
      (A3 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0)
      // comb arc A3 --> X
      (A3 => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_EN3_2( X, A1, A2, A3 );
input A1, A2, A3;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_EN3_2_func SAEDRVT14_EN3_2_behav_inst(.X(X),.A1(A1),.A2(A2),.A3(A3));
`else
   SAEDRVT14_EN3_2_func SAEDRVT14_EN3_2_inst(.X(X),.A1(A1),.A2(A2),.A3(A3));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      if(A2===1'b0 && A3===1'b0)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(A2===1'b1 && A3===1'b1)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      ifnone
      // comb arc posedge A1 --> (X:A1)
      (posedge A1 => (X:A1)) = (1.0,1.0);
      
      ifnone
      // comb arc negedge A1 --> (X:A1)
      (negedge A1 => (X:A1)) = (1.0,1.0);
      
      if(A2===1'b0 && A3===1'b1)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(A2===1'b1 && A3===1'b0)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A3===1'b0)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A3===1'b1)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      ifnone
      // comb arc posedge A2 --> (X:A2)
      (posedge A2 => (X:A2)) = (1.0,1.0);
      
      ifnone
      // comb arc negedge A2 --> (X:A2)
      (negedge A2 => (X:A2)) = (1.0,1.0);
      
      if(A1===1'b0 && A3===1'b1)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A3===1'b0)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0)
      // comb arc A3 --> X
      (A3 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1)
      // comb arc A3 --> X
      (A3 => X) = (1.0,1.0);
      
      ifnone
      // comb arc posedge A3 --> (X:A3)
      (posedge A3 => (X:A3)) = (1.0,1.0);
      
      ifnone
      // comb arc negedge A3 --> (X:A3)
      (negedge A3 => (X:A3)) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1)
      // comb arc A3 --> X
      (A3 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0)
      // comb arc A3 --> X
      (A3 => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_EN3_3( X, A1, A2, A3 );
input A1, A2, A3;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_EN3_3_func SAEDRVT14_EN3_3_behav_inst(.X(X),.A1(A1),.A2(A2),.A3(A3));
`else
   SAEDRVT14_EN3_3_func SAEDRVT14_EN3_3_inst(.X(X),.A1(A1),.A2(A2),.A3(A3));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      if(A2===1'b0 && A3===1'b0)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(A2===1'b1 && A3===1'b1)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      ifnone
      // comb arc posedge A1 --> (X:A1)
      (posedge A1 => (X:A1)) = (1.0,1.0);
      
      ifnone
      // comb arc negedge A1 --> (X:A1)
      (negedge A1 => (X:A1)) = (1.0,1.0);
      
      if(A2===1'b0 && A3===1'b1)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(A2===1'b1 && A3===1'b0)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A3===1'b0)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A3===1'b1)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      ifnone
      // comb arc posedge A2 --> (X:A2)
      (posedge A2 => (X:A2)) = (1.0,1.0);
      
      ifnone
      // comb arc negedge A2 --> (X:A2)
      (negedge A2 => (X:A2)) = (1.0,1.0);
      
      if(A1===1'b0 && A3===1'b1)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A3===1'b0)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0)
      // comb arc A3 --> X
      (A3 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1)
      // comb arc A3 --> X
      (A3 => X) = (1.0,1.0);
      
      ifnone
      // comb arc posedge A3 --> (X:A3)
      (posedge A3 => (X:A3)) = (1.0,1.0);
      
      ifnone
      // comb arc negedge A3 --> (X:A3)
      (negedge A3 => (X:A3)) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1)
      // comb arc A3 --> X
      (A3 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0)
      // comb arc A3 --> X
      (A3 => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_EN3_U_0P5( X, A1, A2, A3 );
input A1, A2, A3;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_EN3_U_0P5_func SAEDRVT14_EN3_U_0P5_behav_inst(.X(X),.A1(A1),.A2(A2),.A3(A3));
`else
   SAEDRVT14_EN3_U_0P5_func SAEDRVT14_EN3_U_0P5_inst(.X(X),.A1(A1),.A2(A2),.A3(A3));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      if(A2===1'b0 && A3===1'b0)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(A2===1'b1 && A3===1'b1)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      ifnone
      // comb arc posedge A1 --> (X:A1)
      (posedge A1 => (X:A1)) = (1.0,1.0);
      
      ifnone
      // comb arc negedge A1 --> (X:A1)
      (negedge A1 => (X:A1)) = (1.0,1.0);
      
      if(A2===1'b0 && A3===1'b1)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(A2===1'b1 && A3===1'b0)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A3===1'b0)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A3===1'b1)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      ifnone
      // comb arc posedge A2 --> (X:A2)
      (posedge A2 => (X:A2)) = (1.0,1.0);
      
      ifnone
      // comb arc negedge A2 --> (X:A2)
      (negedge A2 => (X:A2)) = (1.0,1.0);
      
      if(A1===1'b0 && A3===1'b1)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A3===1'b0)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0)
      // comb arc A3 --> X
      (A3 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1)
      // comb arc A3 --> X
      (A3 => X) = (1.0,1.0);
      
      ifnone
      // comb arc posedge A3 --> (X:A3)
      (posedge A3 => (X:A3)) = (1.0,1.0);
      
      ifnone
      // comb arc negedge A3 --> (X:A3)
      (negedge A3 => (X:A3)) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1)
      // comb arc A3 --> X
      (A3 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0)
      // comb arc A3 --> X
      (A3 => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_EN4_2( X, A1, A2, A3, A4 );
input A1, A2, A3, A4;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_EN4_2_func SAEDRVT14_EN4_2_behav_inst(.X(X),.A1(A1),.A2(A2),.A3(A3),.A4(A4));
`else
   SAEDRVT14_EN4_2_func SAEDRVT14_EN4_2_inst(.X(X),.A1(A1),.A2(A2),.A3(A3),.A4(A4));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      if(A2===1'b0 && A3===1'b0 && A4===1'b0)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(A2===1'b0 && A3===1'b1 && A4===1'b1)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(A2===1'b1 && A3===1'b0 && A4===1'b1)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(A2===1'b1 && A3===1'b1 && A4===1'b0)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      ifnone
      // comb arc posedge A1 --> (X:A1)
      (posedge A1 => (X:A1)) = (1.0,1.0);
      
      ifnone
      // comb arc negedge A1 --> (X:A1)
      (negedge A1 => (X:A1)) = (1.0,1.0);
      
      if(A2===1'b0 && A3===1'b0 && A4===1'b1)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(A2===1'b0 && A3===1'b1 && A4===1'b0)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(A2===1'b1 && A3===1'b0 && A4===1'b0)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(A2===1'b1 && A3===1'b1 && A4===1'b1)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A3===1'b0 && A4===1'b0)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A3===1'b1 && A4===1'b1)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A3===1'b0 && A4===1'b1)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A3===1'b1 && A4===1'b0)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      ifnone
      // comb arc posedge A2 --> (X:A2)
      (posedge A2 => (X:A2)) = (1.0,1.0);
      
      ifnone
      // comb arc negedge A2 --> (X:A2)
      (negedge A2 => (X:A2)) = (1.0,1.0);
      
      if(A1===1'b0 && A3===1'b0 && A4===1'b1)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A3===1'b1 && A4===1'b0)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A3===1'b0 && A4===1'b0)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A3===1'b1 && A4===1'b1)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0 && A4===1'b0)
      // comb arc A3 --> X
      (A3 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && A4===1'b1)
      // comb arc A3 --> X
      (A3 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && A4===1'b1)
      // comb arc A3 --> X
      (A3 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1 && A4===1'b0)
      // comb arc A3 --> X
      (A3 => X) = (1.0,1.0);
      
      ifnone
      // comb arc posedge A3 --> (X:A3)
      (posedge A3 => (X:A3)) = (1.0,1.0);
      
      ifnone
      // comb arc negedge A3 --> (X:A3)
      (negedge A3 => (X:A3)) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0 && A4===1'b1)
      // comb arc A3 --> X
      (A3 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && A4===1'b0)
      // comb arc A3 --> X
      (A3 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && A4===1'b0)
      // comb arc A3 --> X
      (A3 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1 && A4===1'b1)
      // comb arc A3 --> X
      (A3 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0 && A3===1'b0)
      // comb arc A4 --> X
      (A4 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && A3===1'b1)
      // comb arc A4 --> X
      (A4 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && A3===1'b1)
      // comb arc A4 --> X
      (A4 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1 && A3===1'b0)
      // comb arc A4 --> X
      (A4 => X) = (1.0,1.0);
      
      ifnone
      // comb arc posedge A4 --> (X:A4)
      (posedge A4 => (X:A4)) = (1.0,1.0);
      
      ifnone
      // comb arc negedge A4 --> (X:A4)
      (negedge A4 => (X:A4)) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0 && A3===1'b1)
      // comb arc A4 --> X
      (A4 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && A3===1'b0)
      // comb arc A4 --> X
      (A4 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && A3===1'b0)
      // comb arc A4 --> X
      (A4 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1 && A3===1'b1)
      // comb arc A4 --> X
      (A4 => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_EN4_4( X, A1, A2, A3, A4 );
input A1, A2, A3, A4;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_EN4_4_func SAEDRVT14_EN4_4_behav_inst(.X(X),.A1(A1),.A2(A2),.A3(A3),.A4(A4));
`else
   SAEDRVT14_EN4_4_func SAEDRVT14_EN4_4_inst(.X(X),.A1(A1),.A2(A2),.A3(A3),.A4(A4));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      if(A2===1'b0 && A3===1'b0 && A4===1'b0)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(A2===1'b0 && A3===1'b1 && A4===1'b1)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(A2===1'b1 && A3===1'b0 && A4===1'b1)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(A2===1'b1 && A3===1'b1 && A4===1'b0)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      ifnone
      // comb arc posedge A1 --> (X:A1)
      (posedge A1 => (X:A1)) = (1.0,1.0);
      
      ifnone
      // comb arc negedge A1 --> (X:A1)
      (negedge A1 => (X:A1)) = (1.0,1.0);
      
      if(A2===1'b0 && A3===1'b0 && A4===1'b1)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(A2===1'b0 && A3===1'b1 && A4===1'b0)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(A2===1'b1 && A3===1'b0 && A4===1'b0)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(A2===1'b1 && A3===1'b1 && A4===1'b1)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A3===1'b0 && A4===1'b0)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A3===1'b1 && A4===1'b1)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A3===1'b0 && A4===1'b1)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A3===1'b1 && A4===1'b0)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      ifnone
      // comb arc posedge A2 --> (X:A2)
      (posedge A2 => (X:A2)) = (1.0,1.0);
      
      ifnone
      // comb arc negedge A2 --> (X:A2)
      (negedge A2 => (X:A2)) = (1.0,1.0);
      
      if(A1===1'b0 && A3===1'b0 && A4===1'b1)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A3===1'b1 && A4===1'b0)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A3===1'b0 && A4===1'b0)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A3===1'b1 && A4===1'b1)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0 && A4===1'b0)
      // comb arc A3 --> X
      (A3 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && A4===1'b1)
      // comb arc A3 --> X
      (A3 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && A4===1'b1)
      // comb arc A3 --> X
      (A3 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1 && A4===1'b0)
      // comb arc A3 --> X
      (A3 => X) = (1.0,1.0);
      
      ifnone
      // comb arc posedge A3 --> (X:A3)
      (posedge A3 => (X:A3)) = (1.0,1.0);
      
      ifnone
      // comb arc negedge A3 --> (X:A3)
      (negedge A3 => (X:A3)) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0 && A4===1'b1)
      // comb arc A3 --> X
      (A3 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && A4===1'b0)
      // comb arc A3 --> X
      (A3 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && A4===1'b0)
      // comb arc A3 --> X
      (A3 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1 && A4===1'b1)
      // comb arc A3 --> X
      (A3 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0 && A3===1'b0)
      // comb arc A4 --> X
      (A4 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && A3===1'b1)
      // comb arc A4 --> X
      (A4 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && A3===1'b1)
      // comb arc A4 --> X
      (A4 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1 && A3===1'b0)
      // comb arc A4 --> X
      (A4 => X) = (1.0,1.0);
      
      ifnone
      // comb arc posedge A4 --> (X:A4)
      (posedge A4 => (X:A4)) = (1.0,1.0);
      
      ifnone
      // comb arc negedge A4 --> (X:A4)
      (negedge A4 => (X:A4)) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0 && A3===1'b1)
      // comb arc A4 --> X
      (A4 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && A3===1'b0)
      // comb arc A4 --> X
      (A4 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && A3===1'b0)
      // comb arc A4 --> X
      (A4 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1 && A3===1'b1)
      // comb arc A4 --> X
      (A4 => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_EN4_M_1( X, A1, A2, A3, A4 );
input A1, A2, A3, A4;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_EN4_M_1_func SAEDRVT14_EN4_M_1_behav_inst(.X(X),.A1(A1),.A2(A2),.A3(A3),.A4(A4));
`else
   SAEDRVT14_EN4_M_1_func SAEDRVT14_EN4_M_1_inst(.X(X),.A1(A1),.A2(A2),.A3(A3),.A4(A4));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      if(A2===1'b0 && A3===1'b0 && A4===1'b0)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(A2===1'b0 && A3===1'b1 && A4===1'b1)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(A2===1'b1 && A3===1'b0 && A4===1'b1)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(A2===1'b1 && A3===1'b1 && A4===1'b0)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      ifnone
      // comb arc posedge A1 --> (X:A1)
      (posedge A1 => (X:A1)) = (1.0,1.0);
      
      ifnone
      // comb arc negedge A1 --> (X:A1)
      (negedge A1 => (X:A1)) = (1.0,1.0);
      
      if(A2===1'b0 && A3===1'b0 && A4===1'b1)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(A2===1'b0 && A3===1'b1 && A4===1'b0)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(A2===1'b1 && A3===1'b0 && A4===1'b0)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(A2===1'b1 && A3===1'b1 && A4===1'b1)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A3===1'b0 && A4===1'b0)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A3===1'b1 && A4===1'b1)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A3===1'b0 && A4===1'b1)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A3===1'b1 && A4===1'b0)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      ifnone
      // comb arc posedge A2 --> (X:A2)
      (posedge A2 => (X:A2)) = (1.0,1.0);
      
      ifnone
      // comb arc negedge A2 --> (X:A2)
      (negedge A2 => (X:A2)) = (1.0,1.0);
      
      if(A1===1'b0 && A3===1'b0 && A4===1'b1)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A3===1'b1 && A4===1'b0)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A3===1'b0 && A4===1'b0)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A3===1'b1 && A4===1'b1)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0 && A4===1'b0)
      // comb arc A3 --> X
      (A3 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && A4===1'b1)
      // comb arc A3 --> X
      (A3 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && A4===1'b1)
      // comb arc A3 --> X
      (A3 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1 && A4===1'b0)
      // comb arc A3 --> X
      (A3 => X) = (1.0,1.0);
      
      ifnone
      // comb arc posedge A3 --> (X:A3)
      (posedge A3 => (X:A3)) = (1.0,1.0);
      
      ifnone
      // comb arc negedge A3 --> (X:A3)
      (negedge A3 => (X:A3)) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0 && A4===1'b1)
      // comb arc A3 --> X
      (A3 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && A4===1'b0)
      // comb arc A3 --> X
      (A3 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && A4===1'b0)
      // comb arc A3 --> X
      (A3 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1 && A4===1'b1)
      // comb arc A3 --> X
      (A3 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0 && A3===1'b0)
      // comb arc A4 --> X
      (A4 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && A3===1'b1)
      // comb arc A4 --> X
      (A4 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && A3===1'b1)
      // comb arc A4 --> X
      (A4 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1 && A3===1'b0)
      // comb arc A4 --> X
      (A4 => X) = (1.0,1.0);
      
      ifnone
      // comb arc posedge A4 --> (X:A4)
      (posedge A4 => (X:A4)) = (1.0,1.0);
      
      ifnone
      // comb arc negedge A4 --> (X:A4)
      (negedge A4 => (X:A4)) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0 && A3===1'b1)
      // comb arc A4 --> X
      (A4 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && A3===1'b0)
      // comb arc A4 --> X
      (A4 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && A3===1'b0)
      // comb arc A4 --> X
      (A4 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1 && A3===1'b1)
      // comb arc A4 --> X
      (A4 => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_EN4_U_0P5( X, A1, A2, A3, A4 );
input A1, A2, A3, A4;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_EN4_U_0P5_func SAEDRVT14_EN4_U_0P5_behav_inst(.X(X),.A1(A1),.A2(A2),.A3(A3),.A4(A4));
`else
   SAEDRVT14_EN4_U_0P5_func SAEDRVT14_EN4_U_0P5_inst(.X(X),.A1(A1),.A2(A2),.A3(A3),.A4(A4));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      if(A2===1'b0 && A3===1'b0 && A4===1'b0)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(A2===1'b0 && A3===1'b1 && A4===1'b1)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(A2===1'b1 && A3===1'b0 && A4===1'b1)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(A2===1'b1 && A3===1'b1 && A4===1'b0)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      ifnone
      // comb arc posedge A1 --> (X:A1)
      (posedge A1 => (X:A1)) = (1.0,1.0);
      
      ifnone
      // comb arc negedge A1 --> (X:A1)
      (negedge A1 => (X:A1)) = (1.0,1.0);
      
      if(A2===1'b0 && A3===1'b0 && A4===1'b1)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(A2===1'b0 && A3===1'b1 && A4===1'b0)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(A2===1'b1 && A3===1'b0 && A4===1'b0)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(A2===1'b1 && A3===1'b1 && A4===1'b1)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A3===1'b0 && A4===1'b0)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A3===1'b1 && A4===1'b1)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A3===1'b0 && A4===1'b1)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A3===1'b1 && A4===1'b0)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      ifnone
      // comb arc posedge A2 --> (X:A2)
      (posedge A2 => (X:A2)) = (1.0,1.0);
      
      ifnone
      // comb arc negedge A2 --> (X:A2)
      (negedge A2 => (X:A2)) = (1.0,1.0);
      
      if(A1===1'b0 && A3===1'b0 && A4===1'b1)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A3===1'b1 && A4===1'b0)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A3===1'b0 && A4===1'b0)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A3===1'b1 && A4===1'b1)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0 && A4===1'b0)
      // comb arc A3 --> X
      (A3 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && A4===1'b1)
      // comb arc A3 --> X
      (A3 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && A4===1'b1)
      // comb arc A3 --> X
      (A3 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1 && A4===1'b0)
      // comb arc A3 --> X
      (A3 => X) = (1.0,1.0);
      
      ifnone
      // comb arc posedge A3 --> (X:A3)
      (posedge A3 => (X:A3)) = (1.0,1.0);
      
      ifnone
      // comb arc negedge A3 --> (X:A3)
      (negedge A3 => (X:A3)) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0 && A4===1'b1)
      // comb arc A3 --> X
      (A3 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && A4===1'b0)
      // comb arc A3 --> X
      (A3 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && A4===1'b0)
      // comb arc A3 --> X
      (A3 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1 && A4===1'b1)
      // comb arc A3 --> X
      (A3 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0 && A3===1'b0)
      // comb arc A4 --> X
      (A4 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && A3===1'b1)
      // comb arc A4 --> X
      (A4 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && A3===1'b1)
      // comb arc A4 --> X
      (A4 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1 && A3===1'b0)
      // comb arc A4 --> X
      (A4 => X) = (1.0,1.0);
      
      ifnone
      // comb arc posedge A4 --> (X:A4)
      (posedge A4 => (X:A4)) = (1.0,1.0);
      
      ifnone
      // comb arc negedge A4 --> (X:A4)
      (negedge A4 => (X:A4)) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0 && A3===1'b1)
      // comb arc A4 --> X
      (A4 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && A3===1'b0)
      // comb arc A4 --> X
      (A4 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && A3===1'b0)
      // comb arc A4 --> X
      (A4 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1 && A3===1'b1)
      // comb arc A4 --> X
      (A4 => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_EO2_0P5( X, A1, A2 );
input A1, A2;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_EO2_0P5_func SAEDRVT14_EO2_0P5_behav_inst(.X(X),.A1(A1),.A2(A2));
`else
   SAEDRVT14_EO2_0P5_func SAEDRVT14_EO2_0P5_inst(.X(X),.A1(A1),.A2(A2));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      ifnone
      // comb arc posedge A1 --> (X:A1)
      (posedge A1 => (X:A1)) = (1.0,1.0);
      
      ifnone
      // comb arc negedge A1 --> (X:A1)
      (negedge A1 => (X:A1)) = (1.0,1.0);
      
      ifnone
      // comb arc posedge A2 --> (X:A2)
      (posedge A2 => (X:A2)) = (1.0,1.0);
      
      ifnone
      // comb arc negedge A2 --> (X:A2)
      (negedge A2 => (X:A2)) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_EO2_1( X, A1, A2 );
input A1, A2;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_EO2_1_func SAEDRVT14_EO2_1_behav_inst(.X(X),.A1(A1),.A2(A2));
`else
   SAEDRVT14_EO2_1_func SAEDRVT14_EO2_1_inst(.X(X),.A1(A1),.A2(A2));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      ifnone
      // comb arc posedge A1 --> (X:A1)
      (posedge A1 => (X:A1)) = (1.0,1.0);
      
      ifnone
      // comb arc negedge A1 --> (X:A1)
      (negedge A1 => (X:A1)) = (1.0,1.0);
      
      ifnone
      // comb arc posedge A2 --> (X:A2)
      (posedge A2 => (X:A2)) = (1.0,1.0);
      
      ifnone
      // comb arc negedge A2 --> (X:A2)
      (negedge A2 => (X:A2)) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_EO2_1P5( X, A1, A2 );
input A1, A2;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_EO2_1P5_func SAEDRVT14_EO2_1P5_behav_inst(.X(X),.A1(A1),.A2(A2));
`else
   SAEDRVT14_EO2_1P5_func SAEDRVT14_EO2_1P5_inst(.X(X),.A1(A1),.A2(A2));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      ifnone
      // comb arc posedge A1 --> (X:A1)
      (posedge A1 => (X:A1)) = (1.0,1.0);
      
      ifnone
      // comb arc negedge A1 --> (X:A1)
      (negedge A1 => (X:A1)) = (1.0,1.0);
      
      ifnone
      // comb arc posedge A2 --> (X:A2)
      (posedge A2 => (X:A2)) = (1.0,1.0);
      
      ifnone
      // comb arc negedge A2 --> (X:A2)
      (negedge A2 => (X:A2)) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_EO2_2( X, A1, A2 );
input A1, A2;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_EO2_2_func SAEDRVT14_EO2_2_behav_inst(.X(X),.A1(A1),.A2(A2));
`else
   SAEDRVT14_EO2_2_func SAEDRVT14_EO2_2_inst(.X(X),.A1(A1),.A2(A2));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      ifnone
      // comb arc posedge A1 --> (X:A1)
      (posedge A1 => (X:A1)) = (1.0,1.0);
      
      ifnone
      // comb arc negedge A1 --> (X:A1)
      (negedge A1 => (X:A1)) = (1.0,1.0);
      
      ifnone
      // comb arc posedge A2 --> (X:A2)
      (posedge A2 => (X:A2)) = (1.0,1.0);
      
      ifnone
      // comb arc negedge A2 --> (X:A2)
      (negedge A2 => (X:A2)) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_EO2_3( X, A1, A2 );
input A1, A2;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_EO2_3_func SAEDRVT14_EO2_3_behav_inst(.X(X),.A1(A1),.A2(A2));
`else
   SAEDRVT14_EO2_3_func SAEDRVT14_EO2_3_inst(.X(X),.A1(A1),.A2(A2));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      ifnone
      // comb arc posedge A1 --> (X:A1)
      (posedge A1 => (X:A1)) = (1.0,1.0);
      
      ifnone
      // comb arc negedge A1 --> (X:A1)
      (negedge A1 => (X:A1)) = (1.0,1.0);
      
      ifnone
      // comb arc posedge A2 --> (X:A2)
      (posedge A2 => (X:A2)) = (1.0,1.0);
      
      ifnone
      // comb arc negedge A2 --> (X:A2)
      (negedge A2 => (X:A2)) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_EO2_4( X, A1, A2 );
input A1, A2;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_EO2_4_func SAEDRVT14_EO2_4_behav_inst(.X(X),.A1(A1),.A2(A2));
`else
   SAEDRVT14_EO2_4_func SAEDRVT14_EO2_4_inst(.X(X),.A1(A1),.A2(A2));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      ifnone
      // comb arc posedge A1 --> (X:A1)
      (posedge A1 => (X:A1)) = (1.0,1.0);
      
      ifnone
      // comb arc negedge A1 --> (X:A1)
      (negedge A1 => (X:A1)) = (1.0,1.0);
      
      ifnone
      // comb arc posedge A2 --> (X:A2)
      (posedge A2 => (X:A2)) = (1.0,1.0);
      
      ifnone
      // comb arc negedge A2 --> (X:A2)
      (negedge A2 => (X:A2)) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_EO2_ECO_1( X, A1, A2 );
input A1, A2;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_EO2_ECO_1_func SAEDRVT14_EO2_ECO_1_behav_inst(.X(X),.A1(A1),.A2(A2));
`else
   SAEDRVT14_EO2_ECO_1_func SAEDRVT14_EO2_ECO_1_inst(.X(X),.A1(A1),.A2(A2));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      ifnone
      // comb arc posedge A1 --> (X:A1)
      (posedge A1 => (X:A1)) = (1.0,1.0);
      
      ifnone
      // comb arc negedge A1 --> (X:A1)
      (negedge A1 => (X:A1)) = (1.0,1.0);
      
      ifnone
      // comb arc posedge A2 --> (X:A2)
      (posedge A2 => (X:A2)) = (1.0,1.0);
      
      ifnone
      // comb arc negedge A2 --> (X:A2)
      (negedge A2 => (X:A2)) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_EO2_MM_0P5( X, A1, A2 );
input A1, A2;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_EO2_MM_0P5_func SAEDRVT14_EO2_MM_0P5_behav_inst(.X(X),.A1(A1),.A2(A2));
`else
   SAEDRVT14_EO2_MM_0P5_func SAEDRVT14_EO2_MM_0P5_inst(.X(X),.A1(A1),.A2(A2));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      ifnone
      // comb arc posedge A1 --> (X:A1)
      (posedge A1 => (X:A1)) = (1.0,1.0);
      
      ifnone
      // comb arc negedge A1 --> (X:A1)
      (negedge A1 => (X:A1)) = (1.0,1.0);
      
      ifnone
      // comb arc posedge A2 --> (X:A2)
      (posedge A2 => (X:A2)) = (1.0,1.0);
      
      ifnone
      // comb arc negedge A2 --> (X:A2)
      (negedge A2 => (X:A2)) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_EO2_MM_1( X, A1, A2 );
input A1, A2;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_EO2_MM_1_func SAEDRVT14_EO2_MM_1_behav_inst(.X(X),.A1(A1),.A2(A2));
`else
   SAEDRVT14_EO2_MM_1_func SAEDRVT14_EO2_MM_1_inst(.X(X),.A1(A1),.A2(A2));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      ifnone
      // comb arc posedge A1 --> (X:A1)
      (posedge A1 => (X:A1)) = (1.0,1.0);
      
      ifnone
      // comb arc negedge A1 --> (X:A1)
      (negedge A1 => (X:A1)) = (1.0,1.0);
      
      ifnone
      // comb arc posedge A2 --> (X:A2)
      (posedge A2 => (X:A2)) = (1.0,1.0);
      
      ifnone
      // comb arc negedge A2 --> (X:A2)
      (negedge A2 => (X:A2)) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_EO2_MM_2( X, A1, A2 );
input A1, A2;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_EO2_MM_2_func SAEDRVT14_EO2_MM_2_behav_inst(.X(X),.A1(A1),.A2(A2));
`else
   SAEDRVT14_EO2_MM_2_func SAEDRVT14_EO2_MM_2_inst(.X(X),.A1(A1),.A2(A2));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      ifnone
      // comb arc posedge A1 --> (X:A1)
      (posedge A1 => (X:A1)) = (1.0,1.0);
      
      ifnone
      // comb arc negedge A1 --> (X:A1)
      (negedge A1 => (X:A1)) = (1.0,1.0);
      
      ifnone
      // comb arc posedge A2 --> (X:A2)
      (posedge A2 => (X:A2)) = (1.0,1.0);
      
      ifnone
      // comb arc negedge A2 --> (X:A2)
      (negedge A2 => (X:A2)) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_EO2_MM_4( X, A1, A2 );
input A1, A2;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_EO2_MM_4_func SAEDRVT14_EO2_MM_4_behav_inst(.X(X),.A1(A1),.A2(A2));
`else
   SAEDRVT14_EO2_MM_4_func SAEDRVT14_EO2_MM_4_inst(.X(X),.A1(A1),.A2(A2));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      ifnone
      // comb arc posedge A1 --> (X:A1)
      (posedge A1 => (X:A1)) = (1.0,1.0);
      
      ifnone
      // comb arc negedge A1 --> (X:A1)
      (negedge A1 => (X:A1)) = (1.0,1.0);
      
      ifnone
      // comb arc posedge A2 --> (X:A2)
      (posedge A2 => (X:A2)) = (1.0,1.0);
      
      ifnone
      // comb arc negedge A2 --> (X:A2)
      (negedge A2 => (X:A2)) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_EO2_V1_0P75( X, A1, A2 );
input A1, A2;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_EO2_V1_0P75_func SAEDRVT14_EO2_V1_0P75_behav_inst(.X(X),.A1(A1),.A2(A2));
`else
   SAEDRVT14_EO2_V1_0P75_func SAEDRVT14_EO2_V1_0P75_inst(.X(X),.A1(A1),.A2(A2));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      ifnone
      // comb arc posedge A1 --> (X:A1)
      (posedge A1 => (X:A1)) = (1.0,1.0);
      
      ifnone
      // comb arc negedge A1 --> (X:A1)
      (negedge A1 => (X:A1)) = (1.0,1.0);
      
      ifnone
      // comb arc posedge A2 --> (X:A2)
      (posedge A2 => (X:A2)) = (1.0,1.0);
      
      ifnone
      // comb arc negedge A2 --> (X:A2)
      (negedge A2 => (X:A2)) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_EO2_V1_1P5( X, A1, A2 );
input A1, A2;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_EO2_V1_1P5_func SAEDRVT14_EO2_V1_1P5_behav_inst(.X(X),.A1(A1),.A2(A2));
`else
   SAEDRVT14_EO2_V1_1P5_func SAEDRVT14_EO2_V1_1P5_inst(.X(X),.A1(A1),.A2(A2));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      ifnone
      // comb arc posedge A1 --> (X:A1)
      (posedge A1 => (X:A1)) = (1.0,1.0);
      
      ifnone
      // comb arc negedge A1 --> (X:A1)
      (negedge A1 => (X:A1)) = (1.0,1.0);
      
      ifnone
      // comb arc posedge A2 --> (X:A2)
      (posedge A2 => (X:A2)) = (1.0,1.0);
      
      ifnone
      // comb arc negedge A2 --> (X:A2)
      (negedge A2 => (X:A2)) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_EO3_0P5( X, A1, A2, A3 );
input A1, A2, A3;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_EO3_0P5_func SAEDRVT14_EO3_0P5_behav_inst(.X(X),.A1(A1),.A2(A2),.A3(A3));
`else
   SAEDRVT14_EO3_0P5_func SAEDRVT14_EO3_0P5_inst(.X(X),.A1(A1),.A2(A2),.A3(A3));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      if(A2===1'b0 && A3===1'b1)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(A2===1'b1 && A3===1'b0)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      ifnone
      // comb arc posedge A1 --> (X:A1)
      (posedge A1 => (X:A1)) = (1.0,1.0);
      
      ifnone
      // comb arc negedge A1 --> (X:A1)
      (negedge A1 => (X:A1)) = (1.0,1.0);
      
      if(A2===1'b0 && A3===1'b0)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(A2===1'b1 && A3===1'b1)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A3===1'b1)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A3===1'b0)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      ifnone
      // comb arc posedge A2 --> (X:A2)
      (posedge A2 => (X:A2)) = (1.0,1.0);
      
      ifnone
      // comb arc negedge A2 --> (X:A2)
      (negedge A2 => (X:A2)) = (1.0,1.0);
      
      if(A1===1'b0 && A3===1'b0)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A3===1'b1)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1)
      // comb arc A3 --> X
      (A3 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0)
      // comb arc A3 --> X
      (A3 => X) = (1.0,1.0);
      
      ifnone
      // comb arc posedge A3 --> (X:A3)
      (posedge A3 => (X:A3)) = (1.0,1.0);
      
      ifnone
      // comb arc negedge A3 --> (X:A3)
      (negedge A3 => (X:A3)) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0)
      // comb arc A3 --> X
      (A3 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1)
      // comb arc A3 --> X
      (A3 => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_EO3_1( X, A1, A2, A3 );
input A1, A2, A3;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_EO3_1_func SAEDRVT14_EO3_1_behav_inst(.X(X),.A1(A1),.A2(A2),.A3(A3));
`else
   SAEDRVT14_EO3_1_func SAEDRVT14_EO3_1_inst(.X(X),.A1(A1),.A2(A2),.A3(A3));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      if(A2===1'b0 && A3===1'b1)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(A2===1'b1 && A3===1'b0)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      ifnone
      // comb arc posedge A1 --> (X:A1)
      (posedge A1 => (X:A1)) = (1.0,1.0);
      
      ifnone
      // comb arc negedge A1 --> (X:A1)
      (negedge A1 => (X:A1)) = (1.0,1.0);
      
      if(A2===1'b0 && A3===1'b0)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(A2===1'b1 && A3===1'b1)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A3===1'b1)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A3===1'b0)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      ifnone
      // comb arc posedge A2 --> (X:A2)
      (posedge A2 => (X:A2)) = (1.0,1.0);
      
      ifnone
      // comb arc negedge A2 --> (X:A2)
      (negedge A2 => (X:A2)) = (1.0,1.0);
      
      if(A1===1'b0 && A3===1'b0)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A3===1'b1)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1)
      // comb arc A3 --> X
      (A3 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0)
      // comb arc A3 --> X
      (A3 => X) = (1.0,1.0);
      
      ifnone
      // comb arc posedge A3 --> (X:A3)
      (posedge A3 => (X:A3)) = (1.0,1.0);
      
      ifnone
      // comb arc negedge A3 --> (X:A3)
      (negedge A3 => (X:A3)) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0)
      // comb arc A3 --> X
      (A3 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1)
      // comb arc A3 --> X
      (A3 => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_EO3_2( X, A1, A2, A3 );
input A1, A2, A3;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_EO3_2_func SAEDRVT14_EO3_2_behav_inst(.X(X),.A1(A1),.A2(A2),.A3(A3));
`else
   SAEDRVT14_EO3_2_func SAEDRVT14_EO3_2_inst(.X(X),.A1(A1),.A2(A2),.A3(A3));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      if(A2===1'b0 && A3===1'b1)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(A2===1'b1 && A3===1'b0)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      ifnone
      // comb arc posedge A1 --> (X:A1)
      (posedge A1 => (X:A1)) = (1.0,1.0);
      
      ifnone
      // comb arc negedge A1 --> (X:A1)
      (negedge A1 => (X:A1)) = (1.0,1.0);
      
      if(A2===1'b0 && A3===1'b0)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(A2===1'b1 && A3===1'b1)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A3===1'b1)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A3===1'b0)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      ifnone
      // comb arc posedge A2 --> (X:A2)
      (posedge A2 => (X:A2)) = (1.0,1.0);
      
      ifnone
      // comb arc negedge A2 --> (X:A2)
      (negedge A2 => (X:A2)) = (1.0,1.0);
      
      if(A1===1'b0 && A3===1'b0)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A3===1'b1)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1)
      // comb arc A3 --> X
      (A3 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0)
      // comb arc A3 --> X
      (A3 => X) = (1.0,1.0);
      
      ifnone
      // comb arc posedge A3 --> (X:A3)
      (posedge A3 => (X:A3)) = (1.0,1.0);
      
      ifnone
      // comb arc negedge A3 --> (X:A3)
      (negedge A3 => (X:A3)) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0)
      // comb arc A3 --> X
      (A3 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1)
      // comb arc A3 --> X
      (A3 => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_EO3_4( X, A1, A2, A3 );
input A1, A2, A3;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_EO3_4_func SAEDRVT14_EO3_4_behav_inst(.X(X),.A1(A1),.A2(A2),.A3(A3));
`else
   SAEDRVT14_EO3_4_func SAEDRVT14_EO3_4_inst(.X(X),.A1(A1),.A2(A2),.A3(A3));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      if(A2===1'b0 && A3===1'b1)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(A2===1'b1 && A3===1'b0)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      ifnone
      // comb arc posedge A1 --> (X:A1)
      (posedge A1 => (X:A1)) = (1.0,1.0);
      
      ifnone
      // comb arc negedge A1 --> (X:A1)
      (negedge A1 => (X:A1)) = (1.0,1.0);
      
      if(A2===1'b0 && A3===1'b0)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(A2===1'b1 && A3===1'b1)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A3===1'b1)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A3===1'b0)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      ifnone
      // comb arc posedge A2 --> (X:A2)
      (posedge A2 => (X:A2)) = (1.0,1.0);
      
      ifnone
      // comb arc negedge A2 --> (X:A2)
      (negedge A2 => (X:A2)) = (1.0,1.0);
      
      if(A1===1'b0 && A3===1'b0)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A3===1'b1)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1)
      // comb arc A3 --> X
      (A3 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0)
      // comb arc A3 --> X
      (A3 => X) = (1.0,1.0);
      
      ifnone
      // comb arc posedge A3 --> (X:A3)
      (posedge A3 => (X:A3)) = (1.0,1.0);
      
      ifnone
      // comb arc negedge A3 --> (X:A3)
      (negedge A3 => (X:A3)) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0)
      // comb arc A3 --> X
      (A3 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1)
      // comb arc A3 --> X
      (A3 => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_EO4_1( X, A1, A2, A3, A4 );
input A1, A2, A3, A4;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_EO4_1_func SAEDRVT14_EO4_1_behav_inst(.X(X),.A1(A1),.A2(A2),.A3(A3),.A4(A4));
`else
   SAEDRVT14_EO4_1_func SAEDRVT14_EO4_1_inst(.X(X),.A1(A1),.A2(A2),.A3(A3),.A4(A4));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      if(A2===1'b0 && A3===1'b0 && A4===1'b1)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(A2===1'b0 && A3===1'b1 && A4===1'b0)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(A2===1'b1 && A3===1'b0 && A4===1'b0)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(A2===1'b1 && A3===1'b1 && A4===1'b1)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      ifnone
      // comb arc posedge A1 --> (X:A1)
      (posedge A1 => (X:A1)) = (1.0,1.0);
      
      ifnone
      // comb arc negedge A1 --> (X:A1)
      (negedge A1 => (X:A1)) = (1.0,1.0);
      
      if(A2===1'b0 && A3===1'b0 && A4===1'b0)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(A2===1'b0 && A3===1'b1 && A4===1'b1)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(A2===1'b1 && A3===1'b0 && A4===1'b1)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(A2===1'b1 && A3===1'b1 && A4===1'b0)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A3===1'b0 && A4===1'b1)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A3===1'b1 && A4===1'b0)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A3===1'b0 && A4===1'b0)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A3===1'b1 && A4===1'b1)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      ifnone
      // comb arc posedge A2 --> (X:A2)
      (posedge A2 => (X:A2)) = (1.0,1.0);
      
      ifnone
      // comb arc negedge A2 --> (X:A2)
      (negedge A2 => (X:A2)) = (1.0,1.0);
      
      if(A1===1'b0 && A3===1'b0 && A4===1'b0)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A3===1'b1 && A4===1'b1)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A3===1'b0 && A4===1'b1)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A3===1'b1 && A4===1'b0)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0 && A4===1'b1)
      // comb arc A3 --> X
      (A3 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && A4===1'b0)
      // comb arc A3 --> X
      (A3 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && A4===1'b0)
      // comb arc A3 --> X
      (A3 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1 && A4===1'b1)
      // comb arc A3 --> X
      (A3 => X) = (1.0,1.0);
      
      ifnone
      // comb arc posedge A3 --> (X:A3)
      (posedge A3 => (X:A3)) = (1.0,1.0);
      
      ifnone
      // comb arc negedge A3 --> (X:A3)
      (negedge A3 => (X:A3)) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0 && A4===1'b0)
      // comb arc A3 --> X
      (A3 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && A4===1'b1)
      // comb arc A3 --> X
      (A3 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && A4===1'b1)
      // comb arc A3 --> X
      (A3 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1 && A4===1'b0)
      // comb arc A3 --> X
      (A3 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0 && A3===1'b1)
      // comb arc A4 --> X
      (A4 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && A3===1'b0)
      // comb arc A4 --> X
      (A4 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && A3===1'b0)
      // comb arc A4 --> X
      (A4 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1 && A3===1'b1)
      // comb arc A4 --> X
      (A4 => X) = (1.0,1.0);
      
      ifnone
      // comb arc posedge A4 --> (X:A4)
      (posedge A4 => (X:A4)) = (1.0,1.0);
      
      ifnone
      // comb arc negedge A4 --> (X:A4)
      (negedge A4 => (X:A4)) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0 && A3===1'b0)
      // comb arc A4 --> X
      (A4 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && A3===1'b1)
      // comb arc A4 --> X
      (A4 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && A3===1'b1)
      // comb arc A4 --> X
      (A4 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1 && A3===1'b0)
      // comb arc A4 --> X
      (A4 => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_EO4_2( X, A1, A2, A3, A4 );
input A1, A2, A3, A4;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_EO4_2_func SAEDRVT14_EO4_2_behav_inst(.X(X),.A1(A1),.A2(A2),.A3(A3),.A4(A4));
`else
   SAEDRVT14_EO4_2_func SAEDRVT14_EO4_2_inst(.X(X),.A1(A1),.A2(A2),.A3(A3),.A4(A4));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      if(A2===1'b0 && A3===1'b0 && A4===1'b1)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(A2===1'b0 && A3===1'b1 && A4===1'b0)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(A2===1'b1 && A3===1'b0 && A4===1'b0)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(A2===1'b1 && A3===1'b1 && A4===1'b1)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      ifnone
      // comb arc posedge A1 --> (X:A1)
      (posedge A1 => (X:A1)) = (1.0,1.0);
      
      ifnone
      // comb arc negedge A1 --> (X:A1)
      (negedge A1 => (X:A1)) = (1.0,1.0);
      
      if(A2===1'b0 && A3===1'b0 && A4===1'b0)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(A2===1'b0 && A3===1'b1 && A4===1'b1)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(A2===1'b1 && A3===1'b0 && A4===1'b1)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(A2===1'b1 && A3===1'b1 && A4===1'b0)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A3===1'b0 && A4===1'b1)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A3===1'b1 && A4===1'b0)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A3===1'b0 && A4===1'b0)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A3===1'b1 && A4===1'b1)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      ifnone
      // comb arc posedge A2 --> (X:A2)
      (posedge A2 => (X:A2)) = (1.0,1.0);
      
      ifnone
      // comb arc negedge A2 --> (X:A2)
      (negedge A2 => (X:A2)) = (1.0,1.0);
      
      if(A1===1'b0 && A3===1'b0 && A4===1'b0)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A3===1'b1 && A4===1'b1)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A3===1'b0 && A4===1'b1)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A3===1'b1 && A4===1'b0)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0 && A4===1'b1)
      // comb arc A3 --> X
      (A3 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && A4===1'b0)
      // comb arc A3 --> X
      (A3 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && A4===1'b0)
      // comb arc A3 --> X
      (A3 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1 && A4===1'b1)
      // comb arc A3 --> X
      (A3 => X) = (1.0,1.0);
      
      ifnone
      // comb arc posedge A3 --> (X:A3)
      (posedge A3 => (X:A3)) = (1.0,1.0);
      
      ifnone
      // comb arc negedge A3 --> (X:A3)
      (negedge A3 => (X:A3)) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0 && A4===1'b0)
      // comb arc A3 --> X
      (A3 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && A4===1'b1)
      // comb arc A3 --> X
      (A3 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && A4===1'b1)
      // comb arc A3 --> X
      (A3 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1 && A4===1'b0)
      // comb arc A3 --> X
      (A3 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0 && A3===1'b1)
      // comb arc A4 --> X
      (A4 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && A3===1'b0)
      // comb arc A4 --> X
      (A4 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && A3===1'b0)
      // comb arc A4 --> X
      (A4 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1 && A3===1'b1)
      // comb arc A4 --> X
      (A4 => X) = (1.0,1.0);
      
      ifnone
      // comb arc posedge A4 --> (X:A4)
      (posedge A4 => (X:A4)) = (1.0,1.0);
      
      ifnone
      // comb arc negedge A4 --> (X:A4)
      (negedge A4 => (X:A4)) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0 && A3===1'b0)
      // comb arc A4 --> X
      (A4 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && A3===1'b1)
      // comb arc A4 --> X
      (A4 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && A3===1'b1)
      // comb arc A4 --> X
      (A4 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1 && A3===1'b0)
      // comb arc A4 --> X
      (A4 => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_EO4_4( X, A1, A2, A3, A4 );
input A1, A2, A3, A4;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_EO4_4_func SAEDRVT14_EO4_4_behav_inst(.X(X),.A1(A1),.A2(A2),.A3(A3),.A4(A4));
`else
   SAEDRVT14_EO4_4_func SAEDRVT14_EO4_4_inst(.X(X),.A1(A1),.A2(A2),.A3(A3),.A4(A4));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      if(A2===1'b0 && A3===1'b0 && A4===1'b1)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(A2===1'b0 && A3===1'b1 && A4===1'b0)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(A2===1'b1 && A3===1'b0 && A4===1'b0)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(A2===1'b1 && A3===1'b1 && A4===1'b1)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      ifnone
      // comb arc posedge A1 --> (X:A1)
      (posedge A1 => (X:A1)) = (1.0,1.0);
      
      ifnone
      // comb arc negedge A1 --> (X:A1)
      (negedge A1 => (X:A1)) = (1.0,1.0);
      
      if(A2===1'b0 && A3===1'b0 && A4===1'b0)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(A2===1'b0 && A3===1'b1 && A4===1'b1)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(A2===1'b1 && A3===1'b0 && A4===1'b1)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(A2===1'b1 && A3===1'b1 && A4===1'b0)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A3===1'b0 && A4===1'b1)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A3===1'b1 && A4===1'b0)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A3===1'b0 && A4===1'b0)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A3===1'b1 && A4===1'b1)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      ifnone
      // comb arc posedge A2 --> (X:A2)
      (posedge A2 => (X:A2)) = (1.0,1.0);
      
      ifnone
      // comb arc negedge A2 --> (X:A2)
      (negedge A2 => (X:A2)) = (1.0,1.0);
      
      if(A1===1'b0 && A3===1'b0 && A4===1'b0)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A3===1'b1 && A4===1'b1)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A3===1'b0 && A4===1'b1)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A3===1'b1 && A4===1'b0)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0 && A4===1'b1)
      // comb arc A3 --> X
      (A3 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && A4===1'b0)
      // comb arc A3 --> X
      (A3 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && A4===1'b0)
      // comb arc A3 --> X
      (A3 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1 && A4===1'b1)
      // comb arc A3 --> X
      (A3 => X) = (1.0,1.0);
      
      ifnone
      // comb arc posedge A3 --> (X:A3)
      (posedge A3 => (X:A3)) = (1.0,1.0);
      
      ifnone
      // comb arc negedge A3 --> (X:A3)
      (negedge A3 => (X:A3)) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0 && A4===1'b0)
      // comb arc A3 --> X
      (A3 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && A4===1'b1)
      // comb arc A3 --> X
      (A3 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && A4===1'b1)
      // comb arc A3 --> X
      (A3 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1 && A4===1'b0)
      // comb arc A3 --> X
      (A3 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0 && A3===1'b1)
      // comb arc A4 --> X
      (A4 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && A3===1'b0)
      // comb arc A4 --> X
      (A4 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && A3===1'b0)
      // comb arc A4 --> X
      (A4 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1 && A3===1'b1)
      // comb arc A4 --> X
      (A4 => X) = (1.0,1.0);
      
      ifnone
      // comb arc posedge A4 --> (X:A4)
      (posedge A4 => (X:A4)) = (1.0,1.0);
      
      ifnone
      // comb arc negedge A4 --> (X:A4)
      (negedge A4 => (X:A4)) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0 && A3===1'b0)
      // comb arc A4 --> X
      (A4 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && A3===1'b1)
      // comb arc A4 --> X
      (A4 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && A3===1'b1)
      // comb arc A4 --> X
      (A4 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1 && A3===1'b0)
      // comb arc A4 --> X
      (A4 => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_EO4_U_0P5( X, A1, A2, A3, A4 );
input A1, A2, A3, A4;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_EO4_U_0P5_func SAEDRVT14_EO4_U_0P5_behav_inst(.X(X),.A1(A1),.A2(A2),.A3(A3),.A4(A4));
`else
   SAEDRVT14_EO4_U_0P5_func SAEDRVT14_EO4_U_0P5_inst(.X(X),.A1(A1),.A2(A2),.A3(A3),.A4(A4));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      if(A2===1'b0 && A3===1'b0 && A4===1'b1)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(A2===1'b0 && A3===1'b1 && A4===1'b0)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(A2===1'b1 && A3===1'b0 && A4===1'b0)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(A2===1'b1 && A3===1'b1 && A4===1'b1)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      ifnone
      // comb arc posedge A1 --> (X:A1)
      (posedge A1 => (X:A1)) = (1.0,1.0);
      
      ifnone
      // comb arc negedge A1 --> (X:A1)
      (negedge A1 => (X:A1)) = (1.0,1.0);
      
      if(A2===1'b0 && A3===1'b0 && A4===1'b0)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(A2===1'b0 && A3===1'b1 && A4===1'b1)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(A2===1'b1 && A3===1'b0 && A4===1'b1)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(A2===1'b1 && A3===1'b1 && A4===1'b0)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A3===1'b0 && A4===1'b1)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A3===1'b1 && A4===1'b0)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A3===1'b0 && A4===1'b0)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A3===1'b1 && A4===1'b1)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      ifnone
      // comb arc posedge A2 --> (X:A2)
      (posedge A2 => (X:A2)) = (1.0,1.0);
      
      ifnone
      // comb arc negedge A2 --> (X:A2)
      (negedge A2 => (X:A2)) = (1.0,1.0);
      
      if(A1===1'b0 && A3===1'b0 && A4===1'b0)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A3===1'b1 && A4===1'b1)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A3===1'b0 && A4===1'b1)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A3===1'b1 && A4===1'b0)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0 && A4===1'b1)
      // comb arc A3 --> X
      (A3 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && A4===1'b0)
      // comb arc A3 --> X
      (A3 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && A4===1'b0)
      // comb arc A3 --> X
      (A3 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1 && A4===1'b1)
      // comb arc A3 --> X
      (A3 => X) = (1.0,1.0);
      
      ifnone
      // comb arc posedge A3 --> (X:A3)
      (posedge A3 => (X:A3)) = (1.0,1.0);
      
      ifnone
      // comb arc negedge A3 --> (X:A3)
      (negedge A3 => (X:A3)) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0 && A4===1'b0)
      // comb arc A3 --> X
      (A3 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && A4===1'b1)
      // comb arc A3 --> X
      (A3 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && A4===1'b1)
      // comb arc A3 --> X
      (A3 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1 && A4===1'b0)
      // comb arc A3 --> X
      (A3 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0 && A3===1'b1)
      // comb arc A4 --> X
      (A4 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && A3===1'b0)
      // comb arc A4 --> X
      (A4 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && A3===1'b0)
      // comb arc A4 --> X
      (A4 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1 && A3===1'b1)
      // comb arc A4 --> X
      (A4 => X) = (1.0,1.0);
      
      ifnone
      // comb arc posedge A4 --> (X:A4)
      (posedge A4 => (X:A4)) = (1.0,1.0);
      
      ifnone
      // comb arc negedge A4 --> (X:A4)
      (negedge A4 => (X:A4)) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0 && A3===1'b0)
      // comb arc A4 --> X
      (A4 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && A3===1'b1)
      // comb arc A4 --> X
      (A4 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && A3===1'b1)
      // comb arc A4 --> X
      (A4 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1 && A3===1'b0)
      // comb arc A4 --> X
      (A4 => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_INV_0P5( X, A );
input A;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_INV_0P5_func SAEDRVT14_INV_0P5_behav_inst(.X(X),.A(A));
`else
   SAEDRVT14_INV_0P5_func SAEDRVT14_INV_0P5_inst(.X(X),.A(A));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A --> X
      (A => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_INV_0P75( X, A );
input A;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_INV_0P75_func SAEDRVT14_INV_0P75_behav_inst(.X(X),.A(A));
`else
   SAEDRVT14_INV_0P75_func SAEDRVT14_INV_0P75_inst(.X(X),.A(A));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A --> X
      (A => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_INV_1( X, A );
input A;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_INV_1_func SAEDRVT14_INV_1_behav_inst(.X(X),.A(A));
`else
   SAEDRVT14_INV_1_func SAEDRVT14_INV_1_inst(.X(X),.A(A));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A --> X
      (A => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_INV_10( X, A );
input A;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_INV_10_func SAEDRVT14_INV_10_behav_inst(.X(X),.A(A));
`else
   SAEDRVT14_INV_10_func SAEDRVT14_INV_10_inst(.X(X),.A(A));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A --> X
      (A => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_INV_12( X, A );
input A;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_INV_12_func SAEDRVT14_INV_12_behav_inst(.X(X),.A(A));
`else
   SAEDRVT14_INV_12_func SAEDRVT14_INV_12_inst(.X(X),.A(A));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A --> X
      (A => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_INV_16( X, A );
input A;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_INV_16_func SAEDRVT14_INV_16_behav_inst(.X(X),.A(A));
`else
   SAEDRVT14_INV_16_func SAEDRVT14_INV_16_inst(.X(X),.A(A));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A --> X
      (A => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_INV_1P5( X, A );
input A;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_INV_1P5_func SAEDRVT14_INV_1P5_behav_inst(.X(X),.A(A));
`else
   SAEDRVT14_INV_1P5_func SAEDRVT14_INV_1P5_inst(.X(X),.A(A));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A --> X
      (A => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_INV_2( X, A );
input A;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_INV_2_func SAEDRVT14_INV_2_behav_inst(.X(X),.A(A));
`else
   SAEDRVT14_INV_2_func SAEDRVT14_INV_2_inst(.X(X),.A(A));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A --> X
      (A => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_INV_20( X, A );
input A;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_INV_20_func SAEDRVT14_INV_20_behav_inst(.X(X),.A(A));
`else
   SAEDRVT14_INV_20_func SAEDRVT14_INV_20_inst(.X(X),.A(A));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A --> X
      (A => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_INV_3( X, A );
input A;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_INV_3_func SAEDRVT14_INV_3_behav_inst(.X(X),.A(A));
`else
   SAEDRVT14_INV_3_func SAEDRVT14_INV_3_inst(.X(X),.A(A));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A --> X
      (A => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_INV_4( X, A );
input A;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_INV_4_func SAEDRVT14_INV_4_behav_inst(.X(X),.A(A));
`else
   SAEDRVT14_INV_4_func SAEDRVT14_INV_4_inst(.X(X),.A(A));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A --> X
      (A => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_INV_6( X, A );
input A;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_INV_6_func SAEDRVT14_INV_6_behav_inst(.X(X),.A(A));
`else
   SAEDRVT14_INV_6_func SAEDRVT14_INV_6_inst(.X(X),.A(A));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A --> X
      (A => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_INV_8( X, A );
input A;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_INV_8_func SAEDRVT14_INV_8_behav_inst(.X(X),.A(A));
`else
   SAEDRVT14_INV_8_func SAEDRVT14_INV_8_inst(.X(X),.A(A));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A --> X
      (A => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_INV_ECO_1( X, A );
input A;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_INV_ECO_1_func SAEDRVT14_INV_ECO_1_behav_inst(.X(X),.A(A));
`else
   SAEDRVT14_INV_ECO_1_func SAEDRVT14_INV_ECO_1_inst(.X(X),.A(A));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A --> X
      (A => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_INV_ECO_2( X, A );
input A;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_INV_ECO_2_func SAEDRVT14_INV_ECO_2_behav_inst(.X(X),.A(A));
`else
   SAEDRVT14_INV_ECO_2_func SAEDRVT14_INV_ECO_2_inst(.X(X),.A(A));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A --> X
      (A => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_INV_ECO_3( X, A );
input A;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_INV_ECO_3_func SAEDRVT14_INV_ECO_3_behav_inst(.X(X),.A(A));
`else
   SAEDRVT14_INV_ECO_3_func SAEDRVT14_INV_ECO_3_inst(.X(X),.A(A));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A --> X
      (A => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_INV_ECO_4( X, A );
input A;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_INV_ECO_4_func SAEDRVT14_INV_ECO_4_behav_inst(.X(X),.A(A));
`else
   SAEDRVT14_INV_ECO_4_func SAEDRVT14_INV_ECO_4_inst(.X(X),.A(A));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A --> X
      (A => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_INV_ECO_6( X, A );
input A;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_INV_ECO_6_func SAEDRVT14_INV_ECO_6_behav_inst(.X(X),.A(A));
`else
   SAEDRVT14_INV_ECO_6_func SAEDRVT14_INV_ECO_6_inst(.X(X),.A(A));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A --> X
      (A => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_INV_ECO_8( X, A );
input A;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_INV_ECO_8_func SAEDRVT14_INV_ECO_8_behav_inst(.X(X),.A(A));
`else
   SAEDRVT14_INV_ECO_8_func SAEDRVT14_INV_ECO_8_inst(.X(X),.A(A));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A --> X
      (A => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_INV_S_0P5( X, A );
input A;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_INV_S_0P5_func SAEDRVT14_INV_S_0P5_behav_inst(.X(X),.A(A));
`else
   SAEDRVT14_INV_S_0P5_func SAEDRVT14_INV_S_0P5_inst(.X(X),.A(A));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A --> X
      (A => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_INV_S_0P75( X, A );
input A;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_INV_S_0P75_func SAEDRVT14_INV_S_0P75_behav_inst(.X(X),.A(A));
`else
   SAEDRVT14_INV_S_0P75_func SAEDRVT14_INV_S_0P75_inst(.X(X),.A(A));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A --> X
      (A => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_INV_S_1( X, A );
input A;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_INV_S_1_func SAEDRVT14_INV_S_1_behav_inst(.X(X),.A(A));
`else
   SAEDRVT14_INV_S_1_func SAEDRVT14_INV_S_1_inst(.X(X),.A(A));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A --> X
      (A => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_INV_S_10( X, A );
input A;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_INV_S_10_func SAEDRVT14_INV_S_10_behav_inst(.X(X),.A(A));
`else
   SAEDRVT14_INV_S_10_func SAEDRVT14_INV_S_10_inst(.X(X),.A(A));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A --> X
      (A => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_INV_S_12( X, A );
input A;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_INV_S_12_func SAEDRVT14_INV_S_12_behav_inst(.X(X),.A(A));
`else
   SAEDRVT14_INV_S_12_func SAEDRVT14_INV_S_12_inst(.X(X),.A(A));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A --> X
      (A => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_INV_S_16( X, A );
input A;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_INV_S_16_func SAEDRVT14_INV_S_16_behav_inst(.X(X),.A(A));
`else
   SAEDRVT14_INV_S_16_func SAEDRVT14_INV_S_16_inst(.X(X),.A(A));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A --> X
      (A => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_INV_S_1P5( X, A );
input A;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_INV_S_1P5_func SAEDRVT14_INV_S_1P5_behav_inst(.X(X),.A(A));
`else
   SAEDRVT14_INV_S_1P5_func SAEDRVT14_INV_S_1P5_inst(.X(X),.A(A));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A --> X
      (A => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_INV_S_2( X, A );
input A;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_INV_S_2_func SAEDRVT14_INV_S_2_behav_inst(.X(X),.A(A));
`else
   SAEDRVT14_INV_S_2_func SAEDRVT14_INV_S_2_inst(.X(X),.A(A));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A --> X
      (A => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_INV_S_20( X, A );
input A;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_INV_S_20_func SAEDRVT14_INV_S_20_behav_inst(.X(X),.A(A));
`else
   SAEDRVT14_INV_S_20_func SAEDRVT14_INV_S_20_inst(.X(X),.A(A));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A --> X
      (A => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_INV_S_3( X, A );
input A;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_INV_S_3_func SAEDRVT14_INV_S_3_behav_inst(.X(X),.A(A));
`else
   SAEDRVT14_INV_S_3_func SAEDRVT14_INV_S_3_inst(.X(X),.A(A));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A --> X
      (A => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_INV_S_4( X, A );
input A;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_INV_S_4_func SAEDRVT14_INV_S_4_behav_inst(.X(X),.A(A));
`else
   SAEDRVT14_INV_S_4_func SAEDRVT14_INV_S_4_inst(.X(X),.A(A));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A --> X
      (A => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_INV_S_5( X, A );
input A;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_INV_S_5_func SAEDRVT14_INV_S_5_behav_inst(.X(X),.A(A));
`else
   SAEDRVT14_INV_S_5_func SAEDRVT14_INV_S_5_inst(.X(X),.A(A));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A --> X
      (A => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_INV_S_6( X, A );
input A;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_INV_S_6_func SAEDRVT14_INV_S_6_behav_inst(.X(X),.A(A));
`else
   SAEDRVT14_INV_S_6_func SAEDRVT14_INV_S_6_inst(.X(X),.A(A));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A --> X
      (A => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_INV_S_7( X, A );
input A;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_INV_S_7_func SAEDRVT14_INV_S_7_behav_inst(.X(X),.A(A));
`else
   SAEDRVT14_INV_S_7_func SAEDRVT14_INV_S_7_inst(.X(X),.A(A));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A --> X
      (A => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_INV_S_8( X, A );
input A;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_INV_S_8_func SAEDRVT14_INV_S_8_behav_inst(.X(X),.A(A));
`else
   SAEDRVT14_INV_S_8_func SAEDRVT14_INV_S_8_inst(.X(X),.A(A));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A --> X
      (A => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_INV_S_9( X, A );
input A;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_INV_S_9_func SAEDRVT14_INV_S_9_behav_inst(.X(X),.A(A));
`else
   SAEDRVT14_INV_S_9_func SAEDRVT14_INV_S_9_inst(.X(X),.A(A));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A --> X
      (A => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_MUX2_1( X, D0, D1, S );
input D0, D1, S;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_MUX2_1_func SAEDRVT14_MUX2_1_behav_inst(.X(X),.D0(D0),.D1(D1),.S(S));
`else
   SAEDRVT14_MUX2_1_func SAEDRVT14_MUX2_1_inst(.X(X),.D0(D0),.D1(D1),.S(S));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      if(D1===1'b0)
      // comb arc D0 --> X
      (D0 => X) = (1.0,1.0);
      
      if(D1===1'b1)
      // comb arc D0 --> X
      (D0 => X) = (1.0,1.0);
      
      ifnone
      // comb arc D0 --> X
      (D0 => X) = (1.0,1.0);
      
      if(D0===1'b0)
      // comb arc D1 --> X
      (D1 => X) = (1.0,1.0);
      
      if(D0===1'b1)
      // comb arc D1 --> X
      (D1 => X) = (1.0,1.0);
      
      ifnone
      // comb arc D1 --> X
      (D1 => X) = (1.0,1.0);
      
      ifnone
      // comb arc posedge S --> (X:S)
      (posedge S => (X:S)) = (1.0,1.0);
      
      ifnone
      // comb arc negedge S --> (X:S)
      (negedge S => (X:S)) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_MUX2_1P5( X, D0, D1, S );
input D0, D1, S;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_MUX2_1P5_func SAEDRVT14_MUX2_1P5_behav_inst(.X(X),.D0(D0),.D1(D1),.S(S));
`else
   SAEDRVT14_MUX2_1P5_func SAEDRVT14_MUX2_1P5_inst(.X(X),.D0(D0),.D1(D1),.S(S));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      if(D1===1'b0)
      // comb arc D0 --> X
      (D0 => X) = (1.0,1.0);
      
      if(D1===1'b1)
      // comb arc D0 --> X
      (D0 => X) = (1.0,1.0);
      
      ifnone
      // comb arc D0 --> X
      (D0 => X) = (1.0,1.0);
      
      if(D0===1'b0)
      // comb arc D1 --> X
      (D1 => X) = (1.0,1.0);
      
      if(D0===1'b1)
      // comb arc D1 --> X
      (D1 => X) = (1.0,1.0);
      
      ifnone
      // comb arc D1 --> X
      (D1 => X) = (1.0,1.0);
      
      ifnone
      // comb arc posedge S --> (X:S)
      (posedge S => (X:S)) = (1.0,1.0);
      
      ifnone
      // comb arc negedge S --> (X:S)
      (negedge S => (X:S)) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_MUX2_2( X, D0, D1, S );
input D0, D1, S;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_MUX2_2_func SAEDRVT14_MUX2_2_behav_inst(.X(X),.D0(D0),.D1(D1),.S(S));
`else
   SAEDRVT14_MUX2_2_func SAEDRVT14_MUX2_2_inst(.X(X),.D0(D0),.D1(D1),.S(S));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      if(D1===1'b0)
      // comb arc D0 --> X
      (D0 => X) = (1.0,1.0);
      
      if(D1===1'b1)
      // comb arc D0 --> X
      (D0 => X) = (1.0,1.0);
      
      ifnone
      // comb arc D0 --> X
      (D0 => X) = (1.0,1.0);
      
      if(D0===1'b0)
      // comb arc D1 --> X
      (D1 => X) = (1.0,1.0);
      
      if(D0===1'b1)
      // comb arc D1 --> X
      (D1 => X) = (1.0,1.0);
      
      ifnone
      // comb arc D1 --> X
      (D1 => X) = (1.0,1.0);
      
      ifnone
      // comb arc posedge S --> (X:S)
      (posedge S => (X:S)) = (1.0,1.0);
      
      ifnone
      // comb arc negedge S --> (X:S)
      (negedge S => (X:S)) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_MUX2_4( X, D0, D1, S );
input D0, D1, S;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_MUX2_4_func SAEDRVT14_MUX2_4_behav_inst(.X(X),.D0(D0),.D1(D1),.S(S));
`else
   SAEDRVT14_MUX2_4_func SAEDRVT14_MUX2_4_inst(.X(X),.D0(D0),.D1(D1),.S(S));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      if(D1===1'b0)
      // comb arc D0 --> X
      (D0 => X) = (1.0,1.0);
      
      if(D1===1'b1)
      // comb arc D0 --> X
      (D0 => X) = (1.0,1.0);
      
      ifnone
      // comb arc D0 --> X
      (D0 => X) = (1.0,1.0);
      
      if(D0===1'b0)
      // comb arc D1 --> X
      (D1 => X) = (1.0,1.0);
      
      if(D0===1'b1)
      // comb arc D1 --> X
      (D1 => X) = (1.0,1.0);
      
      ifnone
      // comb arc D1 --> X
      (D1 => X) = (1.0,1.0);
      
      ifnone
      // comb arc posedge S --> (X:S)
      (posedge S => (X:S)) = (1.0,1.0);
      
      ifnone
      // comb arc negedge S --> (X:S)
      (negedge S => (X:S)) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_MUX2_ECO_1( X, D0, D1, S );
input D0, D1, S;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_MUX2_ECO_1_func SAEDRVT14_MUX2_ECO_1_behav_inst(.X(X),.D0(D0),.D1(D1),.S(S));
`else
   SAEDRVT14_MUX2_ECO_1_func SAEDRVT14_MUX2_ECO_1_inst(.X(X),.D0(D0),.D1(D1),.S(S));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      if(D1===1'b0)
      // comb arc D0 --> X
      (D0 => X) = (1.0,1.0);
      
      if(D1===1'b1)
      // comb arc D0 --> X
      (D0 => X) = (1.0,1.0);
      
      ifnone
      // comb arc D0 --> X
      (D0 => X) = (1.0,1.0);
      
      if(D0===1'b0)
      // comb arc D1 --> X
      (D1 => X) = (1.0,1.0);
      
      if(D0===1'b1)
      // comb arc D1 --> X
      (D1 => X) = (1.0,1.0);
      
      ifnone
      // comb arc D1 --> X
      (D1 => X) = (1.0,1.0);
      
      ifnone
      // comb arc posedge S --> (X:S)
      (posedge S => (X:S)) = (1.0,1.0);
      
      ifnone
      // comb arc negedge S --> (X:S)
      (negedge S => (X:S)) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_MUX2_ECO_2( X, D0, D1, S );
input D0, D1, S;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_MUX2_ECO_2_func SAEDRVT14_MUX2_ECO_2_behav_inst(.X(X),.D0(D0),.D1(D1),.S(S));
`else
   SAEDRVT14_MUX2_ECO_2_func SAEDRVT14_MUX2_ECO_2_inst(.X(X),.D0(D0),.D1(D1),.S(S));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      if(D1===1'b0)
      // comb arc D0 --> X
      (D0 => X) = (1.0,1.0);
      
      if(D1===1'b1)
      // comb arc D0 --> X
      (D0 => X) = (1.0,1.0);
      
      ifnone
      // comb arc D0 --> X
      (D0 => X) = (1.0,1.0);
      
      if(D0===1'b0)
      // comb arc D1 --> X
      (D1 => X) = (1.0,1.0);
      
      if(D0===1'b1)
      // comb arc D1 --> X
      (D1 => X) = (1.0,1.0);
      
      ifnone
      // comb arc D1 --> X
      (D1 => X) = (1.0,1.0);
      
      ifnone
      // comb arc posedge S --> (X:S)
      (posedge S => (X:S)) = (1.0,1.0);
      
      ifnone
      // comb arc negedge S --> (X:S)
      (negedge S => (X:S)) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_MUX2_MM_0P5( X, D0, D1, S );
input D0, D1, S;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_MUX2_MM_0P5_func SAEDRVT14_MUX2_MM_0P5_behav_inst(.X(X),.D0(D0),.D1(D1),.S(S));
`else
   SAEDRVT14_MUX2_MM_0P5_func SAEDRVT14_MUX2_MM_0P5_inst(.X(X),.D0(D0),.D1(D1),.S(S));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      if(D1===1'b0)
      // comb arc D0 --> X
      (D0 => X) = (1.0,1.0);
      
      if(D1===1'b1)
      // comb arc D0 --> X
      (D0 => X) = (1.0,1.0);
      
      ifnone
      // comb arc D0 --> X
      (D0 => X) = (1.0,1.0);
      
      if(D0===1'b0)
      // comb arc D1 --> X
      (D1 => X) = (1.0,1.0);
      
      if(D0===1'b1)
      // comb arc D1 --> X
      (D1 => X) = (1.0,1.0);
      
      ifnone
      // comb arc D1 --> X
      (D1 => X) = (1.0,1.0);
      
      ifnone
      // comb arc posedge S --> (X:S)
      (posedge S => (X:S)) = (1.0,1.0);
      
      ifnone
      // comb arc negedge S --> (X:S)
      (negedge S => (X:S)) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_MUX2_MM_1( X, D0, D1, S );
input D0, D1, S;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_MUX2_MM_1_func SAEDRVT14_MUX2_MM_1_behav_inst(.X(X),.D0(D0),.D1(D1),.S(S));
`else
   SAEDRVT14_MUX2_MM_1_func SAEDRVT14_MUX2_MM_1_inst(.X(X),.D0(D0),.D1(D1),.S(S));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      if(D1===1'b0)
      // comb arc D0 --> X
      (D0 => X) = (1.0,1.0);
      
      if(D1===1'b1)
      // comb arc D0 --> X
      (D0 => X) = (1.0,1.0);
      
      ifnone
      // comb arc D0 --> X
      (D0 => X) = (1.0,1.0);
      
      if(D0===1'b0)
      // comb arc D1 --> X
      (D1 => X) = (1.0,1.0);
      
      if(D0===1'b1)
      // comb arc D1 --> X
      (D1 => X) = (1.0,1.0);
      
      ifnone
      // comb arc D1 --> X
      (D1 => X) = (1.0,1.0);
      
      ifnone
      // comb arc posedge S --> (X:S)
      (posedge S => (X:S)) = (1.0,1.0);
      
      ifnone
      // comb arc negedge S --> (X:S)
      (negedge S => (X:S)) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_MUX2_MM_2( X, D0, D1, S );
input D0, D1, S;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_MUX2_MM_2_func SAEDRVT14_MUX2_MM_2_behav_inst(.X(X),.D0(D0),.D1(D1),.S(S));
`else
   SAEDRVT14_MUX2_MM_2_func SAEDRVT14_MUX2_MM_2_inst(.X(X),.D0(D0),.D1(D1),.S(S));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      if(D1===1'b0)
      // comb arc D0 --> X
      (D0 => X) = (1.0,1.0);
      
      if(D1===1'b1)
      // comb arc D0 --> X
      (D0 => X) = (1.0,1.0);
      
      ifnone
      // comb arc D0 --> X
      (D0 => X) = (1.0,1.0);
      
      if(D0===1'b0)
      // comb arc D1 --> X
      (D1 => X) = (1.0,1.0);
      
      if(D0===1'b1)
      // comb arc D1 --> X
      (D1 => X) = (1.0,1.0);
      
      ifnone
      // comb arc D1 --> X
      (D1 => X) = (1.0,1.0);
      
      ifnone
      // comb arc posedge S --> (X:S)
      (posedge S => (X:S)) = (1.0,1.0);
      
      ifnone
      // comb arc negedge S --> (X:S)
      (negedge S => (X:S)) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_MUX2_MM_4( X, D0, D1, S );
input D0, D1, S;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_MUX2_MM_4_func SAEDRVT14_MUX2_MM_4_behav_inst(.X(X),.D0(D0),.D1(D1),.S(S));
`else
   SAEDRVT14_MUX2_MM_4_func SAEDRVT14_MUX2_MM_4_inst(.X(X),.D0(D0),.D1(D1),.S(S));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      if(D1===1'b0)
      // comb arc D0 --> X
      (D0 => X) = (1.0,1.0);
      
      if(D1===1'b1)
      // comb arc D0 --> X
      (D0 => X) = (1.0,1.0);
      
      ifnone
      // comb arc D0 --> X
      (D0 => X) = (1.0,1.0);
      
      if(D0===1'b0)
      // comb arc D1 --> X
      (D1 => X) = (1.0,1.0);
      
      if(D0===1'b1)
      // comb arc D1 --> X
      (D1 => X) = (1.0,1.0);
      
      ifnone
      // comb arc D1 --> X
      (D1 => X) = (1.0,1.0);
      
      ifnone
      // comb arc posedge S --> (X:S)
      (posedge S => (X:S)) = (1.0,1.0);
      
      ifnone
      // comb arc negedge S --> (X:S)
      (negedge S => (X:S)) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_MUX2_U_0P5( X, D0, D1, S );
input D0, D1, S;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_MUX2_U_0P5_func SAEDRVT14_MUX2_U_0P5_behav_inst(.X(X),.D0(D0),.D1(D1),.S(S));
`else
   SAEDRVT14_MUX2_U_0P5_func SAEDRVT14_MUX2_U_0P5_inst(.X(X),.D0(D0),.D1(D1),.S(S));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      if(D1===1'b0)
      // comb arc D0 --> X
      (D0 => X) = (1.0,1.0);
      
      if(D1===1'b1)
      // comb arc D0 --> X
      (D0 => X) = (1.0,1.0);
      
      ifnone
      // comb arc D0 --> X
      (D0 => X) = (1.0,1.0);
      
      if(D0===1'b0)
      // comb arc D1 --> X
      (D1 => X) = (1.0,1.0);
      
      if(D0===1'b1)
      // comb arc D1 --> X
      (D1 => X) = (1.0,1.0);
      
      ifnone
      // comb arc D1 --> X
      (D1 => X) = (1.0,1.0);
      
      ifnone
      // comb arc posedge S --> (X:S)
      (posedge S => (X:S)) = (1.0,1.0);
      
      ifnone
      // comb arc negedge S --> (X:S)
      (negedge S => (X:S)) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_MUX3_V1M_0P5( X, D0, D1, D2, S0, S1 );
input D0, D1, D2, S0, S1;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_MUX3_V1M_0P5_func SAEDRVT14_MUX3_V1M_0P5_behav_inst(.X(X),.D0(D0),.D1(D1),.D2(D2),.S0(S0),.S1(S1));
`else
   SAEDRVT14_MUX3_V1M_0P5_func SAEDRVT14_MUX3_V1M_0P5_inst(.X(X),.D0(D0),.D1(D1),.D2(D2),.S0(S0),.S1(S1));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      if(D1===1'b0 && D2===1'b0)
      // comb arc D0 --> X
      (D0 => X) = (1.0,1.0);
      
      if(D1===1'b0 && D2===1'b1)
      // comb arc D0 --> X
      (D0 => X) = (1.0,1.0);
      
      if(D1===1'b1 && D2===1'b0)
      // comb arc D0 --> X
      (D0 => X) = (1.0,1.0);
      
      if(D1===1'b1 && D2===1'b1)
      // comb arc D0 --> X
      (D0 => X) = (1.0,1.0);
      
      ifnone
      // comb arc D0 --> X
      (D0 => X) = (1.0,1.0);
      
      if(D0===1'b0 && D2===1'b0)
      // comb arc D1 --> X
      (D1 => X) = (1.0,1.0);
      
      if(D0===1'b0 && D2===1'b1)
      // comb arc D1 --> X
      (D1 => X) = (1.0,1.0);
      
      if(D0===1'b1 && D2===1'b0)
      // comb arc D1 --> X
      (D1 => X) = (1.0,1.0);
      
      if(D0===1'b1 && D2===1'b1)
      // comb arc D1 --> X
      (D1 => X) = (1.0,1.0);
      
      ifnone
      // comb arc D1 --> X
      (D1 => X) = (1.0,1.0);
      
      if(D0===1'b0 && D1===1'b0 && S0===1'b0)
      // comb arc D2 --> X
      (D2 => X) = (1.0,1.0);
      
      if(D0===1'b0 && D1===1'b0 && S0===1'b1)
      // comb arc D2 --> X
      (D2 => X) = (1.0,1.0);
      
      if(D0===1'b0 && D1===1'b1 && S0===1'b0)
      // comb arc D2 --> X
      (D2 => X) = (1.0,1.0);
      
      if(D0===1'b0 && D1===1'b1 && S0===1'b1)
      // comb arc D2 --> X
      (D2 => X) = (1.0,1.0);
      
      if(D0===1'b1 && D1===1'b0 && S0===1'b0)
      // comb arc D2 --> X
      (D2 => X) = (1.0,1.0);
      
      if(D0===1'b1 && D1===1'b0 && S0===1'b1)
      // comb arc D2 --> X
      (D2 => X) = (1.0,1.0);
      
      if(D0===1'b1 && D1===1'b1 && S0===1'b0)
      // comb arc D2 --> X
      (D2 => X) = (1.0,1.0);
      
      if(D0===1'b1 && D1===1'b1 && S0===1'b1)
      // comb arc D2 --> X
      (D2 => X) = (1.0,1.0);
      
      ifnone
      // comb arc D2 --> X
      (D2 => X) = (1.0,1.0);
      
      if(D2===1'b0)
      // comb arc posedge S0 --> (X:S0)
      (posedge S0 => (X:S0)) = (1.0,1.0);
      
      if(D2===1'b0)
      // comb arc negedge S0 --> (X:S0)
      (negedge S0 => (X:S0)) = (1.0,1.0);
      
      if(D2===1'b1)
      // comb arc posedge S0 --> (X:S0)
      (posedge S0 => (X:S0)) = (1.0,1.0);
      
      if(D2===1'b1)
      // comb arc negedge S0 --> (X:S0)
      (negedge S0 => (X:S0)) = (1.0,1.0);
      
      ifnone
      // comb arc posedge S0 --> (X:S0)
      (posedge S0 => (X:S0)) = (1.0,1.0);
      
      ifnone
      // comb arc negedge S0 --> (X:S0)
      (negedge S0 => (X:S0)) = (1.0,1.0);
      
      if(D0===1'b0 && D1===1'b1 && S0===1'b1)
      // comb arc S1 --> X
      (S1 => X) = (1.0,1.0);
      
      if(D0===1'b1 && D1===1'b0 && S0===1'b0)
      // comb arc S1 --> X
      (S1 => X) = (1.0,1.0);
      
      if(D0===1'b1 && D1===1'b1 && S0===1'b0)
      // comb arc S1 --> X
      (S1 => X) = (1.0,1.0);
      
      if(D0===1'b1 && D1===1'b1 && S0===1'b1)
      // comb arc S1 --> X
      (S1 => X) = (1.0,1.0);
      
      ifnone
      // comb arc posedge S1 --> (X:S1)
      (posedge S1 => (X:S1)) = (1.0,1.0);
      
      ifnone
      // comb arc negedge S1 --> (X:S1)
      (negedge S1 => (X:S1)) = (1.0,1.0);
      
      if(D0===1'b0 && D1===1'b0 && S0===1'b0)
      // comb arc S1 --> X
      (S1 => X) = (1.0,1.0);
      
      if(D0===1'b0 && D1===1'b0 && S0===1'b1)
      // comb arc S1 --> X
      (S1 => X) = (1.0,1.0);
      
      if(D0===1'b0 && D1===1'b1 && S0===1'b0)
      // comb arc S1 --> X
      (S1 => X) = (1.0,1.0);
      
      if(D0===1'b1 && D1===1'b0 && S0===1'b1)
      // comb arc S1 --> X
      (S1 => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_MUX3_V1M_1( X, D0, D1, D2, S0, S1 );
input D0, D1, D2, S0, S1;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_MUX3_V1M_1_func SAEDRVT14_MUX3_V1M_1_behav_inst(.X(X),.D0(D0),.D1(D1),.D2(D2),.S0(S0),.S1(S1));
`else
   SAEDRVT14_MUX3_V1M_1_func SAEDRVT14_MUX3_V1M_1_inst(.X(X),.D0(D0),.D1(D1),.D2(D2),.S0(S0),.S1(S1));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      if(D1===1'b0 && D2===1'b0)
      // comb arc D0 --> X
      (D0 => X) = (1.0,1.0);
      
      if(D1===1'b0 && D2===1'b1)
      // comb arc D0 --> X
      (D0 => X) = (1.0,1.0);
      
      if(D1===1'b1 && D2===1'b0)
      // comb arc D0 --> X
      (D0 => X) = (1.0,1.0);
      
      if(D1===1'b1 && D2===1'b1)
      // comb arc D0 --> X
      (D0 => X) = (1.0,1.0);
      
      ifnone
      // comb arc D0 --> X
      (D0 => X) = (1.0,1.0);
      
      if(D0===1'b0 && D2===1'b0)
      // comb arc D1 --> X
      (D1 => X) = (1.0,1.0);
      
      if(D0===1'b0 && D2===1'b1)
      // comb arc D1 --> X
      (D1 => X) = (1.0,1.0);
      
      if(D0===1'b1 && D2===1'b0)
      // comb arc D1 --> X
      (D1 => X) = (1.0,1.0);
      
      if(D0===1'b1 && D2===1'b1)
      // comb arc D1 --> X
      (D1 => X) = (1.0,1.0);
      
      ifnone
      // comb arc D1 --> X
      (D1 => X) = (1.0,1.0);
      
      if(D0===1'b0 && D1===1'b0 && S0===1'b0)
      // comb arc D2 --> X
      (D2 => X) = (1.0,1.0);
      
      if(D0===1'b0 && D1===1'b0 && S0===1'b1)
      // comb arc D2 --> X
      (D2 => X) = (1.0,1.0);
      
      if(D0===1'b0 && D1===1'b1 && S0===1'b0)
      // comb arc D2 --> X
      (D2 => X) = (1.0,1.0);
      
      if(D0===1'b0 && D1===1'b1 && S0===1'b1)
      // comb arc D2 --> X
      (D2 => X) = (1.0,1.0);
      
      if(D0===1'b1 && D1===1'b0 && S0===1'b0)
      // comb arc D2 --> X
      (D2 => X) = (1.0,1.0);
      
      if(D0===1'b1 && D1===1'b0 && S0===1'b1)
      // comb arc D2 --> X
      (D2 => X) = (1.0,1.0);
      
      if(D0===1'b1 && D1===1'b1 && S0===1'b0)
      // comb arc D2 --> X
      (D2 => X) = (1.0,1.0);
      
      if(D0===1'b1 && D1===1'b1 && S0===1'b1)
      // comb arc D2 --> X
      (D2 => X) = (1.0,1.0);
      
      ifnone
      // comb arc D2 --> X
      (D2 => X) = (1.0,1.0);
      
      if(D2===1'b0)
      // comb arc posedge S0 --> (X:S0)
      (posedge S0 => (X:S0)) = (1.0,1.0);
      
      if(D2===1'b0)
      // comb arc negedge S0 --> (X:S0)
      (negedge S0 => (X:S0)) = (1.0,1.0);
      
      if(D2===1'b1)
      // comb arc posedge S0 --> (X:S0)
      (posedge S0 => (X:S0)) = (1.0,1.0);
      
      if(D2===1'b1)
      // comb arc negedge S0 --> (X:S0)
      (negedge S0 => (X:S0)) = (1.0,1.0);
      
      ifnone
      // comb arc posedge S0 --> (X:S0)
      (posedge S0 => (X:S0)) = (1.0,1.0);
      
      ifnone
      // comb arc negedge S0 --> (X:S0)
      (negedge S0 => (X:S0)) = (1.0,1.0);
      
      if(D0===1'b0 && D1===1'b1 && S0===1'b1)
      // comb arc S1 --> X
      (S1 => X) = (1.0,1.0);
      
      if(D0===1'b1 && D1===1'b0 && S0===1'b0)
      // comb arc S1 --> X
      (S1 => X) = (1.0,1.0);
      
      if(D0===1'b1 && D1===1'b1 && S0===1'b0)
      // comb arc S1 --> X
      (S1 => X) = (1.0,1.0);
      
      if(D0===1'b1 && D1===1'b1 && S0===1'b1)
      // comb arc S1 --> X
      (S1 => X) = (1.0,1.0);
      
      ifnone
      // comb arc posedge S1 --> (X:S1)
      (posedge S1 => (X:S1)) = (1.0,1.0);
      
      ifnone
      // comb arc negedge S1 --> (X:S1)
      (negedge S1 => (X:S1)) = (1.0,1.0);
      
      if(D0===1'b0 && D1===1'b0 && S0===1'b0)
      // comb arc S1 --> X
      (S1 => X) = (1.0,1.0);
      
      if(D0===1'b0 && D1===1'b0 && S0===1'b1)
      // comb arc S1 --> X
      (S1 => X) = (1.0,1.0);
      
      if(D0===1'b0 && D1===1'b1 && S0===1'b0)
      // comb arc S1 --> X
      (S1 => X) = (1.0,1.0);
      
      if(D0===1'b1 && D1===1'b0 && S0===1'b1)
      // comb arc S1 --> X
      (S1 => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_MUX3_V1M_2( X, D0, D1, D2, S0, S1 );
input D0, D1, D2, S0, S1;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_MUX3_V1M_2_func SAEDRVT14_MUX3_V1M_2_behav_inst(.X(X),.D0(D0),.D1(D1),.D2(D2),.S0(S0),.S1(S1));
`else
   SAEDRVT14_MUX3_V1M_2_func SAEDRVT14_MUX3_V1M_2_inst(.X(X),.D0(D0),.D1(D1),.D2(D2),.S0(S0),.S1(S1));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      if(D1===1'b0 && D2===1'b0)
      // comb arc D0 --> X
      (D0 => X) = (1.0,1.0);
      
      if(D1===1'b0 && D2===1'b1)
      // comb arc D0 --> X
      (D0 => X) = (1.0,1.0);
      
      if(D1===1'b1 && D2===1'b0)
      // comb arc D0 --> X
      (D0 => X) = (1.0,1.0);
      
      if(D1===1'b1 && D2===1'b1)
      // comb arc D0 --> X
      (D0 => X) = (1.0,1.0);
      
      ifnone
      // comb arc D0 --> X
      (D0 => X) = (1.0,1.0);
      
      if(D0===1'b0 && D2===1'b0)
      // comb arc D1 --> X
      (D1 => X) = (1.0,1.0);
      
      if(D0===1'b0 && D2===1'b1)
      // comb arc D1 --> X
      (D1 => X) = (1.0,1.0);
      
      if(D0===1'b1 && D2===1'b0)
      // comb arc D1 --> X
      (D1 => X) = (1.0,1.0);
      
      if(D0===1'b1 && D2===1'b1)
      // comb arc D1 --> X
      (D1 => X) = (1.0,1.0);
      
      ifnone
      // comb arc D1 --> X
      (D1 => X) = (1.0,1.0);
      
      if(D0===1'b0 && D1===1'b0 && S0===1'b0)
      // comb arc D2 --> X
      (D2 => X) = (1.0,1.0);
      
      if(D0===1'b0 && D1===1'b0 && S0===1'b1)
      // comb arc D2 --> X
      (D2 => X) = (1.0,1.0);
      
      if(D0===1'b0 && D1===1'b1 && S0===1'b0)
      // comb arc D2 --> X
      (D2 => X) = (1.0,1.0);
      
      if(D0===1'b0 && D1===1'b1 && S0===1'b1)
      // comb arc D2 --> X
      (D2 => X) = (1.0,1.0);
      
      if(D0===1'b1 && D1===1'b0 && S0===1'b0)
      // comb arc D2 --> X
      (D2 => X) = (1.0,1.0);
      
      if(D0===1'b1 && D1===1'b0 && S0===1'b1)
      // comb arc D2 --> X
      (D2 => X) = (1.0,1.0);
      
      if(D0===1'b1 && D1===1'b1 && S0===1'b0)
      // comb arc D2 --> X
      (D2 => X) = (1.0,1.0);
      
      if(D0===1'b1 && D1===1'b1 && S0===1'b1)
      // comb arc D2 --> X
      (D2 => X) = (1.0,1.0);
      
      ifnone
      // comb arc D2 --> X
      (D2 => X) = (1.0,1.0);
      
      if(D2===1'b0)
      // comb arc posedge S0 --> (X:S0)
      (posedge S0 => (X:S0)) = (1.0,1.0);
      
      if(D2===1'b0)
      // comb arc negedge S0 --> (X:S0)
      (negedge S0 => (X:S0)) = (1.0,1.0);
      
      if(D2===1'b1)
      // comb arc posedge S0 --> (X:S0)
      (posedge S0 => (X:S0)) = (1.0,1.0);
      
      if(D2===1'b1)
      // comb arc negedge S0 --> (X:S0)
      (negedge S0 => (X:S0)) = (1.0,1.0);
      
      ifnone
      // comb arc posedge S0 --> (X:S0)
      (posedge S0 => (X:S0)) = (1.0,1.0);
      
      ifnone
      // comb arc negedge S0 --> (X:S0)
      (negedge S0 => (X:S0)) = (1.0,1.0);
      
      if(D0===1'b0 && D1===1'b1 && S0===1'b1)
      // comb arc S1 --> X
      (S1 => X) = (1.0,1.0);
      
      if(D0===1'b1 && D1===1'b0 && S0===1'b0)
      // comb arc S1 --> X
      (S1 => X) = (1.0,1.0);
      
      if(D0===1'b1 && D1===1'b1 && S0===1'b0)
      // comb arc S1 --> X
      (S1 => X) = (1.0,1.0);
      
      if(D0===1'b1 && D1===1'b1 && S0===1'b1)
      // comb arc S1 --> X
      (S1 => X) = (1.0,1.0);
      
      ifnone
      // comb arc posedge S1 --> (X:S1)
      (posedge S1 => (X:S1)) = (1.0,1.0);
      
      ifnone
      // comb arc negedge S1 --> (X:S1)
      (negedge S1 => (X:S1)) = (1.0,1.0);
      
      if(D0===1'b0 && D1===1'b0 && S0===1'b0)
      // comb arc S1 --> X
      (S1 => X) = (1.0,1.0);
      
      if(D0===1'b0 && D1===1'b0 && S0===1'b1)
      // comb arc S1 --> X
      (S1 => X) = (1.0,1.0);
      
      if(D0===1'b0 && D1===1'b1 && S0===1'b0)
      // comb arc S1 --> X
      (S1 => X) = (1.0,1.0);
      
      if(D0===1'b1 && D1===1'b0 && S0===1'b1)
      // comb arc S1 --> X
      (S1 => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_MUX3_V1M_4( X, D0, D1, D2, S0, S1 );
input D0, D1, D2, S0, S1;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_MUX3_V1M_4_func SAEDRVT14_MUX3_V1M_4_behav_inst(.X(X),.D0(D0),.D1(D1),.D2(D2),.S0(S0),.S1(S1));
`else
   SAEDRVT14_MUX3_V1M_4_func SAEDRVT14_MUX3_V1M_4_inst(.X(X),.D0(D0),.D1(D1),.D2(D2),.S0(S0),.S1(S1));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      if(D1===1'b0 && D2===1'b0)
      // comb arc D0 --> X
      (D0 => X) = (1.0,1.0);
      
      if(D1===1'b0 && D2===1'b1)
      // comb arc D0 --> X
      (D0 => X) = (1.0,1.0);
      
      if(D1===1'b1 && D2===1'b0)
      // comb arc D0 --> X
      (D0 => X) = (1.0,1.0);
      
      if(D1===1'b1 && D2===1'b1)
      // comb arc D0 --> X
      (D0 => X) = (1.0,1.0);
      
      ifnone
      // comb arc D0 --> X
      (D0 => X) = (1.0,1.0);
      
      if(D0===1'b0 && D2===1'b0)
      // comb arc D1 --> X
      (D1 => X) = (1.0,1.0);
      
      if(D0===1'b0 && D2===1'b1)
      // comb arc D1 --> X
      (D1 => X) = (1.0,1.0);
      
      if(D0===1'b1 && D2===1'b0)
      // comb arc D1 --> X
      (D1 => X) = (1.0,1.0);
      
      if(D0===1'b1 && D2===1'b1)
      // comb arc D1 --> X
      (D1 => X) = (1.0,1.0);
      
      ifnone
      // comb arc D1 --> X
      (D1 => X) = (1.0,1.0);
      
      if(D0===1'b0 && D1===1'b0 && S0===1'b0)
      // comb arc D2 --> X
      (D2 => X) = (1.0,1.0);
      
      if(D0===1'b0 && D1===1'b0 && S0===1'b1)
      // comb arc D2 --> X
      (D2 => X) = (1.0,1.0);
      
      if(D0===1'b0 && D1===1'b1 && S0===1'b0)
      // comb arc D2 --> X
      (D2 => X) = (1.0,1.0);
      
      if(D0===1'b0 && D1===1'b1 && S0===1'b1)
      // comb arc D2 --> X
      (D2 => X) = (1.0,1.0);
      
      if(D0===1'b1 && D1===1'b0 && S0===1'b0)
      // comb arc D2 --> X
      (D2 => X) = (1.0,1.0);
      
      if(D0===1'b1 && D1===1'b0 && S0===1'b1)
      // comb arc D2 --> X
      (D2 => X) = (1.0,1.0);
      
      if(D0===1'b1 && D1===1'b1 && S0===1'b0)
      // comb arc D2 --> X
      (D2 => X) = (1.0,1.0);
      
      if(D0===1'b1 && D1===1'b1 && S0===1'b1)
      // comb arc D2 --> X
      (D2 => X) = (1.0,1.0);
      
      ifnone
      // comb arc D2 --> X
      (D2 => X) = (1.0,1.0);
      
      if(D2===1'b0)
      // comb arc posedge S0 --> (X:S0)
      (posedge S0 => (X:S0)) = (1.0,1.0);
      
      if(D2===1'b0)
      // comb arc negedge S0 --> (X:S0)
      (negedge S0 => (X:S0)) = (1.0,1.0);
      
      if(D2===1'b1)
      // comb arc posedge S0 --> (X:S0)
      (posedge S0 => (X:S0)) = (1.0,1.0);
      
      if(D2===1'b1)
      // comb arc negedge S0 --> (X:S0)
      (negedge S0 => (X:S0)) = (1.0,1.0);
      
      ifnone
      // comb arc posedge S0 --> (X:S0)
      (posedge S0 => (X:S0)) = (1.0,1.0);
      
      ifnone
      // comb arc negedge S0 --> (X:S0)
      (negedge S0 => (X:S0)) = (1.0,1.0);
      
      if(D0===1'b0 && D1===1'b1 && S0===1'b1)
      // comb arc S1 --> X
      (S1 => X) = (1.0,1.0);
      
      if(D0===1'b1 && D1===1'b0 && S0===1'b0)
      // comb arc S1 --> X
      (S1 => X) = (1.0,1.0);
      
      if(D0===1'b1 && D1===1'b1 && S0===1'b0)
      // comb arc S1 --> X
      (S1 => X) = (1.0,1.0);
      
      if(D0===1'b1 && D1===1'b1 && S0===1'b1)
      // comb arc S1 --> X
      (S1 => X) = (1.0,1.0);
      
      ifnone
      // comb arc posedge S1 --> (X:S1)
      (posedge S1 => (X:S1)) = (1.0,1.0);
      
      ifnone
      // comb arc negedge S1 --> (X:S1)
      (negedge S1 => (X:S1)) = (1.0,1.0);
      
      if(D0===1'b0 && D1===1'b0 && S0===1'b0)
      // comb arc S1 --> X
      (S1 => X) = (1.0,1.0);
      
      if(D0===1'b0 && D1===1'b0 && S0===1'b1)
      // comb arc S1 --> X
      (S1 => X) = (1.0,1.0);
      
      if(D0===1'b0 && D1===1'b1 && S0===1'b0)
      // comb arc S1 --> X
      (S1 => X) = (1.0,1.0);
      
      if(D0===1'b1 && D1===1'b0 && S0===1'b1)
      // comb arc S1 --> X
      (S1 => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_MUX4_V1M_1( S1, D1, D0, D2, S0, D3, X );
input D0, D1, D2, D3, S0, S1;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_MUX4_V1M_1_func SAEDRVT14_MUX4_V1M_1_behav_inst(.S1(S1),.D1(D1),.D0(D0),.D2(D2),.S0(S0),.D3(D3),.X(X));
`else
   SAEDRVT14_MUX4_V1M_1_func SAEDRVT14_MUX4_V1M_1_inst(.S1(S1),.D1(D1),.D0(D0),.D2(D2),.S0(S0),.D3(D3),.X(X));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      if(D1===1'b0 && D2===1'b0 && D3===1'b0)
      // comb arc D0 --> X
      (D0 => X) = (1.0,1.0);
      
      if(D1===1'b0 && D2===1'b0 && D3===1'b1)
      // comb arc D0 --> X
      (D0 => X) = (1.0,1.0);
      
      if(D1===1'b0 && D2===1'b1 && D3===1'b0)
      // comb arc D0 --> X
      (D0 => X) = (1.0,1.0);
      
      if(D1===1'b0 && D2===1'b1 && D3===1'b1)
      // comb arc D0 --> X
      (D0 => X) = (1.0,1.0);
      
      if(D1===1'b1 && D2===1'b0 && D3===1'b0)
      // comb arc D0 --> X
      (D0 => X) = (1.0,1.0);
      
      if(D1===1'b1 && D2===1'b0 && D3===1'b1)
      // comb arc D0 --> X
      (D0 => X) = (1.0,1.0);
      
      if(D1===1'b1 && D2===1'b1 && D3===1'b0)
      // comb arc D0 --> X
      (D0 => X) = (1.0,1.0);
      
      if(D1===1'b1 && D2===1'b1 && D3===1'b1)
      // comb arc D0 --> X
      (D0 => X) = (1.0,1.0);
      
      ifnone
      // comb arc D0 --> X
      (D0 => X) = (1.0,1.0);
      
      if(D0===1'b0 && D2===1'b0 && D3===1'b0)
      // comb arc D1 --> X
      (D1 => X) = (1.0,1.0);
      
      if(D0===1'b0 && D2===1'b0 && D3===1'b1)
      // comb arc D1 --> X
      (D1 => X) = (1.0,1.0);
      
      if(D0===1'b0 && D2===1'b1 && D3===1'b0)
      // comb arc D1 --> X
      (D1 => X) = (1.0,1.0);
      
      if(D0===1'b0 && D2===1'b1 && D3===1'b1)
      // comb arc D1 --> X
      (D1 => X) = (1.0,1.0);
      
      if(D0===1'b1 && D2===1'b0 && D3===1'b0)
      // comb arc D1 --> X
      (D1 => X) = (1.0,1.0);
      
      if(D0===1'b1 && D2===1'b0 && D3===1'b1)
      // comb arc D1 --> X
      (D1 => X) = (1.0,1.0);
      
      if(D0===1'b1 && D2===1'b1 && D3===1'b0)
      // comb arc D1 --> X
      (D1 => X) = (1.0,1.0);
      
      if(D0===1'b1 && D2===1'b1 && D3===1'b1)
      // comb arc D1 --> X
      (D1 => X) = (1.0,1.0);
      
      ifnone
      // comb arc D1 --> X
      (D1 => X) = (1.0,1.0);
      
      if(D0===1'b0 && D1===1'b0 && D3===1'b0)
      // comb arc D2 --> X
      (D2 => X) = (1.0,1.0);
      
      if(D0===1'b0 && D1===1'b0 && D3===1'b1)
      // comb arc D2 --> X
      (D2 => X) = (1.0,1.0);
      
      if(D0===1'b0 && D1===1'b1 && D3===1'b0)
      // comb arc D2 --> X
      (D2 => X) = (1.0,1.0);
      
      if(D0===1'b0 && D1===1'b1 && D3===1'b1)
      // comb arc D2 --> X
      (D2 => X) = (1.0,1.0);
      
      if(D0===1'b1 && D1===1'b0 && D3===1'b0)
      // comb arc D2 --> X
      (D2 => X) = (1.0,1.0);
      
      if(D0===1'b1 && D1===1'b0 && D3===1'b1)
      // comb arc D2 --> X
      (D2 => X) = (1.0,1.0);
      
      if(D0===1'b1 && D1===1'b1 && D3===1'b0)
      // comb arc D2 --> X
      (D2 => X) = (1.0,1.0);
      
      if(D0===1'b1 && D1===1'b1 && D3===1'b1)
      // comb arc D2 --> X
      (D2 => X) = (1.0,1.0);
      
      ifnone
      // comb arc D2 --> X
      (D2 => X) = (1.0,1.0);
      
      if(D0===1'b0 && D1===1'b0 && D2===1'b0)
      // comb arc D3 --> X
      (D3 => X) = (1.0,1.0);
      
      if(D0===1'b0 && D1===1'b0 && D2===1'b1)
      // comb arc D3 --> X
      (D3 => X) = (1.0,1.0);
      
      if(D0===1'b0 && D1===1'b1 && D2===1'b0)
      // comb arc D3 --> X
      (D3 => X) = (1.0,1.0);
      
      if(D0===1'b0 && D1===1'b1 && D2===1'b1)
      // comb arc D3 --> X
      (D3 => X) = (1.0,1.0);
      
      if(D0===1'b1 && D1===1'b0 && D2===1'b0)
      // comb arc D3 --> X
      (D3 => X) = (1.0,1.0);
      
      if(D0===1'b1 && D1===1'b0 && D2===1'b1)
      // comb arc D3 --> X
      (D3 => X) = (1.0,1.0);
      
      if(D0===1'b1 && D1===1'b1 && D2===1'b0)
      // comb arc D3 --> X
      (D3 => X) = (1.0,1.0);
      
      if(D0===1'b1 && D1===1'b1 && D2===1'b1)
      // comb arc D3 --> X
      (D3 => X) = (1.0,1.0);
      
      ifnone
      // comb arc D3 --> X
      (D3 => X) = (1.0,1.0);
      
      if(D0===1'b0 && D1===1'b0 && D2===1'b1 && D3===1'b0 && S1===1'b1)
      // comb arc S0 --> X
      (S0 => X) = (1.0,1.0);
      
      if(D0===1'b0 && D1===1'b1 && D2===1'b1 && D3===1'b0 && S1===1'b1)
      // comb arc S0 --> X
      (S0 => X) = (1.0,1.0);
      
      if(D0===1'b1 && D1===1'b0 && D2===1'b0 && D3===1'b0 && S1===1'b0)
      // comb arc S0 --> X
      (S0 => X) = (1.0,1.0);
      
      if(D0===1'b1 && D1===1'b0 && D2===1'b0 && D3===1'b1 && S1===1'b0)
      // comb arc S0 --> X
      (S0 => X) = (1.0,1.0);
      
      if(D0===1'b1 && D1===1'b0 && D2===1'b1 && D3===1'b0 && S1===1'b0)
      // comb arc S0 --> X
      (S0 => X) = (1.0,1.0);
      
      if(D0===1'b1 && D1===1'b0 && D2===1'b1 && D3===1'b0 && S1===1'b1)
      // comb arc S0 --> X
      (S0 => X) = (1.0,1.0);
      
      if(D0===1'b1 && D1===1'b0 && D2===1'b1 && D3===1'b1 && S1===1'b0)
      // comb arc S0 --> X
      (S0 => X) = (1.0,1.0);
      
      if(D0===1'b1 && D1===1'b1 && D2===1'b1 && D3===1'b0 && S1===1'b1)
      // comb arc S0 --> X
      (S0 => X) = (1.0,1.0);
      
      ifnone
      // comb arc posedge S0 --> (X:S0)
      (posedge S0 => (X:S0)) = (1.0,1.0);
      
      ifnone
      // comb arc negedge S0 --> (X:S0)
      (negedge S0 => (X:S0)) = (1.0,1.0);
      
      if(D0===1'b0 && D1===1'b0 && D2===1'b0 && D3===1'b1 && S1===1'b1)
      // comb arc S0 --> X
      (S0 => X) = (1.0,1.0);
      
      if(D0===1'b0 && D1===1'b1 && D2===1'b0 && D3===1'b0 && S1===1'b0)
      // comb arc S0 --> X
      (S0 => X) = (1.0,1.0);
      
      if(D0===1'b0 && D1===1'b1 && D2===1'b0 && D3===1'b1 && S1===1'b0)
      // comb arc S0 --> X
      (S0 => X) = (1.0,1.0);
      
      if(D0===1'b0 && D1===1'b1 && D2===1'b0 && D3===1'b1 && S1===1'b1)
      // comb arc S0 --> X
      (S0 => X) = (1.0,1.0);
      
      if(D0===1'b0 && D1===1'b1 && D2===1'b1 && D3===1'b0 && S1===1'b0)
      // comb arc S0 --> X
      (S0 => X) = (1.0,1.0);
      
      if(D0===1'b0 && D1===1'b1 && D2===1'b1 && D3===1'b1 && S1===1'b0)
      // comb arc S0 --> X
      (S0 => X) = (1.0,1.0);
      
      if(D0===1'b1 && D1===1'b0 && D2===1'b0 && D3===1'b1 && S1===1'b1)
      // comb arc S0 --> X
      (S0 => X) = (1.0,1.0);
      
      if(D0===1'b1 && D1===1'b1 && D2===1'b0 && D3===1'b1 && S1===1'b1)
      // comb arc S0 --> X
      (S0 => X) = (1.0,1.0);
      
      if(D0===1'b0 && D1===1'b1 && D2===1'b0 && D3===1'b0 && S0===1'b1)
      // comb arc S1 --> X
      (S1 => X) = (1.0,1.0);
      
      if(D0===1'b0 && D1===1'b1 && D2===1'b1 && D3===1'b0 && S0===1'b1)
      // comb arc S1 --> X
      (S1 => X) = (1.0,1.0);
      
      if(D0===1'b1 && D1===1'b0 && D2===1'b0 && D3===1'b0 && S0===1'b0)
      // comb arc S1 --> X
      (S1 => X) = (1.0,1.0);
      
      if(D0===1'b1 && D1===1'b0 && D2===1'b0 && D3===1'b1 && S0===1'b0)
      // comb arc S1 --> X
      (S1 => X) = (1.0,1.0);
      
      if(D0===1'b1 && D1===1'b1 && D2===1'b0 && D3===1'b0 && S0===1'b0)
      // comb arc S1 --> X
      (S1 => X) = (1.0,1.0);
      
      if(D0===1'b1 && D1===1'b1 && D2===1'b0 && D3===1'b0 && S0===1'b1)
      // comb arc S1 --> X
      (S1 => X) = (1.0,1.0);
      
      if(D0===1'b1 && D1===1'b1 && D2===1'b0 && D3===1'b1 && S0===1'b0)
      // comb arc S1 --> X
      (S1 => X) = (1.0,1.0);
      
      if(D0===1'b1 && D1===1'b1 && D2===1'b1 && D3===1'b0 && S0===1'b1)
      // comb arc S1 --> X
      (S1 => X) = (1.0,1.0);
      
      ifnone
      // comb arc posedge S1 --> (X:S1)
      (posedge S1 => (X:S1)) = (1.0,1.0);
      
      ifnone
      // comb arc negedge S1 --> (X:S1)
      (negedge S1 => (X:S1)) = (1.0,1.0);
      
      if(D0===1'b0 && D1===1'b0 && D2===1'b0 && D3===1'b1 && S0===1'b1)
      // comb arc S1 --> X
      (S1 => X) = (1.0,1.0);
      
      if(D0===1'b0 && D1===1'b0 && D2===1'b1 && D3===1'b0 && S0===1'b0)
      // comb arc S1 --> X
      (S1 => X) = (1.0,1.0);
      
      if(D0===1'b0 && D1===1'b0 && D2===1'b1 && D3===1'b1 && S0===1'b0)
      // comb arc S1 --> X
      (S1 => X) = (1.0,1.0);
      
      if(D0===1'b0 && D1===1'b0 && D2===1'b1 && D3===1'b1 && S0===1'b1)
      // comb arc S1 --> X
      (S1 => X) = (1.0,1.0);
      
      if(D0===1'b0 && D1===1'b1 && D2===1'b1 && D3===1'b0 && S0===1'b0)
      // comb arc S1 --> X
      (S1 => X) = (1.0,1.0);
      
      if(D0===1'b0 && D1===1'b1 && D2===1'b1 && D3===1'b1 && S0===1'b0)
      // comb arc S1 --> X
      (S1 => X) = (1.0,1.0);
      
      if(D0===1'b1 && D1===1'b0 && D2===1'b0 && D3===1'b1 && S0===1'b1)
      // comb arc S1 --> X
      (S1 => X) = (1.0,1.0);
      
      if(D0===1'b1 && D1===1'b0 && D2===1'b1 && D3===1'b1 && S0===1'b1)
      // comb arc S1 --> X
      (S1 => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_MUX4_V1M_2( X, D0, D1, D2, D3, S0, S1 );
input D0, D1, D2, D3, S0, S1;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_MUX4_V1M_2_func SAEDRVT14_MUX4_V1M_2_behav_inst(.X(X),.D0(D0),.D1(D1),.D2(D2),.D3(D3),.S0(S0),.S1(S1));
`else
   SAEDRVT14_MUX4_V1M_2_func SAEDRVT14_MUX4_V1M_2_inst(.X(X),.D0(D0),.D1(D1),.D2(D2),.D3(D3),.S0(S0),.S1(S1));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      if(D1===1'b0 && D2===1'b0 && D3===1'b0)
      // comb arc D0 --> X
      (D0 => X) = (1.0,1.0);
      
      if(D1===1'b0 && D2===1'b0 && D3===1'b1)
      // comb arc D0 --> X
      (D0 => X) = (1.0,1.0);
      
      if(D1===1'b0 && D2===1'b1 && D3===1'b0)
      // comb arc D0 --> X
      (D0 => X) = (1.0,1.0);
      
      if(D1===1'b0 && D2===1'b1 && D3===1'b1)
      // comb arc D0 --> X
      (D0 => X) = (1.0,1.0);
      
      if(D1===1'b1 && D2===1'b0 && D3===1'b0)
      // comb arc D0 --> X
      (D0 => X) = (1.0,1.0);
      
      if(D1===1'b1 && D2===1'b0 && D3===1'b1)
      // comb arc D0 --> X
      (D0 => X) = (1.0,1.0);
      
      if(D1===1'b1 && D2===1'b1 && D3===1'b0)
      // comb arc D0 --> X
      (D0 => X) = (1.0,1.0);
      
      if(D1===1'b1 && D2===1'b1 && D3===1'b1)
      // comb arc D0 --> X
      (D0 => X) = (1.0,1.0);
      
      ifnone
      // comb arc D0 --> X
      (D0 => X) = (1.0,1.0);
      
      if(D0===1'b0 && D2===1'b0 && D3===1'b0)
      // comb arc D1 --> X
      (D1 => X) = (1.0,1.0);
      
      if(D0===1'b0 && D2===1'b0 && D3===1'b1)
      // comb arc D1 --> X
      (D1 => X) = (1.0,1.0);
      
      if(D0===1'b0 && D2===1'b1 && D3===1'b0)
      // comb arc D1 --> X
      (D1 => X) = (1.0,1.0);
      
      if(D0===1'b0 && D2===1'b1 && D3===1'b1)
      // comb arc D1 --> X
      (D1 => X) = (1.0,1.0);
      
      if(D0===1'b1 && D2===1'b0 && D3===1'b0)
      // comb arc D1 --> X
      (D1 => X) = (1.0,1.0);
      
      if(D0===1'b1 && D2===1'b0 && D3===1'b1)
      // comb arc D1 --> X
      (D1 => X) = (1.0,1.0);
      
      if(D0===1'b1 && D2===1'b1 && D3===1'b0)
      // comb arc D1 --> X
      (D1 => X) = (1.0,1.0);
      
      if(D0===1'b1 && D2===1'b1 && D3===1'b1)
      // comb arc D1 --> X
      (D1 => X) = (1.0,1.0);
      
      ifnone
      // comb arc D1 --> X
      (D1 => X) = (1.0,1.0);
      
      if(D0===1'b0 && D1===1'b0 && D3===1'b0)
      // comb arc D2 --> X
      (D2 => X) = (1.0,1.0);
      
      if(D0===1'b0 && D1===1'b0 && D3===1'b1)
      // comb arc D2 --> X
      (D2 => X) = (1.0,1.0);
      
      if(D0===1'b0 && D1===1'b1 && D3===1'b0)
      // comb arc D2 --> X
      (D2 => X) = (1.0,1.0);
      
      if(D0===1'b0 && D1===1'b1 && D3===1'b1)
      // comb arc D2 --> X
      (D2 => X) = (1.0,1.0);
      
      if(D0===1'b1 && D1===1'b0 && D3===1'b0)
      // comb arc D2 --> X
      (D2 => X) = (1.0,1.0);
      
      if(D0===1'b1 && D1===1'b0 && D3===1'b1)
      // comb arc D2 --> X
      (D2 => X) = (1.0,1.0);
      
      if(D0===1'b1 && D1===1'b1 && D3===1'b0)
      // comb arc D2 --> X
      (D2 => X) = (1.0,1.0);
      
      if(D0===1'b1 && D1===1'b1 && D3===1'b1)
      // comb arc D2 --> X
      (D2 => X) = (1.0,1.0);
      
      ifnone
      // comb arc D2 --> X
      (D2 => X) = (1.0,1.0);
      
      if(D0===1'b0 && D1===1'b0 && D2===1'b0)
      // comb arc D3 --> X
      (D3 => X) = (1.0,1.0);
      
      if(D0===1'b0 && D1===1'b0 && D2===1'b1)
      // comb arc D3 --> X
      (D3 => X) = (1.0,1.0);
      
      if(D0===1'b0 && D1===1'b1 && D2===1'b0)
      // comb arc D3 --> X
      (D3 => X) = (1.0,1.0);
      
      if(D0===1'b0 && D1===1'b1 && D2===1'b1)
      // comb arc D3 --> X
      (D3 => X) = (1.0,1.0);
      
      if(D0===1'b1 && D1===1'b0 && D2===1'b0)
      // comb arc D3 --> X
      (D3 => X) = (1.0,1.0);
      
      if(D0===1'b1 && D1===1'b0 && D2===1'b1)
      // comb arc D3 --> X
      (D3 => X) = (1.0,1.0);
      
      if(D0===1'b1 && D1===1'b1 && D2===1'b0)
      // comb arc D3 --> X
      (D3 => X) = (1.0,1.0);
      
      if(D0===1'b1 && D1===1'b1 && D2===1'b1)
      // comb arc D3 --> X
      (D3 => X) = (1.0,1.0);
      
      ifnone
      // comb arc D3 --> X
      (D3 => X) = (1.0,1.0);
      
      if(D0===1'b0 && D1===1'b0 && D2===1'b1 && D3===1'b0 && S1===1'b1)
      // comb arc S0 --> X
      (S0 => X) = (1.0,1.0);
      
      if(D0===1'b0 && D1===1'b1 && D2===1'b1 && D3===1'b0 && S1===1'b1)
      // comb arc S0 --> X
      (S0 => X) = (1.0,1.0);
      
      if(D0===1'b1 && D1===1'b0 && D2===1'b0 && D3===1'b0 && S1===1'b0)
      // comb arc S0 --> X
      (S0 => X) = (1.0,1.0);
      
      if(D0===1'b1 && D1===1'b0 && D2===1'b0 && D3===1'b1 && S1===1'b0)
      // comb arc S0 --> X
      (S0 => X) = (1.0,1.0);
      
      if(D0===1'b1 && D1===1'b0 && D2===1'b1 && D3===1'b0 && S1===1'b0)
      // comb arc S0 --> X
      (S0 => X) = (1.0,1.0);
      
      if(D0===1'b1 && D1===1'b0 && D2===1'b1 && D3===1'b0 && S1===1'b1)
      // comb arc S0 --> X
      (S0 => X) = (1.0,1.0);
      
      if(D0===1'b1 && D1===1'b0 && D2===1'b1 && D3===1'b1 && S1===1'b0)
      // comb arc S0 --> X
      (S0 => X) = (1.0,1.0);
      
      if(D0===1'b1 && D1===1'b1 && D2===1'b1 && D3===1'b0 && S1===1'b1)
      // comb arc S0 --> X
      (S0 => X) = (1.0,1.0);
      
      ifnone
      // comb arc posedge S0 --> (X:S0)
      (posedge S0 => (X:S0)) = (1.0,1.0);
      
      ifnone
      // comb arc negedge S0 --> (X:S0)
      (negedge S0 => (X:S0)) = (1.0,1.0);
      
      if(D0===1'b0 && D1===1'b0 && D2===1'b0 && D3===1'b1 && S1===1'b1)
      // comb arc S0 --> X
      (S0 => X) = (1.0,1.0);
      
      if(D0===1'b0 && D1===1'b1 && D2===1'b0 && D3===1'b0 && S1===1'b0)
      // comb arc S0 --> X
      (S0 => X) = (1.0,1.0);
      
      if(D0===1'b0 && D1===1'b1 && D2===1'b0 && D3===1'b1 && S1===1'b0)
      // comb arc S0 --> X
      (S0 => X) = (1.0,1.0);
      
      if(D0===1'b0 && D1===1'b1 && D2===1'b0 && D3===1'b1 && S1===1'b1)
      // comb arc S0 --> X
      (S0 => X) = (1.0,1.0);
      
      if(D0===1'b0 && D1===1'b1 && D2===1'b1 && D3===1'b0 && S1===1'b0)
      // comb arc S0 --> X
      (S0 => X) = (1.0,1.0);
      
      if(D0===1'b0 && D1===1'b1 && D2===1'b1 && D3===1'b1 && S1===1'b0)
      // comb arc S0 --> X
      (S0 => X) = (1.0,1.0);
      
      if(D0===1'b1 && D1===1'b0 && D2===1'b0 && D3===1'b1 && S1===1'b1)
      // comb arc S0 --> X
      (S0 => X) = (1.0,1.0);
      
      if(D0===1'b1 && D1===1'b1 && D2===1'b0 && D3===1'b1 && S1===1'b1)
      // comb arc S0 --> X
      (S0 => X) = (1.0,1.0);
      
      if(D0===1'b0 && D1===1'b1 && D2===1'b0 && D3===1'b0 && S0===1'b1)
      // comb arc S1 --> X
      (S1 => X) = (1.0,1.0);
      
      if(D0===1'b0 && D1===1'b1 && D2===1'b1 && D3===1'b0 && S0===1'b1)
      // comb arc S1 --> X
      (S1 => X) = (1.0,1.0);
      
      if(D0===1'b1 && D1===1'b0 && D2===1'b0 && D3===1'b0 && S0===1'b0)
      // comb arc S1 --> X
      (S1 => X) = (1.0,1.0);
      
      if(D0===1'b1 && D1===1'b0 && D2===1'b0 && D3===1'b1 && S0===1'b0)
      // comb arc S1 --> X
      (S1 => X) = (1.0,1.0);
      
      if(D0===1'b1 && D1===1'b1 && D2===1'b0 && D3===1'b0 && S0===1'b0)
      // comb arc S1 --> X
      (S1 => X) = (1.0,1.0);
      
      if(D0===1'b1 && D1===1'b1 && D2===1'b0 && D3===1'b0 && S0===1'b1)
      // comb arc S1 --> X
      (S1 => X) = (1.0,1.0);
      
      if(D0===1'b1 && D1===1'b1 && D2===1'b0 && D3===1'b1 && S0===1'b0)
      // comb arc S1 --> X
      (S1 => X) = (1.0,1.0);
      
      if(D0===1'b1 && D1===1'b1 && D2===1'b1 && D3===1'b0 && S0===1'b1)
      // comb arc S1 --> X
      (S1 => X) = (1.0,1.0);
      
      ifnone
      // comb arc posedge S1 --> (X:S1)
      (posedge S1 => (X:S1)) = (1.0,1.0);
      
      ifnone
      // comb arc negedge S1 --> (X:S1)
      (negedge S1 => (X:S1)) = (1.0,1.0);
      
      if(D0===1'b0 && D1===1'b0 && D2===1'b0 && D3===1'b1 && S0===1'b1)
      // comb arc S1 --> X
      (S1 => X) = (1.0,1.0);
      
      if(D0===1'b0 && D1===1'b0 && D2===1'b1 && D3===1'b0 && S0===1'b0)
      // comb arc S1 --> X
      (S1 => X) = (1.0,1.0);
      
      if(D0===1'b0 && D1===1'b0 && D2===1'b1 && D3===1'b1 && S0===1'b0)
      // comb arc S1 --> X
      (S1 => X) = (1.0,1.0);
      
      if(D0===1'b0 && D1===1'b0 && D2===1'b1 && D3===1'b1 && S0===1'b1)
      // comb arc S1 --> X
      (S1 => X) = (1.0,1.0);
      
      if(D0===1'b0 && D1===1'b1 && D2===1'b1 && D3===1'b0 && S0===1'b0)
      // comb arc S1 --> X
      (S1 => X) = (1.0,1.0);
      
      if(D0===1'b0 && D1===1'b1 && D2===1'b1 && D3===1'b1 && S0===1'b0)
      // comb arc S1 --> X
      (S1 => X) = (1.0,1.0);
      
      if(D0===1'b1 && D1===1'b0 && D2===1'b0 && D3===1'b1 && S0===1'b1)
      // comb arc S1 --> X
      (S1 => X) = (1.0,1.0);
      
      if(D0===1'b1 && D1===1'b0 && D2===1'b1 && D3===1'b1 && S0===1'b1)
      // comb arc S1 --> X
      (S1 => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_MUX4_V1M_4( X, D0, D1, D2, D3, S0, S1 );
input D0, D1, D2, D3, S0, S1;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_MUX4_V1M_4_func SAEDRVT14_MUX4_V1M_4_behav_inst(.X(X),.D0(D0),.D1(D1),.D2(D2),.D3(D3),.S0(S0),.S1(S1));
`else
   SAEDRVT14_MUX4_V1M_4_func SAEDRVT14_MUX4_V1M_4_inst(.X(X),.D0(D0),.D1(D1),.D2(D2),.D3(D3),.S0(S0),.S1(S1));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      if(D1===1'b0 && D2===1'b0 && D3===1'b0)
      // comb arc D0 --> X
      (D0 => X) = (1.0,1.0);
      
      if(D1===1'b0 && D2===1'b0 && D3===1'b1)
      // comb arc D0 --> X
      (D0 => X) = (1.0,1.0);
      
      if(D1===1'b0 && D2===1'b1 && D3===1'b0)
      // comb arc D0 --> X
      (D0 => X) = (1.0,1.0);
      
      if(D1===1'b0 && D2===1'b1 && D3===1'b1)
      // comb arc D0 --> X
      (D0 => X) = (1.0,1.0);
      
      if(D1===1'b1 && D2===1'b0 && D3===1'b0)
      // comb arc D0 --> X
      (D0 => X) = (1.0,1.0);
      
      if(D1===1'b1 && D2===1'b0 && D3===1'b1)
      // comb arc D0 --> X
      (D0 => X) = (1.0,1.0);
      
      if(D1===1'b1 && D2===1'b1 && D3===1'b0)
      // comb arc D0 --> X
      (D0 => X) = (1.0,1.0);
      
      if(D1===1'b1 && D2===1'b1 && D3===1'b1)
      // comb arc D0 --> X
      (D0 => X) = (1.0,1.0);
      
      ifnone
      // comb arc D0 --> X
      (D0 => X) = (1.0,1.0);
      
      if(D0===1'b0 && D2===1'b0 && D3===1'b0)
      // comb arc D1 --> X
      (D1 => X) = (1.0,1.0);
      
      if(D0===1'b0 && D2===1'b0 && D3===1'b1)
      // comb arc D1 --> X
      (D1 => X) = (1.0,1.0);
      
      if(D0===1'b0 && D2===1'b1 && D3===1'b0)
      // comb arc D1 --> X
      (D1 => X) = (1.0,1.0);
      
      if(D0===1'b0 && D2===1'b1 && D3===1'b1)
      // comb arc D1 --> X
      (D1 => X) = (1.0,1.0);
      
      if(D0===1'b1 && D2===1'b0 && D3===1'b0)
      // comb arc D1 --> X
      (D1 => X) = (1.0,1.0);
      
      if(D0===1'b1 && D2===1'b0 && D3===1'b1)
      // comb arc D1 --> X
      (D1 => X) = (1.0,1.0);
      
      if(D0===1'b1 && D2===1'b1 && D3===1'b0)
      // comb arc D1 --> X
      (D1 => X) = (1.0,1.0);
      
      if(D0===1'b1 && D2===1'b1 && D3===1'b1)
      // comb arc D1 --> X
      (D1 => X) = (1.0,1.0);
      
      ifnone
      // comb arc D1 --> X
      (D1 => X) = (1.0,1.0);
      
      if(D0===1'b0 && D1===1'b0 && D3===1'b0)
      // comb arc D2 --> X
      (D2 => X) = (1.0,1.0);
      
      if(D0===1'b0 && D1===1'b0 && D3===1'b1)
      // comb arc D2 --> X
      (D2 => X) = (1.0,1.0);
      
      if(D0===1'b0 && D1===1'b1 && D3===1'b0)
      // comb arc D2 --> X
      (D2 => X) = (1.0,1.0);
      
      if(D0===1'b0 && D1===1'b1 && D3===1'b1)
      // comb arc D2 --> X
      (D2 => X) = (1.0,1.0);
      
      if(D0===1'b1 && D1===1'b0 && D3===1'b0)
      // comb arc D2 --> X
      (D2 => X) = (1.0,1.0);
      
      if(D0===1'b1 && D1===1'b0 && D3===1'b1)
      // comb arc D2 --> X
      (D2 => X) = (1.0,1.0);
      
      if(D0===1'b1 && D1===1'b1 && D3===1'b0)
      // comb arc D2 --> X
      (D2 => X) = (1.0,1.0);
      
      if(D0===1'b1 && D1===1'b1 && D3===1'b1)
      // comb arc D2 --> X
      (D2 => X) = (1.0,1.0);
      
      ifnone
      // comb arc D2 --> X
      (D2 => X) = (1.0,1.0);
      
      if(D0===1'b0 && D1===1'b0 && D2===1'b0)
      // comb arc D3 --> X
      (D3 => X) = (1.0,1.0);
      
      if(D0===1'b0 && D1===1'b0 && D2===1'b1)
      // comb arc D3 --> X
      (D3 => X) = (1.0,1.0);
      
      if(D0===1'b0 && D1===1'b1 && D2===1'b0)
      // comb arc D3 --> X
      (D3 => X) = (1.0,1.0);
      
      if(D0===1'b0 && D1===1'b1 && D2===1'b1)
      // comb arc D3 --> X
      (D3 => X) = (1.0,1.0);
      
      if(D0===1'b1 && D1===1'b0 && D2===1'b0)
      // comb arc D3 --> X
      (D3 => X) = (1.0,1.0);
      
      if(D0===1'b1 && D1===1'b0 && D2===1'b1)
      // comb arc D3 --> X
      (D3 => X) = (1.0,1.0);
      
      if(D0===1'b1 && D1===1'b1 && D2===1'b0)
      // comb arc D3 --> X
      (D3 => X) = (1.0,1.0);
      
      if(D0===1'b1 && D1===1'b1 && D2===1'b1)
      // comb arc D3 --> X
      (D3 => X) = (1.0,1.0);
      
      ifnone
      // comb arc D3 --> X
      (D3 => X) = (1.0,1.0);
      
      if(D0===1'b0 && D1===1'b0 && D2===1'b1 && D3===1'b0 && S1===1'b1)
      // comb arc S0 --> X
      (S0 => X) = (1.0,1.0);
      
      if(D0===1'b0 && D1===1'b1 && D2===1'b1 && D3===1'b0 && S1===1'b1)
      // comb arc S0 --> X
      (S0 => X) = (1.0,1.0);
      
      if(D0===1'b1 && D1===1'b0 && D2===1'b0 && D3===1'b0 && S1===1'b0)
      // comb arc S0 --> X
      (S0 => X) = (1.0,1.0);
      
      if(D0===1'b1 && D1===1'b0 && D2===1'b0 && D3===1'b1 && S1===1'b0)
      // comb arc S0 --> X
      (S0 => X) = (1.0,1.0);
      
      if(D0===1'b1 && D1===1'b0 && D2===1'b1 && D3===1'b0 && S1===1'b0)
      // comb arc S0 --> X
      (S0 => X) = (1.0,1.0);
      
      if(D0===1'b1 && D1===1'b0 && D2===1'b1 && D3===1'b0 && S1===1'b1)
      // comb arc S0 --> X
      (S0 => X) = (1.0,1.0);
      
      if(D0===1'b1 && D1===1'b0 && D2===1'b1 && D3===1'b1 && S1===1'b0)
      // comb arc S0 --> X
      (S0 => X) = (1.0,1.0);
      
      if(D0===1'b1 && D1===1'b1 && D2===1'b1 && D3===1'b0 && S1===1'b1)
      // comb arc S0 --> X
      (S0 => X) = (1.0,1.0);
      
      ifnone
      // comb arc posedge S0 --> (X:S0)
      (posedge S0 => (X:S0)) = (1.0,1.0);
      
      ifnone
      // comb arc negedge S0 --> (X:S0)
      (negedge S0 => (X:S0)) = (1.0,1.0);
      
      if(D0===1'b0 && D1===1'b0 && D2===1'b0 && D3===1'b1 && S1===1'b1)
      // comb arc S0 --> X
      (S0 => X) = (1.0,1.0);
      
      if(D0===1'b0 && D1===1'b1 && D2===1'b0 && D3===1'b0 && S1===1'b0)
      // comb arc S0 --> X
      (S0 => X) = (1.0,1.0);
      
      if(D0===1'b0 && D1===1'b1 && D2===1'b0 && D3===1'b1 && S1===1'b0)
      // comb arc S0 --> X
      (S0 => X) = (1.0,1.0);
      
      if(D0===1'b0 && D1===1'b1 && D2===1'b0 && D3===1'b1 && S1===1'b1)
      // comb arc S0 --> X
      (S0 => X) = (1.0,1.0);
      
      if(D0===1'b0 && D1===1'b1 && D2===1'b1 && D3===1'b0 && S1===1'b0)
      // comb arc S0 --> X
      (S0 => X) = (1.0,1.0);
      
      if(D0===1'b0 && D1===1'b1 && D2===1'b1 && D3===1'b1 && S1===1'b0)
      // comb arc S0 --> X
      (S0 => X) = (1.0,1.0);
      
      if(D0===1'b1 && D1===1'b0 && D2===1'b0 && D3===1'b1 && S1===1'b1)
      // comb arc S0 --> X
      (S0 => X) = (1.0,1.0);
      
      if(D0===1'b1 && D1===1'b1 && D2===1'b0 && D3===1'b1 && S1===1'b1)
      // comb arc S0 --> X
      (S0 => X) = (1.0,1.0);
      
      if(D0===1'b0 && D1===1'b1 && D2===1'b0 && D3===1'b0 && S0===1'b1)
      // comb arc S1 --> X
      (S1 => X) = (1.0,1.0);
      
      if(D0===1'b0 && D1===1'b1 && D2===1'b1 && D3===1'b0 && S0===1'b1)
      // comb arc S1 --> X
      (S1 => X) = (1.0,1.0);
      
      if(D0===1'b1 && D1===1'b0 && D2===1'b0 && D3===1'b0 && S0===1'b0)
      // comb arc S1 --> X
      (S1 => X) = (1.0,1.0);
      
      if(D0===1'b1 && D1===1'b0 && D2===1'b0 && D3===1'b1 && S0===1'b0)
      // comb arc S1 --> X
      (S1 => X) = (1.0,1.0);
      
      if(D0===1'b1 && D1===1'b1 && D2===1'b0 && D3===1'b0 && S0===1'b0)
      // comb arc S1 --> X
      (S1 => X) = (1.0,1.0);
      
      if(D0===1'b1 && D1===1'b1 && D2===1'b0 && D3===1'b0 && S0===1'b1)
      // comb arc S1 --> X
      (S1 => X) = (1.0,1.0);
      
      if(D0===1'b1 && D1===1'b1 && D2===1'b0 && D3===1'b1 && S0===1'b0)
      // comb arc S1 --> X
      (S1 => X) = (1.0,1.0);
      
      if(D0===1'b1 && D1===1'b1 && D2===1'b1 && D3===1'b0 && S0===1'b1)
      // comb arc S1 --> X
      (S1 => X) = (1.0,1.0);
      
      ifnone
      // comb arc posedge S1 --> (X:S1)
      (posedge S1 => (X:S1)) = (1.0,1.0);
      
      ifnone
      // comb arc negedge S1 --> (X:S1)
      (negedge S1 => (X:S1)) = (1.0,1.0);
      
      if(D0===1'b0 && D1===1'b0 && D2===1'b0 && D3===1'b1 && S0===1'b1)
      // comb arc S1 --> X
      (S1 => X) = (1.0,1.0);
      
      if(D0===1'b0 && D1===1'b0 && D2===1'b1 && D3===1'b0 && S0===1'b0)
      // comb arc S1 --> X
      (S1 => X) = (1.0,1.0);
      
      if(D0===1'b0 && D1===1'b0 && D2===1'b1 && D3===1'b1 && S0===1'b0)
      // comb arc S1 --> X
      (S1 => X) = (1.0,1.0);
      
      if(D0===1'b0 && D1===1'b0 && D2===1'b1 && D3===1'b1 && S0===1'b1)
      // comb arc S1 --> X
      (S1 => X) = (1.0,1.0);
      
      if(D0===1'b0 && D1===1'b1 && D2===1'b1 && D3===1'b0 && S0===1'b0)
      // comb arc S1 --> X
      (S1 => X) = (1.0,1.0);
      
      if(D0===1'b0 && D1===1'b1 && D2===1'b1 && D3===1'b1 && S0===1'b0)
      // comb arc S1 --> X
      (S1 => X) = (1.0,1.0);
      
      if(D0===1'b1 && D1===1'b0 && D2===1'b0 && D3===1'b1 && S0===1'b1)
      // comb arc S1 --> X
      (S1 => X) = (1.0,1.0);
      
      if(D0===1'b1 && D1===1'b0 && D2===1'b1 && D3===1'b1 && S0===1'b1)
      // comb arc S1 --> X
      (S1 => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_MUX4_V1U_0P5( X, D0, D1, D2, D3, S0, S1 );
input D0, D1, D2, D3, S0, S1;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_MUX4_V1U_0P5_func SAEDRVT14_MUX4_V1U_0P5_behav_inst(.X(X),.D0(D0),.D1(D1),.D2(D2),.D3(D3),.S0(S0),.S1(S1));
`else
   SAEDRVT14_MUX4_V1U_0P5_func SAEDRVT14_MUX4_V1U_0P5_inst(.X(X),.D0(D0),.D1(D1),.D2(D2),.D3(D3),.S0(S0),.S1(S1));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      if(D1===1'b0 && D2===1'b0 && D3===1'b0)
      // comb arc D0 --> X
      (D0 => X) = (1.0,1.0);
      
      if(D1===1'b0 && D2===1'b0 && D3===1'b1)
      // comb arc D0 --> X
      (D0 => X) = (1.0,1.0);
      
      if(D1===1'b0 && D2===1'b1 && D3===1'b0)
      // comb arc D0 --> X
      (D0 => X) = (1.0,1.0);
      
      if(D1===1'b0 && D2===1'b1 && D3===1'b1)
      // comb arc D0 --> X
      (D0 => X) = (1.0,1.0);
      
      if(D1===1'b1 && D2===1'b0 && D3===1'b0)
      // comb arc D0 --> X
      (D0 => X) = (1.0,1.0);
      
      if(D1===1'b1 && D2===1'b0 && D3===1'b1)
      // comb arc D0 --> X
      (D0 => X) = (1.0,1.0);
      
      if(D1===1'b1 && D2===1'b1 && D3===1'b0)
      // comb arc D0 --> X
      (D0 => X) = (1.0,1.0);
      
      if(D1===1'b1 && D2===1'b1 && D3===1'b1)
      // comb arc D0 --> X
      (D0 => X) = (1.0,1.0);
      
      ifnone
      // comb arc D0 --> X
      (D0 => X) = (1.0,1.0);
      
      if(D0===1'b0 && D2===1'b0 && D3===1'b0)
      // comb arc D1 --> X
      (D1 => X) = (1.0,1.0);
      
      if(D0===1'b0 && D2===1'b0 && D3===1'b1)
      // comb arc D1 --> X
      (D1 => X) = (1.0,1.0);
      
      if(D0===1'b0 && D2===1'b1 && D3===1'b0)
      // comb arc D1 --> X
      (D1 => X) = (1.0,1.0);
      
      if(D0===1'b0 && D2===1'b1 && D3===1'b1)
      // comb arc D1 --> X
      (D1 => X) = (1.0,1.0);
      
      if(D0===1'b1 && D2===1'b0 && D3===1'b0)
      // comb arc D1 --> X
      (D1 => X) = (1.0,1.0);
      
      if(D0===1'b1 && D2===1'b0 && D3===1'b1)
      // comb arc D1 --> X
      (D1 => X) = (1.0,1.0);
      
      if(D0===1'b1 && D2===1'b1 && D3===1'b0)
      // comb arc D1 --> X
      (D1 => X) = (1.0,1.0);
      
      if(D0===1'b1 && D2===1'b1 && D3===1'b1)
      // comb arc D1 --> X
      (D1 => X) = (1.0,1.0);
      
      ifnone
      // comb arc D1 --> X
      (D1 => X) = (1.0,1.0);
      
      if(D0===1'b0 && D1===1'b0 && D3===1'b0)
      // comb arc D2 --> X
      (D2 => X) = (1.0,1.0);
      
      if(D0===1'b0 && D1===1'b0 && D3===1'b1)
      // comb arc D2 --> X
      (D2 => X) = (1.0,1.0);
      
      if(D0===1'b0 && D1===1'b1 && D3===1'b0)
      // comb arc D2 --> X
      (D2 => X) = (1.0,1.0);
      
      if(D0===1'b0 && D1===1'b1 && D3===1'b1)
      // comb arc D2 --> X
      (D2 => X) = (1.0,1.0);
      
      if(D0===1'b1 && D1===1'b0 && D3===1'b0)
      // comb arc D2 --> X
      (D2 => X) = (1.0,1.0);
      
      if(D0===1'b1 && D1===1'b0 && D3===1'b1)
      // comb arc D2 --> X
      (D2 => X) = (1.0,1.0);
      
      if(D0===1'b1 && D1===1'b1 && D3===1'b0)
      // comb arc D2 --> X
      (D2 => X) = (1.0,1.0);
      
      if(D0===1'b1 && D1===1'b1 && D3===1'b1)
      // comb arc D2 --> X
      (D2 => X) = (1.0,1.0);
      
      ifnone
      // comb arc D2 --> X
      (D2 => X) = (1.0,1.0);
      
      if(D0===1'b0 && D1===1'b0 && D2===1'b0)
      // comb arc D3 --> X
      (D3 => X) = (1.0,1.0);
      
      if(D0===1'b0 && D1===1'b0 && D2===1'b1)
      // comb arc D3 --> X
      (D3 => X) = (1.0,1.0);
      
      if(D0===1'b0 && D1===1'b1 && D2===1'b0)
      // comb arc D3 --> X
      (D3 => X) = (1.0,1.0);
      
      if(D0===1'b0 && D1===1'b1 && D2===1'b1)
      // comb arc D3 --> X
      (D3 => X) = (1.0,1.0);
      
      if(D0===1'b1 && D1===1'b0 && D2===1'b0)
      // comb arc D3 --> X
      (D3 => X) = (1.0,1.0);
      
      if(D0===1'b1 && D1===1'b0 && D2===1'b1)
      // comb arc D3 --> X
      (D3 => X) = (1.0,1.0);
      
      if(D0===1'b1 && D1===1'b1 && D2===1'b0)
      // comb arc D3 --> X
      (D3 => X) = (1.0,1.0);
      
      if(D0===1'b1 && D1===1'b1 && D2===1'b1)
      // comb arc D3 --> X
      (D3 => X) = (1.0,1.0);
      
      ifnone
      // comb arc D3 --> X
      (D3 => X) = (1.0,1.0);
      
      if(D0===1'b0 && D1===1'b0 && D2===1'b1 && D3===1'b0 && S1===1'b1)
      // comb arc S0 --> X
      (S0 => X) = (1.0,1.0);
      
      if(D0===1'b0 && D1===1'b1 && D2===1'b1 && D3===1'b0 && S1===1'b1)
      // comb arc S0 --> X
      (S0 => X) = (1.0,1.0);
      
      if(D0===1'b1 && D1===1'b0 && D2===1'b0 && D3===1'b0 && S1===1'b0)
      // comb arc S0 --> X
      (S0 => X) = (1.0,1.0);
      
      if(D0===1'b1 && D1===1'b0 && D2===1'b0 && D3===1'b1 && S1===1'b0)
      // comb arc S0 --> X
      (S0 => X) = (1.0,1.0);
      
      if(D0===1'b1 && D1===1'b0 && D2===1'b1 && D3===1'b0 && S1===1'b0)
      // comb arc S0 --> X
      (S0 => X) = (1.0,1.0);
      
      if(D0===1'b1 && D1===1'b0 && D2===1'b1 && D3===1'b0 && S1===1'b1)
      // comb arc S0 --> X
      (S0 => X) = (1.0,1.0);
      
      if(D0===1'b1 && D1===1'b0 && D2===1'b1 && D3===1'b1 && S1===1'b0)
      // comb arc S0 --> X
      (S0 => X) = (1.0,1.0);
      
      if(D0===1'b1 && D1===1'b1 && D2===1'b1 && D3===1'b0 && S1===1'b1)
      // comb arc S0 --> X
      (S0 => X) = (1.0,1.0);
      
      ifnone
      // comb arc posedge S0 --> (X:S0)
      (posedge S0 => (X:S0)) = (1.0,1.0);
      
      ifnone
      // comb arc negedge S0 --> (X:S0)
      (negedge S0 => (X:S0)) = (1.0,1.0);
      
      if(D0===1'b0 && D1===1'b0 && D2===1'b0 && D3===1'b1 && S1===1'b1)
      // comb arc S0 --> X
      (S0 => X) = (1.0,1.0);
      
      if(D0===1'b0 && D1===1'b1 && D2===1'b0 && D3===1'b0 && S1===1'b0)
      // comb arc S0 --> X
      (S0 => X) = (1.0,1.0);
      
      if(D0===1'b0 && D1===1'b1 && D2===1'b0 && D3===1'b1 && S1===1'b0)
      // comb arc S0 --> X
      (S0 => X) = (1.0,1.0);
      
      if(D0===1'b0 && D1===1'b1 && D2===1'b0 && D3===1'b1 && S1===1'b1)
      // comb arc S0 --> X
      (S0 => X) = (1.0,1.0);
      
      if(D0===1'b0 && D1===1'b1 && D2===1'b1 && D3===1'b0 && S1===1'b0)
      // comb arc S0 --> X
      (S0 => X) = (1.0,1.0);
      
      if(D0===1'b0 && D1===1'b1 && D2===1'b1 && D3===1'b1 && S1===1'b0)
      // comb arc S0 --> X
      (S0 => X) = (1.0,1.0);
      
      if(D0===1'b1 && D1===1'b0 && D2===1'b0 && D3===1'b1 && S1===1'b1)
      // comb arc S0 --> X
      (S0 => X) = (1.0,1.0);
      
      if(D0===1'b1 && D1===1'b1 && D2===1'b0 && D3===1'b1 && S1===1'b1)
      // comb arc S0 --> X
      (S0 => X) = (1.0,1.0);
      
      if(D0===1'b0 && D1===1'b1 && D2===1'b0 && D3===1'b0 && S0===1'b1)
      // comb arc S1 --> X
      (S1 => X) = (1.0,1.0);
      
      if(D0===1'b0 && D1===1'b1 && D2===1'b1 && D3===1'b0 && S0===1'b1)
      // comb arc S1 --> X
      (S1 => X) = (1.0,1.0);
      
      if(D0===1'b1 && D1===1'b0 && D2===1'b0 && D3===1'b0 && S0===1'b0)
      // comb arc S1 --> X
      (S1 => X) = (1.0,1.0);
      
      if(D0===1'b1 && D1===1'b0 && D2===1'b0 && D3===1'b1 && S0===1'b0)
      // comb arc S1 --> X
      (S1 => X) = (1.0,1.0);
      
      if(D0===1'b1 && D1===1'b1 && D2===1'b0 && D3===1'b0 && S0===1'b0)
      // comb arc S1 --> X
      (S1 => X) = (1.0,1.0);
      
      if(D0===1'b1 && D1===1'b1 && D2===1'b0 && D3===1'b0 && S0===1'b1)
      // comb arc S1 --> X
      (S1 => X) = (1.0,1.0);
      
      if(D0===1'b1 && D1===1'b1 && D2===1'b0 && D3===1'b1 && S0===1'b0)
      // comb arc S1 --> X
      (S1 => X) = (1.0,1.0);
      
      if(D0===1'b1 && D1===1'b1 && D2===1'b1 && D3===1'b0 && S0===1'b1)
      // comb arc S1 --> X
      (S1 => X) = (1.0,1.0);
      
      ifnone
      // comb arc posedge S1 --> (X:S1)
      (posedge S1 => (X:S1)) = (1.0,1.0);
      
      ifnone
      // comb arc negedge S1 --> (X:S1)
      (negedge S1 => (X:S1)) = (1.0,1.0);
      
      if(D0===1'b0 && D1===1'b0 && D2===1'b0 && D3===1'b1 && S0===1'b1)
      // comb arc S1 --> X
      (S1 => X) = (1.0,1.0);
      
      if(D0===1'b0 && D1===1'b0 && D2===1'b1 && D3===1'b0 && S0===1'b0)
      // comb arc S1 --> X
      (S1 => X) = (1.0,1.0);
      
      if(D0===1'b0 && D1===1'b0 && D2===1'b1 && D3===1'b1 && S0===1'b0)
      // comb arc S1 --> X
      (S1 => X) = (1.0,1.0);
      
      if(D0===1'b0 && D1===1'b0 && D2===1'b1 && D3===1'b1 && S0===1'b1)
      // comb arc S1 --> X
      (S1 => X) = (1.0,1.0);
      
      if(D0===1'b0 && D1===1'b1 && D2===1'b1 && D3===1'b0 && S0===1'b0)
      // comb arc S1 --> X
      (S1 => X) = (1.0,1.0);
      
      if(D0===1'b0 && D1===1'b1 && D2===1'b1 && D3===1'b1 && S0===1'b0)
      // comb arc S1 --> X
      (S1 => X) = (1.0,1.0);
      
      if(D0===1'b1 && D1===1'b0 && D2===1'b0 && D3===1'b1 && S0===1'b1)
      // comb arc S1 --> X
      (S1 => X) = (1.0,1.0);
      
      if(D0===1'b1 && D1===1'b0 && D2===1'b1 && D3===1'b1 && S0===1'b1)
      // comb arc S1 --> X
      (S1 => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_MUXI2_0P5( X, D0, D1, S );
input D0, D1, S;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_MUXI2_0P5_func SAEDRVT14_MUXI2_0P5_behav_inst(.X(X),.D0(D0),.D1(D1),.S(S));
`else
   SAEDRVT14_MUXI2_0P5_func SAEDRVT14_MUXI2_0P5_inst(.X(X),.D0(D0),.D1(D1),.S(S));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      if(D1===1'b0)
      // comb arc D0 --> X
      (D0 => X) = (1.0,1.0);
      
      if(D1===1'b1)
      // comb arc D0 --> X
      (D0 => X) = (1.0,1.0);
      
      ifnone
      // comb arc D0 --> X
      (D0 => X) = (1.0,1.0);
      
      if(D0===1'b0)
      // comb arc D1 --> X
      (D1 => X) = (1.0,1.0);
      
      if(D0===1'b1)
      // comb arc D1 --> X
      (D1 => X) = (1.0,1.0);
      
      ifnone
      // comb arc D1 --> X
      (D1 => X) = (1.0,1.0);
      
      ifnone
      // comb arc posedge S --> (X:S)
      (posedge S => (X:S)) = (1.0,1.0);
      
      ifnone
      // comb arc negedge S --> (X:S)
      (negedge S => (X:S)) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_MUXI2_1( X, D0, D1, S );
input D0, D1, S;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_MUXI2_1_func SAEDRVT14_MUXI2_1_behav_inst(.X(X),.D0(D0),.D1(D1),.S(S));
`else
   SAEDRVT14_MUXI2_1_func SAEDRVT14_MUXI2_1_inst(.X(X),.D0(D0),.D1(D1),.S(S));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      if(D1===1'b0)
      // comb arc D0 --> X
      (D0 => X) = (1.0,1.0);
      
      if(D1===1'b1)
      // comb arc D0 --> X
      (D0 => X) = (1.0,1.0);
      
      ifnone
      // comb arc D0 --> X
      (D0 => X) = (1.0,1.0);
      
      if(D0===1'b0)
      // comb arc D1 --> X
      (D1 => X) = (1.0,1.0);
      
      if(D0===1'b1)
      // comb arc D1 --> X
      (D1 => X) = (1.0,1.0);
      
      ifnone
      // comb arc D1 --> X
      (D1 => X) = (1.0,1.0);
      
      ifnone
      // comb arc posedge S --> (X:S)
      (posedge S => (X:S)) = (1.0,1.0);
      
      ifnone
      // comb arc negedge S --> (X:S)
      (negedge S => (X:S)) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_MUXI2_2( X, D0, D1, S );
input D0, D1, S;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_MUXI2_2_func SAEDRVT14_MUXI2_2_behav_inst(.X(X),.D0(D0),.D1(D1),.S(S));
`else
   SAEDRVT14_MUXI2_2_func SAEDRVT14_MUXI2_2_inst(.X(X),.D0(D0),.D1(D1),.S(S));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      if(D1===1'b0)
      // comb arc D0 --> X
      (D0 => X) = (1.0,1.0);
      
      if(D1===1'b1)
      // comb arc D0 --> X
      (D0 => X) = (1.0,1.0);
      
      ifnone
      // comb arc D0 --> X
      (D0 => X) = (1.0,1.0);
      
      if(D0===1'b0)
      // comb arc D1 --> X
      (D1 => X) = (1.0,1.0);
      
      if(D0===1'b1)
      // comb arc D1 --> X
      (D1 => X) = (1.0,1.0);
      
      ifnone
      // comb arc D1 --> X
      (D1 => X) = (1.0,1.0);
      
      ifnone
      // comb arc posedge S --> (X:S)
      (posedge S => (X:S)) = (1.0,1.0);
      
      ifnone
      // comb arc negedge S --> (X:S)
      (negedge S => (X:S)) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_MUXI2_4( X, D0, D1, S );
input D0, D1, S;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_MUXI2_4_func SAEDRVT14_MUXI2_4_behav_inst(.X(X),.D0(D0),.D1(D1),.S(S));
`else
   SAEDRVT14_MUXI2_4_func SAEDRVT14_MUXI2_4_inst(.X(X),.D0(D0),.D1(D1),.S(S));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      if(D1===1'b0)
      // comb arc D0 --> X
      (D0 => X) = (1.0,1.0);
      
      if(D1===1'b1)
      // comb arc D0 --> X
      (D0 => X) = (1.0,1.0);
      
      ifnone
      // comb arc D0 --> X
      (D0 => X) = (1.0,1.0);
      
      if(D0===1'b0)
      // comb arc D1 --> X
      (D1 => X) = (1.0,1.0);
      
      if(D0===1'b1)
      // comb arc D1 --> X
      (D1 => X) = (1.0,1.0);
      
      ifnone
      // comb arc D1 --> X
      (D1 => X) = (1.0,1.0);
      
      ifnone
      // comb arc posedge S --> (X:S)
      (posedge S => (X:S)) = (1.0,1.0);
      
      ifnone
      // comb arc negedge S --> (X:S)
      (negedge S => (X:S)) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_MUXI2_B_1( X, D0, D1, S );
input D0, D1, S;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_MUXI2_B_1_func SAEDRVT14_MUXI2_B_1_behav_inst(.X(X),.D0(D0),.D1(D1),.S(S));
`else
   SAEDRVT14_MUXI2_B_1_func SAEDRVT14_MUXI2_B_1_inst(.X(X),.D0(D0),.D1(D1),.S(S));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      if(D1===1'b0)
      // comb arc D0 --> X
      (D0 => X) = (1.0,1.0);
      
      if(D1===1'b1)
      // comb arc D0 --> X
      (D0 => X) = (1.0,1.0);
      
      ifnone
      // comb arc D0 --> X
      (D0 => X) = (1.0,1.0);
      
      if(D0===1'b0)
      // comb arc D1 --> X
      (D1 => X) = (1.0,1.0);
      
      if(D0===1'b1)
      // comb arc D1 --> X
      (D1 => X) = (1.0,1.0);
      
      ifnone
      // comb arc D1 --> X
      (D1 => X) = (1.0,1.0);
      
      ifnone
      // comb arc posedge S --> (X:S)
      (posedge S => (X:S)) = (1.0,1.0);
      
      ifnone
      // comb arc negedge S --> (X:S)
      (negedge S => (X:S)) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_MUXI2_ECO_1( X, D0, D1, S );
input D0, D1, S;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_MUXI2_ECO_1_func SAEDRVT14_MUXI2_ECO_1_behav_inst(.X(X),.D0(D0),.D1(D1),.S(S));
`else
   SAEDRVT14_MUXI2_ECO_1_func SAEDRVT14_MUXI2_ECO_1_inst(.X(X),.D0(D0),.D1(D1),.S(S));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      if(D1===1'b0)
      // comb arc D0 --> X
      (D0 => X) = (1.0,1.0);
      
      if(D1===1'b1)
      // comb arc D0 --> X
      (D0 => X) = (1.0,1.0);
      
      ifnone
      // comb arc D0 --> X
      (D0 => X) = (1.0,1.0);
      
      if(D0===1'b0)
      // comb arc D1 --> X
      (D1 => X) = (1.0,1.0);
      
      if(D0===1'b1)
      // comb arc D1 --> X
      (D1 => X) = (1.0,1.0);
      
      ifnone
      // comb arc D1 --> X
      (D1 => X) = (1.0,1.0);
      
      ifnone
      // comb arc posedge S --> (X:S)
      (posedge S => (X:S)) = (1.0,1.0);
      
      ifnone
      // comb arc negedge S --> (X:S)
      (negedge S => (X:S)) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_MUXI2_ECO_2( X, D0, D1, S );
input D0, D1, S;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_MUXI2_ECO_2_func SAEDRVT14_MUXI2_ECO_2_behav_inst(.X(X),.D0(D0),.D1(D1),.S(S));
`else
   SAEDRVT14_MUXI2_ECO_2_func SAEDRVT14_MUXI2_ECO_2_inst(.X(X),.D0(D0),.D1(D1),.S(S));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      if(D1===1'b0)
      // comb arc D0 --> X
      (D0 => X) = (1.0,1.0);
      
      if(D1===1'b1)
      // comb arc D0 --> X
      (D0 => X) = (1.0,1.0);
      
      ifnone
      // comb arc D0 --> X
      (D0 => X) = (1.0,1.0);
      
      if(D0===1'b0)
      // comb arc D1 --> X
      (D1 => X) = (1.0,1.0);
      
      if(D0===1'b1)
      // comb arc D1 --> X
      (D1 => X) = (1.0,1.0);
      
      ifnone
      // comb arc D1 --> X
      (D1 => X) = (1.0,1.0);
      
      ifnone
      // comb arc posedge S --> (X:S)
      (posedge S => (X:S)) = (1.0,1.0);
      
      ifnone
      // comb arc negedge S --> (X:S)
      (negedge S => (X:S)) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_MUXI2_U_0P5( X, D0, D1, S );
input D0, D1, S;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_MUXI2_U_0P5_func SAEDRVT14_MUXI2_U_0P5_behav_inst(.X(X),.D0(D0),.D1(D1),.S(S));
`else
   SAEDRVT14_MUXI2_U_0P5_func SAEDRVT14_MUXI2_U_0P5_inst(.X(X),.D0(D0),.D1(D1),.S(S));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      if(D1===1'b0)
      // comb arc D0 --> X
      (D0 => X) = (1.0,1.0);
      
      if(D1===1'b1)
      // comb arc D0 --> X
      (D0 => X) = (1.0,1.0);
      
      ifnone
      // comb arc D0 --> X
      (D0 => X) = (1.0,1.0);
      
      if(D0===1'b0)
      // comb arc D1 --> X
      (D1 => X) = (1.0,1.0);
      
      if(D0===1'b1)
      // comb arc D1 --> X
      (D1 => X) = (1.0,1.0);
      
      ifnone
      // comb arc D1 --> X
      (D1 => X) = (1.0,1.0);
      
      ifnone
      // comb arc posedge S --> (X:S)
      (posedge S => (X:S)) = (1.0,1.0);
      
      ifnone
      // comb arc negedge S --> (X:S)
      (negedge S => (X:S)) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_MUXI3_0P5( X, D0, D1, D2, S0, S1 );
input D0, D1, D2, S0, S1;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_MUXI3_0P5_func SAEDRVT14_MUXI3_0P5_behav_inst(.X(X),.D0(D0),.D1(D1),.D2(D2),.S0(S0),.S1(S1));
`else
   SAEDRVT14_MUXI3_0P5_func SAEDRVT14_MUXI3_0P5_inst(.X(X),.D0(D0),.D1(D1),.D2(D2),.S0(S0),.S1(S1));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      if(D1===1'b0 && D2===1'b0)
      // comb arc D0 --> X
      (D0 => X) = (1.0,1.0);
      
      if(D1===1'b0 && D2===1'b1)
      // comb arc D0 --> X
      (D0 => X) = (1.0,1.0);
      
      if(D1===1'b1 && D2===1'b0)
      // comb arc D0 --> X
      (D0 => X) = (1.0,1.0);
      
      if(D1===1'b1 && D2===1'b1)
      // comb arc D0 --> X
      (D0 => X) = (1.0,1.0);
      
      ifnone
      // comb arc D0 --> X
      (D0 => X) = (1.0,1.0);
      
      if(D0===1'b0 && D2===1'b0)
      // comb arc D1 --> X
      (D1 => X) = (1.0,1.0);
      
      if(D0===1'b0 && D2===1'b1)
      // comb arc D1 --> X
      (D1 => X) = (1.0,1.0);
      
      if(D0===1'b1 && D2===1'b0)
      // comb arc D1 --> X
      (D1 => X) = (1.0,1.0);
      
      if(D0===1'b1 && D2===1'b1)
      // comb arc D1 --> X
      (D1 => X) = (1.0,1.0);
      
      ifnone
      // comb arc D1 --> X
      (D1 => X) = (1.0,1.0);
      
      if(D0===1'b0 && D1===1'b0 && S0===1'b0)
      // comb arc D2 --> X
      (D2 => X) = (1.0,1.0);
      
      if(D0===1'b0 && D1===1'b0 && S0===1'b1)
      // comb arc D2 --> X
      (D2 => X) = (1.0,1.0);
      
      if(D0===1'b0 && D1===1'b1 && S0===1'b0)
      // comb arc D2 --> X
      (D2 => X) = (1.0,1.0);
      
      if(D0===1'b0 && D1===1'b1 && S0===1'b1)
      // comb arc D2 --> X
      (D2 => X) = (1.0,1.0);
      
      if(D0===1'b1 && D1===1'b0 && S0===1'b0)
      // comb arc D2 --> X
      (D2 => X) = (1.0,1.0);
      
      if(D0===1'b1 && D1===1'b0 && S0===1'b1)
      // comb arc D2 --> X
      (D2 => X) = (1.0,1.0);
      
      if(D0===1'b1 && D1===1'b1 && S0===1'b0)
      // comb arc D2 --> X
      (D2 => X) = (1.0,1.0);
      
      if(D0===1'b1 && D1===1'b1 && S0===1'b1)
      // comb arc D2 --> X
      (D2 => X) = (1.0,1.0);
      
      ifnone
      // comb arc D2 --> X
      (D2 => X) = (1.0,1.0);
      
      if(D2===1'b0)
      // comb arc posedge S0 --> (X:S0)
      (posedge S0 => (X:S0)) = (1.0,1.0);
      
      if(D2===1'b0)
      // comb arc negedge S0 --> (X:S0)
      (negedge S0 => (X:S0)) = (1.0,1.0);
      
      if(D2===1'b1)
      // comb arc posedge S0 --> (X:S0)
      (posedge S0 => (X:S0)) = (1.0,1.0);
      
      if(D2===1'b1)
      // comb arc negedge S0 --> (X:S0)
      (negedge S0 => (X:S0)) = (1.0,1.0);
      
      ifnone
      // comb arc posedge S0 --> (X:S0)
      (posedge S0 => (X:S0)) = (1.0,1.0);
      
      ifnone
      // comb arc negedge S0 --> (X:S0)
      (negedge S0 => (X:S0)) = (1.0,1.0);
      
      if(D0===1'b0 && D1===1'b0 && S0===1'b0)
      // comb arc S1 --> X
      (S1 => X) = (1.0,1.0);
      
      if(D0===1'b0 && D1===1'b0 && S0===1'b1)
      // comb arc S1 --> X
      (S1 => X) = (1.0,1.0);
      
      if(D0===1'b0 && D1===1'b1 && S0===1'b0)
      // comb arc S1 --> X
      (S1 => X) = (1.0,1.0);
      
      if(D0===1'b1 && D1===1'b0 && S0===1'b1)
      // comb arc S1 --> X
      (S1 => X) = (1.0,1.0);
      
      ifnone
      // comb arc posedge S1 --> (X:S1)
      (posedge S1 => (X:S1)) = (1.0,1.0);
      
      ifnone
      // comb arc negedge S1 --> (X:S1)
      (negedge S1 => (X:S1)) = (1.0,1.0);
      
      if(D0===1'b0 && D1===1'b1 && S0===1'b1)
      // comb arc S1 --> X
      (S1 => X) = (1.0,1.0);
      
      if(D0===1'b1 && D1===1'b0 && S0===1'b0)
      // comb arc S1 --> X
      (S1 => X) = (1.0,1.0);
      
      if(D0===1'b1 && D1===1'b1 && S0===1'b0)
      // comb arc S1 --> X
      (S1 => X) = (1.0,1.0);
      
      if(D0===1'b1 && D1===1'b1 && S0===1'b1)
      // comb arc S1 --> X
      (S1 => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_MUXI3_1( X, D0, D1, D2, S0, S1 );
input D0, D1, D2, S0, S1;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_MUXI3_1_func SAEDRVT14_MUXI3_1_behav_inst(.X(X),.D0(D0),.D1(D1),.D2(D2),.S0(S0),.S1(S1));
`else
   SAEDRVT14_MUXI3_1_func SAEDRVT14_MUXI3_1_inst(.X(X),.D0(D0),.D1(D1),.D2(D2),.S0(S0),.S1(S1));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      if(D1===1'b0 && D2===1'b0)
      // comb arc D0 --> X
      (D0 => X) = (1.0,1.0);
      
      if(D1===1'b0 && D2===1'b1)
      // comb arc D0 --> X
      (D0 => X) = (1.0,1.0);
      
      if(D1===1'b1 && D2===1'b0)
      // comb arc D0 --> X
      (D0 => X) = (1.0,1.0);
      
      if(D1===1'b1 && D2===1'b1)
      // comb arc D0 --> X
      (D0 => X) = (1.0,1.0);
      
      ifnone
      // comb arc D0 --> X
      (D0 => X) = (1.0,1.0);
      
      if(D0===1'b0 && D2===1'b0)
      // comb arc D1 --> X
      (D1 => X) = (1.0,1.0);
      
      if(D0===1'b0 && D2===1'b1)
      // comb arc D1 --> X
      (D1 => X) = (1.0,1.0);
      
      if(D0===1'b1 && D2===1'b0)
      // comb arc D1 --> X
      (D1 => X) = (1.0,1.0);
      
      if(D0===1'b1 && D2===1'b1)
      // comb arc D1 --> X
      (D1 => X) = (1.0,1.0);
      
      ifnone
      // comb arc D1 --> X
      (D1 => X) = (1.0,1.0);
      
      if(D0===1'b0 && D1===1'b0 && S0===1'b0)
      // comb arc D2 --> X
      (D2 => X) = (1.0,1.0);
      
      if(D0===1'b0 && D1===1'b0 && S0===1'b1)
      // comb arc D2 --> X
      (D2 => X) = (1.0,1.0);
      
      if(D0===1'b0 && D1===1'b1 && S0===1'b0)
      // comb arc D2 --> X
      (D2 => X) = (1.0,1.0);
      
      if(D0===1'b0 && D1===1'b1 && S0===1'b1)
      // comb arc D2 --> X
      (D2 => X) = (1.0,1.0);
      
      if(D0===1'b1 && D1===1'b0 && S0===1'b0)
      // comb arc D2 --> X
      (D2 => X) = (1.0,1.0);
      
      if(D0===1'b1 && D1===1'b0 && S0===1'b1)
      // comb arc D2 --> X
      (D2 => X) = (1.0,1.0);
      
      if(D0===1'b1 && D1===1'b1 && S0===1'b0)
      // comb arc D2 --> X
      (D2 => X) = (1.0,1.0);
      
      if(D0===1'b1 && D1===1'b1 && S0===1'b1)
      // comb arc D2 --> X
      (D2 => X) = (1.0,1.0);
      
      ifnone
      // comb arc D2 --> X
      (D2 => X) = (1.0,1.0);
      
      if(D2===1'b0)
      // comb arc posedge S0 --> (X:S0)
      (posedge S0 => (X:S0)) = (1.0,1.0);
      
      if(D2===1'b0)
      // comb arc negedge S0 --> (X:S0)
      (negedge S0 => (X:S0)) = (1.0,1.0);
      
      if(D2===1'b1)
      // comb arc posedge S0 --> (X:S0)
      (posedge S0 => (X:S0)) = (1.0,1.0);
      
      if(D2===1'b1)
      // comb arc negedge S0 --> (X:S0)
      (negedge S0 => (X:S0)) = (1.0,1.0);
      
      ifnone
      // comb arc posedge S0 --> (X:S0)
      (posedge S0 => (X:S0)) = (1.0,1.0);
      
      ifnone
      // comb arc negedge S0 --> (X:S0)
      (negedge S0 => (X:S0)) = (1.0,1.0);
      
      if(D0===1'b0 && D1===1'b0 && S0===1'b0)
      // comb arc S1 --> X
      (S1 => X) = (1.0,1.0);
      
      if(D0===1'b0 && D1===1'b0 && S0===1'b1)
      // comb arc S1 --> X
      (S1 => X) = (1.0,1.0);
      
      if(D0===1'b0 && D1===1'b1 && S0===1'b0)
      // comb arc S1 --> X
      (S1 => X) = (1.0,1.0);
      
      if(D0===1'b1 && D1===1'b0 && S0===1'b1)
      // comb arc S1 --> X
      (S1 => X) = (1.0,1.0);
      
      ifnone
      // comb arc posedge S1 --> (X:S1)
      (posedge S1 => (X:S1)) = (1.0,1.0);
      
      ifnone
      // comb arc negedge S1 --> (X:S1)
      (negedge S1 => (X:S1)) = (1.0,1.0);
      
      if(D0===1'b0 && D1===1'b1 && S0===1'b1)
      // comb arc S1 --> X
      (S1 => X) = (1.0,1.0);
      
      if(D0===1'b1 && D1===1'b0 && S0===1'b0)
      // comb arc S1 --> X
      (S1 => X) = (1.0,1.0);
      
      if(D0===1'b1 && D1===1'b1 && S0===1'b0)
      // comb arc S1 --> X
      (S1 => X) = (1.0,1.0);
      
      if(D0===1'b1 && D1===1'b1 && S0===1'b1)
      // comb arc S1 --> X
      (S1 => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_MUXI3_2( X, D0, D1, D2, S0, S1 );
input D0, D1, D2, S0, S1;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_MUXI3_2_func SAEDRVT14_MUXI3_2_behav_inst(.X(X),.D0(D0),.D1(D1),.D2(D2),.S0(S0),.S1(S1));
`else
   SAEDRVT14_MUXI3_2_func SAEDRVT14_MUXI3_2_inst(.X(X),.D0(D0),.D1(D1),.D2(D2),.S0(S0),.S1(S1));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      if(D1===1'b0 && D2===1'b0)
      // comb arc D0 --> X
      (D0 => X) = (1.0,1.0);
      
      if(D1===1'b0 && D2===1'b1)
      // comb arc D0 --> X
      (D0 => X) = (1.0,1.0);
      
      if(D1===1'b1 && D2===1'b0)
      // comb arc D0 --> X
      (D0 => X) = (1.0,1.0);
      
      if(D1===1'b1 && D2===1'b1)
      // comb arc D0 --> X
      (D0 => X) = (1.0,1.0);
      
      ifnone
      // comb arc D0 --> X
      (D0 => X) = (1.0,1.0);
      
      if(D0===1'b0 && D2===1'b0)
      // comb arc D1 --> X
      (D1 => X) = (1.0,1.0);
      
      if(D0===1'b0 && D2===1'b1)
      // comb arc D1 --> X
      (D1 => X) = (1.0,1.0);
      
      if(D0===1'b1 && D2===1'b0)
      // comb arc D1 --> X
      (D1 => X) = (1.0,1.0);
      
      if(D0===1'b1 && D2===1'b1)
      // comb arc D1 --> X
      (D1 => X) = (1.0,1.0);
      
      ifnone
      // comb arc D1 --> X
      (D1 => X) = (1.0,1.0);
      
      if(D0===1'b0 && D1===1'b0 && S0===1'b0)
      // comb arc D2 --> X
      (D2 => X) = (1.0,1.0);
      
      if(D0===1'b0 && D1===1'b0 && S0===1'b1)
      // comb arc D2 --> X
      (D2 => X) = (1.0,1.0);
      
      if(D0===1'b0 && D1===1'b1 && S0===1'b0)
      // comb arc D2 --> X
      (D2 => X) = (1.0,1.0);
      
      if(D0===1'b0 && D1===1'b1 && S0===1'b1)
      // comb arc D2 --> X
      (D2 => X) = (1.0,1.0);
      
      if(D0===1'b1 && D1===1'b0 && S0===1'b0)
      // comb arc D2 --> X
      (D2 => X) = (1.0,1.0);
      
      if(D0===1'b1 && D1===1'b0 && S0===1'b1)
      // comb arc D2 --> X
      (D2 => X) = (1.0,1.0);
      
      if(D0===1'b1 && D1===1'b1 && S0===1'b0)
      // comb arc D2 --> X
      (D2 => X) = (1.0,1.0);
      
      if(D0===1'b1 && D1===1'b1 && S0===1'b1)
      // comb arc D2 --> X
      (D2 => X) = (1.0,1.0);
      
      ifnone
      // comb arc D2 --> X
      (D2 => X) = (1.0,1.0);
      
      if(D2===1'b0)
      // comb arc posedge S0 --> (X:S0)
      (posedge S0 => (X:S0)) = (1.0,1.0);
      
      if(D2===1'b0)
      // comb arc negedge S0 --> (X:S0)
      (negedge S0 => (X:S0)) = (1.0,1.0);
      
      if(D2===1'b1)
      // comb arc posedge S0 --> (X:S0)
      (posedge S0 => (X:S0)) = (1.0,1.0);
      
      if(D2===1'b1)
      // comb arc negedge S0 --> (X:S0)
      (negedge S0 => (X:S0)) = (1.0,1.0);
      
      ifnone
      // comb arc posedge S0 --> (X:S0)
      (posedge S0 => (X:S0)) = (1.0,1.0);
      
      ifnone
      // comb arc negedge S0 --> (X:S0)
      (negedge S0 => (X:S0)) = (1.0,1.0);
      
      if(D0===1'b0 && D1===1'b0 && S0===1'b0)
      // comb arc S1 --> X
      (S1 => X) = (1.0,1.0);
      
      if(D0===1'b0 && D1===1'b0 && S0===1'b1)
      // comb arc S1 --> X
      (S1 => X) = (1.0,1.0);
      
      if(D0===1'b0 && D1===1'b1 && S0===1'b0)
      // comb arc S1 --> X
      (S1 => X) = (1.0,1.0);
      
      if(D0===1'b1 && D1===1'b0 && S0===1'b1)
      // comb arc S1 --> X
      (S1 => X) = (1.0,1.0);
      
      ifnone
      // comb arc posedge S1 --> (X:S1)
      (posedge S1 => (X:S1)) = (1.0,1.0);
      
      ifnone
      // comb arc negedge S1 --> (X:S1)
      (negedge S1 => (X:S1)) = (1.0,1.0);
      
      if(D0===1'b0 && D1===1'b1 && S0===1'b1)
      // comb arc S1 --> X
      (S1 => X) = (1.0,1.0);
      
      if(D0===1'b1 && D1===1'b0 && S0===1'b0)
      // comb arc S1 --> X
      (S1 => X) = (1.0,1.0);
      
      if(D0===1'b1 && D1===1'b1 && S0===1'b0)
      // comb arc S1 --> X
      (S1 => X) = (1.0,1.0);
      
      if(D0===1'b1 && D1===1'b1 && S0===1'b1)
      // comb arc S1 --> X
      (S1 => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_MUXI3_4( X, D0, D1, D2, S0, S1 );
input D0, D1, D2, S0, S1;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_MUXI3_4_func SAEDRVT14_MUXI3_4_behav_inst(.X(X),.D0(D0),.D1(D1),.D2(D2),.S0(S0),.S1(S1));
`else
   SAEDRVT14_MUXI3_4_func SAEDRVT14_MUXI3_4_inst(.X(X),.D0(D0),.D1(D1),.D2(D2),.S0(S0),.S1(S1));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      if(D1===1'b0 && D2===1'b0)
      // comb arc D0 --> X
      (D0 => X) = (1.0,1.0);
      
      if(D1===1'b0 && D2===1'b1)
      // comb arc D0 --> X
      (D0 => X) = (1.0,1.0);
      
      if(D1===1'b1 && D2===1'b0)
      // comb arc D0 --> X
      (D0 => X) = (1.0,1.0);
      
      if(D1===1'b1 && D2===1'b1)
      // comb arc D0 --> X
      (D0 => X) = (1.0,1.0);
      
      ifnone
      // comb arc D0 --> X
      (D0 => X) = (1.0,1.0);
      
      if(D0===1'b0 && D2===1'b0)
      // comb arc D1 --> X
      (D1 => X) = (1.0,1.0);
      
      if(D0===1'b0 && D2===1'b1)
      // comb arc D1 --> X
      (D1 => X) = (1.0,1.0);
      
      if(D0===1'b1 && D2===1'b0)
      // comb arc D1 --> X
      (D1 => X) = (1.0,1.0);
      
      if(D0===1'b1 && D2===1'b1)
      // comb arc D1 --> X
      (D1 => X) = (1.0,1.0);
      
      ifnone
      // comb arc D1 --> X
      (D1 => X) = (1.0,1.0);
      
      if(D0===1'b0 && D1===1'b0 && S0===1'b0)
      // comb arc D2 --> X
      (D2 => X) = (1.0,1.0);
      
      if(D0===1'b0 && D1===1'b0 && S0===1'b1)
      // comb arc D2 --> X
      (D2 => X) = (1.0,1.0);
      
      if(D0===1'b0 && D1===1'b1 && S0===1'b0)
      // comb arc D2 --> X
      (D2 => X) = (1.0,1.0);
      
      if(D0===1'b0 && D1===1'b1 && S0===1'b1)
      // comb arc D2 --> X
      (D2 => X) = (1.0,1.0);
      
      if(D0===1'b1 && D1===1'b0 && S0===1'b0)
      // comb arc D2 --> X
      (D2 => X) = (1.0,1.0);
      
      if(D0===1'b1 && D1===1'b0 && S0===1'b1)
      // comb arc D2 --> X
      (D2 => X) = (1.0,1.0);
      
      if(D0===1'b1 && D1===1'b1 && S0===1'b0)
      // comb arc D2 --> X
      (D2 => X) = (1.0,1.0);
      
      if(D0===1'b1 && D1===1'b1 && S0===1'b1)
      // comb arc D2 --> X
      (D2 => X) = (1.0,1.0);
      
      ifnone
      // comb arc D2 --> X
      (D2 => X) = (1.0,1.0);
      
      if(D2===1'b0)
      // comb arc posedge S0 --> (X:S0)
      (posedge S0 => (X:S0)) = (1.0,1.0);
      
      if(D2===1'b0)
      // comb arc negedge S0 --> (X:S0)
      (negedge S0 => (X:S0)) = (1.0,1.0);
      
      if(D2===1'b1)
      // comb arc posedge S0 --> (X:S0)
      (posedge S0 => (X:S0)) = (1.0,1.0);
      
      if(D2===1'b1)
      // comb arc negedge S0 --> (X:S0)
      (negedge S0 => (X:S0)) = (1.0,1.0);
      
      ifnone
      // comb arc posedge S0 --> (X:S0)
      (posedge S0 => (X:S0)) = (1.0,1.0);
      
      ifnone
      // comb arc negedge S0 --> (X:S0)
      (negedge S0 => (X:S0)) = (1.0,1.0);
      
      if(D0===1'b0 && D1===1'b0 && S0===1'b0)
      // comb arc S1 --> X
      (S1 => X) = (1.0,1.0);
      
      if(D0===1'b0 && D1===1'b0 && S0===1'b1)
      // comb arc S1 --> X
      (S1 => X) = (1.0,1.0);
      
      if(D0===1'b0 && D1===1'b1 && S0===1'b0)
      // comb arc S1 --> X
      (S1 => X) = (1.0,1.0);
      
      if(D0===1'b1 && D1===1'b0 && S0===1'b1)
      // comb arc S1 --> X
      (S1 => X) = (1.0,1.0);
      
      ifnone
      // comb arc posedge S1 --> (X:S1)
      (posedge S1 => (X:S1)) = (1.0,1.0);
      
      ifnone
      // comb arc negedge S1 --> (X:S1)
      (negedge S1 => (X:S1)) = (1.0,1.0);
      
      if(D0===1'b0 && D1===1'b1 && S0===1'b1)
      // comb arc S1 --> X
      (S1 => X) = (1.0,1.0);
      
      if(D0===1'b1 && D1===1'b0 && S0===1'b0)
      // comb arc S1 --> X
      (S1 => X) = (1.0,1.0);
      
      if(D0===1'b1 && D1===1'b1 && S0===1'b0)
      // comb arc S1 --> X
      (S1 => X) = (1.0,1.0);
      
      if(D0===1'b1 && D1===1'b1 && S0===1'b1)
      // comb arc S1 --> X
      (S1 => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_MUXI4_2( S1, D3, D2, D1, S0, D0, X );
input D0, D1, D2, D3, S0, S1;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_MUXI4_2_func SAEDRVT14_MUXI4_2_behav_inst(.S1(S1),.D3(D3),.D2(D2),.D1(D1),.S0(S0),.D0(D0),.X(X));
`else
   SAEDRVT14_MUXI4_2_func SAEDRVT14_MUXI4_2_inst(.S1(S1),.D3(D3),.D2(D2),.D1(D1),.S0(S0),.D0(D0),.X(X));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      if(D1===1'b0 && D2===1'b0 && D3===1'b0)
      // comb arc D0 --> X
      (D0 => X) = (1.0,1.0);
      
      if(D1===1'b0 && D2===1'b0 && D3===1'b1)
      // comb arc D0 --> X
      (D0 => X) = (1.0,1.0);
      
      if(D1===1'b0 && D2===1'b1 && D3===1'b0)
      // comb arc D0 --> X
      (D0 => X) = (1.0,1.0);
      
      if(D1===1'b0 && D2===1'b1 && D3===1'b1)
      // comb arc D0 --> X
      (D0 => X) = (1.0,1.0);
      
      if(D1===1'b1 && D2===1'b0 && D3===1'b0)
      // comb arc D0 --> X
      (D0 => X) = (1.0,1.0);
      
      if(D1===1'b1 && D2===1'b0 && D3===1'b1)
      // comb arc D0 --> X
      (D0 => X) = (1.0,1.0);
      
      if(D1===1'b1 && D2===1'b1 && D3===1'b0)
      // comb arc D0 --> X
      (D0 => X) = (1.0,1.0);
      
      if(D1===1'b1 && D2===1'b1 && D3===1'b1)
      // comb arc D0 --> X
      (D0 => X) = (1.0,1.0);
      
      ifnone
      // comb arc D0 --> X
      (D0 => X) = (1.0,1.0);
      
      if(D0===1'b0 && D2===1'b0 && D3===1'b0)
      // comb arc D1 --> X
      (D1 => X) = (1.0,1.0);
      
      if(D0===1'b0 && D2===1'b0 && D3===1'b1)
      // comb arc D1 --> X
      (D1 => X) = (1.0,1.0);
      
      if(D0===1'b0 && D2===1'b1 && D3===1'b0)
      // comb arc D1 --> X
      (D1 => X) = (1.0,1.0);
      
      if(D0===1'b0 && D2===1'b1 && D3===1'b1)
      // comb arc D1 --> X
      (D1 => X) = (1.0,1.0);
      
      if(D0===1'b1 && D2===1'b0 && D3===1'b0)
      // comb arc D1 --> X
      (D1 => X) = (1.0,1.0);
      
      if(D0===1'b1 && D2===1'b0 && D3===1'b1)
      // comb arc D1 --> X
      (D1 => X) = (1.0,1.0);
      
      if(D0===1'b1 && D2===1'b1 && D3===1'b0)
      // comb arc D1 --> X
      (D1 => X) = (1.0,1.0);
      
      if(D0===1'b1 && D2===1'b1 && D3===1'b1)
      // comb arc D1 --> X
      (D1 => X) = (1.0,1.0);
      
      ifnone
      // comb arc D1 --> X
      (D1 => X) = (1.0,1.0);
      
      if(D0===1'b0 && D1===1'b0 && D3===1'b0)
      // comb arc D2 --> X
      (D2 => X) = (1.0,1.0);
      
      if(D0===1'b0 && D1===1'b0 && D3===1'b1)
      // comb arc D2 --> X
      (D2 => X) = (1.0,1.0);
      
      if(D0===1'b0 && D1===1'b1 && D3===1'b0)
      // comb arc D2 --> X
      (D2 => X) = (1.0,1.0);
      
      if(D0===1'b0 && D1===1'b1 && D3===1'b1)
      // comb arc D2 --> X
      (D2 => X) = (1.0,1.0);
      
      if(D0===1'b1 && D1===1'b0 && D3===1'b0)
      // comb arc D2 --> X
      (D2 => X) = (1.0,1.0);
      
      if(D0===1'b1 && D1===1'b0 && D3===1'b1)
      // comb arc D2 --> X
      (D2 => X) = (1.0,1.0);
      
      if(D0===1'b1 && D1===1'b1 && D3===1'b0)
      // comb arc D2 --> X
      (D2 => X) = (1.0,1.0);
      
      if(D0===1'b1 && D1===1'b1 && D3===1'b1)
      // comb arc D2 --> X
      (D2 => X) = (1.0,1.0);
      
      ifnone
      // comb arc D2 --> X
      (D2 => X) = (1.0,1.0);
      
      if(D0===1'b0 && D1===1'b0 && D2===1'b0)
      // comb arc D3 --> X
      (D3 => X) = (1.0,1.0);
      
      if(D0===1'b0 && D1===1'b0 && D2===1'b1)
      // comb arc D3 --> X
      (D3 => X) = (1.0,1.0);
      
      if(D0===1'b0 && D1===1'b1 && D2===1'b0)
      // comb arc D3 --> X
      (D3 => X) = (1.0,1.0);
      
      if(D0===1'b0 && D1===1'b1 && D2===1'b1)
      // comb arc D3 --> X
      (D3 => X) = (1.0,1.0);
      
      if(D0===1'b1 && D1===1'b0 && D2===1'b0)
      // comb arc D3 --> X
      (D3 => X) = (1.0,1.0);
      
      if(D0===1'b1 && D1===1'b0 && D2===1'b1)
      // comb arc D3 --> X
      (D3 => X) = (1.0,1.0);
      
      if(D0===1'b1 && D1===1'b1 && D2===1'b0)
      // comb arc D3 --> X
      (D3 => X) = (1.0,1.0);
      
      if(D0===1'b1 && D1===1'b1 && D2===1'b1)
      // comb arc D3 --> X
      (D3 => X) = (1.0,1.0);
      
      ifnone
      // comb arc D3 --> X
      (D3 => X) = (1.0,1.0);
      
      if(D0===1'b0 && D1===1'b0 && D2===1'b0 && D3===1'b1 && S1===1'b1)
      // comb arc S0 --> X
      (S0 => X) = (1.0,1.0);
      
      if(D0===1'b0 && D1===1'b1 && D2===1'b0 && D3===1'b0 && S1===1'b0)
      // comb arc S0 --> X
      (S0 => X) = (1.0,1.0);
      
      if(D0===1'b0 && D1===1'b1 && D2===1'b0 && D3===1'b1 && S1===1'b0)
      // comb arc S0 --> X
      (S0 => X) = (1.0,1.0);
      
      if(D0===1'b0 && D1===1'b1 && D2===1'b0 && D3===1'b1 && S1===1'b1)
      // comb arc S0 --> X
      (S0 => X) = (1.0,1.0);
      
      if(D0===1'b0 && D1===1'b1 && D2===1'b1 && D3===1'b0 && S1===1'b0)
      // comb arc S0 --> X
      (S0 => X) = (1.0,1.0);
      
      if(D0===1'b0 && D1===1'b1 && D2===1'b1 && D3===1'b1 && S1===1'b0)
      // comb arc S0 --> X
      (S0 => X) = (1.0,1.0);
      
      if(D0===1'b1 && D1===1'b0 && D2===1'b0 && D3===1'b1 && S1===1'b1)
      // comb arc S0 --> X
      (S0 => X) = (1.0,1.0);
      
      if(D0===1'b1 && D1===1'b1 && D2===1'b0 && D3===1'b1 && S1===1'b1)
      // comb arc S0 --> X
      (S0 => X) = (1.0,1.0);
      
      ifnone
      // comb arc posedge S0 --> (X:S0)
      (posedge S0 => (X:S0)) = (1.0,1.0);
      
      ifnone
      // comb arc negedge S0 --> (X:S0)
      (negedge S0 => (X:S0)) = (1.0,1.0);
      
      if(D0===1'b0 && D1===1'b0 && D2===1'b1 && D3===1'b0 && S1===1'b1)
      // comb arc S0 --> X
      (S0 => X) = (1.0,1.0);
      
      if(D0===1'b0 && D1===1'b1 && D2===1'b1 && D3===1'b0 && S1===1'b1)
      // comb arc S0 --> X
      (S0 => X) = (1.0,1.0);
      
      if(D0===1'b1 && D1===1'b0 && D2===1'b0 && D3===1'b0 && S1===1'b0)
      // comb arc S0 --> X
      (S0 => X) = (1.0,1.0);
      
      if(D0===1'b1 && D1===1'b0 && D2===1'b0 && D3===1'b1 && S1===1'b0)
      // comb arc S0 --> X
      (S0 => X) = (1.0,1.0);
      
      if(D0===1'b1 && D1===1'b0 && D2===1'b1 && D3===1'b0 && S1===1'b0)
      // comb arc S0 --> X
      (S0 => X) = (1.0,1.0);
      
      if(D0===1'b1 && D1===1'b0 && D2===1'b1 && D3===1'b0 && S1===1'b1)
      // comb arc S0 --> X
      (S0 => X) = (1.0,1.0);
      
      if(D0===1'b1 && D1===1'b0 && D2===1'b1 && D3===1'b1 && S1===1'b0)
      // comb arc S0 --> X
      (S0 => X) = (1.0,1.0);
      
      if(D0===1'b1 && D1===1'b1 && D2===1'b1 && D3===1'b0 && S1===1'b1)
      // comb arc S0 --> X
      (S0 => X) = (1.0,1.0);
      
      if(D0===1'b0 && D1===1'b0 && D2===1'b0 && D3===1'b1 && S0===1'b1)
      // comb arc S1 --> X
      (S1 => X) = (1.0,1.0);
      
      if(D0===1'b0 && D1===1'b0 && D2===1'b1 && D3===1'b0 && S0===1'b0)
      // comb arc S1 --> X
      (S1 => X) = (1.0,1.0);
      
      if(D0===1'b0 && D1===1'b0 && D2===1'b1 && D3===1'b1 && S0===1'b0)
      // comb arc S1 --> X
      (S1 => X) = (1.0,1.0);
      
      if(D0===1'b0 && D1===1'b0 && D2===1'b1 && D3===1'b1 && S0===1'b1)
      // comb arc S1 --> X
      (S1 => X) = (1.0,1.0);
      
      if(D0===1'b0 && D1===1'b1 && D2===1'b1 && D3===1'b0 && S0===1'b0)
      // comb arc S1 --> X
      (S1 => X) = (1.0,1.0);
      
      if(D0===1'b0 && D1===1'b1 && D2===1'b1 && D3===1'b1 && S0===1'b0)
      // comb arc S1 --> X
      (S1 => X) = (1.0,1.0);
      
      if(D0===1'b1 && D1===1'b0 && D2===1'b0 && D3===1'b1 && S0===1'b1)
      // comb arc S1 --> X
      (S1 => X) = (1.0,1.0);
      
      if(D0===1'b1 && D1===1'b0 && D2===1'b1 && D3===1'b1 && S0===1'b1)
      // comb arc S1 --> X
      (S1 => X) = (1.0,1.0);
      
      ifnone
      // comb arc posedge S1 --> (X:S1)
      (posedge S1 => (X:S1)) = (1.0,1.0);
      
      ifnone
      // comb arc negedge S1 --> (X:S1)
      (negedge S1 => (X:S1)) = (1.0,1.0);
      
      if(D0===1'b0 && D1===1'b1 && D2===1'b0 && D3===1'b0 && S0===1'b1)
      // comb arc S1 --> X
      (S1 => X) = (1.0,1.0);
      
      if(D0===1'b0 && D1===1'b1 && D2===1'b1 && D3===1'b0 && S0===1'b1)
      // comb arc S1 --> X
      (S1 => X) = (1.0,1.0);
      
      if(D0===1'b1 && D1===1'b0 && D2===1'b0 && D3===1'b0 && S0===1'b0)
      // comb arc S1 --> X
      (S1 => X) = (1.0,1.0);
      
      if(D0===1'b1 && D1===1'b0 && D2===1'b0 && D3===1'b1 && S0===1'b0)
      // comb arc S1 --> X
      (S1 => X) = (1.0,1.0);
      
      if(D0===1'b1 && D1===1'b1 && D2===1'b0 && D3===1'b0 && S0===1'b0)
      // comb arc S1 --> X
      (S1 => X) = (1.0,1.0);
      
      if(D0===1'b1 && D1===1'b1 && D2===1'b0 && D3===1'b0 && S0===1'b1)
      // comb arc S1 --> X
      (S1 => X) = (1.0,1.0);
      
      if(D0===1'b1 && D1===1'b1 && D2===1'b0 && D3===1'b1 && S0===1'b0)
      // comb arc S1 --> X
      (S1 => X) = (1.0,1.0);
      
      if(D0===1'b1 && D1===1'b1 && D2===1'b1 && D3===1'b0 && S0===1'b1)
      // comb arc S1 --> X
      (S1 => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_MUXI4_4( X, D0, D1, D2, D3, S0, S1 );
input D0, D1, D2, D3, S0, S1;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_MUXI4_4_func SAEDRVT14_MUXI4_4_behav_inst(.X(X),.D0(D0),.D1(D1),.D2(D2),.D3(D3),.S0(S0),.S1(S1));
`else
   SAEDRVT14_MUXI4_4_func SAEDRVT14_MUXI4_4_inst(.X(X),.D0(D0),.D1(D1),.D2(D2),.D3(D3),.S0(S0),.S1(S1));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      if(D1===1'b0 && D2===1'b0 && D3===1'b0)
      // comb arc D0 --> X
      (D0 => X) = (1.0,1.0);
      
      if(D1===1'b0 && D2===1'b0 && D3===1'b1)
      // comb arc D0 --> X
      (D0 => X) = (1.0,1.0);
      
      if(D1===1'b0 && D2===1'b1 && D3===1'b0)
      // comb arc D0 --> X
      (D0 => X) = (1.0,1.0);
      
      if(D1===1'b0 && D2===1'b1 && D3===1'b1)
      // comb arc D0 --> X
      (D0 => X) = (1.0,1.0);
      
      if(D1===1'b1 && D2===1'b0 && D3===1'b0)
      // comb arc D0 --> X
      (D0 => X) = (1.0,1.0);
      
      if(D1===1'b1 && D2===1'b0 && D3===1'b1)
      // comb arc D0 --> X
      (D0 => X) = (1.0,1.0);
      
      if(D1===1'b1 && D2===1'b1 && D3===1'b0)
      // comb arc D0 --> X
      (D0 => X) = (1.0,1.0);
      
      if(D1===1'b1 && D2===1'b1 && D3===1'b1)
      // comb arc D0 --> X
      (D0 => X) = (1.0,1.0);
      
      ifnone
      // comb arc D0 --> X
      (D0 => X) = (1.0,1.0);
      
      if(D0===1'b0 && D2===1'b0 && D3===1'b0)
      // comb arc D1 --> X
      (D1 => X) = (1.0,1.0);
      
      if(D0===1'b0 && D2===1'b0 && D3===1'b1)
      // comb arc D1 --> X
      (D1 => X) = (1.0,1.0);
      
      if(D0===1'b0 && D2===1'b1 && D3===1'b0)
      // comb arc D1 --> X
      (D1 => X) = (1.0,1.0);
      
      if(D0===1'b0 && D2===1'b1 && D3===1'b1)
      // comb arc D1 --> X
      (D1 => X) = (1.0,1.0);
      
      if(D0===1'b1 && D2===1'b0 && D3===1'b0)
      // comb arc D1 --> X
      (D1 => X) = (1.0,1.0);
      
      if(D0===1'b1 && D2===1'b0 && D3===1'b1)
      // comb arc D1 --> X
      (D1 => X) = (1.0,1.0);
      
      if(D0===1'b1 && D2===1'b1 && D3===1'b0)
      // comb arc D1 --> X
      (D1 => X) = (1.0,1.0);
      
      if(D0===1'b1 && D2===1'b1 && D3===1'b1)
      // comb arc D1 --> X
      (D1 => X) = (1.0,1.0);
      
      ifnone
      // comb arc D1 --> X
      (D1 => X) = (1.0,1.0);
      
      if(D0===1'b0 && D1===1'b0 && D3===1'b0)
      // comb arc D2 --> X
      (D2 => X) = (1.0,1.0);
      
      if(D0===1'b0 && D1===1'b0 && D3===1'b1)
      // comb arc D2 --> X
      (D2 => X) = (1.0,1.0);
      
      if(D0===1'b0 && D1===1'b1 && D3===1'b0)
      // comb arc D2 --> X
      (D2 => X) = (1.0,1.0);
      
      if(D0===1'b0 && D1===1'b1 && D3===1'b1)
      // comb arc D2 --> X
      (D2 => X) = (1.0,1.0);
      
      if(D0===1'b1 && D1===1'b0 && D3===1'b0)
      // comb arc D2 --> X
      (D2 => X) = (1.0,1.0);
      
      if(D0===1'b1 && D1===1'b0 && D3===1'b1)
      // comb arc D2 --> X
      (D2 => X) = (1.0,1.0);
      
      if(D0===1'b1 && D1===1'b1 && D3===1'b0)
      // comb arc D2 --> X
      (D2 => X) = (1.0,1.0);
      
      if(D0===1'b1 && D1===1'b1 && D3===1'b1)
      // comb arc D2 --> X
      (D2 => X) = (1.0,1.0);
      
      ifnone
      // comb arc D2 --> X
      (D2 => X) = (1.0,1.0);
      
      if(D0===1'b0 && D1===1'b0 && D2===1'b0)
      // comb arc D3 --> X
      (D3 => X) = (1.0,1.0);
      
      if(D0===1'b0 && D1===1'b0 && D2===1'b1)
      // comb arc D3 --> X
      (D3 => X) = (1.0,1.0);
      
      if(D0===1'b0 && D1===1'b1 && D2===1'b0)
      // comb arc D3 --> X
      (D3 => X) = (1.0,1.0);
      
      if(D0===1'b0 && D1===1'b1 && D2===1'b1)
      // comb arc D3 --> X
      (D3 => X) = (1.0,1.0);
      
      if(D0===1'b1 && D1===1'b0 && D2===1'b0)
      // comb arc D3 --> X
      (D3 => X) = (1.0,1.0);
      
      if(D0===1'b1 && D1===1'b0 && D2===1'b1)
      // comb arc D3 --> X
      (D3 => X) = (1.0,1.0);
      
      if(D0===1'b1 && D1===1'b1 && D2===1'b0)
      // comb arc D3 --> X
      (D3 => X) = (1.0,1.0);
      
      if(D0===1'b1 && D1===1'b1 && D2===1'b1)
      // comb arc D3 --> X
      (D3 => X) = (1.0,1.0);
      
      ifnone
      // comb arc D3 --> X
      (D3 => X) = (1.0,1.0);
      
      if(D0===1'b0 && D1===1'b0 && D2===1'b0 && D3===1'b1 && S1===1'b1)
      // comb arc S0 --> X
      (S0 => X) = (1.0,1.0);
      
      if(D0===1'b0 && D1===1'b1 && D2===1'b0 && D3===1'b0 && S1===1'b0)
      // comb arc S0 --> X
      (S0 => X) = (1.0,1.0);
      
      if(D0===1'b0 && D1===1'b1 && D2===1'b0 && D3===1'b1 && S1===1'b0)
      // comb arc S0 --> X
      (S0 => X) = (1.0,1.0);
      
      if(D0===1'b0 && D1===1'b1 && D2===1'b0 && D3===1'b1 && S1===1'b1)
      // comb arc S0 --> X
      (S0 => X) = (1.0,1.0);
      
      if(D0===1'b0 && D1===1'b1 && D2===1'b1 && D3===1'b0 && S1===1'b0)
      // comb arc S0 --> X
      (S0 => X) = (1.0,1.0);
      
      if(D0===1'b0 && D1===1'b1 && D2===1'b1 && D3===1'b1 && S1===1'b0)
      // comb arc S0 --> X
      (S0 => X) = (1.0,1.0);
      
      if(D0===1'b1 && D1===1'b0 && D2===1'b0 && D3===1'b1 && S1===1'b1)
      // comb arc S0 --> X
      (S0 => X) = (1.0,1.0);
      
      if(D0===1'b1 && D1===1'b1 && D2===1'b0 && D3===1'b1 && S1===1'b1)
      // comb arc S0 --> X
      (S0 => X) = (1.0,1.0);
      
      ifnone
      // comb arc posedge S0 --> (X:S0)
      (posedge S0 => (X:S0)) = (1.0,1.0);
      
      ifnone
      // comb arc negedge S0 --> (X:S0)
      (negedge S0 => (X:S0)) = (1.0,1.0);
      
      if(D0===1'b0 && D1===1'b0 && D2===1'b1 && D3===1'b0 && S1===1'b1)
      // comb arc S0 --> X
      (S0 => X) = (1.0,1.0);
      
      if(D0===1'b0 && D1===1'b1 && D2===1'b1 && D3===1'b0 && S1===1'b1)
      // comb arc S0 --> X
      (S0 => X) = (1.0,1.0);
      
      if(D0===1'b1 && D1===1'b0 && D2===1'b0 && D3===1'b0 && S1===1'b0)
      // comb arc S0 --> X
      (S0 => X) = (1.0,1.0);
      
      if(D0===1'b1 && D1===1'b0 && D2===1'b0 && D3===1'b1 && S1===1'b0)
      // comb arc S0 --> X
      (S0 => X) = (1.0,1.0);
      
      if(D0===1'b1 && D1===1'b0 && D2===1'b1 && D3===1'b0 && S1===1'b0)
      // comb arc S0 --> X
      (S0 => X) = (1.0,1.0);
      
      if(D0===1'b1 && D1===1'b0 && D2===1'b1 && D3===1'b0 && S1===1'b1)
      // comb arc S0 --> X
      (S0 => X) = (1.0,1.0);
      
      if(D0===1'b1 && D1===1'b0 && D2===1'b1 && D3===1'b1 && S1===1'b0)
      // comb arc S0 --> X
      (S0 => X) = (1.0,1.0);
      
      if(D0===1'b1 && D1===1'b1 && D2===1'b1 && D3===1'b0 && S1===1'b1)
      // comb arc S0 --> X
      (S0 => X) = (1.0,1.0);
      
      if(D0===1'b0 && D1===1'b0 && D2===1'b0 && D3===1'b1 && S0===1'b1)
      // comb arc S1 --> X
      (S1 => X) = (1.0,1.0);
      
      if(D0===1'b0 && D1===1'b0 && D2===1'b1 && D3===1'b0 && S0===1'b0)
      // comb arc S1 --> X
      (S1 => X) = (1.0,1.0);
      
      if(D0===1'b0 && D1===1'b0 && D2===1'b1 && D3===1'b1 && S0===1'b0)
      // comb arc S1 --> X
      (S1 => X) = (1.0,1.0);
      
      if(D0===1'b0 && D1===1'b0 && D2===1'b1 && D3===1'b1 && S0===1'b1)
      // comb arc S1 --> X
      (S1 => X) = (1.0,1.0);
      
      if(D0===1'b0 && D1===1'b1 && D2===1'b1 && D3===1'b0 && S0===1'b0)
      // comb arc S1 --> X
      (S1 => X) = (1.0,1.0);
      
      if(D0===1'b0 && D1===1'b1 && D2===1'b1 && D3===1'b1 && S0===1'b0)
      // comb arc S1 --> X
      (S1 => X) = (1.0,1.0);
      
      if(D0===1'b1 && D1===1'b0 && D2===1'b0 && D3===1'b1 && S0===1'b1)
      // comb arc S1 --> X
      (S1 => X) = (1.0,1.0);
      
      if(D0===1'b1 && D1===1'b0 && D2===1'b1 && D3===1'b1 && S0===1'b1)
      // comb arc S1 --> X
      (S1 => X) = (1.0,1.0);
      
      ifnone
      // comb arc posedge S1 --> (X:S1)
      (posedge S1 => (X:S1)) = (1.0,1.0);
      
      ifnone
      // comb arc negedge S1 --> (X:S1)
      (negedge S1 => (X:S1)) = (1.0,1.0);
      
      if(D0===1'b0 && D1===1'b1 && D2===1'b0 && D3===1'b0 && S0===1'b1)
      // comb arc S1 --> X
      (S1 => X) = (1.0,1.0);
      
      if(D0===1'b0 && D1===1'b1 && D2===1'b1 && D3===1'b0 && S0===1'b1)
      // comb arc S1 --> X
      (S1 => X) = (1.0,1.0);
      
      if(D0===1'b1 && D1===1'b0 && D2===1'b0 && D3===1'b0 && S0===1'b0)
      // comb arc S1 --> X
      (S1 => X) = (1.0,1.0);
      
      if(D0===1'b1 && D1===1'b0 && D2===1'b0 && D3===1'b1 && S0===1'b0)
      // comb arc S1 --> X
      (S1 => X) = (1.0,1.0);
      
      if(D0===1'b1 && D1===1'b1 && D2===1'b0 && D3===1'b0 && S0===1'b0)
      // comb arc S1 --> X
      (S1 => X) = (1.0,1.0);
      
      if(D0===1'b1 && D1===1'b1 && D2===1'b0 && D3===1'b0 && S0===1'b1)
      // comb arc S1 --> X
      (S1 => X) = (1.0,1.0);
      
      if(D0===1'b1 && D1===1'b1 && D2===1'b0 && D3===1'b1 && S0===1'b0)
      // comb arc S1 --> X
      (S1 => X) = (1.0,1.0);
      
      if(D0===1'b1 && D1===1'b1 && D2===1'b1 && D3===1'b0 && S0===1'b1)
      // comb arc S1 --> X
      (S1 => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_MUXI4_U_0P5( X, D0, D1, D2, D3, S0, S1 );
input D0, D1, D2, D3, S0, S1;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_MUXI4_U_0P5_func SAEDRVT14_MUXI4_U_0P5_behav_inst(.X(X),.D0(D0),.D1(D1),.D2(D2),.D3(D3),.S0(S0),.S1(S1));
`else
   SAEDRVT14_MUXI4_U_0P5_func SAEDRVT14_MUXI4_U_0P5_inst(.X(X),.D0(D0),.D1(D1),.D2(D2),.D3(D3),.S0(S0),.S1(S1));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      if(D1===1'b0 && D2===1'b0 && D3===1'b0)
      // comb arc D0 --> X
      (D0 => X) = (1.0,1.0);
      
      if(D1===1'b0 && D2===1'b0 && D3===1'b1)
      // comb arc D0 --> X
      (D0 => X) = (1.0,1.0);
      
      if(D1===1'b0 && D2===1'b1 && D3===1'b0)
      // comb arc D0 --> X
      (D0 => X) = (1.0,1.0);
      
      if(D1===1'b0 && D2===1'b1 && D3===1'b1)
      // comb arc D0 --> X
      (D0 => X) = (1.0,1.0);
      
      if(D1===1'b1 && D2===1'b0 && D3===1'b0)
      // comb arc D0 --> X
      (D0 => X) = (1.0,1.0);
      
      if(D1===1'b1 && D2===1'b0 && D3===1'b1)
      // comb arc D0 --> X
      (D0 => X) = (1.0,1.0);
      
      if(D1===1'b1 && D2===1'b1 && D3===1'b0)
      // comb arc D0 --> X
      (D0 => X) = (1.0,1.0);
      
      if(D1===1'b1 && D2===1'b1 && D3===1'b1)
      // comb arc D0 --> X
      (D0 => X) = (1.0,1.0);
      
      ifnone
      // comb arc D0 --> X
      (D0 => X) = (1.0,1.0);
      
      if(D0===1'b0 && D2===1'b0 && D3===1'b0)
      // comb arc D1 --> X
      (D1 => X) = (1.0,1.0);
      
      if(D0===1'b0 && D2===1'b0 && D3===1'b1)
      // comb arc D1 --> X
      (D1 => X) = (1.0,1.0);
      
      if(D0===1'b0 && D2===1'b1 && D3===1'b0)
      // comb arc D1 --> X
      (D1 => X) = (1.0,1.0);
      
      if(D0===1'b0 && D2===1'b1 && D3===1'b1)
      // comb arc D1 --> X
      (D1 => X) = (1.0,1.0);
      
      if(D0===1'b1 && D2===1'b0 && D3===1'b0)
      // comb arc D1 --> X
      (D1 => X) = (1.0,1.0);
      
      if(D0===1'b1 && D2===1'b0 && D3===1'b1)
      // comb arc D1 --> X
      (D1 => X) = (1.0,1.0);
      
      if(D0===1'b1 && D2===1'b1 && D3===1'b0)
      // comb arc D1 --> X
      (D1 => X) = (1.0,1.0);
      
      if(D0===1'b1 && D2===1'b1 && D3===1'b1)
      // comb arc D1 --> X
      (D1 => X) = (1.0,1.0);
      
      ifnone
      // comb arc D1 --> X
      (D1 => X) = (1.0,1.0);
      
      if(D0===1'b0 && D1===1'b0 && D3===1'b0)
      // comb arc D2 --> X
      (D2 => X) = (1.0,1.0);
      
      if(D0===1'b0 && D1===1'b0 && D3===1'b1)
      // comb arc D2 --> X
      (D2 => X) = (1.0,1.0);
      
      if(D0===1'b0 && D1===1'b1 && D3===1'b0)
      // comb arc D2 --> X
      (D2 => X) = (1.0,1.0);
      
      if(D0===1'b0 && D1===1'b1 && D3===1'b1)
      // comb arc D2 --> X
      (D2 => X) = (1.0,1.0);
      
      if(D0===1'b1 && D1===1'b0 && D3===1'b0)
      // comb arc D2 --> X
      (D2 => X) = (1.0,1.0);
      
      if(D0===1'b1 && D1===1'b0 && D3===1'b1)
      // comb arc D2 --> X
      (D2 => X) = (1.0,1.0);
      
      if(D0===1'b1 && D1===1'b1 && D3===1'b0)
      // comb arc D2 --> X
      (D2 => X) = (1.0,1.0);
      
      if(D0===1'b1 && D1===1'b1 && D3===1'b1)
      // comb arc D2 --> X
      (D2 => X) = (1.0,1.0);
      
      ifnone
      // comb arc D2 --> X
      (D2 => X) = (1.0,1.0);
      
      if(D0===1'b0 && D1===1'b0 && D2===1'b0)
      // comb arc D3 --> X
      (D3 => X) = (1.0,1.0);
      
      if(D0===1'b0 && D1===1'b0 && D2===1'b1)
      // comb arc D3 --> X
      (D3 => X) = (1.0,1.0);
      
      if(D0===1'b0 && D1===1'b1 && D2===1'b0)
      // comb arc D3 --> X
      (D3 => X) = (1.0,1.0);
      
      if(D0===1'b0 && D1===1'b1 && D2===1'b1)
      // comb arc D3 --> X
      (D3 => X) = (1.0,1.0);
      
      if(D0===1'b1 && D1===1'b0 && D2===1'b0)
      // comb arc D3 --> X
      (D3 => X) = (1.0,1.0);
      
      if(D0===1'b1 && D1===1'b0 && D2===1'b1)
      // comb arc D3 --> X
      (D3 => X) = (1.0,1.0);
      
      if(D0===1'b1 && D1===1'b1 && D2===1'b0)
      // comb arc D3 --> X
      (D3 => X) = (1.0,1.0);
      
      if(D0===1'b1 && D1===1'b1 && D2===1'b1)
      // comb arc D3 --> X
      (D3 => X) = (1.0,1.0);
      
      ifnone
      // comb arc D3 --> X
      (D3 => X) = (1.0,1.0);
      
      if(D0===1'b0 && D1===1'b0 && D2===1'b0 && D3===1'b1 && S1===1'b1)
      // comb arc S0 --> X
      (S0 => X) = (1.0,1.0);
      
      if(D0===1'b0 && D1===1'b1 && D2===1'b0 && D3===1'b0 && S1===1'b0)
      // comb arc S0 --> X
      (S0 => X) = (1.0,1.0);
      
      if(D0===1'b0 && D1===1'b1 && D2===1'b0 && D3===1'b1 && S1===1'b0)
      // comb arc S0 --> X
      (S0 => X) = (1.0,1.0);
      
      if(D0===1'b0 && D1===1'b1 && D2===1'b0 && D3===1'b1 && S1===1'b1)
      // comb arc S0 --> X
      (S0 => X) = (1.0,1.0);
      
      if(D0===1'b0 && D1===1'b1 && D2===1'b1 && D3===1'b0 && S1===1'b0)
      // comb arc S0 --> X
      (S0 => X) = (1.0,1.0);
      
      if(D0===1'b0 && D1===1'b1 && D2===1'b1 && D3===1'b1 && S1===1'b0)
      // comb arc S0 --> X
      (S0 => X) = (1.0,1.0);
      
      if(D0===1'b1 && D1===1'b0 && D2===1'b0 && D3===1'b1 && S1===1'b1)
      // comb arc S0 --> X
      (S0 => X) = (1.0,1.0);
      
      if(D0===1'b1 && D1===1'b1 && D2===1'b0 && D3===1'b1 && S1===1'b1)
      // comb arc S0 --> X
      (S0 => X) = (1.0,1.0);
      
      ifnone
      // comb arc posedge S0 --> (X:S0)
      (posedge S0 => (X:S0)) = (1.0,1.0);
      
      ifnone
      // comb arc negedge S0 --> (X:S0)
      (negedge S0 => (X:S0)) = (1.0,1.0);
      
      if(D0===1'b0 && D1===1'b0 && D2===1'b1 && D3===1'b0 && S1===1'b1)
      // comb arc S0 --> X
      (S0 => X) = (1.0,1.0);
      
      if(D0===1'b0 && D1===1'b1 && D2===1'b1 && D3===1'b0 && S1===1'b1)
      // comb arc S0 --> X
      (S0 => X) = (1.0,1.0);
      
      if(D0===1'b1 && D1===1'b0 && D2===1'b0 && D3===1'b0 && S1===1'b0)
      // comb arc S0 --> X
      (S0 => X) = (1.0,1.0);
      
      if(D0===1'b1 && D1===1'b0 && D2===1'b0 && D3===1'b1 && S1===1'b0)
      // comb arc S0 --> X
      (S0 => X) = (1.0,1.0);
      
      if(D0===1'b1 && D1===1'b0 && D2===1'b1 && D3===1'b0 && S1===1'b0)
      // comb arc S0 --> X
      (S0 => X) = (1.0,1.0);
      
      if(D0===1'b1 && D1===1'b0 && D2===1'b1 && D3===1'b0 && S1===1'b1)
      // comb arc S0 --> X
      (S0 => X) = (1.0,1.0);
      
      if(D0===1'b1 && D1===1'b0 && D2===1'b1 && D3===1'b1 && S1===1'b0)
      // comb arc S0 --> X
      (S0 => X) = (1.0,1.0);
      
      if(D0===1'b1 && D1===1'b1 && D2===1'b1 && D3===1'b0 && S1===1'b1)
      // comb arc S0 --> X
      (S0 => X) = (1.0,1.0);
      
      if(D0===1'b0 && D1===1'b0 && D2===1'b0 && D3===1'b1 && S0===1'b1)
      // comb arc S1 --> X
      (S1 => X) = (1.0,1.0);
      
      if(D0===1'b0 && D1===1'b0 && D2===1'b1 && D3===1'b0 && S0===1'b0)
      // comb arc S1 --> X
      (S1 => X) = (1.0,1.0);
      
      if(D0===1'b0 && D1===1'b0 && D2===1'b1 && D3===1'b1 && S0===1'b0)
      // comb arc S1 --> X
      (S1 => X) = (1.0,1.0);
      
      if(D0===1'b0 && D1===1'b0 && D2===1'b1 && D3===1'b1 && S0===1'b1)
      // comb arc S1 --> X
      (S1 => X) = (1.0,1.0);
      
      if(D0===1'b0 && D1===1'b1 && D2===1'b1 && D3===1'b0 && S0===1'b0)
      // comb arc S1 --> X
      (S1 => X) = (1.0,1.0);
      
      if(D0===1'b0 && D1===1'b1 && D2===1'b1 && D3===1'b1 && S0===1'b0)
      // comb arc S1 --> X
      (S1 => X) = (1.0,1.0);
      
      if(D0===1'b1 && D1===1'b0 && D2===1'b0 && D3===1'b1 && S0===1'b1)
      // comb arc S1 --> X
      (S1 => X) = (1.0,1.0);
      
      if(D0===1'b1 && D1===1'b0 && D2===1'b1 && D3===1'b1 && S0===1'b1)
      // comb arc S1 --> X
      (S1 => X) = (1.0,1.0);
      
      ifnone
      // comb arc posedge S1 --> (X:S1)
      (posedge S1 => (X:S1)) = (1.0,1.0);
      
      ifnone
      // comb arc negedge S1 --> (X:S1)
      (negedge S1 => (X:S1)) = (1.0,1.0);
      
      if(D0===1'b0 && D1===1'b1 && D2===1'b0 && D3===1'b0 && S0===1'b1)
      // comb arc S1 --> X
      (S1 => X) = (1.0,1.0);
      
      if(D0===1'b0 && D1===1'b1 && D2===1'b1 && D3===1'b0 && S0===1'b1)
      // comb arc S1 --> X
      (S1 => X) = (1.0,1.0);
      
      if(D0===1'b1 && D1===1'b0 && D2===1'b0 && D3===1'b0 && S0===1'b0)
      // comb arc S1 --> X
      (S1 => X) = (1.0,1.0);
      
      if(D0===1'b1 && D1===1'b0 && D2===1'b0 && D3===1'b1 && S0===1'b0)
      // comb arc S1 --> X
      (S1 => X) = (1.0,1.0);
      
      if(D0===1'b1 && D1===1'b1 && D2===1'b0 && D3===1'b0 && S0===1'b0)
      // comb arc S1 --> X
      (S1 => X) = (1.0,1.0);
      
      if(D0===1'b1 && D1===1'b1 && D2===1'b0 && D3===1'b0 && S0===1'b1)
      // comb arc S1 --> X
      (S1 => X) = (1.0,1.0);
      
      if(D0===1'b1 && D1===1'b1 && D2===1'b0 && D3===1'b1 && S0===1'b0)
      // comb arc S1 --> X
      (S1 => X) = (1.0,1.0);
      
      if(D0===1'b1 && D1===1'b1 && D2===1'b1 && D3===1'b0 && S0===1'b1)
      // comb arc S1 --> X
      (S1 => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_ND2B_0P75( X, A, B );
input A, B;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_ND2B_0P75_func SAEDRVT14_ND2B_0P75_behav_inst(.X(X),.A(A),.B(B));
`else
   SAEDRVT14_ND2B_0P75_func SAEDRVT14_ND2B_0P75_inst(.X(X),.A(A),.B(B));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A --> X
      (A => X) = (1.0,1.0);
      
      // comb arc B --> X
      (B => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_ND2B_1( X, A, B );
input A, B;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_ND2B_1_func SAEDRVT14_ND2B_1_behav_inst(.X(X),.A(A),.B(B));
`else
   SAEDRVT14_ND2B_1_func SAEDRVT14_ND2B_1_inst(.X(X),.A(A),.B(B));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A --> X
      (A => X) = (1.0,1.0);
      
      // comb arc B --> X
      (B => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_ND2B_1P5( X, A, B );
input A, B;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_ND2B_1P5_func SAEDRVT14_ND2B_1P5_behav_inst(.X(X),.A(A),.B(B));
`else
   SAEDRVT14_ND2B_1P5_func SAEDRVT14_ND2B_1P5_inst(.X(X),.A(A),.B(B));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A --> X
      (A => X) = (1.0,1.0);
      
      // comb arc B --> X
      (B => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_ND2B_2( X, A, B );
input A, B;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_ND2B_2_func SAEDRVT14_ND2B_2_behav_inst(.X(X),.A(A),.B(B));
`else
   SAEDRVT14_ND2B_2_func SAEDRVT14_ND2B_2_inst(.X(X),.A(A),.B(B));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A --> X
      (A => X) = (1.0,1.0);
      
      // comb arc B --> X
      (B => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_ND2B_4( X, A, B );
input A, B;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_ND2B_4_func SAEDRVT14_ND2B_4_behav_inst(.X(X),.A(A),.B(B));
`else
   SAEDRVT14_ND2B_4_func SAEDRVT14_ND2B_4_inst(.X(X),.A(A),.B(B));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A --> X
      (A => X) = (1.0,1.0);
      
      // comb arc B --> X
      (B => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_ND2B_U_0P5( X, A, B );
input A, B;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_ND2B_U_0P5_func SAEDRVT14_ND2B_U_0P5_behav_inst(.X(X),.A(A),.B(B));
`else
   SAEDRVT14_ND2B_U_0P5_func SAEDRVT14_ND2B_U_0P5_inst(.X(X),.A(A),.B(B));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A --> X
      (A => X) = (1.0,1.0);
      
      // comb arc B --> X
      (B => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_ND2_0P5( X, A1, A2 );
input A1, A2;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_ND2_0P5_func SAEDRVT14_ND2_0P5_behav_inst(.X(X),.A1(A1),.A2(A2));
`else
   SAEDRVT14_ND2_0P5_func SAEDRVT14_ND2_0P5_inst(.X(X),.A1(A1),.A2(A2));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_ND2_1( X, A1, A2 );
input A1, A2;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_ND2_1_func SAEDRVT14_ND2_1_behav_inst(.X(X),.A1(A1),.A2(A2));
`else
   SAEDRVT14_ND2_1_func SAEDRVT14_ND2_1_inst(.X(X),.A1(A1),.A2(A2));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_ND2_16( X, A1, A2 );
input A1, A2;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_ND2_16_func SAEDRVT14_ND2_16_behav_inst(.X(X),.A1(A1),.A2(A2));
`else
   SAEDRVT14_ND2_16_func SAEDRVT14_ND2_16_inst(.X(X),.A1(A1),.A2(A2));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_ND2_1P5( X, A1, A2 );
input A1, A2;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_ND2_1P5_func SAEDRVT14_ND2_1P5_behav_inst(.X(X),.A1(A1),.A2(A2));
`else
   SAEDRVT14_ND2_1P5_func SAEDRVT14_ND2_1P5_inst(.X(X),.A1(A1),.A2(A2));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_ND2_2( X, A1, A2 );
input A1, A2;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_ND2_2_func SAEDRVT14_ND2_2_behav_inst(.X(X),.A1(A1),.A2(A2));
`else
   SAEDRVT14_ND2_2_func SAEDRVT14_ND2_2_inst(.X(X),.A1(A1),.A2(A2));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_ND2_3( X, A1, A2 );
input A1, A2;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_ND2_3_func SAEDRVT14_ND2_3_behav_inst(.X(X),.A1(A1),.A2(A2));
`else
   SAEDRVT14_ND2_3_func SAEDRVT14_ND2_3_inst(.X(X),.A1(A1),.A2(A2));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_ND2_4( X, A1, A2 );
input A1, A2;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_ND2_4_func SAEDRVT14_ND2_4_behav_inst(.X(X),.A1(A1),.A2(A2));
`else
   SAEDRVT14_ND2_4_func SAEDRVT14_ND2_4_inst(.X(X),.A1(A1),.A2(A2));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_ND2_5( X, A1, A2 );
input A1, A2;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_ND2_5_func SAEDRVT14_ND2_5_behav_inst(.X(X),.A1(A1),.A2(A2));
`else
   SAEDRVT14_ND2_5_func SAEDRVT14_ND2_5_inst(.X(X),.A1(A1),.A2(A2));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_ND2_6( X, A1, A2 );
input A1, A2;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_ND2_6_func SAEDRVT14_ND2_6_behav_inst(.X(X),.A1(A1),.A2(A2));
`else
   SAEDRVT14_ND2_6_func SAEDRVT14_ND2_6_inst(.X(X),.A1(A1),.A2(A2));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_ND2_8( X, A1, A2 );
input A1, A2;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_ND2_8_func SAEDRVT14_ND2_8_behav_inst(.X(X),.A1(A1),.A2(A2));
`else
   SAEDRVT14_ND2_8_func SAEDRVT14_ND2_8_inst(.X(X),.A1(A1),.A2(A2));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_ND2_CDC_0P5( X, A1, A2 );
input A1, A2;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_ND2_CDC_0P5_func SAEDRVT14_ND2_CDC_0P5_behav_inst(.X(X),.A1(A1),.A2(A2));
`else
   SAEDRVT14_ND2_CDC_0P5_func SAEDRVT14_ND2_CDC_0P5_inst(.X(X),.A1(A1),.A2(A2));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_ND2_CDC_1( X, A1, A2 );
input A1, A2;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_ND2_CDC_1_func SAEDRVT14_ND2_CDC_1_behav_inst(.X(X),.A1(A1),.A2(A2));
`else
   SAEDRVT14_ND2_CDC_1_func SAEDRVT14_ND2_CDC_1_inst(.X(X),.A1(A1),.A2(A2));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_ND2_CDC_2( X, A1, A2 );
input A1, A2;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_ND2_CDC_2_func SAEDRVT14_ND2_CDC_2_behav_inst(.X(X),.A1(A1),.A2(A2));
`else
   SAEDRVT14_ND2_CDC_2_func SAEDRVT14_ND2_CDC_2_inst(.X(X),.A1(A1),.A2(A2));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_ND2_CDC_4( X, A1, A2 );
input A1, A2;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_ND2_CDC_4_func SAEDRVT14_ND2_CDC_4_behav_inst(.X(X),.A1(A1),.A2(A2));
`else
   SAEDRVT14_ND2_CDC_4_func SAEDRVT14_ND2_CDC_4_inst(.X(X),.A1(A1),.A2(A2));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_ND2_ECO_1( X, A1, A2 );
input A1, A2;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_ND2_ECO_1_func SAEDRVT14_ND2_ECO_1_behav_inst(.X(X),.A1(A1),.A2(A2));
`else
   SAEDRVT14_ND2_ECO_1_func SAEDRVT14_ND2_ECO_1_inst(.X(X),.A1(A1),.A2(A2));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_ND2_ECO_2( X, A1, A2 );
input A1, A2;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_ND2_ECO_2_func SAEDRVT14_ND2_ECO_2_behav_inst(.X(X),.A1(A1),.A2(A2));
`else
   SAEDRVT14_ND2_ECO_2_func SAEDRVT14_ND2_ECO_2_inst(.X(X),.A1(A1),.A2(A2));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_ND2_MM_0P5( X, A1, A2 );
input A1, A2;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_ND2_MM_0P5_func SAEDRVT14_ND2_MM_0P5_behav_inst(.X(X),.A1(A1),.A2(A2));
`else
   SAEDRVT14_ND2_MM_0P5_func SAEDRVT14_ND2_MM_0P5_inst(.X(X),.A1(A1),.A2(A2));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_ND2_MM_1( X, A1, A2 );
input A1, A2;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_ND2_MM_1_func SAEDRVT14_ND2_MM_1_behav_inst(.X(X),.A1(A1),.A2(A2));
`else
   SAEDRVT14_ND2_MM_1_func SAEDRVT14_ND2_MM_1_inst(.X(X),.A1(A1),.A2(A2));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_ND2_MM_10( X, A1, A2 );
input A1, A2;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_ND2_MM_10_func SAEDRVT14_ND2_MM_10_behav_inst(.X(X),.A1(A1),.A2(A2));
`else
   SAEDRVT14_ND2_MM_10_func SAEDRVT14_ND2_MM_10_inst(.X(X),.A1(A1),.A2(A2));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_ND2_MM_12( X, A1, A2 );
input A1, A2;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_ND2_MM_12_func SAEDRVT14_ND2_MM_12_behav_inst(.X(X),.A1(A1),.A2(A2));
`else
   SAEDRVT14_ND2_MM_12_func SAEDRVT14_ND2_MM_12_inst(.X(X),.A1(A1),.A2(A2));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_ND2_MM_16( X, A1, A2 );
input A1, A2;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_ND2_MM_16_func SAEDRVT14_ND2_MM_16_behav_inst(.X(X),.A1(A1),.A2(A2));
`else
   SAEDRVT14_ND2_MM_16_func SAEDRVT14_ND2_MM_16_inst(.X(X),.A1(A1),.A2(A2));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_ND2_MM_2( X, A1, A2 );
input A1, A2;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_ND2_MM_2_func SAEDRVT14_ND2_MM_2_behav_inst(.X(X),.A1(A1),.A2(A2));
`else
   SAEDRVT14_ND2_MM_2_func SAEDRVT14_ND2_MM_2_inst(.X(X),.A1(A1),.A2(A2));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_ND2_MM_3( X, A1, A2 );
input A1, A2;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_ND2_MM_3_func SAEDRVT14_ND2_MM_3_behav_inst(.X(X),.A1(A1),.A2(A2));
`else
   SAEDRVT14_ND2_MM_3_func SAEDRVT14_ND2_MM_3_inst(.X(X),.A1(A1),.A2(A2));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_ND2_MM_4( X, A1, A2 );
input A1, A2;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_ND2_MM_4_func SAEDRVT14_ND2_MM_4_behav_inst(.X(X),.A1(A1),.A2(A2));
`else
   SAEDRVT14_ND2_MM_4_func SAEDRVT14_ND2_MM_4_inst(.X(X),.A1(A1),.A2(A2));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_ND2_MM_6( X, A1, A2 );
input A1, A2;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_ND2_MM_6_func SAEDRVT14_ND2_MM_6_behav_inst(.X(X),.A1(A1),.A2(A2));
`else
   SAEDRVT14_ND2_MM_6_func SAEDRVT14_ND2_MM_6_inst(.X(X),.A1(A1),.A2(A2));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_ND2_MM_8( X, A1, A2 );
input A1, A2;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_ND2_MM_8_func SAEDRVT14_ND2_MM_8_behav_inst(.X(X),.A1(A1),.A2(A2));
`else
   SAEDRVT14_ND2_MM_8_func SAEDRVT14_ND2_MM_8_inst(.X(X),.A1(A1),.A2(A2));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_ND3B_0P5( X, A, B1, B2 );
input A, B1, B2;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_ND3B_0P5_func SAEDRVT14_ND3B_0P5_behav_inst(.X(X),.A(A),.B1(B1),.B2(B2));
`else
   SAEDRVT14_ND3B_0P5_func SAEDRVT14_ND3B_0P5_inst(.X(X),.A(A),.B1(B1),.B2(B2));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A --> X
      (A => X) = (1.0,1.0);
      
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_ND3B_0P75( X, A, B1, B2 );
input A, B1, B2;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_ND3B_0P75_func SAEDRVT14_ND3B_0P75_behav_inst(.X(X),.A(A),.B1(B1),.B2(B2));
`else
   SAEDRVT14_ND3B_0P75_func SAEDRVT14_ND3B_0P75_inst(.X(X),.A(A),.B1(B1),.B2(B2));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A --> X
      (A => X) = (1.0,1.0);
      
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_ND3B_1( X, A, B1, B2 );
input A, B1, B2;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_ND3B_1_func SAEDRVT14_ND3B_1_behav_inst(.X(X),.A(A),.B1(B1),.B2(B2));
`else
   SAEDRVT14_ND3B_1_func SAEDRVT14_ND3B_1_inst(.X(X),.A(A),.B1(B1),.B2(B2));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A --> X
      (A => X) = (1.0,1.0);
      
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_ND3B_2( X, A, B1, B2 );
input A, B1, B2;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_ND3B_2_func SAEDRVT14_ND3B_2_behav_inst(.X(X),.A(A),.B1(B1),.B2(B2));
`else
   SAEDRVT14_ND3B_2_func SAEDRVT14_ND3B_2_inst(.X(X),.A(A),.B1(B1),.B2(B2));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A --> X
      (A => X) = (1.0,1.0);
      
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_ND3B_4( X, A, B1, B2 );
input A, B1, B2;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_ND3B_4_func SAEDRVT14_ND3B_4_behav_inst(.X(X),.A(A),.B1(B1),.B2(B2));
`else
   SAEDRVT14_ND3B_4_func SAEDRVT14_ND3B_4_inst(.X(X),.A(A),.B1(B1),.B2(B2));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A --> X
      (A => X) = (1.0,1.0);
      
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_ND3_0P5( X, A1, A2, A3 );
input A1, A2, A3;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_ND3_0P5_func SAEDRVT14_ND3_0P5_behav_inst(.X(X),.A1(A1),.A2(A2),.A3(A3));
`else
   SAEDRVT14_ND3_0P5_func SAEDRVT14_ND3_0P5_inst(.X(X),.A1(A1),.A2(A2),.A3(A3));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      // comb arc A3 --> X
      (A3 => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_ND3_0P75( X, A1, A2, A3 );
input A1, A2, A3;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_ND3_0P75_func SAEDRVT14_ND3_0P75_behav_inst(.X(X),.A1(A1),.A2(A2),.A3(A3));
`else
   SAEDRVT14_ND3_0P75_func SAEDRVT14_ND3_0P75_inst(.X(X),.A1(A1),.A2(A2),.A3(A3));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      // comb arc A3 --> X
      (A3 => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_ND3_1( X, A1, A2, A3 );
input A1, A2, A3;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_ND3_1_func SAEDRVT14_ND3_1_behav_inst(.X(X),.A1(A1),.A2(A2),.A3(A3));
`else
   SAEDRVT14_ND3_1_func SAEDRVT14_ND3_1_inst(.X(X),.A1(A1),.A2(A2),.A3(A3));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      // comb arc A3 --> X
      (A3 => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_ND3_2( X, A1, A2, A3 );
input A1, A2, A3;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_ND3_2_func SAEDRVT14_ND3_2_behav_inst(.X(X),.A1(A1),.A2(A2),.A3(A3));
`else
   SAEDRVT14_ND3_2_func SAEDRVT14_ND3_2_inst(.X(X),.A1(A1),.A2(A2),.A3(A3));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      // comb arc A3 --> X
      (A3 => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_ND3_3( X, A1, A2, A3 );
input A1, A2, A3;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_ND3_3_func SAEDRVT14_ND3_3_behav_inst(.X(X),.A1(A1),.A2(A2),.A3(A3));
`else
   SAEDRVT14_ND3_3_func SAEDRVT14_ND3_3_inst(.X(X),.A1(A1),.A2(A2),.A3(A3));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      // comb arc A3 --> X
      (A3 => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_ND3_4( X, A1, A2, A3 );
input A1, A2, A3;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_ND3_4_func SAEDRVT14_ND3_4_behav_inst(.X(X),.A1(A1),.A2(A2),.A3(A3));
`else
   SAEDRVT14_ND3_4_func SAEDRVT14_ND3_4_inst(.X(X),.A1(A1),.A2(A2),.A3(A3));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      // comb arc A3 --> X
      (A3 => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_ND3_8( X, A1, A2, A3 );
input A1, A2, A3;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_ND3_8_func SAEDRVT14_ND3_8_behav_inst(.X(X),.A1(A1),.A2(A2),.A3(A3));
`else
   SAEDRVT14_ND3_8_func SAEDRVT14_ND3_8_inst(.X(X),.A1(A1),.A2(A2),.A3(A3));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      // comb arc A3 --> X
      (A3 => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_ND3_ECO_1( X, A1, A2, A3 );
input A1, A2, A3;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_ND3_ECO_1_func SAEDRVT14_ND3_ECO_1_behav_inst(.X(X),.A1(A1),.A2(A2),.A3(A3));
`else
   SAEDRVT14_ND3_ECO_1_func SAEDRVT14_ND3_ECO_1_inst(.X(X),.A1(A1),.A2(A2),.A3(A3));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      // comb arc A3 --> X
      (A3 => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_ND4_0P5( X, A1, A2, A3, A4 );
input A1, A2, A3, A4;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_ND4_0P5_func SAEDRVT14_ND4_0P5_behav_inst(.X(X),.A1(A1),.A2(A2),.A3(A3),.A4(A4));
`else
   SAEDRVT14_ND4_0P5_func SAEDRVT14_ND4_0P5_inst(.X(X),.A1(A1),.A2(A2),.A3(A3),.A4(A4));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      // comb arc A3 --> X
      (A3 => X) = (1.0,1.0);
      
      // comb arc A4 --> X
      (A4 => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_ND4_0P75( X, A1, A2, A3, A4 );
input A1, A2, A3, A4;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_ND4_0P75_func SAEDRVT14_ND4_0P75_behav_inst(.X(X),.A1(A1),.A2(A2),.A3(A3),.A4(A4));
`else
   SAEDRVT14_ND4_0P75_func SAEDRVT14_ND4_0P75_inst(.X(X),.A1(A1),.A2(A2),.A3(A3),.A4(A4));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      // comb arc A3 --> X
      (A3 => X) = (1.0,1.0);
      
      // comb arc A4 --> X
      (A4 => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_ND4_1( X, A1, A2, A3, A4 );
input A1, A2, A3, A4;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_ND4_1_func SAEDRVT14_ND4_1_behav_inst(.X(X),.A1(A1),.A2(A2),.A3(A3),.A4(A4));
`else
   SAEDRVT14_ND4_1_func SAEDRVT14_ND4_1_inst(.X(X),.A1(A1),.A2(A2),.A3(A3),.A4(A4));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      // comb arc A3 --> X
      (A3 => X) = (1.0,1.0);
      
      // comb arc A4 --> X
      (A4 => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_ND4_2( X, A1, A2, A3, A4 );
input A1, A2, A3, A4;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_ND4_2_func SAEDRVT14_ND4_2_behav_inst(.X(X),.A1(A1),.A2(A2),.A3(A3),.A4(A4));
`else
   SAEDRVT14_ND4_2_func SAEDRVT14_ND4_2_inst(.X(X),.A1(A1),.A2(A2),.A3(A3),.A4(A4));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      // comb arc A3 --> X
      (A3 => X) = (1.0,1.0);
      
      // comb arc A4 --> X
      (A4 => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_ND4_3( X, A1, A2, A3, A4 );
input A1, A2, A3, A4;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_ND4_3_func SAEDRVT14_ND4_3_behav_inst(.X(X),.A1(A1),.A2(A2),.A3(A3),.A4(A4));
`else
   SAEDRVT14_ND4_3_func SAEDRVT14_ND4_3_inst(.X(X),.A1(A1),.A2(A2),.A3(A3),.A4(A4));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      // comb arc A3 --> X
      (A3 => X) = (1.0,1.0);
      
      // comb arc A4 --> X
      (A4 => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_ND4_4( X, A1, A2, A3, A4 );
input A1, A2, A3, A4;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_ND4_4_func SAEDRVT14_ND4_4_behav_inst(.X(X),.A1(A1),.A2(A2),.A3(A3),.A4(A4));
`else
   SAEDRVT14_ND4_4_func SAEDRVT14_ND4_4_inst(.X(X),.A1(A1),.A2(A2),.A3(A3),.A4(A4));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      // comb arc A3 --> X
      (A3 => X) = (1.0,1.0);
      
      // comb arc A4 --> X
      (A4 => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_ND4_8( X, A1, A2, A3, A4 );
input A1, A2, A3, A4;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_ND4_8_func SAEDRVT14_ND4_8_behav_inst(.X(X),.A1(A1),.A2(A2),.A3(A3),.A4(A4));
`else
   SAEDRVT14_ND4_8_func SAEDRVT14_ND4_8_inst(.X(X),.A1(A1),.A2(A2),.A3(A3),.A4(A4));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      // comb arc A3 --> X
      (A3 => X) = (1.0,1.0);
      
      // comb arc A4 --> X
      (A4 => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_NR2B_0P75( X, A, B );
input A, B;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_NR2B_0P75_func SAEDRVT14_NR2B_0P75_behav_inst(.X(X),.A(A),.B(B));
`else
   SAEDRVT14_NR2B_0P75_func SAEDRVT14_NR2B_0P75_inst(.X(X),.A(A),.B(B));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A --> X
      (A => X) = (1.0,1.0);
      
      // comb arc B --> X
      (B => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_NR2B_1( X, A, B );
input A, B;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_NR2B_1_func SAEDRVT14_NR2B_1_behav_inst(.X(X),.A(A),.B(B));
`else
   SAEDRVT14_NR2B_1_func SAEDRVT14_NR2B_1_inst(.X(X),.A(A),.B(B));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A --> X
      (A => X) = (1.0,1.0);
      
      // comb arc B --> X
      (B => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_NR2B_1P5( X, A, B );
input A, B;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_NR2B_1P5_func SAEDRVT14_NR2B_1P5_behav_inst(.X(X),.A(A),.B(B));
`else
   SAEDRVT14_NR2B_1P5_func SAEDRVT14_NR2B_1P5_inst(.X(X),.A(A),.B(B));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A --> X
      (A => X) = (1.0,1.0);
      
      // comb arc B --> X
      (B => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_NR2B_2( X, A, B );
input A, B;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_NR2B_2_func SAEDRVT14_NR2B_2_behav_inst(.X(X),.A(A),.B(B));
`else
   SAEDRVT14_NR2B_2_func SAEDRVT14_NR2B_2_inst(.X(X),.A(A),.B(B));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A --> X
      (A => X) = (1.0,1.0);
      
      // comb arc B --> X
      (B => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_NR2B_4( X, A, B );
input A, B;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_NR2B_4_func SAEDRVT14_NR2B_4_behav_inst(.X(X),.A(A),.B(B));
`else
   SAEDRVT14_NR2B_4_func SAEDRVT14_NR2B_4_inst(.X(X),.A(A),.B(B));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A --> X
      (A => X) = (1.0,1.0);
      
      // comb arc B --> X
      (B => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_NR2B_U_0P5( X, A, B );
input A, B;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_NR2B_U_0P5_func SAEDRVT14_NR2B_U_0P5_behav_inst(.X(X),.A(A),.B(B));
`else
   SAEDRVT14_NR2B_U_0P5_func SAEDRVT14_NR2B_U_0P5_inst(.X(X),.A(A),.B(B));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A --> X
      (A => X) = (1.0,1.0);
      
      // comb arc B --> X
      (B => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_NR2_0P5( X, A1, A2 );
input A1, A2;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_NR2_0P5_func SAEDRVT14_NR2_0P5_behav_inst(.X(X),.A1(A1),.A2(A2));
`else
   SAEDRVT14_NR2_0P5_func SAEDRVT14_NR2_0P5_inst(.X(X),.A1(A1),.A2(A2));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_NR2_1( X, A1, A2 );
input A1, A2;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_NR2_1_func SAEDRVT14_NR2_1_behav_inst(.X(X),.A1(A1),.A2(A2));
`else
   SAEDRVT14_NR2_1_func SAEDRVT14_NR2_1_inst(.X(X),.A1(A1),.A2(A2));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_NR2_16( X, A1, A2 );
input A1, A2;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_NR2_16_func SAEDRVT14_NR2_16_behav_inst(.X(X),.A1(A1),.A2(A2));
`else
   SAEDRVT14_NR2_16_func SAEDRVT14_NR2_16_inst(.X(X),.A1(A1),.A2(A2));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_NR2_1P5( X, A1, A2 );
input A1, A2;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_NR2_1P5_func SAEDRVT14_NR2_1P5_behav_inst(.X(X),.A1(A1),.A2(A2));
`else
   SAEDRVT14_NR2_1P5_func SAEDRVT14_NR2_1P5_inst(.X(X),.A1(A1),.A2(A2));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_NR2_2( X, A1, A2 );
input A1, A2;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_NR2_2_func SAEDRVT14_NR2_2_behav_inst(.X(X),.A1(A1),.A2(A2));
`else
   SAEDRVT14_NR2_2_func SAEDRVT14_NR2_2_inst(.X(X),.A1(A1),.A2(A2));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_NR2_3( X, A1, A2 );
input A1, A2;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_NR2_3_func SAEDRVT14_NR2_3_behav_inst(.X(X),.A1(A1),.A2(A2));
`else
   SAEDRVT14_NR2_3_func SAEDRVT14_NR2_3_inst(.X(X),.A1(A1),.A2(A2));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_NR2_4( X, A1, A2 );
input A1, A2;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_NR2_4_func SAEDRVT14_NR2_4_behav_inst(.X(X),.A1(A1),.A2(A2));
`else
   SAEDRVT14_NR2_4_func SAEDRVT14_NR2_4_inst(.X(X),.A1(A1),.A2(A2));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_NR2_5( X, A1, A2 );
input A1, A2;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_NR2_5_func SAEDRVT14_NR2_5_behav_inst(.X(X),.A1(A1),.A2(A2));
`else
   SAEDRVT14_NR2_5_func SAEDRVT14_NR2_5_inst(.X(X),.A1(A1),.A2(A2));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_NR2_6( X, A1, A2 );
input A1, A2;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_NR2_6_func SAEDRVT14_NR2_6_behav_inst(.X(X),.A1(A1),.A2(A2));
`else
   SAEDRVT14_NR2_6_func SAEDRVT14_NR2_6_inst(.X(X),.A1(A1),.A2(A2));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_NR2_8( X, A1, A2 );
input A1, A2;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_NR2_8_func SAEDRVT14_NR2_8_behav_inst(.X(X),.A1(A1),.A2(A2));
`else
   SAEDRVT14_NR2_8_func SAEDRVT14_NR2_8_inst(.X(X),.A1(A1),.A2(A2));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_NR2_ECO_1( X, A1, A2 );
input A1, A2;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_NR2_ECO_1_func SAEDRVT14_NR2_ECO_1_behav_inst(.X(X),.A1(A1),.A2(A2));
`else
   SAEDRVT14_NR2_ECO_1_func SAEDRVT14_NR2_ECO_1_inst(.X(X),.A1(A1),.A2(A2));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_NR2_ECO_2( X, A1, A2 );
input A1, A2;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_NR2_ECO_2_func SAEDRVT14_NR2_ECO_2_behav_inst(.X(X),.A1(A1),.A2(A2));
`else
   SAEDRVT14_NR2_ECO_2_func SAEDRVT14_NR2_ECO_2_inst(.X(X),.A1(A1),.A2(A2));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_NR2_MM_0P5( X, A1, A2 );
input A1, A2;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_NR2_MM_0P5_func SAEDRVT14_NR2_MM_0P5_behav_inst(.X(X),.A1(A1),.A2(A2));
`else
   SAEDRVT14_NR2_MM_0P5_func SAEDRVT14_NR2_MM_0P5_inst(.X(X),.A1(A1),.A2(A2));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_NR2_MM_1( X, A1, A2 );
input A1, A2;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_NR2_MM_1_func SAEDRVT14_NR2_MM_1_behav_inst(.X(X),.A1(A1),.A2(A2));
`else
   SAEDRVT14_NR2_MM_1_func SAEDRVT14_NR2_MM_1_inst(.X(X),.A1(A1),.A2(A2));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_NR2_MM_10( X, A1, A2 );
input A1, A2;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_NR2_MM_10_func SAEDRVT14_NR2_MM_10_behav_inst(.X(X),.A1(A1),.A2(A2));
`else
   SAEDRVT14_NR2_MM_10_func SAEDRVT14_NR2_MM_10_inst(.X(X),.A1(A1),.A2(A2));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_NR2_MM_12( X, A1, A2 );
input A1, A2;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_NR2_MM_12_func SAEDRVT14_NR2_MM_12_behav_inst(.X(X),.A1(A1),.A2(A2));
`else
   SAEDRVT14_NR2_MM_12_func SAEDRVT14_NR2_MM_12_inst(.X(X),.A1(A1),.A2(A2));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_NR2_MM_16( X, A1, A2 );
input A1, A2;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_NR2_MM_16_func SAEDRVT14_NR2_MM_16_behav_inst(.X(X),.A1(A1),.A2(A2));
`else
   SAEDRVT14_NR2_MM_16_func SAEDRVT14_NR2_MM_16_inst(.X(X),.A1(A1),.A2(A2));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_NR2_MM_2( X, A1, A2 );
input A1, A2;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_NR2_MM_2_func SAEDRVT14_NR2_MM_2_behav_inst(.X(X),.A1(A1),.A2(A2));
`else
   SAEDRVT14_NR2_MM_2_func SAEDRVT14_NR2_MM_2_inst(.X(X),.A1(A1),.A2(A2));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_NR2_MM_3( X, A1, A2 );
input A1, A2;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_NR2_MM_3_func SAEDRVT14_NR2_MM_3_behav_inst(.X(X),.A1(A1),.A2(A2));
`else
   SAEDRVT14_NR2_MM_3_func SAEDRVT14_NR2_MM_3_inst(.X(X),.A1(A1),.A2(A2));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_NR2_MM_4( X, A1, A2 );
input A1, A2;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_NR2_MM_4_func SAEDRVT14_NR2_MM_4_behav_inst(.X(X),.A1(A1),.A2(A2));
`else
   SAEDRVT14_NR2_MM_4_func SAEDRVT14_NR2_MM_4_inst(.X(X),.A1(A1),.A2(A2));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_NR2_MM_6( X, A1, A2 );
input A1, A2;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_NR2_MM_6_func SAEDRVT14_NR2_MM_6_behav_inst(.X(X),.A1(A1),.A2(A2));
`else
   SAEDRVT14_NR2_MM_6_func SAEDRVT14_NR2_MM_6_inst(.X(X),.A1(A1),.A2(A2));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_NR2_MM_8( X, A1, A2 );
input A1, A2;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_NR2_MM_8_func SAEDRVT14_NR2_MM_8_behav_inst(.X(X),.A1(A1),.A2(A2));
`else
   SAEDRVT14_NR2_MM_8_func SAEDRVT14_NR2_MM_8_inst(.X(X),.A1(A1),.A2(A2));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_NR3B_0P75( X, A, B1, B2 );
input A, B1, B2;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_NR3B_0P75_func SAEDRVT14_NR3B_0P75_behav_inst(.X(X),.A(A),.B1(B1),.B2(B2));
`else
   SAEDRVT14_NR3B_0P75_func SAEDRVT14_NR3B_0P75_inst(.X(X),.A(A),.B1(B1),.B2(B2));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A --> X
      (A => X) = (1.0,1.0);
      
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_NR3B_1( X, A, B1, B2 );
input A, B1, B2;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_NR3B_1_func SAEDRVT14_NR3B_1_behav_inst(.X(X),.A(A),.B1(B1),.B2(B2));
`else
   SAEDRVT14_NR3B_1_func SAEDRVT14_NR3B_1_inst(.X(X),.A(A),.B1(B1),.B2(B2));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A --> X
      (A => X) = (1.0,1.0);
      
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_NR3B_1P5( X, A, B1, B2 );
input A, B1, B2;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_NR3B_1P5_func SAEDRVT14_NR3B_1P5_behav_inst(.X(X),.A(A),.B1(B1),.B2(B2));
`else
   SAEDRVT14_NR3B_1P5_func SAEDRVT14_NR3B_1P5_inst(.X(X),.A(A),.B1(B1),.B2(B2));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A --> X
      (A => X) = (1.0,1.0);
      
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_NR3B_2( X, A, B1, B2 );
input A, B1, B2;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_NR3B_2_func SAEDRVT14_NR3B_2_behav_inst(.X(X),.A(A),.B1(B1),.B2(B2));
`else
   SAEDRVT14_NR3B_2_func SAEDRVT14_NR3B_2_inst(.X(X),.A(A),.B1(B1),.B2(B2));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A --> X
      (A => X) = (1.0,1.0);
      
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_NR3B_4( X, A, B1, B2 );
input A, B1, B2;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_NR3B_4_func SAEDRVT14_NR3B_4_behav_inst(.X(X),.A(A),.B1(B1),.B2(B2));
`else
   SAEDRVT14_NR3B_4_func SAEDRVT14_NR3B_4_inst(.X(X),.A(A),.B1(B1),.B2(B2));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A --> X
      (A => X) = (1.0,1.0);
      
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_NR3B_U_0P5( X, A, B1, B2 );
input A, B1, B2;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_NR3B_U_0P5_func SAEDRVT14_NR3B_U_0P5_behav_inst(.X(X),.A(A),.B1(B1),.B2(B2));
`else
   SAEDRVT14_NR3B_U_0P5_func SAEDRVT14_NR3B_U_0P5_inst(.X(X),.A(A),.B1(B1),.B2(B2));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A --> X
      (A => X) = (1.0,1.0);
      
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_NR3_0P5( X, A1, A2, A3 );
input A1, A2, A3;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_NR3_0P5_func SAEDRVT14_NR3_0P5_behav_inst(.X(X),.A1(A1),.A2(A2),.A3(A3));
`else
   SAEDRVT14_NR3_0P5_func SAEDRVT14_NR3_0P5_inst(.X(X),.A1(A1),.A2(A2),.A3(A3));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      // comb arc A3 --> X
      (A3 => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_NR3_0P75( X, A1, A2, A3 );
input A1, A2, A3;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_NR3_0P75_func SAEDRVT14_NR3_0P75_behav_inst(.X(X),.A1(A1),.A2(A2),.A3(A3));
`else
   SAEDRVT14_NR3_0P75_func SAEDRVT14_NR3_0P75_inst(.X(X),.A1(A1),.A2(A2),.A3(A3));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      // comb arc A3 --> X
      (A3 => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_NR3_1( X, A1, A2, A3 );
input A1, A2, A3;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_NR3_1_func SAEDRVT14_NR3_1_behav_inst(.X(X),.A1(A1),.A2(A2),.A3(A3));
`else
   SAEDRVT14_NR3_1_func SAEDRVT14_NR3_1_inst(.X(X),.A1(A1),.A2(A2),.A3(A3));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      // comb arc A3 --> X
      (A3 => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_NR3_2( X, A1, A2, A3 );
input A1, A2, A3;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_NR3_2_func SAEDRVT14_NR3_2_behav_inst(.X(X),.A1(A1),.A2(A2),.A3(A3));
`else
   SAEDRVT14_NR3_2_func SAEDRVT14_NR3_2_inst(.X(X),.A1(A1),.A2(A2),.A3(A3));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      // comb arc A3 --> X
      (A3 => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_NR3_3( X, A1, A2, A3 );
input A1, A2, A3;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_NR3_3_func SAEDRVT14_NR3_3_behav_inst(.X(X),.A1(A1),.A2(A2),.A3(A3));
`else
   SAEDRVT14_NR3_3_func SAEDRVT14_NR3_3_inst(.X(X),.A1(A1),.A2(A2),.A3(A3));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      // comb arc A3 --> X
      (A3 => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_NR3_4( X, A1, A2, A3 );
input A1, A2, A3;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_NR3_4_func SAEDRVT14_NR3_4_behav_inst(.X(X),.A1(A1),.A2(A2),.A3(A3));
`else
   SAEDRVT14_NR3_4_func SAEDRVT14_NR3_4_inst(.X(X),.A1(A1),.A2(A2),.A3(A3));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      // comb arc A3 --> X
      (A3 => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_NR3_8( X, A1, A2, A3 );
input A1, A2, A3;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_NR3_8_func SAEDRVT14_NR3_8_behav_inst(.X(X),.A1(A1),.A2(A2),.A3(A3));
`else
   SAEDRVT14_NR3_8_func SAEDRVT14_NR3_8_inst(.X(X),.A1(A1),.A2(A2),.A3(A3));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      // comb arc A3 --> X
      (A3 => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_NR3_ECO_1( X, A1, A2, A3 );
input A1, A2, A3;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_NR3_ECO_1_func SAEDRVT14_NR3_ECO_1_behav_inst(.X(X),.A1(A1),.A2(A2),.A3(A3));
`else
   SAEDRVT14_NR3_ECO_1_func SAEDRVT14_NR3_ECO_1_inst(.X(X),.A1(A1),.A2(A2),.A3(A3));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      // comb arc A3 --> X
      (A3 => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_NR4_0P75( X, A1, A2, A3, A4 );
input A1, A2, A3, A4;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_NR4_0P75_func SAEDRVT14_NR4_0P75_behav_inst(.X(X),.A1(A1),.A2(A2),.A3(A3),.A4(A4));
`else
   SAEDRVT14_NR4_0P75_func SAEDRVT14_NR4_0P75_inst(.X(X),.A1(A1),.A2(A2),.A3(A3),.A4(A4));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      // comb arc A3 --> X
      (A3 => X) = (1.0,1.0);
      
      // comb arc A4 --> X
      (A4 => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_NR4_2( X, A1, A2, A3, A4 );
input A1, A2, A3, A4;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_NR4_2_func SAEDRVT14_NR4_2_behav_inst(.X(X),.A1(A1),.A2(A2),.A3(A3),.A4(A4));
`else
   SAEDRVT14_NR4_2_func SAEDRVT14_NR4_2_inst(.X(X),.A1(A1),.A2(A2),.A3(A3),.A4(A4));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      // comb arc A3 --> X
      (A3 => X) = (1.0,1.0);
      
      // comb arc A4 --> X
      (A4 => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_OA211_1( X, A1, A2, B1, B2 );
input A1, A2, B1, B2;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_OA211_1_func SAEDRVT14_OA211_1_behav_inst(.X(X),.A1(A1),.A2(A2),.B1(B1),.B2(B2));
`else
   SAEDRVT14_OA211_1_func SAEDRVT14_OA211_1_inst(.X(X),.A1(A1),.A2(A2),.B1(B1),.B2(B2));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      ifnone
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      ifnone
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_OA211_2( X, A1, A2, B1, B2 );
input A1, A2, B1, B2;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_OA211_2_func SAEDRVT14_OA211_2_behav_inst(.X(X),.A1(A1),.A2(A2),.B1(B1),.B2(B2));
`else
   SAEDRVT14_OA211_2_func SAEDRVT14_OA211_2_inst(.X(X),.A1(A1),.A2(A2),.B1(B1),.B2(B2));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      ifnone
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      ifnone
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_OA211_4( X, A1, A2, B1, B2 );
input A1, A2, B1, B2;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_OA211_4_func SAEDRVT14_OA211_4_behav_inst(.X(X),.A1(A1),.A2(A2),.B1(B1),.B2(B2));
`else
   SAEDRVT14_OA211_4_func SAEDRVT14_OA211_4_inst(.X(X),.A1(A1),.A2(A2),.B1(B1),.B2(B2));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      ifnone
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      ifnone
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_OA211_U_0P5( X, A1, A2, B1, B2 );
input A1, A2, B1, B2;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_OA211_U_0P5_func SAEDRVT14_OA211_U_0P5_behav_inst(.X(X),.A1(A1),.A2(A2),.B1(B1),.B2(B2));
`else
   SAEDRVT14_OA211_U_0P5_func SAEDRVT14_OA211_U_0P5_inst(.X(X),.A1(A1),.A2(A2),.B1(B1),.B2(B2));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      ifnone
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      ifnone
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_OA21B_1( X, A1, A2, B );
input A1, A2, B;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_OA21B_1_func SAEDRVT14_OA21B_1_behav_inst(.X(X),.A1(A1),.A2(A2),.B(B));
`else
   SAEDRVT14_OA21B_1_func SAEDRVT14_OA21B_1_inst(.X(X),.A1(A1),.A2(A2),.B(B));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1)
      // comb arc B --> X
      (B => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0)
      // comb arc B --> X
      (B => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1)
      // comb arc B --> X
      (B => X) = (1.0,1.0);
      
      ifnone
      // comb arc B --> X
      (B => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_OA21B_2( X, A1, A2, B );
input A1, A2, B;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_OA21B_2_func SAEDRVT14_OA21B_2_behav_inst(.X(X),.A1(A1),.A2(A2),.B(B));
`else
   SAEDRVT14_OA21B_2_func SAEDRVT14_OA21B_2_inst(.X(X),.A1(A1),.A2(A2),.B(B));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1)
      // comb arc B --> X
      (B => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0)
      // comb arc B --> X
      (B => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1)
      // comb arc B --> X
      (B => X) = (1.0,1.0);
      
      ifnone
      // comb arc B --> X
      (B => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_OA21B_4( X, A1, A2, B );
input A1, A2, B;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_OA21B_4_func SAEDRVT14_OA21B_4_behav_inst(.X(X),.A1(A1),.A2(A2),.B(B));
`else
   SAEDRVT14_OA21B_4_func SAEDRVT14_OA21B_4_inst(.X(X),.A1(A1),.A2(A2),.B(B));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1)
      // comb arc B --> X
      (B => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0)
      // comb arc B --> X
      (B => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1)
      // comb arc B --> X
      (B => X) = (1.0,1.0);
      
      ifnone
      // comb arc B --> X
      (B => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_OA21B_U_0P5( X, A1, A2, B );
input A1, A2, B;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_OA21B_U_0P5_func SAEDRVT14_OA21B_U_0P5_behav_inst(.X(X),.A1(A1),.A2(A2),.B(B));
`else
   SAEDRVT14_OA21B_U_0P5_func SAEDRVT14_OA21B_U_0P5_inst(.X(X),.A1(A1),.A2(A2),.B(B));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1)
      // comb arc B --> X
      (B => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0)
      // comb arc B --> X
      (B => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1)
      // comb arc B --> X
      (B => X) = (1.0,1.0);
      
      ifnone
      // comb arc B --> X
      (B => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_OA21_1( X, A1, A2, B );
input A1, A2, B;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_OA21_1_func SAEDRVT14_OA21_1_behav_inst(.X(X),.A1(A1),.A2(A2),.B(B));
`else
   SAEDRVT14_OA21_1_func SAEDRVT14_OA21_1_inst(.X(X),.A1(A1),.A2(A2),.B(B));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1)
      // comb arc B --> X
      (B => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0)
      // comb arc B --> X
      (B => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1)
      // comb arc B --> X
      (B => X) = (1.0,1.0);
      
      ifnone
      // comb arc B --> X
      (B => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_OA21_2( X, A1, A2, B );
input A1, A2, B;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_OA21_2_func SAEDRVT14_OA21_2_behav_inst(.X(X),.A1(A1),.A2(A2),.B(B));
`else
   SAEDRVT14_OA21_2_func SAEDRVT14_OA21_2_inst(.X(X),.A1(A1),.A2(A2),.B(B));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1)
      // comb arc B --> X
      (B => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0)
      // comb arc B --> X
      (B => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1)
      // comb arc B --> X
      (B => X) = (1.0,1.0);
      
      ifnone
      // comb arc B --> X
      (B => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_OA21_4( X, A1, A2, B );
input A1, A2, B;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_OA21_4_func SAEDRVT14_OA21_4_behav_inst(.X(X),.A1(A1),.A2(A2),.B(B));
`else
   SAEDRVT14_OA21_4_func SAEDRVT14_OA21_4_inst(.X(X),.A1(A1),.A2(A2),.B(B));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1)
      // comb arc B --> X
      (B => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0)
      // comb arc B --> X
      (B => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1)
      // comb arc B --> X
      (B => X) = (1.0,1.0);
      
      ifnone
      // comb arc B --> X
      (B => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_OA21_MM_1( X, A1, A2, B );
input A1, A2, B;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_OA21_MM_1_func SAEDRVT14_OA21_MM_1_behav_inst(.X(X),.A1(A1),.A2(A2),.B(B));
`else
   SAEDRVT14_OA21_MM_1_func SAEDRVT14_OA21_MM_1_inst(.X(X),.A1(A1),.A2(A2),.B(B));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1)
      // comb arc B --> X
      (B => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0)
      // comb arc B --> X
      (B => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1)
      // comb arc B --> X
      (B => X) = (1.0,1.0);
      
      ifnone
      // comb arc B --> X
      (B => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_OA21_MM_2( A2, A1, B, X );
input A1, A2, B;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_OA21_MM_2_func SAEDRVT14_OA21_MM_2_behav_inst(.A2(A2),.A1(A1),.B(B),.X(X));
`else
   SAEDRVT14_OA21_MM_2_func SAEDRVT14_OA21_MM_2_inst(.A2(A2),.A1(A1),.B(B),.X(X));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1)
      // comb arc B --> X
      (B => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0)
      // comb arc B --> X
      (B => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1)
      // comb arc B --> X
      (B => X) = (1.0,1.0);
      
      ifnone
      // comb arc B --> X
      (B => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_OA21_MM_6( X, A1, A2, B );
input A1, A2, B;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_OA21_MM_6_func SAEDRVT14_OA21_MM_6_behav_inst(.X(X),.A1(A1),.A2(A2),.B(B));
`else
   SAEDRVT14_OA21_MM_6_func SAEDRVT14_OA21_MM_6_inst(.X(X),.A1(A1),.A2(A2),.B(B));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1)
      // comb arc B --> X
      (B => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0)
      // comb arc B --> X
      (B => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1)
      // comb arc B --> X
      (B => X) = (1.0,1.0);
      
      ifnone
      // comb arc B --> X
      (B => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_OA21_U_0P5( X, A1, A2, B );
input A1, A2, B;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_OA21_U_0P5_func SAEDRVT14_OA21_U_0P5_behav_inst(.X(X),.A1(A1),.A2(A2),.B(B));
`else
   SAEDRVT14_OA21_U_0P5_func SAEDRVT14_OA21_U_0P5_inst(.X(X),.A1(A1),.A2(A2),.B(B));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1)
      // comb arc B --> X
      (B => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0)
      // comb arc B --> X
      (B => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1)
      // comb arc B --> X
      (B => X) = (1.0,1.0);
      
      ifnone
      // comb arc B --> X
      (B => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_OA221_1( X, A1, A2, B1, B2, C );
input A1, A2, B1, B2, C;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_OA221_1_func SAEDRVT14_OA221_1_behav_inst(.X(X),.A1(A1),.A2(A2),.B1(B1),.B2(B2),.C(C));
`else
   SAEDRVT14_OA221_1_func SAEDRVT14_OA221_1_inst(.X(X),.A1(A1),.A2(A2),.B1(B1),.B2(B2),.C(C));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      if(B1===1'b0 && B2===1'b1)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b0)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b1)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      ifnone
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b1)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b0)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b1)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      ifnone
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      ifnone
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      ifnone
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && B1===1'b0 && B2===1'b1)
      // comb arc C --> X
      (C => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && B1===1'b1 && B2===1'b0)
      // comb arc C --> X
      (C => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && B1===1'b1 && B2===1'b1)
      // comb arc C --> X
      (C => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && B1===1'b0 && B2===1'b1)
      // comb arc C --> X
      (C => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && B1===1'b1 && B2===1'b0)
      // comb arc C --> X
      (C => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && B1===1'b1 && B2===1'b1)
      // comb arc C --> X
      (C => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1 && B1===1'b0 && B2===1'b1)
      // comb arc C --> X
      (C => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1 && B1===1'b1 && B2===1'b0)
      // comb arc C --> X
      (C => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1 && B1===1'b1 && B2===1'b1)
      // comb arc C --> X
      (C => X) = (1.0,1.0);
      
      ifnone
      // comb arc C --> X
      (C => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_OA221_2( X, A1, A2, B1, B2, C );
input A1, A2, B1, B2, C;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_OA221_2_func SAEDRVT14_OA221_2_behav_inst(.X(X),.A1(A1),.A2(A2),.B1(B1),.B2(B2),.C(C));
`else
   SAEDRVT14_OA221_2_func SAEDRVT14_OA221_2_inst(.X(X),.A1(A1),.A2(A2),.B1(B1),.B2(B2),.C(C));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      if(B1===1'b0 && B2===1'b1)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b0)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b1)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      ifnone
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b1)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b0)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b1)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      ifnone
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      ifnone
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      ifnone
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && B1===1'b0 && B2===1'b1)
      // comb arc C --> X
      (C => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && B1===1'b1 && B2===1'b0)
      // comb arc C --> X
      (C => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && B1===1'b1 && B2===1'b1)
      // comb arc C --> X
      (C => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && B1===1'b0 && B2===1'b1)
      // comb arc C --> X
      (C => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && B1===1'b1 && B2===1'b0)
      // comb arc C --> X
      (C => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && B1===1'b1 && B2===1'b1)
      // comb arc C --> X
      (C => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1 && B1===1'b0 && B2===1'b1)
      // comb arc C --> X
      (C => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1 && B1===1'b1 && B2===1'b0)
      // comb arc C --> X
      (C => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1 && B1===1'b1 && B2===1'b1)
      // comb arc C --> X
      (C => X) = (1.0,1.0);
      
      ifnone
      // comb arc C --> X
      (C => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_OA221_4( X, A1, A2, B1, B2, C );
input A1, A2, B1, B2, C;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_OA221_4_func SAEDRVT14_OA221_4_behav_inst(.X(X),.A1(A1),.A2(A2),.B1(B1),.B2(B2),.C(C));
`else
   SAEDRVT14_OA221_4_func SAEDRVT14_OA221_4_inst(.X(X),.A1(A1),.A2(A2),.B1(B1),.B2(B2),.C(C));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      if(B1===1'b0 && B2===1'b1)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b0)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b1)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      ifnone
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b1)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b0)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b1)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      ifnone
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      ifnone
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      ifnone
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && B1===1'b0 && B2===1'b1)
      // comb arc C --> X
      (C => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && B1===1'b1 && B2===1'b0)
      // comb arc C --> X
      (C => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && B1===1'b1 && B2===1'b1)
      // comb arc C --> X
      (C => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && B1===1'b0 && B2===1'b1)
      // comb arc C --> X
      (C => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && B1===1'b1 && B2===1'b0)
      // comb arc C --> X
      (C => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && B1===1'b1 && B2===1'b1)
      // comb arc C --> X
      (C => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1 && B1===1'b0 && B2===1'b1)
      // comb arc C --> X
      (C => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1 && B1===1'b1 && B2===1'b0)
      // comb arc C --> X
      (C => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1 && B1===1'b1 && B2===1'b1)
      // comb arc C --> X
      (C => X) = (1.0,1.0);
      
      ifnone
      // comb arc C --> X
      (C => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_OA221_U_0P5( X, A1, A2, B1, B2, C );
input A1, A2, B1, B2, C;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_OA221_U_0P5_func SAEDRVT14_OA221_U_0P5_behav_inst(.X(X),.A1(A1),.A2(A2),.B1(B1),.B2(B2),.C(C));
`else
   SAEDRVT14_OA221_U_0P5_func SAEDRVT14_OA221_U_0P5_inst(.X(X),.A1(A1),.A2(A2),.B1(B1),.B2(B2),.C(C));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      if(B1===1'b0 && B2===1'b1)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b0)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b1)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      ifnone
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b1)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b0)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b1)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      ifnone
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      ifnone
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      ifnone
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && B1===1'b0 && B2===1'b1)
      // comb arc C --> X
      (C => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && B1===1'b1 && B2===1'b0)
      // comb arc C --> X
      (C => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && B1===1'b1 && B2===1'b1)
      // comb arc C --> X
      (C => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && B1===1'b0 && B2===1'b1)
      // comb arc C --> X
      (C => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && B1===1'b1 && B2===1'b0)
      // comb arc C --> X
      (C => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && B1===1'b1 && B2===1'b1)
      // comb arc C --> X
      (C => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1 && B1===1'b0 && B2===1'b1)
      // comb arc C --> X
      (C => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1 && B1===1'b1 && B2===1'b0)
      // comb arc C --> X
      (C => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1 && B1===1'b1 && B2===1'b1)
      // comb arc C --> X
      (C => X) = (1.0,1.0);
      
      ifnone
      // comb arc C --> X
      (C => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_OA222_1( X, A1, A2, B1, B2, C1, C2 );
input A1, A2, B1, B2, C1, C2;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_OA222_1_func SAEDRVT14_OA222_1_behav_inst(.X(X),.A1(A1),.A2(A2),.B1(B1),.B2(B2),.C1(C1),.C2(C2));
`else
   SAEDRVT14_OA222_1_func SAEDRVT14_OA222_1_inst(.X(X),.A1(A1),.A2(A2),.B1(B1),.B2(B2),.C1(C1),.C2(C2));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      if(B1===1'b0 && B2===1'b1 && C1===1'b0 && C2===1'b1)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b1 && C1===1'b1 && C2===1'b0)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b1 && C1===1'b1 && C2===1'b1)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b0 && C1===1'b0 && C2===1'b1)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b0 && C1===1'b1 && C2===1'b0)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b0 && C1===1'b1 && C2===1'b1)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b1 && C1===1'b0 && C2===1'b1)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b1 && C1===1'b1 && C2===1'b0)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b1 && C1===1'b1 && C2===1'b1)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      ifnone
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b1 && C1===1'b0 && C2===1'b1)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b1 && C1===1'b1 && C2===1'b0)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b1 && C1===1'b1 && C2===1'b1)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b0 && C1===1'b0 && C2===1'b1)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b0 && C1===1'b1 && C2===1'b0)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b0 && C1===1'b1 && C2===1'b1)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b1 && C1===1'b0 && C2===1'b1)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b1 && C1===1'b1 && C2===1'b0)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b1 && C1===1'b1 && C2===1'b1)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      ifnone
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && C1===1'b0 && C2===1'b1)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && C1===1'b1 && C2===1'b0)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && C1===1'b1 && C2===1'b1)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && C1===1'b0 && C2===1'b1)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && C1===1'b1 && C2===1'b0)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && C1===1'b1 && C2===1'b1)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1 && C1===1'b0 && C2===1'b1)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1 && C1===1'b1 && C2===1'b0)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1 && C1===1'b1 && C2===1'b1)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      ifnone
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && C1===1'b0 && C2===1'b1)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && C1===1'b1 && C2===1'b0)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && C1===1'b1 && C2===1'b1)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && C1===1'b0 && C2===1'b1)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && C1===1'b1 && C2===1'b0)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && C1===1'b1 && C2===1'b1)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1 && C1===1'b0 && C2===1'b1)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1 && C1===1'b1 && C2===1'b0)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1 && C1===1'b1 && C2===1'b1)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      ifnone
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && B1===1'b0 && B2===1'b1)
      // comb arc C1 --> X
      (C1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && B1===1'b1 && B2===1'b0)
      // comb arc C1 --> X
      (C1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && B1===1'b1 && B2===1'b1)
      // comb arc C1 --> X
      (C1 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && B1===1'b0 && B2===1'b1)
      // comb arc C1 --> X
      (C1 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && B1===1'b1 && B2===1'b0)
      // comb arc C1 --> X
      (C1 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && B1===1'b1 && B2===1'b1)
      // comb arc C1 --> X
      (C1 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1 && B1===1'b0 && B2===1'b1)
      // comb arc C1 --> X
      (C1 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1 && B1===1'b1 && B2===1'b0)
      // comb arc C1 --> X
      (C1 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1 && B1===1'b1 && B2===1'b1)
      // comb arc C1 --> X
      (C1 => X) = (1.0,1.0);
      
      ifnone
      // comb arc C1 --> X
      (C1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && B1===1'b0 && B2===1'b1)
      // comb arc C2 --> X
      (C2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && B1===1'b1 && B2===1'b0)
      // comb arc C2 --> X
      (C2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && B1===1'b1 && B2===1'b1)
      // comb arc C2 --> X
      (C2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && B1===1'b0 && B2===1'b1)
      // comb arc C2 --> X
      (C2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && B1===1'b1 && B2===1'b0)
      // comb arc C2 --> X
      (C2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && B1===1'b1 && B2===1'b1)
      // comb arc C2 --> X
      (C2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1 && B1===1'b0 && B2===1'b1)
      // comb arc C2 --> X
      (C2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1 && B1===1'b1 && B2===1'b0)
      // comb arc C2 --> X
      (C2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1 && B1===1'b1 && B2===1'b1)
      // comb arc C2 --> X
      (C2 => X) = (1.0,1.0);
      
      ifnone
      // comb arc C2 --> X
      (C2 => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_OA222_2( X, A1, A2, B1, B2, C1, C2 );
input A1, A2, B1, B2, C1, C2;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_OA222_2_func SAEDRVT14_OA222_2_behav_inst(.X(X),.A1(A1),.A2(A2),.B1(B1),.B2(B2),.C1(C1),.C2(C2));
`else
   SAEDRVT14_OA222_2_func SAEDRVT14_OA222_2_inst(.X(X),.A1(A1),.A2(A2),.B1(B1),.B2(B2),.C1(C1),.C2(C2));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      if(B1===1'b0 && B2===1'b1 && C1===1'b0 && C2===1'b1)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b1 && C1===1'b1 && C2===1'b0)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b1 && C1===1'b1 && C2===1'b1)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b0 && C1===1'b0 && C2===1'b1)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b0 && C1===1'b1 && C2===1'b0)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b0 && C1===1'b1 && C2===1'b1)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b1 && C1===1'b0 && C2===1'b1)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b1 && C1===1'b1 && C2===1'b0)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b1 && C1===1'b1 && C2===1'b1)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      ifnone
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b1 && C1===1'b0 && C2===1'b1)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b1 && C1===1'b1 && C2===1'b0)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b1 && C1===1'b1 && C2===1'b1)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b0 && C1===1'b0 && C2===1'b1)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b0 && C1===1'b1 && C2===1'b0)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b0 && C1===1'b1 && C2===1'b1)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b1 && C1===1'b0 && C2===1'b1)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b1 && C1===1'b1 && C2===1'b0)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b1 && C1===1'b1 && C2===1'b1)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      ifnone
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && C1===1'b0 && C2===1'b1)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && C1===1'b1 && C2===1'b0)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && C1===1'b1 && C2===1'b1)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && C1===1'b0 && C2===1'b1)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && C1===1'b1 && C2===1'b0)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && C1===1'b1 && C2===1'b1)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1 && C1===1'b0 && C2===1'b1)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1 && C1===1'b1 && C2===1'b0)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1 && C1===1'b1 && C2===1'b1)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      ifnone
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && C1===1'b0 && C2===1'b1)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && C1===1'b1 && C2===1'b0)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && C1===1'b1 && C2===1'b1)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && C1===1'b0 && C2===1'b1)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && C1===1'b1 && C2===1'b0)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && C1===1'b1 && C2===1'b1)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1 && C1===1'b0 && C2===1'b1)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1 && C1===1'b1 && C2===1'b0)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1 && C1===1'b1 && C2===1'b1)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      ifnone
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && B1===1'b0 && B2===1'b1)
      // comb arc C1 --> X
      (C1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && B1===1'b1 && B2===1'b0)
      // comb arc C1 --> X
      (C1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && B1===1'b1 && B2===1'b1)
      // comb arc C1 --> X
      (C1 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && B1===1'b0 && B2===1'b1)
      // comb arc C1 --> X
      (C1 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && B1===1'b1 && B2===1'b0)
      // comb arc C1 --> X
      (C1 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && B1===1'b1 && B2===1'b1)
      // comb arc C1 --> X
      (C1 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1 && B1===1'b0 && B2===1'b1)
      // comb arc C1 --> X
      (C1 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1 && B1===1'b1 && B2===1'b0)
      // comb arc C1 --> X
      (C1 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1 && B1===1'b1 && B2===1'b1)
      // comb arc C1 --> X
      (C1 => X) = (1.0,1.0);
      
      ifnone
      // comb arc C1 --> X
      (C1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && B1===1'b0 && B2===1'b1)
      // comb arc C2 --> X
      (C2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && B1===1'b1 && B2===1'b0)
      // comb arc C2 --> X
      (C2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && B1===1'b1 && B2===1'b1)
      // comb arc C2 --> X
      (C2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && B1===1'b0 && B2===1'b1)
      // comb arc C2 --> X
      (C2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && B1===1'b1 && B2===1'b0)
      // comb arc C2 --> X
      (C2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && B1===1'b1 && B2===1'b1)
      // comb arc C2 --> X
      (C2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1 && B1===1'b0 && B2===1'b1)
      // comb arc C2 --> X
      (C2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1 && B1===1'b1 && B2===1'b0)
      // comb arc C2 --> X
      (C2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1 && B1===1'b1 && B2===1'b1)
      // comb arc C2 --> X
      (C2 => X) = (1.0,1.0);
      
      ifnone
      // comb arc C2 --> X
      (C2 => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_OA222_4( X, A1, A2, B1, B2, C1, C2 );
input A1, A2, B1, B2, C1, C2;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_OA222_4_func SAEDRVT14_OA222_4_behav_inst(.X(X),.A1(A1),.A2(A2),.B1(B1),.B2(B2),.C1(C1),.C2(C2));
`else
   SAEDRVT14_OA222_4_func SAEDRVT14_OA222_4_inst(.X(X),.A1(A1),.A2(A2),.B1(B1),.B2(B2),.C1(C1),.C2(C2));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      if(B1===1'b0 && B2===1'b1 && C1===1'b0 && C2===1'b1)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b1 && C1===1'b1 && C2===1'b0)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b1 && C1===1'b1 && C2===1'b1)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b0 && C1===1'b0 && C2===1'b1)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b0 && C1===1'b1 && C2===1'b0)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b0 && C1===1'b1 && C2===1'b1)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b1 && C1===1'b0 && C2===1'b1)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b1 && C1===1'b1 && C2===1'b0)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b1 && C1===1'b1 && C2===1'b1)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      ifnone
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b1 && C1===1'b0 && C2===1'b1)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b1 && C1===1'b1 && C2===1'b0)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b1 && C1===1'b1 && C2===1'b1)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b0 && C1===1'b0 && C2===1'b1)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b0 && C1===1'b1 && C2===1'b0)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b0 && C1===1'b1 && C2===1'b1)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b1 && C1===1'b0 && C2===1'b1)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b1 && C1===1'b1 && C2===1'b0)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b1 && C1===1'b1 && C2===1'b1)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      ifnone
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && C1===1'b0 && C2===1'b1)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && C1===1'b1 && C2===1'b0)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && C1===1'b1 && C2===1'b1)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && C1===1'b0 && C2===1'b1)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && C1===1'b1 && C2===1'b0)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && C1===1'b1 && C2===1'b1)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1 && C1===1'b0 && C2===1'b1)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1 && C1===1'b1 && C2===1'b0)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1 && C1===1'b1 && C2===1'b1)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      ifnone
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && C1===1'b0 && C2===1'b1)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && C1===1'b1 && C2===1'b0)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && C1===1'b1 && C2===1'b1)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && C1===1'b0 && C2===1'b1)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && C1===1'b1 && C2===1'b0)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && C1===1'b1 && C2===1'b1)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1 && C1===1'b0 && C2===1'b1)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1 && C1===1'b1 && C2===1'b0)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1 && C1===1'b1 && C2===1'b1)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      ifnone
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && B1===1'b0 && B2===1'b1)
      // comb arc C1 --> X
      (C1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && B1===1'b1 && B2===1'b0)
      // comb arc C1 --> X
      (C1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && B1===1'b1 && B2===1'b1)
      // comb arc C1 --> X
      (C1 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && B1===1'b0 && B2===1'b1)
      // comb arc C1 --> X
      (C1 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && B1===1'b1 && B2===1'b0)
      // comb arc C1 --> X
      (C1 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && B1===1'b1 && B2===1'b1)
      // comb arc C1 --> X
      (C1 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1 && B1===1'b0 && B2===1'b1)
      // comb arc C1 --> X
      (C1 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1 && B1===1'b1 && B2===1'b0)
      // comb arc C1 --> X
      (C1 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1 && B1===1'b1 && B2===1'b1)
      // comb arc C1 --> X
      (C1 => X) = (1.0,1.0);
      
      ifnone
      // comb arc C1 --> X
      (C1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && B1===1'b0 && B2===1'b1)
      // comb arc C2 --> X
      (C2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && B1===1'b1 && B2===1'b0)
      // comb arc C2 --> X
      (C2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && B1===1'b1 && B2===1'b1)
      // comb arc C2 --> X
      (C2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && B1===1'b0 && B2===1'b1)
      // comb arc C2 --> X
      (C2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && B1===1'b1 && B2===1'b0)
      // comb arc C2 --> X
      (C2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && B1===1'b1 && B2===1'b1)
      // comb arc C2 --> X
      (C2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1 && B1===1'b0 && B2===1'b1)
      // comb arc C2 --> X
      (C2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1 && B1===1'b1 && B2===1'b0)
      // comb arc C2 --> X
      (C2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1 && B1===1'b1 && B2===1'b1)
      // comb arc C2 --> X
      (C2 => X) = (1.0,1.0);
      
      ifnone
      // comb arc C2 --> X
      (C2 => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_OA222_U_0P5( X, A1, A2, B1, B2, C1, C2 );
input A1, A2, B1, B2, C1, C2;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_OA222_U_0P5_func SAEDRVT14_OA222_U_0P5_behav_inst(.X(X),.A1(A1),.A2(A2),.B1(B1),.B2(B2),.C1(C1),.C2(C2));
`else
   SAEDRVT14_OA222_U_0P5_func SAEDRVT14_OA222_U_0P5_inst(.X(X),.A1(A1),.A2(A2),.B1(B1),.B2(B2),.C1(C1),.C2(C2));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      if(B1===1'b0 && B2===1'b1 && C1===1'b0 && C2===1'b1)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b1 && C1===1'b1 && C2===1'b0)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b1 && C1===1'b1 && C2===1'b1)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b0 && C1===1'b0 && C2===1'b1)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b0 && C1===1'b1 && C2===1'b0)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b0 && C1===1'b1 && C2===1'b1)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b1 && C1===1'b0 && C2===1'b1)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b1 && C1===1'b1 && C2===1'b0)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b1 && C1===1'b1 && C2===1'b1)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      ifnone
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b1 && C1===1'b0 && C2===1'b1)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b1 && C1===1'b1 && C2===1'b0)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b1 && C1===1'b1 && C2===1'b1)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b0 && C1===1'b0 && C2===1'b1)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b0 && C1===1'b1 && C2===1'b0)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b0 && C1===1'b1 && C2===1'b1)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b1 && C1===1'b0 && C2===1'b1)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b1 && C1===1'b1 && C2===1'b0)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b1 && C1===1'b1 && C2===1'b1)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      ifnone
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && C1===1'b0 && C2===1'b1)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && C1===1'b1 && C2===1'b0)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && C1===1'b1 && C2===1'b1)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && C1===1'b0 && C2===1'b1)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && C1===1'b1 && C2===1'b0)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && C1===1'b1 && C2===1'b1)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1 && C1===1'b0 && C2===1'b1)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1 && C1===1'b1 && C2===1'b0)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1 && C1===1'b1 && C2===1'b1)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      ifnone
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && C1===1'b0 && C2===1'b1)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && C1===1'b1 && C2===1'b0)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && C1===1'b1 && C2===1'b1)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && C1===1'b0 && C2===1'b1)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && C1===1'b1 && C2===1'b0)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && C1===1'b1 && C2===1'b1)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1 && C1===1'b0 && C2===1'b1)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1 && C1===1'b1 && C2===1'b0)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1 && C1===1'b1 && C2===1'b1)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      ifnone
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && B1===1'b0 && B2===1'b1)
      // comb arc C1 --> X
      (C1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && B1===1'b1 && B2===1'b0)
      // comb arc C1 --> X
      (C1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && B1===1'b1 && B2===1'b1)
      // comb arc C1 --> X
      (C1 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && B1===1'b0 && B2===1'b1)
      // comb arc C1 --> X
      (C1 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && B1===1'b1 && B2===1'b0)
      // comb arc C1 --> X
      (C1 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && B1===1'b1 && B2===1'b1)
      // comb arc C1 --> X
      (C1 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1 && B1===1'b0 && B2===1'b1)
      // comb arc C1 --> X
      (C1 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1 && B1===1'b1 && B2===1'b0)
      // comb arc C1 --> X
      (C1 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1 && B1===1'b1 && B2===1'b1)
      // comb arc C1 --> X
      (C1 => X) = (1.0,1.0);
      
      ifnone
      // comb arc C1 --> X
      (C1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && B1===1'b0 && B2===1'b1)
      // comb arc C2 --> X
      (C2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && B1===1'b1 && B2===1'b0)
      // comb arc C2 --> X
      (C2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && B1===1'b1 && B2===1'b1)
      // comb arc C2 --> X
      (C2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && B1===1'b0 && B2===1'b1)
      // comb arc C2 --> X
      (C2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && B1===1'b1 && B2===1'b0)
      // comb arc C2 --> X
      (C2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && B1===1'b1 && B2===1'b1)
      // comb arc C2 --> X
      (C2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1 && B1===1'b0 && B2===1'b1)
      // comb arc C2 --> X
      (C2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1 && B1===1'b1 && B2===1'b0)
      // comb arc C2 --> X
      (C2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1 && B1===1'b1 && B2===1'b1)
      // comb arc C2 --> X
      (C2 => X) = (1.0,1.0);
      
      ifnone
      // comb arc C2 --> X
      (C2 => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_OA22_0P75( X, A1, A2, B1, B2 );
input A1, A2, B1, B2;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_OA22_0P75_func SAEDRVT14_OA22_0P75_behav_inst(.X(X),.A1(A1),.A2(A2),.B1(B1),.B2(B2));
`else
   SAEDRVT14_OA22_0P75_func SAEDRVT14_OA22_0P75_inst(.X(X),.A1(A1),.A2(A2),.B1(B1),.B2(B2));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      if(B1===1'b0 && B2===1'b1)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b0)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b1)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      ifnone
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b1)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b0)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b1)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      ifnone
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      ifnone
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      ifnone
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_OA22_1( X, A1, A2, B1, B2 );
input A1, A2, B1, B2;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_OA22_1_func SAEDRVT14_OA22_1_behav_inst(.X(X),.A1(A1),.A2(A2),.B1(B1),.B2(B2));
`else
   SAEDRVT14_OA22_1_func SAEDRVT14_OA22_1_inst(.X(X),.A1(A1),.A2(A2),.B1(B1),.B2(B2));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      if(B1===1'b0 && B2===1'b1)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b0)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b1)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      ifnone
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b1)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b0)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b1)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      ifnone
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      ifnone
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      ifnone
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_OA22_2( X, A1, A2, B1, B2 );
input A1, A2, B1, B2;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_OA22_2_func SAEDRVT14_OA22_2_behav_inst(.X(X),.A1(A1),.A2(A2),.B1(B1),.B2(B2));
`else
   SAEDRVT14_OA22_2_func SAEDRVT14_OA22_2_inst(.X(X),.A1(A1),.A2(A2),.B1(B1),.B2(B2));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      if(B1===1'b0 && B2===1'b1)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b0)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b1)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      ifnone
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b1)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b0)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b1)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      ifnone
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      ifnone
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      ifnone
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_OA22_4( X, A1, A2, B1, B2 );
input A1, A2, B1, B2;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_OA22_4_func SAEDRVT14_OA22_4_behav_inst(.X(X),.A1(A1),.A2(A2),.B1(B1),.B2(B2));
`else
   SAEDRVT14_OA22_4_func SAEDRVT14_OA22_4_inst(.X(X),.A1(A1),.A2(A2),.B1(B1),.B2(B2));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      if(B1===1'b0 && B2===1'b1)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b0)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b1)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      ifnone
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b1)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b0)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b1)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      ifnone
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      ifnone
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      ifnone
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_OA22_U_0P5( X, A1, A2, B1, B2 );
input A1, A2, B1, B2;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_OA22_U_0P5_func SAEDRVT14_OA22_U_0P5_behav_inst(.X(X),.A1(A1),.A2(A2),.B1(B1),.B2(B2));
`else
   SAEDRVT14_OA22_U_0P5_func SAEDRVT14_OA22_U_0P5_inst(.X(X),.A1(A1),.A2(A2),.B1(B1),.B2(B2));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      if(B1===1'b0 && B2===1'b1)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b0)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b1)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      ifnone
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b1)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b0)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b1)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      ifnone
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      ifnone
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      ifnone
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_OA2BB2_0P5( X, A1, A2, B1, B2 );
input A1, A2, B1, B2;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_OA2BB2_0P5_func SAEDRVT14_OA2BB2_0P5_behav_inst(.X(X),.A1(A1),.A2(A2),.B1(B1),.B2(B2));
`else
   SAEDRVT14_OA2BB2_0P5_func SAEDRVT14_OA2BB2_0P5_inst(.X(X),.A1(A1),.A2(A2),.B1(B1),.B2(B2));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      if(B1===1'b0 && B2===1'b1)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b0)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b1)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      ifnone
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b1)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b0)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b1)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      ifnone
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      ifnone
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      ifnone
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_OA2BB2_1( X, A1, A2, B1, B2 );
input A1, A2, B1, B2;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_OA2BB2_1_func SAEDRVT14_OA2BB2_1_behav_inst(.X(X),.A1(A1),.A2(A2),.B1(B1),.B2(B2));
`else
   SAEDRVT14_OA2BB2_1_func SAEDRVT14_OA2BB2_1_inst(.X(X),.A1(A1),.A2(A2),.B1(B1),.B2(B2));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      if(B1===1'b0 && B2===1'b1)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b0)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b1)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      ifnone
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b1)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b0)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b1)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      ifnone
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      ifnone
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      ifnone
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_OA2BB2_2( X, A1, A2, B1, B2 );
input A1, A2, B1, B2;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_OA2BB2_2_func SAEDRVT14_OA2BB2_2_behav_inst(.X(X),.A1(A1),.A2(A2),.B1(B1),.B2(B2));
`else
   SAEDRVT14_OA2BB2_2_func SAEDRVT14_OA2BB2_2_inst(.X(X),.A1(A1),.A2(A2),.B1(B1),.B2(B2));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      if(B1===1'b0 && B2===1'b1)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b0)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b1)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      ifnone
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b1)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b0)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b1)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      ifnone
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      ifnone
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      ifnone
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_OA2BB2_4( X, A1, A2, B1, B2 );
input A1, A2, B1, B2;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_OA2BB2_4_func SAEDRVT14_OA2BB2_4_behav_inst(.X(X),.A1(A1),.A2(A2),.B1(B1),.B2(B2));
`else
   SAEDRVT14_OA2BB2_4_func SAEDRVT14_OA2BB2_4_inst(.X(X),.A1(A1),.A2(A2),.B1(B1),.B2(B2));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      if(B1===1'b0 && B2===1'b1)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b0)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b1)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      ifnone
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b1)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b0)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b1)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      ifnone
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      ifnone
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      ifnone
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_OA2BB2_V1_0P5( X, A1, A2, B1, B2 );
input A1, A2, B1, B2;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_OA2BB2_V1_0P5_func SAEDRVT14_OA2BB2_V1_0P5_behav_inst(.X(X),.A1(A1),.A2(A2),.B1(B1),.B2(B2));
`else
   SAEDRVT14_OA2BB2_V1_0P5_func SAEDRVT14_OA2BB2_V1_0P5_inst(.X(X),.A1(A1),.A2(A2),.B1(B1),.B2(B2));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      if(B1===1'b0 && B2===1'b1)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b0)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b1)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      ifnone
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b1)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b0)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b1)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      ifnone
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      ifnone
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      ifnone
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_OA2BB2_V1_0P75( X, A1, A2, B1, B2 );
input A1, A2, B1, B2;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_OA2BB2_V1_0P75_func SAEDRVT14_OA2BB2_V1_0P75_behav_inst(.X(X),.A1(A1),.A2(A2),.B1(B1),.B2(B2));
`else
   SAEDRVT14_OA2BB2_V1_0P75_func SAEDRVT14_OA2BB2_V1_0P75_inst(.X(X),.A1(A1),.A2(A2),.B1(B1),.B2(B2));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      if(B1===1'b0 && B2===1'b1)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b0)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b1)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      ifnone
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b1)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b0)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b1)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      ifnone
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      ifnone
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      ifnone
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_OA2BB2_V1_1( X, A1, A2, B1, B2 );
input A1, A2, B1, B2;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_OA2BB2_V1_1_func SAEDRVT14_OA2BB2_V1_1_behav_inst(.X(X),.A1(A1),.A2(A2),.B1(B1),.B2(B2));
`else
   SAEDRVT14_OA2BB2_V1_1_func SAEDRVT14_OA2BB2_V1_1_inst(.X(X),.A1(A1),.A2(A2),.B1(B1),.B2(B2));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      if(B1===1'b0 && B2===1'b1)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b0)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b1)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      ifnone
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b1)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b0)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b1)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      ifnone
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      ifnone
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      ifnone
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_OA2BB2_V1_2( X, A1, A2, B1, B2 );
input A1, A2, B1, B2;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_OA2BB2_V1_2_func SAEDRVT14_OA2BB2_V1_2_behav_inst(.X(X),.A1(A1),.A2(A2),.B1(B1),.B2(B2));
`else
   SAEDRVT14_OA2BB2_V1_2_func SAEDRVT14_OA2BB2_V1_2_inst(.X(X),.A1(A1),.A2(A2),.B1(B1),.B2(B2));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      if(B1===1'b0 && B2===1'b1)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b0)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b1)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      ifnone
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b1)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b0)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b1)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      ifnone
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      ifnone
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      ifnone
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_OA2BB2_V1_4( X, A1, A2, B1, B2 );
input A1, A2, B1, B2;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_OA2BB2_V1_4_func SAEDRVT14_OA2BB2_V1_4_behav_inst(.X(X),.A1(A1),.A2(A2),.B1(B1),.B2(B2));
`else
   SAEDRVT14_OA2BB2_V1_4_func SAEDRVT14_OA2BB2_V1_4_inst(.X(X),.A1(A1),.A2(A2),.B1(B1),.B2(B2));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      if(B1===1'b0 && B2===1'b1)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b0)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b1)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      ifnone
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b1)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b0)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b1)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      ifnone
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      ifnone
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      ifnone
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_OA31_1( A3, A2, A1, B, X );
input A1, A2, A3, B;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_OA31_1_func SAEDRVT14_OA31_1_behav_inst(.A3(A3),.A2(A2),.A1(A1),.B(B),.X(X));
`else
   SAEDRVT14_OA31_1_func SAEDRVT14_OA31_1_inst(.A3(A3),.A2(A2),.A1(A1),.B(B),.X(X));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      // comb arc A3 --> X
      (A3 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0 && A3===1'b1)
      // comb arc B --> X
      (B => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && A3===1'b0)
      // comb arc B --> X
      (B => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && A3===1'b1)
      // comb arc B --> X
      (B => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && A3===1'b0)
      // comb arc B --> X
      (B => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && A3===1'b1)
      // comb arc B --> X
      (B => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1 && A3===1'b0)
      // comb arc B --> X
      (B => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1 && A3===1'b1)
      // comb arc B --> X
      (B => X) = (1.0,1.0);
      
      ifnone
      // comb arc B --> X
      (B => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_OA31_1P5( X, A1, A2, A3, B );
input A1, A2, A3, B;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_OA31_1P5_func SAEDRVT14_OA31_1P5_behav_inst(.X(X),.A1(A1),.A2(A2),.A3(A3),.B(B));
`else
   SAEDRVT14_OA31_1P5_func SAEDRVT14_OA31_1P5_inst(.X(X),.A1(A1),.A2(A2),.A3(A3),.B(B));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      // comb arc A3 --> X
      (A3 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0 && A3===1'b1)
      // comb arc B --> X
      (B => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && A3===1'b0)
      // comb arc B --> X
      (B => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && A3===1'b1)
      // comb arc B --> X
      (B => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && A3===1'b0)
      // comb arc B --> X
      (B => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && A3===1'b1)
      // comb arc B --> X
      (B => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1 && A3===1'b0)
      // comb arc B --> X
      (B => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1 && A3===1'b1)
      // comb arc B --> X
      (B => X) = (1.0,1.0);
      
      ifnone
      // comb arc B --> X
      (B => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_OA31_2( X, A1, A2, A3, B );
input A1, A2, A3, B;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_OA31_2_func SAEDRVT14_OA31_2_behav_inst(.X(X),.A1(A1),.A2(A2),.A3(A3),.B(B));
`else
   SAEDRVT14_OA31_2_func SAEDRVT14_OA31_2_inst(.X(X),.A1(A1),.A2(A2),.A3(A3),.B(B));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      // comb arc A3 --> X
      (A3 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0 && A3===1'b1)
      // comb arc B --> X
      (B => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && A3===1'b0)
      // comb arc B --> X
      (B => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && A3===1'b1)
      // comb arc B --> X
      (B => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && A3===1'b0)
      // comb arc B --> X
      (B => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && A3===1'b1)
      // comb arc B --> X
      (B => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1 && A3===1'b0)
      // comb arc B --> X
      (B => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1 && A3===1'b1)
      // comb arc B --> X
      (B => X) = (1.0,1.0);
      
      ifnone
      // comb arc B --> X
      (B => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_OA31_4( X, A1, A2, A3, B );
input A1, A2, A3, B;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_OA31_4_func SAEDRVT14_OA31_4_behav_inst(.X(X),.A1(A1),.A2(A2),.A3(A3),.B(B));
`else
   SAEDRVT14_OA31_4_func SAEDRVT14_OA31_4_inst(.X(X),.A1(A1),.A2(A2),.A3(A3),.B(B));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      // comb arc A3 --> X
      (A3 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0 && A3===1'b1)
      // comb arc B --> X
      (B => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && A3===1'b0)
      // comb arc B --> X
      (B => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && A3===1'b1)
      // comb arc B --> X
      (B => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && A3===1'b0)
      // comb arc B --> X
      (B => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && A3===1'b1)
      // comb arc B --> X
      (B => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1 && A3===1'b0)
      // comb arc B --> X
      (B => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1 && A3===1'b1)
      // comb arc B --> X
      (B => X) = (1.0,1.0);
      
      ifnone
      // comb arc B --> X
      (B => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_OA31_U_0P5( X, A1, A2, A3, B );
input A1, A2, A3, B;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_OA31_U_0P5_func SAEDRVT14_OA31_U_0P5_behav_inst(.X(X),.A1(A1),.A2(A2),.A3(A3),.B(B));
`else
   SAEDRVT14_OA31_U_0P5_func SAEDRVT14_OA31_U_0P5_inst(.X(X),.A1(A1),.A2(A2),.A3(A3),.B(B));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      // comb arc A3 --> X
      (A3 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0 && A3===1'b1)
      // comb arc B --> X
      (B => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && A3===1'b0)
      // comb arc B --> X
      (B => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && A3===1'b1)
      // comb arc B --> X
      (B => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && A3===1'b0)
      // comb arc B --> X
      (B => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && A3===1'b1)
      // comb arc B --> X
      (B => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1 && A3===1'b0)
      // comb arc B --> X
      (B => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1 && A3===1'b1)
      // comb arc B --> X
      (B => X) = (1.0,1.0);
      
      ifnone
      // comb arc B --> X
      (B => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_OA32_0P75( X, A1, A2, A3, B1, B2 );
input A1, A2, A3, B1, B2;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_OA32_0P75_func SAEDRVT14_OA32_0P75_behav_inst(.X(X),.A1(A1),.A2(A2),.A3(A3),.B1(B1),.B2(B2));
`else
   SAEDRVT14_OA32_0P75_func SAEDRVT14_OA32_0P75_inst(.X(X),.A1(A1),.A2(A2),.A3(A3),.B1(B1),.B2(B2));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      if(B1===1'b0 && B2===1'b1)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b0)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b1)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      ifnone
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b1)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b0)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b1)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      ifnone
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b1)
      // comb arc A3 --> X
      (A3 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b0)
      // comb arc A3 --> X
      (A3 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b1)
      // comb arc A3 --> X
      (A3 => X) = (1.0,1.0);
      
      ifnone
      // comb arc A3 --> X
      (A3 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0 && A3===1'b1)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && A3===1'b0)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && A3===1'b1)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && A3===1'b0)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && A3===1'b1)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1 && A3===1'b0)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1 && A3===1'b1)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      ifnone
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0 && A3===1'b1)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && A3===1'b0)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && A3===1'b1)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && A3===1'b0)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && A3===1'b1)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1 && A3===1'b0)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1 && A3===1'b1)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      ifnone
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_OA32_1( X, A1, A2, A3, B1, B2 );
input A1, A2, A3, B1, B2;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_OA32_1_func SAEDRVT14_OA32_1_behav_inst(.X(X),.A1(A1),.A2(A2),.A3(A3),.B1(B1),.B2(B2));
`else
   SAEDRVT14_OA32_1_func SAEDRVT14_OA32_1_inst(.X(X),.A1(A1),.A2(A2),.A3(A3),.B1(B1),.B2(B2));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      if(B1===1'b0 && B2===1'b1)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b0)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b1)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      ifnone
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b1)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b0)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b1)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      ifnone
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b1)
      // comb arc A3 --> X
      (A3 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b0)
      // comb arc A3 --> X
      (A3 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b1)
      // comb arc A3 --> X
      (A3 => X) = (1.0,1.0);
      
      ifnone
      // comb arc A3 --> X
      (A3 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0 && A3===1'b1)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && A3===1'b0)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && A3===1'b1)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && A3===1'b0)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && A3===1'b1)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1 && A3===1'b0)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1 && A3===1'b1)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      ifnone
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0 && A3===1'b1)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && A3===1'b0)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && A3===1'b1)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && A3===1'b0)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && A3===1'b1)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1 && A3===1'b0)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1 && A3===1'b1)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      ifnone
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_OA32_2( X, A1, A2, A3, B1, B2 );
input A1, A2, A3, B1, B2;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_OA32_2_func SAEDRVT14_OA32_2_behav_inst(.X(X),.A1(A1),.A2(A2),.A3(A3),.B1(B1),.B2(B2));
`else
   SAEDRVT14_OA32_2_func SAEDRVT14_OA32_2_inst(.X(X),.A1(A1),.A2(A2),.A3(A3),.B1(B1),.B2(B2));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      if(B1===1'b0 && B2===1'b1)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b0)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b1)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      ifnone
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b1)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b0)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b1)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      ifnone
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b1)
      // comb arc A3 --> X
      (A3 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b0)
      // comb arc A3 --> X
      (A3 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b1)
      // comb arc A3 --> X
      (A3 => X) = (1.0,1.0);
      
      ifnone
      // comb arc A3 --> X
      (A3 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0 && A3===1'b1)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && A3===1'b0)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && A3===1'b1)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && A3===1'b0)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && A3===1'b1)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1 && A3===1'b0)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1 && A3===1'b1)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      ifnone
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0 && A3===1'b1)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && A3===1'b0)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && A3===1'b1)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && A3===1'b0)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && A3===1'b1)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1 && A3===1'b0)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1 && A3===1'b1)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      ifnone
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_OA32_4( X, A1, A2, A3, B1, B2 );
input A1, A2, A3, B1, B2;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_OA32_4_func SAEDRVT14_OA32_4_behav_inst(.X(X),.A1(A1),.A2(A2),.A3(A3),.B1(B1),.B2(B2));
`else
   SAEDRVT14_OA32_4_func SAEDRVT14_OA32_4_inst(.X(X),.A1(A1),.A2(A2),.A3(A3),.B1(B1),.B2(B2));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      if(B1===1'b0 && B2===1'b1)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b0)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b1)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      ifnone
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b1)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b0)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b1)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      ifnone
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b1)
      // comb arc A3 --> X
      (A3 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b0)
      // comb arc A3 --> X
      (A3 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b1)
      // comb arc A3 --> X
      (A3 => X) = (1.0,1.0);
      
      ifnone
      // comb arc A3 --> X
      (A3 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0 && A3===1'b1)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && A3===1'b0)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && A3===1'b1)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && A3===1'b0)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && A3===1'b1)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1 && A3===1'b0)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1 && A3===1'b1)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      ifnone
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0 && A3===1'b1)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && A3===1'b0)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && A3===1'b1)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && A3===1'b0)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && A3===1'b1)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1 && A3===1'b0)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1 && A3===1'b1)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      ifnone
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_OA32_U_0P5( X, A1, A2, A3, B1, B2 );
input A1, A2, A3, B1, B2;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_OA32_U_0P5_func SAEDRVT14_OA32_U_0P5_behav_inst(.X(X),.A1(A1),.A2(A2),.A3(A3),.B1(B1),.B2(B2));
`else
   SAEDRVT14_OA32_U_0P5_func SAEDRVT14_OA32_U_0P5_inst(.X(X),.A1(A1),.A2(A2),.A3(A3),.B1(B1),.B2(B2));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      if(B1===1'b0 && B2===1'b1)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b0)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b1)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      ifnone
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b1)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b0)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b1)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      ifnone
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b1)
      // comb arc A3 --> X
      (A3 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b0)
      // comb arc A3 --> X
      (A3 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b1)
      // comb arc A3 --> X
      (A3 => X) = (1.0,1.0);
      
      ifnone
      // comb arc A3 --> X
      (A3 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0 && A3===1'b1)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && A3===1'b0)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && A3===1'b1)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && A3===1'b0)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && A3===1'b1)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1 && A3===1'b0)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1 && A3===1'b1)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      ifnone
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0 && A3===1'b1)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && A3===1'b0)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && A3===1'b1)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && A3===1'b0)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && A3===1'b1)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1 && A3===1'b0)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1 && A3===1'b1)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      ifnone
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_OA33_1( X, A1, A2, A3, B1, B2, B3 );
input A1, A2, A3, B1, B2, B3;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_OA33_1_func SAEDRVT14_OA33_1_behav_inst(.X(X),.A1(A1),.A2(A2),.A3(A3),.B1(B1),.B2(B2),.B3(B3));
`else
   SAEDRVT14_OA33_1_func SAEDRVT14_OA33_1_inst(.X(X),.A1(A1),.A2(A2),.A3(A3),.B1(B1),.B2(B2),.B3(B3));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      if(B1===1'b0 && B2===1'b0 && B3===1'b1)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b1 && B3===1'b0)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b1 && B3===1'b1)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b0 && B3===1'b0)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b0 && B3===1'b1)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b1 && B3===1'b0)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b1 && B3===1'b1)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      ifnone
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b0 && B3===1'b1)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b1 && B3===1'b0)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b1 && B3===1'b1)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b0 && B3===1'b0)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b0 && B3===1'b1)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b1 && B3===1'b0)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b1 && B3===1'b1)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      ifnone
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b0 && B3===1'b1)
      // comb arc A3 --> X
      (A3 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b1 && B3===1'b0)
      // comb arc A3 --> X
      (A3 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b1 && B3===1'b1)
      // comb arc A3 --> X
      (A3 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b0 && B3===1'b0)
      // comb arc A3 --> X
      (A3 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b0 && B3===1'b1)
      // comb arc A3 --> X
      (A3 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b1 && B3===1'b0)
      // comb arc A3 --> X
      (A3 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b1 && B3===1'b1)
      // comb arc A3 --> X
      (A3 => X) = (1.0,1.0);
      
      ifnone
      // comb arc A3 --> X
      (A3 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0 && A3===1'b1)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && A3===1'b0)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && A3===1'b1)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && A3===1'b0)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && A3===1'b1)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1 && A3===1'b0)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1 && A3===1'b1)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      ifnone
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0 && A3===1'b1)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && A3===1'b0)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && A3===1'b1)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && A3===1'b0)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && A3===1'b1)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1 && A3===1'b0)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1 && A3===1'b1)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      ifnone
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0 && A3===1'b1)
      // comb arc B3 --> X
      (B3 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && A3===1'b0)
      // comb arc B3 --> X
      (B3 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && A3===1'b1)
      // comb arc B3 --> X
      (B3 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && A3===1'b0)
      // comb arc B3 --> X
      (B3 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && A3===1'b1)
      // comb arc B3 --> X
      (B3 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1 && A3===1'b0)
      // comb arc B3 --> X
      (B3 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1 && A3===1'b1)
      // comb arc B3 --> X
      (B3 => X) = (1.0,1.0);
      
      ifnone
      // comb arc B3 --> X
      (B3 => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_OA33_2( X, A1, A2, A3, B1, B2, B3 );
input A1, A2, A3, B1, B2, B3;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_OA33_2_func SAEDRVT14_OA33_2_behav_inst(.X(X),.A1(A1),.A2(A2),.A3(A3),.B1(B1),.B2(B2),.B3(B3));
`else
   SAEDRVT14_OA33_2_func SAEDRVT14_OA33_2_inst(.X(X),.A1(A1),.A2(A2),.A3(A3),.B1(B1),.B2(B2),.B3(B3));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      if(B1===1'b0 && B2===1'b0 && B3===1'b1)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b1 && B3===1'b0)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b1 && B3===1'b1)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b0 && B3===1'b0)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b0 && B3===1'b1)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b1 && B3===1'b0)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b1 && B3===1'b1)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      ifnone
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b0 && B3===1'b1)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b1 && B3===1'b0)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b1 && B3===1'b1)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b0 && B3===1'b0)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b0 && B3===1'b1)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b1 && B3===1'b0)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b1 && B3===1'b1)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      ifnone
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b0 && B3===1'b1)
      // comb arc A3 --> X
      (A3 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b1 && B3===1'b0)
      // comb arc A3 --> X
      (A3 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b1 && B3===1'b1)
      // comb arc A3 --> X
      (A3 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b0 && B3===1'b0)
      // comb arc A3 --> X
      (A3 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b0 && B3===1'b1)
      // comb arc A3 --> X
      (A3 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b1 && B3===1'b0)
      // comb arc A3 --> X
      (A3 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b1 && B3===1'b1)
      // comb arc A3 --> X
      (A3 => X) = (1.0,1.0);
      
      ifnone
      // comb arc A3 --> X
      (A3 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0 && A3===1'b1)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && A3===1'b0)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && A3===1'b1)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && A3===1'b0)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && A3===1'b1)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1 && A3===1'b0)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1 && A3===1'b1)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      ifnone
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0 && A3===1'b1)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && A3===1'b0)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && A3===1'b1)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && A3===1'b0)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && A3===1'b1)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1 && A3===1'b0)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1 && A3===1'b1)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      ifnone
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0 && A3===1'b1)
      // comb arc B3 --> X
      (B3 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && A3===1'b0)
      // comb arc B3 --> X
      (B3 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && A3===1'b1)
      // comb arc B3 --> X
      (B3 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && A3===1'b0)
      // comb arc B3 --> X
      (B3 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && A3===1'b1)
      // comb arc B3 --> X
      (B3 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1 && A3===1'b0)
      // comb arc B3 --> X
      (B3 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1 && A3===1'b1)
      // comb arc B3 --> X
      (B3 => X) = (1.0,1.0);
      
      ifnone
      // comb arc B3 --> X
      (B3 => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_OA33_4( X, A1, A2, A3, B1, B2, B3 );
input A1, A2, A3, B1, B2, B3;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_OA33_4_func SAEDRVT14_OA33_4_behav_inst(.X(X),.A1(A1),.A2(A2),.A3(A3),.B1(B1),.B2(B2),.B3(B3));
`else
   SAEDRVT14_OA33_4_func SAEDRVT14_OA33_4_inst(.X(X),.A1(A1),.A2(A2),.A3(A3),.B1(B1),.B2(B2),.B3(B3));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      if(B1===1'b0 && B2===1'b0 && B3===1'b1)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b1 && B3===1'b0)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b1 && B3===1'b1)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b0 && B3===1'b0)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b0 && B3===1'b1)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b1 && B3===1'b0)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b1 && B3===1'b1)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      ifnone
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b0 && B3===1'b1)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b1 && B3===1'b0)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b1 && B3===1'b1)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b0 && B3===1'b0)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b0 && B3===1'b1)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b1 && B3===1'b0)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b1 && B3===1'b1)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      ifnone
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b0 && B3===1'b1)
      // comb arc A3 --> X
      (A3 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b1 && B3===1'b0)
      // comb arc A3 --> X
      (A3 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b1 && B3===1'b1)
      // comb arc A3 --> X
      (A3 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b0 && B3===1'b0)
      // comb arc A3 --> X
      (A3 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b0 && B3===1'b1)
      // comb arc A3 --> X
      (A3 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b1 && B3===1'b0)
      // comb arc A3 --> X
      (A3 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b1 && B3===1'b1)
      // comb arc A3 --> X
      (A3 => X) = (1.0,1.0);
      
      ifnone
      // comb arc A3 --> X
      (A3 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0 && A3===1'b1)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && A3===1'b0)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && A3===1'b1)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && A3===1'b0)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && A3===1'b1)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1 && A3===1'b0)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1 && A3===1'b1)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      ifnone
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0 && A3===1'b1)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && A3===1'b0)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && A3===1'b1)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && A3===1'b0)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && A3===1'b1)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1 && A3===1'b0)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1 && A3===1'b1)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      ifnone
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0 && A3===1'b1)
      // comb arc B3 --> X
      (B3 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && A3===1'b0)
      // comb arc B3 --> X
      (B3 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && A3===1'b1)
      // comb arc B3 --> X
      (B3 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && A3===1'b0)
      // comb arc B3 --> X
      (B3 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && A3===1'b1)
      // comb arc B3 --> X
      (B3 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1 && A3===1'b0)
      // comb arc B3 --> X
      (B3 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1 && A3===1'b1)
      // comb arc B3 --> X
      (B3 => X) = (1.0,1.0);
      
      ifnone
      // comb arc B3 --> X
      (B3 => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_OA33_U_0P5( X, A1, A2, A3, B1, B2, B3 );
input A1, A2, A3, B1, B2, B3;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_OA33_U_0P5_func SAEDRVT14_OA33_U_0P5_behav_inst(.X(X),.A1(A1),.A2(A2),.A3(A3),.B1(B1),.B2(B2),.B3(B3));
`else
   SAEDRVT14_OA33_U_0P5_func SAEDRVT14_OA33_U_0P5_inst(.X(X),.A1(A1),.A2(A2),.A3(A3),.B1(B1),.B2(B2),.B3(B3));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      if(B1===1'b0 && B2===1'b0 && B3===1'b1)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b1 && B3===1'b0)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b1 && B3===1'b1)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b0 && B3===1'b0)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b0 && B3===1'b1)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b1 && B3===1'b0)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b1 && B3===1'b1)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      ifnone
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b0 && B3===1'b1)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b1 && B3===1'b0)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b1 && B3===1'b1)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b0 && B3===1'b0)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b0 && B3===1'b1)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b1 && B3===1'b0)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b1 && B3===1'b1)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      ifnone
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b0 && B3===1'b1)
      // comb arc A3 --> X
      (A3 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b1 && B3===1'b0)
      // comb arc A3 --> X
      (A3 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b1 && B3===1'b1)
      // comb arc A3 --> X
      (A3 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b0 && B3===1'b0)
      // comb arc A3 --> X
      (A3 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b0 && B3===1'b1)
      // comb arc A3 --> X
      (A3 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b1 && B3===1'b0)
      // comb arc A3 --> X
      (A3 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b1 && B3===1'b1)
      // comb arc A3 --> X
      (A3 => X) = (1.0,1.0);
      
      ifnone
      // comb arc A3 --> X
      (A3 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0 && A3===1'b1)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && A3===1'b0)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && A3===1'b1)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && A3===1'b0)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && A3===1'b1)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1 && A3===1'b0)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1 && A3===1'b1)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      ifnone
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0 && A3===1'b1)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && A3===1'b0)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && A3===1'b1)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && A3===1'b0)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && A3===1'b1)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1 && A3===1'b0)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1 && A3===1'b1)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      ifnone
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0 && A3===1'b1)
      // comb arc B3 --> X
      (B3 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && A3===1'b0)
      // comb arc B3 --> X
      (B3 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && A3===1'b1)
      // comb arc B3 --> X
      (B3 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && A3===1'b0)
      // comb arc B3 --> X
      (B3 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && A3===1'b1)
      // comb arc B3 --> X
      (B3 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1 && A3===1'b0)
      // comb arc B3 --> X
      (B3 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1 && A3===1'b1)
      // comb arc B3 --> X
      (B3 => X) = (1.0,1.0);
      
      ifnone
      // comb arc B3 --> X
      (B3 => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_OAI211_0P5( X, A1, A2, B1, B2 );
input A1, A2, B1, B2;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_OAI211_0P5_func SAEDRVT14_OAI211_0P5_behav_inst(.X(X),.A1(A1),.A2(A2),.B1(B1),.B2(B2));
`else
   SAEDRVT14_OAI211_0P5_func SAEDRVT14_OAI211_0P5_inst(.X(X),.A1(A1),.A2(A2),.B1(B1),.B2(B2));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      ifnone
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      ifnone
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_OAI211_1( X, A1, A2, B1, B2 );
input A1, A2, B1, B2;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_OAI211_1_func SAEDRVT14_OAI211_1_behav_inst(.X(X),.A1(A1),.A2(A2),.B1(B1),.B2(B2));
`else
   SAEDRVT14_OAI211_1_func SAEDRVT14_OAI211_1_inst(.X(X),.A1(A1),.A2(A2),.B1(B1),.B2(B2));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      ifnone
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      ifnone
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_OAI211_2( X, A1, A2, B1, B2 );
input A1, A2, B1, B2;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_OAI211_2_func SAEDRVT14_OAI211_2_behav_inst(.X(X),.A1(A1),.A2(A2),.B1(B1),.B2(B2));
`else
   SAEDRVT14_OAI211_2_func SAEDRVT14_OAI211_2_inst(.X(X),.A1(A1),.A2(A2),.B1(B1),.B2(B2));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      ifnone
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      ifnone
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_OAI211_4( X, A1, A2, B1, B2 );
input A1, A2, B1, B2;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_OAI211_4_func SAEDRVT14_OAI211_4_behav_inst(.X(X),.A1(A1),.A2(A2),.B1(B1),.B2(B2));
`else
   SAEDRVT14_OAI211_4_func SAEDRVT14_OAI211_4_inst(.X(X),.A1(A1),.A2(A2),.B1(B1),.B2(B2));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      ifnone
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      ifnone
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_OAI21_0P5( X, A1, A2, B );
input A1, A2, B;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_OAI21_0P5_func SAEDRVT14_OAI21_0P5_behav_inst(.X(X),.A1(A1),.A2(A2),.B(B));
`else
   SAEDRVT14_OAI21_0P5_func SAEDRVT14_OAI21_0P5_inst(.X(X),.A1(A1),.A2(A2),.B(B));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1)
      // comb arc B --> X
      (B => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0)
      // comb arc B --> X
      (B => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1)
      // comb arc B --> X
      (B => X) = (1.0,1.0);
      
      ifnone
      // comb arc B --> X
      (B => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_OAI21_0P75( X, A1, A2, B );
input A1, A2, B;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_OAI21_0P75_func SAEDRVT14_OAI21_0P75_behav_inst(.X(X),.A1(A1),.A2(A2),.B(B));
`else
   SAEDRVT14_OAI21_0P75_func SAEDRVT14_OAI21_0P75_inst(.X(X),.A1(A1),.A2(A2),.B(B));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1)
      // comb arc B --> X
      (B => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0)
      // comb arc B --> X
      (B => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1)
      // comb arc B --> X
      (B => X) = (1.0,1.0);
      
      ifnone
      // comb arc B --> X
      (B => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_OAI21_1( X, A1, A2, B );
input A1, A2, B;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_OAI21_1_func SAEDRVT14_OAI21_1_behav_inst(.X(X),.A1(A1),.A2(A2),.B(B));
`else
   SAEDRVT14_OAI21_1_func SAEDRVT14_OAI21_1_inst(.X(X),.A1(A1),.A2(A2),.B(B));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1)
      // comb arc B --> X
      (B => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0)
      // comb arc B --> X
      (B => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1)
      // comb arc B --> X
      (B => X) = (1.0,1.0);
      
      ifnone
      // comb arc B --> X
      (B => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_OAI21_1P5( X, A1, A2, B );
input A1, A2, B;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_OAI21_1P5_func SAEDRVT14_OAI21_1P5_behav_inst(.X(X),.A1(A1),.A2(A2),.B(B));
`else
   SAEDRVT14_OAI21_1P5_func SAEDRVT14_OAI21_1P5_inst(.X(X),.A1(A1),.A2(A2),.B(B));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1)
      // comb arc B --> X
      (B => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0)
      // comb arc B --> X
      (B => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1)
      // comb arc B --> X
      (B => X) = (1.0,1.0);
      
      ifnone
      // comb arc B --> X
      (B => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_OAI21_2( X, A1, A2, B );
input A1, A2, B;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_OAI21_2_func SAEDRVT14_OAI21_2_behav_inst(.X(X),.A1(A1),.A2(A2),.B(B));
`else
   SAEDRVT14_OAI21_2_func SAEDRVT14_OAI21_2_inst(.X(X),.A1(A1),.A2(A2),.B(B));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1)
      // comb arc B --> X
      (B => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0)
      // comb arc B --> X
      (B => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1)
      // comb arc B --> X
      (B => X) = (1.0,1.0);
      
      ifnone
      // comb arc B --> X
      (B => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_OAI21_3( X, A1, A2, B );
input A1, A2, B;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_OAI21_3_func SAEDRVT14_OAI21_3_behav_inst(.X(X),.A1(A1),.A2(A2),.B(B));
`else
   SAEDRVT14_OAI21_3_func SAEDRVT14_OAI21_3_inst(.X(X),.A1(A1),.A2(A2),.B(B));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1)
      // comb arc B --> X
      (B => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0)
      // comb arc B --> X
      (B => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1)
      // comb arc B --> X
      (B => X) = (1.0,1.0);
      
      ifnone
      // comb arc B --> X
      (B => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_OAI21_4( X, A1, A2, B );
input A1, A2, B;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_OAI21_4_func SAEDRVT14_OAI21_4_behav_inst(.X(X),.A1(A1),.A2(A2),.B(B));
`else
   SAEDRVT14_OAI21_4_func SAEDRVT14_OAI21_4_inst(.X(X),.A1(A1),.A2(A2),.B(B));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1)
      // comb arc B --> X
      (B => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0)
      // comb arc B --> X
      (B => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1)
      // comb arc B --> X
      (B => X) = (1.0,1.0);
      
      ifnone
      // comb arc B --> X
      (B => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_OAI21_V1_4( X, A1, A2, B );
input A1, A2, B;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_OAI21_V1_4_func SAEDRVT14_OAI21_V1_4_behav_inst(.X(X),.A1(A1),.A2(A2),.B(B));
`else
   SAEDRVT14_OAI21_V1_4_func SAEDRVT14_OAI21_V1_4_inst(.X(X),.A1(A1),.A2(A2),.B(B));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1)
      // comb arc B --> X
      (B => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0)
      // comb arc B --> X
      (B => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1)
      // comb arc B --> X
      (B => X) = (1.0,1.0);
      
      ifnone
      // comb arc B --> X
      (B => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_OAI21_V1_6( X, A1, A2, B );
input A1, A2, B;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_OAI21_V1_6_func SAEDRVT14_OAI21_V1_6_behav_inst(.X(X),.A1(A1),.A2(A2),.B(B));
`else
   SAEDRVT14_OAI21_V1_6_func SAEDRVT14_OAI21_V1_6_inst(.X(X),.A1(A1),.A2(A2),.B(B));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1)
      // comb arc B --> X
      (B => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0)
      // comb arc B --> X
      (B => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1)
      // comb arc B --> X
      (B => X) = (1.0,1.0);
      
      ifnone
      // comb arc B --> X
      (B => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_OAI21_V1_8( X, A1, A2, B );
input A1, A2, B;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_OAI21_V1_8_func SAEDRVT14_OAI21_V1_8_behav_inst(.X(X),.A1(A1),.A2(A2),.B(B));
`else
   SAEDRVT14_OAI21_V1_8_func SAEDRVT14_OAI21_V1_8_inst(.X(X),.A1(A1),.A2(A2),.B(B));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1)
      // comb arc B --> X
      (B => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0)
      // comb arc B --> X
      (B => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1)
      // comb arc B --> X
      (B => X) = (1.0,1.0);
      
      ifnone
      // comb arc B --> X
      (B => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_OAI221_0P5( X, A1, A2, B1, B2, C );
input A1, A2, B1, B2, C;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_OAI221_0P5_func SAEDRVT14_OAI221_0P5_behav_inst(.X(X),.A1(A1),.A2(A2),.B1(B1),.B2(B2),.C(C));
`else
   SAEDRVT14_OAI221_0P5_func SAEDRVT14_OAI221_0P5_inst(.X(X),.A1(A1),.A2(A2),.B1(B1),.B2(B2),.C(C));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      if(B1===1'b0 && B2===1'b1)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b0)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b1)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      ifnone
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b1)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b0)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b1)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      ifnone
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      ifnone
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      ifnone
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && B1===1'b0 && B2===1'b1)
      // comb arc C --> X
      (C => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && B1===1'b1 && B2===1'b0)
      // comb arc C --> X
      (C => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && B1===1'b1 && B2===1'b1)
      // comb arc C --> X
      (C => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && B1===1'b0 && B2===1'b1)
      // comb arc C --> X
      (C => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && B1===1'b1 && B2===1'b0)
      // comb arc C --> X
      (C => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && B1===1'b1 && B2===1'b1)
      // comb arc C --> X
      (C => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1 && B1===1'b0 && B2===1'b1)
      // comb arc C --> X
      (C => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1 && B1===1'b1 && B2===1'b0)
      // comb arc C --> X
      (C => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1 && B1===1'b1 && B2===1'b1)
      // comb arc C --> X
      (C => X) = (1.0,1.0);
      
      ifnone
      // comb arc C --> X
      (C => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_OAI221_1( X, A1, A2, B1, B2, C );
input A1, A2, B1, B2, C;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_OAI221_1_func SAEDRVT14_OAI221_1_behav_inst(.X(X),.A1(A1),.A2(A2),.B1(B1),.B2(B2),.C(C));
`else
   SAEDRVT14_OAI221_1_func SAEDRVT14_OAI221_1_inst(.X(X),.A1(A1),.A2(A2),.B1(B1),.B2(B2),.C(C));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      if(B1===1'b0 && B2===1'b1)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b0)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b1)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      ifnone
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b1)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b0)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b1)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      ifnone
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      ifnone
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      ifnone
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && B1===1'b0 && B2===1'b1)
      // comb arc C --> X
      (C => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && B1===1'b1 && B2===1'b0)
      // comb arc C --> X
      (C => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && B1===1'b1 && B2===1'b1)
      // comb arc C --> X
      (C => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && B1===1'b0 && B2===1'b1)
      // comb arc C --> X
      (C => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && B1===1'b1 && B2===1'b0)
      // comb arc C --> X
      (C => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && B1===1'b1 && B2===1'b1)
      // comb arc C --> X
      (C => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1 && B1===1'b0 && B2===1'b1)
      // comb arc C --> X
      (C => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1 && B1===1'b1 && B2===1'b0)
      // comb arc C --> X
      (C => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1 && B1===1'b1 && B2===1'b1)
      // comb arc C --> X
      (C => X) = (1.0,1.0);
      
      ifnone
      // comb arc C --> X
      (C => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_OAI221_2( X, A1, A2, B1, B2, C );
input A1, A2, B1, B2, C;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_OAI221_2_func SAEDRVT14_OAI221_2_behav_inst(.X(X),.A1(A1),.A2(A2),.B1(B1),.B2(B2),.C(C));
`else
   SAEDRVT14_OAI221_2_func SAEDRVT14_OAI221_2_inst(.X(X),.A1(A1),.A2(A2),.B1(B1),.B2(B2),.C(C));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      if(B1===1'b0 && B2===1'b1)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b0)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b1)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      ifnone
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b1)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b0)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b1)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      ifnone
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      ifnone
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      ifnone
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && B1===1'b0 && B2===1'b1)
      // comb arc C --> X
      (C => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && B1===1'b1 && B2===1'b0)
      // comb arc C --> X
      (C => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && B1===1'b1 && B2===1'b1)
      // comb arc C --> X
      (C => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && B1===1'b0 && B2===1'b1)
      // comb arc C --> X
      (C => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && B1===1'b1 && B2===1'b0)
      // comb arc C --> X
      (C => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && B1===1'b1 && B2===1'b1)
      // comb arc C --> X
      (C => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1 && B1===1'b0 && B2===1'b1)
      // comb arc C --> X
      (C => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1 && B1===1'b1 && B2===1'b0)
      // comb arc C --> X
      (C => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1 && B1===1'b1 && B2===1'b1)
      // comb arc C --> X
      (C => X) = (1.0,1.0);
      
      ifnone
      // comb arc C --> X
      (C => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_OAI221_4( X, A1, A2, B1, B2, C );
input A1, A2, B1, B2, C;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_OAI221_4_func SAEDRVT14_OAI221_4_behav_inst(.X(X),.A1(A1),.A2(A2),.B1(B1),.B2(B2),.C(C));
`else
   SAEDRVT14_OAI221_4_func SAEDRVT14_OAI221_4_inst(.X(X),.A1(A1),.A2(A2),.B1(B1),.B2(B2),.C(C));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      if(B1===1'b0 && B2===1'b1)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b0)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b1)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      ifnone
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b1)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b0)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b1)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      ifnone
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      ifnone
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      ifnone
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && B1===1'b0 && B2===1'b1)
      // comb arc C --> X
      (C => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && B1===1'b1 && B2===1'b0)
      // comb arc C --> X
      (C => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && B1===1'b1 && B2===1'b1)
      // comb arc C --> X
      (C => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && B1===1'b0 && B2===1'b1)
      // comb arc C --> X
      (C => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && B1===1'b1 && B2===1'b0)
      // comb arc C --> X
      (C => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && B1===1'b1 && B2===1'b1)
      // comb arc C --> X
      (C => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1 && B1===1'b0 && B2===1'b1)
      // comb arc C --> X
      (C => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1 && B1===1'b1 && B2===1'b0)
      // comb arc C --> X
      (C => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1 && B1===1'b1 && B2===1'b1)
      // comb arc C --> X
      (C => X) = (1.0,1.0);
      
      ifnone
      // comb arc C --> X
      (C => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_OAI222_0P5( X, A1, A2, B1, B2, C1, C2 );
input A1, A2, B1, B2, C1, C2;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_OAI222_0P5_func SAEDRVT14_OAI222_0P5_behav_inst(.X(X),.A1(A1),.A2(A2),.B1(B1),.B2(B2),.C1(C1),.C2(C2));
`else
   SAEDRVT14_OAI222_0P5_func SAEDRVT14_OAI222_0P5_inst(.X(X),.A1(A1),.A2(A2),.B1(B1),.B2(B2),.C1(C1),.C2(C2));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      if(B1===1'b0 && B2===1'b1 && C1===1'b0 && C2===1'b1)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b1 && C1===1'b1 && C2===1'b0)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b1 && C1===1'b1 && C2===1'b1)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b0 && C1===1'b0 && C2===1'b1)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b0 && C1===1'b1 && C2===1'b0)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b0 && C1===1'b1 && C2===1'b1)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b1 && C1===1'b0 && C2===1'b1)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b1 && C1===1'b1 && C2===1'b0)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b1 && C1===1'b1 && C2===1'b1)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      ifnone
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b1 && C1===1'b0 && C2===1'b1)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b1 && C1===1'b1 && C2===1'b0)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b1 && C1===1'b1 && C2===1'b1)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b0 && C1===1'b0 && C2===1'b1)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b0 && C1===1'b1 && C2===1'b0)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b0 && C1===1'b1 && C2===1'b1)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b1 && C1===1'b0 && C2===1'b1)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b1 && C1===1'b1 && C2===1'b0)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b1 && C1===1'b1 && C2===1'b1)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      ifnone
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && C1===1'b0 && C2===1'b1)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && C1===1'b1 && C2===1'b0)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && C1===1'b1 && C2===1'b1)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && C1===1'b0 && C2===1'b1)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && C1===1'b1 && C2===1'b0)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && C1===1'b1 && C2===1'b1)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1 && C1===1'b0 && C2===1'b1)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1 && C1===1'b1 && C2===1'b0)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1 && C1===1'b1 && C2===1'b1)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      ifnone
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && C1===1'b0 && C2===1'b1)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && C1===1'b1 && C2===1'b0)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && C1===1'b1 && C2===1'b1)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && C1===1'b0 && C2===1'b1)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && C1===1'b1 && C2===1'b0)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && C1===1'b1 && C2===1'b1)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1 && C1===1'b0 && C2===1'b1)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1 && C1===1'b1 && C2===1'b0)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1 && C1===1'b1 && C2===1'b1)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      ifnone
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && B1===1'b0 && B2===1'b1)
      // comb arc C1 --> X
      (C1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && B1===1'b1 && B2===1'b0)
      // comb arc C1 --> X
      (C1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && B1===1'b1 && B2===1'b1)
      // comb arc C1 --> X
      (C1 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && B1===1'b0 && B2===1'b1)
      // comb arc C1 --> X
      (C1 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && B1===1'b1 && B2===1'b0)
      // comb arc C1 --> X
      (C1 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && B1===1'b1 && B2===1'b1)
      // comb arc C1 --> X
      (C1 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1 && B1===1'b0 && B2===1'b1)
      // comb arc C1 --> X
      (C1 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1 && B1===1'b1 && B2===1'b0)
      // comb arc C1 --> X
      (C1 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1 && B1===1'b1 && B2===1'b1)
      // comb arc C1 --> X
      (C1 => X) = (1.0,1.0);
      
      ifnone
      // comb arc C1 --> X
      (C1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && B1===1'b0 && B2===1'b1)
      // comb arc C2 --> X
      (C2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && B1===1'b1 && B2===1'b0)
      // comb arc C2 --> X
      (C2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && B1===1'b1 && B2===1'b1)
      // comb arc C2 --> X
      (C2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && B1===1'b0 && B2===1'b1)
      // comb arc C2 --> X
      (C2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && B1===1'b1 && B2===1'b0)
      // comb arc C2 --> X
      (C2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && B1===1'b1 && B2===1'b1)
      // comb arc C2 --> X
      (C2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1 && B1===1'b0 && B2===1'b1)
      // comb arc C2 --> X
      (C2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1 && B1===1'b1 && B2===1'b0)
      // comb arc C2 --> X
      (C2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1 && B1===1'b1 && B2===1'b1)
      // comb arc C2 --> X
      (C2 => X) = (1.0,1.0);
      
      ifnone
      // comb arc C2 --> X
      (C2 => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_OAI222_1( X, A1, A2, B1, B2, C1, C2 );
input A1, A2, B1, B2, C1, C2;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_OAI222_1_func SAEDRVT14_OAI222_1_behav_inst(.X(X),.A1(A1),.A2(A2),.B1(B1),.B2(B2),.C1(C1),.C2(C2));
`else
   SAEDRVT14_OAI222_1_func SAEDRVT14_OAI222_1_inst(.X(X),.A1(A1),.A2(A2),.B1(B1),.B2(B2),.C1(C1),.C2(C2));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      if(B1===1'b0 && B2===1'b1 && C1===1'b0 && C2===1'b1)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b1 && C1===1'b1 && C2===1'b0)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b1 && C1===1'b1 && C2===1'b1)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b0 && C1===1'b0 && C2===1'b1)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b0 && C1===1'b1 && C2===1'b0)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b0 && C1===1'b1 && C2===1'b1)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b1 && C1===1'b0 && C2===1'b1)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b1 && C1===1'b1 && C2===1'b0)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b1 && C1===1'b1 && C2===1'b1)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      ifnone
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b1 && C1===1'b0 && C2===1'b1)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b1 && C1===1'b1 && C2===1'b0)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b1 && C1===1'b1 && C2===1'b1)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b0 && C1===1'b0 && C2===1'b1)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b0 && C1===1'b1 && C2===1'b0)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b0 && C1===1'b1 && C2===1'b1)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b1 && C1===1'b0 && C2===1'b1)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b1 && C1===1'b1 && C2===1'b0)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b1 && C1===1'b1 && C2===1'b1)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      ifnone
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && C1===1'b0 && C2===1'b1)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && C1===1'b1 && C2===1'b0)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && C1===1'b1 && C2===1'b1)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && C1===1'b0 && C2===1'b1)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && C1===1'b1 && C2===1'b0)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && C1===1'b1 && C2===1'b1)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1 && C1===1'b0 && C2===1'b1)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1 && C1===1'b1 && C2===1'b0)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1 && C1===1'b1 && C2===1'b1)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      ifnone
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && C1===1'b0 && C2===1'b1)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && C1===1'b1 && C2===1'b0)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && C1===1'b1 && C2===1'b1)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && C1===1'b0 && C2===1'b1)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && C1===1'b1 && C2===1'b0)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && C1===1'b1 && C2===1'b1)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1 && C1===1'b0 && C2===1'b1)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1 && C1===1'b1 && C2===1'b0)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1 && C1===1'b1 && C2===1'b1)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      ifnone
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && B1===1'b0 && B2===1'b1)
      // comb arc C1 --> X
      (C1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && B1===1'b1 && B2===1'b0)
      // comb arc C1 --> X
      (C1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && B1===1'b1 && B2===1'b1)
      // comb arc C1 --> X
      (C1 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && B1===1'b0 && B2===1'b1)
      // comb arc C1 --> X
      (C1 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && B1===1'b1 && B2===1'b0)
      // comb arc C1 --> X
      (C1 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && B1===1'b1 && B2===1'b1)
      // comb arc C1 --> X
      (C1 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1 && B1===1'b0 && B2===1'b1)
      // comb arc C1 --> X
      (C1 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1 && B1===1'b1 && B2===1'b0)
      // comb arc C1 --> X
      (C1 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1 && B1===1'b1 && B2===1'b1)
      // comb arc C1 --> X
      (C1 => X) = (1.0,1.0);
      
      ifnone
      // comb arc C1 --> X
      (C1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && B1===1'b0 && B2===1'b1)
      // comb arc C2 --> X
      (C2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && B1===1'b1 && B2===1'b0)
      // comb arc C2 --> X
      (C2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && B1===1'b1 && B2===1'b1)
      // comb arc C2 --> X
      (C2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && B1===1'b0 && B2===1'b1)
      // comb arc C2 --> X
      (C2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && B1===1'b1 && B2===1'b0)
      // comb arc C2 --> X
      (C2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && B1===1'b1 && B2===1'b1)
      // comb arc C2 --> X
      (C2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1 && B1===1'b0 && B2===1'b1)
      // comb arc C2 --> X
      (C2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1 && B1===1'b1 && B2===1'b0)
      // comb arc C2 --> X
      (C2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1 && B1===1'b1 && B2===1'b1)
      // comb arc C2 --> X
      (C2 => X) = (1.0,1.0);
      
      ifnone
      // comb arc C2 --> X
      (C2 => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_OAI222_2( X, A1, A2, B1, B2, C1, C2 );
input A1, A2, B1, B2, C1, C2;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_OAI222_2_func SAEDRVT14_OAI222_2_behav_inst(.X(X),.A1(A1),.A2(A2),.B1(B1),.B2(B2),.C1(C1),.C2(C2));
`else
   SAEDRVT14_OAI222_2_func SAEDRVT14_OAI222_2_inst(.X(X),.A1(A1),.A2(A2),.B1(B1),.B2(B2),.C1(C1),.C2(C2));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      if(B1===1'b0 && B2===1'b1 && C1===1'b0 && C2===1'b1)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b1 && C1===1'b1 && C2===1'b0)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b1 && C1===1'b1 && C2===1'b1)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b0 && C1===1'b0 && C2===1'b1)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b0 && C1===1'b1 && C2===1'b0)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b0 && C1===1'b1 && C2===1'b1)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b1 && C1===1'b0 && C2===1'b1)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b1 && C1===1'b1 && C2===1'b0)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b1 && C1===1'b1 && C2===1'b1)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      ifnone
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b1 && C1===1'b0 && C2===1'b1)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b1 && C1===1'b1 && C2===1'b0)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b1 && C1===1'b1 && C2===1'b1)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b0 && C1===1'b0 && C2===1'b1)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b0 && C1===1'b1 && C2===1'b0)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b0 && C1===1'b1 && C2===1'b1)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b1 && C1===1'b0 && C2===1'b1)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b1 && C1===1'b1 && C2===1'b0)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b1 && C1===1'b1 && C2===1'b1)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      ifnone
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && C1===1'b0 && C2===1'b1)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && C1===1'b1 && C2===1'b0)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && C1===1'b1 && C2===1'b1)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && C1===1'b0 && C2===1'b1)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && C1===1'b1 && C2===1'b0)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && C1===1'b1 && C2===1'b1)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1 && C1===1'b0 && C2===1'b1)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1 && C1===1'b1 && C2===1'b0)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1 && C1===1'b1 && C2===1'b1)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      ifnone
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && C1===1'b0 && C2===1'b1)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && C1===1'b1 && C2===1'b0)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && C1===1'b1 && C2===1'b1)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && C1===1'b0 && C2===1'b1)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && C1===1'b1 && C2===1'b0)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && C1===1'b1 && C2===1'b1)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1 && C1===1'b0 && C2===1'b1)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1 && C1===1'b1 && C2===1'b0)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1 && C1===1'b1 && C2===1'b1)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      ifnone
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && B1===1'b0 && B2===1'b1)
      // comb arc C1 --> X
      (C1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && B1===1'b1 && B2===1'b0)
      // comb arc C1 --> X
      (C1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && B1===1'b1 && B2===1'b1)
      // comb arc C1 --> X
      (C1 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && B1===1'b0 && B2===1'b1)
      // comb arc C1 --> X
      (C1 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && B1===1'b1 && B2===1'b0)
      // comb arc C1 --> X
      (C1 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && B1===1'b1 && B2===1'b1)
      // comb arc C1 --> X
      (C1 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1 && B1===1'b0 && B2===1'b1)
      // comb arc C1 --> X
      (C1 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1 && B1===1'b1 && B2===1'b0)
      // comb arc C1 --> X
      (C1 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1 && B1===1'b1 && B2===1'b1)
      // comb arc C1 --> X
      (C1 => X) = (1.0,1.0);
      
      ifnone
      // comb arc C1 --> X
      (C1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && B1===1'b0 && B2===1'b1)
      // comb arc C2 --> X
      (C2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && B1===1'b1 && B2===1'b0)
      // comb arc C2 --> X
      (C2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && B1===1'b1 && B2===1'b1)
      // comb arc C2 --> X
      (C2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && B1===1'b0 && B2===1'b1)
      // comb arc C2 --> X
      (C2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && B1===1'b1 && B2===1'b0)
      // comb arc C2 --> X
      (C2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && B1===1'b1 && B2===1'b1)
      // comb arc C2 --> X
      (C2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1 && B1===1'b0 && B2===1'b1)
      // comb arc C2 --> X
      (C2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1 && B1===1'b1 && B2===1'b0)
      // comb arc C2 --> X
      (C2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1 && B1===1'b1 && B2===1'b1)
      // comb arc C2 --> X
      (C2 => X) = (1.0,1.0);
      
      ifnone
      // comb arc C2 --> X
      (C2 => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_OAI222_4( X, A1, A2, B1, B2, C1, C2 );
input A1, A2, B1, B2, C1, C2;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_OAI222_4_func SAEDRVT14_OAI222_4_behav_inst(.X(X),.A1(A1),.A2(A2),.B1(B1),.B2(B2),.C1(C1),.C2(C2));
`else
   SAEDRVT14_OAI222_4_func SAEDRVT14_OAI222_4_inst(.X(X),.A1(A1),.A2(A2),.B1(B1),.B2(B2),.C1(C1),.C2(C2));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      if(B1===1'b0 && B2===1'b1 && C1===1'b0 && C2===1'b1)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b1 && C1===1'b1 && C2===1'b0)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b1 && C1===1'b1 && C2===1'b1)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b0 && C1===1'b0 && C2===1'b1)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b0 && C1===1'b1 && C2===1'b0)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b0 && C1===1'b1 && C2===1'b1)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b1 && C1===1'b0 && C2===1'b1)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b1 && C1===1'b1 && C2===1'b0)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b1 && C1===1'b1 && C2===1'b1)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      ifnone
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b1 && C1===1'b0 && C2===1'b1)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b1 && C1===1'b1 && C2===1'b0)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b1 && C1===1'b1 && C2===1'b1)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b0 && C1===1'b0 && C2===1'b1)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b0 && C1===1'b1 && C2===1'b0)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b0 && C1===1'b1 && C2===1'b1)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b1 && C1===1'b0 && C2===1'b1)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b1 && C1===1'b1 && C2===1'b0)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b1 && C1===1'b1 && C2===1'b1)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      ifnone
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && C1===1'b0 && C2===1'b1)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && C1===1'b1 && C2===1'b0)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && C1===1'b1 && C2===1'b1)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && C1===1'b0 && C2===1'b1)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && C1===1'b1 && C2===1'b0)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && C1===1'b1 && C2===1'b1)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1 && C1===1'b0 && C2===1'b1)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1 && C1===1'b1 && C2===1'b0)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1 && C1===1'b1 && C2===1'b1)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      ifnone
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && C1===1'b0 && C2===1'b1)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && C1===1'b1 && C2===1'b0)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && C1===1'b1 && C2===1'b1)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && C1===1'b0 && C2===1'b1)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && C1===1'b1 && C2===1'b0)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && C1===1'b1 && C2===1'b1)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1 && C1===1'b0 && C2===1'b1)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1 && C1===1'b1 && C2===1'b0)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1 && C1===1'b1 && C2===1'b1)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      ifnone
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && B1===1'b0 && B2===1'b1)
      // comb arc C1 --> X
      (C1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && B1===1'b1 && B2===1'b0)
      // comb arc C1 --> X
      (C1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && B1===1'b1 && B2===1'b1)
      // comb arc C1 --> X
      (C1 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && B1===1'b0 && B2===1'b1)
      // comb arc C1 --> X
      (C1 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && B1===1'b1 && B2===1'b0)
      // comb arc C1 --> X
      (C1 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && B1===1'b1 && B2===1'b1)
      // comb arc C1 --> X
      (C1 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1 && B1===1'b0 && B2===1'b1)
      // comb arc C1 --> X
      (C1 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1 && B1===1'b1 && B2===1'b0)
      // comb arc C1 --> X
      (C1 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1 && B1===1'b1 && B2===1'b1)
      // comb arc C1 --> X
      (C1 => X) = (1.0,1.0);
      
      ifnone
      // comb arc C1 --> X
      (C1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && B1===1'b0 && B2===1'b1)
      // comb arc C2 --> X
      (C2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && B1===1'b1 && B2===1'b0)
      // comb arc C2 --> X
      (C2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && B1===1'b1 && B2===1'b1)
      // comb arc C2 --> X
      (C2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && B1===1'b0 && B2===1'b1)
      // comb arc C2 --> X
      (C2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && B1===1'b1 && B2===1'b0)
      // comb arc C2 --> X
      (C2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && B1===1'b1 && B2===1'b1)
      // comb arc C2 --> X
      (C2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1 && B1===1'b0 && B2===1'b1)
      // comb arc C2 --> X
      (C2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1 && B1===1'b1 && B2===1'b0)
      // comb arc C2 --> X
      (C2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1 && B1===1'b1 && B2===1'b1)
      // comb arc C2 --> X
      (C2 => X) = (1.0,1.0);
      
      ifnone
      // comb arc C2 --> X
      (C2 => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_OAI22_0P5( X, A1, A2, B1, B2 );
input A1, A2, B1, B2;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_OAI22_0P5_func SAEDRVT14_OAI22_0P5_behav_inst(.X(X),.A1(A1),.A2(A2),.B1(B1),.B2(B2));
`else
   SAEDRVT14_OAI22_0P5_func SAEDRVT14_OAI22_0P5_inst(.X(X),.A1(A1),.A2(A2),.B1(B1),.B2(B2));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      if(B1===1'b0 && B2===1'b1)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b0)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b1)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      ifnone
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b1)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b0)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b1)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      ifnone
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      ifnone
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      ifnone
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_OAI22_0P75( X, A1, A2, B1, B2 );
input A1, A2, B1, B2;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_OAI22_0P75_func SAEDRVT14_OAI22_0P75_behav_inst(.X(X),.A1(A1),.A2(A2),.B1(B1),.B2(B2));
`else
   SAEDRVT14_OAI22_0P75_func SAEDRVT14_OAI22_0P75_inst(.X(X),.A1(A1),.A2(A2),.B1(B1),.B2(B2));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      if(B1===1'b0 && B2===1'b1)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b0)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b1)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      ifnone
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b1)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b0)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b1)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      ifnone
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      ifnone
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      ifnone
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_OAI22_1( X, A1, A2, B1, B2 );
input A1, A2, B1, B2;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_OAI22_1_func SAEDRVT14_OAI22_1_behav_inst(.X(X),.A1(A1),.A2(A2),.B1(B1),.B2(B2));
`else
   SAEDRVT14_OAI22_1_func SAEDRVT14_OAI22_1_inst(.X(X),.A1(A1),.A2(A2),.B1(B1),.B2(B2));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      if(B1===1'b0 && B2===1'b1)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b0)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b1)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      ifnone
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b1)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b0)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b1)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      ifnone
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      ifnone
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      ifnone
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_OAI22_1P5( X, A1, A2, B1, B2 );
input A1, A2, B1, B2;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_OAI22_1P5_func SAEDRVT14_OAI22_1P5_behav_inst(.X(X),.A1(A1),.A2(A2),.B1(B1),.B2(B2));
`else
   SAEDRVT14_OAI22_1P5_func SAEDRVT14_OAI22_1P5_inst(.X(X),.A1(A1),.A2(A2),.B1(B1),.B2(B2));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      if(B1===1'b0 && B2===1'b1)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b0)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b1)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      ifnone
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b1)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b0)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b1)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      ifnone
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      ifnone
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      ifnone
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_OAI22_2( X, A1, A2, B1, B2 );
input A1, A2, B1, B2;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_OAI22_2_func SAEDRVT14_OAI22_2_behav_inst(.X(X),.A1(A1),.A2(A2),.B1(B1),.B2(B2));
`else
   SAEDRVT14_OAI22_2_func SAEDRVT14_OAI22_2_inst(.X(X),.A1(A1),.A2(A2),.B1(B1),.B2(B2));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      if(B1===1'b0 && B2===1'b1)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b0)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b1)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      ifnone
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b1)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b0)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b1)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      ifnone
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      ifnone
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      ifnone
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_OAI22_3( X, A1, A2, B1, B2 );
input A1, A2, B1, B2;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_OAI22_3_func SAEDRVT14_OAI22_3_behav_inst(.X(X),.A1(A1),.A2(A2),.B1(B1),.B2(B2));
`else
   SAEDRVT14_OAI22_3_func SAEDRVT14_OAI22_3_inst(.X(X),.A1(A1),.A2(A2),.B1(B1),.B2(B2));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      if(B1===1'b0 && B2===1'b1)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b0)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b1)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      ifnone
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b1)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b0)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b1)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      ifnone
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      ifnone
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      ifnone
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_OAI22_4( X, A1, A2, B1, B2 );
input A1, A2, B1, B2;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_OAI22_4_func SAEDRVT14_OAI22_4_behav_inst(.X(X),.A1(A1),.A2(A2),.B1(B1),.B2(B2));
`else
   SAEDRVT14_OAI22_4_func SAEDRVT14_OAI22_4_inst(.X(X),.A1(A1),.A2(A2),.B1(B1),.B2(B2));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      if(B1===1'b0 && B2===1'b1)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b0)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b1)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      ifnone
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b1)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b0)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b1)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      ifnone
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      ifnone
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      ifnone
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_OAI311_0P5( X, A1, A2, A3, B1, B2 );
input A1, A2, A3, B1, B2;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_OAI311_0P5_func SAEDRVT14_OAI311_0P5_behav_inst(.X(X),.A1(A1),.A2(A2),.A3(A3),.B1(B1),.B2(B2));
`else
   SAEDRVT14_OAI311_0P5_func SAEDRVT14_OAI311_0P5_inst(.X(X),.A1(A1),.A2(A2),.A3(A3),.B1(B1),.B2(B2));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      // comb arc A3 --> X
      (A3 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0 && A3===1'b1)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && A3===1'b0)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && A3===1'b1)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && A3===1'b0)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && A3===1'b1)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1 && A3===1'b0)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1 && A3===1'b1)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      ifnone
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0 && A3===1'b1)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && A3===1'b0)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && A3===1'b1)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && A3===1'b0)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && A3===1'b1)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1 && A3===1'b0)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1 && A3===1'b1)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      ifnone
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_OAI311_0P75( X, A1, A2, A3, B1, B2 );
input A1, A2, A3, B1, B2;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_OAI311_0P75_func SAEDRVT14_OAI311_0P75_behav_inst(.X(X),.A1(A1),.A2(A2),.A3(A3),.B1(B1),.B2(B2));
`else
   SAEDRVT14_OAI311_0P75_func SAEDRVT14_OAI311_0P75_inst(.X(X),.A1(A1),.A2(A2),.A3(A3),.B1(B1),.B2(B2));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      // comb arc A3 --> X
      (A3 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0 && A3===1'b1)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && A3===1'b0)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && A3===1'b1)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && A3===1'b0)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && A3===1'b1)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1 && A3===1'b0)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1 && A3===1'b1)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      ifnone
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0 && A3===1'b1)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && A3===1'b0)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && A3===1'b1)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && A3===1'b0)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && A3===1'b1)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1 && A3===1'b0)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1 && A3===1'b1)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      ifnone
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_OAI311_1( X, A1, A2, A3, B1, B2 );
input A1, A2, A3, B1, B2;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_OAI311_1_func SAEDRVT14_OAI311_1_behav_inst(.X(X),.A1(A1),.A2(A2),.A3(A3),.B1(B1),.B2(B2));
`else
   SAEDRVT14_OAI311_1_func SAEDRVT14_OAI311_1_inst(.X(X),.A1(A1),.A2(A2),.A3(A3),.B1(B1),.B2(B2));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      // comb arc A3 --> X
      (A3 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0 && A3===1'b1)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && A3===1'b0)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && A3===1'b1)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && A3===1'b0)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && A3===1'b1)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1 && A3===1'b0)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1 && A3===1'b1)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      ifnone
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0 && A3===1'b1)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && A3===1'b0)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && A3===1'b1)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && A3===1'b0)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && A3===1'b1)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1 && A3===1'b0)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1 && A3===1'b1)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      ifnone
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_OAI311_2( X, A1, A2, A3, B1, B2 );
input A1, A2, A3, B1, B2;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_OAI311_2_func SAEDRVT14_OAI311_2_behav_inst(.X(X),.A1(A1),.A2(A2),.A3(A3),.B1(B1),.B2(B2));
`else
   SAEDRVT14_OAI311_2_func SAEDRVT14_OAI311_2_inst(.X(X),.A1(A1),.A2(A2),.A3(A3),.B1(B1),.B2(B2));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      // comb arc A3 --> X
      (A3 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0 && A3===1'b1)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && A3===1'b0)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && A3===1'b1)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && A3===1'b0)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && A3===1'b1)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1 && A3===1'b0)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1 && A3===1'b1)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      ifnone
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0 && A3===1'b1)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && A3===1'b0)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && A3===1'b1)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && A3===1'b0)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && A3===1'b1)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1 && A3===1'b0)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1 && A3===1'b1)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      ifnone
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_OAI311_4( X, A1, A2, A3, B1, B2 );
input A1, A2, A3, B1, B2;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_OAI311_4_func SAEDRVT14_OAI311_4_behav_inst(.X(X),.A1(A1),.A2(A2),.A3(A3),.B1(B1),.B2(B2));
`else
   SAEDRVT14_OAI311_4_func SAEDRVT14_OAI311_4_inst(.X(X),.A1(A1),.A2(A2),.A3(A3),.B1(B1),.B2(B2));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      // comb arc A3 --> X
      (A3 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0 && A3===1'b1)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && A3===1'b0)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && A3===1'b1)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && A3===1'b0)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && A3===1'b1)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1 && A3===1'b0)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1 && A3===1'b1)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      ifnone
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0 && A3===1'b1)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && A3===1'b0)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && A3===1'b1)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && A3===1'b0)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && A3===1'b1)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1 && A3===1'b0)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1 && A3===1'b1)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      ifnone
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_OAI31_0P5( X, A1, A2, A3, B );
input A1, A2, A3, B;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_OAI31_0P5_func SAEDRVT14_OAI31_0P5_behav_inst(.X(X),.A1(A1),.A2(A2),.A3(A3),.B(B));
`else
   SAEDRVT14_OAI31_0P5_func SAEDRVT14_OAI31_0P5_inst(.X(X),.A1(A1),.A2(A2),.A3(A3),.B(B));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      // comb arc A3 --> X
      (A3 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0 && A3===1'b1)
      // comb arc B --> X
      (B => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && A3===1'b0)
      // comb arc B --> X
      (B => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && A3===1'b1)
      // comb arc B --> X
      (B => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && A3===1'b0)
      // comb arc B --> X
      (B => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && A3===1'b1)
      // comb arc B --> X
      (B => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1 && A3===1'b0)
      // comb arc B --> X
      (B => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1 && A3===1'b1)
      // comb arc B --> X
      (B => X) = (1.0,1.0);
      
      ifnone
      // comb arc B --> X
      (B => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_OAI31_0P75( X, A1, A2, A3, B );
input A1, A2, A3, B;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_OAI31_0P75_func SAEDRVT14_OAI31_0P75_behav_inst(.X(X),.A1(A1),.A2(A2),.A3(A3),.B(B));
`else
   SAEDRVT14_OAI31_0P75_func SAEDRVT14_OAI31_0P75_inst(.X(X),.A1(A1),.A2(A2),.A3(A3),.B(B));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      // comb arc A3 --> X
      (A3 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0 && A3===1'b1)
      // comb arc B --> X
      (B => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && A3===1'b0)
      // comb arc B --> X
      (B => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && A3===1'b1)
      // comb arc B --> X
      (B => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && A3===1'b0)
      // comb arc B --> X
      (B => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && A3===1'b1)
      // comb arc B --> X
      (B => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1 && A3===1'b0)
      // comb arc B --> X
      (B => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1 && A3===1'b1)
      // comb arc B --> X
      (B => X) = (1.0,1.0);
      
      ifnone
      // comb arc B --> X
      (B => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_OAI31_1( X, A1, A2, A3, B );
input A1, A2, A3, B;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_OAI31_1_func SAEDRVT14_OAI31_1_behav_inst(.X(X),.A1(A1),.A2(A2),.A3(A3),.B(B));
`else
   SAEDRVT14_OAI31_1_func SAEDRVT14_OAI31_1_inst(.X(X),.A1(A1),.A2(A2),.A3(A3),.B(B));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      // comb arc A3 --> X
      (A3 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0 && A3===1'b1)
      // comb arc B --> X
      (B => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && A3===1'b0)
      // comb arc B --> X
      (B => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && A3===1'b1)
      // comb arc B --> X
      (B => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && A3===1'b0)
      // comb arc B --> X
      (B => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && A3===1'b1)
      // comb arc B --> X
      (B => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1 && A3===1'b0)
      // comb arc B --> X
      (B => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1 && A3===1'b1)
      // comb arc B --> X
      (B => X) = (1.0,1.0);
      
      ifnone
      // comb arc B --> X
      (B => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_OAI31_2( X, A1, A2, A3, B );
input A1, A2, A3, B;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_OAI31_2_func SAEDRVT14_OAI31_2_behav_inst(.X(X),.A1(A1),.A2(A2),.A3(A3),.B(B));
`else
   SAEDRVT14_OAI31_2_func SAEDRVT14_OAI31_2_inst(.X(X),.A1(A1),.A2(A2),.A3(A3),.B(B));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      // comb arc A3 --> X
      (A3 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0 && A3===1'b1)
      // comb arc B --> X
      (B => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && A3===1'b0)
      // comb arc B --> X
      (B => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && A3===1'b1)
      // comb arc B --> X
      (B => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && A3===1'b0)
      // comb arc B --> X
      (B => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && A3===1'b1)
      // comb arc B --> X
      (B => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1 && A3===1'b0)
      // comb arc B --> X
      (B => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1 && A3===1'b1)
      // comb arc B --> X
      (B => X) = (1.0,1.0);
      
      ifnone
      // comb arc B --> X
      (B => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_OAI31_4( X, A1, A2, A3, B );
input A1, A2, A3, B;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_OAI31_4_func SAEDRVT14_OAI31_4_behav_inst(.X(X),.A1(A1),.A2(A2),.A3(A3),.B(B));
`else
   SAEDRVT14_OAI31_4_func SAEDRVT14_OAI31_4_inst(.X(X),.A1(A1),.A2(A2),.A3(A3),.B(B));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      // comb arc A3 --> X
      (A3 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0 && A3===1'b1)
      // comb arc B --> X
      (B => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && A3===1'b0)
      // comb arc B --> X
      (B => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && A3===1'b1)
      // comb arc B --> X
      (B => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && A3===1'b0)
      // comb arc B --> X
      (B => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && A3===1'b1)
      // comb arc B --> X
      (B => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1 && A3===1'b0)
      // comb arc B --> X
      (B => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1 && A3===1'b1)
      // comb arc B --> X
      (B => X) = (1.0,1.0);
      
      ifnone
      // comb arc B --> X
      (B => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_OAI32_0P5( X, A1, A2, A3, B1, B2 );
input A1, A2, A3, B1, B2;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_OAI32_0P5_func SAEDRVT14_OAI32_0P5_behav_inst(.X(X),.A1(A1),.A2(A2),.A3(A3),.B1(B1),.B2(B2));
`else
   SAEDRVT14_OAI32_0P5_func SAEDRVT14_OAI32_0P5_inst(.X(X),.A1(A1),.A2(A2),.A3(A3),.B1(B1),.B2(B2));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      if(B1===1'b0 && B2===1'b1)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b0)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b1)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      ifnone
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b1)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b0)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b1)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      ifnone
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b1)
      // comb arc A3 --> X
      (A3 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b0)
      // comb arc A3 --> X
      (A3 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b1)
      // comb arc A3 --> X
      (A3 => X) = (1.0,1.0);
      
      ifnone
      // comb arc A3 --> X
      (A3 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0 && A3===1'b1)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && A3===1'b0)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && A3===1'b1)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && A3===1'b0)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && A3===1'b1)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1 && A3===1'b0)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1 && A3===1'b1)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      ifnone
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0 && A3===1'b1)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && A3===1'b0)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && A3===1'b1)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && A3===1'b0)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && A3===1'b1)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1 && A3===1'b0)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1 && A3===1'b1)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      ifnone
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_OAI32_0P75( X, A1, A2, A3, B1, B2 );
input A1, A2, A3, B1, B2;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_OAI32_0P75_func SAEDRVT14_OAI32_0P75_behav_inst(.X(X),.A1(A1),.A2(A2),.A3(A3),.B1(B1),.B2(B2));
`else
   SAEDRVT14_OAI32_0P75_func SAEDRVT14_OAI32_0P75_inst(.X(X),.A1(A1),.A2(A2),.A3(A3),.B1(B1),.B2(B2));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      if(B1===1'b0 && B2===1'b1)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b0)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b1)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      ifnone
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b1)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b0)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b1)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      ifnone
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b1)
      // comb arc A3 --> X
      (A3 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b0)
      // comb arc A3 --> X
      (A3 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b1)
      // comb arc A3 --> X
      (A3 => X) = (1.0,1.0);
      
      ifnone
      // comb arc A3 --> X
      (A3 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0 && A3===1'b1)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && A3===1'b0)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && A3===1'b1)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && A3===1'b0)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && A3===1'b1)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1 && A3===1'b0)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1 && A3===1'b1)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      ifnone
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0 && A3===1'b1)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && A3===1'b0)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && A3===1'b1)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && A3===1'b0)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && A3===1'b1)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1 && A3===1'b0)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1 && A3===1'b1)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      ifnone
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_OAI32_1( X, A1, A2, A3, B1, B2 );
input A1, A2, A3, B1, B2;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_OAI32_1_func SAEDRVT14_OAI32_1_behav_inst(.X(X),.A1(A1),.A2(A2),.A3(A3),.B1(B1),.B2(B2));
`else
   SAEDRVT14_OAI32_1_func SAEDRVT14_OAI32_1_inst(.X(X),.A1(A1),.A2(A2),.A3(A3),.B1(B1),.B2(B2));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      if(B1===1'b0 && B2===1'b1)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b0)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b1)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      ifnone
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b1)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b0)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b1)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      ifnone
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b1)
      // comb arc A3 --> X
      (A3 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b0)
      // comb arc A3 --> X
      (A3 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b1)
      // comb arc A3 --> X
      (A3 => X) = (1.0,1.0);
      
      ifnone
      // comb arc A3 --> X
      (A3 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0 && A3===1'b1)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && A3===1'b0)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && A3===1'b1)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && A3===1'b0)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && A3===1'b1)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1 && A3===1'b0)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1 && A3===1'b1)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      ifnone
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0 && A3===1'b1)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && A3===1'b0)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && A3===1'b1)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && A3===1'b0)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && A3===1'b1)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1 && A3===1'b0)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1 && A3===1'b1)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      ifnone
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_OAI32_2( X, A1, A2, A3, B1, B2 );
input A1, A2, A3, B1, B2;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_OAI32_2_func SAEDRVT14_OAI32_2_behav_inst(.X(X),.A1(A1),.A2(A2),.A3(A3),.B1(B1),.B2(B2));
`else
   SAEDRVT14_OAI32_2_func SAEDRVT14_OAI32_2_inst(.X(X),.A1(A1),.A2(A2),.A3(A3),.B1(B1),.B2(B2));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      if(B1===1'b0 && B2===1'b1)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b0)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b1)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      ifnone
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b1)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b0)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b1)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      ifnone
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b1)
      // comb arc A3 --> X
      (A3 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b0)
      // comb arc A3 --> X
      (A3 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b1)
      // comb arc A3 --> X
      (A3 => X) = (1.0,1.0);
      
      ifnone
      // comb arc A3 --> X
      (A3 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0 && A3===1'b1)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && A3===1'b0)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && A3===1'b1)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && A3===1'b0)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && A3===1'b1)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1 && A3===1'b0)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1 && A3===1'b1)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      ifnone
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0 && A3===1'b1)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && A3===1'b0)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && A3===1'b1)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && A3===1'b0)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && A3===1'b1)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1 && A3===1'b0)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1 && A3===1'b1)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      ifnone
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_OAI32_4( X, A1, A2, A3, B1, B2 );
input A1, A2, A3, B1, B2;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_OAI32_4_func SAEDRVT14_OAI32_4_behav_inst(.X(X),.A1(A1),.A2(A2),.A3(A3),.B1(B1),.B2(B2));
`else
   SAEDRVT14_OAI32_4_func SAEDRVT14_OAI32_4_inst(.X(X),.A1(A1),.A2(A2),.A3(A3),.B1(B1),.B2(B2));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      if(B1===1'b0 && B2===1'b1)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b0)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b1)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      ifnone
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b1)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b0)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b1)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      ifnone
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b1)
      // comb arc A3 --> X
      (A3 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b0)
      // comb arc A3 --> X
      (A3 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b1)
      // comb arc A3 --> X
      (A3 => X) = (1.0,1.0);
      
      ifnone
      // comb arc A3 --> X
      (A3 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0 && A3===1'b1)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && A3===1'b0)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && A3===1'b1)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && A3===1'b0)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && A3===1'b1)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1 && A3===1'b0)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1 && A3===1'b1)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      ifnone
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0 && A3===1'b1)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && A3===1'b0)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && A3===1'b1)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && A3===1'b0)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && A3===1'b1)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1 && A3===1'b0)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1 && A3===1'b1)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      ifnone
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_OAI33_0P5( X, A1, A2, A3, B1, B2, B3 );
input A1, A2, A3, B1, B2, B3;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_OAI33_0P5_func SAEDRVT14_OAI33_0P5_behav_inst(.X(X),.A1(A1),.A2(A2),.A3(A3),.B1(B1),.B2(B2),.B3(B3));
`else
   SAEDRVT14_OAI33_0P5_func SAEDRVT14_OAI33_0P5_inst(.X(X),.A1(A1),.A2(A2),.A3(A3),.B1(B1),.B2(B2),.B3(B3));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      if(B1===1'b0 && B2===1'b0 && B3===1'b1)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b1 && B3===1'b0)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b1 && B3===1'b1)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b0 && B3===1'b0)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b0 && B3===1'b1)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b1 && B3===1'b0)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b1 && B3===1'b1)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      ifnone
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b0 && B3===1'b1)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b1 && B3===1'b0)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b1 && B3===1'b1)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b0 && B3===1'b0)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b0 && B3===1'b1)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b1 && B3===1'b0)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b1 && B3===1'b1)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      ifnone
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b0 && B3===1'b1)
      // comb arc A3 --> X
      (A3 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b1 && B3===1'b0)
      // comb arc A3 --> X
      (A3 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b1 && B3===1'b1)
      // comb arc A3 --> X
      (A3 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b0 && B3===1'b0)
      // comb arc A3 --> X
      (A3 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b0 && B3===1'b1)
      // comb arc A3 --> X
      (A3 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b1 && B3===1'b0)
      // comb arc A3 --> X
      (A3 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b1 && B3===1'b1)
      // comb arc A3 --> X
      (A3 => X) = (1.0,1.0);
      
      ifnone
      // comb arc A3 --> X
      (A3 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0 && A3===1'b1)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && A3===1'b0)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && A3===1'b1)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && A3===1'b0)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && A3===1'b1)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1 && A3===1'b0)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1 && A3===1'b1)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      ifnone
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0 && A3===1'b1)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && A3===1'b0)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && A3===1'b1)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && A3===1'b0)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && A3===1'b1)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1 && A3===1'b0)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1 && A3===1'b1)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      ifnone
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0 && A3===1'b1)
      // comb arc B3 --> X
      (B3 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && A3===1'b0)
      // comb arc B3 --> X
      (B3 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && A3===1'b1)
      // comb arc B3 --> X
      (B3 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && A3===1'b0)
      // comb arc B3 --> X
      (B3 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && A3===1'b1)
      // comb arc B3 --> X
      (B3 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1 && A3===1'b0)
      // comb arc B3 --> X
      (B3 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1 && A3===1'b1)
      // comb arc B3 --> X
      (B3 => X) = (1.0,1.0);
      
      ifnone
      // comb arc B3 --> X
      (B3 => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_OAI33_0P75( X, A1, A2, A3, B1, B2, B3 );
input A1, A2, A3, B1, B2, B3;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_OAI33_0P75_func SAEDRVT14_OAI33_0P75_behav_inst(.X(X),.A1(A1),.A2(A2),.A3(A3),.B1(B1),.B2(B2),.B3(B3));
`else
   SAEDRVT14_OAI33_0P75_func SAEDRVT14_OAI33_0P75_inst(.X(X),.A1(A1),.A2(A2),.A3(A3),.B1(B1),.B2(B2),.B3(B3));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      if(B1===1'b0 && B2===1'b0 && B3===1'b1)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b1 && B3===1'b0)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b1 && B3===1'b1)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b0 && B3===1'b0)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b0 && B3===1'b1)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b1 && B3===1'b0)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b1 && B3===1'b1)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      ifnone
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b0 && B3===1'b1)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b1 && B3===1'b0)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b1 && B3===1'b1)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b0 && B3===1'b0)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b0 && B3===1'b1)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b1 && B3===1'b0)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b1 && B3===1'b1)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      ifnone
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b0 && B3===1'b1)
      // comb arc A3 --> X
      (A3 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b1 && B3===1'b0)
      // comb arc A3 --> X
      (A3 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b1 && B3===1'b1)
      // comb arc A3 --> X
      (A3 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b0 && B3===1'b0)
      // comb arc A3 --> X
      (A3 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b0 && B3===1'b1)
      // comb arc A3 --> X
      (A3 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b1 && B3===1'b0)
      // comb arc A3 --> X
      (A3 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b1 && B3===1'b1)
      // comb arc A3 --> X
      (A3 => X) = (1.0,1.0);
      
      ifnone
      // comb arc A3 --> X
      (A3 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0 && A3===1'b1)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && A3===1'b0)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && A3===1'b1)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && A3===1'b0)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && A3===1'b1)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1 && A3===1'b0)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1 && A3===1'b1)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      ifnone
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0 && A3===1'b1)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && A3===1'b0)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && A3===1'b1)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && A3===1'b0)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && A3===1'b1)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1 && A3===1'b0)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1 && A3===1'b1)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      ifnone
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0 && A3===1'b1)
      // comb arc B3 --> X
      (B3 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && A3===1'b0)
      // comb arc B3 --> X
      (B3 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && A3===1'b1)
      // comb arc B3 --> X
      (B3 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && A3===1'b0)
      // comb arc B3 --> X
      (B3 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && A3===1'b1)
      // comb arc B3 --> X
      (B3 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1 && A3===1'b0)
      // comb arc B3 --> X
      (B3 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1 && A3===1'b1)
      // comb arc B3 --> X
      (B3 => X) = (1.0,1.0);
      
      ifnone
      // comb arc B3 --> X
      (B3 => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_OAI33_1( X, A1, A2, A3, B1, B2, B3 );
input A1, A2, A3, B1, B2, B3;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_OAI33_1_func SAEDRVT14_OAI33_1_behav_inst(.X(X),.A1(A1),.A2(A2),.A3(A3),.B1(B1),.B2(B2),.B3(B3));
`else
   SAEDRVT14_OAI33_1_func SAEDRVT14_OAI33_1_inst(.X(X),.A1(A1),.A2(A2),.A3(A3),.B1(B1),.B2(B2),.B3(B3));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      if(B1===1'b0 && B2===1'b0 && B3===1'b1)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b1 && B3===1'b0)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b1 && B3===1'b1)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b0 && B3===1'b0)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b0 && B3===1'b1)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b1 && B3===1'b0)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b1 && B3===1'b1)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      ifnone
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b0 && B3===1'b1)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b1 && B3===1'b0)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b1 && B3===1'b1)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b0 && B3===1'b0)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b0 && B3===1'b1)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b1 && B3===1'b0)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b1 && B3===1'b1)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      ifnone
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b0 && B3===1'b1)
      // comb arc A3 --> X
      (A3 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b1 && B3===1'b0)
      // comb arc A3 --> X
      (A3 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b1 && B3===1'b1)
      // comb arc A3 --> X
      (A3 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b0 && B3===1'b0)
      // comb arc A3 --> X
      (A3 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b0 && B3===1'b1)
      // comb arc A3 --> X
      (A3 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b1 && B3===1'b0)
      // comb arc A3 --> X
      (A3 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b1 && B3===1'b1)
      // comb arc A3 --> X
      (A3 => X) = (1.0,1.0);
      
      ifnone
      // comb arc A3 --> X
      (A3 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0 && A3===1'b1)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && A3===1'b0)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && A3===1'b1)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && A3===1'b0)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && A3===1'b1)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1 && A3===1'b0)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1 && A3===1'b1)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      ifnone
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0 && A3===1'b1)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && A3===1'b0)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && A3===1'b1)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && A3===1'b0)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && A3===1'b1)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1 && A3===1'b0)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1 && A3===1'b1)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      ifnone
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0 && A3===1'b1)
      // comb arc B3 --> X
      (B3 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && A3===1'b0)
      // comb arc B3 --> X
      (B3 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && A3===1'b1)
      // comb arc B3 --> X
      (B3 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && A3===1'b0)
      // comb arc B3 --> X
      (B3 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && A3===1'b1)
      // comb arc B3 --> X
      (B3 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1 && A3===1'b0)
      // comb arc B3 --> X
      (B3 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1 && A3===1'b1)
      // comb arc B3 --> X
      (B3 => X) = (1.0,1.0);
      
      ifnone
      // comb arc B3 --> X
      (B3 => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_OAI33_2( X, A1, A2, A3, B1, B2, B3 );
input A1, A2, A3, B1, B2, B3;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_OAI33_2_func SAEDRVT14_OAI33_2_behav_inst(.X(X),.A1(A1),.A2(A2),.A3(A3),.B1(B1),.B2(B2),.B3(B3));
`else
   SAEDRVT14_OAI33_2_func SAEDRVT14_OAI33_2_inst(.X(X),.A1(A1),.A2(A2),.A3(A3),.B1(B1),.B2(B2),.B3(B3));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      if(B1===1'b0 && B2===1'b0 && B3===1'b1)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b1 && B3===1'b0)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b1 && B3===1'b1)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b0 && B3===1'b0)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b0 && B3===1'b1)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b1 && B3===1'b0)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b1 && B3===1'b1)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      ifnone
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b0 && B3===1'b1)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b1 && B3===1'b0)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b1 && B3===1'b1)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b0 && B3===1'b0)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b0 && B3===1'b1)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b1 && B3===1'b0)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b1 && B3===1'b1)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      ifnone
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b0 && B3===1'b1)
      // comb arc A3 --> X
      (A3 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b1 && B3===1'b0)
      // comb arc A3 --> X
      (A3 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b1 && B3===1'b1)
      // comb arc A3 --> X
      (A3 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b0 && B3===1'b0)
      // comb arc A3 --> X
      (A3 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b0 && B3===1'b1)
      // comb arc A3 --> X
      (A3 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b1 && B3===1'b0)
      // comb arc A3 --> X
      (A3 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b1 && B3===1'b1)
      // comb arc A3 --> X
      (A3 => X) = (1.0,1.0);
      
      ifnone
      // comb arc A3 --> X
      (A3 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0 && A3===1'b1)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && A3===1'b0)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && A3===1'b1)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && A3===1'b0)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && A3===1'b1)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1 && A3===1'b0)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1 && A3===1'b1)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      ifnone
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0 && A3===1'b1)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && A3===1'b0)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && A3===1'b1)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && A3===1'b0)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && A3===1'b1)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1 && A3===1'b0)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1 && A3===1'b1)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      ifnone
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0 && A3===1'b1)
      // comb arc B3 --> X
      (B3 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && A3===1'b0)
      // comb arc B3 --> X
      (B3 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && A3===1'b1)
      // comb arc B3 --> X
      (B3 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && A3===1'b0)
      // comb arc B3 --> X
      (B3 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && A3===1'b1)
      // comb arc B3 --> X
      (B3 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1 && A3===1'b0)
      // comb arc B3 --> X
      (B3 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1 && A3===1'b1)
      // comb arc B3 --> X
      (B3 => X) = (1.0,1.0);
      
      ifnone
      // comb arc B3 --> X
      (B3 => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_OAI33_4( X, A1, A2, A3, B1, B2, B3 );
input A1, A2, A3, B1, B2, B3;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_OAI33_4_func SAEDRVT14_OAI33_4_behav_inst(.X(X),.A1(A1),.A2(A2),.A3(A3),.B1(B1),.B2(B2),.B3(B3));
`else
   SAEDRVT14_OAI33_4_func SAEDRVT14_OAI33_4_inst(.X(X),.A1(A1),.A2(A2),.A3(A3),.B1(B1),.B2(B2),.B3(B3));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      if(B1===1'b0 && B2===1'b0 && B3===1'b1)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b1 && B3===1'b0)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b1 && B3===1'b1)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b0 && B3===1'b0)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b0 && B3===1'b1)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b1 && B3===1'b0)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b1 && B3===1'b1)
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      ifnone
      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b0 && B3===1'b1)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b1 && B3===1'b0)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b1 && B3===1'b1)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b0 && B3===1'b0)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b0 && B3===1'b1)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b1 && B3===1'b0)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b1 && B3===1'b1)
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      ifnone
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b0 && B3===1'b1)
      // comb arc A3 --> X
      (A3 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b1 && B3===1'b0)
      // comb arc A3 --> X
      (A3 => X) = (1.0,1.0);
      
      if(B1===1'b0 && B2===1'b1 && B3===1'b1)
      // comb arc A3 --> X
      (A3 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b0 && B3===1'b0)
      // comb arc A3 --> X
      (A3 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b0 && B3===1'b1)
      // comb arc A3 --> X
      (A3 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b1 && B3===1'b0)
      // comb arc A3 --> X
      (A3 => X) = (1.0,1.0);
      
      if(B1===1'b1 && B2===1'b1 && B3===1'b1)
      // comb arc A3 --> X
      (A3 => X) = (1.0,1.0);
      
      ifnone
      // comb arc A3 --> X
      (A3 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0 && A3===1'b1)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && A3===1'b0)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && A3===1'b1)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && A3===1'b0)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && A3===1'b1)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1 && A3===1'b0)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1 && A3===1'b1)
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      ifnone
      // comb arc B1 --> X
      (B1 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0 && A3===1'b1)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && A3===1'b0)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && A3===1'b1)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && A3===1'b0)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && A3===1'b1)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1 && A3===1'b0)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1 && A3===1'b1)
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      ifnone
      // comb arc B2 --> X
      (B2 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b0 && A3===1'b1)
      // comb arc B3 --> X
      (B3 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && A3===1'b0)
      // comb arc B3 --> X
      (B3 => X) = (1.0,1.0);
      
      if(A1===1'b0 && A2===1'b1 && A3===1'b1)
      // comb arc B3 --> X
      (B3 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && A3===1'b0)
      // comb arc B3 --> X
      (B3 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b0 && A3===1'b1)
      // comb arc B3 --> X
      (B3 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1 && A3===1'b0)
      // comb arc B3 --> X
      (B3 => X) = (1.0,1.0);
      
      if(A1===1'b1 && A2===1'b1 && A3===1'b1)
      // comb arc B3 --> X
      (B3 => X) = (1.0,1.0);
      
      ifnone
      // comb arc B3 --> X
      (B3 => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_OR2_0P5( X, A1, A2 );
input A1, A2;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_OR2_0P5_func SAEDRVT14_OR2_0P5_behav_inst(.X(X),.A1(A1),.A2(A2));
`else
   SAEDRVT14_OR2_0P5_func SAEDRVT14_OR2_0P5_inst(.X(X),.A1(A1),.A2(A2));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_OR2_0P75( X, A1, A2 );
input A1, A2;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_OR2_0P75_func SAEDRVT14_OR2_0P75_behav_inst(.X(X),.A1(A1),.A2(A2));
`else
   SAEDRVT14_OR2_0P75_func SAEDRVT14_OR2_0P75_inst(.X(X),.A1(A1),.A2(A2));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_OR2_1( X, A1, A2 );
input A1, A2;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_OR2_1_func SAEDRVT14_OR2_1_behav_inst(.X(X),.A1(A1),.A2(A2));
`else
   SAEDRVT14_OR2_1_func SAEDRVT14_OR2_1_inst(.X(X),.A1(A1),.A2(A2));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_OR2_2( X, A1, A2 );
input A1, A2;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_OR2_2_func SAEDRVT14_OR2_2_behav_inst(.X(X),.A1(A1),.A2(A2));
`else
   SAEDRVT14_OR2_2_func SAEDRVT14_OR2_2_inst(.X(X),.A1(A1),.A2(A2));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_OR2_4( X, A1, A2 );
input A1, A2;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_OR2_4_func SAEDRVT14_OR2_4_behav_inst(.X(X),.A1(A1),.A2(A2));
`else
   SAEDRVT14_OR2_4_func SAEDRVT14_OR2_4_inst(.X(X),.A1(A1),.A2(A2));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_OR2_ECO_2( X, A1, A2 );
input A1, A2;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_OR2_ECO_2_func SAEDRVT14_OR2_ECO_2_behav_inst(.X(X),.A1(A1),.A2(A2));
`else
   SAEDRVT14_OR2_ECO_2_func SAEDRVT14_OR2_ECO_2_inst(.X(X),.A1(A1),.A2(A2));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_OR2_ISO_1( X, CK, EN );
input CK, EN;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_OR2_ISO_1_func SAEDRVT14_OR2_ISO_1_behav_inst(.X(X),.CK(CK),.EN(EN));
`else
   SAEDRVT14_OR2_ISO_1_func SAEDRVT14_OR2_ISO_1_inst(.X(X),.CK(CK),.EN(EN));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc CK --> X
      (CK => X) = (1.0,1.0);
      
      // comb arc EN --> X
      (EN => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_OR2_ISO_4( X, CK, EN );
input CK, EN;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_OR2_ISO_4_func SAEDRVT14_OR2_ISO_4_behav_inst(.X(X),.CK(CK),.EN(EN));
`else
   SAEDRVT14_OR2_ISO_4_func SAEDRVT14_OR2_ISO_4_inst(.X(X),.CK(CK),.EN(EN));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc CK --> X
      (CK => X) = (1.0,1.0);
      
      // comb arc EN --> X
      (EN => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_OR2_MM_0P5( X, A1, A2 );
input A1, A2;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_OR2_MM_0P5_func SAEDRVT14_OR2_MM_0P5_behav_inst(.X(X),.A1(A1),.A2(A2));
`else
   SAEDRVT14_OR2_MM_0P5_func SAEDRVT14_OR2_MM_0P5_inst(.X(X),.A1(A1),.A2(A2));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_OR2_MM_0P75( X, A1, A2 );
input A1, A2;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_OR2_MM_0P75_func SAEDRVT14_OR2_MM_0P75_behav_inst(.X(X),.A1(A1),.A2(A2));
`else
   SAEDRVT14_OR2_MM_0P75_func SAEDRVT14_OR2_MM_0P75_inst(.X(X),.A1(A1),.A2(A2));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_OR2_MM_1( X, A1, A2 );
input A1, A2;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_OR2_MM_1_func SAEDRVT14_OR2_MM_1_behav_inst(.X(X),.A1(A1),.A2(A2));
`else
   SAEDRVT14_OR2_MM_1_func SAEDRVT14_OR2_MM_1_inst(.X(X),.A1(A1),.A2(A2));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_OR2_MM_12( X, A1, A2 );
input A1, A2;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_OR2_MM_12_func SAEDRVT14_OR2_MM_12_behav_inst(.X(X),.A1(A1),.A2(A2));
`else
   SAEDRVT14_OR2_MM_12_func SAEDRVT14_OR2_MM_12_inst(.X(X),.A1(A1),.A2(A2));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_OR2_MM_16( X, A1, A2 );
input A1, A2;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_OR2_MM_16_func SAEDRVT14_OR2_MM_16_behav_inst(.X(X),.A1(A1),.A2(A2));
`else
   SAEDRVT14_OR2_MM_16_func SAEDRVT14_OR2_MM_16_inst(.X(X),.A1(A1),.A2(A2));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_OR2_MM_1P5( X, A1, A2 );
input A1, A2;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_OR2_MM_1P5_func SAEDRVT14_OR2_MM_1P5_behav_inst(.X(X),.A1(A1),.A2(A2));
`else
   SAEDRVT14_OR2_MM_1P5_func SAEDRVT14_OR2_MM_1P5_inst(.X(X),.A1(A1),.A2(A2));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_OR2_MM_2( X, A1, A2 );
input A1, A2;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_OR2_MM_2_func SAEDRVT14_OR2_MM_2_behav_inst(.X(X),.A1(A1),.A2(A2));
`else
   SAEDRVT14_OR2_MM_2_func SAEDRVT14_OR2_MM_2_inst(.X(X),.A1(A1),.A2(A2));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_OR2_MM_20( X, A1, A2 );
input A1, A2;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_OR2_MM_20_func SAEDRVT14_OR2_MM_20_behav_inst(.X(X),.A1(A1),.A2(A2));
`else
   SAEDRVT14_OR2_MM_20_func SAEDRVT14_OR2_MM_20_inst(.X(X),.A1(A1),.A2(A2));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_OR2_MM_3( X, A1, A2 );
input A1, A2;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_OR2_MM_3_func SAEDRVT14_OR2_MM_3_behav_inst(.X(X),.A1(A1),.A2(A2));
`else
   SAEDRVT14_OR2_MM_3_func SAEDRVT14_OR2_MM_3_inst(.X(X),.A1(A1),.A2(A2));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_OR2_MM_4( X, A1, A2 );
input A1, A2;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_OR2_MM_4_func SAEDRVT14_OR2_MM_4_behav_inst(.X(X),.A1(A1),.A2(A2));
`else
   SAEDRVT14_OR2_MM_4_func SAEDRVT14_OR2_MM_4_inst(.X(X),.A1(A1),.A2(A2));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_OR2_MM_6( X, A1, A2 );
input A1, A2;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_OR2_MM_6_func SAEDRVT14_OR2_MM_6_behav_inst(.X(X),.A1(A1),.A2(A2));
`else
   SAEDRVT14_OR2_MM_6_func SAEDRVT14_OR2_MM_6_inst(.X(X),.A1(A1),.A2(A2));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_OR2_MM_8( X, A1, A2 );
input A1, A2;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_OR2_MM_8_func SAEDRVT14_OR2_MM_8_behav_inst(.X(X),.A1(A1),.A2(A2));
`else
   SAEDRVT14_OR2_MM_8_func SAEDRVT14_OR2_MM_8_inst(.X(X),.A1(A1),.A2(A2));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_OR3_0P5( X, A1, A2, A3 );
input A1, A2, A3;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_OR3_0P5_func SAEDRVT14_OR3_0P5_behav_inst(.X(X),.A1(A1),.A2(A2),.A3(A3));
`else
   SAEDRVT14_OR3_0P5_func SAEDRVT14_OR3_0P5_inst(.X(X),.A1(A1),.A2(A2),.A3(A3));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      // comb arc A3 --> X
      (A3 => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_OR3_0P75( X, A1, A2, A3 );
input A1, A2, A3;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_OR3_0P75_func SAEDRVT14_OR3_0P75_behav_inst(.X(X),.A1(A1),.A2(A2),.A3(A3));
`else
   SAEDRVT14_OR3_0P75_func SAEDRVT14_OR3_0P75_inst(.X(X),.A1(A1),.A2(A2),.A3(A3));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      // comb arc A3 --> X
      (A3 => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_OR3_1( X, A1, A2, A3 );
input A1, A2, A3;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_OR3_1_func SAEDRVT14_OR3_1_behav_inst(.X(X),.A1(A1),.A2(A2),.A3(A3));
`else
   SAEDRVT14_OR3_1_func SAEDRVT14_OR3_1_inst(.X(X),.A1(A1),.A2(A2),.A3(A3));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      // comb arc A3 --> X
      (A3 => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_OR3_2( X, A1, A2, A3 );
input A1, A2, A3;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_OR3_2_func SAEDRVT14_OR3_2_behav_inst(.X(X),.A1(A1),.A2(A2),.A3(A3));
`else
   SAEDRVT14_OR3_2_func SAEDRVT14_OR3_2_inst(.X(X),.A1(A1),.A2(A2),.A3(A3));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      // comb arc A3 --> X
      (A3 => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_OR3_4( X, A1, A2, A3 );
input A1, A2, A3;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_OR3_4_func SAEDRVT14_OR3_4_behav_inst(.X(X),.A1(A1),.A2(A2),.A3(A3));
`else
   SAEDRVT14_OR3_4_func SAEDRVT14_OR3_4_inst(.X(X),.A1(A1),.A2(A2),.A3(A3));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      // comb arc A3 --> X
      (A3 => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_OR4_1( X, A1, A2, A3, A4 );
input A1, A2, A3, A4;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_OR4_1_func SAEDRVT14_OR4_1_behav_inst(.X(X),.A1(A1),.A2(A2),.A3(A3),.A4(A4));
`else
   SAEDRVT14_OR4_1_func SAEDRVT14_OR4_1_inst(.X(X),.A1(A1),.A2(A2),.A3(A3),.A4(A4));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      // comb arc A3 --> X
      (A3 => X) = (1.0,1.0);
      
      // comb arc A4 --> X
      (A4 => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine


`celldefine
module SAEDRVT14_OR4_2( X, A1, A2, A3, A4 );
input A1, A2, A3, A4;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_OR4_2_func SAEDRVT14_OR4_2_behav_inst(.X(X),.A1(A1),.A2(A2),.A3(A3),.A4(A4));
`else
   SAEDRVT14_OR4_2_func SAEDRVT14_OR4_2_inst(.X(X),.A1(A1),.A2(A2),.A3(A3),.A4(A4));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A1 --> X
      (A1 => X) = (1.0,1.0);
      
      // comb arc A2 --> X
      (A2 => X) = (1.0,1.0);
      
      // comb arc A3 --> X
      (A3 => X) = (1.0,1.0);
      
      // comb arc A4 --> X
      (A4 => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine

//%BEGIN SAEDRVT14_CAPB2

`celldefine
module SAEDRVT14_CAPB2 ();
endmodule
`endcelldefine

//%END SAEDRVT14_CAPB2

//%BEGIN SAEDRVT14_CAPB3

`celldefine
module SAEDRVT14_CAPB3 ();
endmodule
`endcelldefine

//%END SAEDRVT14_CAPB3

//%BEGIN SAEDRVT14_CAPBIN13

`celldefine
module SAEDRVT14_CAPBIN13 ();
endmodule
`endcelldefine

//%END SAEDRVT14_CAPBIN13

//%BEGIN SAEDRVT14_CAPBTAP6

`celldefine
module SAEDRVT14_CAPBTAP6 ();
endmodule
`endcelldefine

//%END SAEDRVT14_CAPBTAP6

//%BEGIN SAEDRVT14_CAPSPACER1

`celldefine
module SAEDRVT14_CAPSPACER1 ();
endmodule
`endcelldefine

//%END SAEDRVT14_CAPSPACER1

//%BEGIN SAEDRVT14_CAPT2

`celldefine
module SAEDRVT14_CAPT2 ();
endmodule
`endcelldefine

//%END SAEDRVT14_CAPT2

//%BEGIN SAEDRVT14_CAPT3

`celldefine
module SAEDRVT14_CAPT3 ();
endmodule
`endcelldefine

//%END SAEDRVT14_CAPT3

//%BEGIN SAEDRVT14_CAPTIN13

`celldefine
module SAEDRVT14_CAPTIN13 ();
endmodule
`endcelldefine

//%END SAEDRVT14_CAPTIN13

//%BEGIN SAEDRVT14_CAPTTAP6

`celldefine
module SAEDRVT14_CAPTTAP6 ();
endmodule
`endcelldefine

//%END SAEDRVT14_CAPTTAP6

//%BEGIN SAEDRVT14_CAPTTAPP6

`celldefine
module SAEDRVT14_CAPTTAPP6 ();
endmodule
`endcelldefine

//%END SAEDRVT14_CAPTTAPP6

//%BEGIN SAEDRVT14_FILL16

`celldefine
module SAEDRVT14_FILL16 ();
endmodule
`endcelldefine

//%END SAEDRVT14_FILL16

//%BEGIN SAEDRVT14_FILL2

`celldefine
module SAEDRVT14_FILL2 ();
endmodule
`endcelldefine

//%END SAEDRVT14_FILL2

//%BEGIN SAEDRVT14_FILL3

`celldefine
module SAEDRVT14_FILL3 ();
endmodule
`endcelldefine

//%END SAEDRVT14_FILL3

//%BEGIN SAEDRVT14_FILL32

`celldefine
module SAEDRVT14_FILL32 ();
endmodule
`endcelldefine

//%END SAEDRVT14_FILL32

//%BEGIN SAEDRVT14_FILL4

`celldefine
module SAEDRVT14_FILL4 ();
endmodule
`endcelldefine

//%END SAEDRVT14_FILL4

//%BEGIN SAEDRVT14_FILL5

`celldefine
module SAEDRVT14_FILL5 ();
endmodule
`endcelldefine

//%END SAEDRVT14_FILL5

//%BEGIN SAEDRVT14_FILL64

`celldefine
module SAEDRVT14_FILL64 ();
endmodule
`endcelldefine

//%END SAEDRVT14_FILL64

//%BEGIN SAEDRVT14_FILL_ECO_1

`celldefine
module SAEDRVT14_FILL_ECO_1 ();
endmodule
`endcelldefine

//%END SAEDRVT14_FILL_ECO_1

//%BEGIN SAEDRVT14_FILL_ECO_12

`celldefine
module SAEDRVT14_FILL_ECO_12 ();
endmodule
`endcelldefine

//%END SAEDRVT14_FILL_ECO_12

//%BEGIN SAEDRVT14_FILL_ECO_15

`celldefine
module SAEDRVT14_FILL_ECO_15 ();
endmodule
`endcelldefine

//%END SAEDRVT14_FILL_ECO_15

//%BEGIN SAEDRVT14_FILL_ECO_18

`celldefine
module SAEDRVT14_FILL_ECO_18 ();
endmodule
`endcelldefine

//%END SAEDRVT14_FILL_ECO_18

//%BEGIN SAEDRVT14_FILL_ECO_2

`celldefine
module SAEDRVT14_FILL_ECO_2 ();
endmodule
`endcelldefine

//%END SAEDRVT14_FILL_ECO_2

//%BEGIN SAEDRVT14_FILL_ECO_3

`celldefine
module SAEDRVT14_FILL_ECO_3 ();
endmodule
`endcelldefine

//%END SAEDRVT14_FILL_ECO_3

//%BEGIN SAEDRVT14_FILL_ECO_6

`celldefine
module SAEDRVT14_FILL_ECO_6 ();
endmodule
`endcelldefine

//%END SAEDRVT14_FILL_ECO_6

//%BEGIN SAEDRVT14_FILL_ECO_9

`celldefine
module SAEDRVT14_FILL_ECO_9 ();
endmodule
`endcelldefine

//%END SAEDRVT14_FILL_ECO_9

//%BEGIN SAEDRVT14_PGATDRV_V1_8

`celldefine
module SAEDRVT14_PGATDRV_V1_8 (ENXB);
   input ENXB;

endmodule
`endcelldefine

//%END SAEDRVT14_PGATDRV_V1_8

//%BEGIN SAEDRVT14_FILL_SPACER_7

`celldefine
module SAEDRVT14_FILL_SPACER_7 ();
endmodule
`endcelldefine

//%END SAEDRVT14_FILL_SPACER_7

//%BEGIN SAEDRVT14_FILL_NNWIY2_3

`celldefine
module SAEDRVT14_FILL_NNWIY2_3 ();
endmodule
`endcelldefine

//%END SAEDRVT14_FILL_NNWIY2_3

//%BEGIN SAEDRVT14_FILL_NNWSPACERY2_7

`celldefine
module SAEDRVT14_FILL_NNWSPACERY2_7 ();
endmodule
`endcelldefine

//%END SAEDRVT14_FILL_NNWSPACERY2_7

//%BEGIN SAEDRVT14_FILL_NNWVDDBRKY2_3

`celldefine
module SAEDRVT14_FILL_NNWVDDBRKY2_3 ();
endmodule
`endcelldefine

//%END SAEDRVT14_FILL_NNWVDDBRKY2_3


//%BEGIN SAEDRVT14_FILL_NNWIV1Y2_2

`celldefine
module SAEDRVT14_FILL_NNWIV1Y2_2 ();
endmodule
`endcelldefine

//%END SAEDRVT14_FILL_NNWIV1Y2_2

//%BEGIN SAEDRVT14_FILL_NNWIV1Y2_3

`celldefine
module SAEDRVT14_FILL_NNWIV1Y2_3 ();
endmodule
`endcelldefine

//%END SAEDRVT14_FILL_NNWIV1Y2_3

//%BEGIN SAEDRVT14_FILL_NNWIY2_2

`celldefine
module SAEDRVT14_FILL_NNWIY2_2 ();
endmodule
`endcelldefine

//%END SAEDRVT14_FILL_NNWIY2_2

//%BEGIN SAEDRVT14_FILL_Y2_3

`celldefine
module SAEDRVT14_FILL_Y2_3 ();
endmodule
`endcelldefine

//%END SAEDRVT14_FILL_Y2_3

//%BEGIN SAEDRVT14_FILLP3

`celldefine
module SAEDRVT14_FILLP3 ();
endmodule
`endcelldefine

//%END SAEDRVT14_FILLP3

//%BEGIN SAEDRVT14_FILLP2

`celldefine
module SAEDRVT14_FILLP2 ();
endmodule
`endcelldefine

//%END SAEDRVT14_FILLP2

//%BEGIN SAEDRVT14_TAPPP10

`celldefine
module SAEDRVT14_TAPPP10 ();
endmodule
`endcelldefine

//%END SAEDRVT14_TAPPP10

//%BEGIN SAEDRVT14_TAPDS

`celldefine
module SAEDRVT14_TAPDS ();
endmodule
`endcelldefine

//%END SAEDRVT14_TAPDS

//%BEGIN SAEDRVT14_TAPPN

`celldefine
module SAEDRVT14_TAPPN ();
endmodule
`endcelldefine

//%END SAEDRVT14_TAPPN


`celldefine
module SAEDRVT14_INV_OR2_AN2_1( A1, A2, A3, A4, A5, X1, X2, X3 );
input A1, A2, A3, A4, A5;
output X1, X2, X3;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_INV_OR2_AN2_1_func SAEDRVT14_INV_OR2_AN2_1_behav_inst(.A1(A1),.A2(A2),.A3(A3),.A4(A4),.A5(A5),.X1(X1),.X2(X2),.X3(X3));
`else
   SAEDRVT14_INV_OR2_AN2_1_func SAEDRVT14_INV_OR2_AN2_1_inst(.A1(A1),.A2(A2),.A3(A3),.A4(A4),.A5(A5),.X1(X1),.X2(X2),.X3(X3));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A4 --> X3
      (A4 => X3) = (1.0,1.0);
      
      // comb arc A5 --> X3
      (A5 => X3) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine

`celldefine
module SAEDRVT14_SRLD_3( Q, QN, S, R );
input R, S;
output Q, QN;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_SRLD_3_func SAEDRVT14_SRLD_3_behav_inst(.Q(Q),.QN(QN),.S(S),.R(R));
`else
   SAEDRVT14_SRLD_3_func SAEDRVT14_SRLD_3_inst(.Q(Q),.QN(QN),.S(S),.R(R));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // seq arc R --> Q
      (R => Q)  = (1.0,1.0);
      
      if(R===1'b0)
      // seq arc S --> Q
      (S => Q)  = (1.0,1.0);
      
      if(R===1'b1)
      // seq arc S --> Q
      (S => Q)  = (1.0,1.0);
      
      ifnone
      // seq arc S --> Q
      (S => Q)  = (1.0,1.0);
      
      // seq arc R --> QN
      (R => QN)  = (1.0,1.0);
      
      if(R===1'b0)
      // seq arc S --> QN
      (S => QN)  = (1.0,1.0);
      
      if(R===1'b1)
      // seq arc S --> QN
      (S => QN)  = (1.0,1.0);
      
      ifnone
      // seq arc S --> QN
      (S => QN)  = (1.0,1.0);
      
      // hold R-HL S-HL
      $hold(negedge S,negedge R,1.0);
      
      // setup R-HL S-HL
      $setup(negedge R,negedge S,1.0);
      
      // hold S-HL R-HL
      $hold(negedge R,negedge S,1.0);
      
      // setup S-HL R-HL
      $setup(negedge S,negedge R,1.0);
      
      // mpw R_lh 
      $width(posedge R,1.0,0);
      
      // mpw S_lh 
      $width(posedge S,1.0,0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine

`celldefine
module SAEDRVT14_AN2_ISO4_1( EN, CK0, CK1, CK2, CK3, X0, X1, X2, X3 );
input CK0, CK1, CK2, CK3, EN;
output X0, X1, X2, X3;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_AN2_ISO4_1_func SAEDRVT14_AN2_ISO4_1_behav_inst(.EN(EN),.CK0(CK0),.CK1(CK1),.CK2(CK2),.CK3(CK3),.X0(X0),.X1(X1),.X2(X2),.X3(X3));
`else
   SAEDRVT14_AN2_ISO4_1_func SAEDRVT14_AN2_ISO4_1_inst(.EN(EN),.CK0(CK0),.CK1(CK1),.CK2(CK2),.CK3(CK3),.X0(X0),.X1(X1),.X2(X2),.X3(X3));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc CK0 --> X0
      (CK0 => X0) = (1.0,1.0);
      
      // comb arc EN --> X0
      (EN => X0) = (1.0,1.0);
      
      // comb arc CK1 --> X1
      (CK1 => X1) = (1.0,1.0);
      
      // comb arc EN --> X1
      (EN => X1) = (1.0,1.0);
      
      // comb arc CK2 --> X2
      (CK2 => X2) = (1.0,1.0);
      
      // comb arc EN --> X2
      (EN => X2) = (1.0,1.0);
      
      // comb arc CK3 --> X3
      (CK3 => X3) = (1.0,1.0);
      
      // comb arc EN --> X3
      (EN => X3) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine
`celldefine
module SAEDRVT14_AN2_ISO4_4( EN, CK0, CK1, CK2, CK3, X0, X1, X2, X3 );
input CK0, CK1, CK2, CK3, EN;
output X0, X1, X2, X3;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_AN2_ISO4_4_func SAEDRVT14_AN2_ISO4_4_behav_inst(.EN(EN),.CK0(CK0),.CK1(CK1),.CK2(CK2),.CK3(CK3),.X0(X0),.X1(X1),.X2(X2),.X3(X3));
`else
   SAEDRVT14_AN2_ISO4_4_func SAEDRVT14_AN2_ISO4_4_inst(.EN(EN),.CK0(CK0),.CK1(CK1),.CK2(CK2),.CK3(CK3),.X0(X0),.X1(X1),.X2(X2),.X3(X3));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc CK0 --> X0
      (CK0 => X0) = (1.0,1.0);
      
      // comb arc EN --> X0
      (EN => X0) = (1.0,1.0);
      
      // comb arc CK1 --> X1
      (CK1 => X1) = (1.0,1.0);
      
      // comb arc EN --> X1
      (EN => X1) = (1.0,1.0);
      
      // comb arc CK2 --> X2
      (CK2 => X2) = (1.0,1.0);
      
      // comb arc EN --> X2
      (EN => X2) = (1.0,1.0);
      
      // comb arc CK3 --> X3
      (CK3 => X3) = (1.0,1.0);
      
      // comb arc EN --> X3
      (EN => X3) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine
`celldefine
module SAEDRVT14_AN2_ISO_1( X, CK, EN );
input CK, EN;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_AN2_ISO_1_func SAEDRVT14_AN2_ISO_1_behav_inst(.X(X),.CK(CK),.EN(EN));
`else
   SAEDRVT14_AN2_ISO_1_func SAEDRVT14_AN2_ISO_1_inst(.X(X),.CK(CK),.EN(EN));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc CK --> X
      (CK => X) = (1.0,1.0);
      
      // comb arc EN --> X
      (EN => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine
`celldefine
module SAEDRVT14_AN2_ISO_4( X, CK, EN );
input CK, EN;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_AN2_ISO_4_func SAEDRVT14_AN2_ISO_4_behav_inst(.X(X),.CK(CK),.EN(EN));
`else
   SAEDRVT14_AN2_ISO_4_func SAEDRVT14_AN2_ISO_4_inst(.X(X),.CK(CK),.EN(EN));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc CK --> X
      (CK => X) = (1.0,1.0);
      
      // comb arc EN --> X
      (EN => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine
`celldefine
module SAEDRVT14_AOBUF_IW_3( X, A );
input A;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_AOBUF_IW_3_func SAEDRVT14_AOBUF_IW_3_behav_inst(.X(X),.A(A));
`else
   SAEDRVT14_AOBUF_IW_3_func SAEDRVT14_AOBUF_IW_3_inst(.X(X),.A(A));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A --> X
      (A => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine
`celldefine
module SAEDRVT14_AOBUF_IW_0P75( X, A );
input A;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_AOBUF_IW_0P75_func SAEDRVT14_AOBUF_IW_0P75_behav_inst(.X(X),.A(A));
`else
   SAEDRVT14_AOBUF_IW_0P75_func SAEDRVT14_AOBUF_IW_0P75_inst(.X(X),.A(A));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A --> X
      (A => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine

`celldefine
module SAEDRVT14_AOBUF_IW_1P5( X, A );
input A;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_AOBUF_IW_1P5_func SAEDRVT14_AOBUF_IW_1P5_behav_inst(.X(X),.A(A));
`else
   SAEDRVT14_AOBUF_IW_1P5_func SAEDRVT14_AOBUF_IW_1P5_inst(.X(X),.A(A));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A --> X
      (A => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine

`celldefine
module SAEDRVT14_AOBUF_IW_6( X, A );
input A;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_AOBUF_IW_6_func SAEDRVT14_AOBUF_IW_6_behav_inst(.X(X),.A(A));
`else
   SAEDRVT14_AOBUF_IW_6_func SAEDRVT14_AOBUF_IW_6_inst(.X(X),.A(A));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A --> X
      (A => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine
`celldefine
module SAEDRVT14_AOINV_IW_1( X, A );
input A;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_AOINV_IW_1_func SAEDRVT14_AOINV_IW_1_behav_inst(.X(X),.A(A));
`else
   SAEDRVT14_AOINV_IW_1_func SAEDRVT14_AOINV_IW_1_inst(.X(X),.A(A));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A --> X
      (A => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine
`celldefine
module SAEDRVT14_AOINV_IW_0P5( X, A );
input A;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_AOINV_IW_0P5_func SAEDRVT14_AOINV_IW_0P5_behav_inst(.X(X),.A(A));
`else
   SAEDRVT14_AOINV_IW_0P5_func SAEDRVT14_AOINV_IW_0P5_inst(.X(X),.A(A));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A --> X
      (A => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine

`celldefine
module SAEDRVT14_AOINV_IW_2( X, A );
input A;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_AOINV_IW_2_func SAEDRVT14_AOINV_IW_2_behav_inst(.X(X),.A(A));
`else
   SAEDRVT14_AOINV_IW_2_func SAEDRVT14_AOINV_IW_2_inst(.X(X),.A(A));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A --> X
      (A => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine

`celldefine
module SAEDRVT14_AOINV_IW_4( X, A );
input A;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_AOINV_IW_4_func SAEDRVT14_AOINV_IW_4_behav_inst(.X(X),.A(A));
`else
   SAEDRVT14_AOINV_IW_4_func SAEDRVT14_AOINV_IW_4_inst(.X(X),.A(A));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A --> X
      (A => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine

`celldefine
module SAEDRVT14_AOINV_IW_6( X, A );
input A;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_AOINV_IW_6_func SAEDRVT14_AOINV_IW_6_behav_inst(.X(X),.A(A));
`else
   SAEDRVT14_AOINV_IW_6_func SAEDRVT14_AOINV_IW_6_inst(.X(X),.A(A));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A --> X
      (A => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine
`celldefine
module SAEDRVT14_FSB2BDPRBQ_PV2_1( Q, CK, D, SI, SE, RD, B1, B2B );
input B1, B2B, CK, D, RD, SE, SI;
output Q;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_FSB2BDPRBQ_PV2_1_func SAEDRVT14_FSB2BDPRBQ_PV2_1_behav_inst(.Q(Q),.CK(CK),.D(D),.SI(SI),.SE(SE),.RD(RD),.B1(B1),.B2B(B2B));
`else
   SAEDRVT14_FSB2BDPRBQ_PV2_1_func SAEDRVT14_FSB2BDPRBQ_PV2_1_inst(.Q(Q),.CK(CK),.D(D),.SI(SI),.SE(SE),.RD(RD),.B1(B1),.B2B(B2B));
   // spec_gates_begin
   and MGM_G0(ENABLE_B2B_AND_RD,RD,B2B);
   not MGM_G1(MGM_W0,B1);
   and MGM_G2(ENABLE_NOT_B1_AND_RD,RD,MGM_W0);
   not MGM_G3(MGM_W1,B1);
   and MGM_G4(MGM_W2,B2B,MGM_W1);
   not MGM_G5(MGM_W3,D);
   and MGM_G6(MGM_W4,MGM_W3,MGM_W2);
   and MGM_G7(MGM_W5,RD,MGM_W4);
   not MGM_G8(MGM_W6,SE);
   and MGM_G9(MGM_W7,MGM_W6,MGM_W5);
   not MGM_G10(MGM_W8,B1);
   and MGM_G11(MGM_W9,B2B,MGM_W8);
   and MGM_G12(MGM_W10,RD,MGM_W9);
   and MGM_G13(MGM_W11,SE,MGM_W10);
   not MGM_G14(MGM_W12,SI);
   and MGM_G15(MGM_W13,MGM_W12,MGM_W11);
   or MGM_G16(ENABLE_NOT_B1_AND_B2B_AND_NOT_D_AND_RD_AND_NOT_SE_OR_NOT_B1_AND_B2B_AND_RD_AND_SE_AND_NOT_SI,MGM_W13,MGM_W7);
   not MGM_G17(MGM_W14,B1);
   and MGM_G18(MGM_W15,B2B,MGM_W14);
   and MGM_G19(MGM_W16,D,MGM_W15);
   and MGM_G20(MGM_W17,RD,MGM_W16);
   not MGM_G21(MGM_W18,SE);
   and MGM_G22(MGM_W19,MGM_W18,MGM_W17);
   not MGM_G23(MGM_W20,B1);
   and MGM_G24(MGM_W21,B2B,MGM_W20);
   and MGM_G25(MGM_W22,RD,MGM_W21);
   and MGM_G26(MGM_W23,SE,MGM_W22);
   and MGM_G27(MGM_W24,SI,MGM_W23);
   or MGM_G28(ENABLE_NOT_B1_AND_B2B_AND_D_AND_RD_AND_NOT_SE_OR_NOT_B1_AND_B2B_AND_RD_AND_SE_AND_SI,MGM_W24,MGM_W19);
   not MGM_G29(MGM_W25,B1);
   and MGM_G30(MGM_W26,B2B,MGM_W25);
   and MGM_G31(MGM_W27,RD,MGM_W26);
   not MGM_G32(MGM_W28,SE);
   and MGM_G33(ENABLE_NOT_B1_AND_B2B_AND_RD_AND_NOT_SE,MGM_W28,MGM_W27);
   not MGM_G34(MGM_W29,B1);
   and MGM_G35(MGM_W30,B2B,MGM_W29);
   not MGM_G36(MGM_W31,D);
   and MGM_G37(MGM_W32,MGM_W31,MGM_W30);
   and MGM_G38(MGM_W33,SE,MGM_W32);
   and MGM_G39(ENABLE_NOT_B1_AND_B2B_AND_NOT_D_AND_SE_AND_SI,SI,MGM_W33);
   not MGM_G40(MGM_W34,B1);
   and MGM_G41(MGM_W35,B2B,MGM_W34);
   and MGM_G42(MGM_W36,D,MGM_W35);
   not MGM_G43(MGM_W37,SE);
   and MGM_G44(ENABLE_NOT_B1_AND_B2B_AND_D_AND_NOT_SE,MGM_W37,MGM_W36);
   not MGM_G45(MGM_W38,B1);
   and MGM_G46(MGM_W39,B2B,MGM_W38);
   and MGM_G47(MGM_W40,D,MGM_W39);
   and MGM_G48(MGM_W41,SE,MGM_W40);
   and MGM_G49(ENABLE_NOT_B1_AND_B2B_AND_D_AND_SE_AND_SI,SI,MGM_W41);
   not MGM_G50(MGM_W42,B1);
   and MGM_G51(MGM_W43,B2B,MGM_W42);
   not MGM_G52(MGM_W44,CK);
   and MGM_G53(MGM_W45,MGM_W44,MGM_W43);
   not MGM_G54(MGM_W46,D);
   and MGM_G55(MGM_W47,MGM_W46,MGM_W45);
   not MGM_G56(MGM_W48,SE);
   and MGM_G57(MGM_W49,MGM_W48,MGM_W47);
   not MGM_G58(MGM_W50,B1);
   and MGM_G59(MGM_W51,B2B,MGM_W50);
   not MGM_G60(MGM_W52,CK);
   and MGM_G61(MGM_W53,MGM_W52,MGM_W51);
   and MGM_G62(MGM_W54,SE,MGM_W53);
   not MGM_G63(MGM_W55,SI);
   and MGM_G64(MGM_W56,MGM_W55,MGM_W54);
   or MGM_G65(ENABLE_NOT_B1_AND_B2B_AND_NOT_CK_AND_NOT_D_AND_NOT_SE_OR_NOT_B1_AND_B2B_AND_NOT_CK_AND_SE_AND_NOT_SI,MGM_W56,MGM_W49);
   not MGM_G66(MGM_W57,B1);
   and MGM_G67(MGM_W58,B2B,MGM_W57);
   not MGM_G68(MGM_W59,CK);
   and MGM_G69(MGM_W60,MGM_W59,MGM_W58);
   and MGM_G70(MGM_W61,D,MGM_W60);
   not MGM_G71(MGM_W62,SE);
   and MGM_G72(MGM_W63,MGM_W62,MGM_W61);
   not MGM_G73(MGM_W64,B1);
   and MGM_G74(MGM_W65,B2B,MGM_W64);
   not MGM_G75(MGM_W66,CK);
   and MGM_G76(MGM_W67,MGM_W66,MGM_W65);
   and MGM_G77(MGM_W68,SE,MGM_W67);
   and MGM_G78(MGM_W69,SI,MGM_W68);
   or MGM_G79(ENABLE_NOT_B1_AND_B2B_AND_NOT_CK_AND_D_AND_NOT_SE_OR_NOT_B1_AND_B2B_AND_NOT_CK_AND_SE_AND_SI,MGM_W69,MGM_W63);
   not MGM_G80(MGM_W70,B1);
   and MGM_G81(MGM_W71,B2B,MGM_W70);
   and MGM_G82(ENABLE_NOT_B1_AND_B2B_AND_CK,CK,MGM_W71);
   not MGM_G83(MGM_W72,B1);
   and MGM_G84(MGM_W73,B2B,MGM_W72);
   not MGM_G85(MGM_W74,D);
   and MGM_G86(MGM_W75,MGM_W74,MGM_W73);
   and MGM_G87(MGM_W76,RD,MGM_W75);
   and MGM_G88(ENABLE_NOT_B1_AND_B2B_AND_NOT_D_AND_RD_AND_SI,SI,MGM_W76);
   not MGM_G89(MGM_W77,B1);
   and MGM_G90(MGM_W78,B2B,MGM_W77);
   and MGM_G91(MGM_W79,D,MGM_W78);
   and MGM_G92(MGM_W80,RD,MGM_W79);
   not MGM_G93(MGM_W81,SI);
   and MGM_G94(ENABLE_NOT_B1_AND_B2B_AND_D_AND_RD_AND_NOT_SI,MGM_W81,MGM_W80);
   not MGM_G95(MGM_W82,B1);
   and MGM_G96(MGM_W83,B2B,MGM_W82);
   not MGM_G97(MGM_W84,D);
   and MGM_G98(MGM_W85,MGM_W84,MGM_W83);
   and MGM_G99(MGM_W86,RD,MGM_W85);
   and MGM_G100(ENABLE_NOT_B1_AND_B2B_AND_NOT_D_AND_RD_AND_SE,SE,MGM_W86);
   not MGM_G101(MGM_W87,B1);
   and MGM_G102(MGM_W88,B2B,MGM_W87);
   and MGM_G103(MGM_W89,D,MGM_W88);
   and MGM_G104(MGM_W90,RD,MGM_W89);
   and MGM_G105(ENABLE_NOT_B1_AND_B2B_AND_D_AND_RD_AND_SE,SE,MGM_W90);
   // spec_gates_end
   // specify_block_begin
   specify

      // seq arc B2B --> Q
      (B2B => Q)  = (1.0,1.0);
      
      // seq arc CK --> Q
      (CK => Q)  = (1.0,1.0);
      
      if(CK===1'b0 && D===1'b0 && SE===1'b0 || CK===1'b0 && SE===1'b1 && SI===1'b0)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b0 && D===1'b1 && SE===1'b0 || CK===1'b0 && SE===1'b1 && SI===1'b1)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b1)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      ifnone
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      $width(posedge B1 &&& (ENABLE_B2B_AND_RD === 1'b1)
      ,1.0,0);
      
      // removal B1-HL CK-LH
      $removal(negedge B1 &&& (ENABLE_B2B_AND_RD === 1'b1),
      posedge CK &&& (ENABLE_B2B_AND_RD === 1'b1),1.0);
      
      $width(negedge B2B &&& (ENABLE_NOT_B1_AND_RD === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_B1_AND_B2B_AND_NOT_D_AND_RD_AND_NOT_SE_OR_NOT_B1_AND_B2B_AND_RD_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_B1_AND_B2B_AND_NOT_D_AND_RD_AND_NOT_SE_OR_NOT_B1_AND_B2B_AND_RD_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_B1_AND_B2B_AND_D_AND_RD_AND_NOT_SE_OR_NOT_B1_AND_B2B_AND_RD_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_B1_AND_B2B_AND_D_AND_RD_AND_NOT_SE_OR_NOT_B1_AND_B2B_AND_RD_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      // hold D-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_B1_AND_B2B_AND_RD_AND_NOT_SE === 1'b1),
      negedge D &&& (ENABLE_NOT_B1_AND_B2B_AND_RD_AND_NOT_SE === 1'b1),1.0);
      
      // hold D-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_B1_AND_B2B_AND_RD_AND_NOT_SE === 1'b1),
      posedge D &&& (ENABLE_NOT_B1_AND_B2B_AND_RD_AND_NOT_SE === 1'b1),1.0);
      
      // setup D-HL CK-LH
      $setup(negedge D &&& (ENABLE_NOT_B1_AND_B2B_AND_RD_AND_NOT_SE === 1'b1),
      posedge CK &&& (ENABLE_NOT_B1_AND_B2B_AND_RD_AND_NOT_SE === 1'b1),1.0);
      
      // setup D-LH CK-LH
      $setup(posedge D &&& (ENABLE_NOT_B1_AND_B2B_AND_RD_AND_NOT_SE === 1'b1),
      posedge CK &&& (ENABLE_NOT_B1_AND_B2B_AND_RD_AND_NOT_SE === 1'b1),1.0);
      
      // hold RD-HL B1-HL
      $hold(negedge B1,negedge RD,1.0);
      
      // recovery RD-LH CK-LH
      $recovery(posedge RD &&& (ENABLE_NOT_B1_AND_B2B_AND_NOT_D_AND_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_B1_AND_B2B_AND_NOT_D_AND_SE_AND_SI === 1'b1),1.0);
      
      // removal RD-LH CK-LH
      $removal(posedge RD &&& (ENABLE_NOT_B1_AND_B2B_AND_NOT_D_AND_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_B1_AND_B2B_AND_NOT_D_AND_SE_AND_SI === 1'b1),1.0);
      
      // recovery RD-LH CK-LH
      $recovery(posedge RD &&& (ENABLE_NOT_B1_AND_B2B_AND_D_AND_NOT_SE === 1'b1),
      posedge CK &&& (ENABLE_NOT_B1_AND_B2B_AND_D_AND_NOT_SE === 1'b1),1.0);
      
      // removal RD-LH CK-LH
      $removal(posedge RD &&& (ENABLE_NOT_B1_AND_B2B_AND_D_AND_NOT_SE === 1'b1),
      posedge CK &&& (ENABLE_NOT_B1_AND_B2B_AND_D_AND_NOT_SE === 1'b1),1.0);
      
      // recovery RD-LH CK-LH
      $recovery(posedge RD &&& (ENABLE_NOT_B1_AND_B2B_AND_D_AND_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_B1_AND_B2B_AND_D_AND_SE_AND_SI === 1'b1),1.0);
      
      // removal RD-LH CK-LH
      $removal(posedge RD &&& (ENABLE_NOT_B1_AND_B2B_AND_D_AND_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_B1_AND_B2B_AND_D_AND_SE_AND_SI === 1'b1),1.0);
      
      $width(negedge RD &&& (ENABLE_NOT_B1_AND_B2B_AND_NOT_CK_AND_NOT_D_AND_NOT_SE_OR_NOT_B1_AND_B2B_AND_NOT_CK_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge RD &&& (ENABLE_NOT_B1_AND_B2B_AND_NOT_CK_AND_D_AND_NOT_SE_OR_NOT_B1_AND_B2B_AND_NOT_CK_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge RD &&& (ENABLE_NOT_B1_AND_B2B_AND_CK === 1'b1)
      ,1.0,0);
      
      // hold SE-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_B1_AND_B2B_AND_NOT_D_AND_RD_AND_SI === 1'b1),
      negedge SE &&& (ENABLE_NOT_B1_AND_B2B_AND_NOT_D_AND_RD_AND_SI === 1'b1),1.0);
      
      // hold SE-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_B1_AND_B2B_AND_NOT_D_AND_RD_AND_SI === 1'b1),
      posedge SE &&& (ENABLE_NOT_B1_AND_B2B_AND_NOT_D_AND_RD_AND_SI === 1'b1),1.0);
      
      // setup SE-HL CK-LH
      $setup(negedge SE &&& (ENABLE_NOT_B1_AND_B2B_AND_NOT_D_AND_RD_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_B1_AND_B2B_AND_NOT_D_AND_RD_AND_SI === 1'b1),1.0);
      
      // setup SE-LH CK-LH
      $setup(posedge SE &&& (ENABLE_NOT_B1_AND_B2B_AND_NOT_D_AND_RD_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_B1_AND_B2B_AND_NOT_D_AND_RD_AND_SI === 1'b1),1.0);
      
      // hold SE-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_B1_AND_B2B_AND_D_AND_RD_AND_NOT_SI === 1'b1),
      negedge SE &&& (ENABLE_NOT_B1_AND_B2B_AND_D_AND_RD_AND_NOT_SI === 1'b1),1.0);
      
      // hold SE-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_B1_AND_B2B_AND_D_AND_RD_AND_NOT_SI === 1'b1),
      posedge SE &&& (ENABLE_NOT_B1_AND_B2B_AND_D_AND_RD_AND_NOT_SI === 1'b1),1.0);
      
      // setup SE-HL CK-LH
      $setup(negedge SE &&& (ENABLE_NOT_B1_AND_B2B_AND_D_AND_RD_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_B1_AND_B2B_AND_D_AND_RD_AND_NOT_SI === 1'b1),1.0);
      
      // setup SE-LH CK-LH
      $setup(posedge SE &&& (ENABLE_NOT_B1_AND_B2B_AND_D_AND_RD_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_B1_AND_B2B_AND_D_AND_RD_AND_NOT_SI === 1'b1),1.0);
      
      // hold SI-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_B1_AND_B2B_AND_NOT_D_AND_RD_AND_SE === 1'b1),
      negedge SI &&& (ENABLE_NOT_B1_AND_B2B_AND_NOT_D_AND_RD_AND_SE === 1'b1),1.0);
      
      // hold SI-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_B1_AND_B2B_AND_NOT_D_AND_RD_AND_SE === 1'b1),
      posedge SI &&& (ENABLE_NOT_B1_AND_B2B_AND_NOT_D_AND_RD_AND_SE === 1'b1),1.0);
      
      // setup SI-HL CK-LH
      $setup(negedge SI &&& (ENABLE_NOT_B1_AND_B2B_AND_NOT_D_AND_RD_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_NOT_B1_AND_B2B_AND_NOT_D_AND_RD_AND_SE === 1'b1),1.0);
      
      // setup SI-LH CK-LH
      $setup(posedge SI &&& (ENABLE_NOT_B1_AND_B2B_AND_NOT_D_AND_RD_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_NOT_B1_AND_B2B_AND_NOT_D_AND_RD_AND_SE === 1'b1),1.0);
      
      // hold SI-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_B1_AND_B2B_AND_D_AND_RD_AND_SE === 1'b1),
      negedge SI &&& (ENABLE_NOT_B1_AND_B2B_AND_D_AND_RD_AND_SE === 1'b1),1.0);
      
      // hold SI-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_B1_AND_B2B_AND_D_AND_RD_AND_SE === 1'b1),
      posedge SI &&& (ENABLE_NOT_B1_AND_B2B_AND_D_AND_RD_AND_SE === 1'b1),1.0);
      
      // setup SI-HL CK-LH
      $setup(negedge SI &&& (ENABLE_NOT_B1_AND_B2B_AND_D_AND_RD_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_NOT_B1_AND_B2B_AND_D_AND_RD_AND_SE === 1'b1),1.0);
      
      // setup SI-LH CK-LH
      $setup(posedge SI &&& (ENABLE_NOT_B1_AND_B2B_AND_D_AND_RD_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_NOT_B1_AND_B2B_AND_D_AND_RD_AND_SE === 1'b1),1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine
`celldefine
module SAEDRVT14_FSB2BDPRBQ_PV2_2( Q, CK, D, SI, SE, RD, B1, B2B );
input B1, B2B, CK, D, RD, SE, SI;
output Q;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_FSB2BDPRBQ_PV2_2_func SAEDRVT14_FSB2BDPRBQ_PV2_2_behav_inst(.Q(Q),.CK(CK),.D(D),.SI(SI),.SE(SE),.RD(RD),.B1(B1),.B2B(B2B));
`else
   SAEDRVT14_FSB2BDPRBQ_PV2_2_func SAEDRVT14_FSB2BDPRBQ_PV2_2_inst(.Q(Q),.CK(CK),.D(D),.SI(SI),.SE(SE),.RD(RD),.B1(B1),.B2B(B2B));
   // spec_gates_begin
   and MGM_G0(ENABLE_B2B_AND_RD,RD,B2B);
   not MGM_G1(MGM_W0,B1);
   and MGM_G2(ENABLE_NOT_B1_AND_RD,RD,MGM_W0);
   not MGM_G3(MGM_W1,B1);
   and MGM_G4(MGM_W2,B2B,MGM_W1);
   not MGM_G5(MGM_W3,D);
   and MGM_G6(MGM_W4,MGM_W3,MGM_W2);
   and MGM_G7(MGM_W5,RD,MGM_W4);
   not MGM_G8(MGM_W6,SE);
   and MGM_G9(MGM_W7,MGM_W6,MGM_W5);
   not MGM_G10(MGM_W8,B1);
   and MGM_G11(MGM_W9,B2B,MGM_W8);
   and MGM_G12(MGM_W10,RD,MGM_W9);
   and MGM_G13(MGM_W11,SE,MGM_W10);
   not MGM_G14(MGM_W12,SI);
   and MGM_G15(MGM_W13,MGM_W12,MGM_W11);
   or MGM_G16(ENABLE_NOT_B1_AND_B2B_AND_NOT_D_AND_RD_AND_NOT_SE_OR_NOT_B1_AND_B2B_AND_RD_AND_SE_AND_NOT_SI,MGM_W13,MGM_W7);
   not MGM_G17(MGM_W14,B1);
   and MGM_G18(MGM_W15,B2B,MGM_W14);
   and MGM_G19(MGM_W16,D,MGM_W15);
   and MGM_G20(MGM_W17,RD,MGM_W16);
   not MGM_G21(MGM_W18,SE);
   and MGM_G22(MGM_W19,MGM_W18,MGM_W17);
   not MGM_G23(MGM_W20,B1);
   and MGM_G24(MGM_W21,B2B,MGM_W20);
   and MGM_G25(MGM_W22,RD,MGM_W21);
   and MGM_G26(MGM_W23,SE,MGM_W22);
   and MGM_G27(MGM_W24,SI,MGM_W23);
   or MGM_G28(ENABLE_NOT_B1_AND_B2B_AND_D_AND_RD_AND_NOT_SE_OR_NOT_B1_AND_B2B_AND_RD_AND_SE_AND_SI,MGM_W24,MGM_W19);
   not MGM_G29(MGM_W25,B1);
   and MGM_G30(MGM_W26,B2B,MGM_W25);
   and MGM_G31(MGM_W27,RD,MGM_W26);
   not MGM_G32(MGM_W28,SE);
   and MGM_G33(ENABLE_NOT_B1_AND_B2B_AND_RD_AND_NOT_SE,MGM_W28,MGM_W27);
   not MGM_G34(MGM_W29,B1);
   and MGM_G35(MGM_W30,B2B,MGM_W29);
   not MGM_G36(MGM_W31,D);
   and MGM_G37(MGM_W32,MGM_W31,MGM_W30);
   and MGM_G38(MGM_W33,SE,MGM_W32);
   and MGM_G39(ENABLE_NOT_B1_AND_B2B_AND_NOT_D_AND_SE_AND_SI,SI,MGM_W33);
   not MGM_G40(MGM_W34,B1);
   and MGM_G41(MGM_W35,B2B,MGM_W34);
   and MGM_G42(MGM_W36,D,MGM_W35);
   not MGM_G43(MGM_W37,SE);
   and MGM_G44(ENABLE_NOT_B1_AND_B2B_AND_D_AND_NOT_SE,MGM_W37,MGM_W36);
   not MGM_G45(MGM_W38,B1);
   and MGM_G46(MGM_W39,B2B,MGM_W38);
   and MGM_G47(MGM_W40,D,MGM_W39);
   and MGM_G48(MGM_W41,SE,MGM_W40);
   and MGM_G49(ENABLE_NOT_B1_AND_B2B_AND_D_AND_SE_AND_SI,SI,MGM_W41);
   not MGM_G50(MGM_W42,B1);
   and MGM_G51(MGM_W43,B2B,MGM_W42);
   not MGM_G52(MGM_W44,CK);
   and MGM_G53(MGM_W45,MGM_W44,MGM_W43);
   not MGM_G54(MGM_W46,D);
   and MGM_G55(MGM_W47,MGM_W46,MGM_W45);
   not MGM_G56(MGM_W48,SE);
   and MGM_G57(MGM_W49,MGM_W48,MGM_W47);
   not MGM_G58(MGM_W50,B1);
   and MGM_G59(MGM_W51,B2B,MGM_W50);
   not MGM_G60(MGM_W52,CK);
   and MGM_G61(MGM_W53,MGM_W52,MGM_W51);
   and MGM_G62(MGM_W54,SE,MGM_W53);
   not MGM_G63(MGM_W55,SI);
   and MGM_G64(MGM_W56,MGM_W55,MGM_W54);
   or MGM_G65(ENABLE_NOT_B1_AND_B2B_AND_NOT_CK_AND_NOT_D_AND_NOT_SE_OR_NOT_B1_AND_B2B_AND_NOT_CK_AND_SE_AND_NOT_SI,MGM_W56,MGM_W49);
   not MGM_G66(MGM_W57,B1);
   and MGM_G67(MGM_W58,B2B,MGM_W57);
   not MGM_G68(MGM_W59,CK);
   and MGM_G69(MGM_W60,MGM_W59,MGM_W58);
   and MGM_G70(MGM_W61,D,MGM_W60);
   not MGM_G71(MGM_W62,SE);
   and MGM_G72(MGM_W63,MGM_W62,MGM_W61);
   not MGM_G73(MGM_W64,B1);
   and MGM_G74(MGM_W65,B2B,MGM_W64);
   not MGM_G75(MGM_W66,CK);
   and MGM_G76(MGM_W67,MGM_W66,MGM_W65);
   and MGM_G77(MGM_W68,SE,MGM_W67);
   and MGM_G78(MGM_W69,SI,MGM_W68);
   or MGM_G79(ENABLE_NOT_B1_AND_B2B_AND_NOT_CK_AND_D_AND_NOT_SE_OR_NOT_B1_AND_B2B_AND_NOT_CK_AND_SE_AND_SI,MGM_W69,MGM_W63);
   not MGM_G80(MGM_W70,B1);
   and MGM_G81(MGM_W71,B2B,MGM_W70);
   and MGM_G82(ENABLE_NOT_B1_AND_B2B_AND_CK,CK,MGM_W71);
   not MGM_G83(MGM_W72,B1);
   and MGM_G84(MGM_W73,B2B,MGM_W72);
   not MGM_G85(MGM_W74,D);
   and MGM_G86(MGM_W75,MGM_W74,MGM_W73);
   and MGM_G87(MGM_W76,RD,MGM_W75);
   and MGM_G88(ENABLE_NOT_B1_AND_B2B_AND_NOT_D_AND_RD_AND_SI,SI,MGM_W76);
   not MGM_G89(MGM_W77,B1);
   and MGM_G90(MGM_W78,B2B,MGM_W77);
   and MGM_G91(MGM_W79,D,MGM_W78);
   and MGM_G92(MGM_W80,RD,MGM_W79);
   not MGM_G93(MGM_W81,SI);
   and MGM_G94(ENABLE_NOT_B1_AND_B2B_AND_D_AND_RD_AND_NOT_SI,MGM_W81,MGM_W80);
   not MGM_G95(MGM_W82,B1);
   and MGM_G96(MGM_W83,B2B,MGM_W82);
   not MGM_G97(MGM_W84,D);
   and MGM_G98(MGM_W85,MGM_W84,MGM_W83);
   and MGM_G99(MGM_W86,RD,MGM_W85);
   and MGM_G100(ENABLE_NOT_B1_AND_B2B_AND_NOT_D_AND_RD_AND_SE,SE,MGM_W86);
   not MGM_G101(MGM_W87,B1);
   and MGM_G102(MGM_W88,B2B,MGM_W87);
   and MGM_G103(MGM_W89,D,MGM_W88);
   and MGM_G104(MGM_W90,RD,MGM_W89);
   and MGM_G105(ENABLE_NOT_B1_AND_B2B_AND_D_AND_RD_AND_SE,SE,MGM_W90);
   // spec_gates_end
   // specify_block_begin
   specify

      // seq arc B2B --> Q
      (B2B => Q)  = (1.0,1.0);
      
      // seq arc CK --> Q
      (CK => Q)  = (1.0,1.0);
      
      if(CK===1'b0 && D===1'b0 && SE===1'b0 || CK===1'b0 && SE===1'b1 && SI===1'b0)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b0 && D===1'b1 && SE===1'b0 || CK===1'b0 && SE===1'b1 && SI===1'b1)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b1)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      ifnone
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      $width(posedge B1 &&& (ENABLE_B2B_AND_RD === 1'b1)
      ,1.0,0);
      
      // removal B1-HL CK-LH
      $removal(negedge B1 &&& (ENABLE_B2B_AND_RD === 1'b1),
      posedge CK &&& (ENABLE_B2B_AND_RD === 1'b1),1.0);
      
      $width(negedge B2B &&& (ENABLE_NOT_B1_AND_RD === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_B1_AND_B2B_AND_NOT_D_AND_RD_AND_NOT_SE_OR_NOT_B1_AND_B2B_AND_RD_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_B1_AND_B2B_AND_NOT_D_AND_RD_AND_NOT_SE_OR_NOT_B1_AND_B2B_AND_RD_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_B1_AND_B2B_AND_D_AND_RD_AND_NOT_SE_OR_NOT_B1_AND_B2B_AND_RD_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_B1_AND_B2B_AND_D_AND_RD_AND_NOT_SE_OR_NOT_B1_AND_B2B_AND_RD_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      // hold D-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_B1_AND_B2B_AND_RD_AND_NOT_SE === 1'b1),
      negedge D &&& (ENABLE_NOT_B1_AND_B2B_AND_RD_AND_NOT_SE === 1'b1),1.0);
      
      // hold D-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_B1_AND_B2B_AND_RD_AND_NOT_SE === 1'b1),
      posedge D &&& (ENABLE_NOT_B1_AND_B2B_AND_RD_AND_NOT_SE === 1'b1),1.0);
      
      // setup D-HL CK-LH
      $setup(negedge D &&& (ENABLE_NOT_B1_AND_B2B_AND_RD_AND_NOT_SE === 1'b1),
      posedge CK &&& (ENABLE_NOT_B1_AND_B2B_AND_RD_AND_NOT_SE === 1'b1),1.0);
      
      // setup D-LH CK-LH
      $setup(posedge D &&& (ENABLE_NOT_B1_AND_B2B_AND_RD_AND_NOT_SE === 1'b1),
      posedge CK &&& (ENABLE_NOT_B1_AND_B2B_AND_RD_AND_NOT_SE === 1'b1),1.0);
      
      // hold RD-HL B1-HL
      $hold(negedge B1,negedge RD,1.0);
      
      // recovery RD-LH CK-LH
      $recovery(posedge RD &&& (ENABLE_NOT_B1_AND_B2B_AND_NOT_D_AND_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_B1_AND_B2B_AND_NOT_D_AND_SE_AND_SI === 1'b1),1.0);
      
      // removal RD-LH CK-LH
      $removal(posedge RD &&& (ENABLE_NOT_B1_AND_B2B_AND_NOT_D_AND_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_B1_AND_B2B_AND_NOT_D_AND_SE_AND_SI === 1'b1),1.0);
      
      // recovery RD-LH CK-LH
      $recovery(posedge RD &&& (ENABLE_NOT_B1_AND_B2B_AND_D_AND_NOT_SE === 1'b1),
      posedge CK &&& (ENABLE_NOT_B1_AND_B2B_AND_D_AND_NOT_SE === 1'b1),1.0);
      
      // removal RD-LH CK-LH
      $removal(posedge RD &&& (ENABLE_NOT_B1_AND_B2B_AND_D_AND_NOT_SE === 1'b1),
      posedge CK &&& (ENABLE_NOT_B1_AND_B2B_AND_D_AND_NOT_SE === 1'b1),1.0);
      
      // recovery RD-LH CK-LH
      $recovery(posedge RD &&& (ENABLE_NOT_B1_AND_B2B_AND_D_AND_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_B1_AND_B2B_AND_D_AND_SE_AND_SI === 1'b1),1.0);
      
      // removal RD-LH CK-LH
      $removal(posedge RD &&& (ENABLE_NOT_B1_AND_B2B_AND_D_AND_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_B1_AND_B2B_AND_D_AND_SE_AND_SI === 1'b1),1.0);
      
      $width(negedge RD &&& (ENABLE_NOT_B1_AND_B2B_AND_NOT_CK_AND_NOT_D_AND_NOT_SE_OR_NOT_B1_AND_B2B_AND_NOT_CK_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge RD &&& (ENABLE_NOT_B1_AND_B2B_AND_NOT_CK_AND_D_AND_NOT_SE_OR_NOT_B1_AND_B2B_AND_NOT_CK_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge RD &&& (ENABLE_NOT_B1_AND_B2B_AND_CK === 1'b1)
      ,1.0,0);
      
      // hold SE-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_B1_AND_B2B_AND_NOT_D_AND_RD_AND_SI === 1'b1),
      negedge SE &&& (ENABLE_NOT_B1_AND_B2B_AND_NOT_D_AND_RD_AND_SI === 1'b1),1.0);
      
      // hold SE-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_B1_AND_B2B_AND_NOT_D_AND_RD_AND_SI === 1'b1),
      posedge SE &&& (ENABLE_NOT_B1_AND_B2B_AND_NOT_D_AND_RD_AND_SI === 1'b1),1.0);
      
      // setup SE-HL CK-LH
      $setup(negedge SE &&& (ENABLE_NOT_B1_AND_B2B_AND_NOT_D_AND_RD_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_B1_AND_B2B_AND_NOT_D_AND_RD_AND_SI === 1'b1),1.0);
      
      // setup SE-LH CK-LH
      $setup(posedge SE &&& (ENABLE_NOT_B1_AND_B2B_AND_NOT_D_AND_RD_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_B1_AND_B2B_AND_NOT_D_AND_RD_AND_SI === 1'b1),1.0);
      
      // hold SE-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_B1_AND_B2B_AND_D_AND_RD_AND_NOT_SI === 1'b1),
      negedge SE &&& (ENABLE_NOT_B1_AND_B2B_AND_D_AND_RD_AND_NOT_SI === 1'b1),1.0);
      
      // hold SE-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_B1_AND_B2B_AND_D_AND_RD_AND_NOT_SI === 1'b1),
      posedge SE &&& (ENABLE_NOT_B1_AND_B2B_AND_D_AND_RD_AND_NOT_SI === 1'b1),1.0);
      
      // setup SE-HL CK-LH
      $setup(negedge SE &&& (ENABLE_NOT_B1_AND_B2B_AND_D_AND_RD_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_B1_AND_B2B_AND_D_AND_RD_AND_NOT_SI === 1'b1),1.0);
      
      // setup SE-LH CK-LH
      $setup(posedge SE &&& (ENABLE_NOT_B1_AND_B2B_AND_D_AND_RD_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_B1_AND_B2B_AND_D_AND_RD_AND_NOT_SI === 1'b1),1.0);
      
      // hold SI-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_B1_AND_B2B_AND_NOT_D_AND_RD_AND_SE === 1'b1),
      negedge SI &&& (ENABLE_NOT_B1_AND_B2B_AND_NOT_D_AND_RD_AND_SE === 1'b1),1.0);
      
      // hold SI-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_B1_AND_B2B_AND_NOT_D_AND_RD_AND_SE === 1'b1),
      posedge SI &&& (ENABLE_NOT_B1_AND_B2B_AND_NOT_D_AND_RD_AND_SE === 1'b1),1.0);
      
      // setup SI-HL CK-LH
      $setup(negedge SI &&& (ENABLE_NOT_B1_AND_B2B_AND_NOT_D_AND_RD_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_NOT_B1_AND_B2B_AND_NOT_D_AND_RD_AND_SE === 1'b1),1.0);
      
      // setup SI-LH CK-LH
      $setup(posedge SI &&& (ENABLE_NOT_B1_AND_B2B_AND_NOT_D_AND_RD_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_NOT_B1_AND_B2B_AND_NOT_D_AND_RD_AND_SE === 1'b1),1.0);
      
      // hold SI-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_B1_AND_B2B_AND_D_AND_RD_AND_SE === 1'b1),
      negedge SI &&& (ENABLE_NOT_B1_AND_B2B_AND_D_AND_RD_AND_SE === 1'b1),1.0);
      
      // hold SI-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_B1_AND_B2B_AND_D_AND_RD_AND_SE === 1'b1),
      posedge SI &&& (ENABLE_NOT_B1_AND_B2B_AND_D_AND_RD_AND_SE === 1'b1),1.0);
      
      // setup SI-HL CK-LH
      $setup(negedge SI &&& (ENABLE_NOT_B1_AND_B2B_AND_D_AND_RD_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_NOT_B1_AND_B2B_AND_D_AND_RD_AND_SE === 1'b1),1.0);
      
      // setup SI-LH CK-LH
      $setup(posedge SI &&& (ENABLE_NOT_B1_AND_B2B_AND_D_AND_RD_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_NOT_B1_AND_B2B_AND_D_AND_RD_AND_SE === 1'b1),1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine

`celldefine
module SAEDRVT14_FSB2BDPRBQ_PV2_4( Q, CK, D, SI, SE, RD, B1, B2B );
input B1, B2B, CK, D, RD, SE, SI;
output Q;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_FSB2BDPRBQ_PV2_4_func SAEDRVT14_FSB2BDPRBQ_PV2_4_behav_inst(.Q(Q),.CK(CK),.D(D),.SI(SI),.SE(SE),.RD(RD),.B1(B1),.B2B(B2B));
`else
   SAEDRVT14_FSB2BDPRBQ_PV2_4_func SAEDRVT14_FSB2BDPRBQ_PV2_4_inst(.Q(Q),.CK(CK),.D(D),.SI(SI),.SE(SE),.RD(RD),.B1(B1),.B2B(B2B));
   // spec_gates_begin
   and MGM_G0(ENABLE_B2B_AND_RD,RD,B2B);
   not MGM_G1(MGM_W0,B1);
   and MGM_G2(ENABLE_NOT_B1_AND_RD,RD,MGM_W0);
   not MGM_G3(MGM_W1,B1);
   and MGM_G4(MGM_W2,B2B,MGM_W1);
   not MGM_G5(MGM_W3,D);
   and MGM_G6(MGM_W4,MGM_W3,MGM_W2);
   and MGM_G7(MGM_W5,RD,MGM_W4);
   not MGM_G8(MGM_W6,SE);
   and MGM_G9(MGM_W7,MGM_W6,MGM_W5);
   not MGM_G10(MGM_W8,B1);
   and MGM_G11(MGM_W9,B2B,MGM_W8);
   and MGM_G12(MGM_W10,RD,MGM_W9);
   and MGM_G13(MGM_W11,SE,MGM_W10);
   not MGM_G14(MGM_W12,SI);
   and MGM_G15(MGM_W13,MGM_W12,MGM_W11);
   or MGM_G16(ENABLE_NOT_B1_AND_B2B_AND_NOT_D_AND_RD_AND_NOT_SE_OR_NOT_B1_AND_B2B_AND_RD_AND_SE_AND_NOT_SI,MGM_W13,MGM_W7);
   not MGM_G17(MGM_W14,B1);
   and MGM_G18(MGM_W15,B2B,MGM_W14);
   and MGM_G19(MGM_W16,D,MGM_W15);
   and MGM_G20(MGM_W17,RD,MGM_W16);
   not MGM_G21(MGM_W18,SE);
   and MGM_G22(MGM_W19,MGM_W18,MGM_W17);
   not MGM_G23(MGM_W20,B1);
   and MGM_G24(MGM_W21,B2B,MGM_W20);
   and MGM_G25(MGM_W22,RD,MGM_W21);
   and MGM_G26(MGM_W23,SE,MGM_W22);
   and MGM_G27(MGM_W24,SI,MGM_W23);
   or MGM_G28(ENABLE_NOT_B1_AND_B2B_AND_D_AND_RD_AND_NOT_SE_OR_NOT_B1_AND_B2B_AND_RD_AND_SE_AND_SI,MGM_W24,MGM_W19);
   not MGM_G29(MGM_W25,B1);
   and MGM_G30(MGM_W26,B2B,MGM_W25);
   and MGM_G31(MGM_W27,RD,MGM_W26);
   not MGM_G32(MGM_W28,SE);
   and MGM_G33(ENABLE_NOT_B1_AND_B2B_AND_RD_AND_NOT_SE,MGM_W28,MGM_W27);
   not MGM_G34(MGM_W29,B1);
   and MGM_G35(MGM_W30,B2B,MGM_W29);
   not MGM_G36(MGM_W31,D);
   and MGM_G37(MGM_W32,MGM_W31,MGM_W30);
   and MGM_G38(MGM_W33,SE,MGM_W32);
   and MGM_G39(ENABLE_NOT_B1_AND_B2B_AND_NOT_D_AND_SE_AND_SI,SI,MGM_W33);
   not MGM_G40(MGM_W34,B1);
   and MGM_G41(MGM_W35,B2B,MGM_W34);
   and MGM_G42(MGM_W36,D,MGM_W35);
   not MGM_G43(MGM_W37,SE);
   and MGM_G44(ENABLE_NOT_B1_AND_B2B_AND_D_AND_NOT_SE,MGM_W37,MGM_W36);
   not MGM_G45(MGM_W38,B1);
   and MGM_G46(MGM_W39,B2B,MGM_W38);
   and MGM_G47(MGM_W40,D,MGM_W39);
   and MGM_G48(MGM_W41,SE,MGM_W40);
   and MGM_G49(ENABLE_NOT_B1_AND_B2B_AND_D_AND_SE_AND_SI,SI,MGM_W41);
   not MGM_G50(MGM_W42,B1);
   and MGM_G51(MGM_W43,B2B,MGM_W42);
   not MGM_G52(MGM_W44,CK);
   and MGM_G53(MGM_W45,MGM_W44,MGM_W43);
   not MGM_G54(MGM_W46,D);
   and MGM_G55(MGM_W47,MGM_W46,MGM_W45);
   not MGM_G56(MGM_W48,SE);
   and MGM_G57(MGM_W49,MGM_W48,MGM_W47);
   not MGM_G58(MGM_W50,B1);
   and MGM_G59(MGM_W51,B2B,MGM_W50);
   not MGM_G60(MGM_W52,CK);
   and MGM_G61(MGM_W53,MGM_W52,MGM_W51);
   and MGM_G62(MGM_W54,SE,MGM_W53);
   not MGM_G63(MGM_W55,SI);
   and MGM_G64(MGM_W56,MGM_W55,MGM_W54);
   or MGM_G65(ENABLE_NOT_B1_AND_B2B_AND_NOT_CK_AND_NOT_D_AND_NOT_SE_OR_NOT_B1_AND_B2B_AND_NOT_CK_AND_SE_AND_NOT_SI,MGM_W56,MGM_W49);
   not MGM_G66(MGM_W57,B1);
   and MGM_G67(MGM_W58,B2B,MGM_W57);
   not MGM_G68(MGM_W59,CK);
   and MGM_G69(MGM_W60,MGM_W59,MGM_W58);
   and MGM_G70(MGM_W61,D,MGM_W60);
   not MGM_G71(MGM_W62,SE);
   and MGM_G72(MGM_W63,MGM_W62,MGM_W61);
   not MGM_G73(MGM_W64,B1);
   and MGM_G74(MGM_W65,B2B,MGM_W64);
   not MGM_G75(MGM_W66,CK);
   and MGM_G76(MGM_W67,MGM_W66,MGM_W65);
   and MGM_G77(MGM_W68,SE,MGM_W67);
   and MGM_G78(MGM_W69,SI,MGM_W68);
   or MGM_G79(ENABLE_NOT_B1_AND_B2B_AND_NOT_CK_AND_D_AND_NOT_SE_OR_NOT_B1_AND_B2B_AND_NOT_CK_AND_SE_AND_SI,MGM_W69,MGM_W63);
   not MGM_G80(MGM_W70,B1);
   and MGM_G81(MGM_W71,B2B,MGM_W70);
   and MGM_G82(ENABLE_NOT_B1_AND_B2B_AND_CK,CK,MGM_W71);
   not MGM_G83(MGM_W72,B1);
   and MGM_G84(MGM_W73,B2B,MGM_W72);
   not MGM_G85(MGM_W74,D);
   and MGM_G86(MGM_W75,MGM_W74,MGM_W73);
   and MGM_G87(MGM_W76,RD,MGM_W75);
   and MGM_G88(ENABLE_NOT_B1_AND_B2B_AND_NOT_D_AND_RD_AND_SI,SI,MGM_W76);
   not MGM_G89(MGM_W77,B1);
   and MGM_G90(MGM_W78,B2B,MGM_W77);
   and MGM_G91(MGM_W79,D,MGM_W78);
   and MGM_G92(MGM_W80,RD,MGM_W79);
   not MGM_G93(MGM_W81,SI);
   and MGM_G94(ENABLE_NOT_B1_AND_B2B_AND_D_AND_RD_AND_NOT_SI,MGM_W81,MGM_W80);
   not MGM_G95(MGM_W82,B1);
   and MGM_G96(MGM_W83,B2B,MGM_W82);
   not MGM_G97(MGM_W84,D);
   and MGM_G98(MGM_W85,MGM_W84,MGM_W83);
   and MGM_G99(MGM_W86,RD,MGM_W85);
   and MGM_G100(ENABLE_NOT_B1_AND_B2B_AND_NOT_D_AND_RD_AND_SE,SE,MGM_W86);
   not MGM_G101(MGM_W87,B1);
   and MGM_G102(MGM_W88,B2B,MGM_W87);
   and MGM_G103(MGM_W89,D,MGM_W88);
   and MGM_G104(MGM_W90,RD,MGM_W89);
   and MGM_G105(ENABLE_NOT_B1_AND_B2B_AND_D_AND_RD_AND_SE,SE,MGM_W90);
   // spec_gates_end
   // specify_block_begin
   specify

      // seq arc B2B --> Q
      (B2B => Q)  = (1.0,1.0);
      
      // seq arc CK --> Q
      (CK => Q)  = (1.0,1.0);
      
      if(CK===1'b0 && D===1'b0 && SE===1'b0 || CK===1'b0 && SE===1'b1 && SI===1'b0)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b0 && D===1'b1 && SE===1'b0 || CK===1'b0 && SE===1'b1 && SI===1'b1)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b1)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      ifnone
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      $width(posedge B1 &&& (ENABLE_B2B_AND_RD === 1'b1)
      ,1.0,0);
      
      // removal B1-HL CK-LH
      $removal(negedge B1 &&& (ENABLE_B2B_AND_RD === 1'b1),
      posedge CK &&& (ENABLE_B2B_AND_RD === 1'b1),1.0);
      
      $width(negedge B2B &&& (ENABLE_NOT_B1_AND_RD === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_B1_AND_B2B_AND_NOT_D_AND_RD_AND_NOT_SE_OR_NOT_B1_AND_B2B_AND_RD_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_B1_AND_B2B_AND_NOT_D_AND_RD_AND_NOT_SE_OR_NOT_B1_AND_B2B_AND_RD_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_B1_AND_B2B_AND_D_AND_RD_AND_NOT_SE_OR_NOT_B1_AND_B2B_AND_RD_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_B1_AND_B2B_AND_D_AND_RD_AND_NOT_SE_OR_NOT_B1_AND_B2B_AND_RD_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      // hold D-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_B1_AND_B2B_AND_RD_AND_NOT_SE === 1'b1),
      negedge D &&& (ENABLE_NOT_B1_AND_B2B_AND_RD_AND_NOT_SE === 1'b1),1.0);
      
      // hold D-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_B1_AND_B2B_AND_RD_AND_NOT_SE === 1'b1),
      posedge D &&& (ENABLE_NOT_B1_AND_B2B_AND_RD_AND_NOT_SE === 1'b1),1.0);
      
      // setup D-HL CK-LH
      $setup(negedge D &&& (ENABLE_NOT_B1_AND_B2B_AND_RD_AND_NOT_SE === 1'b1),
      posedge CK &&& (ENABLE_NOT_B1_AND_B2B_AND_RD_AND_NOT_SE === 1'b1),1.0);
      
      // setup D-LH CK-LH
      $setup(posedge D &&& (ENABLE_NOT_B1_AND_B2B_AND_RD_AND_NOT_SE === 1'b1),
      posedge CK &&& (ENABLE_NOT_B1_AND_B2B_AND_RD_AND_NOT_SE === 1'b1),1.0);
      
      // hold RD-HL B1-HL
      $hold(negedge B1,negedge RD,1.0);
      
      // recovery RD-LH CK-LH
      $recovery(posedge RD &&& (ENABLE_NOT_B1_AND_B2B_AND_NOT_D_AND_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_B1_AND_B2B_AND_NOT_D_AND_SE_AND_SI === 1'b1),1.0);
      
      // removal RD-LH CK-LH
      $removal(posedge RD &&& (ENABLE_NOT_B1_AND_B2B_AND_NOT_D_AND_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_B1_AND_B2B_AND_NOT_D_AND_SE_AND_SI === 1'b1),1.0);
      
      // recovery RD-LH CK-LH
      $recovery(posedge RD &&& (ENABLE_NOT_B1_AND_B2B_AND_D_AND_NOT_SE === 1'b1),
      posedge CK &&& (ENABLE_NOT_B1_AND_B2B_AND_D_AND_NOT_SE === 1'b1),1.0);
      
      // removal RD-LH CK-LH
      $removal(posedge RD &&& (ENABLE_NOT_B1_AND_B2B_AND_D_AND_NOT_SE === 1'b1),
      posedge CK &&& (ENABLE_NOT_B1_AND_B2B_AND_D_AND_NOT_SE === 1'b1),1.0);
      
      // recovery RD-LH CK-LH
      $recovery(posedge RD &&& (ENABLE_NOT_B1_AND_B2B_AND_D_AND_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_B1_AND_B2B_AND_D_AND_SE_AND_SI === 1'b1),1.0);
      
      // removal RD-LH CK-LH
      $removal(posedge RD &&& (ENABLE_NOT_B1_AND_B2B_AND_D_AND_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_B1_AND_B2B_AND_D_AND_SE_AND_SI === 1'b1),1.0);
      
      $width(negedge RD &&& (ENABLE_NOT_B1_AND_B2B_AND_NOT_CK_AND_NOT_D_AND_NOT_SE_OR_NOT_B1_AND_B2B_AND_NOT_CK_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge RD &&& (ENABLE_NOT_B1_AND_B2B_AND_NOT_CK_AND_D_AND_NOT_SE_OR_NOT_B1_AND_B2B_AND_NOT_CK_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge RD &&& (ENABLE_NOT_B1_AND_B2B_AND_CK === 1'b1)
      ,1.0,0);
      
      // hold SE-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_B1_AND_B2B_AND_NOT_D_AND_RD_AND_SI === 1'b1),
      negedge SE &&& (ENABLE_NOT_B1_AND_B2B_AND_NOT_D_AND_RD_AND_SI === 1'b1),1.0);
      
      // hold SE-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_B1_AND_B2B_AND_NOT_D_AND_RD_AND_SI === 1'b1),
      posedge SE &&& (ENABLE_NOT_B1_AND_B2B_AND_NOT_D_AND_RD_AND_SI === 1'b1),1.0);
      
      // setup SE-HL CK-LH
      $setup(negedge SE &&& (ENABLE_NOT_B1_AND_B2B_AND_NOT_D_AND_RD_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_B1_AND_B2B_AND_NOT_D_AND_RD_AND_SI === 1'b1),1.0);
      
      // setup SE-LH CK-LH
      $setup(posedge SE &&& (ENABLE_NOT_B1_AND_B2B_AND_NOT_D_AND_RD_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_B1_AND_B2B_AND_NOT_D_AND_RD_AND_SI === 1'b1),1.0);
      
      // hold SE-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_B1_AND_B2B_AND_D_AND_RD_AND_NOT_SI === 1'b1),
      negedge SE &&& (ENABLE_NOT_B1_AND_B2B_AND_D_AND_RD_AND_NOT_SI === 1'b1),1.0);
      
      // hold SE-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_B1_AND_B2B_AND_D_AND_RD_AND_NOT_SI === 1'b1),
      posedge SE &&& (ENABLE_NOT_B1_AND_B2B_AND_D_AND_RD_AND_NOT_SI === 1'b1),1.0);
      
      // setup SE-HL CK-LH
      $setup(negedge SE &&& (ENABLE_NOT_B1_AND_B2B_AND_D_AND_RD_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_B1_AND_B2B_AND_D_AND_RD_AND_NOT_SI === 1'b1),1.0);
      
      // setup SE-LH CK-LH
      $setup(posedge SE &&& (ENABLE_NOT_B1_AND_B2B_AND_D_AND_RD_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_B1_AND_B2B_AND_D_AND_RD_AND_NOT_SI === 1'b1),1.0);
      
      // hold SI-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_B1_AND_B2B_AND_NOT_D_AND_RD_AND_SE === 1'b1),
      negedge SI &&& (ENABLE_NOT_B1_AND_B2B_AND_NOT_D_AND_RD_AND_SE === 1'b1),1.0);
      
      // hold SI-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_B1_AND_B2B_AND_NOT_D_AND_RD_AND_SE === 1'b1),
      posedge SI &&& (ENABLE_NOT_B1_AND_B2B_AND_NOT_D_AND_RD_AND_SE === 1'b1),1.0);
      
      // setup SI-HL CK-LH
      $setup(negedge SI &&& (ENABLE_NOT_B1_AND_B2B_AND_NOT_D_AND_RD_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_NOT_B1_AND_B2B_AND_NOT_D_AND_RD_AND_SE === 1'b1),1.0);
      
      // setup SI-LH CK-LH
      $setup(posedge SI &&& (ENABLE_NOT_B1_AND_B2B_AND_NOT_D_AND_RD_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_NOT_B1_AND_B2B_AND_NOT_D_AND_RD_AND_SE === 1'b1),1.0);
      
      // hold SI-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_B1_AND_B2B_AND_D_AND_RD_AND_SE === 1'b1),
      negedge SI &&& (ENABLE_NOT_B1_AND_B2B_AND_D_AND_RD_AND_SE === 1'b1),1.0);
      
      // hold SI-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_B1_AND_B2B_AND_D_AND_RD_AND_SE === 1'b1),
      posedge SI &&& (ENABLE_NOT_B1_AND_B2B_AND_D_AND_RD_AND_SE === 1'b1),1.0);
      
      // setup SI-HL CK-LH
      $setup(negedge SI &&& (ENABLE_NOT_B1_AND_B2B_AND_D_AND_RD_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_NOT_B1_AND_B2B_AND_D_AND_RD_AND_SE === 1'b1),1.0);
      
      // setup SI-LH CK-LH
      $setup(posedge SI &&& (ENABLE_NOT_B1_AND_B2B_AND_D_AND_RD_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_NOT_B1_AND_B2B_AND_D_AND_RD_AND_SE === 1'b1),1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine

`celldefine
module SAEDRVT14_FSB2BDPRBQ_PV2_8( Q, CK, D, SI, SE, RD, B1, B2B );
input B1, B2B, CK, D, RD, SE, SI;
output Q;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_FSB2BDPRBQ_PV2_8_func SAEDRVT14_FSB2BDPRBQ_PV2_8_behav_inst(.Q(Q),.CK(CK),.D(D),.SI(SI),.SE(SE),.RD(RD),.B1(B1),.B2B(B2B));
`else
   SAEDRVT14_FSB2BDPRBQ_PV2_8_func SAEDRVT14_FSB2BDPRBQ_PV2_8_inst(.Q(Q),.CK(CK),.D(D),.SI(SI),.SE(SE),.RD(RD),.B1(B1),.B2B(B2B));
   // spec_gates_begin
   and MGM_G0(ENABLE_B2B_AND_RD,RD,B2B);
   not MGM_G1(MGM_W0,B1);
   and MGM_G2(ENABLE_NOT_B1_AND_RD,RD,MGM_W0);
   not MGM_G3(MGM_W1,B1);
   and MGM_G4(MGM_W2,B2B,MGM_W1);
   not MGM_G5(MGM_W3,D);
   and MGM_G6(MGM_W4,MGM_W3,MGM_W2);
   and MGM_G7(MGM_W5,RD,MGM_W4);
   not MGM_G8(MGM_W6,SE);
   and MGM_G9(MGM_W7,MGM_W6,MGM_W5);
   not MGM_G10(MGM_W8,B1);
   and MGM_G11(MGM_W9,B2B,MGM_W8);
   and MGM_G12(MGM_W10,RD,MGM_W9);
   and MGM_G13(MGM_W11,SE,MGM_W10);
   not MGM_G14(MGM_W12,SI);
   and MGM_G15(MGM_W13,MGM_W12,MGM_W11);
   or MGM_G16(ENABLE_NOT_B1_AND_B2B_AND_NOT_D_AND_RD_AND_NOT_SE_OR_NOT_B1_AND_B2B_AND_RD_AND_SE_AND_NOT_SI,MGM_W13,MGM_W7);
   not MGM_G17(MGM_W14,B1);
   and MGM_G18(MGM_W15,B2B,MGM_W14);
   and MGM_G19(MGM_W16,D,MGM_W15);
   and MGM_G20(MGM_W17,RD,MGM_W16);
   not MGM_G21(MGM_W18,SE);
   and MGM_G22(MGM_W19,MGM_W18,MGM_W17);
   not MGM_G23(MGM_W20,B1);
   and MGM_G24(MGM_W21,B2B,MGM_W20);
   and MGM_G25(MGM_W22,RD,MGM_W21);
   and MGM_G26(MGM_W23,SE,MGM_W22);
   and MGM_G27(MGM_W24,SI,MGM_W23);
   or MGM_G28(ENABLE_NOT_B1_AND_B2B_AND_D_AND_RD_AND_NOT_SE_OR_NOT_B1_AND_B2B_AND_RD_AND_SE_AND_SI,MGM_W24,MGM_W19);
   not MGM_G29(MGM_W25,B1);
   and MGM_G30(MGM_W26,B2B,MGM_W25);
   and MGM_G31(MGM_W27,RD,MGM_W26);
   not MGM_G32(MGM_W28,SE);
   and MGM_G33(ENABLE_NOT_B1_AND_B2B_AND_RD_AND_NOT_SE,MGM_W28,MGM_W27);
   not MGM_G34(MGM_W29,B1);
   and MGM_G35(MGM_W30,B2B,MGM_W29);
   not MGM_G36(MGM_W31,D);
   and MGM_G37(MGM_W32,MGM_W31,MGM_W30);
   and MGM_G38(MGM_W33,SE,MGM_W32);
   and MGM_G39(ENABLE_NOT_B1_AND_B2B_AND_NOT_D_AND_SE_AND_SI,SI,MGM_W33);
   not MGM_G40(MGM_W34,B1);
   and MGM_G41(MGM_W35,B2B,MGM_W34);
   and MGM_G42(MGM_W36,D,MGM_W35);
   not MGM_G43(MGM_W37,SE);
   and MGM_G44(ENABLE_NOT_B1_AND_B2B_AND_D_AND_NOT_SE,MGM_W37,MGM_W36);
   not MGM_G45(MGM_W38,B1);
   and MGM_G46(MGM_W39,B2B,MGM_W38);
   and MGM_G47(MGM_W40,D,MGM_W39);
   and MGM_G48(MGM_W41,SE,MGM_W40);
   and MGM_G49(ENABLE_NOT_B1_AND_B2B_AND_D_AND_SE_AND_SI,SI,MGM_W41);
   not MGM_G50(MGM_W42,B1);
   and MGM_G51(MGM_W43,B2B,MGM_W42);
   not MGM_G52(MGM_W44,CK);
   and MGM_G53(MGM_W45,MGM_W44,MGM_W43);
   not MGM_G54(MGM_W46,D);
   and MGM_G55(MGM_W47,MGM_W46,MGM_W45);
   not MGM_G56(MGM_W48,SE);
   and MGM_G57(MGM_W49,MGM_W48,MGM_W47);
   not MGM_G58(MGM_W50,B1);
   and MGM_G59(MGM_W51,B2B,MGM_W50);
   not MGM_G60(MGM_W52,CK);
   and MGM_G61(MGM_W53,MGM_W52,MGM_W51);
   and MGM_G62(MGM_W54,SE,MGM_W53);
   not MGM_G63(MGM_W55,SI);
   and MGM_G64(MGM_W56,MGM_W55,MGM_W54);
   or MGM_G65(ENABLE_NOT_B1_AND_B2B_AND_NOT_CK_AND_NOT_D_AND_NOT_SE_OR_NOT_B1_AND_B2B_AND_NOT_CK_AND_SE_AND_NOT_SI,MGM_W56,MGM_W49);
   not MGM_G66(MGM_W57,B1);
   and MGM_G67(MGM_W58,B2B,MGM_W57);
   not MGM_G68(MGM_W59,CK);
   and MGM_G69(MGM_W60,MGM_W59,MGM_W58);
   and MGM_G70(MGM_W61,D,MGM_W60);
   not MGM_G71(MGM_W62,SE);
   and MGM_G72(MGM_W63,MGM_W62,MGM_W61);
   not MGM_G73(MGM_W64,B1);
   and MGM_G74(MGM_W65,B2B,MGM_W64);
   not MGM_G75(MGM_W66,CK);
   and MGM_G76(MGM_W67,MGM_W66,MGM_W65);
   and MGM_G77(MGM_W68,SE,MGM_W67);
   and MGM_G78(MGM_W69,SI,MGM_W68);
   or MGM_G79(ENABLE_NOT_B1_AND_B2B_AND_NOT_CK_AND_D_AND_NOT_SE_OR_NOT_B1_AND_B2B_AND_NOT_CK_AND_SE_AND_SI,MGM_W69,MGM_W63);
   not MGM_G80(MGM_W70,B1);
   and MGM_G81(MGM_W71,B2B,MGM_W70);
   and MGM_G82(ENABLE_NOT_B1_AND_B2B_AND_CK,CK,MGM_W71);
   not MGM_G83(MGM_W72,B1);
   and MGM_G84(MGM_W73,B2B,MGM_W72);
   not MGM_G85(MGM_W74,D);
   and MGM_G86(MGM_W75,MGM_W74,MGM_W73);
   and MGM_G87(MGM_W76,RD,MGM_W75);
   and MGM_G88(ENABLE_NOT_B1_AND_B2B_AND_NOT_D_AND_RD_AND_SI,SI,MGM_W76);
   not MGM_G89(MGM_W77,B1);
   and MGM_G90(MGM_W78,B2B,MGM_W77);
   and MGM_G91(MGM_W79,D,MGM_W78);
   and MGM_G92(MGM_W80,RD,MGM_W79);
   not MGM_G93(MGM_W81,SI);
   and MGM_G94(ENABLE_NOT_B1_AND_B2B_AND_D_AND_RD_AND_NOT_SI,MGM_W81,MGM_W80);
   not MGM_G95(MGM_W82,B1);
   and MGM_G96(MGM_W83,B2B,MGM_W82);
   not MGM_G97(MGM_W84,D);
   and MGM_G98(MGM_W85,MGM_W84,MGM_W83);
   and MGM_G99(MGM_W86,RD,MGM_W85);
   and MGM_G100(ENABLE_NOT_B1_AND_B2B_AND_NOT_D_AND_RD_AND_SE,SE,MGM_W86);
   not MGM_G101(MGM_W87,B1);
   and MGM_G102(MGM_W88,B2B,MGM_W87);
   and MGM_G103(MGM_W89,D,MGM_W88);
   and MGM_G104(MGM_W90,RD,MGM_W89);
   and MGM_G105(ENABLE_NOT_B1_AND_B2B_AND_D_AND_RD_AND_SE,SE,MGM_W90);
   // spec_gates_end
   // specify_block_begin
   specify

      // seq arc B2B --> Q
      (B2B => Q)  = (1.0,1.0);
      
      // seq arc CK --> Q
      (CK => Q)  = (1.0,1.0);
      
      if(CK===1'b0 && D===1'b0 && SE===1'b0 || CK===1'b0 && SE===1'b1 && SI===1'b0)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b0 && D===1'b1 && SE===1'b0 || CK===1'b0 && SE===1'b1 && SI===1'b1)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      if(CK===1'b1)
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      ifnone
      // seq arc RD --> Q
      (RD => Q)  = (1.0,1.0);
      
      $width(posedge B1 &&& (ENABLE_B2B_AND_RD === 1'b1)
      ,1.0,0);
      
      // removal B1-HL CK-LH
      $removal(negedge B1 &&& (ENABLE_B2B_AND_RD === 1'b1),
      posedge CK &&& (ENABLE_B2B_AND_RD === 1'b1),1.0);
      
      $width(negedge B2B &&& (ENABLE_NOT_B1_AND_RD === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_B1_AND_B2B_AND_NOT_D_AND_RD_AND_NOT_SE_OR_NOT_B1_AND_B2B_AND_RD_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_B1_AND_B2B_AND_NOT_D_AND_RD_AND_NOT_SE_OR_NOT_B1_AND_B2B_AND_RD_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_B1_AND_B2B_AND_D_AND_RD_AND_NOT_SE_OR_NOT_B1_AND_B2B_AND_RD_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_B1_AND_B2B_AND_D_AND_RD_AND_NOT_SE_OR_NOT_B1_AND_B2B_AND_RD_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      // hold D-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_B1_AND_B2B_AND_RD_AND_NOT_SE === 1'b1),
      negedge D &&& (ENABLE_NOT_B1_AND_B2B_AND_RD_AND_NOT_SE === 1'b1),1.0);
      
      // hold D-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_B1_AND_B2B_AND_RD_AND_NOT_SE === 1'b1),
      posedge D &&& (ENABLE_NOT_B1_AND_B2B_AND_RD_AND_NOT_SE === 1'b1),1.0);
      
      // setup D-HL CK-LH
      $setup(negedge D &&& (ENABLE_NOT_B1_AND_B2B_AND_RD_AND_NOT_SE === 1'b1),
      posedge CK &&& (ENABLE_NOT_B1_AND_B2B_AND_RD_AND_NOT_SE === 1'b1),1.0);
      
      // setup D-LH CK-LH
      $setup(posedge D &&& (ENABLE_NOT_B1_AND_B2B_AND_RD_AND_NOT_SE === 1'b1),
      posedge CK &&& (ENABLE_NOT_B1_AND_B2B_AND_RD_AND_NOT_SE === 1'b1),1.0);
      
      // hold RD-HL B1-HL
      $hold(negedge B1,negedge RD,1.0);
      
      // recovery RD-LH CK-LH
      $recovery(posedge RD &&& (ENABLE_NOT_B1_AND_B2B_AND_NOT_D_AND_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_B1_AND_B2B_AND_NOT_D_AND_SE_AND_SI === 1'b1),1.0);
      
      // removal RD-LH CK-LH
      $removal(posedge RD &&& (ENABLE_NOT_B1_AND_B2B_AND_NOT_D_AND_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_B1_AND_B2B_AND_NOT_D_AND_SE_AND_SI === 1'b1),1.0);
      
      // recovery RD-LH CK-LH
      $recovery(posedge RD &&& (ENABLE_NOT_B1_AND_B2B_AND_D_AND_NOT_SE === 1'b1),
      posedge CK &&& (ENABLE_NOT_B1_AND_B2B_AND_D_AND_NOT_SE === 1'b1),1.0);
      
      // removal RD-LH CK-LH
      $removal(posedge RD &&& (ENABLE_NOT_B1_AND_B2B_AND_D_AND_NOT_SE === 1'b1),
      posedge CK &&& (ENABLE_NOT_B1_AND_B2B_AND_D_AND_NOT_SE === 1'b1),1.0);
      
      // recovery RD-LH CK-LH
      $recovery(posedge RD &&& (ENABLE_NOT_B1_AND_B2B_AND_D_AND_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_B1_AND_B2B_AND_D_AND_SE_AND_SI === 1'b1),1.0);
      
      // removal RD-LH CK-LH
      $removal(posedge RD &&& (ENABLE_NOT_B1_AND_B2B_AND_D_AND_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_B1_AND_B2B_AND_D_AND_SE_AND_SI === 1'b1),1.0);
      
      $width(negedge RD &&& (ENABLE_NOT_B1_AND_B2B_AND_NOT_CK_AND_NOT_D_AND_NOT_SE_OR_NOT_B1_AND_B2B_AND_NOT_CK_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge RD &&& (ENABLE_NOT_B1_AND_B2B_AND_NOT_CK_AND_D_AND_NOT_SE_OR_NOT_B1_AND_B2B_AND_NOT_CK_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge RD &&& (ENABLE_NOT_B1_AND_B2B_AND_CK === 1'b1)
      ,1.0,0);
      
      // hold SE-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_B1_AND_B2B_AND_NOT_D_AND_RD_AND_SI === 1'b1),
      negedge SE &&& (ENABLE_NOT_B1_AND_B2B_AND_NOT_D_AND_RD_AND_SI === 1'b1),1.0);
      
      // hold SE-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_B1_AND_B2B_AND_NOT_D_AND_RD_AND_SI === 1'b1),
      posedge SE &&& (ENABLE_NOT_B1_AND_B2B_AND_NOT_D_AND_RD_AND_SI === 1'b1),1.0);
      
      // setup SE-HL CK-LH
      $setup(negedge SE &&& (ENABLE_NOT_B1_AND_B2B_AND_NOT_D_AND_RD_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_B1_AND_B2B_AND_NOT_D_AND_RD_AND_SI === 1'b1),1.0);
      
      // setup SE-LH CK-LH
      $setup(posedge SE &&& (ENABLE_NOT_B1_AND_B2B_AND_NOT_D_AND_RD_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_B1_AND_B2B_AND_NOT_D_AND_RD_AND_SI === 1'b1),1.0);
      
      // hold SE-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_B1_AND_B2B_AND_D_AND_RD_AND_NOT_SI === 1'b1),
      negedge SE &&& (ENABLE_NOT_B1_AND_B2B_AND_D_AND_RD_AND_NOT_SI === 1'b1),1.0);
      
      // hold SE-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_B1_AND_B2B_AND_D_AND_RD_AND_NOT_SI === 1'b1),
      posedge SE &&& (ENABLE_NOT_B1_AND_B2B_AND_D_AND_RD_AND_NOT_SI === 1'b1),1.0);
      
      // setup SE-HL CK-LH
      $setup(negedge SE &&& (ENABLE_NOT_B1_AND_B2B_AND_D_AND_RD_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_B1_AND_B2B_AND_D_AND_RD_AND_NOT_SI === 1'b1),1.0);
      
      // setup SE-LH CK-LH
      $setup(posedge SE &&& (ENABLE_NOT_B1_AND_B2B_AND_D_AND_RD_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_B1_AND_B2B_AND_D_AND_RD_AND_NOT_SI === 1'b1),1.0);
      
      // hold SI-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_B1_AND_B2B_AND_NOT_D_AND_RD_AND_SE === 1'b1),
      negedge SI &&& (ENABLE_NOT_B1_AND_B2B_AND_NOT_D_AND_RD_AND_SE === 1'b1),1.0);
      
      // hold SI-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_B1_AND_B2B_AND_NOT_D_AND_RD_AND_SE === 1'b1),
      posedge SI &&& (ENABLE_NOT_B1_AND_B2B_AND_NOT_D_AND_RD_AND_SE === 1'b1),1.0);
      
      // setup SI-HL CK-LH
      $setup(negedge SI &&& (ENABLE_NOT_B1_AND_B2B_AND_NOT_D_AND_RD_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_NOT_B1_AND_B2B_AND_NOT_D_AND_RD_AND_SE === 1'b1),1.0);
      
      // setup SI-LH CK-LH
      $setup(posedge SI &&& (ENABLE_NOT_B1_AND_B2B_AND_NOT_D_AND_RD_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_NOT_B1_AND_B2B_AND_NOT_D_AND_RD_AND_SE === 1'b1),1.0);
      
      // hold SI-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_B1_AND_B2B_AND_D_AND_RD_AND_SE === 1'b1),
      negedge SI &&& (ENABLE_NOT_B1_AND_B2B_AND_D_AND_RD_AND_SE === 1'b1),1.0);
      
      // hold SI-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_B1_AND_B2B_AND_D_AND_RD_AND_SE === 1'b1),
      posedge SI &&& (ENABLE_NOT_B1_AND_B2B_AND_D_AND_RD_AND_SE === 1'b1),1.0);
      
      // setup SI-HL CK-LH
      $setup(negedge SI &&& (ENABLE_NOT_B1_AND_B2B_AND_D_AND_RD_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_NOT_B1_AND_B2B_AND_D_AND_RD_AND_SE === 1'b1),1.0);
      
      // setup SI-LH CK-LH
      $setup(posedge SI &&& (ENABLE_NOT_B1_AND_B2B_AND_D_AND_RD_AND_SE === 1'b1),
      posedge CK &&& (ENABLE_NOT_B1_AND_B2B_AND_D_AND_RD_AND_SE === 1'b1),1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine
`celldefine
module SAEDRVT14_FSDN2_V2_1( CK, SI, SE, D0, D1, Q0, Q1, QN0, QN1 );
input CK, SE, SI;
input D0, D1;
output Q0, Q1, QN0, QN1;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_FSDN2_V2_1_func SAEDRVT14_FSDN2_V2_1_behav_inst(.CK(CK),.SI(SI),.SE(SE),.D0(D0),.D1(D1),.Q0(Q0),.Q1(Q1),.QN0(QN0),.QN1(QN1));
`else
   SAEDRVT14_FSDN2_V2_1_func SAEDRVT14_FSDN2_V2_1_inst(.CK(CK),.SI(SI),.SE(SE),.D0(D0),.D1(D1),.Q0(Q0),.Q1(Q1),.QN0(QN0),.QN1(QN1));
   // spec_gates_begin
   not MGM_G0(MGM_W0,D1);
   not MGM_G1(MGM_W1,SE);
   and MGM_G2(MGM_W2,MGM_W1,MGM_W0);
   not MGM_G3(MGM_W3,SI);
   and MGM_G4(ENABLE_NOT_D1_AND_NOT_SE_AND_NOT_SI,MGM_W3,MGM_W2);
   not MGM_G5(MGM_W4,D1);
   not MGM_G6(MGM_W5,SE);
   and MGM_G7(MGM_W6,MGM_W5,MGM_W4);
   and MGM_G8(ENABLE_NOT_D1_AND_NOT_SE_AND_SI,SI,MGM_W6);
   not MGM_G9(MGM_W7,D1);
   and MGM_G10(MGM_W8,SE,MGM_W7);
   not MGM_G11(MGM_W9,SI);
   and MGM_G12(ENABLE_NOT_D1_AND_SE_AND_NOT_SI,MGM_W9,MGM_W8);
   not MGM_G13(MGM_W10,D1);
   and MGM_G14(MGM_W11,SE,MGM_W10);
   and MGM_G15(ENABLE_NOT_D1_AND_SE_AND_SI,SI,MGM_W11);
   not MGM_G16(MGM_W12,SE);
   and MGM_G17(MGM_W13,MGM_W12,D1);
   not MGM_G18(MGM_W14,SI);
   and MGM_G19(ENABLE_D1_AND_NOT_SE_AND_NOT_SI,MGM_W14,MGM_W13);
   not MGM_G20(MGM_W15,SE);
   and MGM_G21(MGM_W16,MGM_W15,D1);
   and MGM_G22(ENABLE_D1_AND_NOT_SE_AND_SI,SI,MGM_W16);
   and MGM_G23(MGM_W17,SE,D1);
   not MGM_G24(MGM_W18,SI);
   and MGM_G25(ENABLE_D1_AND_SE_AND_NOT_SI,MGM_W18,MGM_W17);
   and MGM_G26(MGM_W19,SE,D1);
   and MGM_G27(ENABLE_D1_AND_SE_AND_SI,SI,MGM_W19);
   not MGM_G28(MGM_W20,D1);
   and MGM_G29(ENABLE_NOT_D1_AND_SI,SI,MGM_W20);
   not MGM_G30(MGM_W21,SI);
   and MGM_G31(ENABLE_D1_AND_NOT_SI,MGM_W21,D1);
   not MGM_G32(MGM_W22,D1);
   and MGM_G33(ENABLE_NOT_D1_AND_SE,SE,MGM_W22);
   and MGM_G34(ENABLE_D1_AND_SE,SE,D1);
   not MGM_G35(MGM_W23,SE);
   not MGM_G36(MGM_W24,SI);
   and MGM_G37(ENABLE_NOT_SE_AND_NOT_SI,MGM_W24,MGM_W23);
   not MGM_G38(MGM_W25,SE);
   and MGM_G39(ENABLE_NOT_SE_AND_SI,SI,MGM_W25);
   // spec_gates_end
   // specify_block_begin
   specify

      if(D0===1'b0 && SI===1'b1)
      // seq arc CK --> Q0
      (negedge CK => (Q0 : SE))  = (1.0,1.0);
      
      if(SE===1'b0 && SI===1'b0)
      // seq arc CK --> Q0
      (negedge CK => (Q0 : D0))  = (1.0,1.0);
      
      if(D0===1'b1 && SE===1'b0 && SI===1'b1 || D0===1'b0 && SE===1'b1 && SI===1'b0)
      // seq arc CK --> Q0
      (negedge CK => (Q0 : D0))  = (1.0,1.0);
      
      if(D0===1'b1 && SE===1'b1)
      // seq arc CK --> Q0
      (negedge CK => (Q0 : SI))  = (1.0,1.0);
      
      ifnone
      // seq arc CK --> Q0
      (negedge CK => (Q0 : SE))  = (1.0,1.0);
      
      if(D1===1'b0 && SI===1'b1)
      // seq arc CK --> Q1
      (negedge CK => (Q1 : D0))  = (1.0,1.0);
      
      if(SE===1'b0 && SI===1'b0)
      // seq arc CK --> Q1
      (negedge CK => (Q1 : D0))  = (1.0,1.0);
      
      if(D1===1'b1 && SE===1'b0 && SI===1'b1 || D1===1'b0 && SE===1'b1 && SI===1'b0)
      // seq arc CK --> Q1
      (negedge CK => (Q1 : D0))  = (1.0,1.0);
      
      if(D1===1'b1 && SE===1'b1)
      // seq arc CK --> Q1
      (negedge CK => (Q1 : SI))  = (1.0,1.0);
      
      ifnone
      // seq arc CK --> Q1
      (negedge CK => (Q1 : SE))  = (1.0,1.0);
      
      if(D0===1'b0 && SI===1'b1)
      // seq arc CK --> QN0
      (negedge CK => (QN0 : SE))  = (1.0,1.0);
      
      if(SE===1'b0 && SI===1'b0)
      // seq arc CK --> QN0
      (negedge CK => (QN0 : D0))  = (1.0,1.0);
      
      if(D0===1'b1 && SE===1'b0 && SI===1'b1 || D0===1'b0 && SE===1'b1 && SI===1'b0)
      // seq arc CK --> QN0
      (negedge CK => (QN0 : D0))  = (1.0,1.0);
      
      if(D0===1'b1 && SE===1'b1)
      // seq arc CK --> QN0
      (negedge CK => (QN0 : SI))  = (1.0,1.0);
      
      ifnone
      // seq arc CK --> QN0
      (negedge CK => (QN0 : SE))  = (1.0,1.0);
      
      if(D1===1'b0 && SI===1'b1)
      // seq arc CK --> QN1
      (negedge CK => (QN1 : D0))  = (1.0,1.0);
      
      if(SE===1'b0 && SI===1'b0)
      // seq arc CK --> QN1
      (negedge CK => (QN1 : D0))  = (1.0,1.0);
      
      if(D1===1'b1 && SE===1'b0 && SI===1'b1 || D1===1'b0 && SE===1'b1 && SI===1'b0)
      // seq arc CK --> QN1
      (negedge CK => (QN1 : D0))  = (1.0,1.0);
      
      if(D1===1'b1 && SE===1'b1)
      // seq arc CK --> QN1
      (negedge CK => (QN1 : SI))  = (1.0,1.0);
      
      ifnone
      // seq arc CK --> QN1
      (negedge CK => (QN1 : SE))  = (1.0,1.0);
      
      $width(negedge CK &&& (ENABLE_NOT_D1_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D1_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D1_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D1_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D1_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D1_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D1_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D1_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D1_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D1_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D1_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D1_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D1_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D1_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D1_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D1_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      // hold SE-HL CK-HL
      $hold(negedge CK &&& (ENABLE_NOT_D1_AND_SI === 1'b1),
      negedge SE &&& (ENABLE_NOT_D1_AND_SI === 1'b1),1.0);
      
      // hold SE-LH CK-HL
      $hold(negedge CK &&& (ENABLE_NOT_D1_AND_SI === 1'b1),
      posedge SE &&& (ENABLE_NOT_D1_AND_SI === 1'b1),1.0);
      
      // setup SE-HL CK-HL
      $setup(negedge SE &&& (ENABLE_NOT_D1_AND_SI === 1'b1),
      negedge CK &&& (ENABLE_NOT_D1_AND_SI === 1'b1),1.0);
      
      // setup SE-LH CK-HL
      $setup(posedge SE &&& (ENABLE_NOT_D1_AND_SI === 1'b1),
      negedge CK &&& (ENABLE_NOT_D1_AND_SI === 1'b1),1.0);
      
      // hold SE-HL CK-HL
      $hold(negedge CK &&& (ENABLE_D1_AND_NOT_SI === 1'b1),
      negedge SE &&& (ENABLE_D1_AND_NOT_SI === 1'b1),1.0);
      
      // hold SE-LH CK-HL
      $hold(negedge CK &&& (ENABLE_D1_AND_NOT_SI === 1'b1),
      posedge SE &&& (ENABLE_D1_AND_NOT_SI === 1'b1),1.0);
      
      // setup SE-HL CK-HL
      $setup(negedge SE &&& (ENABLE_D1_AND_NOT_SI === 1'b1),
      negedge CK &&& (ENABLE_D1_AND_NOT_SI === 1'b1),1.0);
      
      // setup SE-LH CK-HL
      $setup(posedge SE &&& (ENABLE_D1_AND_NOT_SI === 1'b1),
      negedge CK &&& (ENABLE_D1_AND_NOT_SI === 1'b1),1.0);
      
      // hold SI-HL CK-HL
      $hold(negedge CK &&& (ENABLE_NOT_D1_AND_SE === 1'b1),
      negedge SI &&& (ENABLE_NOT_D1_AND_SE === 1'b1),1.0);
      
      // hold SI-LH CK-HL
      $hold(negedge CK &&& (ENABLE_NOT_D1_AND_SE === 1'b1),
      posedge SI &&& (ENABLE_NOT_D1_AND_SE === 1'b1),1.0);
      
      // setup SI-HL CK-HL
      $setup(negedge SI &&& (ENABLE_NOT_D1_AND_SE === 1'b1),
      negedge CK &&& (ENABLE_NOT_D1_AND_SE === 1'b1),1.0);
      
      // setup SI-LH CK-HL
      $setup(posedge SI &&& (ENABLE_NOT_D1_AND_SE === 1'b1),
      negedge CK &&& (ENABLE_NOT_D1_AND_SE === 1'b1),1.0);
      
      // hold SI-HL CK-HL
      $hold(negedge CK &&& (ENABLE_D1_AND_SE === 1'b1),
      negedge SI &&& (ENABLE_D1_AND_SE === 1'b1),1.0);
      
      // hold SI-LH CK-HL
      $hold(negedge CK &&& (ENABLE_D1_AND_SE === 1'b1),
      posedge SI &&& (ENABLE_D1_AND_SE === 1'b1),1.0);
      
      // setup SI-HL CK-HL
      $setup(negedge SI &&& (ENABLE_D1_AND_SE === 1'b1),
      negedge CK &&& (ENABLE_D1_AND_SE === 1'b1),1.0);
      
      // setup SI-LH CK-HL
      $setup(posedge SI &&& (ENABLE_D1_AND_SE === 1'b1),
      negedge CK &&& (ENABLE_D1_AND_SE === 1'b1),1.0);
      
      // hold D0-HL CK-HL
      $hold(negedge CK &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),
      negedge D0 &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold D0-LH CK-HL
      $hold(negedge CK &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),
      posedge D0 &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup D0-HL CK-HL
      $setup(negedge D0 &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),
      negedge CK &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup D0-LH CK-HL
      $setup(posedge D0 &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),
      negedge CK &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold D0-HL CK-HL
      $hold(negedge CK &&& (ENABLE_NOT_SE_AND_SI === 1'b1),
      negedge D0 &&& (ENABLE_NOT_SE_AND_SI === 1'b1),1.0);
      
      // hold D0-LH CK-HL
      $hold(negedge CK &&& (ENABLE_NOT_SE_AND_SI === 1'b1),
      posedge D0 &&& (ENABLE_NOT_SE_AND_SI === 1'b1),1.0);
      
      // setup D0-HL CK-HL
      $setup(negedge D0 &&& (ENABLE_NOT_SE_AND_SI === 1'b1),
      negedge CK &&& (ENABLE_NOT_SE_AND_SI === 1'b1),1.0);
      
      // setup D0-LH CK-HL
      $setup(posedge D0 &&& (ENABLE_NOT_SE_AND_SI === 1'b1),
      negedge CK &&& (ENABLE_NOT_SE_AND_SI === 1'b1),1.0);
      
      // hold D1-HL CK-HL
      $hold(negedge CK &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),
      negedge D1 &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold D1-LH CK-HL
      $hold(negedge CK &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),
      posedge D1 &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup D1-HL CK-HL
      $setup(negedge D1 &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),
      negedge CK &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup D1-LH CK-HL
      $setup(posedge D1 &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),
      negedge CK &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold D1-HL CK-HL
      $hold(negedge CK &&& (ENABLE_NOT_SE_AND_SI === 1'b1),
      negedge D1 &&& (ENABLE_NOT_SE_AND_SI === 1'b1),1.0);
      
      // hold D1-LH CK-HL
      $hold(negedge CK &&& (ENABLE_NOT_SE_AND_SI === 1'b1),
      posedge D1 &&& (ENABLE_NOT_SE_AND_SI === 1'b1),1.0);
      
      // setup D1-HL CK-HL
      $setup(negedge D1 &&& (ENABLE_NOT_SE_AND_SI === 1'b1),
      negedge CK &&& (ENABLE_NOT_SE_AND_SI === 1'b1),1.0);
      
      // setup D1-LH CK-HL
      $setup(posedge D1 &&& (ENABLE_NOT_SE_AND_SI === 1'b1),
      negedge CK &&& (ENABLE_NOT_SE_AND_SI === 1'b1),1.0);
      
      // mpw CK_lh 
      $width(posedge CK,1.0,0);
      
      // mpw CK_hl 
      $width(negedge CK,1.0,0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine
`celldefine
module SAEDRVT14_FSDN2_V2_0P5( CK, SI, SE, D0, D1, Q0, Q1, QN0, QN1 );
input CK, SE, SI;
input D0, D1;
output Q0, Q1, QN0, QN1;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_FSDN2_V2_0P5_func SAEDRVT14_FSDN2_V2_0P5_behav_inst(.CK(CK),.SI(SI),.SE(SE),.D0(D0),.D1(D1),.Q0(Q0),.Q1(Q1),.QN0(QN0),.QN1(QN1));
`else
   SAEDRVT14_FSDN2_V2_0P5_func SAEDRVT14_FSDN2_V2_0P5_inst(.CK(CK),.SI(SI),.SE(SE),.D0(D0),.D1(D1),.Q0(Q0),.Q1(Q1),.QN0(QN0),.QN1(QN1));
   // spec_gates_begin
   not MGM_G0(MGM_W0,D1);
   not MGM_G1(MGM_W1,SE);
   and MGM_G2(MGM_W2,MGM_W1,MGM_W0);
   not MGM_G3(MGM_W3,SI);
   and MGM_G4(ENABLE_NOT_D1_AND_NOT_SE_AND_NOT_SI,MGM_W3,MGM_W2);
   not MGM_G5(MGM_W4,D1);
   not MGM_G6(MGM_W5,SE);
   and MGM_G7(MGM_W6,MGM_W5,MGM_W4);
   and MGM_G8(ENABLE_NOT_D1_AND_NOT_SE_AND_SI,SI,MGM_W6);
   not MGM_G9(MGM_W7,D1);
   and MGM_G10(MGM_W8,SE,MGM_W7);
   not MGM_G11(MGM_W9,SI);
   and MGM_G12(ENABLE_NOT_D1_AND_SE_AND_NOT_SI,MGM_W9,MGM_W8);
   not MGM_G13(MGM_W10,D1);
   and MGM_G14(MGM_W11,SE,MGM_W10);
   and MGM_G15(ENABLE_NOT_D1_AND_SE_AND_SI,SI,MGM_W11);
   not MGM_G16(MGM_W12,SE);
   and MGM_G17(MGM_W13,MGM_W12,D1);
   not MGM_G18(MGM_W14,SI);
   and MGM_G19(ENABLE_D1_AND_NOT_SE_AND_NOT_SI,MGM_W14,MGM_W13);
   not MGM_G20(MGM_W15,SE);
   and MGM_G21(MGM_W16,MGM_W15,D1);
   and MGM_G22(ENABLE_D1_AND_NOT_SE_AND_SI,SI,MGM_W16);
   and MGM_G23(MGM_W17,SE,D1);
   not MGM_G24(MGM_W18,SI);
   and MGM_G25(ENABLE_D1_AND_SE_AND_NOT_SI,MGM_W18,MGM_W17);
   and MGM_G26(MGM_W19,SE,D1);
   and MGM_G27(ENABLE_D1_AND_SE_AND_SI,SI,MGM_W19);
   not MGM_G28(MGM_W20,D1);
   and MGM_G29(ENABLE_NOT_D1_AND_SI,SI,MGM_W20);
   not MGM_G30(MGM_W21,SI);
   and MGM_G31(ENABLE_D1_AND_NOT_SI,MGM_W21,D1);
   not MGM_G32(MGM_W22,D1);
   and MGM_G33(ENABLE_NOT_D1_AND_SE,SE,MGM_W22);
   and MGM_G34(ENABLE_D1_AND_SE,SE,D1);
   not MGM_G35(MGM_W23,SE);
   not MGM_G36(MGM_W24,SI);
   and MGM_G37(ENABLE_NOT_SE_AND_NOT_SI,MGM_W24,MGM_W23);
   not MGM_G38(MGM_W25,SE);
   and MGM_G39(ENABLE_NOT_SE_AND_SI,SI,MGM_W25);
   // spec_gates_end
   // specify_block_begin
   specify

      if(D0===1'b0 && SI===1'b1)
      // seq arc CK --> Q0
      (negedge CK => (Q0 : SE))  = (1.0,1.0);
      
      if(SE===1'b0 && SI===1'b0)
      // seq arc CK --> Q0
      (negedge CK => (Q0 : D0))  = (1.0,1.0);
      
      if(D0===1'b1 && SE===1'b0 && SI===1'b1 || D0===1'b0 && SE===1'b1 && SI===1'b0)
      // seq arc CK --> Q0
      (negedge CK => (Q0 : D0))  = (1.0,1.0);
      
      if(D0===1'b1 && SE===1'b1)
      // seq arc CK --> Q0
      (negedge CK => (Q0 : SI))  = (1.0,1.0);
      
      ifnone
      // seq arc CK --> Q0
      (negedge CK => (Q0 : SE))  = (1.0,1.0);
      
      if(D1===1'b0 && SI===1'b1)
      // seq arc CK --> Q1
      (negedge CK => (Q1 : D0))  = (1.0,1.0);
      
      if(SE===1'b0 && SI===1'b0)
      // seq arc CK --> Q1
      (negedge CK => (Q1 : D0))  = (1.0,1.0);
      
      if(D1===1'b1 && SE===1'b0 && SI===1'b1 || D1===1'b0 && SE===1'b1 && SI===1'b0)
      // seq arc CK --> Q1
      (negedge CK => (Q1 : D0))  = (1.0,1.0);
      
      if(D1===1'b1 && SE===1'b1)
      // seq arc CK --> Q1
      (negedge CK => (Q1 : SI))  = (1.0,1.0);
      
      ifnone
      // seq arc CK --> Q1
      (negedge CK => (Q1 : SE))  = (1.0,1.0);
      
      if(D0===1'b0 && SI===1'b1)
      // seq arc CK --> QN0
      (negedge CK => (QN0 : SE))  = (1.0,1.0);
      
      if(SE===1'b0 && SI===1'b0)
      // seq arc CK --> QN0
      (negedge CK => (QN0 : D0))  = (1.0,1.0);
      
      if(D0===1'b1 && SE===1'b0 && SI===1'b1 || D0===1'b0 && SE===1'b1 && SI===1'b0)
      // seq arc CK --> QN0
      (negedge CK => (QN0 : D0))  = (1.0,1.0);
      
      if(D0===1'b1 && SE===1'b1)
      // seq arc CK --> QN0
      (negedge CK => (QN0 : SI))  = (1.0,1.0);
      
      ifnone
      // seq arc CK --> QN0
      (negedge CK => (QN0 : SE))  = (1.0,1.0);
      
      if(D1===1'b0 && SI===1'b1)
      // seq arc CK --> QN1
      (negedge CK => (QN1 : D0))  = (1.0,1.0);
      
      if(SE===1'b0 && SI===1'b0)
      // seq arc CK --> QN1
      (negedge CK => (QN1 : D0))  = (1.0,1.0);
      
      if(D1===1'b1 && SE===1'b0 && SI===1'b1 || D1===1'b0 && SE===1'b1 && SI===1'b0)
      // seq arc CK --> QN1
      (negedge CK => (QN1 : D0))  = (1.0,1.0);
      
      if(D1===1'b1 && SE===1'b1)
      // seq arc CK --> QN1
      (negedge CK => (QN1 : SI))  = (1.0,1.0);
      
      ifnone
      // seq arc CK --> QN1
      (negedge CK => (QN1 : SE))  = (1.0,1.0);
      
      $width(negedge CK &&& (ENABLE_NOT_D1_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D1_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D1_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D1_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D1_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D1_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D1_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D1_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D1_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D1_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D1_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D1_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D1_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D1_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D1_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D1_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      // hold SE-HL CK-HL
      $hold(negedge CK &&& (ENABLE_NOT_D1_AND_SI === 1'b1),
      negedge SE &&& (ENABLE_NOT_D1_AND_SI === 1'b1),1.0);
      
      // hold SE-LH CK-HL
      $hold(negedge CK &&& (ENABLE_NOT_D1_AND_SI === 1'b1),
      posedge SE &&& (ENABLE_NOT_D1_AND_SI === 1'b1),1.0);
      
      // setup SE-HL CK-HL
      $setup(negedge SE &&& (ENABLE_NOT_D1_AND_SI === 1'b1),
      negedge CK &&& (ENABLE_NOT_D1_AND_SI === 1'b1),1.0);
      
      // setup SE-LH CK-HL
      $setup(posedge SE &&& (ENABLE_NOT_D1_AND_SI === 1'b1),
      negedge CK &&& (ENABLE_NOT_D1_AND_SI === 1'b1),1.0);
      
      // hold SE-HL CK-HL
      $hold(negedge CK &&& (ENABLE_D1_AND_NOT_SI === 1'b1),
      negedge SE &&& (ENABLE_D1_AND_NOT_SI === 1'b1),1.0);
      
      // hold SE-LH CK-HL
      $hold(negedge CK &&& (ENABLE_D1_AND_NOT_SI === 1'b1),
      posedge SE &&& (ENABLE_D1_AND_NOT_SI === 1'b1),1.0);
      
      // setup SE-HL CK-HL
      $setup(negedge SE &&& (ENABLE_D1_AND_NOT_SI === 1'b1),
      negedge CK &&& (ENABLE_D1_AND_NOT_SI === 1'b1),1.0);
      
      // setup SE-LH CK-HL
      $setup(posedge SE &&& (ENABLE_D1_AND_NOT_SI === 1'b1),
      negedge CK &&& (ENABLE_D1_AND_NOT_SI === 1'b1),1.0);
      
      // hold SI-HL CK-HL
      $hold(negedge CK &&& (ENABLE_NOT_D1_AND_SE === 1'b1),
      negedge SI &&& (ENABLE_NOT_D1_AND_SE === 1'b1),1.0);
      
      // hold SI-LH CK-HL
      $hold(negedge CK &&& (ENABLE_NOT_D1_AND_SE === 1'b1),
      posedge SI &&& (ENABLE_NOT_D1_AND_SE === 1'b1),1.0);
      
      // setup SI-HL CK-HL
      $setup(negedge SI &&& (ENABLE_NOT_D1_AND_SE === 1'b1),
      negedge CK &&& (ENABLE_NOT_D1_AND_SE === 1'b1),1.0);
      
      // setup SI-LH CK-HL
      $setup(posedge SI &&& (ENABLE_NOT_D1_AND_SE === 1'b1),
      negedge CK &&& (ENABLE_NOT_D1_AND_SE === 1'b1),1.0);
      
      // hold SI-HL CK-HL
      $hold(negedge CK &&& (ENABLE_D1_AND_SE === 1'b1),
      negedge SI &&& (ENABLE_D1_AND_SE === 1'b1),1.0);
      
      // hold SI-LH CK-HL
      $hold(negedge CK &&& (ENABLE_D1_AND_SE === 1'b1),
      posedge SI &&& (ENABLE_D1_AND_SE === 1'b1),1.0);
      
      // setup SI-HL CK-HL
      $setup(negedge SI &&& (ENABLE_D1_AND_SE === 1'b1),
      negedge CK &&& (ENABLE_D1_AND_SE === 1'b1),1.0);
      
      // setup SI-LH CK-HL
      $setup(posedge SI &&& (ENABLE_D1_AND_SE === 1'b1),
      negedge CK &&& (ENABLE_D1_AND_SE === 1'b1),1.0);
      
      // hold D0-HL CK-HL
      $hold(negedge CK &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),
      negedge D0 &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold D0-LH CK-HL
      $hold(negedge CK &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),
      posedge D0 &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup D0-HL CK-HL
      $setup(negedge D0 &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),
      negedge CK &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup D0-LH CK-HL
      $setup(posedge D0 &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),
      negedge CK &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold D0-HL CK-HL
      $hold(negedge CK &&& (ENABLE_NOT_SE_AND_SI === 1'b1),
      negedge D0 &&& (ENABLE_NOT_SE_AND_SI === 1'b1),1.0);
      
      // hold D0-LH CK-HL
      $hold(negedge CK &&& (ENABLE_NOT_SE_AND_SI === 1'b1),
      posedge D0 &&& (ENABLE_NOT_SE_AND_SI === 1'b1),1.0);
      
      // setup D0-HL CK-HL
      $setup(negedge D0 &&& (ENABLE_NOT_SE_AND_SI === 1'b1),
      negedge CK &&& (ENABLE_NOT_SE_AND_SI === 1'b1),1.0);
      
      // setup D0-LH CK-HL
      $setup(posedge D0 &&& (ENABLE_NOT_SE_AND_SI === 1'b1),
      negedge CK &&& (ENABLE_NOT_SE_AND_SI === 1'b1),1.0);
      
      // hold D1-HL CK-HL
      $hold(negedge CK &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),
      negedge D1 &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold D1-LH CK-HL
      $hold(negedge CK &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),
      posedge D1 &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup D1-HL CK-HL
      $setup(negedge D1 &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),
      negedge CK &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup D1-LH CK-HL
      $setup(posedge D1 &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),
      negedge CK &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold D1-HL CK-HL
      $hold(negedge CK &&& (ENABLE_NOT_SE_AND_SI === 1'b1),
      negedge D1 &&& (ENABLE_NOT_SE_AND_SI === 1'b1),1.0);
      
      // hold D1-LH CK-HL
      $hold(negedge CK &&& (ENABLE_NOT_SE_AND_SI === 1'b1),
      posedge D1 &&& (ENABLE_NOT_SE_AND_SI === 1'b1),1.0);
      
      // setup D1-HL CK-HL
      $setup(negedge D1 &&& (ENABLE_NOT_SE_AND_SI === 1'b1),
      negedge CK &&& (ENABLE_NOT_SE_AND_SI === 1'b1),1.0);
      
      // setup D1-LH CK-HL
      $setup(posedge D1 &&& (ENABLE_NOT_SE_AND_SI === 1'b1),
      negedge CK &&& (ENABLE_NOT_SE_AND_SI === 1'b1),1.0);
      
      // mpw CK_lh 
      $width(posedge CK,1.0,0);
      
      // mpw CK_hl 
      $width(negedge CK,1.0,0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine

`celldefine
module SAEDRVT14_FSDN2_V2_2( CK, SI, SE, D0, D1, Q0, Q1, QN0, QN1 );
input CK, SE, SI;
input D0, D1;
output Q0, Q1, QN0, QN1;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_FSDN2_V2_2_func SAEDRVT14_FSDN2_V2_2_behav_inst(.CK(CK),.SI(SI),.SE(SE),.D0(D0),.D1(D1),.Q0(Q0),.Q1(Q1),.QN0(QN0),.QN1(QN1));
`else
   SAEDRVT14_FSDN2_V2_2_func SAEDRVT14_FSDN2_V2_2_inst(.CK(CK),.SI(SI),.SE(SE),.D0(D0),.D1(D1),.Q0(Q0),.Q1(Q1),.QN0(QN0),.QN1(QN1));
   // spec_gates_begin
   not MGM_G0(MGM_W0,D1);
   not MGM_G1(MGM_W1,SE);
   and MGM_G2(MGM_W2,MGM_W1,MGM_W0);
   not MGM_G3(MGM_W3,SI);
   and MGM_G4(ENABLE_NOT_D1_AND_NOT_SE_AND_NOT_SI,MGM_W3,MGM_W2);
   not MGM_G5(MGM_W4,D1);
   not MGM_G6(MGM_W5,SE);
   and MGM_G7(MGM_W6,MGM_W5,MGM_W4);
   and MGM_G8(ENABLE_NOT_D1_AND_NOT_SE_AND_SI,SI,MGM_W6);
   not MGM_G9(MGM_W7,D1);
   and MGM_G10(MGM_W8,SE,MGM_W7);
   not MGM_G11(MGM_W9,SI);
   and MGM_G12(ENABLE_NOT_D1_AND_SE_AND_NOT_SI,MGM_W9,MGM_W8);
   not MGM_G13(MGM_W10,D1);
   and MGM_G14(MGM_W11,SE,MGM_W10);
   and MGM_G15(ENABLE_NOT_D1_AND_SE_AND_SI,SI,MGM_W11);
   not MGM_G16(MGM_W12,SE);
   and MGM_G17(MGM_W13,MGM_W12,D1);
   not MGM_G18(MGM_W14,SI);
   and MGM_G19(ENABLE_D1_AND_NOT_SE_AND_NOT_SI,MGM_W14,MGM_W13);
   not MGM_G20(MGM_W15,SE);
   and MGM_G21(MGM_W16,MGM_W15,D1);
   and MGM_G22(ENABLE_D1_AND_NOT_SE_AND_SI,SI,MGM_W16);
   and MGM_G23(MGM_W17,SE,D1);
   not MGM_G24(MGM_W18,SI);
   and MGM_G25(ENABLE_D1_AND_SE_AND_NOT_SI,MGM_W18,MGM_W17);
   and MGM_G26(MGM_W19,SE,D1);
   and MGM_G27(ENABLE_D1_AND_SE_AND_SI,SI,MGM_W19);
   not MGM_G28(MGM_W20,D1);
   and MGM_G29(ENABLE_NOT_D1_AND_SI,SI,MGM_W20);
   not MGM_G30(MGM_W21,SI);
   and MGM_G31(ENABLE_D1_AND_NOT_SI,MGM_W21,D1);
   not MGM_G32(MGM_W22,D1);
   and MGM_G33(ENABLE_NOT_D1_AND_SE,SE,MGM_W22);
   and MGM_G34(ENABLE_D1_AND_SE,SE,D1);
   not MGM_G35(MGM_W23,SE);
   not MGM_G36(MGM_W24,SI);
   and MGM_G37(ENABLE_NOT_SE_AND_NOT_SI,MGM_W24,MGM_W23);
   not MGM_G38(MGM_W25,SE);
   and MGM_G39(ENABLE_NOT_SE_AND_SI,SI,MGM_W25);
   // spec_gates_end
   // specify_block_begin
   specify

      if(D0===1'b0 && SI===1'b1)
      // seq arc CK --> Q0
      (negedge CK => (Q0 : SE))  = (1.0,1.0);
      
      if(SE===1'b0 && SI===1'b0)
      // seq arc CK --> Q0
      (negedge CK => (Q0 : D0))  = (1.0,1.0);
      
      if(D0===1'b1 && SE===1'b0 && SI===1'b1 || D0===1'b0 && SE===1'b1 && SI===1'b0)
      // seq arc CK --> Q0
      (negedge CK => (Q0 : D0))  = (1.0,1.0);
      
      if(D0===1'b1 && SE===1'b1)
      // seq arc CK --> Q0
      (negedge CK => (Q0 : SI))  = (1.0,1.0);
      
      ifnone
      // seq arc CK --> Q0
      (negedge CK => (Q0 : SE))  = (1.0,1.0);
      
      if(D1===1'b0 && SI===1'b1)
      // seq arc CK --> Q1
      (negedge CK => (Q1 : D0))  = (1.0,1.0);
      
      if(SE===1'b0 && SI===1'b0)
      // seq arc CK --> Q1
      (negedge CK => (Q1 : D0))  = (1.0,1.0);
      
      if(D1===1'b1 && SE===1'b0 && SI===1'b1 || D1===1'b0 && SE===1'b1 && SI===1'b0)
      // seq arc CK --> Q1
      (negedge CK => (Q1 : D0))  = (1.0,1.0);
      
      if(D1===1'b1 && SE===1'b1)
      // seq arc CK --> Q1
      (negedge CK => (Q1 : SI))  = (1.0,1.0);
      
      ifnone
      // seq arc CK --> Q1
      (negedge CK => (Q1 : SE))  = (1.0,1.0);
      
      if(D0===1'b0 && SI===1'b1)
      // seq arc CK --> QN0
      (negedge CK => (QN0 : SE))  = (1.0,1.0);
      
      if(SE===1'b0 && SI===1'b0)
      // seq arc CK --> QN0
      (negedge CK => (QN0 : D0))  = (1.0,1.0);
      
      if(D0===1'b1 && SE===1'b0 && SI===1'b1 || D0===1'b0 && SE===1'b1 && SI===1'b0)
      // seq arc CK --> QN0
      (negedge CK => (QN0 : D0))  = (1.0,1.0);
      
      if(D0===1'b1 && SE===1'b1)
      // seq arc CK --> QN0
      (negedge CK => (QN0 : SI))  = (1.0,1.0);
      
      ifnone
      // seq arc CK --> QN0
      (negedge CK => (QN0 : SE))  = (1.0,1.0);
      
      if(D1===1'b0 && SI===1'b1)
      // seq arc CK --> QN1
      (negedge CK => (QN1 : D0))  = (1.0,1.0);
      
      if(SE===1'b0 && SI===1'b0)
      // seq arc CK --> QN1
      (negedge CK => (QN1 : D0))  = (1.0,1.0);
      
      if(D1===1'b1 && SE===1'b0 && SI===1'b1 || D1===1'b0 && SE===1'b1 && SI===1'b0)
      // seq arc CK --> QN1
      (negedge CK => (QN1 : D0))  = (1.0,1.0);
      
      if(D1===1'b1 && SE===1'b1)
      // seq arc CK --> QN1
      (negedge CK => (QN1 : SI))  = (1.0,1.0);
      
      ifnone
      // seq arc CK --> QN1
      (negedge CK => (QN1 : SE))  = (1.0,1.0);
      
      $width(negedge CK &&& (ENABLE_NOT_D1_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D1_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D1_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D1_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D1_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D1_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D1_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D1_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D1_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D1_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D1_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D1_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D1_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D1_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D1_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D1_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      // hold SE-HL CK-HL
      $hold(negedge CK &&& (ENABLE_NOT_D1_AND_SI === 1'b1),
      negedge SE &&& (ENABLE_NOT_D1_AND_SI === 1'b1),1.0);
      
      // hold SE-LH CK-HL
      $hold(negedge CK &&& (ENABLE_NOT_D1_AND_SI === 1'b1),
      posedge SE &&& (ENABLE_NOT_D1_AND_SI === 1'b1),1.0);
      
      // setup SE-HL CK-HL
      $setup(negedge SE &&& (ENABLE_NOT_D1_AND_SI === 1'b1),
      negedge CK &&& (ENABLE_NOT_D1_AND_SI === 1'b1),1.0);
      
      // setup SE-LH CK-HL
      $setup(posedge SE &&& (ENABLE_NOT_D1_AND_SI === 1'b1),
      negedge CK &&& (ENABLE_NOT_D1_AND_SI === 1'b1),1.0);
      
      // hold SE-HL CK-HL
      $hold(negedge CK &&& (ENABLE_D1_AND_NOT_SI === 1'b1),
      negedge SE &&& (ENABLE_D1_AND_NOT_SI === 1'b1),1.0);
      
      // hold SE-LH CK-HL
      $hold(negedge CK &&& (ENABLE_D1_AND_NOT_SI === 1'b1),
      posedge SE &&& (ENABLE_D1_AND_NOT_SI === 1'b1),1.0);
      
      // setup SE-HL CK-HL
      $setup(negedge SE &&& (ENABLE_D1_AND_NOT_SI === 1'b1),
      negedge CK &&& (ENABLE_D1_AND_NOT_SI === 1'b1),1.0);
      
      // setup SE-LH CK-HL
      $setup(posedge SE &&& (ENABLE_D1_AND_NOT_SI === 1'b1),
      negedge CK &&& (ENABLE_D1_AND_NOT_SI === 1'b1),1.0);
      
      // hold SI-HL CK-HL
      $hold(negedge CK &&& (ENABLE_NOT_D1_AND_SE === 1'b1),
      negedge SI &&& (ENABLE_NOT_D1_AND_SE === 1'b1),1.0);
      
      // hold SI-LH CK-HL
      $hold(negedge CK &&& (ENABLE_NOT_D1_AND_SE === 1'b1),
      posedge SI &&& (ENABLE_NOT_D1_AND_SE === 1'b1),1.0);
      
      // setup SI-HL CK-HL
      $setup(negedge SI &&& (ENABLE_NOT_D1_AND_SE === 1'b1),
      negedge CK &&& (ENABLE_NOT_D1_AND_SE === 1'b1),1.0);
      
      // setup SI-LH CK-HL
      $setup(posedge SI &&& (ENABLE_NOT_D1_AND_SE === 1'b1),
      negedge CK &&& (ENABLE_NOT_D1_AND_SE === 1'b1),1.0);
      
      // hold SI-HL CK-HL
      $hold(negedge CK &&& (ENABLE_D1_AND_SE === 1'b1),
      negedge SI &&& (ENABLE_D1_AND_SE === 1'b1),1.0);
      
      // hold SI-LH CK-HL
      $hold(negedge CK &&& (ENABLE_D1_AND_SE === 1'b1),
      posedge SI &&& (ENABLE_D1_AND_SE === 1'b1),1.0);
      
      // setup SI-HL CK-HL
      $setup(negedge SI &&& (ENABLE_D1_AND_SE === 1'b1),
      negedge CK &&& (ENABLE_D1_AND_SE === 1'b1),1.0);
      
      // setup SI-LH CK-HL
      $setup(posedge SI &&& (ENABLE_D1_AND_SE === 1'b1),
      negedge CK &&& (ENABLE_D1_AND_SE === 1'b1),1.0);
      
      // hold D0-HL CK-HL
      $hold(negedge CK &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),
      negedge D0 &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold D0-LH CK-HL
      $hold(negedge CK &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),
      posedge D0 &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup D0-HL CK-HL
      $setup(negedge D0 &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),
      negedge CK &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup D0-LH CK-HL
      $setup(posedge D0 &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),
      negedge CK &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold D0-HL CK-HL
      $hold(negedge CK &&& (ENABLE_NOT_SE_AND_SI === 1'b1),
      negedge D0 &&& (ENABLE_NOT_SE_AND_SI === 1'b1),1.0);
      
      // hold D0-LH CK-HL
      $hold(negedge CK &&& (ENABLE_NOT_SE_AND_SI === 1'b1),
      posedge D0 &&& (ENABLE_NOT_SE_AND_SI === 1'b1),1.0);
      
      // setup D0-HL CK-HL
      $setup(negedge D0 &&& (ENABLE_NOT_SE_AND_SI === 1'b1),
      negedge CK &&& (ENABLE_NOT_SE_AND_SI === 1'b1),1.0);
      
      // setup D0-LH CK-HL
      $setup(posedge D0 &&& (ENABLE_NOT_SE_AND_SI === 1'b1),
      negedge CK &&& (ENABLE_NOT_SE_AND_SI === 1'b1),1.0);
      
      // hold D1-HL CK-HL
      $hold(negedge CK &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),
      negedge D1 &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold D1-LH CK-HL
      $hold(negedge CK &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),
      posedge D1 &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup D1-HL CK-HL
      $setup(negedge D1 &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),
      negedge CK &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup D1-LH CK-HL
      $setup(posedge D1 &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),
      negedge CK &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold D1-HL CK-HL
      $hold(negedge CK &&& (ENABLE_NOT_SE_AND_SI === 1'b1),
      negedge D1 &&& (ENABLE_NOT_SE_AND_SI === 1'b1),1.0);
      
      // hold D1-LH CK-HL
      $hold(negedge CK &&& (ENABLE_NOT_SE_AND_SI === 1'b1),
      posedge D1 &&& (ENABLE_NOT_SE_AND_SI === 1'b1),1.0);
      
      // setup D1-HL CK-HL
      $setup(negedge D1 &&& (ENABLE_NOT_SE_AND_SI === 1'b1),
      negedge CK &&& (ENABLE_NOT_SE_AND_SI === 1'b1),1.0);
      
      // setup D1-LH CK-HL
      $setup(posedge D1 &&& (ENABLE_NOT_SE_AND_SI === 1'b1),
      negedge CK &&& (ENABLE_NOT_SE_AND_SI === 1'b1),1.0);
      
      // mpw CK_lh 
      $width(posedge CK,1.0,0);
      
      // mpw CK_hl 
      $width(negedge CK,1.0,0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine

`celldefine
module SAEDRVT14_FSDN2_V2_4( CK, SI, SE, D0, D1, Q0, Q1, QN0, QN1 );
input CK, SE, SI;
input D0, D1;
output Q0, Q1, QN0, QN1;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_FSDN2_V2_4_func SAEDRVT14_FSDN2_V2_4_behav_inst(.CK(CK),.SI(SI),.SE(SE),.D0(D0),.D1(D1),.Q0(Q0),.Q1(Q1),.QN0(QN0),.QN1(QN1));
`else
   SAEDRVT14_FSDN2_V2_4_func SAEDRVT14_FSDN2_V2_4_inst(.CK(CK),.SI(SI),.SE(SE),.D0(D0),.D1(D1),.Q0(Q0),.Q1(Q1),.QN0(QN0),.QN1(QN1));
   // spec_gates_begin
   not MGM_G0(MGM_W0,D1);
   not MGM_G1(MGM_W1,SE);
   and MGM_G2(MGM_W2,MGM_W1,MGM_W0);
   not MGM_G3(MGM_W3,SI);
   and MGM_G4(ENABLE_NOT_D1_AND_NOT_SE_AND_NOT_SI,MGM_W3,MGM_W2);
   not MGM_G5(MGM_W4,D1);
   not MGM_G6(MGM_W5,SE);
   and MGM_G7(MGM_W6,MGM_W5,MGM_W4);
   and MGM_G8(ENABLE_NOT_D1_AND_NOT_SE_AND_SI,SI,MGM_W6);
   not MGM_G9(MGM_W7,D1);
   and MGM_G10(MGM_W8,SE,MGM_W7);
   not MGM_G11(MGM_W9,SI);
   and MGM_G12(ENABLE_NOT_D1_AND_SE_AND_NOT_SI,MGM_W9,MGM_W8);
   not MGM_G13(MGM_W10,D1);
   and MGM_G14(MGM_W11,SE,MGM_W10);
   and MGM_G15(ENABLE_NOT_D1_AND_SE_AND_SI,SI,MGM_W11);
   not MGM_G16(MGM_W12,SE);
   and MGM_G17(MGM_W13,MGM_W12,D1);
   not MGM_G18(MGM_W14,SI);
   and MGM_G19(ENABLE_D1_AND_NOT_SE_AND_NOT_SI,MGM_W14,MGM_W13);
   not MGM_G20(MGM_W15,SE);
   and MGM_G21(MGM_W16,MGM_W15,D1);
   and MGM_G22(ENABLE_D1_AND_NOT_SE_AND_SI,SI,MGM_W16);
   and MGM_G23(MGM_W17,SE,D1);
   not MGM_G24(MGM_W18,SI);
   and MGM_G25(ENABLE_D1_AND_SE_AND_NOT_SI,MGM_W18,MGM_W17);
   and MGM_G26(MGM_W19,SE,D1);
   and MGM_G27(ENABLE_D1_AND_SE_AND_SI,SI,MGM_W19);
   not MGM_G28(MGM_W20,D1);
   and MGM_G29(ENABLE_NOT_D1_AND_SI,SI,MGM_W20);
   not MGM_G30(MGM_W21,SI);
   and MGM_G31(ENABLE_D1_AND_NOT_SI,MGM_W21,D1);
   not MGM_G32(MGM_W22,D1);
   and MGM_G33(ENABLE_NOT_D1_AND_SE,SE,MGM_W22);
   and MGM_G34(ENABLE_D1_AND_SE,SE,D1);
   not MGM_G35(MGM_W23,SE);
   not MGM_G36(MGM_W24,SI);
   and MGM_G37(ENABLE_NOT_SE_AND_NOT_SI,MGM_W24,MGM_W23);
   not MGM_G38(MGM_W25,SE);
   and MGM_G39(ENABLE_NOT_SE_AND_SI,SI,MGM_W25);
   // spec_gates_end
   // specify_block_begin
   specify

      if(D0===1'b0 && SI===1'b1)
      // seq arc CK --> Q0
      (negedge CK => (Q0 : SE))  = (1.0,1.0);
      
      if(SE===1'b0 && SI===1'b0)
      // seq arc CK --> Q0
      (negedge CK => (Q0 : D0))  = (1.0,1.0);
      
      if(D0===1'b1 && SE===1'b0 && SI===1'b1 || D0===1'b0 && SE===1'b1 && SI===1'b0)
      // seq arc CK --> Q0
      (negedge CK => (Q0 : D0))  = (1.0,1.0);
      
      if(D0===1'b1 && SE===1'b1)
      // seq arc CK --> Q0
      (negedge CK => (Q0 : SI))  = (1.0,1.0);
      
      ifnone
      // seq arc CK --> Q0
      (negedge CK => (Q0 : SE))  = (1.0,1.0);
      
      if(D1===1'b0 && SI===1'b1)
      // seq arc CK --> Q1
      (negedge CK => (Q1 : D0))  = (1.0,1.0);
      
      if(SE===1'b0 && SI===1'b0)
      // seq arc CK --> Q1
      (negedge CK => (Q1 : D0))  = (1.0,1.0);
      
      if(D1===1'b1 && SE===1'b0 && SI===1'b1 || D1===1'b0 && SE===1'b1 && SI===1'b0)
      // seq arc CK --> Q1
      (negedge CK => (Q1 : D0))  = (1.0,1.0);
      
      if(D1===1'b1 && SE===1'b1)
      // seq arc CK --> Q1
      (negedge CK => (Q1 : SI))  = (1.0,1.0);
      
      ifnone
      // seq arc CK --> Q1
      (negedge CK => (Q1 : SE))  = (1.0,1.0);
      
      if(D0===1'b0 && SI===1'b1)
      // seq arc CK --> QN0
      (negedge CK => (QN0 : SE))  = (1.0,1.0);
      
      if(SE===1'b0 && SI===1'b0)
      // seq arc CK --> QN0
      (negedge CK => (QN0 : D0))  = (1.0,1.0);
      
      if(D0===1'b1 && SE===1'b0 && SI===1'b1 || D0===1'b0 && SE===1'b1 && SI===1'b0)
      // seq arc CK --> QN0
      (negedge CK => (QN0 : D0))  = (1.0,1.0);
      
      if(D0===1'b1 && SE===1'b1)
      // seq arc CK --> QN0
      (negedge CK => (QN0 : SI))  = (1.0,1.0);
      
      ifnone
      // seq arc CK --> QN0
      (negedge CK => (QN0 : SE))  = (1.0,1.0);
      
      if(D1===1'b0 && SI===1'b1)
      // seq arc CK --> QN1
      (negedge CK => (QN1 : D0))  = (1.0,1.0);
      
      if(SE===1'b0 && SI===1'b0)
      // seq arc CK --> QN1
      (negedge CK => (QN1 : D0))  = (1.0,1.0);
      
      if(D1===1'b1 && SE===1'b0 && SI===1'b1 || D1===1'b0 && SE===1'b1 && SI===1'b0)
      // seq arc CK --> QN1
      (negedge CK => (QN1 : D0))  = (1.0,1.0);
      
      if(D1===1'b1 && SE===1'b1)
      // seq arc CK --> QN1
      (negedge CK => (QN1 : SI))  = (1.0,1.0);
      
      ifnone
      // seq arc CK --> QN1
      (negedge CK => (QN1 : SE))  = (1.0,1.0);
      
      $width(negedge CK &&& (ENABLE_NOT_D1_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D1_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D1_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D1_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D1_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D1_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D1_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D1_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D1_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D1_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D1_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D1_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D1_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D1_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D1_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D1_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      // hold SE-HL CK-HL
      $hold(negedge CK &&& (ENABLE_NOT_D1_AND_SI === 1'b1),
      negedge SE &&& (ENABLE_NOT_D1_AND_SI === 1'b1),1.0);
      
      // hold SE-LH CK-HL
      $hold(negedge CK &&& (ENABLE_NOT_D1_AND_SI === 1'b1),
      posedge SE &&& (ENABLE_NOT_D1_AND_SI === 1'b1),1.0);
      
      // setup SE-HL CK-HL
      $setup(negedge SE &&& (ENABLE_NOT_D1_AND_SI === 1'b1),
      negedge CK &&& (ENABLE_NOT_D1_AND_SI === 1'b1),1.0);
      
      // setup SE-LH CK-HL
      $setup(posedge SE &&& (ENABLE_NOT_D1_AND_SI === 1'b1),
      negedge CK &&& (ENABLE_NOT_D1_AND_SI === 1'b1),1.0);
      
      // hold SE-HL CK-HL
      $hold(negedge CK &&& (ENABLE_D1_AND_NOT_SI === 1'b1),
      negedge SE &&& (ENABLE_D1_AND_NOT_SI === 1'b1),1.0);
      
      // hold SE-LH CK-HL
      $hold(negedge CK &&& (ENABLE_D1_AND_NOT_SI === 1'b1),
      posedge SE &&& (ENABLE_D1_AND_NOT_SI === 1'b1),1.0);
      
      // setup SE-HL CK-HL
      $setup(negedge SE &&& (ENABLE_D1_AND_NOT_SI === 1'b1),
      negedge CK &&& (ENABLE_D1_AND_NOT_SI === 1'b1),1.0);
      
      // setup SE-LH CK-HL
      $setup(posedge SE &&& (ENABLE_D1_AND_NOT_SI === 1'b1),
      negedge CK &&& (ENABLE_D1_AND_NOT_SI === 1'b1),1.0);
      
      // hold SI-HL CK-HL
      $hold(negedge CK &&& (ENABLE_NOT_D1_AND_SE === 1'b1),
      negedge SI &&& (ENABLE_NOT_D1_AND_SE === 1'b1),1.0);
      
      // hold SI-LH CK-HL
      $hold(negedge CK &&& (ENABLE_NOT_D1_AND_SE === 1'b1),
      posedge SI &&& (ENABLE_NOT_D1_AND_SE === 1'b1),1.0);
      
      // setup SI-HL CK-HL
      $setup(negedge SI &&& (ENABLE_NOT_D1_AND_SE === 1'b1),
      negedge CK &&& (ENABLE_NOT_D1_AND_SE === 1'b1),1.0);
      
      // setup SI-LH CK-HL
      $setup(posedge SI &&& (ENABLE_NOT_D1_AND_SE === 1'b1),
      negedge CK &&& (ENABLE_NOT_D1_AND_SE === 1'b1),1.0);
      
      // hold SI-HL CK-HL
      $hold(negedge CK &&& (ENABLE_D1_AND_SE === 1'b1),
      negedge SI &&& (ENABLE_D1_AND_SE === 1'b1),1.0);
      
      // hold SI-LH CK-HL
      $hold(negedge CK &&& (ENABLE_D1_AND_SE === 1'b1),
      posedge SI &&& (ENABLE_D1_AND_SE === 1'b1),1.0);
      
      // setup SI-HL CK-HL
      $setup(negedge SI &&& (ENABLE_D1_AND_SE === 1'b1),
      negedge CK &&& (ENABLE_D1_AND_SE === 1'b1),1.0);
      
      // setup SI-LH CK-HL
      $setup(posedge SI &&& (ENABLE_D1_AND_SE === 1'b1),
      negedge CK &&& (ENABLE_D1_AND_SE === 1'b1),1.0);
      
      // hold D0-HL CK-HL
      $hold(negedge CK &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),
      negedge D0 &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold D0-LH CK-HL
      $hold(negedge CK &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),
      posedge D0 &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup D0-HL CK-HL
      $setup(negedge D0 &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),
      negedge CK &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup D0-LH CK-HL
      $setup(posedge D0 &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),
      negedge CK &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold D0-HL CK-HL
      $hold(negedge CK &&& (ENABLE_NOT_SE_AND_SI === 1'b1),
      negedge D0 &&& (ENABLE_NOT_SE_AND_SI === 1'b1),1.0);
      
      // hold D0-LH CK-HL
      $hold(negedge CK &&& (ENABLE_NOT_SE_AND_SI === 1'b1),
      posedge D0 &&& (ENABLE_NOT_SE_AND_SI === 1'b1),1.0);
      
      // setup D0-HL CK-HL
      $setup(negedge D0 &&& (ENABLE_NOT_SE_AND_SI === 1'b1),
      negedge CK &&& (ENABLE_NOT_SE_AND_SI === 1'b1),1.0);
      
      // setup D0-LH CK-HL
      $setup(posedge D0 &&& (ENABLE_NOT_SE_AND_SI === 1'b1),
      negedge CK &&& (ENABLE_NOT_SE_AND_SI === 1'b1),1.0);
      
      // hold D1-HL CK-HL
      $hold(negedge CK &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),
      negedge D1 &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold D1-LH CK-HL
      $hold(negedge CK &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),
      posedge D1 &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup D1-HL CK-HL
      $setup(negedge D1 &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),
      negedge CK &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup D1-LH CK-HL
      $setup(posedge D1 &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),
      negedge CK &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold D1-HL CK-HL
      $hold(negedge CK &&& (ENABLE_NOT_SE_AND_SI === 1'b1),
      negedge D1 &&& (ENABLE_NOT_SE_AND_SI === 1'b1),1.0);
      
      // hold D1-LH CK-HL
      $hold(negedge CK &&& (ENABLE_NOT_SE_AND_SI === 1'b1),
      posedge D1 &&& (ENABLE_NOT_SE_AND_SI === 1'b1),1.0);
      
      // setup D1-HL CK-HL
      $setup(negedge D1 &&& (ENABLE_NOT_SE_AND_SI === 1'b1),
      negedge CK &&& (ENABLE_NOT_SE_AND_SI === 1'b1),1.0);
      
      // setup D1-LH CK-HL
      $setup(posedge D1 &&& (ENABLE_NOT_SE_AND_SI === 1'b1),
      negedge CK &&& (ENABLE_NOT_SE_AND_SI === 1'b1),1.0);
      
      // mpw CK_lh 
      $width(posedge CK,1.0,0);
      
      // mpw CK_hl 
      $width(negedge CK,1.0,0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine
`celldefine
module SAEDRVT14_FSDN4_V2_1( CK, SI, SE, D0, D1, D2, D3, Q0, Q1, Q2, Q3, QN0, QN1, QN2, QN3 );
input CK, SE, SI;
input D0, D1, D2, D3;
output Q0, Q1, Q2, Q3, QN0, QN1, QN2, QN3;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_FSDN4_V2_1_func SAEDRVT14_FSDN4_V2_1_behav_inst(.CK(CK),.SI(SI),.SE(SE),.D0(D0),.D1(D1),.D2(D2),.D3(D3),.Q0(Q0),.Q1(Q1),.Q2(Q2),.Q3(Q3),.QN0(QN0),.QN1(QN1),.QN2(QN2),.QN3(QN3));
`else
   SAEDRVT14_FSDN4_V2_1_func SAEDRVT14_FSDN4_V2_1_inst(.CK(CK),.SI(SI),.SE(SE),.D0(D0),.D1(D1),.D2(D2),.D3(D3),.Q0(Q0),.Q1(Q1),.Q2(Q2),.Q3(Q3),.QN0(QN0),.QN1(QN1),.QN2(QN2),.QN3(QN3));
   // spec_gates_begin
   not MGM_G0(MGM_W0,D3);
   not MGM_G1(MGM_W1,SE);
   and MGM_G2(MGM_W2,MGM_W1,MGM_W0);
   not MGM_G3(MGM_W3,SI);
   and MGM_G4(ENABLE_NOT_D3_AND_NOT_SE_AND_NOT_SI,MGM_W3,MGM_W2);
   not MGM_G5(MGM_W4,D3);
   not MGM_G6(MGM_W5,SE);
   and MGM_G7(MGM_W6,MGM_W5,MGM_W4);
   and MGM_G8(ENABLE_NOT_D3_AND_NOT_SE_AND_SI,SI,MGM_W6);
   not MGM_G9(MGM_W7,D3);
   and MGM_G10(MGM_W8,SE,MGM_W7);
   not MGM_G11(MGM_W9,SI);
   and MGM_G12(ENABLE_NOT_D3_AND_SE_AND_NOT_SI,MGM_W9,MGM_W8);
   not MGM_G13(MGM_W10,D3);
   and MGM_G14(MGM_W11,SE,MGM_W10);
   and MGM_G15(ENABLE_NOT_D3_AND_SE_AND_SI,SI,MGM_W11);
   not MGM_G16(MGM_W12,SE);
   and MGM_G17(MGM_W13,MGM_W12,D3);
   not MGM_G18(MGM_W14,SI);
   and MGM_G19(ENABLE_D3_AND_NOT_SE_AND_NOT_SI,MGM_W14,MGM_W13);
   not MGM_G20(MGM_W15,SE);
   and MGM_G21(MGM_W16,MGM_W15,D3);
   and MGM_G22(ENABLE_D3_AND_NOT_SE_AND_SI,SI,MGM_W16);
   and MGM_G23(MGM_W17,SE,D3);
   not MGM_G24(MGM_W18,SI);
   and MGM_G25(ENABLE_D3_AND_SE_AND_NOT_SI,MGM_W18,MGM_W17);
   and MGM_G26(MGM_W19,SE,D3);
   and MGM_G27(ENABLE_D3_AND_SE_AND_SI,SI,MGM_W19);
   not MGM_G28(MGM_W20,D3);
   and MGM_G29(ENABLE_NOT_D3_AND_SI,SI,MGM_W20);
   not MGM_G30(MGM_W21,SI);
   and MGM_G31(ENABLE_D3_AND_NOT_SI,MGM_W21,D3);
   not MGM_G32(MGM_W22,D3);
   and MGM_G33(ENABLE_NOT_D3_AND_SE,SE,MGM_W22);
   and MGM_G34(ENABLE_D3_AND_SE,SE,D3);
   not MGM_G35(MGM_W23,SE);
   not MGM_G36(MGM_W24,SI);
   and MGM_G37(ENABLE_NOT_SE_AND_NOT_SI,MGM_W24,MGM_W23);
   not MGM_G38(MGM_W25,SE);
   and MGM_G39(ENABLE_NOT_SE_AND_SI,SI,MGM_W25);
   // spec_gates_end
   // specify_block_begin
   specify

      if(D0===1'b0 && SI===1'b1)
      // seq arc CK --> Q0
      (negedge CK => (Q0 : SE))  = (1.0,1.0);
      
      if(SE===1'b0 && SI===1'b0)
      // seq arc CK --> Q0
      (negedge CK => (Q0 : D0))  = (1.0,1.0);
      
      if(D0===1'b1 && SE===1'b0 && SI===1'b1 || D0===1'b0 && SE===1'b1 && SI===1'b0)
      // seq arc CK --> Q0
      (negedge CK => (Q0 : D0))  = (1.0,1.0);
      
      if(D0===1'b1 && SE===1'b1)
      // seq arc CK --> Q0
      (negedge CK => (Q0 : SI))  = (1.0,1.0);
      
      ifnone
      // seq arc CK --> Q0
      (negedge CK => (Q0 : SE))  = (1.0,1.0);
      
      if(D1===1'b0 && SI===1'b1)
      // seq arc CK --> Q1
      (negedge CK => (Q1 : D0))  = (1.0,1.0);
      
      if(SE===1'b0 && SI===1'b0)
      // seq arc CK --> Q1
      (negedge CK => (Q1 : D0))  = (1.0,1.0);
      
      if(D1===1'b1 && SE===1'b0 && SI===1'b1 || D1===1'b0 && SE===1'b1 && SI===1'b0)
      // seq arc CK --> Q1
      (negedge CK => (Q1 : D0))  = (1.0,1.0);
      
      if(D1===1'b1 && SE===1'b1)
      // seq arc CK --> Q1
      (negedge CK => (Q1 : SI))  = (1.0,1.0);
      
      ifnone
      // seq arc CK --> Q1
      (negedge CK => (Q1 : SE))  = (1.0,1.0);
      
      if(D2===1'b0 && SI===1'b1)
      // seq arc CK --> Q2
      (negedge CK => (Q2 : D0))  = (1.0,1.0);
      
      if(SE===1'b0 && SI===1'b0)
      // seq arc CK --> Q2
      (negedge CK => (Q2 : D0))  = (1.0,1.0);
      
      if(D2===1'b1 && SE===1'b0 && SI===1'b1 || D2===1'b0 && SE===1'b1 && SI===1'b0)
      // seq arc CK --> Q2
      (negedge CK => (Q2 : D0))  = (1.0,1.0);
      
      if(D2===1'b1 && SE===1'b1)
      // seq arc CK --> Q2
      (negedge CK => (Q2 : SI))  = (1.0,1.0);
      
      ifnone
      // seq arc CK --> Q2
      (negedge CK => (Q2 : SE))  = (1.0,1.0);
      
      if(D3===1'b0 && SI===1'b1)
      // seq arc CK --> Q3
      (negedge CK => (Q3 : D0))  = (1.0,1.0);
      
      if(SE===1'b0 && SI===1'b0)
      // seq arc CK --> Q3
      (negedge CK => (Q3 : D0))  = (1.0,1.0);
      
      if(D3===1'b1 && SE===1'b0 && SI===1'b1 || D3===1'b0 && SE===1'b1 && SI===1'b0)
      // seq arc CK --> Q3
      (negedge CK => (Q3 : D0))  = (1.0,1.0);
      
      if(D3===1'b1 && SE===1'b1)
      // seq arc CK --> Q3
      (negedge CK => (Q3 : SI))  = (1.0,1.0);
      
      ifnone
      // seq arc CK --> Q3
      (negedge CK => (Q3 : SE))  = (1.0,1.0);
      
      if(D0===1'b0 && SI===1'b1)
      // seq arc CK --> QN0
      (negedge CK => (QN0 : SE))  = (1.0,1.0);
      
      if(SE===1'b0 && SI===1'b0)
      // seq arc CK --> QN0
      (negedge CK => (QN0 : D0))  = (1.0,1.0);
      
      if(D0===1'b1 && SE===1'b0 && SI===1'b1 || D0===1'b0 && SE===1'b1 && SI===1'b0)
      // seq arc CK --> QN0
      (negedge CK => (QN0 : D0))  = (1.0,1.0);
      
      if(D0===1'b1 && SE===1'b1)
      // seq arc CK --> QN0
      (negedge CK => (QN0 : SI))  = (1.0,1.0);
      
      ifnone
      // seq arc CK --> QN0
      (negedge CK => (QN0 : SE))  = (1.0,1.0);
      
      if(D1===1'b0 && SI===1'b1)
      // seq arc CK --> QN1
      (negedge CK => (QN1 : D0))  = (1.0,1.0);
      
      if(SE===1'b0 && SI===1'b0)
      // seq arc CK --> QN1
      (negedge CK => (QN1 : D0))  = (1.0,1.0);
      
      if(D1===1'b1 && SE===1'b0 && SI===1'b1 || D1===1'b0 && SE===1'b1 && SI===1'b0)
      // seq arc CK --> QN1
      (negedge CK => (QN1 : D0))  = (1.0,1.0);
      
      if(D1===1'b1 && SE===1'b1)
      // seq arc CK --> QN1
      (negedge CK => (QN1 : SI))  = (1.0,1.0);
      
      ifnone
      // seq arc CK --> QN1
      (negedge CK => (QN1 : SE))  = (1.0,1.0);
      
      if(D2===1'b0 && SI===1'b1)
      // seq arc CK --> QN2
      (negedge CK => (QN2 : D0))  = (1.0,1.0);
      
      if(SE===1'b0 && SI===1'b0)
      // seq arc CK --> QN2
      (negedge CK => (QN2 : D0))  = (1.0,1.0);
      
      if(D2===1'b1 && SE===1'b0 && SI===1'b1 || D2===1'b0 && SE===1'b1 && SI===1'b0)
      // seq arc CK --> QN2
      (negedge CK => (QN2 : D0))  = (1.0,1.0);
      
      if(D2===1'b1 && SE===1'b1)
      // seq arc CK --> QN2
      (negedge CK => (QN2 : SI))  = (1.0,1.0);
      
      ifnone
      // seq arc CK --> QN2
      (negedge CK => (QN2 : SE))  = (1.0,1.0);
      
      if(D3===1'b0 && SI===1'b1)
      // seq arc CK --> QN3
      (negedge CK => (QN3 : D0))  = (1.0,1.0);
      
      if(SE===1'b0 && SI===1'b0)
      // seq arc CK --> QN3
      (negedge CK => (QN3 : D0))  = (1.0,1.0);
      
      if(D3===1'b1 && SE===1'b0 && SI===1'b1 || D3===1'b0 && SE===1'b1 && SI===1'b0)
      // seq arc CK --> QN3
      (negedge CK => (QN3 : D0))  = (1.0,1.0);
      
      if(D3===1'b1 && SE===1'b1)
      // seq arc CK --> QN3
      (negedge CK => (QN3 : SI))  = (1.0,1.0);
      
      ifnone
      // seq arc CK --> QN3
      (negedge CK => (QN3 : SE))  = (1.0,1.0);
      
      $width(negedge CK &&& (ENABLE_NOT_D3_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D3_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D3_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D3_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D3_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D3_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D3_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D3_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D3_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D3_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D3_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D3_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D3_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D3_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D3_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D3_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      // hold SE-HL CK-HL
      $hold(negedge CK &&& (ENABLE_NOT_D3_AND_SI === 1'b1),
      negedge SE &&& (ENABLE_NOT_D3_AND_SI === 1'b1),1.0);
      
      // hold SE-LH CK-HL
      $hold(negedge CK &&& (ENABLE_NOT_D3_AND_SI === 1'b1),
      posedge SE &&& (ENABLE_NOT_D3_AND_SI === 1'b1),1.0);
      
      // setup SE-HL CK-HL
      $setup(negedge SE &&& (ENABLE_NOT_D3_AND_SI === 1'b1),
      negedge CK &&& (ENABLE_NOT_D3_AND_SI === 1'b1),1.0);
      
      // setup SE-LH CK-HL
      $setup(posedge SE &&& (ENABLE_NOT_D3_AND_SI === 1'b1),
      negedge CK &&& (ENABLE_NOT_D3_AND_SI === 1'b1),1.0);
      
      // hold SE-HL CK-HL
      $hold(negedge CK &&& (ENABLE_D3_AND_NOT_SI === 1'b1),
      negedge SE &&& (ENABLE_D3_AND_NOT_SI === 1'b1),1.0);
      
      // hold SE-LH CK-HL
      $hold(negedge CK &&& (ENABLE_D3_AND_NOT_SI === 1'b1),
      posedge SE &&& (ENABLE_D3_AND_NOT_SI === 1'b1),1.0);
      
      // setup SE-HL CK-HL
      $setup(negedge SE &&& (ENABLE_D3_AND_NOT_SI === 1'b1),
      negedge CK &&& (ENABLE_D3_AND_NOT_SI === 1'b1),1.0);
      
      // setup SE-LH CK-HL
      $setup(posedge SE &&& (ENABLE_D3_AND_NOT_SI === 1'b1),
      negedge CK &&& (ENABLE_D3_AND_NOT_SI === 1'b1),1.0);
      
      // hold SI-HL CK-HL
      $hold(negedge CK &&& (ENABLE_NOT_D3_AND_SE === 1'b1),
      negedge SI &&& (ENABLE_NOT_D3_AND_SE === 1'b1),1.0);
      
      // hold SI-LH CK-HL
      $hold(negedge CK &&& (ENABLE_NOT_D3_AND_SE === 1'b1),
      posedge SI &&& (ENABLE_NOT_D3_AND_SE === 1'b1),1.0);
      
      // setup SI-HL CK-HL
      $setup(negedge SI &&& (ENABLE_NOT_D3_AND_SE === 1'b1),
      negedge CK &&& (ENABLE_NOT_D3_AND_SE === 1'b1),1.0);
      
      // setup SI-LH CK-HL
      $setup(posedge SI &&& (ENABLE_NOT_D3_AND_SE === 1'b1),
      negedge CK &&& (ENABLE_NOT_D3_AND_SE === 1'b1),1.0);
      
      // hold SI-HL CK-HL
      $hold(negedge CK &&& (ENABLE_D3_AND_SE === 1'b1),
      negedge SI &&& (ENABLE_D3_AND_SE === 1'b1),1.0);
      
      // hold SI-LH CK-HL
      $hold(negedge CK &&& (ENABLE_D3_AND_SE === 1'b1),
      posedge SI &&& (ENABLE_D3_AND_SE === 1'b1),1.0);
      
      // setup SI-HL CK-HL
      $setup(negedge SI &&& (ENABLE_D3_AND_SE === 1'b1),
      negedge CK &&& (ENABLE_D3_AND_SE === 1'b1),1.0);
      
      // setup SI-LH CK-HL
      $setup(posedge SI &&& (ENABLE_D3_AND_SE === 1'b1),
      negedge CK &&& (ENABLE_D3_AND_SE === 1'b1),1.0);
      
      // hold D0-HL CK-HL
      $hold(negedge CK &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),
      negedge D0 &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold D0-LH CK-HL
      $hold(negedge CK &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),
      posedge D0 &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup D0-HL CK-HL
      $setup(negedge D0 &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),
      negedge CK &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup D0-LH CK-HL
      $setup(posedge D0 &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),
      negedge CK &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold D0-HL CK-HL
      $hold(negedge CK &&& (ENABLE_NOT_SE_AND_SI === 1'b1),
      negedge D0 &&& (ENABLE_NOT_SE_AND_SI === 1'b1),1.0);
      
      // hold D0-LH CK-HL
      $hold(negedge CK &&& (ENABLE_NOT_SE_AND_SI === 1'b1),
      posedge D0 &&& (ENABLE_NOT_SE_AND_SI === 1'b1),1.0);
      
      // setup D0-HL CK-HL
      $setup(negedge D0 &&& (ENABLE_NOT_SE_AND_SI === 1'b1),
      negedge CK &&& (ENABLE_NOT_SE_AND_SI === 1'b1),1.0);
      
      // setup D0-LH CK-HL
      $setup(posedge D0 &&& (ENABLE_NOT_SE_AND_SI === 1'b1),
      negedge CK &&& (ENABLE_NOT_SE_AND_SI === 1'b1),1.0);
      
      // hold D1-HL CK-HL
      $hold(negedge CK &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),
      negedge D1 &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold D1-LH CK-HL
      $hold(negedge CK &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),
      posedge D1 &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup D1-HL CK-HL
      $setup(negedge D1 &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),
      negedge CK &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup D1-LH CK-HL
      $setup(posedge D1 &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),
      negedge CK &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold D1-HL CK-HL
      $hold(negedge CK &&& (ENABLE_NOT_SE_AND_SI === 1'b1),
      negedge D1 &&& (ENABLE_NOT_SE_AND_SI === 1'b1),1.0);
      
      // hold D1-LH CK-HL
      $hold(negedge CK &&& (ENABLE_NOT_SE_AND_SI === 1'b1),
      posedge D1 &&& (ENABLE_NOT_SE_AND_SI === 1'b1),1.0);
      
      // setup D1-HL CK-HL
      $setup(negedge D1 &&& (ENABLE_NOT_SE_AND_SI === 1'b1),
      negedge CK &&& (ENABLE_NOT_SE_AND_SI === 1'b1),1.0);
      
      // setup D1-LH CK-HL
      $setup(posedge D1 &&& (ENABLE_NOT_SE_AND_SI === 1'b1),
      negedge CK &&& (ENABLE_NOT_SE_AND_SI === 1'b1),1.0);
      
      // hold D2-HL CK-HL
      $hold(negedge CK &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),
      negedge D2 &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold D2-LH CK-HL
      $hold(negedge CK &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),
      posedge D2 &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup D2-HL CK-HL
      $setup(negedge D2 &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),
      negedge CK &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup D2-LH CK-HL
      $setup(posedge D2 &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),
      negedge CK &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold D2-HL CK-HL
      $hold(negedge CK &&& (ENABLE_NOT_SE_AND_SI === 1'b1),
      negedge D2 &&& (ENABLE_NOT_SE_AND_SI === 1'b1),1.0);
      
      // hold D2-LH CK-HL
      $hold(negedge CK &&& (ENABLE_NOT_SE_AND_SI === 1'b1),
      posedge D2 &&& (ENABLE_NOT_SE_AND_SI === 1'b1),1.0);
      
      // setup D2-HL CK-HL
      $setup(negedge D2 &&& (ENABLE_NOT_SE_AND_SI === 1'b1),
      negedge CK &&& (ENABLE_NOT_SE_AND_SI === 1'b1),1.0);
      
      // setup D2-LH CK-HL
      $setup(posedge D2 &&& (ENABLE_NOT_SE_AND_SI === 1'b1),
      negedge CK &&& (ENABLE_NOT_SE_AND_SI === 1'b1),1.0);
      
      // hold D3-HL CK-HL
      $hold(negedge CK &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),
      negedge D3 &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold D3-LH CK-HL
      $hold(negedge CK &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),
      posedge D3 &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup D3-HL CK-HL
      $setup(negedge D3 &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),
      negedge CK &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup D3-LH CK-HL
      $setup(posedge D3 &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),
      negedge CK &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold D3-HL CK-HL
      $hold(negedge CK &&& (ENABLE_NOT_SE_AND_SI === 1'b1),
      negedge D3 &&& (ENABLE_NOT_SE_AND_SI === 1'b1),1.0);
      
      // hold D3-LH CK-HL
      $hold(negedge CK &&& (ENABLE_NOT_SE_AND_SI === 1'b1),
      posedge D3 &&& (ENABLE_NOT_SE_AND_SI === 1'b1),1.0);
      
      // setup D3-HL CK-HL
      $setup(negedge D3 &&& (ENABLE_NOT_SE_AND_SI === 1'b1),
      negedge CK &&& (ENABLE_NOT_SE_AND_SI === 1'b1),1.0);
      
      // setup D3-LH CK-HL
      $setup(posedge D3 &&& (ENABLE_NOT_SE_AND_SI === 1'b1),
      negedge CK &&& (ENABLE_NOT_SE_AND_SI === 1'b1),1.0);
      
      // mpw CK_lh 
      $width(posedge CK,1.0,0);
      
      // mpw CK_hl 
      $width(negedge CK,1.0,0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine
`celldefine
module SAEDRVT14_FSDN4_V2_0P5( CK, SI, SE, D0, D1, D2, D3, Q0, Q1, Q2, Q3, QN0, QN1, QN2, QN3 );
input CK, SE, SI;
input D0, D1, D2, D3;
output Q0, Q1, Q2, Q3, QN0, QN1, QN2, QN3;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_FSDN4_V2_0P5_func SAEDRVT14_FSDN4_V2_0P5_behav_inst(.CK(CK),.SI(SI),.SE(SE),.D0(D0),.D1(D1),.D2(D2),.D3(D3),.Q0(Q0),.Q1(Q1),.Q2(Q2),.Q3(Q3),.QN0(QN0),.QN1(QN1),.QN2(QN2),.QN3(QN3));
`else
   SAEDRVT14_FSDN4_V2_0P5_func SAEDRVT14_FSDN4_V2_0P5_inst(.CK(CK),.SI(SI),.SE(SE),.D0(D0),.D1(D1),.D2(D2),.D3(D3),.Q0(Q0),.Q1(Q1),.Q2(Q2),.Q3(Q3),.QN0(QN0),.QN1(QN1),.QN2(QN2),.QN3(QN3));
   // spec_gates_begin
   not MGM_G0(MGM_W0,D3);
   not MGM_G1(MGM_W1,SE);
   and MGM_G2(MGM_W2,MGM_W1,MGM_W0);
   not MGM_G3(MGM_W3,SI);
   and MGM_G4(ENABLE_NOT_D3_AND_NOT_SE_AND_NOT_SI,MGM_W3,MGM_W2);
   not MGM_G5(MGM_W4,D3);
   not MGM_G6(MGM_W5,SE);
   and MGM_G7(MGM_W6,MGM_W5,MGM_W4);
   and MGM_G8(ENABLE_NOT_D3_AND_NOT_SE_AND_SI,SI,MGM_W6);
   not MGM_G9(MGM_W7,D3);
   and MGM_G10(MGM_W8,SE,MGM_W7);
   not MGM_G11(MGM_W9,SI);
   and MGM_G12(ENABLE_NOT_D3_AND_SE_AND_NOT_SI,MGM_W9,MGM_W8);
   not MGM_G13(MGM_W10,D3);
   and MGM_G14(MGM_W11,SE,MGM_W10);
   and MGM_G15(ENABLE_NOT_D3_AND_SE_AND_SI,SI,MGM_W11);
   not MGM_G16(MGM_W12,SE);
   and MGM_G17(MGM_W13,MGM_W12,D3);
   not MGM_G18(MGM_W14,SI);
   and MGM_G19(ENABLE_D3_AND_NOT_SE_AND_NOT_SI,MGM_W14,MGM_W13);
   not MGM_G20(MGM_W15,SE);
   and MGM_G21(MGM_W16,MGM_W15,D3);
   and MGM_G22(ENABLE_D3_AND_NOT_SE_AND_SI,SI,MGM_W16);
   and MGM_G23(MGM_W17,SE,D3);
   not MGM_G24(MGM_W18,SI);
   and MGM_G25(ENABLE_D3_AND_SE_AND_NOT_SI,MGM_W18,MGM_W17);
   and MGM_G26(MGM_W19,SE,D3);
   and MGM_G27(ENABLE_D3_AND_SE_AND_SI,SI,MGM_W19);
   not MGM_G28(MGM_W20,D3);
   and MGM_G29(ENABLE_NOT_D3_AND_SI,SI,MGM_W20);
   not MGM_G30(MGM_W21,SI);
   and MGM_G31(ENABLE_D3_AND_NOT_SI,MGM_W21,D3);
   not MGM_G32(MGM_W22,D3);
   and MGM_G33(ENABLE_NOT_D3_AND_SE,SE,MGM_W22);
   and MGM_G34(ENABLE_D3_AND_SE,SE,D3);
   not MGM_G35(MGM_W23,SE);
   not MGM_G36(MGM_W24,SI);
   and MGM_G37(ENABLE_NOT_SE_AND_NOT_SI,MGM_W24,MGM_W23);
   not MGM_G38(MGM_W25,SE);
   and MGM_G39(ENABLE_NOT_SE_AND_SI,SI,MGM_W25);
   // spec_gates_end
   // specify_block_begin
   specify

      if(D0===1'b0 && SI===1'b1)
      // seq arc CK --> Q0
      (negedge CK => (Q0 : SE))  = (1.0,1.0);
      
      if(SE===1'b0 && SI===1'b0)
      // seq arc CK --> Q0
      (negedge CK => (Q0 : D0))  = (1.0,1.0);
      
      if(D0===1'b1 && SE===1'b0 && SI===1'b1 || D0===1'b0 && SE===1'b1 && SI===1'b0)
      // seq arc CK --> Q0
      (negedge CK => (Q0 : D0))  = (1.0,1.0);
      
      if(D0===1'b1 && SE===1'b1)
      // seq arc CK --> Q0
      (negedge CK => (Q0 : SI))  = (1.0,1.0);
      
      ifnone
      // seq arc CK --> Q0
      (negedge CK => (Q0 : SE))  = (1.0,1.0);
      
      if(D1===1'b0 && SI===1'b1)
      // seq arc CK --> Q1
      (negedge CK => (Q1 : D0))  = (1.0,1.0);
      
      if(SE===1'b0 && SI===1'b0)
      // seq arc CK --> Q1
      (negedge CK => (Q1 : D0))  = (1.0,1.0);
      
      if(D1===1'b1 && SE===1'b0 && SI===1'b1 || D1===1'b0 && SE===1'b1 && SI===1'b0)
      // seq arc CK --> Q1
      (negedge CK => (Q1 : D0))  = (1.0,1.0);
      
      if(D1===1'b1 && SE===1'b1)
      // seq arc CK --> Q1
      (negedge CK => (Q1 : SI))  = (1.0,1.0);
      
      ifnone
      // seq arc CK --> Q1
      (negedge CK => (Q1 : SE))  = (1.0,1.0);
      
      if(D2===1'b0 && SI===1'b1)
      // seq arc CK --> Q2
      (negedge CK => (Q2 : D0))  = (1.0,1.0);
      
      if(SE===1'b0 && SI===1'b0)
      // seq arc CK --> Q2
      (negedge CK => (Q2 : D0))  = (1.0,1.0);
      
      if(D2===1'b1 && SE===1'b0 && SI===1'b1 || D2===1'b0 && SE===1'b1 && SI===1'b0)
      // seq arc CK --> Q2
      (negedge CK => (Q2 : D0))  = (1.0,1.0);
      
      if(D2===1'b1 && SE===1'b1)
      // seq arc CK --> Q2
      (negedge CK => (Q2 : SI))  = (1.0,1.0);
      
      ifnone
      // seq arc CK --> Q2
      (negedge CK => (Q2 : SE))  = (1.0,1.0);
      
      if(D3===1'b0 && SI===1'b1)
      // seq arc CK --> Q3
      (negedge CK => (Q3 : D0))  = (1.0,1.0);
      
      if(SE===1'b0 && SI===1'b0)
      // seq arc CK --> Q3
      (negedge CK => (Q3 : D0))  = (1.0,1.0);
      
      if(D3===1'b1 && SE===1'b0 && SI===1'b1 || D3===1'b0 && SE===1'b1 && SI===1'b0)
      // seq arc CK --> Q3
      (negedge CK => (Q3 : D0))  = (1.0,1.0);
      
      if(D3===1'b1 && SE===1'b1)
      // seq arc CK --> Q3
      (negedge CK => (Q3 : SI))  = (1.0,1.0);
      
      ifnone
      // seq arc CK --> Q3
      (negedge CK => (Q3 : SE))  = (1.0,1.0);
      
      if(D0===1'b0 && SI===1'b1)
      // seq arc CK --> QN0
      (negedge CK => (QN0 : SE))  = (1.0,1.0);
      
      if(SE===1'b0 && SI===1'b0)
      // seq arc CK --> QN0
      (negedge CK => (QN0 : D0))  = (1.0,1.0);
      
      if(D0===1'b1 && SE===1'b0 && SI===1'b1 || D0===1'b0 && SE===1'b1 && SI===1'b0)
      // seq arc CK --> QN0
      (negedge CK => (QN0 : D0))  = (1.0,1.0);
      
      if(D0===1'b1 && SE===1'b1)
      // seq arc CK --> QN0
      (negedge CK => (QN0 : SI))  = (1.0,1.0);
      
      ifnone
      // seq arc CK --> QN0
      (negedge CK => (QN0 : SE))  = (1.0,1.0);
      
      if(D1===1'b0 && SI===1'b1)
      // seq arc CK --> QN1
      (negedge CK => (QN1 : D0))  = (1.0,1.0);
      
      if(SE===1'b0 && SI===1'b0)
      // seq arc CK --> QN1
      (negedge CK => (QN1 : D0))  = (1.0,1.0);
      
      if(D1===1'b1 && SE===1'b0 && SI===1'b1 || D1===1'b0 && SE===1'b1 && SI===1'b0)
      // seq arc CK --> QN1
      (negedge CK => (QN1 : D0))  = (1.0,1.0);
      
      if(D1===1'b1 && SE===1'b1)
      // seq arc CK --> QN1
      (negedge CK => (QN1 : SI))  = (1.0,1.0);
      
      ifnone
      // seq arc CK --> QN1
      (negedge CK => (QN1 : SE))  = (1.0,1.0);
      
      if(D2===1'b0 && SI===1'b1)
      // seq arc CK --> QN2
      (negedge CK => (QN2 : D0))  = (1.0,1.0);
      
      if(SE===1'b0 && SI===1'b0)
      // seq arc CK --> QN2
      (negedge CK => (QN2 : D0))  = (1.0,1.0);
      
      if(D2===1'b1 && SE===1'b0 && SI===1'b1 || D2===1'b0 && SE===1'b1 && SI===1'b0)
      // seq arc CK --> QN2
      (negedge CK => (QN2 : D0))  = (1.0,1.0);
      
      if(D2===1'b1 && SE===1'b1)
      // seq arc CK --> QN2
      (negedge CK => (QN2 : SI))  = (1.0,1.0);
      
      ifnone
      // seq arc CK --> QN2
      (negedge CK => (QN2 : SE))  = (1.0,1.0);
      
      if(D3===1'b0 && SI===1'b1)
      // seq arc CK --> QN3
      (negedge CK => (QN3 : D0))  = (1.0,1.0);
      
      if(SE===1'b0 && SI===1'b0)
      // seq arc CK --> QN3
      (negedge CK => (QN3 : D0))  = (1.0,1.0);
      
      if(D3===1'b1 && SE===1'b0 && SI===1'b1 || D3===1'b0 && SE===1'b1 && SI===1'b0)
      // seq arc CK --> QN3
      (negedge CK => (QN3 : D0))  = (1.0,1.0);
      
      if(D3===1'b1 && SE===1'b1)
      // seq arc CK --> QN3
      (negedge CK => (QN3 : SI))  = (1.0,1.0);
      
      ifnone
      // seq arc CK --> QN3
      (negedge CK => (QN3 : SE))  = (1.0,1.0);
      
      $width(negedge CK &&& (ENABLE_NOT_D3_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D3_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D3_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D3_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D3_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D3_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D3_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D3_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D3_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D3_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D3_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D3_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D3_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D3_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D3_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D3_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      // hold SE-HL CK-HL
      $hold(negedge CK &&& (ENABLE_NOT_D3_AND_SI === 1'b1),
      negedge SE &&& (ENABLE_NOT_D3_AND_SI === 1'b1),1.0);
      
      // hold SE-LH CK-HL
      $hold(negedge CK &&& (ENABLE_NOT_D3_AND_SI === 1'b1),
      posedge SE &&& (ENABLE_NOT_D3_AND_SI === 1'b1),1.0);
      
      // setup SE-HL CK-HL
      $setup(negedge SE &&& (ENABLE_NOT_D3_AND_SI === 1'b1),
      negedge CK &&& (ENABLE_NOT_D3_AND_SI === 1'b1),1.0);
      
      // setup SE-LH CK-HL
      $setup(posedge SE &&& (ENABLE_NOT_D3_AND_SI === 1'b1),
      negedge CK &&& (ENABLE_NOT_D3_AND_SI === 1'b1),1.0);
      
      // hold SE-HL CK-HL
      $hold(negedge CK &&& (ENABLE_D3_AND_NOT_SI === 1'b1),
      negedge SE &&& (ENABLE_D3_AND_NOT_SI === 1'b1),1.0);
      
      // hold SE-LH CK-HL
      $hold(negedge CK &&& (ENABLE_D3_AND_NOT_SI === 1'b1),
      posedge SE &&& (ENABLE_D3_AND_NOT_SI === 1'b1),1.0);
      
      // setup SE-HL CK-HL
      $setup(negedge SE &&& (ENABLE_D3_AND_NOT_SI === 1'b1),
      negedge CK &&& (ENABLE_D3_AND_NOT_SI === 1'b1),1.0);
      
      // setup SE-LH CK-HL
      $setup(posedge SE &&& (ENABLE_D3_AND_NOT_SI === 1'b1),
      negedge CK &&& (ENABLE_D3_AND_NOT_SI === 1'b1),1.0);
      
      // hold SI-HL CK-HL
      $hold(negedge CK &&& (ENABLE_NOT_D3_AND_SE === 1'b1),
      negedge SI &&& (ENABLE_NOT_D3_AND_SE === 1'b1),1.0);
      
      // hold SI-LH CK-HL
      $hold(negedge CK &&& (ENABLE_NOT_D3_AND_SE === 1'b1),
      posedge SI &&& (ENABLE_NOT_D3_AND_SE === 1'b1),1.0);
      
      // setup SI-HL CK-HL
      $setup(negedge SI &&& (ENABLE_NOT_D3_AND_SE === 1'b1),
      negedge CK &&& (ENABLE_NOT_D3_AND_SE === 1'b1),1.0);
      
      // setup SI-LH CK-HL
      $setup(posedge SI &&& (ENABLE_NOT_D3_AND_SE === 1'b1),
      negedge CK &&& (ENABLE_NOT_D3_AND_SE === 1'b1),1.0);
      
      // hold SI-HL CK-HL
      $hold(negedge CK &&& (ENABLE_D3_AND_SE === 1'b1),
      negedge SI &&& (ENABLE_D3_AND_SE === 1'b1),1.0);
      
      // hold SI-LH CK-HL
      $hold(negedge CK &&& (ENABLE_D3_AND_SE === 1'b1),
      posedge SI &&& (ENABLE_D3_AND_SE === 1'b1),1.0);
      
      // setup SI-HL CK-HL
      $setup(negedge SI &&& (ENABLE_D3_AND_SE === 1'b1),
      negedge CK &&& (ENABLE_D3_AND_SE === 1'b1),1.0);
      
      // setup SI-LH CK-HL
      $setup(posedge SI &&& (ENABLE_D3_AND_SE === 1'b1),
      negedge CK &&& (ENABLE_D3_AND_SE === 1'b1),1.0);
      
      // hold D0-HL CK-HL
      $hold(negedge CK &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),
      negedge D0 &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold D0-LH CK-HL
      $hold(negedge CK &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),
      posedge D0 &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup D0-HL CK-HL
      $setup(negedge D0 &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),
      negedge CK &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup D0-LH CK-HL
      $setup(posedge D0 &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),
      negedge CK &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold D0-HL CK-HL
      $hold(negedge CK &&& (ENABLE_NOT_SE_AND_SI === 1'b1),
      negedge D0 &&& (ENABLE_NOT_SE_AND_SI === 1'b1),1.0);
      
      // hold D0-LH CK-HL
      $hold(negedge CK &&& (ENABLE_NOT_SE_AND_SI === 1'b1),
      posedge D0 &&& (ENABLE_NOT_SE_AND_SI === 1'b1),1.0);
      
      // setup D0-HL CK-HL
      $setup(negedge D0 &&& (ENABLE_NOT_SE_AND_SI === 1'b1),
      negedge CK &&& (ENABLE_NOT_SE_AND_SI === 1'b1),1.0);
      
      // setup D0-LH CK-HL
      $setup(posedge D0 &&& (ENABLE_NOT_SE_AND_SI === 1'b1),
      negedge CK &&& (ENABLE_NOT_SE_AND_SI === 1'b1),1.0);
      
      // hold D1-HL CK-HL
      $hold(negedge CK &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),
      negedge D1 &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold D1-LH CK-HL
      $hold(negedge CK &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),
      posedge D1 &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup D1-HL CK-HL
      $setup(negedge D1 &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),
      negedge CK &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup D1-LH CK-HL
      $setup(posedge D1 &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),
      negedge CK &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold D1-HL CK-HL
      $hold(negedge CK &&& (ENABLE_NOT_SE_AND_SI === 1'b1),
      negedge D1 &&& (ENABLE_NOT_SE_AND_SI === 1'b1),1.0);
      
      // hold D1-LH CK-HL
      $hold(negedge CK &&& (ENABLE_NOT_SE_AND_SI === 1'b1),
      posedge D1 &&& (ENABLE_NOT_SE_AND_SI === 1'b1),1.0);
      
      // setup D1-HL CK-HL
      $setup(negedge D1 &&& (ENABLE_NOT_SE_AND_SI === 1'b1),
      negedge CK &&& (ENABLE_NOT_SE_AND_SI === 1'b1),1.0);
      
      // setup D1-LH CK-HL
      $setup(posedge D1 &&& (ENABLE_NOT_SE_AND_SI === 1'b1),
      negedge CK &&& (ENABLE_NOT_SE_AND_SI === 1'b1),1.0);
      
      // hold D2-HL CK-HL
      $hold(negedge CK &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),
      negedge D2 &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold D2-LH CK-HL
      $hold(negedge CK &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),
      posedge D2 &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup D2-HL CK-HL
      $setup(negedge D2 &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),
      negedge CK &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup D2-LH CK-HL
      $setup(posedge D2 &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),
      negedge CK &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold D2-HL CK-HL
      $hold(negedge CK &&& (ENABLE_NOT_SE_AND_SI === 1'b1),
      negedge D2 &&& (ENABLE_NOT_SE_AND_SI === 1'b1),1.0);
      
      // hold D2-LH CK-HL
      $hold(negedge CK &&& (ENABLE_NOT_SE_AND_SI === 1'b1),
      posedge D2 &&& (ENABLE_NOT_SE_AND_SI === 1'b1),1.0);
      
      // setup D2-HL CK-HL
      $setup(negedge D2 &&& (ENABLE_NOT_SE_AND_SI === 1'b1),
      negedge CK &&& (ENABLE_NOT_SE_AND_SI === 1'b1),1.0);
      
      // setup D2-LH CK-HL
      $setup(posedge D2 &&& (ENABLE_NOT_SE_AND_SI === 1'b1),
      negedge CK &&& (ENABLE_NOT_SE_AND_SI === 1'b1),1.0);
      
      // hold D3-HL CK-HL
      $hold(negedge CK &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),
      negedge D3 &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold D3-LH CK-HL
      $hold(negedge CK &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),
      posedge D3 &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup D3-HL CK-HL
      $setup(negedge D3 &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),
      negedge CK &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup D3-LH CK-HL
      $setup(posedge D3 &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),
      negedge CK &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold D3-HL CK-HL
      $hold(negedge CK &&& (ENABLE_NOT_SE_AND_SI === 1'b1),
      negedge D3 &&& (ENABLE_NOT_SE_AND_SI === 1'b1),1.0);
      
      // hold D3-LH CK-HL
      $hold(negedge CK &&& (ENABLE_NOT_SE_AND_SI === 1'b1),
      posedge D3 &&& (ENABLE_NOT_SE_AND_SI === 1'b1),1.0);
      
      // setup D3-HL CK-HL
      $setup(negedge D3 &&& (ENABLE_NOT_SE_AND_SI === 1'b1),
      negedge CK &&& (ENABLE_NOT_SE_AND_SI === 1'b1),1.0);
      
      // setup D3-LH CK-HL
      $setup(posedge D3 &&& (ENABLE_NOT_SE_AND_SI === 1'b1),
      negedge CK &&& (ENABLE_NOT_SE_AND_SI === 1'b1),1.0);
      
      // mpw CK_lh 
      $width(posedge CK,1.0,0);
      
      // mpw CK_hl 
      $width(negedge CK,1.0,0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine

`celldefine
module SAEDRVT14_FSDN4_V2_2( CK, SI, SE, D0, D1, D2, D3, Q0, Q1, Q2, Q3, QN0, QN1, QN2, QN3 );
input CK, SE, SI;
input D0, D1, D2, D3;
output Q0, Q1, Q2, Q3, QN0, QN1, QN2, QN3;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_FSDN4_V2_2_func SAEDRVT14_FSDN4_V2_2_behav_inst(.CK(CK),.SI(SI),.SE(SE),.D0(D0),.D1(D1),.D2(D2),.D3(D3),.Q0(Q0),.Q1(Q1),.Q2(Q2),.Q3(Q3),.QN0(QN0),.QN1(QN1),.QN2(QN2),.QN3(QN3));
`else
   SAEDRVT14_FSDN4_V2_2_func SAEDRVT14_FSDN4_V2_2_inst(.CK(CK),.SI(SI),.SE(SE),.D0(D0),.D1(D1),.D2(D2),.D3(D3),.Q0(Q0),.Q1(Q1),.Q2(Q2),.Q3(Q3),.QN0(QN0),.QN1(QN1),.QN2(QN2),.QN3(QN3));
   // spec_gates_begin
   not MGM_G0(MGM_W0,D3);
   not MGM_G1(MGM_W1,SE);
   and MGM_G2(MGM_W2,MGM_W1,MGM_W0);
   not MGM_G3(MGM_W3,SI);
   and MGM_G4(ENABLE_NOT_D3_AND_NOT_SE_AND_NOT_SI,MGM_W3,MGM_W2);
   not MGM_G5(MGM_W4,D3);
   not MGM_G6(MGM_W5,SE);
   and MGM_G7(MGM_W6,MGM_W5,MGM_W4);
   and MGM_G8(ENABLE_NOT_D3_AND_NOT_SE_AND_SI,SI,MGM_W6);
   not MGM_G9(MGM_W7,D3);
   and MGM_G10(MGM_W8,SE,MGM_W7);
   not MGM_G11(MGM_W9,SI);
   and MGM_G12(ENABLE_NOT_D3_AND_SE_AND_NOT_SI,MGM_W9,MGM_W8);
   not MGM_G13(MGM_W10,D3);
   and MGM_G14(MGM_W11,SE,MGM_W10);
   and MGM_G15(ENABLE_NOT_D3_AND_SE_AND_SI,SI,MGM_W11);
   not MGM_G16(MGM_W12,SE);
   and MGM_G17(MGM_W13,MGM_W12,D3);
   not MGM_G18(MGM_W14,SI);
   and MGM_G19(ENABLE_D3_AND_NOT_SE_AND_NOT_SI,MGM_W14,MGM_W13);
   not MGM_G20(MGM_W15,SE);
   and MGM_G21(MGM_W16,MGM_W15,D3);
   and MGM_G22(ENABLE_D3_AND_NOT_SE_AND_SI,SI,MGM_W16);
   and MGM_G23(MGM_W17,SE,D3);
   not MGM_G24(MGM_W18,SI);
   and MGM_G25(ENABLE_D3_AND_SE_AND_NOT_SI,MGM_W18,MGM_W17);
   and MGM_G26(MGM_W19,SE,D3);
   and MGM_G27(ENABLE_D3_AND_SE_AND_SI,SI,MGM_W19);
   not MGM_G28(MGM_W20,D3);
   and MGM_G29(ENABLE_NOT_D3_AND_SI,SI,MGM_W20);
   not MGM_G30(MGM_W21,SI);
   and MGM_G31(ENABLE_D3_AND_NOT_SI,MGM_W21,D3);
   not MGM_G32(MGM_W22,D3);
   and MGM_G33(ENABLE_NOT_D3_AND_SE,SE,MGM_W22);
   and MGM_G34(ENABLE_D3_AND_SE,SE,D3);
   not MGM_G35(MGM_W23,SE);
   not MGM_G36(MGM_W24,SI);
   and MGM_G37(ENABLE_NOT_SE_AND_NOT_SI,MGM_W24,MGM_W23);
   not MGM_G38(MGM_W25,SE);
   and MGM_G39(ENABLE_NOT_SE_AND_SI,SI,MGM_W25);
   // spec_gates_end
   // specify_block_begin
   specify

      if(D0===1'b0 && SI===1'b1)
      // seq arc CK --> Q0
      (negedge CK => (Q0 : SE))  = (1.0,1.0);
      
      if(SE===1'b0 && SI===1'b0)
      // seq arc CK --> Q0
      (negedge CK => (Q0 : D0))  = (1.0,1.0);
      
      if(D0===1'b1 && SE===1'b0 && SI===1'b1 || D0===1'b0 && SE===1'b1 && SI===1'b0)
      // seq arc CK --> Q0
      (negedge CK => (Q0 : D0))  = (1.0,1.0);
      
      if(D0===1'b1 && SE===1'b1)
      // seq arc CK --> Q0
      (negedge CK => (Q0 : SI))  = (1.0,1.0);
      
      ifnone
      // seq arc CK --> Q0
      (negedge CK => (Q0 : SE))  = (1.0,1.0);
      
      if(D1===1'b0 && SI===1'b1)
      // seq arc CK --> Q1
      (negedge CK => (Q1 : D0))  = (1.0,1.0);
      
      if(SE===1'b0 && SI===1'b0)
      // seq arc CK --> Q1
      (negedge CK => (Q1 : D0))  = (1.0,1.0);
      
      if(D1===1'b1 && SE===1'b0 && SI===1'b1 || D1===1'b0 && SE===1'b1 && SI===1'b0)
      // seq arc CK --> Q1
      (negedge CK => (Q1 : D0))  = (1.0,1.0);
      
      if(D1===1'b1 && SE===1'b1)
      // seq arc CK --> Q1
      (negedge CK => (Q1 : SI))  = (1.0,1.0);
      
      ifnone
      // seq arc CK --> Q1
      (negedge CK => (Q1 : SE))  = (1.0,1.0);
      
      if(D2===1'b0 && SI===1'b1)
      // seq arc CK --> Q2
      (negedge CK => (Q2 : D0))  = (1.0,1.0);
      
      if(SE===1'b0 && SI===1'b0)
      // seq arc CK --> Q2
      (negedge CK => (Q2 : D0))  = (1.0,1.0);
      
      if(D2===1'b1 && SE===1'b0 && SI===1'b1 || D2===1'b0 && SE===1'b1 && SI===1'b0)
      // seq arc CK --> Q2
      (negedge CK => (Q2 : D0))  = (1.0,1.0);
      
      if(D2===1'b1 && SE===1'b1)
      // seq arc CK --> Q2
      (negedge CK => (Q2 : SI))  = (1.0,1.0);
      
      ifnone
      // seq arc CK --> Q2
      (negedge CK => (Q2 : SE))  = (1.0,1.0);
      
      if(D3===1'b0 && SI===1'b1)
      // seq arc CK --> Q3
      (negedge CK => (Q3 : D0))  = (1.0,1.0);
      
      if(SE===1'b0 && SI===1'b0)
      // seq arc CK --> Q3
      (negedge CK => (Q3 : D0))  = (1.0,1.0);
      
      if(D3===1'b1 && SE===1'b0 && SI===1'b1 || D3===1'b0 && SE===1'b1 && SI===1'b0)
      // seq arc CK --> Q3
      (negedge CK => (Q3 : D0))  = (1.0,1.0);
      
      if(D3===1'b1 && SE===1'b1)
      // seq arc CK --> Q3
      (negedge CK => (Q3 : SI))  = (1.0,1.0);
      
      ifnone
      // seq arc CK --> Q3
      (negedge CK => (Q3 : SE))  = (1.0,1.0);
      
      if(D0===1'b0 && SI===1'b1)
      // seq arc CK --> QN0
      (negedge CK => (QN0 : SE))  = (1.0,1.0);
      
      if(SE===1'b0 && SI===1'b0)
      // seq arc CK --> QN0
      (negedge CK => (QN0 : D0))  = (1.0,1.0);
      
      if(D0===1'b1 && SE===1'b0 && SI===1'b1 || D0===1'b0 && SE===1'b1 && SI===1'b0)
      // seq arc CK --> QN0
      (negedge CK => (QN0 : D0))  = (1.0,1.0);
      
      if(D0===1'b1 && SE===1'b1)
      // seq arc CK --> QN0
      (negedge CK => (QN0 : SI))  = (1.0,1.0);
      
      ifnone
      // seq arc CK --> QN0
      (negedge CK => (QN0 : SE))  = (1.0,1.0);
      
      if(D1===1'b0 && SI===1'b1)
      // seq arc CK --> QN1
      (negedge CK => (QN1 : D0))  = (1.0,1.0);
      
      if(SE===1'b0 && SI===1'b0)
      // seq arc CK --> QN1
      (negedge CK => (QN1 : D0))  = (1.0,1.0);
      
      if(D1===1'b1 && SE===1'b0 && SI===1'b1 || D1===1'b0 && SE===1'b1 && SI===1'b0)
      // seq arc CK --> QN1
      (negedge CK => (QN1 : D0))  = (1.0,1.0);
      
      if(D1===1'b1 && SE===1'b1)
      // seq arc CK --> QN1
      (negedge CK => (QN1 : SI))  = (1.0,1.0);
      
      ifnone
      // seq arc CK --> QN1
      (negedge CK => (QN1 : SE))  = (1.0,1.0);
      
      if(D2===1'b0 && SI===1'b1)
      // seq arc CK --> QN2
      (negedge CK => (QN2 : D0))  = (1.0,1.0);
      
      if(SE===1'b0 && SI===1'b0)
      // seq arc CK --> QN2
      (negedge CK => (QN2 : D0))  = (1.0,1.0);
      
      if(D2===1'b1 && SE===1'b0 && SI===1'b1 || D2===1'b0 && SE===1'b1 && SI===1'b0)
      // seq arc CK --> QN2
      (negedge CK => (QN2 : D0))  = (1.0,1.0);
      
      if(D2===1'b1 && SE===1'b1)
      // seq arc CK --> QN2
      (negedge CK => (QN2 : SI))  = (1.0,1.0);
      
      ifnone
      // seq arc CK --> QN2
      (negedge CK => (QN2 : SE))  = (1.0,1.0);
      
      if(D3===1'b0 && SI===1'b1)
      // seq arc CK --> QN3
      (negedge CK => (QN3 : D0))  = (1.0,1.0);
      
      if(SE===1'b0 && SI===1'b0)
      // seq arc CK --> QN3
      (negedge CK => (QN3 : D0))  = (1.0,1.0);
      
      if(D3===1'b1 && SE===1'b0 && SI===1'b1 || D3===1'b0 && SE===1'b1 && SI===1'b0)
      // seq arc CK --> QN3
      (negedge CK => (QN3 : D0))  = (1.0,1.0);
      
      if(D3===1'b1 && SE===1'b1)
      // seq arc CK --> QN3
      (negedge CK => (QN3 : SI))  = (1.0,1.0);
      
      ifnone
      // seq arc CK --> QN3
      (negedge CK => (QN3 : SE))  = (1.0,1.0);
      
      $width(negedge CK &&& (ENABLE_NOT_D3_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D3_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D3_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D3_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D3_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D3_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D3_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D3_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D3_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D3_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D3_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D3_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D3_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D3_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D3_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D3_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      // hold SE-HL CK-HL
      $hold(negedge CK &&& (ENABLE_NOT_D3_AND_SI === 1'b1),
      negedge SE &&& (ENABLE_NOT_D3_AND_SI === 1'b1),1.0);
      
      // hold SE-LH CK-HL
      $hold(negedge CK &&& (ENABLE_NOT_D3_AND_SI === 1'b1),
      posedge SE &&& (ENABLE_NOT_D3_AND_SI === 1'b1),1.0);
      
      // setup SE-HL CK-HL
      $setup(negedge SE &&& (ENABLE_NOT_D3_AND_SI === 1'b1),
      negedge CK &&& (ENABLE_NOT_D3_AND_SI === 1'b1),1.0);
      
      // setup SE-LH CK-HL
      $setup(posedge SE &&& (ENABLE_NOT_D3_AND_SI === 1'b1),
      negedge CK &&& (ENABLE_NOT_D3_AND_SI === 1'b1),1.0);
      
      // hold SE-HL CK-HL
      $hold(negedge CK &&& (ENABLE_D3_AND_NOT_SI === 1'b1),
      negedge SE &&& (ENABLE_D3_AND_NOT_SI === 1'b1),1.0);
      
      // hold SE-LH CK-HL
      $hold(negedge CK &&& (ENABLE_D3_AND_NOT_SI === 1'b1),
      posedge SE &&& (ENABLE_D3_AND_NOT_SI === 1'b1),1.0);
      
      // setup SE-HL CK-HL
      $setup(negedge SE &&& (ENABLE_D3_AND_NOT_SI === 1'b1),
      negedge CK &&& (ENABLE_D3_AND_NOT_SI === 1'b1),1.0);
      
      // setup SE-LH CK-HL
      $setup(posedge SE &&& (ENABLE_D3_AND_NOT_SI === 1'b1),
      negedge CK &&& (ENABLE_D3_AND_NOT_SI === 1'b1),1.0);
      
      // hold SI-HL CK-HL
      $hold(negedge CK &&& (ENABLE_NOT_D3_AND_SE === 1'b1),
      negedge SI &&& (ENABLE_NOT_D3_AND_SE === 1'b1),1.0);
      
      // hold SI-LH CK-HL
      $hold(negedge CK &&& (ENABLE_NOT_D3_AND_SE === 1'b1),
      posedge SI &&& (ENABLE_NOT_D3_AND_SE === 1'b1),1.0);
      
      // setup SI-HL CK-HL
      $setup(negedge SI &&& (ENABLE_NOT_D3_AND_SE === 1'b1),
      negedge CK &&& (ENABLE_NOT_D3_AND_SE === 1'b1),1.0);
      
      // setup SI-LH CK-HL
      $setup(posedge SI &&& (ENABLE_NOT_D3_AND_SE === 1'b1),
      negedge CK &&& (ENABLE_NOT_D3_AND_SE === 1'b1),1.0);
      
      // hold SI-HL CK-HL
      $hold(negedge CK &&& (ENABLE_D3_AND_SE === 1'b1),
      negedge SI &&& (ENABLE_D3_AND_SE === 1'b1),1.0);
      
      // hold SI-LH CK-HL
      $hold(negedge CK &&& (ENABLE_D3_AND_SE === 1'b1),
      posedge SI &&& (ENABLE_D3_AND_SE === 1'b1),1.0);
      
      // setup SI-HL CK-HL
      $setup(negedge SI &&& (ENABLE_D3_AND_SE === 1'b1),
      negedge CK &&& (ENABLE_D3_AND_SE === 1'b1),1.0);
      
      // setup SI-LH CK-HL
      $setup(posedge SI &&& (ENABLE_D3_AND_SE === 1'b1),
      negedge CK &&& (ENABLE_D3_AND_SE === 1'b1),1.0);
      
      // hold D0-HL CK-HL
      $hold(negedge CK &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),
      negedge D0 &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold D0-LH CK-HL
      $hold(negedge CK &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),
      posedge D0 &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup D0-HL CK-HL
      $setup(negedge D0 &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),
      negedge CK &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup D0-LH CK-HL
      $setup(posedge D0 &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),
      negedge CK &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold D0-HL CK-HL
      $hold(negedge CK &&& (ENABLE_NOT_SE_AND_SI === 1'b1),
      negedge D0 &&& (ENABLE_NOT_SE_AND_SI === 1'b1),1.0);
      
      // hold D0-LH CK-HL
      $hold(negedge CK &&& (ENABLE_NOT_SE_AND_SI === 1'b1),
      posedge D0 &&& (ENABLE_NOT_SE_AND_SI === 1'b1),1.0);
      
      // setup D0-HL CK-HL
      $setup(negedge D0 &&& (ENABLE_NOT_SE_AND_SI === 1'b1),
      negedge CK &&& (ENABLE_NOT_SE_AND_SI === 1'b1),1.0);
      
      // setup D0-LH CK-HL
      $setup(posedge D0 &&& (ENABLE_NOT_SE_AND_SI === 1'b1),
      negedge CK &&& (ENABLE_NOT_SE_AND_SI === 1'b1),1.0);
      
      // hold D1-HL CK-HL
      $hold(negedge CK &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),
      negedge D1 &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold D1-LH CK-HL
      $hold(negedge CK &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),
      posedge D1 &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup D1-HL CK-HL
      $setup(negedge D1 &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),
      negedge CK &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup D1-LH CK-HL
      $setup(posedge D1 &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),
      negedge CK &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold D1-HL CK-HL
      $hold(negedge CK &&& (ENABLE_NOT_SE_AND_SI === 1'b1),
      negedge D1 &&& (ENABLE_NOT_SE_AND_SI === 1'b1),1.0);
      
      // hold D1-LH CK-HL
      $hold(negedge CK &&& (ENABLE_NOT_SE_AND_SI === 1'b1),
      posedge D1 &&& (ENABLE_NOT_SE_AND_SI === 1'b1),1.0);
      
      // setup D1-HL CK-HL
      $setup(negedge D1 &&& (ENABLE_NOT_SE_AND_SI === 1'b1),
      negedge CK &&& (ENABLE_NOT_SE_AND_SI === 1'b1),1.0);
      
      // setup D1-LH CK-HL
      $setup(posedge D1 &&& (ENABLE_NOT_SE_AND_SI === 1'b1),
      negedge CK &&& (ENABLE_NOT_SE_AND_SI === 1'b1),1.0);
      
      // hold D2-HL CK-HL
      $hold(negedge CK &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),
      negedge D2 &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold D2-LH CK-HL
      $hold(negedge CK &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),
      posedge D2 &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup D2-HL CK-HL
      $setup(negedge D2 &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),
      negedge CK &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup D2-LH CK-HL
      $setup(posedge D2 &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),
      negedge CK &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold D2-HL CK-HL
      $hold(negedge CK &&& (ENABLE_NOT_SE_AND_SI === 1'b1),
      negedge D2 &&& (ENABLE_NOT_SE_AND_SI === 1'b1),1.0);
      
      // hold D2-LH CK-HL
      $hold(negedge CK &&& (ENABLE_NOT_SE_AND_SI === 1'b1),
      posedge D2 &&& (ENABLE_NOT_SE_AND_SI === 1'b1),1.0);
      
      // setup D2-HL CK-HL
      $setup(negedge D2 &&& (ENABLE_NOT_SE_AND_SI === 1'b1),
      negedge CK &&& (ENABLE_NOT_SE_AND_SI === 1'b1),1.0);
      
      // setup D2-LH CK-HL
      $setup(posedge D2 &&& (ENABLE_NOT_SE_AND_SI === 1'b1),
      negedge CK &&& (ENABLE_NOT_SE_AND_SI === 1'b1),1.0);
      
      // hold D3-HL CK-HL
      $hold(negedge CK &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),
      negedge D3 &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold D3-LH CK-HL
      $hold(negedge CK &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),
      posedge D3 &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup D3-HL CK-HL
      $setup(negedge D3 &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),
      negedge CK &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup D3-LH CK-HL
      $setup(posedge D3 &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),
      negedge CK &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold D3-HL CK-HL
      $hold(negedge CK &&& (ENABLE_NOT_SE_AND_SI === 1'b1),
      negedge D3 &&& (ENABLE_NOT_SE_AND_SI === 1'b1),1.0);
      
      // hold D3-LH CK-HL
      $hold(negedge CK &&& (ENABLE_NOT_SE_AND_SI === 1'b1),
      posedge D3 &&& (ENABLE_NOT_SE_AND_SI === 1'b1),1.0);
      
      // setup D3-HL CK-HL
      $setup(negedge D3 &&& (ENABLE_NOT_SE_AND_SI === 1'b1),
      negedge CK &&& (ENABLE_NOT_SE_AND_SI === 1'b1),1.0);
      
      // setup D3-LH CK-HL
      $setup(posedge D3 &&& (ENABLE_NOT_SE_AND_SI === 1'b1),
      negedge CK &&& (ENABLE_NOT_SE_AND_SI === 1'b1),1.0);
      
      // mpw CK_lh 
      $width(posedge CK,1.0,0);
      
      // mpw CK_hl 
      $width(negedge CK,1.0,0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine

`celldefine
module SAEDRVT14_FSDN4_V2_4( CK, SI, SE, D0, D1, D2, D3, Q0, Q1, Q2, Q3, QN0, QN1, QN2, QN3 );
input CK, SE, SI;
input D0, D1, D2, D3;
output Q0, Q1, Q2, Q3, QN0, QN1, QN2, QN3;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_FSDN4_V2_4_func SAEDRVT14_FSDN4_V2_4_behav_inst(.CK(CK),.SI(SI),.SE(SE),.D0(D0),.D1(D1),.D2(D2),.D3(D3),.Q0(Q0),.Q1(Q1),.Q2(Q2),.Q3(Q3),.QN0(QN0),.QN1(QN1),.QN2(QN2),.QN3(QN3));
`else
   SAEDRVT14_FSDN4_V2_4_func SAEDRVT14_FSDN4_V2_4_inst(.CK(CK),.SI(SI),.SE(SE),.D0(D0),.D1(D1),.D2(D2),.D3(D3),.Q0(Q0),.Q1(Q1),.Q2(Q2),.Q3(Q3),.QN0(QN0),.QN1(QN1),.QN2(QN2),.QN3(QN3));
   // spec_gates_begin
   not MGM_G0(MGM_W0,D3);
   not MGM_G1(MGM_W1,SE);
   and MGM_G2(MGM_W2,MGM_W1,MGM_W0);
   not MGM_G3(MGM_W3,SI);
   and MGM_G4(ENABLE_NOT_D3_AND_NOT_SE_AND_NOT_SI,MGM_W3,MGM_W2);
   not MGM_G5(MGM_W4,D3);
   not MGM_G6(MGM_W5,SE);
   and MGM_G7(MGM_W6,MGM_W5,MGM_W4);
   and MGM_G8(ENABLE_NOT_D3_AND_NOT_SE_AND_SI,SI,MGM_W6);
   not MGM_G9(MGM_W7,D3);
   and MGM_G10(MGM_W8,SE,MGM_W7);
   not MGM_G11(MGM_W9,SI);
   and MGM_G12(ENABLE_NOT_D3_AND_SE_AND_NOT_SI,MGM_W9,MGM_W8);
   not MGM_G13(MGM_W10,D3);
   and MGM_G14(MGM_W11,SE,MGM_W10);
   and MGM_G15(ENABLE_NOT_D3_AND_SE_AND_SI,SI,MGM_W11);
   not MGM_G16(MGM_W12,SE);
   and MGM_G17(MGM_W13,MGM_W12,D3);
   not MGM_G18(MGM_W14,SI);
   and MGM_G19(ENABLE_D3_AND_NOT_SE_AND_NOT_SI,MGM_W14,MGM_W13);
   not MGM_G20(MGM_W15,SE);
   and MGM_G21(MGM_W16,MGM_W15,D3);
   and MGM_G22(ENABLE_D3_AND_NOT_SE_AND_SI,SI,MGM_W16);
   and MGM_G23(MGM_W17,SE,D3);
   not MGM_G24(MGM_W18,SI);
   and MGM_G25(ENABLE_D3_AND_SE_AND_NOT_SI,MGM_W18,MGM_W17);
   and MGM_G26(MGM_W19,SE,D3);
   and MGM_G27(ENABLE_D3_AND_SE_AND_SI,SI,MGM_W19);
   not MGM_G28(MGM_W20,D3);
   and MGM_G29(ENABLE_NOT_D3_AND_SI,SI,MGM_W20);
   not MGM_G30(MGM_W21,SI);
   and MGM_G31(ENABLE_D3_AND_NOT_SI,MGM_W21,D3);
   not MGM_G32(MGM_W22,D3);
   and MGM_G33(ENABLE_NOT_D3_AND_SE,SE,MGM_W22);
   and MGM_G34(ENABLE_D3_AND_SE,SE,D3);
   not MGM_G35(MGM_W23,SE);
   not MGM_G36(MGM_W24,SI);
   and MGM_G37(ENABLE_NOT_SE_AND_NOT_SI,MGM_W24,MGM_W23);
   not MGM_G38(MGM_W25,SE);
   and MGM_G39(ENABLE_NOT_SE_AND_SI,SI,MGM_W25);
   // spec_gates_end
   // specify_block_begin
   specify

      if(D0===1'b0 && SI===1'b1)
      // seq arc CK --> Q0
      (negedge CK => (Q0 : SE))  = (1.0,1.0);
      
      if(SE===1'b0 && SI===1'b0)
      // seq arc CK --> Q0
      (negedge CK => (Q0 : D0))  = (1.0,1.0);
      
      if(D0===1'b1 && SE===1'b0 && SI===1'b1 || D0===1'b0 && SE===1'b1 && SI===1'b0)
      // seq arc CK --> Q0
      (negedge CK => (Q0 : D0))  = (1.0,1.0);
      
      if(D0===1'b1 && SE===1'b1)
      // seq arc CK --> Q0
      (negedge CK => (Q0 : SI))  = (1.0,1.0);
      
      ifnone
      // seq arc CK --> Q0
      (negedge CK => (Q0 : SE))  = (1.0,1.0);
      
      if(D1===1'b0 && SI===1'b1)
      // seq arc CK --> Q1
      (negedge CK => (Q1 : D0))  = (1.0,1.0);
      
      if(SE===1'b0 && SI===1'b0)
      // seq arc CK --> Q1
      (negedge CK => (Q1 : D0))  = (1.0,1.0);
      
      if(D1===1'b1 && SE===1'b0 && SI===1'b1 || D1===1'b0 && SE===1'b1 && SI===1'b0)
      // seq arc CK --> Q1
      (negedge CK => (Q1 : D0))  = (1.0,1.0);
      
      if(D1===1'b1 && SE===1'b1)
      // seq arc CK --> Q1
      (negedge CK => (Q1 : SI))  = (1.0,1.0);
      
      ifnone
      // seq arc CK --> Q1
      (negedge CK => (Q1 : SE))  = (1.0,1.0);
      
      if(D2===1'b0 && SI===1'b1)
      // seq arc CK --> Q2
      (negedge CK => (Q2 : D0))  = (1.0,1.0);
      
      if(SE===1'b0 && SI===1'b0)
      // seq arc CK --> Q2
      (negedge CK => (Q2 : D0))  = (1.0,1.0);
      
      if(D2===1'b1 && SE===1'b0 && SI===1'b1 || D2===1'b0 && SE===1'b1 && SI===1'b0)
      // seq arc CK --> Q2
      (negedge CK => (Q2 : D0))  = (1.0,1.0);
      
      if(D2===1'b1 && SE===1'b1)
      // seq arc CK --> Q2
      (negedge CK => (Q2 : SI))  = (1.0,1.0);
      
      ifnone
      // seq arc CK --> Q2
      (negedge CK => (Q2 : SE))  = (1.0,1.0);
      
      if(D3===1'b0 && SI===1'b1)
      // seq arc CK --> Q3
      (negedge CK => (Q3 : D0))  = (1.0,1.0);
      
      if(SE===1'b0 && SI===1'b0)
      // seq arc CK --> Q3
      (negedge CK => (Q3 : D0))  = (1.0,1.0);
      
      if(D3===1'b1 && SE===1'b0 && SI===1'b1 || D3===1'b0 && SE===1'b1 && SI===1'b0)
      // seq arc CK --> Q3
      (negedge CK => (Q3 : D0))  = (1.0,1.0);
      
      if(D3===1'b1 && SE===1'b1)
      // seq arc CK --> Q3
      (negedge CK => (Q3 : SI))  = (1.0,1.0);
      
      ifnone
      // seq arc CK --> Q3
      (negedge CK => (Q3 : SE))  = (1.0,1.0);
      
      if(D0===1'b0 && SI===1'b1)
      // seq arc CK --> QN0
      (negedge CK => (QN0 : SE))  = (1.0,1.0);
      
      if(SE===1'b0 && SI===1'b0)
      // seq arc CK --> QN0
      (negedge CK => (QN0 : D0))  = (1.0,1.0);
      
      if(D0===1'b1 && SE===1'b0 && SI===1'b1 || D0===1'b0 && SE===1'b1 && SI===1'b0)
      // seq arc CK --> QN0
      (negedge CK => (QN0 : D0))  = (1.0,1.0);
      
      if(D0===1'b1 && SE===1'b1)
      // seq arc CK --> QN0
      (negedge CK => (QN0 : SI))  = (1.0,1.0);
      
      ifnone
      // seq arc CK --> QN0
      (negedge CK => (QN0 : SE))  = (1.0,1.0);
      
      if(D1===1'b0 && SI===1'b1)
      // seq arc CK --> QN1
      (negedge CK => (QN1 : D0))  = (1.0,1.0);
      
      if(SE===1'b0 && SI===1'b0)
      // seq arc CK --> QN1
      (negedge CK => (QN1 : D0))  = (1.0,1.0);
      
      if(D1===1'b1 && SE===1'b0 && SI===1'b1 || D1===1'b0 && SE===1'b1 && SI===1'b0)
      // seq arc CK --> QN1
      (negedge CK => (QN1 : D0))  = (1.0,1.0);
      
      if(D1===1'b1 && SE===1'b1)
      // seq arc CK --> QN1
      (negedge CK => (QN1 : SI))  = (1.0,1.0);
      
      ifnone
      // seq arc CK --> QN1
      (negedge CK => (QN1 : SE))  = (1.0,1.0);
      
      if(D2===1'b0 && SI===1'b1)
      // seq arc CK --> QN2
      (negedge CK => (QN2 : D0))  = (1.0,1.0);
      
      if(SE===1'b0 && SI===1'b0)
      // seq arc CK --> QN2
      (negedge CK => (QN2 : D0))  = (1.0,1.0);
      
      if(D2===1'b1 && SE===1'b0 && SI===1'b1 || D2===1'b0 && SE===1'b1 && SI===1'b0)
      // seq arc CK --> QN2
      (negedge CK => (QN2 : D0))  = (1.0,1.0);
      
      if(D2===1'b1 && SE===1'b1)
      // seq arc CK --> QN2
      (negedge CK => (QN2 : SI))  = (1.0,1.0);
      
      ifnone
      // seq arc CK --> QN2
      (negedge CK => (QN2 : SE))  = (1.0,1.0);
      
      if(D3===1'b0 && SI===1'b1)
      // seq arc CK --> QN3
      (negedge CK => (QN3 : D0))  = (1.0,1.0);
      
      if(SE===1'b0 && SI===1'b0)
      // seq arc CK --> QN3
      (negedge CK => (QN3 : D0))  = (1.0,1.0);
      
      if(D3===1'b1 && SE===1'b0 && SI===1'b1 || D3===1'b0 && SE===1'b1 && SI===1'b0)
      // seq arc CK --> QN3
      (negedge CK => (QN3 : D0))  = (1.0,1.0);
      
      if(D3===1'b1 && SE===1'b1)
      // seq arc CK --> QN3
      (negedge CK => (QN3 : SI))  = (1.0,1.0);
      
      ifnone
      // seq arc CK --> QN3
      (negedge CK => (QN3 : SE))  = (1.0,1.0);
      
      $width(negedge CK &&& (ENABLE_NOT_D3_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D3_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D3_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D3_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D3_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D3_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_NOT_D3_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_NOT_D3_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D3_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D3_AND_NOT_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D3_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D3_AND_NOT_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D3_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D3_AND_SE_AND_NOT_SI === 1'b1)
      ,1.0,0);
      
      $width(negedge CK &&& (ENABLE_D3_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      $width(posedge CK &&& (ENABLE_D3_AND_SE_AND_SI === 1'b1)
      ,1.0,0);
      
      // hold SE-HL CK-HL
      $hold(negedge CK &&& (ENABLE_NOT_D3_AND_SI === 1'b1),
      negedge SE &&& (ENABLE_NOT_D3_AND_SI === 1'b1),1.0);
      
      // hold SE-LH CK-HL
      $hold(negedge CK &&& (ENABLE_NOT_D3_AND_SI === 1'b1),
      posedge SE &&& (ENABLE_NOT_D3_AND_SI === 1'b1),1.0);
      
      // setup SE-HL CK-HL
      $setup(negedge SE &&& (ENABLE_NOT_D3_AND_SI === 1'b1),
      negedge CK &&& (ENABLE_NOT_D3_AND_SI === 1'b1),1.0);
      
      // setup SE-LH CK-HL
      $setup(posedge SE &&& (ENABLE_NOT_D3_AND_SI === 1'b1),
      negedge CK &&& (ENABLE_NOT_D3_AND_SI === 1'b1),1.0);
      
      // hold SE-HL CK-HL
      $hold(negedge CK &&& (ENABLE_D3_AND_NOT_SI === 1'b1),
      negedge SE &&& (ENABLE_D3_AND_NOT_SI === 1'b1),1.0);
      
      // hold SE-LH CK-HL
      $hold(negedge CK &&& (ENABLE_D3_AND_NOT_SI === 1'b1),
      posedge SE &&& (ENABLE_D3_AND_NOT_SI === 1'b1),1.0);
      
      // setup SE-HL CK-HL
      $setup(negedge SE &&& (ENABLE_D3_AND_NOT_SI === 1'b1),
      negedge CK &&& (ENABLE_D3_AND_NOT_SI === 1'b1),1.0);
      
      // setup SE-LH CK-HL
      $setup(posedge SE &&& (ENABLE_D3_AND_NOT_SI === 1'b1),
      negedge CK &&& (ENABLE_D3_AND_NOT_SI === 1'b1),1.0);
      
      // hold SI-HL CK-HL
      $hold(negedge CK &&& (ENABLE_NOT_D3_AND_SE === 1'b1),
      negedge SI &&& (ENABLE_NOT_D3_AND_SE === 1'b1),1.0);
      
      // hold SI-LH CK-HL
      $hold(negedge CK &&& (ENABLE_NOT_D3_AND_SE === 1'b1),
      posedge SI &&& (ENABLE_NOT_D3_AND_SE === 1'b1),1.0);
      
      // setup SI-HL CK-HL
      $setup(negedge SI &&& (ENABLE_NOT_D3_AND_SE === 1'b1),
      negedge CK &&& (ENABLE_NOT_D3_AND_SE === 1'b1),1.0);
      
      // setup SI-LH CK-HL
      $setup(posedge SI &&& (ENABLE_NOT_D3_AND_SE === 1'b1),
      negedge CK &&& (ENABLE_NOT_D3_AND_SE === 1'b1),1.0);
      
      // hold SI-HL CK-HL
      $hold(negedge CK &&& (ENABLE_D3_AND_SE === 1'b1),
      negedge SI &&& (ENABLE_D3_AND_SE === 1'b1),1.0);
      
      // hold SI-LH CK-HL
      $hold(negedge CK &&& (ENABLE_D3_AND_SE === 1'b1),
      posedge SI &&& (ENABLE_D3_AND_SE === 1'b1),1.0);
      
      // setup SI-HL CK-HL
      $setup(negedge SI &&& (ENABLE_D3_AND_SE === 1'b1),
      negedge CK &&& (ENABLE_D3_AND_SE === 1'b1),1.0);
      
      // setup SI-LH CK-HL
      $setup(posedge SI &&& (ENABLE_D3_AND_SE === 1'b1),
      negedge CK &&& (ENABLE_D3_AND_SE === 1'b1),1.0);
      
      // hold D0-HL CK-HL
      $hold(negedge CK &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),
      negedge D0 &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold D0-LH CK-HL
      $hold(negedge CK &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),
      posedge D0 &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup D0-HL CK-HL
      $setup(negedge D0 &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),
      negedge CK &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup D0-LH CK-HL
      $setup(posedge D0 &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),
      negedge CK &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold D0-HL CK-HL
      $hold(negedge CK &&& (ENABLE_NOT_SE_AND_SI === 1'b1),
      negedge D0 &&& (ENABLE_NOT_SE_AND_SI === 1'b1),1.0);
      
      // hold D0-LH CK-HL
      $hold(negedge CK &&& (ENABLE_NOT_SE_AND_SI === 1'b1),
      posedge D0 &&& (ENABLE_NOT_SE_AND_SI === 1'b1),1.0);
      
      // setup D0-HL CK-HL
      $setup(negedge D0 &&& (ENABLE_NOT_SE_AND_SI === 1'b1),
      negedge CK &&& (ENABLE_NOT_SE_AND_SI === 1'b1),1.0);
      
      // setup D0-LH CK-HL
      $setup(posedge D0 &&& (ENABLE_NOT_SE_AND_SI === 1'b1),
      negedge CK &&& (ENABLE_NOT_SE_AND_SI === 1'b1),1.0);
      
      // hold D1-HL CK-HL
      $hold(negedge CK &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),
      negedge D1 &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold D1-LH CK-HL
      $hold(negedge CK &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),
      posedge D1 &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup D1-HL CK-HL
      $setup(negedge D1 &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),
      negedge CK &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup D1-LH CK-HL
      $setup(posedge D1 &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),
      negedge CK &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold D1-HL CK-HL
      $hold(negedge CK &&& (ENABLE_NOT_SE_AND_SI === 1'b1),
      negedge D1 &&& (ENABLE_NOT_SE_AND_SI === 1'b1),1.0);
      
      // hold D1-LH CK-HL
      $hold(negedge CK &&& (ENABLE_NOT_SE_AND_SI === 1'b1),
      posedge D1 &&& (ENABLE_NOT_SE_AND_SI === 1'b1),1.0);
      
      // setup D1-HL CK-HL
      $setup(negedge D1 &&& (ENABLE_NOT_SE_AND_SI === 1'b1),
      negedge CK &&& (ENABLE_NOT_SE_AND_SI === 1'b1),1.0);
      
      // setup D1-LH CK-HL
      $setup(posedge D1 &&& (ENABLE_NOT_SE_AND_SI === 1'b1),
      negedge CK &&& (ENABLE_NOT_SE_AND_SI === 1'b1),1.0);
      
      // hold D2-HL CK-HL
      $hold(negedge CK &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),
      negedge D2 &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold D2-LH CK-HL
      $hold(negedge CK &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),
      posedge D2 &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup D2-HL CK-HL
      $setup(negedge D2 &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),
      negedge CK &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup D2-LH CK-HL
      $setup(posedge D2 &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),
      negedge CK &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold D2-HL CK-HL
      $hold(negedge CK &&& (ENABLE_NOT_SE_AND_SI === 1'b1),
      negedge D2 &&& (ENABLE_NOT_SE_AND_SI === 1'b1),1.0);
      
      // hold D2-LH CK-HL
      $hold(negedge CK &&& (ENABLE_NOT_SE_AND_SI === 1'b1),
      posedge D2 &&& (ENABLE_NOT_SE_AND_SI === 1'b1),1.0);
      
      // setup D2-HL CK-HL
      $setup(negedge D2 &&& (ENABLE_NOT_SE_AND_SI === 1'b1),
      negedge CK &&& (ENABLE_NOT_SE_AND_SI === 1'b1),1.0);
      
      // setup D2-LH CK-HL
      $setup(posedge D2 &&& (ENABLE_NOT_SE_AND_SI === 1'b1),
      negedge CK &&& (ENABLE_NOT_SE_AND_SI === 1'b1),1.0);
      
      // hold D3-HL CK-HL
      $hold(negedge CK &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),
      negedge D3 &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold D3-LH CK-HL
      $hold(negedge CK &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),
      posedge D3 &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup D3-HL CK-HL
      $setup(negedge D3 &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),
      negedge CK &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup D3-LH CK-HL
      $setup(posedge D3 &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),
      negedge CK &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold D3-HL CK-HL
      $hold(negedge CK &&& (ENABLE_NOT_SE_AND_SI === 1'b1),
      negedge D3 &&& (ENABLE_NOT_SE_AND_SI === 1'b1),1.0);
      
      // hold D3-LH CK-HL
      $hold(negedge CK &&& (ENABLE_NOT_SE_AND_SI === 1'b1),
      posedge D3 &&& (ENABLE_NOT_SE_AND_SI === 1'b1),1.0);
      
      // setup D3-HL CK-HL
      $setup(negedge D3 &&& (ENABLE_NOT_SE_AND_SI === 1'b1),
      negedge CK &&& (ENABLE_NOT_SE_AND_SI === 1'b1),1.0);
      
      // setup D3-LH CK-HL
      $setup(posedge D3 &&& (ENABLE_NOT_SE_AND_SI === 1'b1),
      negedge CK &&& (ENABLE_NOT_SE_AND_SI === 1'b1),1.0);
      
      // mpw CK_lh 
      $width(posedge CK,1.0,0);
      
      // mpw CK_hl 
      $width(negedge CK,1.0,0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine
`celldefine
module SAEDRVT14_FSDPQM4_V2LPY2_1( CK, SI, SE, D0, D1, D2, D3, Q0, Q1, Q2, Q3 );
input CK, SE, SI;
input D0, D1, D2, D3;
output Q0, Q1, Q2, Q3;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_FSDPQM4_V2LPY2_1_func SAEDRVT14_FSDPQM4_V2LPY2_1_behav_inst(.CK(CK),.SI(SI),.SE(SE),.D0(D0),.D1(D1),.D2(D2),.D3(D3),.Q0(Q0),.Q1(Q1),.Q2(Q2),.Q3(Q3));
`else
   SAEDRVT14_FSDPQM4_V2LPY2_1_func SAEDRVT14_FSDPQM4_V2LPY2_1_inst(.CK(CK),.SI(SI),.SE(SE),.D0(D0),.D1(D1),.D2(D2),.D3(D3),.Q0(Q0),.Q1(Q1),.Q2(Q2),.Q3(Q3));
   // spec_gates_begin
   not MGM_G0(MGM_W0,D0);
   not MGM_G1(MGM_W1,D1);
   and MGM_G2(MGM_W2,MGM_W1,MGM_W0);
   not MGM_G3(MGM_W3,D2);
   and MGM_G4(MGM_W4,MGM_W3,MGM_W2);
   not MGM_G5(MGM_W5,D3);
   and MGM_G6(MGM_W6,MGM_W5,MGM_W4);
   and MGM_G7(ENABLE_NOT_D0_AND_NOT_D1_AND_NOT_D2_AND_NOT_D3_AND_SI,SI,MGM_W6);
   and MGM_G8(MGM_W7,D1,D0);
   and MGM_G9(MGM_W8,D2,MGM_W7);
   and MGM_G10(MGM_W9,D3,MGM_W8);
   not MGM_G11(MGM_W10,SI);
   and MGM_G12(ENABLE_D0_AND_D1_AND_D2_AND_D3_AND_NOT_SI,MGM_W10,MGM_W9);
   not MGM_G13(MGM_W11,D0);
   and MGM_G14(MGM_W12,D1,MGM_W11);
   not MGM_G15(MGM_W13,D2);
   and MGM_G16(MGM_W14,MGM_W13,MGM_W12);
   and MGM_G17(MGM_W15,D3,MGM_W14);
   and MGM_G18(ENABLE_NOT_D0_AND_D1_AND_NOT_D2_AND_D3_AND_SI,SI,MGM_W15);
   not MGM_G19(MGM_W16,D1);
   and MGM_G20(MGM_W17,MGM_W16,D0);
   and MGM_G21(MGM_W18,D2,MGM_W17);
   not MGM_G22(MGM_W19,D3);
   and MGM_G23(MGM_W20,MGM_W19,MGM_W18);
   not MGM_G24(MGM_W21,SI);
   and MGM_G25(ENABLE_D0_AND_NOT_D1_AND_D2_AND_NOT_D3_AND_NOT_SI,MGM_W21,MGM_W20);
   not MGM_G26(MGM_W22,SE);
   not MGM_G27(MGM_W23,SI);
   and MGM_G28(ENABLE_NOT_SE_AND_NOT_SI,MGM_W23,MGM_W22);
   not MGM_G29(MGM_W24,SE);
   and MGM_G30(ENABLE_NOT_SE_AND_SI,SI,MGM_W24);
   // spec_gates_end
   // specify_block_begin
   specify

      // hold SE-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_NOT_D2_AND_NOT_D3_AND_SI === 1'b1),
      posedge SE &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_NOT_D2_AND_NOT_D3_AND_SI === 1'b1),1.0);
      
      // setup SE-HL CK-LH
      $setup(negedge SE &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_NOT_D2_AND_NOT_D3_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_NOT_D2_AND_NOT_D3_AND_SI === 1'b1),1.0);
      
      // hold SE-LH CK-LH
      $hold(posedge CK &&& (ENABLE_D0_AND_D1_AND_D2_AND_D3_AND_NOT_SI === 1'b1),
      posedge SE &&& (ENABLE_D0_AND_D1_AND_D2_AND_D3_AND_NOT_SI === 1'b1),1.0);
      
      // setup SE-HL CK-LH
      $setup(negedge SE &&& (ENABLE_D0_AND_D1_AND_D2_AND_D3_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_D0_AND_D1_AND_D2_AND_D3_AND_NOT_SI === 1'b1),1.0);
      
      // hold SE-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D0_AND_D1_AND_NOT_D2_AND_D3_AND_SI === 1'b1),
      negedge SE &&& (ENABLE_NOT_D0_AND_D1_AND_NOT_D2_AND_D3_AND_SI === 1'b1),1.0);
      
      // setup SE-LH CK-LH
      $setup(posedge SE &&& (ENABLE_NOT_D0_AND_D1_AND_NOT_D2_AND_D3_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D0_AND_D1_AND_NOT_D2_AND_D3_AND_SI === 1'b1),1.0);
      
      // hold SE-HL CK-LH
      $hold(posedge CK &&& (ENABLE_D0_AND_NOT_D1_AND_D2_AND_NOT_D3_AND_NOT_SI === 1'b1),
      negedge SE &&& (ENABLE_D0_AND_NOT_D1_AND_D2_AND_NOT_D3_AND_NOT_SI === 1'b1),1.0);
      
      // setup SE-LH CK-LH
      $setup(posedge SE &&& (ENABLE_D0_AND_NOT_D1_AND_D2_AND_NOT_D3_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_D0_AND_NOT_D1_AND_D2_AND_NOT_D3_AND_NOT_SI === 1'b1),1.0);
      
      // hold D0-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),
      negedge D0 &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold D0-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),
      posedge D0 &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup D0-HL CK-LH
      $setup(negedge D0 &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup D0-LH CK-LH
      $setup(posedge D0 &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold D0-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_SE_AND_SI === 1'b1),
      negedge D0 &&& (ENABLE_NOT_SE_AND_SI === 1'b1),1.0);
      
      // hold D0-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_SE_AND_SI === 1'b1),
      posedge D0 &&& (ENABLE_NOT_SE_AND_SI === 1'b1),1.0);
      
      // setup D0-HL CK-LH
      $setup(negedge D0 &&& (ENABLE_NOT_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_SE_AND_SI === 1'b1),1.0);
      
      // setup D0-LH CK-LH
      $setup(posedge D0 &&& (ENABLE_NOT_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_SE_AND_SI === 1'b1),1.0);
      
      // setup D1-HL CK-LH
      $setup(negedge D1 &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup D1-LH CK-LH
      $setup(posedge D1 &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup D1-HL CK-LH
      $setup(negedge D1 &&& (ENABLE_NOT_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_SE_AND_SI === 1'b1),1.0);
      
      // setup D1-LH CK-LH
      $setup(posedge D1 &&& (ENABLE_NOT_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_SE_AND_SI === 1'b1),1.0);
      
      // setup D2-HL CK-LH
      $setup(negedge D2 &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup D2-LH CK-LH
      $setup(posedge D2 &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup D2-HL CK-LH
      $setup(negedge D2 &&& (ENABLE_NOT_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_SE_AND_SI === 1'b1),1.0);
      
      // setup D2-LH CK-LH
      $setup(posedge D2 &&& (ENABLE_NOT_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_SE_AND_SI === 1'b1),1.0);
      
      // setup D3-HL CK-LH
      $setup(negedge D3 &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup D3-LH CK-LH
      $setup(posedge D3 &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup D3-HL CK-LH
      $setup(negedge D3 &&& (ENABLE_NOT_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_SE_AND_SI === 1'b1),1.0);
      
      // setup D3-LH CK-LH
      $setup(posedge D3 &&& (ENABLE_NOT_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_SE_AND_SI === 1'b1),1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine
`celldefine
module SAEDRVT14_FSDPQM4_V2Y2_1( CK, SI, SE, D0, D1, D2, D3, Q0, Q1, Q2, Q3 );
input CK, SE, SI;
input D0, D1, D2, D3;
output Q0, Q1, Q2, Q3;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_FSDPQM4_V2Y2_1_func SAEDRVT14_FSDPQM4_V2Y2_1_behav_inst(.CK(CK),.SI(SI),.SE(SE),.D0(D0),.D1(D1),.D2(D2),.D3(D3),.Q0(Q0),.Q1(Q1),.Q2(Q2),.Q3(Q3));
`else
   SAEDRVT14_FSDPQM4_V2Y2_1_func SAEDRVT14_FSDPQM4_V2Y2_1_inst(.CK(CK),.SI(SI),.SE(SE),.D0(D0),.D1(D1),.D2(D2),.D3(D3),.Q0(Q0),.Q1(Q1),.Q2(Q2),.Q3(Q3));
   // spec_gates_begin
   not MGM_G0(MGM_W0,D0);
   not MGM_G1(MGM_W1,D1);
   and MGM_G2(MGM_W2,MGM_W1,MGM_W0);
   not MGM_G3(MGM_W3,D2);
   and MGM_G4(MGM_W4,MGM_W3,MGM_W2);
   not MGM_G5(MGM_W5,D3);
   and MGM_G6(MGM_W6,MGM_W5,MGM_W4);
   and MGM_G7(ENABLE_NOT_D0_AND_NOT_D1_AND_NOT_D2_AND_NOT_D3_AND_SI,SI,MGM_W6);
   and MGM_G8(MGM_W7,D1,D0);
   and MGM_G9(MGM_W8,D2,MGM_W7);
   and MGM_G10(MGM_W9,D3,MGM_W8);
   not MGM_G11(MGM_W10,SI);
   and MGM_G12(ENABLE_D0_AND_D1_AND_D2_AND_D3_AND_NOT_SI,MGM_W10,MGM_W9);
   not MGM_G13(MGM_W11,D0);
   and MGM_G14(MGM_W12,D1,MGM_W11);
   not MGM_G15(MGM_W13,D2);
   and MGM_G16(MGM_W14,MGM_W13,MGM_W12);
   and MGM_G17(MGM_W15,D3,MGM_W14);
   and MGM_G18(ENABLE_NOT_D0_AND_D1_AND_NOT_D2_AND_D3_AND_SI,SI,MGM_W15);
   not MGM_G19(MGM_W16,D1);
   and MGM_G20(MGM_W17,MGM_W16,D0);
   and MGM_G21(MGM_W18,D2,MGM_W17);
   not MGM_G22(MGM_W19,D3);
   and MGM_G23(MGM_W20,MGM_W19,MGM_W18);
   not MGM_G24(MGM_W21,SI);
   and MGM_G25(ENABLE_D0_AND_NOT_D1_AND_D2_AND_NOT_D3_AND_NOT_SI,MGM_W21,MGM_W20);
   not MGM_G26(MGM_W22,SE);
   not MGM_G27(MGM_W23,SI);
   and MGM_G28(ENABLE_NOT_SE_AND_NOT_SI,MGM_W23,MGM_W22);
   not MGM_G29(MGM_W24,SE);
   and MGM_G30(ENABLE_NOT_SE_AND_SI,SI,MGM_W24);
   // spec_gates_end
   // specify_block_begin
   specify

      // hold SE-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_NOT_D2_AND_NOT_D3_AND_SI === 1'b1),
      posedge SE &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_NOT_D2_AND_NOT_D3_AND_SI === 1'b1),1.0);
      
      // setup SE-HL CK-LH
      $setup(negedge SE &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_NOT_D2_AND_NOT_D3_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_NOT_D2_AND_NOT_D3_AND_SI === 1'b1),1.0);
      
      // hold SE-LH CK-LH
      $hold(posedge CK &&& (ENABLE_D0_AND_D1_AND_D2_AND_D3_AND_NOT_SI === 1'b1),
      posedge SE &&& (ENABLE_D0_AND_D1_AND_D2_AND_D3_AND_NOT_SI === 1'b1),1.0);
      
      // setup SE-HL CK-LH
      $setup(negedge SE &&& (ENABLE_D0_AND_D1_AND_D2_AND_D3_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_D0_AND_D1_AND_D2_AND_D3_AND_NOT_SI === 1'b1),1.0);
      
      // hold SE-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D0_AND_D1_AND_NOT_D2_AND_D3_AND_SI === 1'b1),
      negedge SE &&& (ENABLE_NOT_D0_AND_D1_AND_NOT_D2_AND_D3_AND_SI === 1'b1),1.0);
      
      // setup SE-LH CK-LH
      $setup(posedge SE &&& (ENABLE_NOT_D0_AND_D1_AND_NOT_D2_AND_D3_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D0_AND_D1_AND_NOT_D2_AND_D3_AND_SI === 1'b1),1.0);
      
      // hold SE-HL CK-LH
      $hold(posedge CK &&& (ENABLE_D0_AND_NOT_D1_AND_D2_AND_NOT_D3_AND_NOT_SI === 1'b1),
      negedge SE &&& (ENABLE_D0_AND_NOT_D1_AND_D2_AND_NOT_D3_AND_NOT_SI === 1'b1),1.0);
      
      // setup SE-LH CK-LH
      $setup(posedge SE &&& (ENABLE_D0_AND_NOT_D1_AND_D2_AND_NOT_D3_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_D0_AND_NOT_D1_AND_D2_AND_NOT_D3_AND_NOT_SI === 1'b1),1.0);
      
      // hold D0-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),
      negedge D0 &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold D0-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),
      posedge D0 &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup D0-HL CK-LH
      $setup(negedge D0 &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup D0-LH CK-LH
      $setup(posedge D0 &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold D0-HL CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_SE_AND_SI === 1'b1),
      negedge D0 &&& (ENABLE_NOT_SE_AND_SI === 1'b1),1.0);
      
      // hold D0-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_SE_AND_SI === 1'b1),
      posedge D0 &&& (ENABLE_NOT_SE_AND_SI === 1'b1),1.0);
      
      // setup D0-HL CK-LH
      $setup(negedge D0 &&& (ENABLE_NOT_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_SE_AND_SI === 1'b1),1.0);
      
      // setup D0-LH CK-LH
      $setup(posedge D0 &&& (ENABLE_NOT_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_SE_AND_SI === 1'b1),1.0);
      
      // setup D1-HL CK-LH
      $setup(negedge D1 &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup D1-LH CK-LH
      $setup(posedge D1 &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup D1-HL CK-LH
      $setup(negedge D1 &&& (ENABLE_NOT_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_SE_AND_SI === 1'b1),1.0);
      
      // setup D1-LH CK-LH
      $setup(posedge D1 &&& (ENABLE_NOT_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_SE_AND_SI === 1'b1),1.0);
      
      // setup D2-HL CK-LH
      $setup(negedge D2 &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup D2-LH CK-LH
      $setup(posedge D2 &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup D2-HL CK-LH
      $setup(negedge D2 &&& (ENABLE_NOT_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_SE_AND_SI === 1'b1),1.0);
      
      // setup D2-LH CK-LH
      $setup(posedge D2 &&& (ENABLE_NOT_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_SE_AND_SI === 1'b1),1.0);
      
      // setup D3-HL CK-LH
      $setup(negedge D3 &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup D3-LH CK-LH
      $setup(posedge D3 &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup D3-HL CK-LH
      $setup(negedge D3 &&& (ENABLE_NOT_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_SE_AND_SI === 1'b1),1.0);
      
      // setup D3-LH CK-LH
      $setup(posedge D3 &&& (ENABLE_NOT_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_SE_AND_SI === 1'b1),1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine
`celldefine
module SAEDRVT14_FSDPSYNRBQM4_V2Y2_1( CK, SI, SE, RD, D0, D1, D2, D3, Q0, Q1, Q2, Q3 );
input CK, RD, SE, SI;
input D0, D1, D2, D3;
output Q0, Q1, Q2, Q3;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_FSDPSYNRBQM4_V2Y2_1_func SAEDRVT14_FSDPSYNRBQM4_V2Y2_1_behav_inst(.CK(CK),.SI(SI),.SE(SE),.RD(RD),.D0(D0),.D1(D1),.D2(D2),.D3(D3),.Q0(Q0),.Q1(Q1),.Q2(Q2),.Q3(Q3));
`else
   SAEDRVT14_FSDPSYNRBQM4_V2Y2_1_func SAEDRVT14_FSDPSYNRBQM4_V2Y2_1_inst(.CK(CK),.SI(SI),.SE(SE),.RD(RD),.D0(D0),.D1(D1),.D2(D2),.D3(D3),.Q0(Q0),.Q1(Q1),.Q2(Q2),.Q3(Q3));
   // spec_gates_begin
   and MGM_G0(MGM_W0,D1,D0);
   and MGM_G1(MGM_W1,D2,MGM_W0);
   and MGM_G2(MGM_W2,D3,MGM_W1);
   not MGM_G3(MGM_W3,SE);
   and MGM_G4(MGM_W4,MGM_W3,MGM_W2);
   not MGM_G5(MGM_W5,SI);
   and MGM_G6(ENABLE_D0_AND_D1_AND_D2_AND_D3_AND_NOT_SE_AND_NOT_SI,MGM_W5,MGM_W4);
   and MGM_G7(MGM_W6,D1,D0);
   and MGM_G8(MGM_W7,D2,MGM_W6);
   and MGM_G9(MGM_W8,D3,MGM_W7);
   not MGM_G10(MGM_W9,SE);
   and MGM_G11(MGM_W10,MGM_W9,MGM_W8);
   and MGM_G12(ENABLE_D0_AND_D1_AND_D2_AND_D3_AND_NOT_SE_AND_SI,SI,MGM_W10);
   not MGM_G13(MGM_W11,D0);
   not MGM_G14(MGM_W12,D1);
   and MGM_G15(MGM_W13,MGM_W12,MGM_W11);
   not MGM_G16(MGM_W14,D2);
   and MGM_G17(MGM_W15,MGM_W14,MGM_W13);
   not MGM_G18(MGM_W16,D3);
   and MGM_G19(MGM_W17,MGM_W16,MGM_W15);
   not MGM_G20(MGM_W18,RD);
   and MGM_G21(MGM_W19,MGM_W18,MGM_W17);
   and MGM_G22(ENABLE_NOT_D0_AND_NOT_D1_AND_NOT_D2_AND_NOT_D3_AND_NOT_RD_AND_SI,SI,MGM_W19);
   not MGM_G23(MGM_W20,D0);
   not MGM_G24(MGM_W21,D1);
   and MGM_G25(MGM_W22,MGM_W21,MGM_W20);
   not MGM_G26(MGM_W23,D2);
   and MGM_G27(MGM_W24,MGM_W23,MGM_W22);
   not MGM_G28(MGM_W25,D3);
   and MGM_G29(MGM_W26,MGM_W25,MGM_W24);
   and MGM_G30(MGM_W27,RD,MGM_W26);
   and MGM_G31(ENABLE_NOT_D0_AND_NOT_D1_AND_NOT_D2_AND_NOT_D3_AND_RD_AND_SI,SI,MGM_W27);
   and MGM_G32(MGM_W28,D1,D0);
   and MGM_G33(MGM_W29,D2,MGM_W28);
   and MGM_G34(MGM_W30,D3,MGM_W29);
   not MGM_G35(MGM_W31,RD);
   and MGM_G36(MGM_W32,MGM_W31,MGM_W30);
   and MGM_G37(ENABLE_D0_AND_D1_AND_D2_AND_D3_AND_NOT_RD_AND_SI,SI,MGM_W32);
   and MGM_G38(MGM_W33,D1,D0);
   and MGM_G39(MGM_W34,D2,MGM_W33);
   and MGM_G40(MGM_W35,D3,MGM_W34);
   and MGM_G41(MGM_W36,RD,MGM_W35);
   not MGM_G42(MGM_W37,SI);
   and MGM_G43(ENABLE_D0_AND_D1_AND_D2_AND_D3_AND_RD_AND_NOT_SI,MGM_W37,MGM_W36);
   not MGM_G44(MGM_W38,D0);
   and MGM_G45(MGM_W39,D1,MGM_W38);
   not MGM_G46(MGM_W40,D2);
   and MGM_G47(MGM_W41,MGM_W40,MGM_W39);
   and MGM_G48(MGM_W42,D3,MGM_W41);
   and MGM_G49(MGM_W43,RD,MGM_W42);
   and MGM_G50(ENABLE_NOT_D0_AND_D1_AND_NOT_D2_AND_D3_AND_RD_AND_SI,SI,MGM_W43);
   not MGM_G51(MGM_W44,D1);
   and MGM_G52(MGM_W45,MGM_W44,D0);
   and MGM_G53(MGM_W46,D2,MGM_W45);
   not MGM_G54(MGM_W47,D3);
   and MGM_G55(MGM_W48,MGM_W47,MGM_W46);
   and MGM_G56(MGM_W49,RD,MGM_W48);
   not MGM_G57(MGM_W50,SI);
   and MGM_G58(ENABLE_D0_AND_NOT_D1_AND_D2_AND_NOT_D3_AND_RD_AND_NOT_SI,MGM_W50,MGM_W49);
   not MGM_G59(MGM_W51,SE);
   and MGM_G60(MGM_W52,MGM_W51,RD);
   not MGM_G61(MGM_W53,SI);
   and MGM_G62(ENABLE_RD_AND_NOT_SE_AND_NOT_SI,MGM_W53,MGM_W52);
   not MGM_G63(MGM_W54,SE);
   and MGM_G64(MGM_W55,MGM_W54,RD);
   and MGM_G65(ENABLE_RD_AND_NOT_SE_AND_SI,SI,MGM_W55);
   // spec_gates_end
   // specify_block_begin
   specify

      if(D3===1'b0 && RD===1'b0 && SE===1'b0 && SI===1'b0)
      // seq arc CK --> Q0
      (posedge CK => (Q0 : RD))  = (1.0,1.0);
      
      if(D3===1'b0 && RD===1'b0 && SE===1'b1 && SI===1'b0)
      // seq arc CK --> Q0
      (posedge CK => (Q0 : RD))  = (1.0,1.0);
      
      if(D3===1'b1 && RD===1'b0 && SE===1'b0 && SI===1'b0)
      // seq arc CK --> Q0
      (posedge CK => (Q0 : RD))  = (1.0,1.0);
      
      if(D3===1'b1 && RD===1'b0 && SE===1'b1 && SI===1'b0)
      // seq arc CK --> Q0
      (posedge CK => (Q0 : RD))  = (1.0,1.0);
      
      if(D3===1'b0 && RD===1'b0 && SI===1'b1)
      // seq arc CK --> Q0
      (posedge CK => (Q0 : RD))  = (1.0,1.0);
      
      if(D3===1'b0 && RD===1'b1 && SE===1'b0 && SI===1'b0)
      // seq arc CK --> Q0
      (posedge CK => (Q0 : RD))  = (1.0,1.0);
      
      if(D3===1'b0 && RD===1'b1 && SE===1'b0 && SI===1'b1)
      // seq arc CK --> Q0
      (posedge CK => (Q0 : RD))  = (1.0,1.0);
      
      if(D3===1'b0 && RD===1'b1 && SE===1'b1)
      // seq arc CK --> Q0
      (posedge CK => (Q0 : RD))  = (1.0,1.0);
      
      if(D3===1'b1 && RD===1'b0 && SI===1'b1)
      // seq arc CK --> Q0
      (posedge CK => (Q0 : RD))  = (1.0,1.0);
      
      if(D3===1'b1 && RD===1'b1 && SE===1'b0 && SI===1'b0)
      // seq arc CK --> Q0
      (posedge CK => (Q0 : RD))  = (1.0,1.0);
      
      if(D3===1'b1 && RD===1'b1 && SE===1'b0 && SI===1'b1)
      // seq arc CK --> Q0
      (posedge CK => (Q0 : RD))  = (1.0,1.0);
      
      if(D3===1'b1 && RD===1'b1 && SE===1'b1)
      // seq arc CK --> Q0
      (posedge CK => (Q0 : RD))  = (1.0,1.0);
      
      ifnone
      // seq arc CK --> Q0
      (posedge CK => (Q0 : RD))  = (1.0,1.0);
      
      if(D3===1'b0 && RD===1'b0 && SE===1'b0 && SI===1'b0)
      // seq arc CK --> Q1
      (posedge CK => (Q1 : RD))  = (1.0,1.0);
      
      if(D3===1'b0 && RD===1'b0 && SE===1'b1 && SI===1'b0)
      // seq arc CK --> Q1
      (posedge CK => (Q1 : RD))  = (1.0,1.0);
      
      if(D3===1'b1 && RD===1'b0 && SE===1'b0 && SI===1'b0)
      // seq arc CK --> Q1
      (posedge CK => (Q1 : RD))  = (1.0,1.0);
      
      if(D3===1'b1 && RD===1'b0 && SE===1'b1 && SI===1'b0)
      // seq arc CK --> Q1
      (posedge CK => (Q1 : RD))  = (1.0,1.0);
      
      if(D3===1'b0 && RD===1'b0 && SI===1'b1)
      // seq arc CK --> Q1
      (posedge CK => (Q1 : RD))  = (1.0,1.0);
      
      if(D3===1'b0 && RD===1'b1 && SE===1'b0 && SI===1'b0)
      // seq arc CK --> Q1
      (posedge CK => (Q1 : RD))  = (1.0,1.0);
      
      if(D3===1'b0 && RD===1'b1 && SE===1'b0 && SI===1'b1)
      // seq arc CK --> Q1
      (posedge CK => (Q1 : RD))  = (1.0,1.0);
      
      if(D3===1'b0 && RD===1'b1 && SE===1'b1)
      // seq arc CK --> Q1
      (posedge CK => (Q1 : RD))  = (1.0,1.0);
      
      if(D3===1'b1 && RD===1'b0 && SI===1'b1)
      // seq arc CK --> Q1
      (posedge CK => (Q1 : RD))  = (1.0,1.0);
      
      if(D3===1'b1 && RD===1'b1 && SE===1'b0 && SI===1'b0)
      // seq arc CK --> Q1
      (posedge CK => (Q1 : RD))  = (1.0,1.0);
      
      if(D3===1'b1 && RD===1'b1 && SE===1'b0 && SI===1'b1)
      // seq arc CK --> Q1
      (posedge CK => (Q1 : RD))  = (1.0,1.0);
      
      if(D3===1'b1 && RD===1'b1 && SE===1'b1)
      // seq arc CK --> Q1
      (posedge CK => (Q1 : RD))  = (1.0,1.0);
      
      ifnone
      // seq arc CK --> Q1
      (posedge CK => (Q1 : RD))  = (1.0,1.0);
      
      if(D3===1'b0 && RD===1'b0 && SE===1'b0 && SI===1'b0)
      // seq arc CK --> Q2
      (posedge CK => (Q2 : RD))  = (1.0,1.0);
      
      if(D3===1'b0 && RD===1'b0 && SE===1'b1 && SI===1'b0)
      // seq arc CK --> Q2
      (posedge CK => (Q2 : RD))  = (1.0,1.0);
      
      if(D3===1'b1 && RD===1'b0 && SE===1'b0 && SI===1'b0)
      // seq arc CK --> Q2
      (posedge CK => (Q2 : RD))  = (1.0,1.0);
      
      if(D3===1'b1 && RD===1'b0 && SE===1'b1 && SI===1'b0)
      // seq arc CK --> Q2
      (posedge CK => (Q2 : RD))  = (1.0,1.0);
      
      if(D3===1'b0 && RD===1'b0 && SI===1'b1)
      // seq arc CK --> Q2
      (posedge CK => (Q2 : RD))  = (1.0,1.0);
      
      if(D3===1'b0 && RD===1'b1 && SE===1'b0 && SI===1'b0)
      // seq arc CK --> Q2
      (posedge CK => (Q2 : RD))  = (1.0,1.0);
      
      if(D3===1'b0 && RD===1'b1 && SE===1'b0 && SI===1'b1)
      // seq arc CK --> Q2
      (posedge CK => (Q2 : RD))  = (1.0,1.0);
      
      if(D3===1'b0 && RD===1'b1 && SE===1'b1)
      // seq arc CK --> Q2
      (posedge CK => (Q2 : RD))  = (1.0,1.0);
      
      if(D3===1'b1 && RD===1'b0 && SI===1'b1)
      // seq arc CK --> Q2
      (posedge CK => (Q2 : RD))  = (1.0,1.0);
      
      if(D3===1'b1 && RD===1'b1 && SE===1'b0 && SI===1'b0)
      // seq arc CK --> Q2
      (posedge CK => (Q2 : RD))  = (1.0,1.0);
      
      if(D3===1'b1 && RD===1'b1 && SE===1'b0 && SI===1'b1)
      // seq arc CK --> Q2
      (posedge CK => (Q2 : RD))  = (1.0,1.0);
      
      if(D3===1'b1 && RD===1'b1 && SE===1'b1)
      // seq arc CK --> Q2
      (posedge CK => (Q2 : RD))  = (1.0,1.0);
      
      ifnone
      // seq arc CK --> Q2
      (posedge CK => (Q2 : RD))  = (1.0,1.0);
      
      if(D3===1'b0 && RD===1'b0 && SE===1'b1 && SI===1'b0)
      // seq arc CK --> Q3
      (posedge CK => (Q3 : RD))  = (1.0,1.0);
      
      if(D3===1'b0 && RD===1'b1 && SE===1'b1 && SI===1'b0)
      // seq arc CK --> Q3
      (posedge CK => (Q3 : RD))  = (1.0,1.0);
      
      if(D3===1'b1 && RD===1'b0 && SE===1'b0 && SI===1'b0)
      // seq arc CK --> Q3
      (posedge CK => (Q3 : RD))  = (1.0,1.0);
      
      if(D3===1'b1 && RD===1'b0 && SE===1'b1 && SI===1'b0)
      // seq arc CK --> Q3
      (posedge CK => (Q3 : RD))  = (1.0,1.0);
      
      if(D3===1'b0 && RD===1'b0 && SI===1'b1)
      // seq arc CK --> Q3
      (posedge CK => (Q3 : RD))  = (1.0,1.0);
      
      if(D3===1'b0 && RD===1'b1 && SI===1'b1)
      // seq arc CK --> Q3
      (posedge CK => (Q3 : RD))  = (1.0,1.0);
      
      if(D3===1'b1 && RD===1'b0 && SI===1'b1)
      // seq arc CK --> Q3
      (posedge CK => (Q3 : RD))  = (1.0,1.0);
      
      if(D3===1'b1 && RD===1'b1 && SE===1'b0 && SI===1'b1 || D3===1'b0 && RD===1'b0 && SE===1'b0 && SI===1'b0)
      // seq arc CK --> Q3
      (posedge CK => (Q3 : RD))  = (1.0,1.0);
      
      if(D3===1'b1 && RD===1'b1 && SE===1'b1)
      // seq arc CK --> Q3
      (posedge CK => (Q3 : RD))  = (1.0,1.0);
      
      if(RD===1'b1 && SE===1'b0 && SI===1'b0)
      // seq arc CK --> Q3
      (posedge CK => (Q3 : RD))  = (1.0,1.0);
      
      ifnone
      // seq arc CK --> Q3
      (posedge CK => (Q3 : RD))  = (1.0,1.0);
      
      // hold RD-HL CK-LH
      $hold(posedge CK &&& (ENABLE_D0_AND_D1_AND_D2_AND_D3_AND_NOT_SE_AND_NOT_SI === 1'b1),
      negedge RD &&& (ENABLE_D0_AND_D1_AND_D2_AND_D3_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold RD-LH CK-LH
      $hold(posedge CK &&& (ENABLE_D0_AND_D1_AND_D2_AND_D3_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge RD &&& (ENABLE_D0_AND_D1_AND_D2_AND_D3_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup RD-HL CK-LH
      $setup(negedge RD &&& (ENABLE_D0_AND_D1_AND_D2_AND_D3_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_D0_AND_D1_AND_D2_AND_D3_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup RD-LH CK-LH
      $setup(posedge RD &&& (ENABLE_D0_AND_D1_AND_D2_AND_D3_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_D0_AND_D1_AND_D2_AND_D3_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold RD-HL CK-LH
      $hold(posedge CK &&& (ENABLE_D0_AND_D1_AND_D2_AND_D3_AND_NOT_SE_AND_SI === 1'b1),
      negedge RD &&& (ENABLE_D0_AND_D1_AND_D2_AND_D3_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // hold RD-LH CK-LH
      $hold(posedge CK &&& (ENABLE_D0_AND_D1_AND_D2_AND_D3_AND_NOT_SE_AND_SI === 1'b1),
      posedge RD &&& (ENABLE_D0_AND_D1_AND_D2_AND_D3_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // setup RD-HL CK-LH
      $setup(negedge RD &&& (ENABLE_D0_AND_D1_AND_D2_AND_D3_AND_NOT_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_D0_AND_D1_AND_D2_AND_D3_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // setup RD-LH CK-LH
      $setup(posedge RD &&& (ENABLE_D0_AND_D1_AND_D2_AND_D3_AND_NOT_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_D0_AND_D1_AND_D2_AND_D3_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // hold SE-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_NOT_D2_AND_NOT_D3_AND_NOT_RD_AND_SI === 1'b1),
      posedge SE &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_NOT_D2_AND_NOT_D3_AND_NOT_RD_AND_SI === 1'b1),1.0);
      
      // setup SE-HL CK-LH
      $setup(negedge SE &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_NOT_D2_AND_NOT_D3_AND_NOT_RD_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_NOT_D2_AND_NOT_D3_AND_NOT_RD_AND_SI === 1'b1),1.0);
      
      // hold SE-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_NOT_D2_AND_NOT_D3_AND_RD_AND_SI === 1'b1),
      posedge SE &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_NOT_D2_AND_NOT_D3_AND_RD_AND_SI === 1'b1),1.0);
      
      // setup SE-HL CK-LH
      $setup(negedge SE &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_NOT_D2_AND_NOT_D3_AND_RD_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_NOT_D2_AND_NOT_D3_AND_RD_AND_SI === 1'b1),1.0);
      
      // hold SE-LH CK-LH
      $hold(posedge CK &&& (ENABLE_D0_AND_D1_AND_D2_AND_D3_AND_NOT_RD_AND_SI === 1'b1),
      posedge SE &&& (ENABLE_D0_AND_D1_AND_D2_AND_D3_AND_NOT_RD_AND_SI === 1'b1),1.0);
      
      // setup SE-HL CK-LH
      $setup(negedge SE &&& (ENABLE_D0_AND_D1_AND_D2_AND_D3_AND_NOT_RD_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_D0_AND_D1_AND_D2_AND_D3_AND_NOT_RD_AND_SI === 1'b1),1.0);
      
      // hold SE-LH CK-LH
      $hold(posedge CK &&& (ENABLE_D0_AND_D1_AND_D2_AND_D3_AND_RD_AND_NOT_SI === 1'b1),
      posedge SE &&& (ENABLE_D0_AND_D1_AND_D2_AND_D3_AND_RD_AND_NOT_SI === 1'b1),1.0);
      
      // setup SE-HL CK-LH
      $setup(negedge SE &&& (ENABLE_D0_AND_D1_AND_D2_AND_D3_AND_RD_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_D0_AND_D1_AND_D2_AND_D3_AND_RD_AND_NOT_SI === 1'b1),1.0);
      
      // setup SE-LH CK-LH
      $setup(posedge SE &&& (ENABLE_NOT_D0_AND_D1_AND_NOT_D2_AND_D3_AND_RD_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D0_AND_D1_AND_NOT_D2_AND_D3_AND_RD_AND_SI === 1'b1),1.0);
      
      // setup SE-LH CK-LH
      $setup(posedge SE &&& (ENABLE_D0_AND_NOT_D1_AND_D2_AND_NOT_D3_AND_RD_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_D0_AND_NOT_D1_AND_D2_AND_NOT_D3_AND_RD_AND_NOT_SI === 1'b1),1.0);
      
      // hold D0-HL CK-LH
      $hold(posedge CK &&& (ENABLE_RD_AND_NOT_SE_AND_NOT_SI === 1'b1),
      negedge D0 &&& (ENABLE_RD_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold D0-LH CK-LH
      $hold(posedge CK &&& (ENABLE_RD_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge D0 &&& (ENABLE_RD_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup D0-HL CK-LH
      $setup(negedge D0 &&& (ENABLE_RD_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_RD_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup D0-LH CK-LH
      $setup(posedge D0 &&& (ENABLE_RD_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_RD_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold D0-HL CK-LH
      $hold(posedge CK &&& (ENABLE_RD_AND_NOT_SE_AND_SI === 1'b1),
      negedge D0 &&& (ENABLE_RD_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // hold D0-LH CK-LH
      $hold(posedge CK &&& (ENABLE_RD_AND_NOT_SE_AND_SI === 1'b1),
      posedge D0 &&& (ENABLE_RD_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // setup D0-HL CK-LH
      $setup(negedge D0 &&& (ENABLE_RD_AND_NOT_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_RD_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // setup D0-LH CK-LH
      $setup(posedge D0 &&& (ENABLE_RD_AND_NOT_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_RD_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // hold D1-HL CK-LH
      $hold(posedge CK &&& (ENABLE_RD_AND_NOT_SE_AND_NOT_SI === 1'b1),
      negedge D1 &&& (ENABLE_RD_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold D1-LH CK-LH
      $hold(posedge CK &&& (ENABLE_RD_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge D1 &&& (ENABLE_RD_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup D1-HL CK-LH
      $setup(negedge D1 &&& (ENABLE_RD_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_RD_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup D1-LH CK-LH
      $setup(posedge D1 &&& (ENABLE_RD_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_RD_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold D1-HL CK-LH
      $hold(posedge CK &&& (ENABLE_RD_AND_NOT_SE_AND_SI === 1'b1),
      negedge D1 &&& (ENABLE_RD_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // hold D1-LH CK-LH
      $hold(posedge CK &&& (ENABLE_RD_AND_NOT_SE_AND_SI === 1'b1),
      posedge D1 &&& (ENABLE_RD_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // setup D1-HL CK-LH
      $setup(negedge D1 &&& (ENABLE_RD_AND_NOT_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_RD_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // setup D1-LH CK-LH
      $setup(posedge D1 &&& (ENABLE_RD_AND_NOT_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_RD_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // hold D2-HL CK-LH
      $hold(posedge CK &&& (ENABLE_RD_AND_NOT_SE_AND_NOT_SI === 1'b1),
      negedge D2 &&& (ENABLE_RD_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold D2-LH CK-LH
      $hold(posedge CK &&& (ENABLE_RD_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge D2 &&& (ENABLE_RD_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup D2-HL CK-LH
      $setup(negedge D2 &&& (ENABLE_RD_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_RD_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup D2-LH CK-LH
      $setup(posedge D2 &&& (ENABLE_RD_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_RD_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold D2-HL CK-LH
      $hold(posedge CK &&& (ENABLE_RD_AND_NOT_SE_AND_SI === 1'b1),
      negedge D2 &&& (ENABLE_RD_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // hold D2-LH CK-LH
      $hold(posedge CK &&& (ENABLE_RD_AND_NOT_SE_AND_SI === 1'b1),
      posedge D2 &&& (ENABLE_RD_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // setup D2-HL CK-LH
      $setup(negedge D2 &&& (ENABLE_RD_AND_NOT_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_RD_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // setup D2-LH CK-LH
      $setup(posedge D2 &&& (ENABLE_RD_AND_NOT_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_RD_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // hold D3-HL CK-LH
      $hold(posedge CK &&& (ENABLE_RD_AND_NOT_SE_AND_NOT_SI === 1'b1),
      negedge D3 &&& (ENABLE_RD_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold D3-LH CK-LH
      $hold(posedge CK &&& (ENABLE_RD_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge D3 &&& (ENABLE_RD_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup D3-HL CK-LH
      $setup(negedge D3 &&& (ENABLE_RD_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_RD_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup D3-LH CK-LH
      $setup(posedge D3 &&& (ENABLE_RD_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_RD_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold D3-HL CK-LH
      $hold(posedge CK &&& (ENABLE_RD_AND_NOT_SE_AND_SI === 1'b1),
      negedge D3 &&& (ENABLE_RD_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // hold D3-LH CK-LH
      $hold(posedge CK &&& (ENABLE_RD_AND_NOT_SE_AND_SI === 1'b1),
      posedge D3 &&& (ENABLE_RD_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // setup D3-HL CK-LH
      $setup(negedge D3 &&& (ENABLE_RD_AND_NOT_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_RD_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // setup D3-LH CK-LH
      $setup(posedge D3 &&& (ENABLE_RD_AND_NOT_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_RD_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine
`celldefine
module SAEDRVT14_FSDPSYNRBQM4_V2LPY2_1( CK, SI, SE, RD, D0, D1, D2, D3, Q0, Q1, Q2, Q3 );
input CK, RD, SE, SI;
input D0, D1, D2, D3;
output Q0, Q1, Q2, Q3;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_FSDPSYNRBQM4_V2LPY2_1_func SAEDRVT14_FSDPSYNRBQM4_V2LPY2_1_behav_inst(.CK(CK),.SI(SI),.SE(SE),.RD(RD),.D0(D0),.D1(D1),.D2(D2),.D3(D3),.Q0(Q0),.Q1(Q1),.Q2(Q2),.Q3(Q3));
`else
   SAEDRVT14_FSDPSYNRBQM4_V2LPY2_1_func SAEDRVT14_FSDPSYNRBQM4_V2LPY2_1_inst(.CK(CK),.SI(SI),.SE(SE),.RD(RD),.D0(D0),.D1(D1),.D2(D2),.D3(D3),.Q0(Q0),.Q1(Q1),.Q2(Q2),.Q3(Q3));
   // spec_gates_begin
   and MGM_G0(MGM_W0,D1,D0);
   and MGM_G1(MGM_W1,D2,MGM_W0);
   and MGM_G2(MGM_W2,D3,MGM_W1);
   not MGM_G3(MGM_W3,SE);
   and MGM_G4(MGM_W4,MGM_W3,MGM_W2);
   not MGM_G5(MGM_W5,SI);
   and MGM_G6(ENABLE_D0_AND_D1_AND_D2_AND_D3_AND_NOT_SE_AND_NOT_SI,MGM_W5,MGM_W4);
   and MGM_G7(MGM_W6,D1,D0);
   and MGM_G8(MGM_W7,D2,MGM_W6);
   and MGM_G9(MGM_W8,D3,MGM_W7);
   not MGM_G10(MGM_W9,SE);
   and MGM_G11(MGM_W10,MGM_W9,MGM_W8);
   and MGM_G12(ENABLE_D0_AND_D1_AND_D2_AND_D3_AND_NOT_SE_AND_SI,SI,MGM_W10);
   not MGM_G13(MGM_W11,D0);
   not MGM_G14(MGM_W12,D1);
   and MGM_G15(MGM_W13,MGM_W12,MGM_W11);
   not MGM_G16(MGM_W14,D2);
   and MGM_G17(MGM_W15,MGM_W14,MGM_W13);
   not MGM_G18(MGM_W16,D3);
   and MGM_G19(MGM_W17,MGM_W16,MGM_W15);
   not MGM_G20(MGM_W18,RD);
   and MGM_G21(MGM_W19,MGM_W18,MGM_W17);
   and MGM_G22(ENABLE_NOT_D0_AND_NOT_D1_AND_NOT_D2_AND_NOT_D3_AND_NOT_RD_AND_SI,SI,MGM_W19);
   not MGM_G23(MGM_W20,D0);
   not MGM_G24(MGM_W21,D1);
   and MGM_G25(MGM_W22,MGM_W21,MGM_W20);
   not MGM_G26(MGM_W23,D2);
   and MGM_G27(MGM_W24,MGM_W23,MGM_W22);
   not MGM_G28(MGM_W25,D3);
   and MGM_G29(MGM_W26,MGM_W25,MGM_W24);
   and MGM_G30(MGM_W27,RD,MGM_W26);
   and MGM_G31(ENABLE_NOT_D0_AND_NOT_D1_AND_NOT_D2_AND_NOT_D3_AND_RD_AND_SI,SI,MGM_W27);
   and MGM_G32(MGM_W28,D1,D0);
   and MGM_G33(MGM_W29,D2,MGM_W28);
   and MGM_G34(MGM_W30,D3,MGM_W29);
   not MGM_G35(MGM_W31,RD);
   and MGM_G36(MGM_W32,MGM_W31,MGM_W30);
   and MGM_G37(ENABLE_D0_AND_D1_AND_D2_AND_D3_AND_NOT_RD_AND_SI,SI,MGM_W32);
   and MGM_G38(MGM_W33,D1,D0);
   and MGM_G39(MGM_W34,D2,MGM_W33);
   and MGM_G40(MGM_W35,D3,MGM_W34);
   and MGM_G41(MGM_W36,RD,MGM_W35);
   not MGM_G42(MGM_W37,SI);
   and MGM_G43(ENABLE_D0_AND_D1_AND_D2_AND_D3_AND_RD_AND_NOT_SI,MGM_W37,MGM_W36);
   not MGM_G44(MGM_W38,D0);
   and MGM_G45(MGM_W39,D1,MGM_W38);
   not MGM_G46(MGM_W40,D2);
   and MGM_G47(MGM_W41,MGM_W40,MGM_W39);
   and MGM_G48(MGM_W42,D3,MGM_W41);
   and MGM_G49(MGM_W43,RD,MGM_W42);
   and MGM_G50(ENABLE_NOT_D0_AND_D1_AND_NOT_D2_AND_D3_AND_RD_AND_SI,SI,MGM_W43);
   not MGM_G51(MGM_W44,D1);
   and MGM_G52(MGM_W45,MGM_W44,D0);
   and MGM_G53(MGM_W46,D2,MGM_W45);
   not MGM_G54(MGM_W47,D3);
   and MGM_G55(MGM_W48,MGM_W47,MGM_W46);
   and MGM_G56(MGM_W49,RD,MGM_W48);
   not MGM_G57(MGM_W50,SI);
   and MGM_G58(ENABLE_D0_AND_NOT_D1_AND_D2_AND_NOT_D3_AND_RD_AND_NOT_SI,MGM_W50,MGM_W49);
   not MGM_G59(MGM_W51,SE);
   and MGM_G60(MGM_W52,MGM_W51,RD);
   not MGM_G61(MGM_W53,SI);
   and MGM_G62(ENABLE_RD_AND_NOT_SE_AND_NOT_SI,MGM_W53,MGM_W52);
   not MGM_G63(MGM_W54,SE);
   and MGM_G64(MGM_W55,MGM_W54,RD);
   and MGM_G65(ENABLE_RD_AND_NOT_SE_AND_SI,SI,MGM_W55);
   // spec_gates_end
   // specify_block_begin
   specify

      if(D3===1'b0 && RD===1'b0 && SE===1'b0 && SI===1'b0)
      // seq arc CK --> Q0
      (posedge CK => (Q0 : RD))  = (1.0,1.0);
      
      if(D3===1'b0 && RD===1'b0 && SE===1'b1 && SI===1'b0)
      // seq arc CK --> Q0
      (posedge CK => (Q0 : RD))  = (1.0,1.0);
      
      if(D3===1'b1 && RD===1'b0 && SE===1'b0 && SI===1'b0)
      // seq arc CK --> Q0
      (posedge CK => (Q0 : RD))  = (1.0,1.0);
      
      if(D3===1'b1 && RD===1'b0 && SE===1'b1 && SI===1'b0)
      // seq arc CK --> Q0
      (posedge CK => (Q0 : RD))  = (1.0,1.0);
      
      if(D3===1'b0 && RD===1'b0 && SI===1'b1)
      // seq arc CK --> Q0
      (posedge CK => (Q0 : RD))  = (1.0,1.0);
      
      if(D3===1'b0 && RD===1'b1 && SE===1'b0 && SI===1'b0)
      // seq arc CK --> Q0
      (posedge CK => (Q0 : RD))  = (1.0,1.0);
      
      if(D3===1'b0 && RD===1'b1 && SE===1'b0 && SI===1'b1)
      // seq arc CK --> Q0
      (posedge CK => (Q0 : RD))  = (1.0,1.0);
      
      if(D3===1'b0 && RD===1'b1 && SE===1'b1)
      // seq arc CK --> Q0
      (posedge CK => (Q0 : RD))  = (1.0,1.0);
      
      if(D3===1'b1 && RD===1'b0 && SI===1'b1)
      // seq arc CK --> Q0
      (posedge CK => (Q0 : RD))  = (1.0,1.0);
      
      if(D3===1'b1 && RD===1'b1 && SE===1'b0 && SI===1'b0)
      // seq arc CK --> Q0
      (posedge CK => (Q0 : RD))  = (1.0,1.0);
      
      if(D3===1'b1 && RD===1'b1 && SE===1'b0 && SI===1'b1)
      // seq arc CK --> Q0
      (posedge CK => (Q0 : RD))  = (1.0,1.0);
      
      if(D3===1'b1 && RD===1'b1 && SE===1'b1)
      // seq arc CK --> Q0
      (posedge CK => (Q0 : RD))  = (1.0,1.0);
      
      ifnone
      // seq arc CK --> Q0
      (posedge CK => (Q0 : RD))  = (1.0,1.0);
      
      if(D3===1'b0 && RD===1'b0 && SE===1'b0 && SI===1'b0)
      // seq arc CK --> Q1
      (posedge CK => (Q1 : RD))  = (1.0,1.0);
      
      if(D3===1'b0 && RD===1'b0 && SE===1'b1 && SI===1'b0)
      // seq arc CK --> Q1
      (posedge CK => (Q1 : RD))  = (1.0,1.0);
      
      if(D3===1'b1 && RD===1'b0 && SE===1'b0 && SI===1'b0)
      // seq arc CK --> Q1
      (posedge CK => (Q1 : RD))  = (1.0,1.0);
      
      if(D3===1'b1 && RD===1'b0 && SE===1'b1 && SI===1'b0)
      // seq arc CK --> Q1
      (posedge CK => (Q1 : RD))  = (1.0,1.0);
      
      if(D3===1'b0 && RD===1'b0 && SI===1'b1)
      // seq arc CK --> Q1
      (posedge CK => (Q1 : RD))  = (1.0,1.0);
      
      if(D3===1'b0 && RD===1'b1 && SE===1'b0 && SI===1'b0)
      // seq arc CK --> Q1
      (posedge CK => (Q1 : RD))  = (1.0,1.0);
      
      if(D3===1'b0 && RD===1'b1 && SE===1'b0 && SI===1'b1)
      // seq arc CK --> Q1
      (posedge CK => (Q1 : RD))  = (1.0,1.0);
      
      if(D3===1'b0 && RD===1'b1 && SE===1'b1)
      // seq arc CK --> Q1
      (posedge CK => (Q1 : RD))  = (1.0,1.0);
      
      if(D3===1'b1 && RD===1'b0 && SI===1'b1)
      // seq arc CK --> Q1
      (posedge CK => (Q1 : RD))  = (1.0,1.0);
      
      if(D3===1'b1 && RD===1'b1 && SE===1'b0 && SI===1'b0)
      // seq arc CK --> Q1
      (posedge CK => (Q1 : RD))  = (1.0,1.0);
      
      if(D3===1'b1 && RD===1'b1 && SE===1'b0 && SI===1'b1)
      // seq arc CK --> Q1
      (posedge CK => (Q1 : RD))  = (1.0,1.0);
      
      if(D3===1'b1 && RD===1'b1 && SE===1'b1)
      // seq arc CK --> Q1
      (posedge CK => (Q1 : RD))  = (1.0,1.0);
      
      ifnone
      // seq arc CK --> Q1
      (posedge CK => (Q1 : RD))  = (1.0,1.0);
      
      if(D3===1'b0 && RD===1'b0 && SE===1'b0 && SI===1'b0)
      // seq arc CK --> Q2
      (posedge CK => (Q2 : RD))  = (1.0,1.0);
      
      if(D3===1'b0 && RD===1'b0 && SE===1'b1 && SI===1'b0)
      // seq arc CK --> Q2
      (posedge CK => (Q2 : RD))  = (1.0,1.0);
      
      if(D3===1'b1 && RD===1'b0 && SE===1'b0 && SI===1'b0)
      // seq arc CK --> Q2
      (posedge CK => (Q2 : RD))  = (1.0,1.0);
      
      if(D3===1'b1 && RD===1'b0 && SE===1'b1 && SI===1'b0)
      // seq arc CK --> Q2
      (posedge CK => (Q2 : RD))  = (1.0,1.0);
      
      if(D3===1'b0 && RD===1'b0 && SI===1'b1)
      // seq arc CK --> Q2
      (posedge CK => (Q2 : RD))  = (1.0,1.0);
      
      if(D3===1'b0 && RD===1'b1 && SE===1'b0 && SI===1'b0)
      // seq arc CK --> Q2
      (posedge CK => (Q2 : RD))  = (1.0,1.0);
      
      if(D3===1'b0 && RD===1'b1 && SE===1'b0 && SI===1'b1)
      // seq arc CK --> Q2
      (posedge CK => (Q2 : RD))  = (1.0,1.0);
      
      if(D3===1'b0 && RD===1'b1 && SE===1'b1)
      // seq arc CK --> Q2
      (posedge CK => (Q2 : RD))  = (1.0,1.0);
      
      if(D3===1'b1 && RD===1'b0 && SI===1'b1)
      // seq arc CK --> Q2
      (posedge CK => (Q2 : RD))  = (1.0,1.0);
      
      if(D3===1'b1 && RD===1'b1 && SE===1'b0 && SI===1'b0)
      // seq arc CK --> Q2
      (posedge CK => (Q2 : RD))  = (1.0,1.0);
      
      if(D3===1'b1 && RD===1'b1 && SE===1'b0 && SI===1'b1)
      // seq arc CK --> Q2
      (posedge CK => (Q2 : RD))  = (1.0,1.0);
      
      if(D3===1'b1 && RD===1'b1 && SE===1'b1)
      // seq arc CK --> Q2
      (posedge CK => (Q2 : RD))  = (1.0,1.0);
      
      ifnone
      // seq arc CK --> Q2
      (posedge CK => (Q2 : RD))  = (1.0,1.0);
      
      if(D3===1'b0 && RD===1'b0 && SE===1'b1 && SI===1'b0)
      // seq arc CK --> Q3
      (posedge CK => (Q3 : RD))  = (1.0,1.0);
      
      if(D3===1'b0 && RD===1'b1 && SE===1'b1 && SI===1'b0)
      // seq arc CK --> Q3
      (posedge CK => (Q3 : RD))  = (1.0,1.0);
      
      if(D3===1'b1 && RD===1'b0 && SE===1'b0 && SI===1'b0)
      // seq arc CK --> Q3
      (posedge CK => (Q3 : RD))  = (1.0,1.0);
      
      if(D3===1'b1 && RD===1'b0 && SE===1'b1 && SI===1'b0)
      // seq arc CK --> Q3
      (posedge CK => (Q3 : RD))  = (1.0,1.0);
      
      if(D3===1'b0 && RD===1'b0 && SI===1'b1)
      // seq arc CK --> Q3
      (posedge CK => (Q3 : RD))  = (1.0,1.0);
      
      if(D3===1'b0 && RD===1'b1 && SI===1'b1)
      // seq arc CK --> Q3
      (posedge CK => (Q3 : RD))  = (1.0,1.0);
      
      if(D3===1'b1 && RD===1'b0 && SI===1'b1)
      // seq arc CK --> Q3
      (posedge CK => (Q3 : RD))  = (1.0,1.0);
      
      if(D3===1'b1 && RD===1'b1 && SE===1'b0 && SI===1'b1 || D3===1'b0 && RD===1'b0 && SE===1'b0 && SI===1'b0)
      // seq arc CK --> Q3
      (posedge CK => (Q3 : RD))  = (1.0,1.0);
      
      if(D3===1'b1 && RD===1'b1 && SE===1'b1)
      // seq arc CK --> Q3
      (posedge CK => (Q3 : RD))  = (1.0,1.0);
      
      if(RD===1'b1 && SE===1'b0 && SI===1'b0)
      // seq arc CK --> Q3
      (posedge CK => (Q3 : RD))  = (1.0,1.0);
      
      ifnone
      // seq arc CK --> Q3
      (posedge CK => (Q3 : RD))  = (1.0,1.0);
      
      // hold RD-HL CK-LH
      $hold(posedge CK &&& (ENABLE_D0_AND_D1_AND_D2_AND_D3_AND_NOT_SE_AND_NOT_SI === 1'b1),
      negedge RD &&& (ENABLE_D0_AND_D1_AND_D2_AND_D3_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold RD-LH CK-LH
      $hold(posedge CK &&& (ENABLE_D0_AND_D1_AND_D2_AND_D3_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge RD &&& (ENABLE_D0_AND_D1_AND_D2_AND_D3_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup RD-HL CK-LH
      $setup(negedge RD &&& (ENABLE_D0_AND_D1_AND_D2_AND_D3_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_D0_AND_D1_AND_D2_AND_D3_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup RD-LH CK-LH
      $setup(posedge RD &&& (ENABLE_D0_AND_D1_AND_D2_AND_D3_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_D0_AND_D1_AND_D2_AND_D3_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold RD-HL CK-LH
      $hold(posedge CK &&& (ENABLE_D0_AND_D1_AND_D2_AND_D3_AND_NOT_SE_AND_SI === 1'b1),
      negedge RD &&& (ENABLE_D0_AND_D1_AND_D2_AND_D3_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // hold RD-LH CK-LH
      $hold(posedge CK &&& (ENABLE_D0_AND_D1_AND_D2_AND_D3_AND_NOT_SE_AND_SI === 1'b1),
      posedge RD &&& (ENABLE_D0_AND_D1_AND_D2_AND_D3_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // setup RD-HL CK-LH
      $setup(negedge RD &&& (ENABLE_D0_AND_D1_AND_D2_AND_D3_AND_NOT_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_D0_AND_D1_AND_D2_AND_D3_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // setup RD-LH CK-LH
      $setup(posedge RD &&& (ENABLE_D0_AND_D1_AND_D2_AND_D3_AND_NOT_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_D0_AND_D1_AND_D2_AND_D3_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // hold SE-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_NOT_D2_AND_NOT_D3_AND_NOT_RD_AND_SI === 1'b1),
      posedge SE &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_NOT_D2_AND_NOT_D3_AND_NOT_RD_AND_SI === 1'b1),1.0);
      
      // setup SE-HL CK-LH
      $setup(negedge SE &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_NOT_D2_AND_NOT_D3_AND_NOT_RD_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_NOT_D2_AND_NOT_D3_AND_NOT_RD_AND_SI === 1'b1),1.0);
      
      // hold SE-LH CK-LH
      $hold(posedge CK &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_NOT_D2_AND_NOT_D3_AND_RD_AND_SI === 1'b1),
      posedge SE &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_NOT_D2_AND_NOT_D3_AND_RD_AND_SI === 1'b1),1.0);
      
      // setup SE-HL CK-LH
      $setup(negedge SE &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_NOT_D2_AND_NOT_D3_AND_RD_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_NOT_D2_AND_NOT_D3_AND_RD_AND_SI === 1'b1),1.0);
      
      // hold SE-LH CK-LH
      $hold(posedge CK &&& (ENABLE_D0_AND_D1_AND_D2_AND_D3_AND_NOT_RD_AND_SI === 1'b1),
      posedge SE &&& (ENABLE_D0_AND_D1_AND_D2_AND_D3_AND_NOT_RD_AND_SI === 1'b1),1.0);
      
      // setup SE-HL CK-LH
      $setup(negedge SE &&& (ENABLE_D0_AND_D1_AND_D2_AND_D3_AND_NOT_RD_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_D0_AND_D1_AND_D2_AND_D3_AND_NOT_RD_AND_SI === 1'b1),1.0);
      
      // hold SE-LH CK-LH
      $hold(posedge CK &&& (ENABLE_D0_AND_D1_AND_D2_AND_D3_AND_RD_AND_NOT_SI === 1'b1),
      posedge SE &&& (ENABLE_D0_AND_D1_AND_D2_AND_D3_AND_RD_AND_NOT_SI === 1'b1),1.0);
      
      // setup SE-HL CK-LH
      $setup(negedge SE &&& (ENABLE_D0_AND_D1_AND_D2_AND_D3_AND_RD_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_D0_AND_D1_AND_D2_AND_D3_AND_RD_AND_NOT_SI === 1'b1),1.0);
      
      // setup SE-LH CK-LH
      $setup(posedge SE &&& (ENABLE_NOT_D0_AND_D1_AND_NOT_D2_AND_D3_AND_RD_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_NOT_D0_AND_D1_AND_NOT_D2_AND_D3_AND_RD_AND_SI === 1'b1),1.0);
      
      // setup SE-LH CK-LH
      $setup(posedge SE &&& (ENABLE_D0_AND_NOT_D1_AND_D2_AND_NOT_D3_AND_RD_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_D0_AND_NOT_D1_AND_D2_AND_NOT_D3_AND_RD_AND_NOT_SI === 1'b1),1.0);
      
      // hold D0-HL CK-LH
      $hold(posedge CK &&& (ENABLE_RD_AND_NOT_SE_AND_NOT_SI === 1'b1),
      negedge D0 &&& (ENABLE_RD_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold D0-LH CK-LH
      $hold(posedge CK &&& (ENABLE_RD_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge D0 &&& (ENABLE_RD_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup D0-HL CK-LH
      $setup(negedge D0 &&& (ENABLE_RD_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_RD_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup D0-LH CK-LH
      $setup(posedge D0 &&& (ENABLE_RD_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_RD_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold D0-HL CK-LH
      $hold(posedge CK &&& (ENABLE_RD_AND_NOT_SE_AND_SI === 1'b1),
      negedge D0 &&& (ENABLE_RD_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // hold D0-LH CK-LH
      $hold(posedge CK &&& (ENABLE_RD_AND_NOT_SE_AND_SI === 1'b1),
      posedge D0 &&& (ENABLE_RD_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // setup D0-HL CK-LH
      $setup(negedge D0 &&& (ENABLE_RD_AND_NOT_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_RD_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // setup D0-LH CK-LH
      $setup(posedge D0 &&& (ENABLE_RD_AND_NOT_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_RD_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // hold D1-HL CK-LH
      $hold(posedge CK &&& (ENABLE_RD_AND_NOT_SE_AND_NOT_SI === 1'b1),
      negedge D1 &&& (ENABLE_RD_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold D1-LH CK-LH
      $hold(posedge CK &&& (ENABLE_RD_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge D1 &&& (ENABLE_RD_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup D1-HL CK-LH
      $setup(negedge D1 &&& (ENABLE_RD_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_RD_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup D1-LH CK-LH
      $setup(posedge D1 &&& (ENABLE_RD_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_RD_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold D1-HL CK-LH
      $hold(posedge CK &&& (ENABLE_RD_AND_NOT_SE_AND_SI === 1'b1),
      negedge D1 &&& (ENABLE_RD_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // hold D1-LH CK-LH
      $hold(posedge CK &&& (ENABLE_RD_AND_NOT_SE_AND_SI === 1'b1),
      posedge D1 &&& (ENABLE_RD_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // setup D1-HL CK-LH
      $setup(negedge D1 &&& (ENABLE_RD_AND_NOT_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_RD_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // setup D1-LH CK-LH
      $setup(posedge D1 &&& (ENABLE_RD_AND_NOT_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_RD_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // hold D2-HL CK-LH
      $hold(posedge CK &&& (ENABLE_RD_AND_NOT_SE_AND_NOT_SI === 1'b1),
      negedge D2 &&& (ENABLE_RD_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold D2-LH CK-LH
      $hold(posedge CK &&& (ENABLE_RD_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge D2 &&& (ENABLE_RD_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup D2-HL CK-LH
      $setup(negedge D2 &&& (ENABLE_RD_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_RD_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup D2-LH CK-LH
      $setup(posedge D2 &&& (ENABLE_RD_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_RD_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold D2-HL CK-LH
      $hold(posedge CK &&& (ENABLE_RD_AND_NOT_SE_AND_SI === 1'b1),
      negedge D2 &&& (ENABLE_RD_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // hold D2-LH CK-LH
      $hold(posedge CK &&& (ENABLE_RD_AND_NOT_SE_AND_SI === 1'b1),
      posedge D2 &&& (ENABLE_RD_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // setup D2-HL CK-LH
      $setup(negedge D2 &&& (ENABLE_RD_AND_NOT_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_RD_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // setup D2-LH CK-LH
      $setup(posedge D2 &&& (ENABLE_RD_AND_NOT_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_RD_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // hold D3-HL CK-LH
      $hold(posedge CK &&& (ENABLE_RD_AND_NOT_SE_AND_NOT_SI === 1'b1),
      negedge D3 &&& (ENABLE_RD_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold D3-LH CK-LH
      $hold(posedge CK &&& (ENABLE_RD_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge D3 &&& (ENABLE_RD_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup D3-HL CK-LH
      $setup(negedge D3 &&& (ENABLE_RD_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_RD_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // setup D3-LH CK-LH
      $setup(posedge D3 &&& (ENABLE_RD_AND_NOT_SE_AND_NOT_SI === 1'b1),
      posedge CK &&& (ENABLE_RD_AND_NOT_SE_AND_NOT_SI === 1'b1),1.0);
      
      // hold D3-HL CK-LH
      $hold(posedge CK &&& (ENABLE_RD_AND_NOT_SE_AND_SI === 1'b1),
      negedge D3 &&& (ENABLE_RD_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // hold D3-LH CK-LH
      $hold(posedge CK &&& (ENABLE_RD_AND_NOT_SE_AND_SI === 1'b1),
      posedge D3 &&& (ENABLE_RD_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // setup D3-HL CK-LH
      $setup(negedge D3 &&& (ENABLE_RD_AND_NOT_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_RD_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      // setup D3-LH CK-LH
      $setup(posedge D3 &&& (ENABLE_RD_AND_NOT_SE_AND_SI === 1'b1),
      posedge CK &&& (ENABLE_RD_AND_NOT_SE_AND_SI === 1'b1),1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine
`celldefine
module SAEDRVT14_ISOS0CL1_PECO4_1( X1, X2, X3, X4, A1, A2, A3, A4, EN0 );
input A1, A2, A3, A4, EN0;
output X1, X2, X3, X4;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_ISOS0CL1_PECO4_1_func SAEDRVT14_ISOS0CL1_PECO4_1_behav_inst(.X1(X1),.X2(X2),.X3(X3),.X4(X4),.A1(A1),.A2(A2),.A3(A3),.A4(A4),.EN0(EN0));
`else
   SAEDRVT14_ISOS0CL1_PECO4_1_func SAEDRVT14_ISOS0CL1_PECO4_1_inst(.X1(X1),.X2(X2),.X3(X3),.X4(X4),.A1(A1),.A2(A2),.A3(A3),.A4(A4),.EN0(EN0));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A1 --> X1
      (A1 => X1) = (1.0,1.0);
      
      // comb arc EN0 --> X1
      (EN0 => X1) = (1.0,1.0);
      
      // comb arc A2 --> X2
      (A2 => X2) = (1.0,1.0);
      
      // comb arc EN0 --> X2
      (EN0 => X2) = (1.0,1.0);
      
      // comb arc A3 --> X3
      (A3 => X3) = (1.0,1.0);
      
      // comb arc EN0 --> X3
      (EN0 => X3) = (1.0,1.0);
      
      // comb arc A4 --> X4
      (A4 => X4) = (1.0,1.0);
      
      // comb arc EN0 --> X4
      (EN0 => X4) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine
`celldefine
module SAEDRVT14_ISOS0CL1_PECO4_2( X1, X2, X3, X4, A1, A2, A3, A4, EN0 );
input A1, A2, A3, A4, EN0;
output X1, X2, X3, X4;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_ISOS0CL1_PECO4_2_func SAEDRVT14_ISOS0CL1_PECO4_2_behav_inst(.X1(X1),.X2(X2),.X3(X3),.X4(X4),.A1(A1),.A2(A2),.A3(A3),.A4(A4),.EN0(EN0));
`else
   SAEDRVT14_ISOS0CL1_PECO4_2_func SAEDRVT14_ISOS0CL1_PECO4_2_inst(.X1(X1),.X2(X2),.X3(X3),.X4(X4),.A1(A1),.A2(A2),.A3(A3),.A4(A4),.EN0(EN0));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc A1 --> X1
      (A1 => X1) = (1.0,1.0);
      
      // comb arc EN0 --> X1
      (EN0 => X1) = (1.0,1.0);
      
      // comb arc A2 --> X2
      (A2 => X2) = (1.0,1.0);
      
      // comb arc EN0 --> X2
      (EN0 => X2) = (1.0,1.0);
      
      // comb arc A3 --> X3
      (A3 => X3) = (1.0,1.0);
      
      // comb arc EN0 --> X3
      (EN0 => X3) = (1.0,1.0);
      
      // comb arc A4 --> X4
      (A4 => X4) = (1.0,1.0);
      
      // comb arc EN0 --> X4
      (EN0 => X4) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine
`celldefine
module SAEDRVT14_LSRDPQ4_1( CK, D1, D2, D3, D4, Q1, Q2, Q3, Q4, QN1, QN2, QN3, QN4 );
input CK;
input D1, D2, D3, D4;
output Q1, Q2, Q3, Q4, QN1, QN2, QN3, QN4;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_LSRDPQ4_1_func SAEDRVT14_LSRDPQ4_1_behav_inst(.CK(CK),.D1(D1),.D2(D2),.D3(D3),.D4(D4),.Q1(Q1),.Q2(Q2),.Q3(Q3),.Q4(Q4),.QN1(QN1),.QN2(QN2),.QN3(QN3),.QN4(QN4));
`else
   SAEDRVT14_LSRDPQ4_1_func SAEDRVT14_LSRDPQ4_1_inst(.CK(CK),.D1(D1),.D2(D2),.D3(D3),.D4(D4),.Q1(Q1),.Q2(Q2),.Q3(Q3),.Q4(Q4),.QN1(QN1),.QN2(QN2),.QN3(QN3),.QN4(QN4));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // seq arc CK --> Q1
      (posedge CK => (Q1 : D1))  = (1.0,1.0);
      
      // seq arc CK --> Q2
      (posedge CK => (Q2 : D1))  = (1.0,1.0);
      
      // seq arc CK --> Q3
      (posedge CK => (Q3 : D1))  = (1.0,1.0);
      
      // seq arc CK --> Q4
      (posedge CK => (Q4 : D1))  = (1.0,1.0);
      
      // seq arc CK --> QN1
      (posedge CK => (QN1 : D1))  = (1.0,1.0);
      
      // seq arc CK --> QN2
      (posedge CK => (QN2 : D1))  = (1.0,1.0);
      
      // seq arc CK --> QN3
      (posedge CK => (QN3 : D1))  = (1.0,1.0);
      
      // seq arc CK --> QN4
      (posedge CK => (QN4 : D1))  = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine
`celldefine
module SAEDRVT14_LSRDPQ4_2( CK, D1, D2, D3, D4, Q1, Q2, Q3, Q4, QN1, QN2, QN3, QN4 );
input CK;
input D1, D2, D3, D4;
output Q1, Q2, Q3, Q4, QN1, QN2, QN3, QN4;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_LSRDPQ4_2_func SAEDRVT14_LSRDPQ4_2_behav_inst(.CK(CK),.D1(D1),.D2(D2),.D3(D3),.D4(D4),.Q1(Q1),.Q2(Q2),.Q3(Q3),.Q4(Q4),.QN1(QN1),.QN2(QN2),.QN3(QN3),.QN4(QN4));
`else
   SAEDRVT14_LSRDPQ4_2_func SAEDRVT14_LSRDPQ4_2_inst(.CK(CK),.D1(D1),.D2(D2),.D3(D3),.D4(D4),.Q1(Q1),.Q2(Q2),.Q3(Q3),.Q4(Q4),.QN1(QN1),.QN2(QN2),.QN3(QN3),.QN4(QN4));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // seq arc CK --> Q1
      (posedge CK => (Q1 : D1))  = (1.0,1.0);
      
      // seq arc CK --> Q2
      (posedge CK => (Q2 : D1))  = (1.0,1.0);
      
      // seq arc CK --> Q3
      (posedge CK => (Q3 : D1))  = (1.0,1.0);
      
      // seq arc CK --> Q4
      (posedge CK => (Q4 : D1))  = (1.0,1.0);
      
      // seq arc CK --> QN1
      (posedge CK => (QN1 : D1))  = (1.0,1.0);
      
      // seq arc CK --> QN2
      (posedge CK => (QN2 : D1))  = (1.0,1.0);
      
      // seq arc CK --> QN3
      (posedge CK => (QN3 : D1))  = (1.0,1.0);
      
      // seq arc CK --> QN4
      (posedge CK => (QN4 : D1))  = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine
`celldefine
module SAEDRVT14_LSRDPQ_1( D, Q, QN, CK );
input CK, D;
output Q, QN;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_LSRDPQ_1_func SAEDRVT14_LSRDPQ_1_behav_inst(.D(D),.Q(Q),.QN(QN),.CK(CK));
`else
   SAEDRVT14_LSRDPQ_1_func SAEDRVT14_LSRDPQ_1_inst(.D(D),.Q(Q),.QN(QN),.CK(CK));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // seq arc CK --> Q
      (posedge CK => (Q : D))  = (1.0,1.0);
      
      // seq arc CK --> QN
      (posedge CK => (QN : D))  = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine
`celldefine
module SAEDRVT14_LSRDPQ_2( D, Q, QN, CK );
input CK, D;
output Q, QN;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_LSRDPQ_2_func SAEDRVT14_LSRDPQ_2_behav_inst(.D(D),.Q(Q),.QN(QN),.CK(CK));
`else
   SAEDRVT14_LSRDPQ_2_func SAEDRVT14_LSRDPQ_2_inst(.D(D),.Q(Q),.QN(QN),.CK(CK));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // seq arc CK --> Q
      (posedge CK => (Q : D))  = (1.0,1.0);
      
      // seq arc CK --> QN
      (posedge CK => (QN : D))  = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine
`celldefine
module SAEDRVT14_NR2_ISO_1( X, CK, EN );
input CK, EN;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_NR2_ISO_1_func SAEDRVT14_NR2_ISO_1_behav_inst(.X(X),.CK(CK),.EN(EN));
`else
   SAEDRVT14_NR2_ISO_1_func SAEDRVT14_NR2_ISO_1_inst(.X(X),.CK(CK),.EN(EN));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc CK --> X
      (CK => X) = (1.0,1.0);
      
      // comb arc EN --> X
      (EN => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine
`celldefine
module SAEDRVT14_NR2_ISO_4( X, CK, EN );
input CK, EN;
output X;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_NR2_ISO_4_func SAEDRVT14_NR2_ISO_4_behav_inst(.X(X),.CK(CK),.EN(EN));
`else
   SAEDRVT14_NR2_ISO_4_func SAEDRVT14_NR2_ISO_4_inst(.X(X),.CK(CK),.EN(EN));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // comb arc CK --> X
      (CK => X) = (1.0,1.0);
      
      // comb arc EN --> X
      (EN => X) = (1.0,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine
`celldefine
module SAEDRVT14_SRRDPQ4_1( CK, NRESTORE, SAVE, D1, D2, D3, D4, Q1, Q2, Q3, Q4, QN1, QN2, QN3, QN4 );
input CK, NRESTORE, SAVE;
input D1, D2, D3, D4;
output Q1, Q2, Q3, Q4, QN1, QN2, QN3, QN4;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_SRRDPQ4_1_func SAEDRVT14_SRRDPQ4_1_behav_inst(.CK(CK),.NRESTORE(NRESTORE),.SAVE(SAVE),.D1(D1),.D2(D2),.D3(D3),.D4(D4),.Q1(Q1),.Q2(Q2),.Q3(Q3),.Q4(Q4),.QN1(QN1),.QN2(QN2),.QN3(QN3),.QN4(QN4));
`else
   SAEDRVT14_SRRDPQ4_1_func SAEDRVT14_SRRDPQ4_1_inst(.CK(CK),.NRESTORE(NRESTORE),.SAVE(SAVE),.D1(D1),.D2(D2),.D3(D3),.D4(D4),.Q1(Q1),.Q2(Q2),.Q3(Q3),.Q4(Q4),.QN1(QN1),.QN2(QN2),.QN3(QN3),.QN4(QN4));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // setup D1-HL CK-LH
      $setup(negedge D1,posedge CK,1.0);
      
      // setup D1-LH CK-LH
      $setup(posedge D1,posedge CK,1.0);
      
      // setup D2-HL CK-LH
      $setup(negedge D2,posedge CK,1.0);
      
      // setup D2-LH CK-LH
      $setup(posedge D2,posedge CK,1.0);
      
      // setup D3-HL CK-LH
      $setup(negedge D3,posedge CK,1.0);
      
      // setup D3-LH CK-LH
      $setup(posedge D3,posedge CK,1.0);
      
      // setup D4-HL CK-LH
      $setup(negedge D4,posedge CK,1.0);
      
      // setup D4-LH CK-LH
      $setup(posedge D4,posedge CK,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine
`celldefine
module SAEDRVT14_SRRDPQ4_2( CK, NRESTORE, SAVE, D1, D2, D3, D4, Q1, Q2, Q3, Q4, QN1, QN2, QN3, QN4 );
input CK, NRESTORE, SAVE;
input D1, D2, D3, D4;
output Q1, Q2, Q3, Q4, QN1, QN2, QN3, QN4;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_SRRDPQ4_2_func SAEDRVT14_SRRDPQ4_2_behav_inst(.CK(CK),.NRESTORE(NRESTORE),.SAVE(SAVE),.D1(D1),.D2(D2),.D3(D3),.D4(D4),.Q1(Q1),.Q2(Q2),.Q3(Q3),.Q4(Q4),.QN1(QN1),.QN2(QN2),.QN3(QN3),.QN4(QN4));
`else
   SAEDRVT14_SRRDPQ4_2_func SAEDRVT14_SRRDPQ4_2_inst(.CK(CK),.NRESTORE(NRESTORE),.SAVE(SAVE),.D1(D1),.D2(D2),.D3(D3),.D4(D4),.Q1(Q1),.Q2(Q2),.Q3(Q3),.Q4(Q4),.QN1(QN1),.QN2(QN2),.QN3(QN3),.QN4(QN4));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      // setup D1-HL CK-LH
      $setup(negedge D1,posedge CK,1.0);
      
      // setup D1-LH CK-LH
      $setup(posedge D1,posedge CK,1.0);
      
      // setup D2-HL CK-LH
      $setup(negedge D2,posedge CK,1.0);
      
      // setup D2-LH CK-LH
      $setup(posedge D2,posedge CK,1.0);
      
      // setup D3-HL CK-LH
      $setup(negedge D3,posedge CK,1.0);
      
      // setup D3-LH CK-LH
      $setup(posedge D3,posedge CK,1.0);
      
      // setup D4-HL CK-LH
      $setup(negedge D4,posedge CK,1.0);
      
      // setup D4-LH CK-LH
      $setup(posedge D4,posedge CK,1.0);
      
      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine
`celldefine
module SAEDRVT14_SRRDPQ_1( CK, D, NRESTORE, Q, QN, SAVE );
input CK, D, NRESTORE, SAVE;
output Q, QN;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_SRRDPQ_1_func SAEDRVT14_SRRDPQ_1_behav_inst(.CK(CK),.D(D),.NRESTORE(NRESTORE),.Q(Q),.QN(QN),.SAVE(SAVE));
`else
   SAEDRVT14_SRRDPQ_1_func SAEDRVT14_SRRDPQ_1_inst(.CK(CK),.D(D),.NRESTORE(NRESTORE),.Q(Q),.QN(QN),.SAVE(SAVE));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine
`celldefine
module SAEDRVT14_SRRDPQ_2( CK, D, NRESTORE, Q, QN, SAVE );
input CK, D, NRESTORE, SAVE;
output Q, QN;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_SRRDPQ_2_func SAEDRVT14_SRRDPQ_2_behav_inst(.CK(CK),.D(D),.NRESTORE(NRESTORE),.Q(Q),.QN(QN),.SAVE(SAVE));
`else
   SAEDRVT14_SRRDPQ_2_func SAEDRVT14_SRRDPQ_2_inst(.CK(CK),.D(D),.NRESTORE(NRESTORE),.Q(Q),.QN(QN),.SAVE(SAVE));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine
`celldefine
module SAEDRVT14_SSRRDPQ4_1( SR, CK, D1, D2, D3, D4, Q1, Q2, Q3, Q4, QN1, QN2, QN3, QN4 );
input CK, SR;
input D1, D2, D3, D4;
output Q1, Q2, Q3, Q4, QN1, QN2, QN3, QN4;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_SSRRDPQ4_1_func SAEDRVT14_SSRRDPQ4_1_behav_inst(.SR(SR),.CK(CK),.D1(D1),.D2(D2),.D3(D3),.D4(D4),.Q1(Q1),.Q2(Q2),.Q3(Q3),.Q4(Q4),.QN1(QN1),.QN2(QN2),.QN3(QN3),.QN4(QN4));
`else
   SAEDRVT14_SSRRDPQ4_1_func SAEDRVT14_SSRRDPQ4_1_inst(.SR(SR),.CK(CK),.D1(D1),.D2(D2),.D3(D3),.D4(D4),.Q1(Q1),.Q2(Q2),.Q3(Q3),.Q4(Q4),.QN1(QN1),.QN2(QN2),.QN3(QN3),.QN4(QN4));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine
`celldefine
module SAEDRVT14_SSRRDPQ4_2( SR, CK, D1, D2, D3, D4, Q1, Q2, Q3, Q4, QN1, QN2, QN3, QN4 );
input CK, SR;
input D1, D2, D3, D4;
output Q1, Q2, Q3, Q4, QN1, QN2, QN3, QN4;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_SSRRDPQ4_2_func SAEDRVT14_SSRRDPQ4_2_behav_inst(.SR(SR),.CK(CK),.D1(D1),.D2(D2),.D3(D3),.D4(D4),.Q1(Q1),.Q2(Q2),.Q3(Q3),.Q4(Q4),.QN1(QN1),.QN2(QN2),.QN3(QN3),.QN4(QN4));
`else
   SAEDRVT14_SSRRDPQ4_2_func SAEDRVT14_SSRRDPQ4_2_inst(.SR(SR),.CK(CK),.D1(D1),.D2(D2),.D3(D3),.D4(D4),.Q1(Q1),.Q2(Q2),.Q3(Q3),.Q4(Q4),.QN1(QN1),.QN2(QN2),.QN3(QN3),.QN4(QN4));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine
`celldefine
module SAEDRVT14_SSRRDPQ_1( D, Q, QN, SR, CK );
input CK, D, SR;
output Q, QN;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_SSRRDPQ_1_func SAEDRVT14_SSRRDPQ_1_behav_inst(.D(D),.Q(Q),.QN(QN),.SR(SR),.CK(CK));
`else
   SAEDRVT14_SSRRDPQ_1_func SAEDRVT14_SSRRDPQ_1_inst(.D(D),.Q(Q),.QN(QN),.SR(SR),.CK(CK));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine
`celldefine
module SAEDRVT14_SSRRDPQ_2( D, Q, QN, SR, CK );
input CK, D, SR;
output Q, QN;

`ifdef FUNCTIONAL  //  functional //
   SAEDRVT14_SSRRDPQ_2_func SAEDRVT14_SSRRDPQ_2_behav_inst(.D(D),.Q(Q),.QN(QN),.SR(SR),.CK(CK));
`else
   SAEDRVT14_SSRRDPQ_2_func SAEDRVT14_SSRRDPQ_2_inst(.D(D),.Q(Q),.QN(QN),.SR(SR),.CK(CK));
   // spec_gates_begin
   // spec_gates_end
   // specify_block_begin
   specify

      
   // specify_block_end 
   endspecify

`endif 

endmodule
`endcelldefine
